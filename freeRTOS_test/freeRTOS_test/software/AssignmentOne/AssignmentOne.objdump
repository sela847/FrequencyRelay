
AssignmentOne.elf:     file format elf32-littlenios2
AssignmentOne.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000254

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001fb40 memsz 0x0001fb40 flags r-x
    LOAD off    0x00021000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00021000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00002c8c memsz 0x000800c8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01000000  01000000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000234  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f90c  00000254  00000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b20  08000000  08000000  00021000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000216c  08000b20  08000b20  00021b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0007d43c  08002c8c  08002c8c  00023c8c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001fb60  0001fb60  00023c8c  2**0
                  CONTENTS
  7 .flash_controller 00000000  01000020  01000020  00023c8c  2**0
                  CONTENTS
  8 .sdram        00000000  080800c8  080800c8  00023c8c  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00023c8c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001268  00000000  00000000  00023cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00031398  00000000  00000000  00024f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000c2cf  00000000  00000000  000562b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010ddf  00000000  00000000  0006257f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000045b0  00000000  00000000  00073360  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000665c  00000000  00000000  00077910  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001e1fd  00000000  00000000  0007df6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  0009c16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001dc0  00000000  00000000  0009c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000a4215  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  000a4218  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000a421d  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000a421e  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000a421f  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000a4223  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000a4227  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000a422b  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000a4234  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000a423d  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000005  00000000  00000000  000a4246  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000037  00000000  00000000  000a424b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b3e3a  00000000  00000000  000a4282  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000254 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000b20 l    d  .rwdata	00000000 .rwdata
08002c8c l    d  .bss	00000000 .bss
0001fb60 l    d  .onchip_memory	00000000 .onchip_memory
01000020 l    d  .flash_controller	00000000 .flash_controller
080800c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AssignmentOne_bsp//obj/HAL/src/crt0.o
00000298 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/port_asm.o
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 croutine.c
08002d98 l     O .bss	00000028 pxReadyCoRoutineLists
08002dc0 l     O .bss	00000014 xDelayedCoRoutineList1
08002dd4 l     O .bss	00000014 xDelayedCoRoutineList2
08002c8c l     O .bss	00000004 pxDelayedCoRoutineList
08002c90 l     O .bss	00000004 pxOverflowDelayedCoRoutineList
08002de8 l     O .bss	00000014 xPendingReadyCoRoutineList
08002c98 l     O .bss	00000004 uxTopCoRoutineReadyPriority
08002c9c l     O .bss	00000004 xCoRoutineTickCount
08002ca0 l     O .bss	00000004 xLastTickCount
08002ca4 l     O .bss	00000004 xPassedTicks
000007bc l     F .text	000000a0 prvInitialiseCoRoutineLists
00000498 l     F .text	000000e0 prvCheckPendingReadyList
00000578 l     F .text	00000158 prvCheckDelayedList
00000000 l    df *ABS*	00000000 event_groups.c
00000f60 l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 heap.c
08002dfc l     O .bss	0007d000 xHeap
08002c2c l     O .rwdata	00000002 heapSTRUCT_SIZE
08002c30 l     O .rwdata	00000004 xTotalHeapSize
08002ca8 l     O .bss	00000008 xStart
08002cb0 l     O .bss	00000004 pxEnd
08002c34 l     O .rwdata	00000004 xFreeBytesRemaining
00001210 l     F .text	000000c0 prvHeapInit
000012d0 l     F .text	00000134 prvInsertBlockIntoFreeList
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
000016d4 l     F .text	0000002c prvReadGp
00001838 l     F .text	0000009c prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 queue.c
00002690 l     F .text	00000190 prvCopyDataToQueue
00002a40 l     F .text	00000058 prvIsQueueFull
000028bc l     F .text	000000f4 prvUnlockQueue
00002820 l     F .text	0000009c prvCopyDataFromQueue
000029b0 l     F .text	00000050 prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
0807fdfc l     O .bss	000000f0 pxReadyTasksLists
0807feec l     O .bss	00000014 xDelayedTaskList1
0807ff00 l     O .bss	00000014 xDelayedTaskList2
08002cb8 l     O .bss	00000004 pxDelayedTaskList
08002cbc l     O .bss	00000004 pxOverflowDelayedTaskList
0807ff14 l     O .bss	00000014 xPendingReadyList
0807ff28 l     O .bss	00000014 xTasksWaitingTermination
08002cc0 l     O .bss	00000004 uxTasksDeleted
08002cc4 l     O .bss	00000004 uxCurrentNumberOfTasks
08002cc8 l     O .bss	00000004 xTickCount
08002ccc l     O .bss	00000004 uxTopReadyPriority
08002cd0 l     O .bss	00000004 xSchedulerRunning
08002cd4 l     O .bss	00000004 uxPendedTicks
08002cd8 l     O .bss	00000004 xYieldPending
08002cdc l     O .bss	00000004 xNumOfOverflows
08002ce0 l     O .bss	00000004 uxTaskNumber
08002c38 l     O .rwdata	00000004 xNextTaskUnblockTime
08002ce4 l     O .bss	00000004 uxSchedulerSuspended
00003bdc l     F .text	000000c4 prvAllocateTCBAndStack
000038b0 l     F .text	0000014c prvInitialiseTCBVariables
000039fc l     F .text	000000ac prvInitialiseTaskLists
00003da8 l     F .text	00000068 prvResetNextTaskUnblockTime
00003b50 l     F .text	0000008c prvAddCurrentTaskToDelayedList
00003894 l     F .text	0000001c prvIdleTask
08000039 l     O .rodata	00000014 ucExpectedStackBytes.2845
00003aa8 l     F .text	000000a8 prvCheckTasksWaitingTermination
00003d64 l     F .text	00000044 prvDeleteTCB
00003ca0 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
0807ff3c l     O .bss	00000014 xActiveTimerList1
0807ff50 l     O .bss	00000014 xActiveTimerList2
08002ce8 l     O .bss	00000004 pxCurrentTimerList
08002cec l     O .bss	00000004 pxOverflowTimerList
08002cf0 l     O .bss	00000004 xTimerQueue
00005008 l     F .text	0000007c prvCheckForValidListAndQueue
00004ae4 l     F .text	0000003c prvTimerTask
00004a2c l     F .text	000000b8 prvProcessExpiredTimer
00004c84 l     F .text	000000dc prvInsertTimerInActiveList
00004bc0 l     F .text	00000060 prvGetNextExpireTime
00004b20 l     F .text	000000a0 prvProcessTimerOrBlockTask
00004d60 l     F .text	00000198 prvProcessReceivedCommands
00004c20 l     F .text	00000064 prvSampleTimeNow
08002cf4 l     O .bss	00000004 xLastTime.2766
00004ef8 l     F .text	00000110 prvSwitchTimerLists
00000000 l    df *ABS*	00000000 hello_world.c
000054f4 l     F .text	00000058 Switch_Control_Task
0000554c l     F .text	00000180 Load_LED_Ctrl_Task
00005e60 l     F .text	00000164 Keyboard_Task
00005ae4 l     F .text	0000037c Stability_Monitor_Task
000056cc l     F .text	00000418 Load_Management_Task
00005fc4 l     F .text	000009fc VGA_Task
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080003b6 l     O .rodata	00000010 zeroes.4389
080003c6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
080003d6 l     O .rodata	00000010 zeroes.4404
0000de74 l     F .text	000000bc __sbprintf
080003e6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000e084 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000fbb4 l     F .text	00000008 __fp_unlock
0000fbc8 l     F .text	0000019c __sinit.part.1
0000fd64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08000b20 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08000f64 l     O .rwdata	00000020 lc_ctype_charset
08000f44 l     O .rwdata	00000020 lc_message_charset
08000f84 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08000418 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800054c l     O .rodata	00000010 blanks.4332
0800053c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
000142fc l     F .text	000000fc __sprint_r.part.0
0800056c l     O .rodata	00000010 blanks.4348
0800055c l     O .rodata	00000010 zeroes.4349
00015888 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000177f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00017904 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00017930 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00017a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00017afc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00017cd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08002c70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00017f1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00018050 l     F .text	00000034 alt_dev_reg
0800156c l     O .rwdata	000000dc flash_controller
08001648 l     O .rwdata	00001060 jtag_uart
080026a8 l     O .rwdata	00000120 character_lcd
080027c8 l     O .rwdata	000000c4 uart
0800288c l     O .rwdata	00000038 ps2
080028c4 l     O .rwdata	00000048 video_character_buffer_with_dma
0800290c l     O .rwdata	00000054 video_pixel_buffer_dma
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
00018410 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
00019260 l     F .text	00000080 alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001a308 l     F .text	00000210 altera_avalon_jtag_uart_irq
0001a518 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
08002c74 l     O .rwdata	00000004 colstart
0001ab50 l     F .text	000000b8 lcd_write_command
0001ac08 l     F .text	000000d8 lcd_write_data
0001ace0 l     F .text	000000d0 lcd_clear_screen
0001adb0 l     F .text	000001f0 lcd_repaint_screen
0001afa0 l     F .text	000000cc lcd_scroll_up
0001b06c l     F .text	000002ac lcd_handle_escape
0001b7ec l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001ba28 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0001bccc l     F .text	000000a0 altera_avalon_uart_irq
0001bd6c l     F .text	000000e4 altera_avalon_uart_rxirq
0001be50 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0001bfec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0001c204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
08002d8c l     O .bss	00000004 state.2101
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001e3b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001e69c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0001e7dc l     F .text	0000003c alt_get_errno
0001e818 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0001efbc l     F .text	000000cc alt_write_word_amd
0001eea0 l     F .text	0000011c alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
0001f294 l     F .text	0000017c alt_unlock_block_intel
0001f410 l     F .text	000000d4 alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0800099e l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012534 g     F .text	00000074 _mprec_log10
00012620 g     F .text	0000008c __any_on
00015e24 g     F .text	00000054 _isatty_r
08000424 g     O .rodata	00000028 __mprec_tinytens
00017c0c g     F .text	0000007c alt_main
0001f804 g     F .text	00000090 strcpy
0001d650 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
00009858 g     F .text	000000c0 _puts_r
00018d24 g     F .text	00000040 alt_read_query_entry_32bit
0001c638 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0807ffc8 g     O .bss	00000100 alt_irq
00015e78 g     F .text	00000060 _lseek_r
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
000034b4 g     F .text	00000080 vTaskPlaceOnUnorderedEventList
000011d0 g     F .text	00000020 xPortGetFreeHeapSize
000184d4 g     F .text	000002a8 alt_flash_cfi_write
00000cb8 g     F .text	0000003c xEventGroupGetBitsFromISR
000175d4 g     F .text	00000088 .hidden __eqdf2
080800c8 g       *ABS*	00000000 __alt_heap_start
00004874 g     F .text	000000ac xTimerCreate
0000981c g     F .text	0000003c printf
00016090 g     F .text	0000009c _wcrtomb_r
0807ff8c g     O .bss	00000014 Prev_Five_Freq
00012db0 g     F .text	0000005c __sseek
0000ff04 g     F .text	00000010 __sinit
00015f38 g     F .text	00000140 __swbuf_r
0001cc24 g     F .text	000000fc alt_up_char_buffer_string
0001c450 g     F .text	00000034 read_CE_bit
00002ae0 g     F .text	00000098 vQueueWaitForMessageRestricted
000109cc g     F .text	0000007c _setlocale_r
0000fd6c g     F .text	00000068 __sfmoreglue
00017cac g     F .text	00000024 __malloc_unlock
0001c7d8 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
08002cfc g     O .bss	00000004 Maintenance
0001cb58 g     F .text	000000cc alt_up_char_buffer_draw
00000938 g     F .text	0000017c xEventGroupSync
00011554 g     F .text	0000015c memmove
0000085c g     F .text	00000088 xCoRoutineRemoveFromEventList
08002960 g     O .rwdata	00000198 key_table
000040a8 g     F .text	00000054 vTaskEnterCritical
0000feec g     F .text	00000018 _cleanup
08002d00 g     O .bss	00000004 Current_Switch_State
0807ffa0 g     O .bss	00000014 Current_ROC_Freq
0000207c g     F .text	000000e0 xQueueGenericSendFromISR
08002d04 g     O .bss	00000004 Init_Load
000116b0 g     F .text	000000a8 _Balloc
00007368 g     F .text	00000070 .hidden __fixsfsi
0001cdb8 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
00007de4 g     F .text	000000dc .hidden __gtdf2
00018ebc g     F .text	00000050 alt_write_flash_command_32bit_device_16bit_mode
0001cd7c g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	00000000 __reset
00001d4c g     F .text	00000090 xQueueGiveMutexRecursive
08002cb4 g     O .bss	00000004 pxCurrentTCB
0001dc30 g     F .text	00000070 get_multi_byte_make_code_index
00015dc8 g     F .text	0000005c _fstat_r
000189c8 g     F .text	000002e0 alt_flash_program_block
08002d08 g     O .bss	00000004 semaphore
08002d78 g     O .bss	00000004 errno
00012d2c g     F .text	00000008 __seofread
000130c0 g     F .text	0000123c ___svfiprintf_internal_r
0001e018 g     F .text	00000064 set_keyboard_rate
08002d84 g     O .bss	00000004 alt_argv
000043ac g     F .text	00000188 xTaskNotify
0800ac2a g       *ABS*	00000000 _gp
0001ebd4 g     F .text	00000030 usleep
00006e84 g     F .text	000004e4 .hidden __subsf3
0001cf4c g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00000ab4 g     F .text	0000019c xEventGroupWaitBits
0001e194 g     F .text	00000078 reset_keyboard
080013ec g     O .rwdata	00000180 alt_fd_list
000017e0 g     F .text	00000038 xPortStartScheduler
08002d0c g     O .bss	00000004 Ld_Manage_State
00002f24 g     F .text	00000048 vTaskEndScheduler
0001e550 g     F .text	00000090 alt_find_dev
0000957c g     F .text	00000148 memcpy
00003448 g     F .text	0000006c vTaskPlaceOnEventList
00002b78 g     F .text	000001c4 xTaskGenericCreate
0001cd20 g     F .text	0000005c alt_up_char_buffer_clear
0000fbbc g     F .text	0000000c _cleanup_r
00008f54 g     F .text	000000dc .hidden __floatsidf
0001e760 g     F .text	0000007c alt_io_redirect
0001765c g     F .text	000000f4 .hidden __ltdf2
00002514 g     F .text	0000007c xQueuePeekFromISR
0001fb60 g       *ABS*	00000000 __DTOR_END__
00009918 g     F .text	00000014 puts
00001150 g     F .text	00000080 vPortFree
00012c10 g     F .text	00000074 __fpclassifyd
0000029c g     F .text	00000144 xCoRoutineCreate
00012490 g     F .text	000000a4 __ratio
01000000 g       *ABS*	00000000 __alt_mem_flash_controller
0001586c g     F .text	0000001c __vfiprintf_internal
0001d008 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0001a710 g     F .text	0000021c altera_avalon_jtag_uart_read
000097ec g     F .text	00000030 _printf_r
00009444 g     F .text	00000064 .hidden __udivsi3
00017a58 g     F .text	000000a4 isatty
08000474 g     O .rodata	000000c8 __mprec_tens
00003d04 g     F .text	00000060 uxTaskGetStackHighWaterMark
0001d440 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
00010a48 g     F .text	0000000c __locale_charset
000069c0 g     F .text	000000c8 .hidden __lesf2
00001498 g     F .text	0000008c vListInsertEnd
08002d74 g     O .bss	00000004 __malloc_top_pad
000008e4 g     F .text	00000054 xEventGroupCreate
08002c44 g     O .rwdata	00000004 __mb_cur_max
00010a78 g     F .text	0000000c _localeconv_r
00011abc g     F .text	0000003c __i2b
00010388 g     F .text	000004bc __sfvwrite_r
00012c84 g     F .text	00000054 _sbrk_r
0001f088 g     F .text	00000080 alt_program_intel
0001d964 g     F .text	00000084 helper_plot_pixel
00000ee8 g     F .text	0000003c vEventGroupSetBitsCallback
00015ed8 g     F .text	00000060 _read_r
0000146c g     F .text	0000002c vListInitialiseItem
0001e338 g     F .text	00000078 alt_dcache_flush
08002c64 g     O .rwdata	00000004 alt_max_fd
00018ca8 g     F .text	0000003c alt_read_query_entry_8bit
000018d4 g     F .text	0000004c vPortSysTickHandler
00015abc g     F .text	000000f0 _fclose_r
0001c484 g     F .text	00000030 read_num_bytes_available
0001f108 g     F .text	0000018c alt_erase_block_intel
0000fb84 g     F .text	00000030 fflush
08002af8 g     O .rwdata	00000066 ascii_codes
08002d70 g     O .bss	00000004 __malloc_max_sbrked_mem
00001920 g     F .text	00000170 alt_irq_register
0001c3ec g     F .text	00000034 read_RI_bit
00009030 g     F .text	00000110 .hidden __extendsfdf2
00016d28 g     F .text	000008ac .hidden __adddf3
00012238 g     F .text	0000010c __b2d
0001d03c g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
000167f0 g     F .text	00000538 .hidden __umoddi3
00017b38 g     F .text	000000d4 lseek
08002c3c g     O .rwdata	00000004 _global_impure_ptr
00000cf4 g     F .text	00000180 xEventGroupSetBits
000126ac g     F .text	00000564 _realloc_r
080800c8 g       *ABS*	00000000 __bss_end
0001d164 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
0001eacc g     F .text	00000108 alt_tick
00016278 g     F .text	00000578 .hidden __udivdi3
00015d24 g     F .text	00000024 _fputwc_r
0800044c g     O .rodata	00000028 __mprec_bigtens
000118a0 g     F .text	00000104 __s2b
00017750 g     F .text	000000a8 .hidden __floatunsidf
00011f78 g     F .text	00000060 __mcmp
00000fd0 g     F .text	00000180 pvPortMalloc
0001bc28 g     F .text	000000a4 altera_avalon_uart_init
0001c4e8 g     F .text	0000002c read_data_byte
0000ff24 g     F .text	00000018 __fp_lock_all
08002d10 g     O .bss	00000004 LoadTimeExp
00002654 g     F .text	0000003c vQueueDelete
00001818 g     F .text	00000020 vPortEndScheduler
00001404 g     F .text	00000068 vListInitialise
0001ea30 g     F .text	0000009c alt_alarm_stop
0001c420 g     F .text	00000030 read_RE_bit
08002d7c g     O .bss	00000004 alt_irq_active
0000017c g     F .exceptions	000000d8 alt_irq_handler
080013c4 g     O .rwdata	00000028 alt_dev_null
000030dc g     F .text	00000028 xTaskGetTickCount
00001edc g     F .text	000001a0 xQueueGenericSend
00005104 g     F .text	0000003c MaintenanceStateButton
000191c4 g     F .text	0000009c alt_set_flash_algorithm_func
0001c698 g     F .text	00000074 alt_up_ps2_write_data_byte
000119a4 g     F .text	00000068 __hi0bits
0001d89c g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
00008ed4 g     F .text	00000080 .hidden __fixdfsi
00003fac g     F .text	000000fc xTaskPriorityDisinherit
08002d14 g     O .bss	00000004 Thresh_Val
00018d64 g     F .text	00000044 alt_write_flash_command_8bit_device_8bit_mode
08002bc4 g     O .rwdata	00000066 multi_byte_make_code
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
08002c5c g     O .rwdata	00000008 alt_dev_list
00017f58 g     F .text	000000f8 write
08002d18 g     O .bss	00000004 LoadTimer
0001d9e8 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
000035a0 g     F .text	000000f4 xTaskRemoveFromEventList
0001796c g     F .text	000000b0 fstat
08002d1c g     O .bss	00000004 threshold_mutex
00000c50 g     F .text	00000068 xEventGroupClearBits
0001765c g     F .text	000000f4 .hidden __ledf2
0001a018 g     F .text	000000d8 alt_check_primary_table
00011cf0 g     F .text	00000140 __pow5mult
00014410 g     F .text	0000145c ___vfiprintf_internal_r
08002d68 g     O .bss	00000004 __nlocale_changed
000094a8 g     F .text	00000058 .hidden __umodsi3
00018808 g     F .text	00000064 alt_flash_cfi_read
00018f5c g     F .text	00000038 alt_write_native_8bit
08002d20 g     O .bss	00000004 TimeQ
080800c8 g       *ABS*	00000000 end
0001c9c8 g     F .text	00000098 alt_up_ps2_write_fd
00018da8 g     F .text	00000078 alt_write_flash_command_16bit_device_8bit_mode
0001b318 g     F .text	000004d4 altera_avalon_lcd_16207_write
00002d3c g     F .text	000000d0 vTaskDelete
0001ca9c g     F .text	00000080 alt_up_char_buffer_init
0001c240 g     F .text	000001ac altera_avalon_uart_write
000192e0 g     F .text	000005c8 alt_read_cfi_table
0001a254 g     F .text	000000b4 altera_avalon_jtag_uart_init
000041a0 g     F .text	00000038 pvTaskIncrementMutexHeldCount
0001fb60 g       *ABS*	00000000 __CTOR_LIST__
0807ffb4 g     O .bss	00000014 start_time
10000000 g       *ABS*	00000000 __alt_stack_pointer
0001baa4 g     F .text	00000074 alt_avalon_timer_sc_init
08002d24 g     O .bss	00000004 Prev_Stable
0001bb78 g     F .text	00000060 altera_avalon_uart_write_fd
000092e8 g     F .text	00000064 .hidden __clzsi2
0001bbd8 g     F .text	00000050 altera_avalon_uart_close_fd
0001a92c g     F .text	00000224 altera_avalon_jtag_uart_write
00018444 g     F .text	00000090 alt_flash_cfi_init
0000ff14 g     F .text	00000004 __sfp_lock_acquire
00011470 g     F .text	000000e4 memchr
0000bc60 g     F .text	000021f8 ___vfprintf_internal_r
0000992c g     F .text	00000058 _sprintf_r
000037a8 g     F .text	000000c4 xTaskCheckForTimeOut
000006d0 g     F .text	000000ec vCoRoutineSchedule
00010078 g     F .text	00000310 _free_r
00010a54 g     F .text	00000010 __locale_mb_cur_max
08002c94 g     O .bss	00000004 pxCurrentCoRoutine
0001f9ac g     F .text	00000180 __call_exitprocs
0001e07c g     F .text	00000118 translate_make_code
08002d64 g     O .bss	00000004 __mlocale_changed
000041d8 g     F .text	000000cc ulTaskNotifyTake
08002c48 g     O .rwdata	00000004 __malloc_sbrk_base
00000254 g     F .text	00000048 _start
08002d90 g     O .bss	00000004 _alt_tick_rate
00002f6c g     F .text	0000002c vTaskSuspendAll
00003104 g     F .text	0000002c xTaskGetTickCountFromISR
00011e30 g     F .text	00000148 __lshift
08002d94 g     O .bss	00000004 _alt_nticks
00017d0c g     F .text	000000fc read
000180bc g     F .text	00000354 alt_sys_init
000073d8 g     F .text	00000124 .hidden __floatsisf
00012ef0 g     F .text	000001d0 __ssprint_r
000015fc g     F .text	00000098 uxListRemove
0001f894 g     F .text	00000118 __register_exitproc
0001c8e4 g     F .text	00000058 alt_up_ps2_clear_fifo
00018ce4 g     F .text	00000040 alt_read_query_entry_16bit
00011af8 g     F .text	000001f8 __multiply
0001a5b8 g     F .text	00000068 altera_avalon_jtag_uart_close
00003e84 g     F .text	00000128 vTaskPriorityInherit
0807ff64 g     O .bss	00000028 __malloc_current_mallinfo
00019000 g     F .text	000001c4 alt_set_flash_width_func
00012344 g     F .text	0000014c __d2b
08002d28 g     O .bss	00000004 freqSemaphore
00003314 g     F .text	00000134 vTaskSwitchContext
00004534 g     F .text	000001bc xTaskNotifyFromISR
00005218 g     F .text	0000004c freq_relay_isr
0001a0f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08002d2c g     O .bss	00000004 StabilityQ
0001f714 g     F .text	000000a4 alt_get_fd
00003534 g     F .text	0000006c vTaskPlaceOnEventListRestricted
0001f4e4 g     F .text	00000128 alt_busy_sleep
000159a4 g     F .text	00000054 _close_r
000042a4 g     F .text	00000108 xTaskNotifyWait
0001ec90 g     F .text	00000210 alt_erase_block_amd
0001df5c g     F .text	000000bc decode_scancode
00009500 g     F .text	0000007c memcmp
0001a1b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080800c8 g       *ABS*	00000000 __alt_stack_base
0001a200 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002d30 g     O .bss	00000004 PRVGADraw
00004920 g     F .text	000000dc xTimerGenericCommand
0000df30 g     F .text	00000154 __swsetup_r
000198a8 g     F .text	00000770 alt_read_cfi_width
00001694 g     F .text	00000040 vApplicationStackOverflowHook
000074fc g     F .text	000008e8 .hidden __divdf3
08002d34 g     O .bss	00000004 recordTime
0000fdd4 g     F .text	00000118 __sfp
08002d38 g     O .bss	00000004 Current_Stable
000125a8 g     F .text	00000078 __copybits
00003130 g     F .text	00000020 uxTaskGetNumberOfTasks
08002d3c g     O .bss	00000001 byte
08000fbc g     O .rwdata	00000408 __malloc_av_
0000ff20 g     F .text	00000004 __sinit_lock_release
00007ec0 g     F .text	00000718 .hidden __muldf3
00012cd8 g     F .text	00000054 __sread
0001f60c g     F .text	00000108 alt_find_file
0001e3ec g     F .text	000000a4 alt_dev_llist_insert
00017c88 g     F .text	00000024 __malloc_lock
00017e6c g     F .text	000000b0 sbrk
00009a88 g     F .text	000021d8 ___svfprintf_internal_r
00001ddc g     F .text	000000a8 xQueueTakeMutexRecursive
0000fb28 g     F .text	0000005c _fflush_r
00000e74 g     F .text	00000074 vEventGroupDelete
000159f8 g     F .text	000000c4 _calloc_r
08002c78 g     O .rwdata	00000008 alt_flash_dev_list
00018e70 g     F .text	0000004c alt_write_flash_command_16bit_device_16bit_mode
08002c8c g       *ABS*	00000000 __bss_start
000096c4 g     F .text	00000128 memset
00005264 g     F .text	00000290 main
0001dca0 g     F .text	00000070 get_single_byte_make_code_index
08002d88 g     O .bss	00000004 alt_envp
08002d6c g     O .bss	00000004 __malloc_max_total_mem
0001cfa8 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
0001cb1c g     F .text	0000003c alt_up_char_buffer_open_dev
0001a150 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00016078 g     F .text	00000018 __swbuf
000069c0 g     F .text	000000c8 .hidden __ltsf2
00001524 g     F .text	000000d8 vListInsert
0001b898 g     F .text	00000130 altera_avalon_lcd_16207_init
00012e0c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08002d40 g     O .bss	00000004 Freq_Val
00015bac g     F .text	00000014 fclose
00004808 g     F .text	0000006c xTimerCreateTimerTask
0001c874 g     F .text	00000070 alt_up_ps2_read_data_byte
00009140 g     F .text	000001a8 .hidden __truncdfsf2
0000e284 g     F .text	00001688 _dtoa_r
00010c64 g     F .text	0000080c _malloc_r
000161ec g     F .text	00000030 __ascii_wctomb
000049fc g     F .text	00000030 pcTimerGetTimerName
08002c68 g     O .rwdata	00000004 alt_errno
00018f0c g     F .text	00000050 alt_write_flash_command_32bit_device_32bit_mode
00010844 g     F .text	000000c4 _fwalk
0000243c g     F .text	000000d8 xQueueReceiveFromISR
0001886c g     F .text	0000015c alt_write_value_to_flash
00003e10 g     F .text	00000028 xTaskGetCurrentTaskHandle
0001ca60 g     F .text	0000003c alt_up_ps2_open_dev
00018f94 g     F .text	00000038 alt_write_native_16bit
0000934c g     F .text	00000084 .hidden __divsi3
00001ba8 g     F .text	000000d8 xQueueGenericCreate
0000ff54 g     F .text	00000124 _malloc_trim_r
0001c5dc g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001fb60 g       *ABS*	00000000 __CTOR_END__
00006a88 g     F .text	000003fc .hidden __mulsf3
00012e14 g     F .text	000000dc strcmp
08002d44 g     O .bss	00000004 time_end
00001e84 g     F .text	00000058 xQueueCreateCountingSemaphore
0001fb60 g       *ABS*	00000000 __DTOR_LIST__
000175d4 g     F .text	00000088 .hidden __nedf2
00018084 g     F .text	00000038 alt_irq_init
00003694 g     F .text	000000d8 xTaskRemoveFromUnorderedEventList
00017e08 g     F .text	00000064 alt_release_fd
00002f98 g     F .text	00000144 xTaskResumeAll
000025d0 g     F .text	00000054 uxQueueSpacesAvailable
0001c4b4 g     F .text	00000034 read_data_valid
00009984 g     F .text	0000006c sprintf
0800026d g     O .rodata	00000100 .hidden __clz_tab
00002e84 g     F .text	000000a0 vTaskStartScheduler
08002d60 g     O .bss	00000004 _PathLocale
0001c774 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001f7b8 g     F .text	00000014 atexit
00015944 g     F .text	00000060 _write_r
00010a84 g     F .text	00000018 setlocale
00002a98 g     F .text	00000048 xQueueIsQueueFullFromISR
000050d4 g     F .text	00000030 pvTimerGetTimerID
08002d48 g     O .bss	00000004 switch_control_handle
000003e0 g     F .text	000000b8 vCoRoutineAddToDelayedList
08002c40 g     O .rwdata	00000004 _impure_ptr
08002d80 g     O .bss	00000004 alt_argc
0000f90c g     F .text	0000021c __sflush_r
0001e4f0 g     F .text	00000060 _do_dtors
00010a70 g     F .text	00000008 __locale_cjk_lang
08002cf8 g     O .bss	00000001 use_ROC_Thresh
000121d4 g     F .text	00000064 __ulp
0000ff3c g     F .text	00000018 __fp_unlock_all
0000386c g     F .text	00000028 vTaskMissedYield
0001b9c8 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
08002d4c g     O .bss	00000004 Current_Freq
08002c54 g     O .rwdata	00000008 alt_fs_list
00018e20 g     F .text	00000050 alt_write_flash_command_32bit_device_8bit_mode
00002590 g     F .text	00000040 uxQueueMessagesWaiting
0000222c g     F .text	00000210 xQueueGenericReceive
08002d50 g     O .bss	00000004 Thresh_ROC
00003150 g     F .text	000001c4 xTaskIncrementTick
00010a9c g     F .text	0000000c localeconv
00001a90 g     F .text	00000118 xQueueGenericReset
08002c8c g       *ABS*	00000000 _edata
0001bb18 g     F .text	00000060 altera_avalon_uart_read_fd
080800c8 g       *ABS*	00000000 _end
0001e5e0 g     F .text	00000068 alt_flash_open_dev
00015bc0 g     F .text	00000164 __fputwc
08002d54 g     O .bss	00000004 readStart
0001a620 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000011f0 g     F .text	00000020 vPortInitialiseBlocks
00005084 g     F .text	00000050 xTimerIsTimerActive
00012d34 g     F .text	0000007c __swrite
08002c4c g     O .rwdata	00000004 __malloc_trim_threshold
0001ec04 g     F .text	00000024 altera_nios2_qsys_irq_init
00010a64 g     F .text	0000000c __locale_msgcharset
0001f7cc g     F .text	00000038 exit
00010908 g     F .text	000000c4 _fwalk_reent
0001c514 g     F .text	000000c8 alt_up_ps2_init
00011fd8 g     F .text	000001fc __mdiff
0001e648 g     F .text	00000054 alt_flash_close_dev
000093d0 g     F .text	00000074 .hidden __modsi3
08002c88 g     O .rwdata	00000004 __ctype_ptr__
000051ec g     F .text	0000002c loadTimerISR
00002e0c g     F .text	00000078 vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0000ff18 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08002d58 g     O .bss	00000004 start
00003e38 g     F .text	0000004c xTaskGetSchedulerState
0800089d g     O .rodata	00000101 _ctype_
0001bf98 g     F .text	00000054 altera_avalon_uart_close
0001fb2c g     F .text	00000034 _exit
0001e20c g     F .text	0000012c alt_alarm_start
0001dd10 g     F .text	0000024c get_next_state
00010aa8 g     F .text	000001bc __smakebuf_r
00018fcc g     F .text	00000034 alt_write_native_32bit
0001c70c g     F .text	00000068 alt_up_ps2_wait_for_ack
000040fc g     F .text	00000060 vTaskExitCritical
000099f0 g     F .text	00000098 strlen
00001700 g     F .text	000000e0 pxPortInitialiseStack
0001e8dc g     F .text	00000154 open
00005140 g     F .text	000000ac ps2_isr
00007de4 g     F .text	000000dc .hidden __gedf2
0001877c g     F .text	0000008c alt_flash_cfi_get_info
08002c50 g     O .rwdata	00000004 __wctomb
000143f8 g     F .text	00000018 __sprint_r
0000376c g     F .text	0000003c vTaskSetTimeOutState
08002c6c g     O .rwdata	00000004 alt_priority_mask
08002d5c g     O .bss	00000004 LoadControlQ
0000de58 g     F .text	0000001c __vfprintf_internal
0001c028 g     F .text	000001dc altera_avalon_uart_read
0001621c g     F .text	0000005c _wctomb_r
00002624 g     F .text	00000030 uxQueueMessagesWaitingFromISR
00002a00 g     F .text	00000040 xQueueIsQueueEmptyFromISR
0001c93c g     F .text	0000008c alt_up_ps2_read_fd
000085d8 g     F .text	000008fc .hidden __subdf3
08002b5e g     O .rwdata	00000066 single_byte_make_code
00011a0c g     F .text	000000b0 __lo0bits
08002c80 g     O .rwdata	00000008 alt_alarm_list
0001e490 g     F .text	00000060 _do_ctors
0000415c g     F .text	00000044 uxTaskResetEventItemValue
0001612c g     F .text	000000c0 wcrtomb
00001c80 g     F .text	000000cc xQueueCreateMutex
00017834 g     F .text	000000d0 close
0001ec28 g     F .text	00000068 alt_program_amd
000046f0 g     F .text	00000118 vTaskNotifyGiveFromISR
00000f24 g     F .text	0000003c vEventGroupClearBitsCallback
0000215c g     F .text	000000d0 xQueueGiveFromISR
00015d48 g     F .text	00000080 fputwc
0000ff1c g     F .text	00000004 __sinit_lock_acquire
00011780 g     F .text	00000120 __multadd
00011758 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <save_context>:
  20:	ef7fff04 	addi	ea,ea,-4
  24:	deffe304 	addi	sp,sp,-116
  28:	dfc00015 	stw	ra,0(sp)
  2c:	d8400215 	stw	at,8(sp)
  30:	d8800315 	stw	r2,12(sp)
  34:	d8c00415 	stw	r3,16(sp)
  38:	d9000515 	stw	r4,20(sp)
  3c:	d9400615 	stw	r5,24(sp)
  40:	d9800715 	stw	r6,28(sp)
  44:	d9c00815 	stw	r7,32(sp)
  48:	da000915 	stw	r8,36(sp)
  4c:	da400a15 	stw	r9,40(sp)
  50:	da800b15 	stw	r10,44(sp)
  54:	dac00c15 	stw	r11,48(sp)
  58:	db000d15 	stw	r12,52(sp)
  5c:	db400e15 	stw	r13,56(sp)
  60:	db800f15 	stw	r14,60(sp)
  64:	dbc01015 	stw	r15,64(sp)
  68:	000b307a 	rdctl	r5,estatus
  6c:	d9401115 	stw	r5,68(sp)
  70:	df401215 	stw	ea,72(sp)
  74:	dc001315 	stw	r16,76(sp)
  78:	dc401415 	stw	r17,80(sp)
  7c:	dc801515 	stw	r18,84(sp)
  80:	dcc01615 	stw	r19,88(sp)
  84:	dd001715 	stw	r20,92(sp)
  88:	dd401815 	stw	r21,96(sp)
  8c:	dd801915 	stw	r22,100(sp)
  90:	ddc01a15 	stw	r23,104(sp)
  94:	de801b15 	stw	gp,108(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06020034 	movhi	et,2048
  a0:	c60b2d04 	addi	et,et,11444
  a4:	c6000017 	ldw	et,0(et)
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
  ac:	0009313a 	rdctl	r4,ipending
  b0:	000b307a 	rdctl	r5,estatus
  b4:	2880004c 	andi	r2,r5,1
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06020034 	movhi	et,2048
  c8:	c60b2d04 	addi	et,et,11444
  cc:	c6000017 	ldw	et,0(et)
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:
  d4:	dfc00017 	ldw	ra,0(sp)
  d8:	d8400217 	ldw	at,8(sp)
  dc:	d8800317 	ldw	r2,12(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
  e4:	d9000517 	ldw	r4,20(sp)
  e8:	d9400617 	ldw	r5,24(sp)
  ec:	d9800717 	ldw	r6,28(sp)
  f0:	d9c00817 	ldw	r7,32(sp)
  f4:	da000917 	ldw	r8,36(sp)
  f8:	da400a17 	ldw	r9,40(sp)
  fc:	da800b17 	ldw	r10,44(sp)
 100:	dac00c17 	ldw	r11,48(sp)
 104:	db000d17 	ldw	r12,52(sp)
 108:	db400e17 	ldw	r13,56(sp)
 10c:	db800f17 	ldw	r14,60(sp)
 110:	dbc01017 	ldw	r15,64(sp)
 114:	de001117 	ldw	et,68(sp)
 118:	c001707a 	wrctl	estatus,et
 11c:	df401217 	ldw	ea,72(sp)
 120:	dc001317 	ldw	r16,76(sp)
 124:	dc401417 	ldw	r17,80(sp)
 128:	dc801517 	ldw	r18,84(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
 130:	dd001717 	ldw	r20,92(sp)
 134:	dd401817 	ldw	r21,96(sp)
 138:	dd801917 	ldw	r22,100(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
 140:	de801b17 	ldw	gp,108(sp)
 144:	df001c17 	ldw	fp,112(sp)
 148:	dec01d04 	addi	sp,sp,116
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:
 150:	ee000017 	ldw	et,0(ea)
 154:	00400ef4 	movhi	at,59
 158:	085a0e94 	ori	at,at,26682
 15c:	c070c03a 	cmpne	et,et,at
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
 164:	003da03a 	break	0
 168:	003fda06 	br	d4 <__alt_data_end+0xf00000d4>

0000016c <call_scheduler>:
 16c:	ef400104 	addi	ea,ea,4
 170:	df401215 	stw	ea,72(sp)
 174:	00033140 	call	3314 <vTaskSwitchContext>
 178:	003fd206 	br	c4 <__alt_data_end+0xf00000c4>

0000017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 17c:	defff904 	addi	sp,sp,-28
 180:	dfc00615 	stw	ra,24(sp)
 184:	df000515 	stw	fp,20(sp)
 188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 18c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 190:	0005313a 	rdctl	r2,ipending
 194:	e0bffe15 	stw	r2,-8(fp)

  return active;
 198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 19c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1a4:	00800044 	movi	r2,1
 1a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1ac:	e0fffb17 	ldw	r3,-20(fp)
 1b0:	e0bffc17 	ldw	r2,-16(fp)
 1b4:	1884703a 	and	r2,r3,r2
 1b8:	10001526 	beq	r2,zero,210 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1bc:	00820234 	movhi	r2,2056
 1c0:	10bff204 	addi	r2,r2,-56
 1c4:	e0fffd17 	ldw	r3,-12(fp)
 1c8:	180690fa 	slli	r3,r3,3
 1cc:	10c5883a 	add	r2,r2,r3
 1d0:	10c00017 	ldw	r3,0(r2)
 1d4:	00820234 	movhi	r2,2056
 1d8:	10bff204 	addi	r2,r2,-56
 1dc:	e13ffd17 	ldw	r4,-12(fp)
 1e0:	200890fa 	slli	r4,r4,3
 1e4:	1105883a 	add	r2,r2,r4
 1e8:	10800104 	addi	r2,r2,4
 1ec:	10800017 	ldw	r2,0(r2)
 1f0:	e17ffd17 	ldw	r5,-12(fp)
 1f4:	1009883a 	mov	r4,r2
 1f8:	183ee83a 	callr	r3
#endif
        break;
 1fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200:	0005313a 	rdctl	r2,ipending
 204:	e0bfff15 	stw	r2,-4(fp)

  return active;
 208:	e0bfff17 	ldw	r2,-4(fp)
 20c:	00000706 	br	22c <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 210:	e0bffc17 	ldw	r2,-16(fp)
 214:	1085883a 	add	r2,r2,r2
 218:	e0bffc15 	stw	r2,-16(fp)
      i++;
 21c:	e0bffd17 	ldw	r2,-12(fp)
 220:	10800044 	addi	r2,r2,1
 224:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 228:	003fe006 	br	1ac <__alt_data_end+0xf00001ac>

    active = alt_irq_pending ();
 22c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 230:	e0bffb17 	ldw	r2,-20(fp)
 234:	103fda1e 	bne	r2,zero,1a0 <__alt_data_end+0xf00001a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 238:	0001883a 	nop
}
 23c:	0001883a 	nop
 240:	e037883a 	mov	sp,fp
 244:	dfc00117 	ldw	ra,4(sp)
 248:	df000017 	ldw	fp,0(sp)
 24c:	dec00204 	addi	sp,sp,8
 250:	f800283a 	ret

Disassembly of section .text:

00000254 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     254:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     258:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     25c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     260:	00bffd16 	blt	zero,r2,258 <__alt_data_end+0xf0000258>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     264:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
     268:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     26c:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
     270:	d6ab0a94 	ori	gp,gp,44074
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     274:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
     278:	108b2314 	ori	r2,r2,11404

    movhi r3, %hi(__bss_end)
     27c:	00c20234 	movhi	r3,2056
    ori r3, r3, %lo(__bss_end)
     280:	18c03214 	ori	r3,r3,200

    beq r2, r3, 1f
     284:	10c00326 	beq	r2,r3,294 <_start+0x40>

0:
    stw zero, (r2)
     288:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     28c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     290:	10fffd36 	bltu	r2,r3,288 <__alt_data_end+0xf0000288>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     294:	0017c0c0 	call	17c0c <alt_main>

00000298 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     298:	003fff06 	br	298 <__alt_data_end+0xf0000298>

0000029c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     29c:	defff904 	addi	sp,sp,-28
     2a0:	dfc00615 	stw	ra,24(sp)
     2a4:	df000515 	stw	fp,20(sp)
     2a8:	df000504 	addi	fp,sp,20
     2ac:	e13ffd15 	stw	r4,-12(fp)
     2b0:	e17ffe15 	stw	r5,-8(fp)
     2b4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     2b8:	01000e04 	movi	r4,56
     2bc:	0000fd00 	call	fd0 <pvPortMalloc>
     2c0:	e0bffc15 	stw	r2,-16(fp)
	if( pxCoRoutine )
     2c4:	e0bffc17 	ldw	r2,-16(fp)
     2c8:	10003d26 	beq	r2,zero,3c0 <xCoRoutineCreate+0x124>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     2cc:	d0a01a97 	ldw	r2,-32662(gp)
     2d0:	1000031e 	bne	r2,zero,2e0 <xCoRoutineCreate+0x44>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2d4:	e0bffc17 	ldw	r2,-16(fp)
     2d8:	d0a01a95 	stw	r2,-32662(gp)
			prvInitialiseCoRoutineLists();
     2dc:	00007bc0 	call	7bc <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	108000b0 	cmpltui	r2,r2,2
     2e8:	1000021e 	bne	r2,zero,2f4 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2ec:	00800044 	movi	r2,1
     2f0:	e0bffe15 	stw	r2,-8(fp)
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     2f4:	e0bffc17 	ldw	r2,-16(fp)
     2f8:	10000d0d 	sth	zero,52(r2)
		pxCoRoutine->uxPriority = uxPriority;
     2fc:	e0bffc17 	ldw	r2,-16(fp)
     300:	e0fffe17 	ldw	r3,-8(fp)
     304:	10c00b15 	stw	r3,44(r2)
		pxCoRoutine->uxIndex = uxIndex;
     308:	e0bffc17 	ldw	r2,-16(fp)
     30c:	e0ffff17 	ldw	r3,-4(fp)
     310:	10c00c15 	stw	r3,48(r2)
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     314:	e0bffc17 	ldw	r2,-16(fp)
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	10c00015 	stw	r3,0(r2)

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     320:	e0bffc17 	ldw	r2,-16(fp)
     324:	10800104 	addi	r2,r2,4
     328:	1009883a 	mov	r4,r2
     32c:	000146c0 	call	146c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     330:	e0bffc17 	ldw	r2,-16(fp)
     334:	10800604 	addi	r2,r2,24
     338:	1009883a 	mov	r4,r2
     33c:	000146c0 	call	146c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     340:	e0bffc17 	ldw	r2,-16(fp)
     344:	e0fffc17 	ldw	r3,-16(fp)
     348:	10c00415 	stw	r3,16(r2)
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	e0fffc17 	ldw	r3,-16(fp)
     354:	10c00915 	stw	r3,36(r2)

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     358:	00c00084 	movi	r3,2
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	1887c83a 	sub	r3,r3,r2
     364:	e0bffc17 	ldw	r2,-16(fp)
     368:	10c00615 	stw	r3,24(r2)

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     36c:	e0bffc17 	ldw	r2,-16(fp)
     370:	10800b17 	ldw	r2,44(r2)
     374:	d0e01b97 	ldw	r3,-32658(gp)
     378:	1880032e 	bgeu	r3,r2,388 <xCoRoutineCreate+0xec>
     37c:	e0bffc17 	ldw	r2,-16(fp)
     380:	10800b17 	ldw	r2,44(r2)
     384:	d0a01b95 	stw	r2,-32658(gp)
     388:	e0bffc17 	ldw	r2,-16(fp)
     38c:	10800b17 	ldw	r2,44(r2)
     390:	10c00524 	muli	r3,r2,20
     394:	00820034 	movhi	r2,2048
     398:	108b6604 	addi	r2,r2,11672
     39c:	1887883a 	add	r3,r3,r2
     3a0:	e0bffc17 	ldw	r2,-16(fp)
     3a4:	10800104 	addi	r2,r2,4
     3a8:	100b883a 	mov	r5,r2
     3ac:	1809883a 	mov	r4,r3
     3b0:	00014980 	call	1498 <vListInsertEnd>

		xReturn = pdPASS;
     3b4:	00800044 	movi	r2,1
     3b8:	e0bffb15 	stw	r2,-20(fp)
     3bc:	00000206 	br	3c8 <xCoRoutineCreate+0x12c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     3c0:	00bfffc4 	movi	r2,-1
     3c4:	e0bffb15 	stw	r2,-20(fp)
	}

	return xReturn;
     3c8:	e0bffb17 	ldw	r2,-20(fp)
}
     3cc:	e037883a 	mov	sp,fp
     3d0:	dfc00117 	ldw	ra,4(sp)
     3d4:	df000017 	ldw	fp,0(sp)
     3d8:	dec00204 	addi	sp,sp,8
     3dc:	f800283a 	ret

000003e0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     3e0:	defffb04 	addi	sp,sp,-20
     3e4:	dfc00415 	stw	ra,16(sp)
     3e8:	df000315 	stw	fp,12(sp)
     3ec:	df000304 	addi	fp,sp,12
     3f0:	e13ffe15 	stw	r4,-8(fp)
     3f4:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     3f8:	d0e01c97 	ldw	r3,-32654(gp)
     3fc:	e0bffe17 	ldw	r2,-8(fp)
     400:	1885883a 	add	r2,r3,r2
     404:	e0bffd15 	stw	r2,-12(fp)

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     408:	d0a01a97 	ldw	r2,-32662(gp)
     40c:	10800104 	addi	r2,r2,4
     410:	1009883a 	mov	r4,r2
     414:	00015fc0 	call	15fc <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     418:	d0a01a97 	ldw	r2,-32662(gp)
     41c:	e0fffd17 	ldw	r3,-12(fp)
     420:	10c00115 	stw	r3,4(r2)

	if( xTimeToWake < xCoRoutineTickCount )
     424:	d0a01c97 	ldw	r2,-32654(gp)
     428:	e0fffd17 	ldw	r3,-12(fp)
     42c:	1880072e 	bgeu	r3,r2,44c <vCoRoutineAddToDelayedList+0x6c>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     430:	d0e01997 	ldw	r3,-32666(gp)
     434:	d0a01a97 	ldw	r2,-32662(gp)
     438:	10800104 	addi	r2,r2,4
     43c:	100b883a 	mov	r5,r2
     440:	1809883a 	mov	r4,r3
     444:	00015240 	call	1524 <vListInsert>
     448:	00000606 	br	464 <vCoRoutineAddToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     44c:	d0e01897 	ldw	r3,-32670(gp)
     450:	d0a01a97 	ldw	r2,-32662(gp)
     454:	10800104 	addi	r2,r2,4
     458:	100b883a 	mov	r5,r2
     45c:	1809883a 	mov	r4,r3
     460:	00015240 	call	1524 <vListInsert>
	}

	if( pxEventList )
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	10000526 	beq	r2,zero,480 <vCoRoutineAddToDelayedList+0xa0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     46c:	d0a01a97 	ldw	r2,-32662(gp)
     470:	10800604 	addi	r2,r2,24
     474:	100b883a 	mov	r5,r2
     478:	e13fff17 	ldw	r4,-4(fp)
     47c:	00015240 	call	1524 <vListInsert>
	}
}
     480:	0001883a 	nop
     484:	e037883a 	mov	sp,fp
     488:	dfc00117 	ldw	ra,4(sp)
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00204 	addi	sp,sp,8
     494:	f800283a 	ret

00000498 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     498:	defffb04 	addi	sp,sp,-20
     49c:	dfc00415 	stw	ra,16(sp)
     4a0:	df000315 	stw	fp,12(sp)
     4a4:	df000304 	addi	fp,sp,12
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     4a8:	00002906 	br	550 <prvCheckPendingReadyList+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     4ac:	0005303a 	rdctl	r2,status
     4b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     4b4:	e0fffe17 	ldw	r3,-8(fp)
     4b8:	00bfff84 	movi	r2,-2
     4bc:	1884703a 	and	r2,r3,r2
     4c0:	1001703a 	wrctl	status,r2
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     4c4:	00820034 	movhi	r2,2048
     4c8:	108b7a04 	addi	r2,r2,11752
     4cc:	10800317 	ldw	r2,12(r2)
     4d0:	10800317 	ldw	r2,12(r2)
     4d4:	e0bffd15 	stw	r2,-12(fp)
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     4d8:	e0bffd17 	ldw	r2,-12(fp)
     4dc:	10800604 	addi	r2,r2,24
     4e0:	1009883a 	mov	r4,r2
     4e4:	00015fc0 	call	15fc <uxListRemove>
     4e8:	00800044 	movi	r2,1
     4ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     4f0:	e0bfff17 	ldw	r2,-4(fp)
     4f4:	1001703a 	wrctl	status,r2
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     4f8:	e0bffd17 	ldw	r2,-12(fp)
     4fc:	10800104 	addi	r2,r2,4
     500:	1009883a 	mov	r4,r2
     504:	00015fc0 	call	15fc <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     508:	e0bffd17 	ldw	r2,-12(fp)
     50c:	10800b17 	ldw	r2,44(r2)
     510:	d0e01b97 	ldw	r3,-32658(gp)
     514:	1880032e 	bgeu	r3,r2,524 <prvCheckPendingReadyList+0x8c>
     518:	e0bffd17 	ldw	r2,-12(fp)
     51c:	10800b17 	ldw	r2,44(r2)
     520:	d0a01b95 	stw	r2,-32658(gp)
     524:	e0bffd17 	ldw	r2,-12(fp)
     528:	10800b17 	ldw	r2,44(r2)
     52c:	10c00524 	muli	r3,r2,20
     530:	00820034 	movhi	r2,2048
     534:	108b6604 	addi	r2,r2,11672
     538:	1887883a 	add	r3,r3,r2
     53c:	e0bffd17 	ldw	r2,-12(fp)
     540:	10800104 	addi	r2,r2,4
     544:	100b883a 	mov	r5,r2
     548:	1809883a 	mov	r4,r3
     54c:	00014980 	call	1498 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     550:	00820034 	movhi	r2,2048
     554:	108b7a04 	addi	r2,r2,11752
     558:	10800017 	ldw	r2,0(r2)
     55c:	103fd31e 	bne	r2,zero,4ac <__alt_data_end+0xf00004ac>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     560:	0001883a 	nop
     564:	e037883a 	mov	sp,fp
     568:	dfc00117 	ldw	ra,4(sp)
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00204 	addi	sp,sp,8
     574:	f800283a 	ret

00000578 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     578:	defffa04 	addi	sp,sp,-24
     57c:	dfc00515 	stw	ra,20(sp)
     580:	df000415 	stw	fp,16(sp)
     584:	df000404 	addi	fp,sp,16
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     588:	00030dc0 	call	30dc <xTaskGetTickCount>
     58c:	1007883a 	mov	r3,r2
     590:	d0a01d97 	ldw	r2,-32650(gp)
     594:	1885c83a 	sub	r2,r3,r2
     598:	d0a01e95 	stw	r2,-32646(gp)
	while( xPassedTicks )
     59c:	00004206 	br	6a8 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
     5a0:	d0a01c97 	ldw	r2,-32654(gp)
     5a4:	10800044 	addi	r2,r2,1
     5a8:	d0a01c95 	stw	r2,-32654(gp)
		xPassedTicks--;
     5ac:	d0a01e97 	ldw	r2,-32646(gp)
     5b0:	10bfffc4 	addi	r2,r2,-1
     5b4:	d0a01e95 	stw	r2,-32646(gp)

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     5b8:	d0a01c97 	ldw	r2,-32654(gp)
     5bc:	1000371e 	bne	r2,zero,69c <prvCheckDelayedList+0x124>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     5c0:	d0a01897 	ldw	r2,-32670(gp)
     5c4:	e0bffc15 	stw	r2,-16(fp)
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     5c8:	d0a01997 	ldw	r2,-32666(gp)
     5cc:	d0a01895 	stw	r2,-32670(gp)
			pxOverflowDelayedCoRoutineList = pxTemp;
     5d0:	e0bffc17 	ldw	r2,-16(fp)
     5d4:	d0a01995 	stw	r2,-32666(gp)
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5d8:	00003006 	br	69c <prvCheckDelayedList+0x124>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     5dc:	d0a01897 	ldw	r2,-32670(gp)
     5e0:	10800317 	ldw	r2,12(r2)
     5e4:	10800317 	ldw	r2,12(r2)
     5e8:	e0bffd15 	stw	r2,-12(fp)

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     5ec:	e0bffd17 	ldw	r2,-12(fp)
     5f0:	10800117 	ldw	r2,4(r2)
     5f4:	d0e01c97 	ldw	r3,-32654(gp)
     5f8:	1880012e 	bgeu	r3,r2,600 <prvCheckDelayedList+0x88>
			{
				/* Timeout not yet expired. */
				break;
     5fc:	00002a06 	br	6a8 <prvCheckDelayedList+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     600:	0005303a 	rdctl	r2,status
     604:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     608:	e0ffff17 	ldw	r3,-4(fp)
     60c:	00bfff84 	movi	r2,-2
     610:	1884703a 	and	r2,r3,r2
     614:	1001703a 	wrctl	status,r2
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     618:	e0bffd17 	ldw	r2,-12(fp)
     61c:	10800104 	addi	r2,r2,4
     620:	1009883a 	mov	r4,r2
     624:	00015fc0 	call	15fc <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     628:	e0bffd17 	ldw	r2,-12(fp)
     62c:	10800a17 	ldw	r2,40(r2)
     630:	10000426 	beq	r2,zero,644 <prvCheckDelayedList+0xcc>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     634:	e0bffd17 	ldw	r2,-12(fp)
     638:	10800604 	addi	r2,r2,24
     63c:	1009883a 	mov	r4,r2
     640:	00015fc0 	call	15fc <uxListRemove>
     644:	00800044 	movi	r2,1
     648:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     64c:	e0bffe17 	ldw	r2,-8(fp)
     650:	1001703a 	wrctl	status,r2
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
     654:	e0bffd17 	ldw	r2,-12(fp)
     658:	10800b17 	ldw	r2,44(r2)
     65c:	d0e01b97 	ldw	r3,-32658(gp)
     660:	1880032e 	bgeu	r3,r2,670 <prvCheckDelayedList+0xf8>
     664:	e0bffd17 	ldw	r2,-12(fp)
     668:	10800b17 	ldw	r2,44(r2)
     66c:	d0a01b95 	stw	r2,-32658(gp)
     670:	e0bffd17 	ldw	r2,-12(fp)
     674:	10800b17 	ldw	r2,44(r2)
     678:	10c00524 	muli	r3,r2,20
     67c:	00820034 	movhi	r2,2048
     680:	108b6604 	addi	r2,r2,11672
     684:	1887883a 	add	r3,r3,r2
     688:	e0bffd17 	ldw	r2,-12(fp)
     68c:	10800104 	addi	r2,r2,4
     690:	100b883a 	mov	r5,r2
     694:	1809883a 	mov	r4,r3
     698:	00014980 	call	1498 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     69c:	d0a01897 	ldw	r2,-32670(gp)
     6a0:	10800017 	ldw	r2,0(r2)
     6a4:	103fcd1e 	bne	r2,zero,5dc <__alt_data_end+0xf00005dc>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     6a8:	d0a01e97 	ldw	r2,-32646(gp)
     6ac:	103fbc1e 	bne	r2,zero,5a0 <__alt_data_end+0xf00005a0>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     6b0:	d0a01c97 	ldw	r2,-32654(gp)
     6b4:	d0a01d95 	stw	r2,-32650(gp)
}
     6b8:	0001883a 	nop
     6bc:	e037883a 	mov	sp,fp
     6c0:	dfc00117 	ldw	ra,4(sp)
     6c4:	df000017 	ldw	fp,0(sp)
     6c8:	dec00204 	addi	sp,sp,8
     6cc:	f800283a 	ret

000006d0 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     6d0:	defffd04 	addi	sp,sp,-12
     6d4:	dfc00215 	stw	ra,8(sp)
     6d8:	df000115 	stw	fp,4(sp)
     6dc:	df000104 	addi	fp,sp,4
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     6e0:	00004980 	call	498 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     6e4:	00005780 	call	578 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6e8:	00000506 	br	700 <vCoRoutineSchedule+0x30>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     6ec:	d0a01b97 	ldw	r2,-32658(gp)
     6f0:	10002c26 	beq	r2,zero,7a4 <vCoRoutineSchedule+0xd4>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     6f4:	d0a01b97 	ldw	r2,-32658(gp)
     6f8:	10bfffc4 	addi	r2,r2,-1
     6fc:	d0a01b95 	stw	r2,-32658(gp)

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     700:	d0e01b97 	ldw	r3,-32658(gp)
     704:	00820034 	movhi	r2,2048
     708:	108b6604 	addi	r2,r2,11672
     70c:	18c00524 	muli	r3,r3,20
     710:	10c5883a 	add	r2,r2,r3
     714:	10800017 	ldw	r2,0(r2)
     718:	103ff426 	beq	r2,zero,6ec <__alt_data_end+0xf00006ec>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     71c:	d0a01b97 	ldw	r2,-32658(gp)
     720:	10c00524 	muli	r3,r2,20
     724:	00820034 	movhi	r2,2048
     728:	108b6604 	addi	r2,r2,11672
     72c:	1885883a 	add	r2,r3,r2
     730:	e0bfff15 	stw	r2,-4(fp)
     734:	e0bfff17 	ldw	r2,-4(fp)
     738:	10800117 	ldw	r2,4(r2)
     73c:	10c00117 	ldw	r3,4(r2)
     740:	e0bfff17 	ldw	r2,-4(fp)
     744:	10c00115 	stw	r3,4(r2)
     748:	e0bfff17 	ldw	r2,-4(fp)
     74c:	10c00117 	ldw	r3,4(r2)
     750:	e0bfff17 	ldw	r2,-4(fp)
     754:	10800204 	addi	r2,r2,8
     758:	1880051e 	bne	r3,r2,770 <vCoRoutineSchedule+0xa0>
     75c:	e0bfff17 	ldw	r2,-4(fp)
     760:	10800117 	ldw	r2,4(r2)
     764:	10c00117 	ldw	r3,4(r2)
     768:	e0bfff17 	ldw	r2,-4(fp)
     76c:	10c00115 	stw	r3,4(r2)
     770:	e0bfff17 	ldw	r2,-4(fp)
     774:	10800117 	ldw	r2,4(r2)
     778:	10800317 	ldw	r2,12(r2)
     77c:	d0a01a95 	stw	r2,-32662(gp)

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     780:	d0a01a97 	ldw	r2,-32662(gp)
     784:	10800017 	ldw	r2,0(r2)
     788:	d1201a97 	ldw	r4,-32662(gp)
     78c:	d0e01a97 	ldw	r3,-32662(gp)
     790:	18c00c17 	ldw	r3,48(r3)
     794:	180b883a 	mov	r5,r3
     798:	103ee83a 	callr	r2

	return;
     79c:	0001883a 	nop
     7a0:	00000106 	br	7a8 <vCoRoutineSchedule+0xd8>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
     7a4:	0001883a 	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
     7a8:	e037883a 	mov	sp,fp
     7ac:	dfc00117 	ldw	ra,4(sp)
     7b0:	df000017 	ldw	fp,0(sp)
     7b4:	dec00204 	addi	sp,sp,8
     7b8:	f800283a 	ret

000007bc <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     7bc:	defffd04 	addi	sp,sp,-12
     7c0:	dfc00215 	stw	ra,8(sp)
     7c4:	df000115 	stw	fp,4(sp)
     7c8:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7cc:	e03fff15 	stw	zero,-4(fp)
     7d0:	00000a06 	br	7fc <prvInitialiseCoRoutineLists+0x40>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     7d4:	e0bfff17 	ldw	r2,-4(fp)
     7d8:	10c00524 	muli	r3,r2,20
     7dc:	00820034 	movhi	r2,2048
     7e0:	108b6604 	addi	r2,r2,11672
     7e4:	1885883a 	add	r2,r3,r2
     7e8:	1009883a 	mov	r4,r2
     7ec:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7f0:	e0bfff17 	ldw	r2,-4(fp)
     7f4:	10800044 	addi	r2,r2,1
     7f8:	e0bfff15 	stw	r2,-4(fp)
     7fc:	e0bfff17 	ldw	r2,-4(fp)
     800:	108000b0 	cmpltui	r2,r2,2
     804:	103ff31e 	bne	r2,zero,7d4 <__alt_data_end+0xf00007d4>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     808:	01020034 	movhi	r4,2048
     80c:	210b7004 	addi	r4,r4,11712
     810:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     814:	01020034 	movhi	r4,2048
     818:	210b7504 	addi	r4,r4,11732
     81c:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     820:	01020034 	movhi	r4,2048
     824:	210b7a04 	addi	r4,r4,11752
     828:	00014040 	call	1404 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     82c:	00820034 	movhi	r2,2048
     830:	108b7004 	addi	r2,r2,11712
     834:	d0a01895 	stw	r2,-32670(gp)
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     838:	00820034 	movhi	r2,2048
     83c:	108b7504 	addi	r2,r2,11732
     840:	d0a01995 	stw	r2,-32666(gp)
}
     844:	0001883a 	nop
     848:	e037883a 	mov	sp,fp
     84c:	dfc00117 	ldw	ra,4(sp)
     850:	df000017 	ldw	fp,0(sp)
     854:	dec00204 	addi	sp,sp,8
     858:	f800283a 	ret

0000085c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
     85c:	defffb04 	addi	sp,sp,-20
     860:	dfc00415 	stw	ra,16(sp)
     864:	df000315 	stw	fp,12(sp)
     868:	df000304 	addi	fp,sp,12
     86c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     870:	e0bfff17 	ldw	r2,-4(fp)
     874:	10800317 	ldw	r2,12(r2)
     878:	10800317 	ldw	r2,12(r2)
     87c:	e0bffe15 	stw	r2,-8(fp)
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     880:	e0bffe17 	ldw	r2,-8(fp)
     884:	10800604 	addi	r2,r2,24
     888:	1009883a 	mov	r4,r2
     88c:	00015fc0 	call	15fc <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     890:	e0bffe17 	ldw	r2,-8(fp)
     894:	10800604 	addi	r2,r2,24
     898:	100b883a 	mov	r5,r2
     89c:	01020034 	movhi	r4,2048
     8a0:	210b7a04 	addi	r4,r4,11752
     8a4:	00014980 	call	1498 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     8a8:	e0bffe17 	ldw	r2,-8(fp)
     8ac:	10c00b17 	ldw	r3,44(r2)
     8b0:	d0a01a97 	ldw	r2,-32662(gp)
     8b4:	10800b17 	ldw	r2,44(r2)
     8b8:	18800336 	bltu	r3,r2,8c8 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
     8bc:	00800044 	movi	r2,1
     8c0:	e0bffd15 	stw	r2,-12(fp)
     8c4:	00000106 	br	8cc <xCoRoutineRemoveFromEventList+0x70>
	}
	else
	{
		xReturn = pdFALSE;
     8c8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
     8cc:	e0bffd17 	ldw	r2,-12(fp)
}
     8d0:	e037883a 	mov	sp,fp
     8d4:	dfc00117 	ldw	ra,4(sp)
     8d8:	df000017 	ldw	fp,0(sp)
     8dc:	dec00204 	addi	sp,sp,8
     8e0:	f800283a 	ret

000008e4 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     8e4:	defffd04 	addi	sp,sp,-12
     8e8:	dfc00215 	stw	ra,8(sp)
     8ec:	df000115 	stw	fp,4(sp)
     8f0:	df000104 	addi	fp,sp,4
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     8f4:	01000604 	movi	r4,24
     8f8:	0000fd00 	call	fd0 <pvPortMalloc>
     8fc:	e0bfff15 	stw	r2,-4(fp)
	if( pxEventBits != NULL )
     900:	e0bfff17 	ldw	r2,-4(fp)
     904:	10000626 	beq	r2,zero,920 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
     908:	e0bfff17 	ldw	r2,-4(fp)
     90c:	10000015 	stw	zero,0(r2)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     910:	e0bfff17 	ldw	r2,-4(fp)
     914:	10800104 	addi	r2,r2,4
     918:	1009883a 	mov	r4,r2
     91c:	00014040 	call	1404 <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
     920:	e0bfff17 	ldw	r2,-4(fp)
}
     924:	e037883a 	mov	sp,fp
     928:	dfc00117 	ldw	ra,4(sp)
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00204 	addi	sp,sp,8
     934:	f800283a 	ret

00000938 <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     938:	defff504 	addi	sp,sp,-44
     93c:	dfc00a15 	stw	ra,40(sp)
     940:	df000915 	stw	fp,36(sp)
     944:	df000904 	addi	fp,sp,36
     948:	e13ffc15 	stw	r4,-16(fp)
     94c:	e17ffd15 	stw	r5,-12(fp)
     950:	e1bffe15 	stw	r6,-8(fp)
     954:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     958:	e0bffc17 	ldw	r2,-16(fp)
     95c:	e0bff815 	stw	r2,-32(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     960:	e03ff915 	stw	zero,-28(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     964:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     968:	e0bff817 	ldw	r2,-32(fp)
     96c:	10800017 	ldw	r2,0(r2)
     970:	e0bffa15 	stw	r2,-24(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     974:	e17ffd17 	ldw	r5,-12(fp)
     978:	e13ffc17 	ldw	r4,-16(fp)
     97c:	0000cf40 	call	cf4 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     980:	e0fffa17 	ldw	r3,-24(fp)
     984:	e0bffd17 	ldw	r2,-12(fp)
     988:	1886b03a 	or	r3,r3,r2
     98c:	e0bffe17 	ldw	r2,-8(fp)
     990:	1886703a 	and	r3,r3,r2
     994:	e0bffe17 	ldw	r2,-8(fp)
     998:	18800d1e 	bne	r3,r2,9d0 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     99c:	e0fffa17 	ldw	r3,-24(fp)
     9a0:	e0bffd17 	ldw	r2,-12(fp)
     9a4:	1884b03a 	or	r2,r3,r2
     9a8:	e0bff715 	stw	r2,-36(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     9ac:	e0bff817 	ldw	r2,-32(fp)
     9b0:	10c00017 	ldw	r3,0(r2)
     9b4:	e0bffe17 	ldw	r2,-8(fp)
     9b8:	0084303a 	nor	r2,zero,r2
     9bc:	1886703a 	and	r3,r3,r2
     9c0:	e0bff817 	ldw	r2,-32(fp)
     9c4:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
     9c8:	e03fff15 	stw	zero,-4(fp)
     9cc:	00000f06 	br	a0c <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     9d0:	e0bfff17 	ldw	r2,-4(fp)
     9d4:	10000a26 	beq	r2,zero,a00 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     9d8:	e0bff817 	ldw	r2,-32(fp)
     9dc:	10c00104 	addi	r3,r2,4
     9e0:	e0bffe17 	ldw	r2,-8(fp)
     9e4:	10814034 	orhi	r2,r2,1280
     9e8:	e1bfff17 	ldw	r6,-4(fp)
     9ec:	100b883a 	mov	r5,r2
     9f0:	1809883a 	mov	r4,r3
     9f4:	00034b40 	call	34b4 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     9f8:	e03ff715 	stw	zero,-36(fp)
     9fc:	00000306 	br	a0c <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     a00:	e0bff817 	ldw	r2,-32(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	e0bff715 	stw	r2,-36(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     a0c:	0002f980 	call	2f98 <xTaskResumeAll>
     a10:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     a14:	e0bfff17 	ldw	r2,-4(fp)
     a18:	10002026 	beq	r2,zero,a9c <xEventGroupSync+0x164>
	{
		if( xAlreadyYielded == pdFALSE )
     a1c:	e0bffb17 	ldw	r2,-20(fp)
     a20:	1000011e 	bne	r2,zero,a28 <xEventGroupSync+0xf0>
		{
			portYIELD_WITHIN_API();
     a24:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     a28:	000415c0 	call	415c <uxTaskResetEventItemValue>
     a2c:	e0bff715 	stw	r2,-36(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     a30:	e0bff717 	ldw	r2,-36(fp)
     a34:	1080802c 	andhi	r2,r2,512
     a38:	1000131e 	bne	r2,zero,a88 <xEventGroupSync+0x150>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     a3c:	00040a80 	call	40a8 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
     a40:	e0bff817 	ldw	r2,-32(fp)
     a44:	10800017 	ldw	r2,0(r2)
     a48:	e0bff715 	stw	r2,-36(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a4c:	e0fff717 	ldw	r3,-36(fp)
     a50:	e0bffe17 	ldw	r2,-8(fp)
     a54:	1886703a 	and	r3,r3,r2
     a58:	e0bffe17 	ldw	r2,-8(fp)
     a5c:	1880071e 	bne	r3,r2,a7c <xEventGroupSync+0x144>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a60:	e0bff817 	ldw	r2,-32(fp)
     a64:	10c00017 	ldw	r3,0(r2)
     a68:	e0bffe17 	ldw	r2,-8(fp)
     a6c:	0084303a 	nor	r2,zero,r2
     a70:	1886703a 	and	r3,r3,r2
     a74:	e0bff817 	ldw	r2,-32(fp)
     a78:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a7c:	00040fc0 	call	40fc <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
     a80:	00800044 	movi	r2,1
     a84:	e0bff915 	stw	r2,-28(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a88:	e0fff717 	ldw	r3,-36(fp)
     a8c:	00804034 	movhi	r2,256
     a90:	10bfffc4 	addi	r2,r2,-1
     a94:	1884703a 	and	r2,r3,r2
     a98:	e0bff715 	stw	r2,-36(fp)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a9c:	e0bff717 	ldw	r2,-36(fp)
}
     aa0:	e037883a 	mov	sp,fp
     aa4:	dfc00117 	ldw	ra,4(sp)
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00204 	addi	sp,sp,8
     ab0:	f800283a 	ret

00000ab4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     ab4:	defff304 	addi	sp,sp,-52
     ab8:	dfc00c15 	stw	ra,48(sp)
     abc:	df000b15 	stw	fp,44(sp)
     ac0:	df000b04 	addi	fp,sp,44
     ac4:	e13ffc15 	stw	r4,-16(fp)
     ac8:	e17ffd15 	stw	r5,-12(fp)
     acc:	e1bffe15 	stw	r6,-8(fp)
     ad0:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     ad4:	e0bffc17 	ldw	r2,-16(fp)
     ad8:	e0bff715 	stw	r2,-36(fp)
EventBits_t uxReturn, uxControlBits = 0;
     adc:	e03ff615 	stw	zero,-40(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     ae0:	e03ff815 	stw	zero,-32(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     ae4:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     ae8:	e0bff717 	ldw	r2,-36(fp)
     aec:	10800017 	ldw	r2,0(r2)
     af0:	e0bff915 	stw	r2,-28(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     af4:	e1bfff17 	ldw	r6,-4(fp)
     af8:	e17ffd17 	ldw	r5,-12(fp)
     afc:	e13ff917 	ldw	r4,-28(fp)
     b00:	0000f600 	call	f60 <prvTestWaitCondition>
     b04:	e0bffa15 	stw	r2,-24(fp)

		if( xWaitConditionMet != pdFALSE )
     b08:	e0bffa17 	ldw	r2,-24(fp)
     b0c:	10000d26 	beq	r2,zero,b44 <xEventGroupWaitBits+0x90>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     b10:	e0bff917 	ldw	r2,-28(fp)
     b14:	e0bff515 	stw	r2,-44(fp)
			xTicksToWait = ( TickType_t ) 0;
     b18:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     b1c:	e0bffe17 	ldw	r2,-8(fp)
     b20:	10002026 	beq	r2,zero,ba4 <xEventGroupWaitBits+0xf0>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     b24:	e0bff717 	ldw	r2,-36(fp)
     b28:	10c00017 	ldw	r3,0(r2)
     b2c:	e0bffd17 	ldw	r2,-12(fp)
     b30:	0084303a 	nor	r2,zero,r2
     b34:	1886703a 	and	r3,r3,r2
     b38:	e0bff717 	ldw	r2,-36(fp)
     b3c:	10c00015 	stw	r3,0(r2)
     b40:	00001806 	br	ba4 <xEventGroupWaitBits+0xf0>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     b44:	e0800217 	ldw	r2,8(fp)
     b48:	1000031e 	bne	r2,zero,b58 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     b4c:	e0bff917 	ldw	r2,-28(fp)
     b50:	e0bff515 	stw	r2,-44(fp)
     b54:	00001306 	br	ba4 <xEventGroupWaitBits+0xf0>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     b58:	e0bffe17 	ldw	r2,-8(fp)
     b5c:	10000326 	beq	r2,zero,b6c <xEventGroupWaitBits+0xb8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     b60:	e0bff617 	ldw	r2,-40(fp)
     b64:	10804034 	orhi	r2,r2,256
     b68:	e0bff615 	stw	r2,-40(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     b6c:	e0bfff17 	ldw	r2,-4(fp)
     b70:	10000326 	beq	r2,zero,b80 <xEventGroupWaitBits+0xcc>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     b74:	e0bff617 	ldw	r2,-40(fp)
     b78:	10810034 	orhi	r2,r2,1024
     b7c:	e0bff615 	stw	r2,-40(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     b80:	e0bff717 	ldw	r2,-36(fp)
     b84:	11000104 	addi	r4,r2,4
     b88:	e0fffd17 	ldw	r3,-12(fp)
     b8c:	e0bff617 	ldw	r2,-40(fp)
     b90:	1884b03a 	or	r2,r3,r2
     b94:	e1800217 	ldw	r6,8(fp)
     b98:	100b883a 	mov	r5,r2
     b9c:	00034b40 	call	34b4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     ba0:	e03ff515 	stw	zero,-44(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     ba4:	0002f980 	call	2f98 <xTaskResumeAll>
     ba8:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     bac:	e0800217 	ldw	r2,8(fp)
     bb0:	10002126 	beq	r2,zero,c38 <xEventGroupWaitBits+0x184>
	{
		if( xAlreadyYielded == pdFALSE )
     bb4:	e0bffb17 	ldw	r2,-20(fp)
     bb8:	1000011e 	bne	r2,zero,bc0 <xEventGroupWaitBits+0x10c>
		{
			portYIELD_WITHIN_API();
     bbc:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     bc0:	000415c0 	call	415c <uxTaskResetEventItemValue>
     bc4:	e0bff515 	stw	r2,-44(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     bc8:	e0bff517 	ldw	r2,-44(fp)
     bcc:	1080802c 	andhi	r2,r2,512
     bd0:	1000141e 	bne	r2,zero,c24 <xEventGroupWaitBits+0x170>
		{
			taskENTER_CRITICAL();
     bd4:	00040a80 	call	40a8 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     bd8:	e0bff717 	ldw	r2,-36(fp)
     bdc:	10800017 	ldw	r2,0(r2)
     be0:	e0bff515 	stw	r2,-44(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     be4:	e1bfff17 	ldw	r6,-4(fp)
     be8:	e17ffd17 	ldw	r5,-12(fp)
     bec:	e13ff517 	ldw	r4,-44(fp)
     bf0:	0000f600 	call	f60 <prvTestWaitCondition>
     bf4:	10000926 	beq	r2,zero,c1c <xEventGroupWaitBits+0x168>
				{
					if( xClearOnExit != pdFALSE )
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	10000726 	beq	r2,zero,c1c <xEventGroupWaitBits+0x168>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     c00:	e0bff717 	ldw	r2,-36(fp)
     c04:	10c00017 	ldw	r3,0(r2)
     c08:	e0bffd17 	ldw	r2,-12(fp)
     c0c:	0084303a 	nor	r2,zero,r2
     c10:	1886703a 	and	r3,r3,r2
     c14:	e0bff717 	ldw	r2,-36(fp)
     c18:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     c1c:	00040fc0 	call	40fc <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     c20:	e03ff815 	stw	zero,-32(fp)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     c24:	e0fff517 	ldw	r3,-44(fp)
     c28:	00804034 	movhi	r2,256
     c2c:	10bfffc4 	addi	r2,r2,-1
     c30:	1884703a 	and	r2,r3,r2
     c34:	e0bff515 	stw	r2,-44(fp)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     c38:	e0bff517 	ldw	r2,-44(fp)
}
     c3c:	e037883a 	mov	sp,fp
     c40:	dfc00117 	ldw	ra,4(sp)
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00204 	addi	sp,sp,8
     c4c:	f800283a 	ret

00000c50 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     c50:	defffa04 	addi	sp,sp,-24
     c54:	dfc00515 	stw	ra,20(sp)
     c58:	df000415 	stw	fp,16(sp)
     c5c:	df000404 	addi	fp,sp,16
     c60:	e13ffe15 	stw	r4,-8(fp)
     c64:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     c68:	e0bffe17 	ldw	r2,-8(fp)
     c6c:	e0bffc15 	stw	r2,-16(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     c70:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     c74:	e0bffc17 	ldw	r2,-16(fp)
     c78:	10800017 	ldw	r2,0(r2)
     c7c:	e0bffd15 	stw	r2,-12(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     c80:	e0bffc17 	ldw	r2,-16(fp)
     c84:	10c00017 	ldw	r3,0(r2)
     c88:	e0bfff17 	ldw	r2,-4(fp)
     c8c:	0084303a 	nor	r2,zero,r2
     c90:	1886703a 	and	r3,r3,r2
     c94:	e0bffc17 	ldw	r2,-16(fp)
     c98:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
     c9c:	00040fc0 	call	40fc <vTaskExitCritical>

	return uxReturn;
     ca0:	e0bffd17 	ldw	r2,-12(fp)
}
     ca4:	e037883a 	mov	sp,fp
     ca8:	dfc00117 	ldw	ra,4(sp)
     cac:	df000017 	ldw	fp,0(sp)
     cb0:	dec00204 	addi	sp,sp,8
     cb4:	f800283a 	ret

00000cb8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     cb8:	defffb04 	addi	sp,sp,-20
     cbc:	df000415 	stw	fp,16(sp)
     cc0:	df000404 	addi	fp,sp,16
     cc4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cc8:	e0bfff17 	ldw	r2,-4(fp)
     ccc:	e0bffc15 	stw	r2,-16(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     cd0:	e03ffd15 	stw	zero,-12(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
     cd4:	e0bffc17 	ldw	r2,-16(fp)
     cd8:	10800017 	ldw	r2,0(r2)
     cdc:	e0bffe15 	stw	r2,-8(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
     ce0:	e0bffe17 	ldw	r2,-8(fp)
}
     ce4:	e037883a 	mov	sp,fp
     ce8:	df000017 	ldw	fp,0(sp)
     cec:	dec00104 	addi	sp,sp,4
     cf0:	f800283a 	ret

00000cf4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cf4:	defff304 	addi	sp,sp,-52
     cf8:	dfc00c15 	stw	ra,48(sp)
     cfc:	df000b15 	stw	fp,44(sp)
     d00:	df000b04 	addi	fp,sp,44
     d04:	e13ffe15 	stw	r4,-8(fp)
     d08:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     d0c:	e03ff615 	stw	zero,-40(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     d10:	e0bffe17 	ldw	r2,-8(fp)
     d14:	e0bff815 	stw	r2,-32(fp)
BaseType_t xMatchFound = pdFALSE;
     d18:	e03ff715 	stw	zero,-36(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
     d1c:	e0bff817 	ldw	r2,-32(fp)
     d20:	10800104 	addi	r2,r2,4
     d24:	e0bff915 	stw	r2,-28(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d28:	e0bff917 	ldw	r2,-28(fp)
     d2c:	10800204 	addi	r2,r2,8
     d30:	e0bffa15 	stw	r2,-24(fp)
	vTaskSuspendAll();
     d34:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     d38:	e0bff917 	ldw	r2,-28(fp)
     d3c:	10800317 	ldw	r2,12(r2)
     d40:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     d44:	e0bff817 	ldw	r2,-32(fp)
     d48:	10c00017 	ldw	r3,0(r2)
     d4c:	e0bfff17 	ldw	r2,-4(fp)
     d50:	1886b03a 	or	r3,r3,r2
     d54:	e0bff817 	ldw	r2,-32(fp)
     d58:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     d5c:	00003306 	br	e2c <xEventGroupSetBits+0x138>
		{
			pxNext = listGET_NEXT( pxListItem );
     d60:	e0bff517 	ldw	r2,-44(fp)
     d64:	10800117 	ldw	r2,4(r2)
     d68:	e0bffb15 	stw	r2,-20(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d6c:	e0bff517 	ldw	r2,-44(fp)
     d70:	10800017 	ldw	r2,0(r2)
     d74:	e0bffc15 	stw	r2,-16(fp)
			xMatchFound = pdFALSE;
     d78:	e03ff715 	stw	zero,-36(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     d7c:	e0bffc17 	ldw	r2,-16(fp)
     d80:	10bfc02c 	andhi	r2,r2,65280
     d84:	e0bffd15 	stw	r2,-12(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d88:	e0fffc17 	ldw	r3,-16(fp)
     d8c:	00804034 	movhi	r2,256
     d90:	10bfffc4 	addi	r2,r2,-1
     d94:	1884703a 	and	r2,r3,r2
     d98:	e0bffc15 	stw	r2,-16(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d9c:	e0bffd17 	ldw	r2,-12(fp)
     da0:	1081002c 	andhi	r2,r2,1024
     da4:	1000081e 	bne	r2,zero,dc8 <xEventGroupSetBits+0xd4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     da8:	e0bff817 	ldw	r2,-32(fp)
     dac:	10c00017 	ldw	r3,0(r2)
     db0:	e0bffc17 	ldw	r2,-16(fp)
     db4:	1884703a 	and	r2,r3,r2
     db8:	10000b26 	beq	r2,zero,de8 <xEventGroupSetBits+0xf4>
				{
					xMatchFound = pdTRUE;
     dbc:	00800044 	movi	r2,1
     dc0:	e0bff715 	stw	r2,-36(fp)
     dc4:	00000806 	br	de8 <xEventGroupSetBits+0xf4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     dc8:	e0bff817 	ldw	r2,-32(fp)
     dcc:	10c00017 	ldw	r3,0(r2)
     dd0:	e0bffc17 	ldw	r2,-16(fp)
     dd4:	1886703a 	and	r3,r3,r2
     dd8:	e0bffc17 	ldw	r2,-16(fp)
     ddc:	1880021e 	bne	r3,r2,de8 <xEventGroupSetBits+0xf4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     de0:	00800044 	movi	r2,1
     de4:	e0bff715 	stw	r2,-36(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     de8:	e0bff717 	ldw	r2,-36(fp)
     dec:	10000d26 	beq	r2,zero,e24 <xEventGroupSetBits+0x130>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     df0:	e0bffd17 	ldw	r2,-12(fp)
     df4:	1080402c 	andhi	r2,r2,256
     df8:	10000426 	beq	r2,zero,e0c <xEventGroupSetBits+0x118>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     dfc:	e0fff617 	ldw	r3,-40(fp)
     e00:	e0bffc17 	ldw	r2,-16(fp)
     e04:	1884b03a 	or	r2,r3,r2
     e08:	e0bff615 	stw	r2,-40(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     e0c:	e0bff817 	ldw	r2,-32(fp)
     e10:	10800017 	ldw	r2,0(r2)
     e14:	10808034 	orhi	r2,r2,512
     e18:	100b883a 	mov	r5,r2
     e1c:	e13ff517 	ldw	r4,-44(fp)
     e20:	00036940 	call	3694 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     e24:	e0bffb17 	ldw	r2,-20(fp)
     e28:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     e2c:	e0fff517 	ldw	r3,-44(fp)
     e30:	e0bffa17 	ldw	r2,-24(fp)
     e34:	18bfca1e 	bne	r3,r2,d60 <__alt_data_end+0xf0000d60>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     e38:	e0bff817 	ldw	r2,-32(fp)
     e3c:	10c00017 	ldw	r3,0(r2)
     e40:	e0bff617 	ldw	r2,-40(fp)
     e44:	0084303a 	nor	r2,zero,r2
     e48:	1886703a 	and	r3,r3,r2
     e4c:	e0bff817 	ldw	r2,-32(fp)
     e50:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
     e54:	0002f980 	call	2f98 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     e58:	e0bff817 	ldw	r2,-32(fp)
     e5c:	10800017 	ldw	r2,0(r2)
}
     e60:	e037883a 	mov	sp,fp
     e64:	dfc00117 	ldw	ra,4(sp)
     e68:	df000017 	ldw	fp,0(sp)
     e6c:	dec00204 	addi	sp,sp,8
     e70:	f800283a 	ret

00000e74 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     e74:	defffb04 	addi	sp,sp,-20
     e78:	dfc00415 	stw	ra,16(sp)
     e7c:	df000315 	stw	fp,12(sp)
     e80:	df000304 	addi	fp,sp,12
     e84:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     e88:	e0bfff17 	ldw	r2,-4(fp)
     e8c:	e0bffd15 	stw	r2,-12(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
     e90:	e0bffd17 	ldw	r2,-12(fp)
     e94:	10800104 	addi	r2,r2,4
     e98:	e0bffe15 	stw	r2,-8(fp)

	vTaskSuspendAll();
     e9c:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     ea0:	00000506 	br	eb8 <vEventGroupDelete+0x44>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     ea4:	e0bffe17 	ldw	r2,-8(fp)
     ea8:	10800317 	ldw	r2,12(r2)
     eac:	01408034 	movhi	r5,512
     eb0:	1009883a 	mov	r4,r2
     eb4:	00036940 	call	3694 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     eb8:	e0bffe17 	ldw	r2,-8(fp)
     ebc:	10800017 	ldw	r2,0(r2)
     ec0:	103ff81e 	bne	r2,zero,ea4 <__alt_data_end+0xf0000ea4>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
     ec4:	e13ffd17 	ldw	r4,-12(fp)
     ec8:	00011500 	call	1150 <vPortFree>
	}
	( void ) xTaskResumeAll();
     ecc:	0002f980 	call	2f98 <xTaskResumeAll>
}
     ed0:	0001883a 	nop
     ed4:	e037883a 	mov	sp,fp
     ed8:	dfc00117 	ldw	ra,4(sp)
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00204 	addi	sp,sp,8
     ee4:	f800283a 	ret

00000ee8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     ee8:	defffc04 	addi	sp,sp,-16
     eec:	dfc00315 	stw	ra,12(sp)
     ef0:	df000215 	stw	fp,8(sp)
     ef4:	df000204 	addi	fp,sp,8
     ef8:	e13ffe15 	stw	r4,-8(fp)
     efc:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     f00:	e17fff17 	ldw	r5,-4(fp)
     f04:	e13ffe17 	ldw	r4,-8(fp)
     f08:	0000cf40 	call	cf4 <xEventGroupSetBits>
}
     f0c:	0001883a 	nop
     f10:	e037883a 	mov	sp,fp
     f14:	dfc00117 	ldw	ra,4(sp)
     f18:	df000017 	ldw	fp,0(sp)
     f1c:	dec00204 	addi	sp,sp,8
     f20:	f800283a 	ret

00000f24 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
     f24:	defffc04 	addi	sp,sp,-16
     f28:	dfc00315 	stw	ra,12(sp)
     f2c:	df000215 	stw	fp,8(sp)
     f30:	df000204 	addi	fp,sp,8
     f34:	e13ffe15 	stw	r4,-8(fp)
     f38:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     f3c:	e17fff17 	ldw	r5,-4(fp)
     f40:	e13ffe17 	ldw	r4,-8(fp)
     f44:	0000c500 	call	c50 <xEventGroupClearBits>
}
     f48:	0001883a 	nop
     f4c:	e037883a 	mov	sp,fp
     f50:	dfc00117 	ldw	ra,4(sp)
     f54:	df000017 	ldw	fp,0(sp)
     f58:	dec00204 	addi	sp,sp,8
     f5c:	f800283a 	ret

00000f60 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     f60:	defffb04 	addi	sp,sp,-20
     f64:	df000415 	stw	fp,16(sp)
     f68:	df000404 	addi	fp,sp,16
     f6c:	e13ffd15 	stw	r4,-12(fp)
     f70:	e17ffe15 	stw	r5,-8(fp)
     f74:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
     f78:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
     f7c:	e0bfff17 	ldw	r2,-4(fp)
     f80:	1000071e 	bne	r2,zero,fa0 <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     f84:	e0fffd17 	ldw	r3,-12(fp)
     f88:	e0bffe17 	ldw	r2,-8(fp)
     f8c:	1884703a 	and	r2,r3,r2
     f90:	10000a26 	beq	r2,zero,fbc <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
     f94:	00800044 	movi	r2,1
     f98:	e0bffc15 	stw	r2,-16(fp)
     f9c:	00000706 	br	fbc <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     fa0:	e0fffd17 	ldw	r3,-12(fp)
     fa4:	e0bffe17 	ldw	r2,-8(fp)
     fa8:	1886703a 	and	r3,r3,r2
     fac:	e0bffe17 	ldw	r2,-8(fp)
     fb0:	1880021e 	bne	r3,r2,fbc <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
     fb4:	00800044 	movi	r2,1
     fb8:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     fbc:	e0bffc17 	ldw	r2,-16(fp)
}
     fc0:	e037883a 	mov	sp,fp
     fc4:	df000017 	ldw	fp,0(sp)
     fc8:	dec00104 	addi	sp,sp,4
     fcc:	f800283a 	ret

00000fd0 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     fd0:	defff904 	addi	sp,sp,-28
     fd4:	dfc00615 	stw	ra,24(sp)
     fd8:	df000515 	stw	fp,20(sp)
     fdc:	df000504 	addi	fp,sp,20
     fe0:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
     fe4:	e03ffd15 	stw	zero,-12(fp)

        vTaskSuspendAll();
     fe8:	0002f6c0 	call	2f6c <vTaskSuspendAll>
        {
                /* If this is the first call to malloc then the heap will require
                initialisation to setup the list of free blocks. */
                if( pxEnd == NULL )
     fec:	d0a02197 	ldw	r2,-32634(gp)
     ff0:	1000011e 	bne	r2,zero,ff8 <pvPortMalloc+0x28>
                {
                        prvHeapInit();
     ff4:	00012100 	call	1210 <prvHeapInit>
                }

                /* The wanted size is increased so it can contain a xBlockLink
                structure in addition to the requested amount of bytes. */
                if( xWantedSize > 0 )
     ff8:	e0bfff17 	ldw	r2,-4(fp)
     ffc:	10000d26 	beq	r2,zero,1034 <pvPortMalloc+0x64>
                {
                        xWantedSize += heapSTRUCT_SIZE;
    1000:	00800304 	movi	r2,12
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	e0ffff17 	ldw	r3,-4(fp)
    100c:	1885883a 	add	r2,r3,r2
    1010:	e0bfff15 	stw	r2,-4(fp)

                        /* Ensure that blocks are always aligned to the required number of
                        bytes. */
                        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1014:	e0bfff17 	ldw	r2,-4(fp)
    1018:	108000cc 	andi	r2,r2,3
    101c:	10000526 	beq	r2,zero,1034 <pvPortMalloc+0x64>
                        {
                                /* Byte alignment required. */
                                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1020:	e0ffff17 	ldw	r3,-4(fp)
    1024:	00bfff04 	movi	r2,-4
    1028:	1884703a 	and	r2,r3,r2
    102c:	10800104 	addi	r2,r2,4
    1030:	e0bfff15 	stw	r2,-4(fp)
                        }
                }

                if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
    1034:	e0bfff17 	ldw	r2,-4(fp)
    1038:	10003e26 	beq	r2,zero,1134 <pvPortMalloc+0x164>
    103c:	00800234 	movhi	r2,8
    1040:	10b40004 	addi	r2,r2,-12288
    1044:	e0ffff17 	ldw	r3,-4(fp)
    1048:	18803a2e 	bgeu	r3,r2,1134 <pvPortMalloc+0x164>
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
    104c:	d0a01f84 	addi	r2,gp,-32642
    1050:	e0bffc15 	stw	r2,-16(fp)
                        pxBlock = xStart.pxNextFreeBlock;
    1054:	d0a01f97 	ldw	r2,-32642(gp)
    1058:	e0bffb15 	stw	r2,-20(fp)
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    105c:	00000506 	br	1074 <pvPortMalloc+0xa4>
                        {
                                pxPreviousBlock = pxBlock;
    1060:	e0bffb17 	ldw	r2,-20(fp)
    1064:	e0bffc15 	stw	r2,-16(fp)
                                pxBlock = pxBlock->pxNextFreeBlock;
    1068:	e0bffb17 	ldw	r2,-20(fp)
    106c:	10800017 	ldw	r2,0(r2)
    1070:	e0bffb15 	stw	r2,-20(fp)
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
                        pxBlock = xStart.pxNextFreeBlock;
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1074:	e0bffb17 	ldw	r2,-20(fp)
    1078:	10c00117 	ldw	r3,4(r2)
    107c:	e0bfff17 	ldw	r2,-4(fp)
    1080:	1880032e 	bgeu	r3,r2,1090 <pvPortMalloc+0xc0>
    1084:	e0bffb17 	ldw	r2,-20(fp)
    1088:	10800017 	ldw	r2,0(r2)
    108c:	103ff41e 	bne	r2,zero,1060 <__alt_data_end+0xf0001060>
                                pxBlock = pxBlock->pxNextFreeBlock;
                        }

                        /* If the end marker was reached then a block of adequate size was
                        not found. */
                        if( pxBlock != pxEnd )
    1090:	d0a02197 	ldw	r2,-32634(gp)
    1094:	e0fffb17 	ldw	r3,-20(fp)
    1098:	18802626 	beq	r3,r2,1134 <pvPortMalloc+0x164>
                        {
                                /* Return the memory space - jumping over the xBlockLink structure
                                at its start. */
                                pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    109c:	e0bffc17 	ldw	r2,-16(fp)
    10a0:	10c00017 	ldw	r3,0(r2)
    10a4:	00800304 	movi	r2,12
    10a8:	10bfffcc 	andi	r2,r2,65535
    10ac:	1885883a 	add	r2,r3,r2
    10b0:	e0bffd15 	stw	r2,-12(fp)

                                /* This block is being returned for use so must be taken out of
                                the     list of free blocks. */
                                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10b4:	e0bffb17 	ldw	r2,-20(fp)
    10b8:	10c00017 	ldw	r3,0(r2)
    10bc:	e0bffc17 	ldw	r2,-16(fp)
    10c0:	10c00015 	stw	r3,0(r2)

                                /* If the block is larger than required it can be split into two. */
                                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    10c4:	e0bffb17 	ldw	r2,-20(fp)
    10c8:	10c00117 	ldw	r3,4(r2)
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	1887c83a 	sub	r3,r3,r2
    10d4:	00800304 	movi	r2,12
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	10c00f2e 	bgeu	r2,r3,1120 <pvPortMalloc+0x150>
                                {
                                        /* This block is to be split into two.  Create a new block
                                        following the number of bytes requested. The void cast is
                                        used to prevent byte alignment warnings from the compiler. */
                                        pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    10e4:	e0fffb17 	ldw	r3,-20(fp)
    10e8:	e0bfff17 	ldw	r2,-4(fp)
    10ec:	1885883a 	add	r2,r3,r2
    10f0:	e0bffe15 	stw	r2,-8(fp)

                                        /* Calculate the sizes of two blocks split from the single
                                        block. */
                                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    10f4:	e0bffb17 	ldw	r2,-20(fp)
    10f8:	10c00117 	ldw	r3,4(r2)
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	1887c83a 	sub	r3,r3,r2
    1104:	e0bffe17 	ldw	r2,-8(fp)
    1108:	10c00115 	stw	r3,4(r2)
                                        pxBlock->xBlockSize = xWantedSize;
    110c:	e0bffb17 	ldw	r2,-20(fp)
    1110:	e0ffff17 	ldw	r3,-4(fp)
    1114:	10c00115 	stw	r3,4(r2)

                                        /* Insert the new block into the list of free blocks. */
                                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1118:	e13ffe17 	ldw	r4,-8(fp)
    111c:	00012d00 	call	12d0 <prvInsertBlockIntoFreeList>
                                }

                                xFreeBytesRemaining -= pxBlock->xBlockSize;
    1120:	d0e00297 	ldw	r3,-32758(gp)
    1124:	e0bffb17 	ldw	r2,-20(fp)
    1128:	10800117 	ldw	r2,4(r2)
    112c:	1885c83a 	sub	r2,r3,r2
    1130:	d0a00295 	stw	r2,-32758(gp)
                        }
                }
        }
        xTaskResumeAll();
    1134:	0002f980 	call	2f98 <xTaskResumeAll>
                        vApplicationMallocFailedHook();
                }
        }
        #endif

        return pvReturn;
    1138:	e0bffd17 	ldw	r2,-12(fp)
}
    113c:	e037883a 	mov	sp,fp
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1150:	defffb04 	addi	sp,sp,-20
    1154:	dfc00415 	stw	ra,16(sp)
    1158:	df000315 	stw	fp,12(sp)
    115c:	df000304 	addi	fp,sp,12
    1160:	e13fff15 	stw	r4,-4(fp)
unsigned char *puc = ( unsigned char * ) pv;
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	e0bffd15 	stw	r2,-12(fp)
xBlockLink *pxLink;

        if( pv != NULL )
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	10001126 	beq	r2,zero,11b8 <vPortFree+0x68>
        {
                /* The memory being freed will have an xBlockLink structure immediately
                before it. */
                puc -= heapSTRUCT_SIZE;
    1174:	00800304 	movi	r2,12
    1178:	10bfffcc 	andi	r2,r2,65535
    117c:	0085c83a 	sub	r2,zero,r2
    1180:	e0fffd17 	ldw	r3,-12(fp)
    1184:	1885883a 	add	r2,r3,r2
    1188:	e0bffd15 	stw	r2,-12(fp)

                /* This casting is to keep the compiler from issuing warnings. */
                pxLink = ( void * ) puc;
    118c:	e0bffd17 	ldw	r2,-12(fp)
    1190:	e0bffe15 	stw	r2,-8(fp)

                vTaskSuspendAll();
    1194:	0002f6c0 	call	2f6c <vTaskSuspendAll>
                {
                        /* Add this block to the list of free blocks. */
                        xFreeBytesRemaining += pxLink->xBlockSize;
    1198:	e0bffe17 	ldw	r2,-8(fp)
    119c:	10c00117 	ldw	r3,4(r2)
    11a0:	d0a00297 	ldw	r2,-32758(gp)
    11a4:	1885883a 	add	r2,r3,r2
    11a8:	d0a00295 	stw	r2,-32758(gp)
                        prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    11ac:	e13ffe17 	ldw	r4,-8(fp)
    11b0:	00012d00 	call	12d0 <prvInsertBlockIntoFreeList>
                }
                xTaskResumeAll();
    11b4:	0002f980 	call	2f98 <xTaskResumeAll>
        }
}
    11b8:	0001883a 	nop
    11bc:	e037883a 	mov	sp,fp
    11c0:	dfc00117 	ldw	ra,4(sp)
    11c4:	df000017 	ldw	fp,0(sp)
    11c8:	dec00204 	addi	sp,sp,8
    11cc:	f800283a 	ret

000011d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	df000015 	stw	fp,0(sp)
    11d8:	d839883a 	mov	fp,sp
        return xFreeBytesRemaining;
    11dc:	d0a00297 	ldw	r2,-32758(gp)
}
    11e0:	e037883a 	mov	sp,fp
    11e4:	df000017 	ldw	fp,0(sp)
    11e8:	dec00104 	addi	sp,sp,4
    11ec:	f800283a 	ret

000011f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    11f0:	deffff04 	addi	sp,sp,-4
    11f4:	df000015 	stw	fp,0(sp)
    11f8:	d839883a 	mov	fp,sp
        /* This just exists to keep the linker quiet. */
}
    11fc:	0001883a 	nop
    1200:	e037883a 	mov	sp,fp
    1204:	df000017 	ldw	fp,0(sp)
    1208:	dec00104 	addi	sp,sp,4
    120c:	f800283a 	ret

00001210 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    1210:	defffd04 	addi	sp,sp,-12
    1214:	df000215 	stw	fp,8(sp)
    1218:	df000204 	addi	fp,sp,8
        /* Ensure the start of the heap is aligned. */
        configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

        /* xStart is used to hold a pointer to the first item in the list of free
        blocks.  The void cast is used to prevent compiler warnings. */
        xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
    121c:	00820034 	movhi	r2,2048
    1220:	108b7f04 	addi	r2,r2,11772
    1224:	d0a01f95 	stw	r2,-32642(gp)
        xStart.xBlockSize = ( size_t ) 0;
    1228:	d0202095 	stw	zero,-32638(gp)

        /* pxEnd is used to mark the end of the list of free blocks and is inserted
        at the end of the heap space. */
        pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
    122c:	00c00234 	movhi	r3,8
    1230:	18f40004 	addi	r3,r3,-12288
    1234:	00820034 	movhi	r2,2048
    1238:	108b7f04 	addi	r2,r2,11772
    123c:	1885883a 	add	r2,r3,r2
    1240:	e0bffe15 	stw	r2,-8(fp)
        pucHeapEnd -= heapSTRUCT_SIZE;
    1244:	00800304 	movi	r2,12
    1248:	10bfffcc 	andi	r2,r2,65535
    124c:	0085c83a 	sub	r2,zero,r2
    1250:	e0fffe17 	ldw	r3,-8(fp)
    1254:	1885883a 	add	r2,r3,r2
    1258:	e0bffe15 	stw	r2,-8(fp)
        pxEnd = ( void * ) pucHeapEnd;
    125c:	e0bffe17 	ldw	r2,-8(fp)
    1260:	d0a02195 	stw	r2,-32634(gp)
        configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
        pxEnd->xBlockSize = 0;
    1264:	d0a02197 	ldw	r2,-32634(gp)
    1268:	10000115 	stw	zero,4(r2)
        pxEnd->pxNextFreeBlock = NULL;
    126c:	d0a02197 	ldw	r2,-32634(gp)
    1270:	10000015 	stw	zero,0(r2)

        /* To start with there is a single free block that is sized to take up the
        entire heap space, minus the space taken by pxEnd. */
        pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
    1274:	00820034 	movhi	r2,2048
    1278:	108b7f04 	addi	r2,r2,11772
    127c:	e0bfff15 	stw	r2,-4(fp)
        pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
    1280:	00800234 	movhi	r2,8
    1284:	10b40004 	addi	r2,r2,-12288
    1288:	00c00304 	movi	r3,12
    128c:	18ffffcc 	andi	r3,r3,65535
    1290:	10c7c83a 	sub	r3,r2,r3
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	10c00115 	stw	r3,4(r2)
        pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    129c:	d0e02197 	ldw	r3,-32634(gp)
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10c00015 	stw	r3,0(r2)

        /* The heap now contains pxEnd. */
        xFreeBytesRemaining -= heapSTRUCT_SIZE;
    12a8:	d0e00297 	ldw	r3,-32758(gp)
    12ac:	00800304 	movi	r2,12
    12b0:	10bfffcc 	andi	r2,r2,65535
    12b4:	1885c83a 	sub	r2,r3,r2
    12b8:	d0a00295 	stw	r2,-32758(gp)
}
    12bc:	0001883a 	nop
    12c0:	e037883a 	mov	sp,fp
    12c4:	df000017 	ldw	fp,0(sp)
    12c8:	dec00104 	addi	sp,sp,4
    12cc:	f800283a 	ret

000012d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
    12d0:	defffc04 	addi	sp,sp,-16
    12d4:	df000315 	stw	fp,12(sp)
    12d8:	df000304 	addi	fp,sp,12
    12dc:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxIterator;
unsigned char *puc;

        /* Iterate through the list until a block is found that has a higher address
        than the block being inserted. */
        for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12e0:	d0a01f84 	addi	r2,gp,-32642
    12e4:	e0bffd15 	stw	r2,-12(fp)
    12e8:	00000306 	br	12f8 <prvInsertBlockIntoFreeList+0x28>
    12ec:	e0bffd17 	ldw	r2,-12(fp)
    12f0:	10800017 	ldw	r2,0(r2)
    12f4:	e0bffd15 	stw	r2,-12(fp)
    12f8:	e0bffd17 	ldw	r2,-12(fp)
    12fc:	10c00017 	ldw	r3,0(r2)
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	18bff936 	bltu	r3,r2,12ec <__alt_data_end+0xf00012ec>
                /* Nothing to do here, just iterate to the right position. */
        }

        /* Do the block being inserted, and the block it is being inserted after
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxIterator;
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	e0bffe15 	stw	r2,-8(fp)
        if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
    1310:	e0bffd17 	ldw	r2,-12(fp)
    1314:	10800117 	ldw	r2,4(r2)
    1318:	e0fffe17 	ldw	r3,-8(fp)
    131c:	1887883a 	add	r3,r3,r2
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	1880091e 	bne	r3,r2,134c <prvInsertBlockIntoFreeList+0x7c>
        {
                pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1328:	e0bffd17 	ldw	r2,-12(fp)
    132c:	10c00117 	ldw	r3,4(r2)
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800117 	ldw	r2,4(r2)
    1338:	1887883a 	add	r3,r3,r2
    133c:	e0bffd17 	ldw	r2,-12(fp)
    1340:	10c00115 	stw	r3,4(r2)
                pxBlockToInsert = pxIterator;
    1344:	e0bffd17 	ldw	r2,-12(fp)
    1348:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Do the block being inserted, and the block it is being inserted before
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxBlockToInsert;
    134c:	e0bfff17 	ldw	r2,-4(fp)
    1350:	e0bffe15 	stw	r2,-8(fp)
        if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
    1354:	e0bfff17 	ldw	r2,-4(fp)
    1358:	10800117 	ldw	r2,4(r2)
    135c:	e0fffe17 	ldw	r3,-8(fp)
    1360:	1887883a 	add	r3,r3,r2
    1364:	e0bffd17 	ldw	r2,-12(fp)
    1368:	10800017 	ldw	r2,0(r2)
    136c:	1880161e 	bne	r3,r2,13c8 <prvInsertBlockIntoFreeList+0xf8>
        {
                if( pxIterator->pxNextFreeBlock != pxEnd )
    1370:	e0bffd17 	ldw	r2,-12(fp)
    1374:	10c00017 	ldw	r3,0(r2)
    1378:	d0a02197 	ldw	r2,-32634(gp)
    137c:	18800e26 	beq	r3,r2,13b8 <prvInsertBlockIntoFreeList+0xe8>
                {
                        /* Form one big block from the two blocks. */
                        pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1380:	e0bfff17 	ldw	r2,-4(fp)
    1384:	10c00117 	ldw	r3,4(r2)
    1388:	e0bffd17 	ldw	r2,-12(fp)
    138c:	10800017 	ldw	r2,0(r2)
    1390:	10800117 	ldw	r2,4(r2)
    1394:	1887883a 	add	r3,r3,r2
    1398:	e0bfff17 	ldw	r2,-4(fp)
    139c:	10c00115 	stw	r3,4(r2)
                        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    13a0:	e0bffd17 	ldw	r2,-12(fp)
    13a4:	10800017 	ldw	r2,0(r2)
    13a8:	10c00017 	ldw	r3,0(r2)
    13ac:	e0bfff17 	ldw	r2,-4(fp)
    13b0:	10c00015 	stw	r3,0(r2)
    13b4:	00000806 	br	13d8 <prvInsertBlockIntoFreeList+0x108>
                }
                else
                {
                        pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13b8:	d0e02197 	ldw	r3,-32634(gp)
    13bc:	e0bfff17 	ldw	r2,-4(fp)
    13c0:	10c00015 	stw	r3,0(r2)
    13c4:	00000406 	br	13d8 <prvInsertBlockIntoFreeList+0x108>
                }
        }
        else
        {
                pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13c8:	e0bffd17 	ldw	r2,-12(fp)
    13cc:	10c00017 	ldw	r3,0(r2)
    13d0:	e0bfff17 	ldw	r2,-4(fp)
    13d4:	10c00015 	stw	r3,0(r2)

        /* If the block being inserted plugged a gab, so was merged with the block
        before and the block after, then it's pxNextFreeBlock pointer will have
        already been set, and should not be set here as that would make it point
        to itself. */
        if( pxIterator != pxBlockToInsert )
    13d8:	e0fffd17 	ldw	r3,-12(fp)
    13dc:	e0bfff17 	ldw	r2,-4(fp)
    13e0:	18800326 	beq	r3,r2,13f0 <prvInsertBlockIntoFreeList+0x120>
        {
                pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13e4:	e0bffd17 	ldw	r2,-12(fp)
    13e8:	e0ffff17 	ldw	r3,-4(fp)
    13ec:	10c00015 	stw	r3,0(r2)
        }
}
    13f0:	0001883a 	nop
    13f4:	e037883a 	mov	sp,fp
    13f8:	df000017 	ldw	fp,0(sp)
    13fc:	dec00104 	addi	sp,sp,4
    1400:	f800283a 	ret

00001404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1404:	defffe04 	addi	sp,sp,-8
    1408:	df000115 	stw	fp,4(sp)
    140c:	df000104 	addi	fp,sp,4
    1410:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	e0bfff17 	ldw	r2,-4(fp)
    1418:	10c00204 	addi	r3,r2,8
    141c:	e0bfff17 	ldw	r2,-4(fp)
    1420:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1424:	e0bfff17 	ldw	r2,-4(fp)
    1428:	00ffffc4 	movi	r3,-1
    142c:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1430:	e0bfff17 	ldw	r2,-4(fp)
    1434:	10c00204 	addi	r3,r2,8
    1438:	e0bfff17 	ldw	r2,-4(fp)
    143c:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1440:	e0bfff17 	ldw	r2,-4(fp)
    1444:	10c00204 	addi	r3,r2,8
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1450:	e0bfff17 	ldw	r2,-4(fp)
    1454:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1458:	0001883a 	nop
    145c:	e037883a 	mov	sp,fp
    1460:	df000017 	ldw	fp,0(sp)
    1464:	dec00104 	addi	sp,sp,4
    1468:	f800283a 	ret

0000146c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    146c:	defffe04 	addi	sp,sp,-8
    1470:	df000115 	stw	fp,4(sp)
    1474:	df000104 	addi	fp,sp,4
    1478:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    147c:	e0bfff17 	ldw	r2,-4(fp)
    1480:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1484:	0001883a 	nop
    1488:	e037883a 	mov	sp,fp
    148c:	df000017 	ldw	fp,0(sp)
    1490:	dec00104 	addi	sp,sp,4
    1494:	f800283a 	ret

00001498 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1498:	defffc04 	addi	sp,sp,-16
    149c:	df000315 	stw	fp,12(sp)
    14a0:	df000304 	addi	fp,sp,12
    14a4:	e13ffe15 	stw	r4,-8(fp)
    14a8:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	10800117 	ldw	r2,4(r2)
    14b4:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14b8:	e0bfff17 	ldw	r2,-4(fp)
    14bc:	e0fffd17 	ldw	r3,-12(fp)
    14c0:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c4:	e0bffd17 	ldw	r2,-12(fp)
    14c8:	10c00217 	ldw	r3,8(r2)
    14cc:	e0bfff17 	ldw	r2,-4(fp)
    14d0:	10c00215 	stw	r3,8(r2)
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14d4:	e0bffd17 	ldw	r2,-12(fp)
    14d8:	10800217 	ldw	r2,8(r2)
    14dc:	e0ffff17 	ldw	r3,-4(fp)
    14e0:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
    14e4:	e0bffd17 	ldw	r2,-12(fp)
    14e8:	e0ffff17 	ldw	r3,-4(fp)
    14ec:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14f0:	e0bfff17 	ldw	r2,-4(fp)
    14f4:	e0fffe17 	ldw	r3,-8(fp)
    14f8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	10800017 	ldw	r2,0(r2)
    1504:	10c00044 	addi	r3,r2,1
    1508:	e0bffe17 	ldw	r2,-8(fp)
    150c:	10c00015 	stw	r3,0(r2)
}
    1510:	0001883a 	nop
    1514:	e037883a 	mov	sp,fp
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00104 	addi	sp,sp,4
    1520:	f800283a 	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1524:	defffb04 	addi	sp,sp,-20
    1528:	df000415 	stw	fp,16(sp)
    152c:	df000404 	addi	fp,sp,16
    1530:	e13ffe15 	stw	r4,-8(fp)
    1534:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	10800017 	ldw	r2,0(r2)
    1540:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1544:	e0bffd17 	ldw	r2,-12(fp)
    1548:	10bfffd8 	cmpnei	r2,r2,-1
    154c:	1000041e 	bne	r2,zero,1560 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10800417 	ldw	r2,16(r2)
    1558:	e0bffc15 	stw	r2,-16(fp)
    155c:	00000c06 	br	1590 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1560:	e0bffe17 	ldw	r2,-8(fp)
    1564:	10800204 	addi	r2,r2,8
    1568:	e0bffc15 	stw	r2,-16(fp)
    156c:	00000306 	br	157c <vListInsert+0x58>
    1570:	e0bffc17 	ldw	r2,-16(fp)
    1574:	10800117 	ldw	r2,4(r2)
    1578:	e0bffc15 	stw	r2,-16(fp)
    157c:	e0bffc17 	ldw	r2,-16(fp)
    1580:	10800117 	ldw	r2,4(r2)
    1584:	10800017 	ldw	r2,0(r2)
    1588:	e0fffd17 	ldw	r3,-12(fp)
    158c:	18bff82e 	bgeu	r3,r2,1570 <__alt_data_end+0xf0001570>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1590:	e0bffc17 	ldw	r2,-16(fp)
    1594:	10c00117 	ldw	r3,4(r2)
    1598:	e0bfff17 	ldw	r2,-4(fp)
    159c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10800117 	ldw	r2,4(r2)
    15a8:	e0ffff17 	ldw	r3,-4(fp)
    15ac:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
    15b0:	e0bfff17 	ldw	r2,-4(fp)
    15b4:	e0fffc17 	ldw	r3,-16(fp)
    15b8:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
    15bc:	e0bffc17 	ldw	r2,-16(fp)
    15c0:	e0ffff17 	ldw	r3,-4(fp)
    15c4:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	e0fffe17 	ldw	r3,-8(fp)
    15d0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10800017 	ldw	r2,0(r2)
    15dc:	10c00044 	addi	r3,r2,1
    15e0:	e0bffe17 	ldw	r2,-8(fp)
    15e4:	10c00015 	stw	r3,0(r2)
}
    15e8:	0001883a 	nop
    15ec:	e037883a 	mov	sp,fp
    15f0:	df000017 	ldw	fp,0(sp)
    15f4:	dec00104 	addi	sp,sp,4
    15f8:	f800283a 	ret

000015fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15fc:	defffd04 	addi	sp,sp,-12
    1600:	df000215 	stw	fp,8(sp)
    1604:	df000204 	addi	fp,sp,8
    1608:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    160c:	e0bfff17 	ldw	r2,-4(fp)
    1610:	10800417 	ldw	r2,16(r2)
    1614:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1618:	e0bfff17 	ldw	r2,-4(fp)
    161c:	10800117 	ldw	r2,4(r2)
    1620:	e0ffff17 	ldw	r3,-4(fp)
    1624:	18c00217 	ldw	r3,8(r3)
    1628:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    162c:	e0bfff17 	ldw	r2,-4(fp)
    1630:	10800217 	ldw	r2,8(r2)
    1634:	e0ffff17 	ldw	r3,-4(fp)
    1638:	18c00117 	ldw	r3,4(r3)
    163c:	10c00115 	stw	r3,4(r2)

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1640:	e0bffe17 	ldw	r2,-8(fp)
    1644:	10c00117 	ldw	r3,4(r2)
    1648:	e0bfff17 	ldw	r2,-4(fp)
    164c:	1880041e 	bne	r3,r2,1660 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1650:	e0bfff17 	ldw	r2,-4(fp)
    1654:	10c00217 	ldw	r3,8(r2)
    1658:	e0bffe17 	ldw	r2,-8(fp)
    165c:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1660:	e0bfff17 	ldw	r2,-4(fp)
    1664:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
    1668:	e0bffe17 	ldw	r2,-8(fp)
    166c:	10800017 	ldw	r2,0(r2)
    1670:	10ffffc4 	addi	r3,r2,-1
    1674:	e0bffe17 	ldw	r2,-8(fp)
    1678:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
    167c:	e0bffe17 	ldw	r2,-8(fp)
    1680:	10800017 	ldw	r2,0(r2)
}
    1684:	e037883a 	mov	sp,fp
    1688:	df000017 	ldw	fp,0(sp)
    168c:	dec00104 	addi	sp,sp,4
    1690:	f800283a 	ret

00001694 <vApplicationStackOverflowHook>:
#define configTICK_RATE_HZ 1000
#define configCPU_CLOCK_HZ TIMER1MS_FREQ
#define SYS_CLK_IRQ TIMER1MS_IRQ
//stack overflow hook
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName )
{
    1694:	defffc04 	addi	sp,sp,-16
    1698:	dfc00315 	stw	ra,12(sp)
    169c:	df000215 	stw	fp,8(sp)
    16a0:	df000204 	addi	fp,sp,8
    16a4:	e13ffe15 	stw	r4,-8(fp)
    16a8:	e17fff15 	stw	r5,-4(fp)
	printf("[free_rtos] Application stack overflow at task: %s\n", pcTaskName);
    16ac:	e17fff17 	ldw	r5,-4(fp)
    16b0:	01020034 	movhi	r4,2048
    16b4:	21000004 	addi	r4,r4,0
    16b8:	000981c0 	call	981c <printf>
}
    16bc:	0001883a 	nop
    16c0:	e037883a 	mov	sp,fp
    16c4:	dfc00117 	ldw	ra,4(sp)
    16c8:	df000017 	ldw	fp,0(sp)
    16cc:	dec00204 	addi	sp,sp,8
    16d0:	f800283a 	ret

000016d4 <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
    16d4:	defffe04 	addi	sp,sp,-8
    16d8:	df000115 	stw	fp,4(sp)
    16dc:	df000104 	addi	fp,sp,4
    16e0:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
    16e4:	e0bfff17 	ldw	r2,-4(fp)
    16e8:	16800015 	stw	gp,0(r2)
}
    16ec:	0001883a 	nop
    16f0:	e037883a 	mov	sp,fp
    16f4:	df000017 	ldw	fp,0(sp)
    16f8:	dec00104 	addi	sp,sp,4
    16fc:	f800283a 	ret

00001700 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
    1700:	defff904 	addi	sp,sp,-28
    1704:	dfc00615 	stw	ra,24(sp)
    1708:	df000515 	stw	fp,20(sp)
    170c:	df000504 	addi	fp,sp,20
    1710:	e13ffd15 	stw	r4,-12(fp)
    1714:	e17ffe15 	stw	r5,-8(fp)
    1718:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
    171c:	e0bffd17 	ldw	r2,-12(fp)
    1720:	10bfff04 	addi	r2,r2,-4
    1724:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
    1728:	e0bffc04 	addi	r2,fp,-16
    172c:	1009883a 	mov	r4,r2
    1730:	00016d40 	call	16d4 <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    1734:	e0fffd17 	ldw	r3,-12(fp)
    1738:	00b7abb4 	movhi	r2,57006
    173c:	10afbbc4 	addi	r2,r2,-16657
    1740:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
    1744:	e0bffd17 	ldw	r2,-12(fp)
    1748:	10bfff04 	addi	r2,r2,-4
    174c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
    1750:	e0fffb17 	ldw	r3,-20(fp)
    1754:	e0bffd17 	ldw	r2,-12(fp)
    1758:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    175c:	e0bffd17 	ldw	r2,-12(fp)
    1760:	10bfff04 	addi	r2,r2,-4
    1764:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
    1768:	e0fffc17 	ldw	r3,-16(fp)
    176c:	e0bffd17 	ldw	r2,-12(fp)
    1770:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
    1774:	e0bffd17 	ldw	r2,-12(fp)
    1778:	10bff704 	addi	r2,r2,-36
    177c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
    1780:	e0fffe17 	ldw	r3,-8(fp)
    1784:	e0bffd17 	ldw	r2,-12(fp)
    1788:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    178c:	e0bffd17 	ldw	r2,-12(fp)
    1790:	10bfff04 	addi	r2,r2,-4
    1794:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
    1798:	e0bffd17 	ldw	r2,-12(fp)
    179c:	00c00044 	movi	r3,1
    17a0:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
    17a4:	e0bffd17 	ldw	r2,-12(fp)
    17a8:	10bff404 	addi	r2,r2,-48
    17ac:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
    17b0:	e0ffff17 	ldw	r3,-4(fp)
    17b4:	e0bffd17 	ldw	r2,-12(fp)
    17b8:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
    17bc:	e0bffd17 	ldw	r2,-12(fp)
    17c0:	10bffb04 	addi	r2,r2,-20
    17c4:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
    17c8:	e0bffd17 	ldw	r2,-12(fp)
}
    17cc:	e037883a 	mov	sp,fp
    17d0:	dfc00117 	ldw	ra,4(sp)
    17d4:	df000017 	ldw	fp,0(sp)
    17d8:	dec00204 	addi	sp,sp,8
    17dc:	f800283a 	ret

000017e0 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
    17e0:	defffe04 	addi	sp,sp,-8
    17e4:	dfc00115 	stw	ra,4(sp)
    17e8:	df000015 	stw	fp,0(sp)
    17ec:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    17f0:	00018380 	call	1838 <prvSetupTimerInterrupt>
    17f4:	00800034 	movhi	r2,0
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
    17f8:	10803104 	addi	r2,r2,196
    17fc:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
    1800:	0005883a 	mov	r2,zero
}
    1804:	e037883a 	mov	sp,fp
    1808:	dfc00117 	ldw	ra,4(sp)
    180c:	df000017 	ldw	fp,0(sp)
    1810:	dec00204 	addi	sp,sp,8
    1814:	f800283a 	ret

00001818 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1818:	deffff04 	addi	sp,sp,-4
    181c:	df000015 	stw	fp,0(sp)
    1820:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
    1824:	0001883a 	nop
    1828:	e037883a 	mov	sp,fp
    182c:	df000017 	ldw	fp,0(sp)
    1830:	dec00104 	addi	sp,sp,4
    1834:	f800283a 	ret

00001838 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1838:	defffe04 	addi	sp,sp,-8
    183c:	dfc00115 	stw	ra,4(sp)
    1840:	df000015 	stw	fp,0(sp)
    1844:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
    1848:	01800034 	movhi	r6,0
    184c:	31863504 	addi	r6,r6,6356
    1850:	000b883a 	mov	r5,zero
    1854:	0009883a 	mov	r4,zero
    1858:	00019200 	call	1920 <alt_irq_register>
    185c:	10bffa98 	cmpnei	r2,r2,-22
    1860:	1000021e 	bne	r2,zero,186c <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
    1864:	003da03a 	break	0
    1868:	00001006 	br	18ac <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
    186c:	00c00204 	movi	r3,8
    1870:	00800134 	movhi	r2,4
    1874:	108c1104 	addi	r2,r2,12356
    1878:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
    187c:	00e1a814 	movui	r3,34464
    1880:	00800134 	movhi	r2,4
    1884:	108c1204 	addi	r2,r2,12360
    1888:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
    188c:	00c00044 	movi	r3,1
    1890:	00800134 	movhi	r2,4
    1894:	108c1304 	addi	r2,r2,12364
    1898:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );	
    189c:	00c001c4 	movi	r3,7
    18a0:	00800134 	movhi	r2,4
    18a4:	108c1104 	addi	r2,r2,12356
    18a8:	10c00035 	stwio	r3,0(r2)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18ac:	00ffff84 	movi	r3,-2
    18b0:	00800134 	movhi	r2,4
    18b4:	108c1004 	addi	r2,r2,12352
    18b8:	10c00035 	stwio	r3,0(r2)
}
    18bc:	0001883a 	nop
    18c0:	e037883a 	mov	sp,fp
    18c4:	dfc00117 	ldw	ra,4(sp)
    18c8:	df000017 	ldw	fp,0(sp)
    18cc:	dec00204 	addi	sp,sp,8
    18d0:	f800283a 	ret

000018d4 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
    18d4:	defffc04 	addi	sp,sp,-16
    18d8:	dfc00315 	stw	ra,12(sp)
    18dc:	df000215 	stw	fp,8(sp)
    18e0:	df000204 	addi	fp,sp,8
    18e4:	e13ffe15 	stw	r4,-8(fp)
    18e8:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
    18ec:	00031500 	call	3150 <xTaskIncrementTick>
    18f0:	10000126 	beq	r2,zero,18f8 <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
    18f4:	00033140 	call	3314 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18f8:	00ffff84 	movi	r3,-2
    18fc:	00800134 	movhi	r2,4
    1900:	108c1004 	addi	r2,r2,12352
    1904:	10c00035 	stwio	r3,0(r2)
}
    1908:	0001883a 	nop
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
    1920:	defff104 	addi	sp,sp,-60
    1924:	df000e15 	stw	fp,56(sp)
    1928:	df000e04 	addi	fp,sp,56
    192c:	e13ffd15 	stw	r4,-12(fp)
    1930:	e17ffe15 	stw	r5,-8(fp)
    1934:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;  
    1938:	00bffa84 	movi	r2,-22
    193c:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
    1940:	e0bffd17 	ldw	r2,-12(fp)
    1944:	10800828 	cmpgeui	r2,r2,32
    1948:	10004c1e 	bne	r2,zero,1a7c <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    194c:	0005303a 	rdctl	r2,status
    1950:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1954:	e0fff617 	ldw	r3,-40(fp)
    1958:	00bfff84 	movi	r2,-2
    195c:	1884703a 	and	r2,r3,r2
    1960:	1001703a 	wrctl	status,r2
  
  return context;
    1964:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all ();
    1968:	e0bff415 	stw	r2,-48(fp)
	
		alt_irq[id].handler = handler;
    196c:	00820234 	movhi	r2,2056
    1970:	10bff204 	addi	r2,r2,-56
    1974:	e0fffd17 	ldw	r3,-12(fp)
    1978:	180690fa 	slli	r3,r3,3
    197c:	10c5883a 	add	r2,r2,r3
    1980:	e0ffff17 	ldw	r3,-4(fp)
    1984:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
    1988:	00820234 	movhi	r2,2056
    198c:	10bff204 	addi	r2,r2,-56
    1990:	e0fffd17 	ldw	r3,-12(fp)
    1994:	180690fa 	slli	r3,r3,3
    1998:	10c5883a 	add	r2,r2,r3
    199c:	10800104 	addi	r2,r2,4
    19a0:	e0fffe17 	ldw	r3,-8(fp)
    19a4:	10c00015 	stw	r3,0(r2)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	10001926 	beq	r2,zero,1a14 <alt_irq_register+0xf4>
    19b0:	e0bffd17 	ldw	r2,-12(fp)
    19b4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19b8:	0005303a 	rdctl	r2,status
    19bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19c0:	e0fff717 	ldw	r3,-36(fp)
    19c4:	00bfff84 	movi	r2,-2
    19c8:	1884703a 	and	r2,r3,r2
    19cc:	1001703a 	wrctl	status,r2
  
  return context;
    19d0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    19d4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    19d8:	00c00044 	movi	r3,1
    19dc:	e0bff317 	ldw	r2,-52(fp)
    19e0:	1884983a 	sll	r2,r3,r2
    19e4:	1007883a 	mov	r3,r2
    19e8:	d0a05497 	ldw	r2,-32430(gp)
    19ec:	1884b03a 	or	r2,r3,r2
    19f0:	d0a05495 	stw	r2,-32430(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    19f4:	d0a05497 	ldw	r2,-32430(gp)
    19f8:	100170fa 	wrctl	ienable,r2
    19fc:	e0bff817 	ldw	r2,-32(fp)
    1a00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a04:	e0bff917 	ldw	r2,-28(fp)
    1a08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a0c:	0005883a 	mov	r2,zero
    1a10:	00001906 	br	1a78 <alt_irq_register+0x158>
    1a14:	e0bffd17 	ldw	r2,-12(fp)
    1a18:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a1c:	0005303a 	rdctl	r2,status
    1a20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a24:	e0fffa17 	ldw	r3,-24(fp)
    1a28:	00bfff84 	movi	r2,-2
    1a2c:	1884703a 	and	r2,r3,r2
    1a30:	1001703a 	wrctl	status,r2
  
  return context;
    1a34:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a38:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    1a3c:	00c00044 	movi	r3,1
    1a40:	e0bff517 	ldw	r2,-44(fp)
    1a44:	1884983a 	sll	r2,r3,r2
    1a48:	0084303a 	nor	r2,zero,r2
    1a4c:	1007883a 	mov	r3,r2
    1a50:	d0a05497 	ldw	r2,-32430(gp)
    1a54:	1884703a 	and	r2,r3,r2
    1a58:	d0a05495 	stw	r2,-32430(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a5c:	d0a05497 	ldw	r2,-32430(gp)
    1a60:	100170fa 	wrctl	ienable,r2
    1a64:	e0bffb17 	ldw	r2,-20(fp)
    1a68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a6c:	e0bffc17 	ldw	r2,-16(fp)
    1a70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a74:	0005883a 	mov	r2,zero
    1a78:	e0bff215 	stw	r2,-56(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
    1a7c:	e0bff217 	ldw	r2,-56(fp)
}
    1a80:	e037883a 	mov	sp,fp
    1a84:	df000017 	ldw	fp,0(sp)
    1a88:	dec00104 	addi	sp,sp,4
    1a8c:	f800283a 	ret

00001a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1a90:	defffb04 	addi	sp,sp,-20
    1a94:	dfc00415 	stw	ra,16(sp)
    1a98:	df000315 	stw	fp,12(sp)
    1a9c:	df000304 	addi	fp,sp,12
    1aa0:	e13ffe15 	stw	r4,-8(fp)
    1aa4:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1ab0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ab4:	e0bffd17 	ldw	r2,-12(fp)
    1ab8:	10c00017 	ldw	r3,0(r2)
    1abc:	e0bffd17 	ldw	r2,-12(fp)
    1ac0:	11000f17 	ldw	r4,60(r2)
    1ac4:	e0bffd17 	ldw	r2,-12(fp)
    1ac8:	10801017 	ldw	r2,64(r2)
    1acc:	2085383a 	mul	r2,r4,r2
    1ad0:	1887883a 	add	r3,r3,r2
    1ad4:	e0bffd17 	ldw	r2,-12(fp)
    1ad8:	10c00115 	stw	r3,4(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1adc:	e0bffd17 	ldw	r2,-12(fp)
    1ae0:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1ae4:	e0bffd17 	ldw	r2,-12(fp)
    1ae8:	10c00017 	ldw	r3,0(r2)
    1aec:	e0bffd17 	ldw	r2,-12(fp)
    1af0:	10c00215 	stw	r3,8(r2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1af4:	e0bffd17 	ldw	r2,-12(fp)
    1af8:	10c00017 	ldw	r3,0(r2)
    1afc:	e0bffd17 	ldw	r2,-12(fp)
    1b00:	10800f17 	ldw	r2,60(r2)
    1b04:	113fffc4 	addi	r4,r2,-1
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	10801017 	ldw	r2,64(r2)
    1b10:	2085383a 	mul	r2,r4,r2
    1b14:	1887883a 	add	r3,r3,r2
    1b18:	e0bffd17 	ldw	r2,-12(fp)
    1b1c:	10c00315 	stw	r3,12(r2)
		pxQueue->xRxLock = queueUNLOCKED;
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	00ffffc4 	movi	r3,-1
    1b28:	10c01115 	stw	r3,68(r2)
		pxQueue->xTxLock = queueUNLOCKED;
    1b2c:	e0bffd17 	ldw	r2,-12(fp)
    1b30:	00ffffc4 	movi	r3,-1
    1b34:	10c01215 	stw	r3,72(r2)

		if( xNewQueue == pdFALSE )
    1b38:	e0bfff17 	ldw	r2,-4(fp)
    1b3c:	10000b1e 	bne	r2,zero,1b6c <xQueueGenericReset+0xdc>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b40:	e0bffd17 	ldw	r2,-12(fp)
    1b44:	10800417 	ldw	r2,16(r2)
    1b48:	10001026 	beq	r2,zero,1b8c <xQueueGenericReset+0xfc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	10800404 	addi	r2,r2,16
    1b54:	1009883a 	mov	r4,r2
    1b58:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    1b5c:	10800058 	cmpnei	r2,r2,1
    1b60:	10000a1e 	bne	r2,zero,1b8c <xQueueGenericReset+0xfc>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1b64:	003b683a 	trap	0
    1b68:	00000806 	br	1b8c <xQueueGenericReset+0xfc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1b6c:	e0bffd17 	ldw	r2,-12(fp)
    1b70:	10800404 	addi	r2,r2,16
    1b74:	1009883a 	mov	r4,r2
    1b78:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1b7c:	e0bffd17 	ldw	r2,-12(fp)
    1b80:	10800904 	addi	r2,r2,36
    1b84:	1009883a 	mov	r4,r2
    1b88:	00014040 	call	1404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1b8c:	00040fc0 	call	40fc <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1b90:	00800044 	movi	r2,1
}
    1b94:	e037883a 	mov	sp,fp
    1b98:	dfc00117 	ldw	ra,4(sp)
    1b9c:	df000017 	ldw	fp,0(sp)
    1ba0:	dec00204 	addi	sp,sp,8
    1ba4:	f800283a 	ret

00001ba8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1ba8:	defff704 	addi	sp,sp,-36
    1bac:	dfc00815 	stw	ra,32(sp)
    1bb0:	df000715 	stw	fp,28(sp)
    1bb4:	df000704 	addi	fp,sp,28
    1bb8:	e13ffd15 	stw	r4,-12(fp)
    1bbc:	e17ffe15 	stw	r5,-8(fp)
    1bc0:	3005883a 	mov	r2,r6
    1bc4:	e0bfff05 	stb	r2,-4(fp)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    1bc8:	e03ffa15 	stw	zero,-24(fp)
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
    1bcc:	e0bffe17 	ldw	r2,-8(fp)
    1bd0:	1000021e 	bne	r2,zero,1bdc <xQueueGenericCreate+0x34>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
    1bd4:	e03ff915 	stw	zero,-28(fp)
    1bd8:	00000506 	br	1bf0 <xQueueGenericCreate+0x48>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1bdc:	e0fffd17 	ldw	r3,-12(fp)
    1be0:	e0bffe17 	ldw	r2,-8(fp)
    1be4:	1885383a 	mul	r2,r3,r2
    1be8:	10800044 	addi	r2,r2,1
    1bec:	e0bff915 	stw	r2,-28(fp)
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1bf0:	e0bff917 	ldw	r2,-28(fp)
    1bf4:	10801304 	addi	r2,r2,76
    1bf8:	1009883a 	mov	r4,r2
    1bfc:	0000fd00 	call	fd0 <pvPortMalloc>
    1c00:	e0bffb15 	stw	r2,-20(fp)

	if( pcAllocatedBuffer != NULL )
    1c04:	e0bffb17 	ldw	r2,-20(fp)
    1c08:	10001726 	beq	r2,zero,1c68 <xQueueGenericCreate+0xc0>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
    1c0c:	e0bffb17 	ldw	r2,-20(fp)
    1c10:	e0bffc15 	stw	r2,-16(fp)

		if( uxItemSize == ( UBaseType_t ) 0 )
    1c14:	e0bffe17 	ldw	r2,-8(fp)
    1c18:	1000041e 	bne	r2,zero,1c2c <xQueueGenericCreate+0x84>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1c1c:	e0bffc17 	ldw	r2,-16(fp)
    1c20:	e0fffc17 	ldw	r3,-16(fp)
    1c24:	10c00015 	stw	r3,0(r2)
    1c28:	00000406 	br	1c3c <xQueueGenericCreate+0x94>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
    1c2c:	e0bffb17 	ldw	r2,-20(fp)
    1c30:	10c01304 	addi	r3,r2,76
    1c34:	e0bffc17 	ldw	r2,-16(fp)
    1c38:	10c00015 	stw	r3,0(r2)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
    1c3c:	e0bffc17 	ldw	r2,-16(fp)
    1c40:	e0fffd17 	ldw	r3,-12(fp)
    1c44:	10c00f15 	stw	r3,60(r2)
		pxNewQueue->uxItemSize = uxItemSize;
    1c48:	e0bffc17 	ldw	r2,-16(fp)
    1c4c:	e0fffe17 	ldw	r3,-8(fp)
    1c50:	10c01015 	stw	r3,64(r2)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1c54:	01400044 	movi	r5,1
    1c58:	e13ffc17 	ldw	r4,-16(fp)
    1c5c:	0001a900 	call	1a90 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
    1c60:	e0bffc17 	ldw	r2,-16(fp)
    1c64:	e0bffa15 	stw	r2,-24(fp)
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
    1c68:	e0bffa17 	ldw	r2,-24(fp)
}
    1c6c:	e037883a 	mov	sp,fp
    1c70:	dfc00117 	ldw	ra,4(sp)
    1c74:	df000017 	ldw	fp,0(sp)
    1c78:	dec00204 	addi	sp,sp,8
    1c7c:	f800283a 	ret

00001c80 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1c80:	defffc04 	addi	sp,sp,-16
    1c84:	dfc00315 	stw	ra,12(sp)
    1c88:	df000215 	stw	fp,8(sp)
    1c8c:	df000204 	addi	fp,sp,8
    1c90:	2005883a 	mov	r2,r4
    1c94:	e0bfff05 	stb	r2,-4(fp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1c98:	01001304 	movi	r4,76
    1c9c:	0000fd00 	call	fd0 <pvPortMalloc>
    1ca0:	e0bffe15 	stw	r2,-8(fp)
		if( pxNewQueue != NULL )
    1ca4:	e0bffe17 	ldw	r2,-8(fp)
    1ca8:	10002226 	beq	r2,zero,1d34 <xQueueCreateMutex+0xb4>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1cac:	e0bffe17 	ldw	r2,-8(fp)
    1cb0:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1cb4:	e0bffe17 	ldw	r2,-8(fp)
    1cb8:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1cbc:	e0bffe17 	ldw	r2,-8(fp)
    1cc0:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
    1cc4:	e0bffe17 	ldw	r2,-8(fp)
    1cc8:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1ccc:	e0bffe17 	ldw	r2,-8(fp)
    1cd0:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1cd4:	e0bffe17 	ldw	r2,-8(fp)
    1cd8:	00c00044 	movi	r3,1
    1cdc:	10c00f15 	stw	r3,60(r2)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10001015 	stw	zero,64(r2)
			pxNewQueue->xRxLock = queueUNLOCKED;
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	00ffffc4 	movi	r3,-1
    1cf0:	10c01115 	stw	r3,68(r2)
			pxNewQueue->xTxLock = queueUNLOCKED;
    1cf4:	e0bffe17 	ldw	r2,-8(fp)
    1cf8:	00ffffc4 	movi	r3,-1
    1cfc:	10c01215 	stw	r3,72(r2)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10800404 	addi	r2,r2,16
    1d08:	1009883a 	mov	r4,r2
    1d0c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1d10:	e0bffe17 	ldw	r2,-8(fp)
    1d14:	10800904 	addi	r2,r2,36
    1d18:	1009883a 	mov	r4,r2
    1d1c:	00014040 	call	1404 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1d20:	000f883a 	mov	r7,zero
    1d24:	000d883a 	mov	r6,zero
    1d28:	000b883a 	mov	r5,zero
    1d2c:	e13ffe17 	ldw	r4,-8(fp)
    1d30:	0001edc0 	call	1edc <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1d34:	e0bffe17 	ldw	r2,-8(fp)
	}
    1d38:	e037883a 	mov	sp,fp
    1d3c:	dfc00117 	ldw	ra,4(sp)
    1d40:	df000017 	ldw	fp,0(sp)
    1d44:	dec00204 	addi	sp,sp,8
    1d48:	f800283a 	ret

00001d4c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
    1d4c:	defffa04 	addi	sp,sp,-24
    1d50:	dfc00515 	stw	ra,20(sp)
    1d54:	df000415 	stw	fp,16(sp)
    1d58:	dc000315 	stw	r16,12(sp)
    1d5c:	df000404 	addi	fp,sp,16
    1d60:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1d64:	e0bffe17 	ldw	r2,-8(fp)
    1d68:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	14000117 	ldw	r16,4(r2)
    1d74:	0003e100 	call	3e10 <xTaskGetCurrentTaskHandle>
    1d78:	8080101e 	bne	r16,r2,1dbc <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
    1d7c:	e0bffd17 	ldw	r2,-12(fp)
    1d80:	10800317 	ldw	r2,12(r2)
    1d84:	10ffffc4 	addi	r3,r2,-1
    1d88:	e0bffd17 	ldw	r2,-12(fp)
    1d8c:	10c00315 	stw	r3,12(r2)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	10800317 	ldw	r2,12(r2)
    1d98:	1000051e 	bne	r2,zero,1db0 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    1d9c:	000f883a 	mov	r7,zero
    1da0:	000d883a 	mov	r6,zero
    1da4:	000b883a 	mov	r5,zero
    1da8:	e13ffd17 	ldw	r4,-12(fp)
    1dac:	0001edc0 	call	1edc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    1db0:	00800044 	movi	r2,1
    1db4:	e0bffc15 	stw	r2,-16(fp)
    1db8:	00000106 	br	1dc0 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
    1dbc:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    1dc0:	e0bffc17 	ldw	r2,-16(fp)
	}
    1dc4:	e6ffff04 	addi	sp,fp,-4
    1dc8:	dfc00217 	ldw	ra,8(sp)
    1dcc:	df000117 	ldw	fp,4(sp)
    1dd0:	dc000017 	ldw	r16,0(sp)
    1dd4:	dec00304 	addi	sp,sp,12
    1dd8:	f800283a 	ret

00001ddc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    1ddc:	defff904 	addi	sp,sp,-28
    1de0:	dfc00615 	stw	ra,24(sp)
    1de4:	df000515 	stw	fp,20(sp)
    1de8:	dc000415 	stw	r16,16(sp)
    1dec:	df000504 	addi	fp,sp,20
    1df0:	e13ffd15 	stw	r4,-12(fp)
    1df4:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1df8:	e0bffd17 	ldw	r2,-12(fp)
    1dfc:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1e00:	e0bffc17 	ldw	r2,-16(fp)
    1e04:	14000117 	ldw	r16,4(r2)
    1e08:	0003e100 	call	3e10 <xTaskGetCurrentTaskHandle>
    1e0c:	8080081e 	bne	r16,r2,1e30 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    1e10:	e0bffc17 	ldw	r2,-16(fp)
    1e14:	10800317 	ldw	r2,12(r2)
    1e18:	10c00044 	addi	r3,r2,1
    1e1c:	e0bffc17 	ldw	r2,-16(fp)
    1e20:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
    1e24:	00800044 	movi	r2,1
    1e28:	e0bffb15 	stw	r2,-20(fp)
    1e2c:	00000e06 	br	1e68 <xQueueTakeMutexRecursive+0x8c>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    1e30:	000f883a 	mov	r7,zero
    1e34:	e1bffe17 	ldw	r6,-8(fp)
    1e38:	000b883a 	mov	r5,zero
    1e3c:	e13ffc17 	ldw	r4,-16(fp)
    1e40:	000222c0 	call	222c <xQueueGenericReceive>
    1e44:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
    1e48:	e0bffb17 	ldw	r2,-20(fp)
    1e4c:	10800058 	cmpnei	r2,r2,1
    1e50:	1000051e 	bne	r2,zero,1e68 <xQueueTakeMutexRecursive+0x8c>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    1e54:	e0bffc17 	ldw	r2,-16(fp)
    1e58:	10800317 	ldw	r2,12(r2)
    1e5c:	10c00044 	addi	r3,r2,1
    1e60:	e0bffc17 	ldw	r2,-16(fp)
    1e64:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    1e68:	e0bffb17 	ldw	r2,-20(fp)
	}
    1e6c:	e6ffff04 	addi	sp,fp,-4
    1e70:	dfc00217 	ldw	ra,8(sp)
    1e74:	df000117 	ldw	fp,4(sp)
    1e78:	dc000017 	ldw	r16,0(sp)
    1e7c:	dec00304 	addi	sp,sp,12
    1e80:	f800283a 	ret

00001e84 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    1e84:	defffb04 	addi	sp,sp,-20
    1e88:	dfc00415 	stw	ra,16(sp)
    1e8c:	df000315 	stw	fp,12(sp)
    1e90:	df000304 	addi	fp,sp,12
    1e94:	e13ffe15 	stw	r4,-8(fp)
    1e98:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    1e9c:	01800084 	movi	r6,2
    1ea0:	000b883a 	mov	r5,zero
    1ea4:	e13ffe17 	ldw	r4,-8(fp)
    1ea8:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    1eac:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
    1eb0:	e0bffd17 	ldw	r2,-12(fp)
    1eb4:	10000326 	beq	r2,zero,1ec4 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    1eb8:	e0bffd17 	ldw	r2,-12(fp)
    1ebc:	e0ffff17 	ldw	r3,-4(fp)
    1ec0:	10c00e15 	stw	r3,56(r2)
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
    1ec4:	e0bffd17 	ldw	r2,-12(fp)
	}
    1ec8:	e037883a 	mov	sp,fp
    1ecc:	dfc00117 	ldw	ra,4(sp)
    1ed0:	df000017 	ldw	fp,0(sp)
    1ed4:	dec00204 	addi	sp,sp,8
    1ed8:	f800283a 	ret

00001edc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1edc:	defff504 	addi	sp,sp,-44
    1ee0:	dfc00a15 	stw	ra,40(sp)
    1ee4:	df000915 	stw	fp,36(sp)
    1ee8:	df000904 	addi	fp,sp,36
    1eec:	e13ffc15 	stw	r4,-16(fp)
    1ef0:	e17ffd15 	stw	r5,-12(fp)
    1ef4:	e1bffe15 	stw	r6,-8(fp)
    1ef8:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1efc:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1f00:	e0bffc17 	ldw	r2,-16(fp)
    1f04:	e0bff815 	stw	r2,-32(fp)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f08:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f0c:	e0bff817 	ldw	r2,-32(fp)
    1f10:	10c00e17 	ldw	r3,56(r2)
    1f14:	e0bff817 	ldw	r2,-32(fp)
    1f18:	10800f17 	ldw	r2,60(r2)
    1f1c:	18800336 	bltu	r3,r2,1f2c <xQueueGenericSend+0x50>
    1f20:	e0bfff17 	ldw	r2,-4(fp)
    1f24:	10800098 	cmpnei	r2,r2,2
    1f28:	1000161e 	bne	r2,zero,1f84 <xQueueGenericSend+0xa8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f2c:	e1bfff17 	ldw	r6,-4(fp)
    1f30:	e17ffd17 	ldw	r5,-12(fp)
    1f34:	e13ff817 	ldw	r4,-32(fp)
    1f38:	00026900 	call	2690 <prvCopyDataToQueue>
    1f3c:	e0bff915 	stw	r2,-28(fp)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f40:	e0bff817 	ldw	r2,-32(fp)
    1f44:	10800917 	ldw	r2,36(r2)
    1f48:	10000826 	beq	r2,zero,1f6c <xQueueGenericSend+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1f4c:	e0bff817 	ldw	r2,-32(fp)
    1f50:	10800904 	addi	r2,r2,36
    1f54:	1009883a 	mov	r4,r2
    1f58:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    1f5c:	10800058 	cmpnei	r2,r2,1
    1f60:	1000051e 	bne	r2,zero,1f78 <xQueueGenericSend+0x9c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1f64:	003b683a 	trap	0
    1f68:	00000306 	br	1f78 <xQueueGenericSend+0x9c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1f6c:	e0bff917 	ldw	r2,-28(fp)
    1f70:	10000126 	beq	r2,zero,1f78 <xQueueGenericSend+0x9c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1f74:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1f78:	00040fc0 	call	40fc <vTaskExitCritical>
				return pdPASS;
    1f7c:	00800044 	movi	r2,1
    1f80:	00003906 	br	2068 <xQueueGenericSend+0x18c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1f84:	e0bffe17 	ldw	r2,-8(fp)
    1f88:	1000031e 	bne	r2,zero,1f98 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1f8c:	00040fc0 	call	40fc <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1f90:	0005883a 	mov	r2,zero
    1f94:	00003406 	br	2068 <xQueueGenericSend+0x18c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1f98:	e0bff717 	ldw	r2,-36(fp)
    1f9c:	1000051e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xd8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1fa0:	e0bffa04 	addi	r2,fp,-24
    1fa4:	1009883a 	mov	r4,r2
    1fa8:	000376c0 	call	376c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1fac:	00800044 	movi	r2,1
    1fb0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1fb4:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1fb8:	0002f6c0 	call	2f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1fbc:	00040a80 	call	40a8 <vTaskEnterCritical>
    1fc0:	e0bff817 	ldw	r2,-32(fp)
    1fc4:	10801117 	ldw	r2,68(r2)
    1fc8:	10bfffd8 	cmpnei	r2,r2,-1
    1fcc:	1000021e 	bne	r2,zero,1fd8 <xQueueGenericSend+0xfc>
    1fd0:	e0bff817 	ldw	r2,-32(fp)
    1fd4:	10001115 	stw	zero,68(r2)
    1fd8:	e0bff817 	ldw	r2,-32(fp)
    1fdc:	10801217 	ldw	r2,72(r2)
    1fe0:	10bfffd8 	cmpnei	r2,r2,-1
    1fe4:	1000021e 	bne	r2,zero,1ff0 <xQueueGenericSend+0x114>
    1fe8:	e0bff817 	ldw	r2,-32(fp)
    1fec:	10001215 	stw	zero,72(r2)
    1ff0:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ff4:	e0fffe04 	addi	r3,fp,-8
    1ff8:	e0bffa04 	addi	r2,fp,-24
    1ffc:	180b883a 	mov	r5,r3
    2000:	1009883a 	mov	r4,r2
    2004:	00037a80 	call	37a8 <xTaskCheckForTimeOut>
    2008:	1000131e 	bne	r2,zero,2058 <xQueueGenericSend+0x17c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    200c:	e13ff817 	ldw	r4,-32(fp)
    2010:	0002a400 	call	2a40 <prvIsQueueFull>
    2014:	10000c26 	beq	r2,zero,2048 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2018:	e0bff817 	ldw	r2,-32(fp)
    201c:	10800404 	addi	r2,r2,16
    2020:	e0fffe17 	ldw	r3,-8(fp)
    2024:	180b883a 	mov	r5,r3
    2028:	1009883a 	mov	r4,r2
    202c:	00034480 	call	3448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2030:	e13ff817 	ldw	r4,-32(fp)
    2034:	00028bc0 	call	28bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2038:	0002f980 	call	2f98 <xTaskResumeAll>
    203c:	103fb21e 	bne	r2,zero,1f08 <__alt_data_end+0xf0001f08>
				{
					portYIELD_WITHIN_API();
    2040:	003b683a 	trap	0
    2044:	003fb006 	br	1f08 <__alt_data_end+0xf0001f08>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2048:	e13ff817 	ldw	r4,-32(fp)
    204c:	00028bc0 	call	28bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2050:	0002f980 	call	2f98 <xTaskResumeAll>
    2054:	003fac06 	br	1f08 <__alt_data_end+0xf0001f08>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2058:	e13ff817 	ldw	r4,-32(fp)
    205c:	00028bc0 	call	28bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2060:	0002f980 	call	2f98 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2064:	0005883a 	mov	r2,zero
		}
	}
}
    2068:	e037883a 	mov	sp,fp
    206c:	dfc00117 	ldw	ra,4(sp)
    2070:	df000017 	ldw	fp,0(sp)
    2074:	dec00204 	addi	sp,sp,8
    2078:	f800283a 	ret

0000207c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    207c:	defff704 	addi	sp,sp,-36
    2080:	dfc00815 	stw	ra,32(sp)
    2084:	df000715 	stw	fp,28(sp)
    2088:	df000704 	addi	fp,sp,28
    208c:	e13ffc15 	stw	r4,-16(fp)
    2090:	e17ffd15 	stw	r5,-12(fp)
    2094:	e1bffe15 	stw	r6,-8(fp)
    2098:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    209c:	e0bffc17 	ldw	r2,-16(fp)
    20a0:	e0bffa15 	stw	r2,-24(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20a4:	e03ffb15 	stw	zero,-20(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20a8:	e0bffa17 	ldw	r2,-24(fp)
    20ac:	10c00e17 	ldw	r3,56(r2)
    20b0:	e0bffa17 	ldw	r2,-24(fp)
    20b4:	10800f17 	ldw	r2,60(r2)
    20b8:	18800336 	bltu	r3,r2,20c8 <xQueueGenericSendFromISR+0x4c>
    20bc:	e0bfff17 	ldw	r2,-4(fp)
    20c0:	10800098 	cmpnei	r2,r2,2
    20c4:	10001e1e 	bne	r2,zero,2140 <xQueueGenericSendFromISR+0xc4>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    20c8:	e1bfff17 	ldw	r6,-4(fp)
    20cc:	e17ffd17 	ldw	r5,-12(fp)
    20d0:	e13ffa17 	ldw	r4,-24(fp)
    20d4:	00026900 	call	2690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    20d8:	e0bffa17 	ldw	r2,-24(fp)
    20dc:	10801217 	ldw	r2,72(r2)
    20e0:	10bfffd8 	cmpnei	r2,r2,-1
    20e4:	10000e1e 	bne	r2,zero,2120 <xQueueGenericSendFromISR+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20e8:	e0bffa17 	ldw	r2,-24(fp)
    20ec:	10800917 	ldw	r2,36(r2)
    20f0:	10001026 	beq	r2,zero,2134 <xQueueGenericSendFromISR+0xb8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    20f4:	e0bffa17 	ldw	r2,-24(fp)
    20f8:	10800904 	addi	r2,r2,36
    20fc:	1009883a 	mov	r4,r2
    2100:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    2104:	10000b26 	beq	r2,zero,2134 <xQueueGenericSendFromISR+0xb8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2108:	e0bffe17 	ldw	r2,-8(fp)
    210c:	10000926 	beq	r2,zero,2134 <xQueueGenericSendFromISR+0xb8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2110:	e0bffe17 	ldw	r2,-8(fp)
    2114:	00c00044 	movi	r3,1
    2118:	10c00015 	stw	r3,0(r2)
    211c:	00000506 	br	2134 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2120:	e0bffa17 	ldw	r2,-24(fp)
    2124:	10801217 	ldw	r2,72(r2)
    2128:	10c00044 	addi	r3,r2,1
    212c:	e0bffa17 	ldw	r2,-24(fp)
    2130:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2134:	00800044 	movi	r2,1
    2138:	e0bff915 	stw	r2,-28(fp)
    213c:	00000106 	br	2144 <xQueueGenericSendFromISR+0xc8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2140:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2144:	e0bff917 	ldw	r2,-28(fp)
}
    2148:	e037883a 	mov	sp,fp
    214c:	dfc00117 	ldw	ra,4(sp)
    2150:	df000017 	ldw	fp,0(sp)
    2154:	dec00204 	addi	sp,sp,8
    2158:	f800283a 	ret

0000215c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    215c:	defff904 	addi	sp,sp,-28
    2160:	dfc00615 	stw	ra,24(sp)
    2164:	df000515 	stw	fp,20(sp)
    2168:	df000504 	addi	fp,sp,20
    216c:	e13ffe15 	stw	r4,-8(fp)
    2170:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2174:	e0bffe17 	ldw	r2,-8(fp)
    2178:	e0bffc15 	stw	r2,-16(fp)
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    217c:	e03ffd15 	stw	zero,-12(fp)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2180:	e0bffc17 	ldw	r2,-16(fp)
    2184:	10c00e17 	ldw	r3,56(r2)
    2188:	e0bffc17 	ldw	r2,-16(fp)
    218c:	10800f17 	ldw	r2,60(r2)
    2190:	18801f2e 	bgeu	r3,r2,2210 <xQueueGiveFromISR+0xb4>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
    2194:	e0bffc17 	ldw	r2,-16(fp)
    2198:	10800e17 	ldw	r2,56(r2)
    219c:	10c00044 	addi	r3,r2,1
    21a0:	e0bffc17 	ldw	r2,-16(fp)
    21a4:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    21a8:	e0bffc17 	ldw	r2,-16(fp)
    21ac:	10801217 	ldw	r2,72(r2)
    21b0:	10bfffd8 	cmpnei	r2,r2,-1
    21b4:	10000e1e 	bne	r2,zero,21f0 <xQueueGiveFromISR+0x94>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21b8:	e0bffc17 	ldw	r2,-16(fp)
    21bc:	10800917 	ldw	r2,36(r2)
    21c0:	10001026 	beq	r2,zero,2204 <xQueueGiveFromISR+0xa8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    21c4:	e0bffc17 	ldw	r2,-16(fp)
    21c8:	10800904 	addi	r2,r2,36
    21cc:	1009883a 	mov	r4,r2
    21d0:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    21d4:	10000b26 	beq	r2,zero,2204 <xQueueGiveFromISR+0xa8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    21d8:	e0bfff17 	ldw	r2,-4(fp)
    21dc:	10000926 	beq	r2,zero,2204 <xQueueGiveFromISR+0xa8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    21e0:	e0bfff17 	ldw	r2,-4(fp)
    21e4:	00c00044 	movi	r3,1
    21e8:	10c00015 	stw	r3,0(r2)
    21ec:	00000506 	br	2204 <xQueueGiveFromISR+0xa8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    21f0:	e0bffc17 	ldw	r2,-16(fp)
    21f4:	10801217 	ldw	r2,72(r2)
    21f8:	10c00044 	addi	r3,r2,1
    21fc:	e0bffc17 	ldw	r2,-16(fp)
    2200:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2204:	00800044 	movi	r2,1
    2208:	e0bffb15 	stw	r2,-20(fp)
    220c:	00000106 	br	2214 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2210:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2214:	e0bffb17 	ldw	r2,-20(fp)
}
    2218:	e037883a 	mov	sp,fp
    221c:	dfc00117 	ldw	ra,4(sp)
    2220:	df000017 	ldw	fp,0(sp)
    2224:	dec00204 	addi	sp,sp,8
    2228:	f800283a 	ret

0000222c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    222c:	defff504 	addi	sp,sp,-44
    2230:	dfc00a15 	stw	ra,40(sp)
    2234:	df000915 	stw	fp,36(sp)
    2238:	df000904 	addi	fp,sp,36
    223c:	e13ffc15 	stw	r4,-16(fp)
    2240:	e17ffd15 	stw	r5,-12(fp)
    2244:	e1bffe15 	stw	r6,-8(fp)
    2248:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
    224c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2250:	e0bffc17 	ldw	r2,-16(fp)
    2254:	e0bff815 	stw	r2,-32(fp)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2258:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    225c:	e0bff817 	ldw	r2,-32(fp)
    2260:	10800e17 	ldw	r2,56(r2)
    2264:	10002e26 	beq	r2,zero,2320 <xQueueGenericReceive+0xf4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2268:	e0bff817 	ldw	r2,-32(fp)
    226c:	10800317 	ldw	r2,12(r2)
    2270:	e0bff915 	stw	r2,-28(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2274:	e17ffd17 	ldw	r5,-12(fp)
    2278:	e13ff817 	ldw	r4,-32(fp)
    227c:	00028200 	call	2820 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2280:	e0bfff17 	ldw	r2,-4(fp)
    2284:	1000171e 	bne	r2,zero,22e4 <xQueueGenericReceive+0xb8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2288:	e0bff817 	ldw	r2,-32(fp)
    228c:	10800e17 	ldw	r2,56(r2)
    2290:	10ffffc4 	addi	r3,r2,-1
    2294:	e0bff817 	ldw	r2,-32(fp)
    2298:	10c00e15 	stw	r3,56(r2)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    229c:	e0bff817 	ldw	r2,-32(fp)
    22a0:	10800017 	ldw	r2,0(r2)
    22a4:	1000041e 	bne	r2,zero,22b8 <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    22a8:	00041a00 	call	41a0 <pvTaskIncrementMutexHeldCount>
    22ac:	1007883a 	mov	r3,r2
    22b0:	e0bff817 	ldw	r2,-32(fp)
    22b4:	10c00115 	stw	r3,4(r2)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    22b8:	e0bff817 	ldw	r2,-32(fp)
    22bc:	10800417 	ldw	r2,16(r2)
    22c0:	10001426 	beq	r2,zero,2314 <xQueueGenericReceive+0xe8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    22c4:	e0bff817 	ldw	r2,-32(fp)
    22c8:	10800404 	addi	r2,r2,16
    22cc:	1009883a 	mov	r4,r2
    22d0:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    22d4:	10800058 	cmpnei	r2,r2,1
    22d8:	10000e1e 	bne	r2,zero,2314 <xQueueGenericReceive+0xe8>
						{
							queueYIELD_IF_USING_PREEMPTION();
    22dc:	003b683a 	trap	0
    22e0:	00000c06 	br	2314 <xQueueGenericReceive+0xe8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    22e4:	e0bff817 	ldw	r2,-32(fp)
    22e8:	e0fff917 	ldw	r3,-28(fp)
    22ec:	10c00315 	stw	r3,12(r2)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    22f0:	e0bff817 	ldw	r2,-32(fp)
    22f4:	10800917 	ldw	r2,36(r2)
    22f8:	10000626 	beq	r2,zero,2314 <xQueueGenericReceive+0xe8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22fc:	e0bff817 	ldw	r2,-32(fp)
    2300:	10800904 	addi	r2,r2,36
    2304:	1009883a 	mov	r4,r2
    2308:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    230c:	10000126 	beq	r2,zero,2314 <xQueueGenericReceive+0xe8>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2310:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2314:	00040fc0 	call	40fc <vTaskExitCritical>
				return pdPASS;
    2318:	00800044 	movi	r2,1
    231c:	00004206 	br	2428 <xQueueGenericReceive+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2320:	e0bffe17 	ldw	r2,-8(fp)
    2324:	1000031e 	bne	r2,zero,2334 <xQueueGenericReceive+0x108>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2328:	00040fc0 	call	40fc <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    232c:	0005883a 	mov	r2,zero
    2330:	00003d06 	br	2428 <xQueueGenericReceive+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
    2334:	e0bff717 	ldw	r2,-36(fp)
    2338:	1000051e 	bne	r2,zero,2350 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    233c:	e0bffa04 	addi	r2,fp,-24
    2340:	1009883a 	mov	r4,r2
    2344:	000376c0 	call	376c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2348:	00800044 	movi	r2,1
    234c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2350:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2354:	0002f6c0 	call	2f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2358:	00040a80 	call	40a8 <vTaskEnterCritical>
    235c:	e0bff817 	ldw	r2,-32(fp)
    2360:	10801117 	ldw	r2,68(r2)
    2364:	10bfffd8 	cmpnei	r2,r2,-1
    2368:	1000021e 	bne	r2,zero,2374 <xQueueGenericReceive+0x148>
    236c:	e0bff817 	ldw	r2,-32(fp)
    2370:	10001115 	stw	zero,68(r2)
    2374:	e0bff817 	ldw	r2,-32(fp)
    2378:	10801217 	ldw	r2,72(r2)
    237c:	10bfffd8 	cmpnei	r2,r2,-1
    2380:	1000021e 	bne	r2,zero,238c <xQueueGenericReceive+0x160>
    2384:	e0bff817 	ldw	r2,-32(fp)
    2388:	10001215 	stw	zero,72(r2)
    238c:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2390:	e0fffe04 	addi	r3,fp,-8
    2394:	e0bffa04 	addi	r2,fp,-24
    2398:	180b883a 	mov	r5,r3
    239c:	1009883a 	mov	r4,r2
    23a0:	00037a80 	call	37a8 <xTaskCheckForTimeOut>
    23a4:	10001c1e 	bne	r2,zero,2418 <xQueueGenericReceive+0x1ec>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    23a8:	e13ff817 	ldw	r4,-32(fp)
    23ac:	00029b00 	call	29b0 <prvIsQueueEmpty>
    23b0:	10001526 	beq	r2,zero,2408 <xQueueGenericReceive+0x1dc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    23b4:	e0bff817 	ldw	r2,-32(fp)
    23b8:	10800017 	ldw	r2,0(r2)
    23bc:	1000061e 	bne	r2,zero,23d8 <xQueueGenericReceive+0x1ac>
					{
						taskENTER_CRITICAL();
    23c0:	00040a80 	call	40a8 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    23c4:	e0bff817 	ldw	r2,-32(fp)
    23c8:	10800117 	ldw	r2,4(r2)
    23cc:	1009883a 	mov	r4,r2
    23d0:	0003e840 	call	3e84 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    23d4:	00040fc0 	call	40fc <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    23d8:	e0bff817 	ldw	r2,-32(fp)
    23dc:	10800904 	addi	r2,r2,36
    23e0:	e0fffe17 	ldw	r3,-8(fp)
    23e4:	180b883a 	mov	r5,r3
    23e8:	1009883a 	mov	r4,r2
    23ec:	00034480 	call	3448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    23f0:	e13ff817 	ldw	r4,-32(fp)
    23f4:	00028bc0 	call	28bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    23f8:	0002f980 	call	2f98 <xTaskResumeAll>
    23fc:	103f961e 	bne	r2,zero,2258 <__alt_data_end+0xf0002258>
				{
					portYIELD_WITHIN_API();
    2400:	003b683a 	trap	0
    2404:	003f9406 	br	2258 <__alt_data_end+0xf0002258>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2408:	e13ff817 	ldw	r4,-32(fp)
    240c:	00028bc0 	call	28bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2410:	0002f980 	call	2f98 <xTaskResumeAll>
    2414:	003f9006 	br	2258 <__alt_data_end+0xf0002258>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2418:	e13ff817 	ldw	r4,-32(fp)
    241c:	00028bc0 	call	28bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2420:	0002f980 	call	2f98 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2424:	0005883a 	mov	r2,zero
		}
	}
}
    2428:	e037883a 	mov	sp,fp
    242c:	dfc00117 	ldw	ra,4(sp)
    2430:	df000017 	ldw	fp,0(sp)
    2434:	dec00204 	addi	sp,sp,8
    2438:	f800283a 	ret

0000243c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    243c:	defff804 	addi	sp,sp,-32
    2440:	dfc00715 	stw	ra,28(sp)
    2444:	df000615 	stw	fp,24(sp)
    2448:	df000604 	addi	fp,sp,24
    244c:	e13ffd15 	stw	r4,-12(fp)
    2450:	e17ffe15 	stw	r5,-8(fp)
    2454:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2458:	e0bffd17 	ldw	r2,-12(fp)
    245c:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2460:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2464:	e0bffb17 	ldw	r2,-20(fp)
    2468:	10800e17 	ldw	r2,56(r2)
    246c:	10002226 	beq	r2,zero,24f8 <xQueueReceiveFromISR+0xbc>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2470:	e17ffe17 	ldw	r5,-8(fp)
    2474:	e13ffb17 	ldw	r4,-20(fp)
    2478:	00028200 	call	2820 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    247c:	e0bffb17 	ldw	r2,-20(fp)
    2480:	10800e17 	ldw	r2,56(r2)
    2484:	10ffffc4 	addi	r3,r2,-1
    2488:	e0bffb17 	ldw	r2,-20(fp)
    248c:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2490:	e0bffb17 	ldw	r2,-20(fp)
    2494:	10801117 	ldw	r2,68(r2)
    2498:	10bfffd8 	cmpnei	r2,r2,-1
    249c:	10000e1e 	bne	r2,zero,24d8 <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    24a0:	e0bffb17 	ldw	r2,-20(fp)
    24a4:	10800417 	ldw	r2,16(r2)
    24a8:	10001026 	beq	r2,zero,24ec <xQueueReceiveFromISR+0xb0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    24ac:	e0bffb17 	ldw	r2,-20(fp)
    24b0:	10800404 	addi	r2,r2,16
    24b4:	1009883a 	mov	r4,r2
    24b8:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    24bc:	10000b26 	beq	r2,zero,24ec <xQueueReceiveFromISR+0xb0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    24c0:	e0bfff17 	ldw	r2,-4(fp)
    24c4:	10000926 	beq	r2,zero,24ec <xQueueReceiveFromISR+0xb0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    24c8:	e0bfff17 	ldw	r2,-4(fp)
    24cc:	00c00044 	movi	r3,1
    24d0:	10c00015 	stw	r3,0(r2)
    24d4:	00000506 	br	24ec <xQueueReceiveFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    24d8:	e0bffb17 	ldw	r2,-20(fp)
    24dc:	10801117 	ldw	r2,68(r2)
    24e0:	10c00044 	addi	r3,r2,1
    24e4:	e0bffb17 	ldw	r2,-20(fp)
    24e8:	10c01115 	stw	r3,68(r2)
			}

			xReturn = pdPASS;
    24ec:	00800044 	movi	r2,1
    24f0:	e0bffa15 	stw	r2,-24(fp)
    24f4:	00000106 	br	24fc <xQueueReceiveFromISR+0xc0>
		}
		else
		{
			xReturn = pdFAIL;
    24f8:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    24fc:	e0bffa17 	ldw	r2,-24(fp)
}
    2500:	e037883a 	mov	sp,fp
    2504:	dfc00117 	ldw	ra,4(sp)
    2508:	df000017 	ldw	fp,0(sp)
    250c:	dec00204 	addi	sp,sp,8
    2510:	f800283a 	ret

00002514 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2514:	defff804 	addi	sp,sp,-32
    2518:	dfc00715 	stw	ra,28(sp)
    251c:	df000615 	stw	fp,24(sp)
    2520:	df000604 	addi	fp,sp,24
    2524:	e13ffe15 	stw	r4,-8(fp)
    2528:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    252c:	e0bffe17 	ldw	r2,-8(fp)
    2530:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2534:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2538:	e0bffb17 	ldw	r2,-20(fp)
    253c:	10800e17 	ldw	r2,56(r2)
    2540:	10000c26 	beq	r2,zero,2574 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2544:	e0bffb17 	ldw	r2,-20(fp)
    2548:	10800317 	ldw	r2,12(r2)
    254c:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2550:	e17fff17 	ldw	r5,-4(fp)
    2554:	e13ffb17 	ldw	r4,-20(fp)
    2558:	00028200 	call	2820 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    255c:	e0bffb17 	ldw	r2,-20(fp)
    2560:	e0fffd17 	ldw	r3,-12(fp)
    2564:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
    2568:	00800044 	movi	r2,1
    256c:	e0bffa15 	stw	r2,-24(fp)
    2570:	00000106 	br	2578 <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
    2574:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2578:	e0bffa17 	ldw	r2,-24(fp)
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2590:	defffc04 	addi	sp,sp,-16
    2594:	dfc00315 	stw	ra,12(sp)
    2598:	df000215 	stw	fp,8(sp)
    259c:	df000204 	addi	fp,sp,8
    25a0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    25a4:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    25a8:	e0bfff17 	ldw	r2,-4(fp)
    25ac:	10800e17 	ldw	r2,56(r2)
    25b0:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    25b4:	00040fc0 	call	40fc <vTaskExitCritical>

	return uxReturn;
    25b8:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    25bc:	e037883a 	mov	sp,fp
    25c0:	dfc00117 	ldw	ra,4(sp)
    25c4:	df000017 	ldw	fp,0(sp)
    25c8:	dec00204 	addi	sp,sp,8
    25cc:	f800283a 	ret

000025d0 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    25d0:	defffb04 	addi	sp,sp,-20
    25d4:	dfc00415 	stw	ra,16(sp)
    25d8:	df000315 	stw	fp,12(sp)
    25dc:	df000304 	addi	fp,sp,12
    25e0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    25e4:	e0bfff17 	ldw	r2,-4(fp)
    25e8:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    25ec:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    25f0:	e0bffd17 	ldw	r2,-12(fp)
    25f4:	10c00f17 	ldw	r3,60(r2)
    25f8:	e0bffd17 	ldw	r2,-12(fp)
    25fc:	10800e17 	ldw	r2,56(r2)
    2600:	1885c83a 	sub	r2,r3,r2
    2604:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2608:	00040fc0 	call	40fc <vTaskExitCritical>

	return uxReturn;
    260c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2610:	e037883a 	mov	sp,fp
    2614:	dfc00117 	ldw	ra,4(sp)
    2618:	df000017 	ldw	fp,0(sp)
    261c:	dec00204 	addi	sp,sp,8
    2620:	f800283a 	ret

00002624 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2624:	defffd04 	addi	sp,sp,-12
    2628:	df000215 	stw	fp,8(sp)
    262c:	df000204 	addi	fp,sp,8
    2630:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2634:	e0bfff17 	ldw	r2,-4(fp)
    2638:	10800e17 	ldw	r2,56(r2)
    263c:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
    2640:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2644:	e037883a 	mov	sp,fp
    2648:	df000017 	ldw	fp,0(sp)
    264c:	dec00104 	addi	sp,sp,4
    2650:	f800283a 	ret

00002654 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2654:	defffc04 	addi	sp,sp,-16
    2658:	dfc00315 	stw	ra,12(sp)
    265c:	df000215 	stw	fp,8(sp)
    2660:	df000204 	addi	fp,sp,8
    2664:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2668:	e0bfff17 	ldw	r2,-4(fp)
    266c:	e0bffe15 	stw	r2,-8(fp)
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    2670:	e13ffe17 	ldw	r4,-8(fp)
    2674:	00011500 	call	1150 <vPortFree>
}
    2678:	0001883a 	nop
    267c:	e037883a 	mov	sp,fp
    2680:	dfc00117 	ldw	ra,4(sp)
    2684:	df000017 	ldw	fp,0(sp)
    2688:	dec00204 	addi	sp,sp,8
    268c:	f800283a 	ret

00002690 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2690:	defffa04 	addi	sp,sp,-24
    2694:	dfc00515 	stw	ra,20(sp)
    2698:	df000415 	stw	fp,16(sp)
    269c:	df000404 	addi	fp,sp,16
    26a0:	e13ffd15 	stw	r4,-12(fp)
    26a4:	e17ffe15 	stw	r5,-8(fp)
    26a8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
    26ac:	e03ffc15 	stw	zero,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    26b0:	e0bffd17 	ldw	r2,-12(fp)
    26b4:	10801017 	ldw	r2,64(r2)
    26b8:	10000b1e 	bne	r2,zero,26e8 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    26bc:	e0bffd17 	ldw	r2,-12(fp)
    26c0:	10800017 	ldw	r2,0(r2)
    26c4:	10004b1e 	bne	r2,zero,27f4 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    26c8:	e0bffd17 	ldw	r2,-12(fp)
    26cc:	10800117 	ldw	r2,4(r2)
    26d0:	1009883a 	mov	r4,r2
    26d4:	0003fac0 	call	3fac <xTaskPriorityDisinherit>
    26d8:	e0bffc15 	stw	r2,-16(fp)
				pxQueue->pxMutexHolder = NULL;
    26dc:	e0bffd17 	ldw	r2,-12(fp)
    26e0:	10000115 	stw	zero,4(r2)
    26e4:	00004306 	br	27f4 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    26e8:	e0bfff17 	ldw	r2,-4(fp)
    26ec:	1000191e 	bne	r2,zero,2754 <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    26f0:	e0bffd17 	ldw	r2,-12(fp)
    26f4:	10c00217 	ldw	r3,8(r2)
    26f8:	e0bffd17 	ldw	r2,-12(fp)
    26fc:	10801017 	ldw	r2,64(r2)
    2700:	100d883a 	mov	r6,r2
    2704:	e17ffe17 	ldw	r5,-8(fp)
    2708:	1809883a 	mov	r4,r3
    270c:	000957c0 	call	957c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2710:	e0bffd17 	ldw	r2,-12(fp)
    2714:	10c00217 	ldw	r3,8(r2)
    2718:	e0bffd17 	ldw	r2,-12(fp)
    271c:	10801017 	ldw	r2,64(r2)
    2720:	1887883a 	add	r3,r3,r2
    2724:	e0bffd17 	ldw	r2,-12(fp)
    2728:	10c00215 	stw	r3,8(r2)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	10c00217 	ldw	r3,8(r2)
    2734:	e0bffd17 	ldw	r2,-12(fp)
    2738:	10800117 	ldw	r2,4(r2)
    273c:	18802d36 	bltu	r3,r2,27f4 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2740:	e0bffd17 	ldw	r2,-12(fp)
    2744:	10c00017 	ldw	r3,0(r2)
    2748:	e0bffd17 	ldw	r2,-12(fp)
    274c:	10c00215 	stw	r3,8(r2)
    2750:	00002806 	br	27f4 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2754:	e0bffd17 	ldw	r2,-12(fp)
    2758:	10c00317 	ldw	r3,12(r2)
    275c:	e0bffd17 	ldw	r2,-12(fp)
    2760:	10801017 	ldw	r2,64(r2)
    2764:	100d883a 	mov	r6,r2
    2768:	e17ffe17 	ldw	r5,-8(fp)
    276c:	1809883a 	mov	r4,r3
    2770:	000957c0 	call	957c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2774:	e0bffd17 	ldw	r2,-12(fp)
    2778:	10c00317 	ldw	r3,12(r2)
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	10801017 	ldw	r2,64(r2)
    2784:	0085c83a 	sub	r2,zero,r2
    2788:	1887883a 	add	r3,r3,r2
    278c:	e0bffd17 	ldw	r2,-12(fp)
    2790:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2794:	e0bffd17 	ldw	r2,-12(fp)
    2798:	10c00317 	ldw	r3,12(r2)
    279c:	e0bffd17 	ldw	r2,-12(fp)
    27a0:	10800017 	ldw	r2,0(r2)
    27a4:	1880082e 	bgeu	r3,r2,27c8 <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	10c00117 	ldw	r3,4(r2)
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	10801017 	ldw	r2,64(r2)
    27b8:	0085c83a 	sub	r2,zero,r2
    27bc:	1887883a 	add	r3,r3,r2
    27c0:	e0bffd17 	ldw	r2,-12(fp)
    27c4:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    27c8:	e0bfff17 	ldw	r2,-4(fp)
    27cc:	10800098 	cmpnei	r2,r2,2
    27d0:	1000081e 	bne	r2,zero,27f4 <prvCopyDataToQueue+0x164>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    27d4:	e0bffd17 	ldw	r2,-12(fp)
    27d8:	10800e17 	ldw	r2,56(r2)
    27dc:	10000526 	beq	r2,zero,27f4 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	10800e17 	ldw	r2,56(r2)
    27e8:	10ffffc4 	addi	r3,r2,-1
    27ec:	e0bffd17 	ldw	r2,-12(fp)
    27f0:	10c00e15 	stw	r3,56(r2)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    27f4:	e0bffd17 	ldw	r2,-12(fp)
    27f8:	10800e17 	ldw	r2,56(r2)
    27fc:	10c00044 	addi	r3,r2,1
    2800:	e0bffd17 	ldw	r2,-12(fp)
    2804:	10c00e15 	stw	r3,56(r2)

	return xReturn;
    2808:	e0bffc17 	ldw	r2,-16(fp)
}
    280c:	e037883a 	mov	sp,fp
    2810:	dfc00117 	ldw	ra,4(sp)
    2814:	df000017 	ldw	fp,0(sp)
    2818:	dec00204 	addi	sp,sp,8
    281c:	f800283a 	ret

00002820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2820:	defffc04 	addi	sp,sp,-16
    2824:	dfc00315 	stw	ra,12(sp)
    2828:	df000215 	stw	fp,8(sp)
    282c:	df000204 	addi	fp,sp,8
    2830:	e13ffe15 	stw	r4,-8(fp)
    2834:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2838:	e0bffe17 	ldw	r2,-8(fp)
    283c:	10801017 	ldw	r2,64(r2)
    2840:	10001826 	beq	r2,zero,28a4 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2844:	e0bffe17 	ldw	r2,-8(fp)
    2848:	10c00317 	ldw	r3,12(r2)
    284c:	e0bffe17 	ldw	r2,-8(fp)
    2850:	10801017 	ldw	r2,64(r2)
    2854:	1887883a 	add	r3,r3,r2
    2858:	e0bffe17 	ldw	r2,-8(fp)
    285c:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2860:	e0bffe17 	ldw	r2,-8(fp)
    2864:	10c00317 	ldw	r3,12(r2)
    2868:	e0bffe17 	ldw	r2,-8(fp)
    286c:	10800117 	ldw	r2,4(r2)
    2870:	18800436 	bltu	r3,r2,2884 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2874:	e0bffe17 	ldw	r2,-8(fp)
    2878:	10c00017 	ldw	r3,0(r2)
    287c:	e0bffe17 	ldw	r2,-8(fp)
    2880:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2884:	e0bffe17 	ldw	r2,-8(fp)
    2888:	10c00317 	ldw	r3,12(r2)
    288c:	e0bffe17 	ldw	r2,-8(fp)
    2890:	10801017 	ldw	r2,64(r2)
    2894:	100d883a 	mov	r6,r2
    2898:	180b883a 	mov	r5,r3
    289c:	e13fff17 	ldw	r4,-4(fp)
    28a0:	000957c0 	call	957c <memcpy>
	}
}
    28a4:	0001883a 	nop
    28a8:	e037883a 	mov	sp,fp
    28ac:	dfc00117 	ldw	ra,4(sp)
    28b0:	df000017 	ldw	fp,0(sp)
    28b4:	dec00204 	addi	sp,sp,8
    28b8:	f800283a 	ret

000028bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    28bc:	defffd04 	addi	sp,sp,-12
    28c0:	dfc00215 	stw	ra,8(sp)
    28c4:	df000115 	stw	fp,4(sp)
    28c8:	df000104 	addi	fp,sp,4
    28cc:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    28d0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    28d4:	00000e06 	br	2910 <prvUnlockQueue+0x54>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    28d8:	e0bfff17 	ldw	r2,-4(fp)
    28dc:	10800917 	ldw	r2,36(r2)
    28e0:	10000f26 	beq	r2,zero,2920 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    28e4:	e0bfff17 	ldw	r2,-4(fp)
    28e8:	10800904 	addi	r2,r2,36
    28ec:	1009883a 	mov	r4,r2
    28f0:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    28f4:	10000126 	beq	r2,zero,28fc <prvUnlockQueue+0x40>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    28f8:	000386c0 	call	386c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    28fc:	e0bfff17 	ldw	r2,-4(fp)
    2900:	10801217 	ldw	r2,72(r2)
    2904:	10ffffc4 	addi	r3,r2,-1
    2908:	e0bfff17 	ldw	r2,-4(fp)
    290c:	10c01215 	stw	r3,72(r2)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2910:	e0bfff17 	ldw	r2,-4(fp)
    2914:	10801217 	ldw	r2,72(r2)
    2918:	00bfef16 	blt	zero,r2,28d8 <__alt_data_end+0xf00028d8>
    291c:	00000106 	br	2924 <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
    2920:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2924:	e0bfff17 	ldw	r2,-4(fp)
    2928:	00ffffc4 	movi	r3,-1
    292c:	10c01215 	stw	r3,72(r2)
	}
	taskEXIT_CRITICAL();
    2930:	00040fc0 	call	40fc <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2934:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2938:	00000e06 	br	2974 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    293c:	e0bfff17 	ldw	r2,-4(fp)
    2940:	10800417 	ldw	r2,16(r2)
    2944:	10000f26 	beq	r2,zero,2984 <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2948:	e0bfff17 	ldw	r2,-4(fp)
    294c:	10800404 	addi	r2,r2,16
    2950:	1009883a 	mov	r4,r2
    2954:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    2958:	10000126 	beq	r2,zero,2960 <prvUnlockQueue+0xa4>
				{
					vTaskMissedYield();
    295c:	000386c0 	call	386c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    2960:	e0bfff17 	ldw	r2,-4(fp)
    2964:	10801117 	ldw	r2,68(r2)
    2968:	10ffffc4 	addi	r3,r2,-1
    296c:	e0bfff17 	ldw	r2,-4(fp)
    2970:	10c01115 	stw	r3,68(r2)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2974:	e0bfff17 	ldw	r2,-4(fp)
    2978:	10801117 	ldw	r2,68(r2)
    297c:	00bfef16 	blt	zero,r2,293c <__alt_data_end+0xf000293c>
    2980:	00000106 	br	2988 <prvUnlockQueue+0xcc>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    2984:	0001883a 	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2988:	e0bfff17 	ldw	r2,-4(fp)
    298c:	00ffffc4 	movi	r3,-1
    2990:	10c01115 	stw	r3,68(r2)
	}
	taskEXIT_CRITICAL();
    2994:	00040fc0 	call	40fc <vTaskExitCritical>
}
    2998:	0001883a 	nop
    299c:	e037883a 	mov	sp,fp
    29a0:	dfc00117 	ldw	ra,4(sp)
    29a4:	df000017 	ldw	fp,0(sp)
    29a8:	dec00204 	addi	sp,sp,8
    29ac:	f800283a 	ret

000029b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    29b0:	defffc04 	addi	sp,sp,-16
    29b4:	dfc00315 	stw	ra,12(sp)
    29b8:	df000215 	stw	fp,8(sp)
    29bc:	df000204 	addi	fp,sp,8
    29c0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    29c4:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    29c8:	e0bfff17 	ldw	r2,-4(fp)
    29cc:	10800e17 	ldw	r2,56(r2)
    29d0:	1000031e 	bne	r2,zero,29e0 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
    29d4:	00800044 	movi	r2,1
    29d8:	e0bffe15 	stw	r2,-8(fp)
    29dc:	00000106 	br	29e4 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
    29e0:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    29e4:	00040fc0 	call	40fc <vTaskExitCritical>

	return xReturn;
    29e8:	e0bffe17 	ldw	r2,-8(fp)
}
    29ec:	e037883a 	mov	sp,fp
    29f0:	dfc00117 	ldw	ra,4(sp)
    29f4:	df000017 	ldw	fp,0(sp)
    29f8:	dec00204 	addi	sp,sp,8
    29fc:	f800283a 	ret

00002a00 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2a00:	defffd04 	addi	sp,sp,-12
    2a04:	df000215 	stw	fp,8(sp)
    2a08:	df000204 	addi	fp,sp,8
    2a0c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2a10:	e0bfff17 	ldw	r2,-4(fp)
    2a14:	10800e17 	ldw	r2,56(r2)
    2a18:	1000031e 	bne	r2,zero,2a28 <xQueueIsQueueEmptyFromISR+0x28>
	{
		xReturn = pdTRUE;
    2a1c:	00800044 	movi	r2,1
    2a20:	e0bffe15 	stw	r2,-8(fp)
    2a24:	00000106 	br	2a2c <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    2a28:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2a2c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2a30:	e037883a 	mov	sp,fp
    2a34:	df000017 	ldw	fp,0(sp)
    2a38:	dec00104 	addi	sp,sp,4
    2a3c:	f800283a 	ret

00002a40 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2a40:	defffc04 	addi	sp,sp,-16
    2a44:	dfc00315 	stw	ra,12(sp)
    2a48:	df000215 	stw	fp,8(sp)
    2a4c:	df000204 	addi	fp,sp,8
    2a50:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a54:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2a58:	e0bfff17 	ldw	r2,-4(fp)
    2a5c:	10c00e17 	ldw	r3,56(r2)
    2a60:	e0bfff17 	ldw	r2,-4(fp)
    2a64:	10800f17 	ldw	r2,60(r2)
    2a68:	1880031e 	bne	r3,r2,2a78 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
    2a6c:	00800044 	movi	r2,1
    2a70:	e0bffe15 	stw	r2,-8(fp)
    2a74:	00000106 	br	2a7c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
    2a78:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2a7c:	00040fc0 	call	40fc <vTaskExitCritical>

	return xReturn;
    2a80:	e0bffe17 	ldw	r2,-8(fp)
}
    2a84:	e037883a 	mov	sp,fp
    2a88:	dfc00117 	ldw	ra,4(sp)
    2a8c:	df000017 	ldw	fp,0(sp)
    2a90:	dec00204 	addi	sp,sp,8
    2a94:	f800283a 	ret

00002a98 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2a98:	defffd04 	addi	sp,sp,-12
    2a9c:	df000215 	stw	fp,8(sp)
    2aa0:	df000204 	addi	fp,sp,8
    2aa4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2aa8:	e0bfff17 	ldw	r2,-4(fp)
    2aac:	10c00e17 	ldw	r3,56(r2)
    2ab0:	e0bfff17 	ldw	r2,-4(fp)
    2ab4:	10800f17 	ldw	r2,60(r2)
    2ab8:	1880031e 	bne	r3,r2,2ac8 <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2abc:	00800044 	movi	r2,1
    2ac0:	e0bffe15 	stw	r2,-8(fp)
    2ac4:	00000106 	br	2acc <xQueueIsQueueFullFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
    2ac8:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2acc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2ad0:	e037883a 	mov	sp,fp
    2ad4:	df000017 	ldw	fp,0(sp)
    2ad8:	dec00104 	addi	sp,sp,4
    2adc:	f800283a 	ret

00002ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2ae0:	defffb04 	addi	sp,sp,-20
    2ae4:	dfc00415 	stw	ra,16(sp)
    2ae8:	df000315 	stw	fp,12(sp)
    2aec:	df000304 	addi	fp,sp,12
    2af0:	e13ffe15 	stw	r4,-8(fp)
    2af4:	e17fff15 	stw	r5,-4(fp)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2af8:	e0bffe17 	ldw	r2,-8(fp)
    2afc:	e0bffd15 	stw	r2,-12(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2b00:	00040a80 	call	40a8 <vTaskEnterCritical>
    2b04:	e0bffd17 	ldw	r2,-12(fp)
    2b08:	10801117 	ldw	r2,68(r2)
    2b0c:	10bfffd8 	cmpnei	r2,r2,-1
    2b10:	1000021e 	bne	r2,zero,2b1c <vQueueWaitForMessageRestricted+0x3c>
    2b14:	e0bffd17 	ldw	r2,-12(fp)
    2b18:	10001115 	stw	zero,68(r2)
    2b1c:	e0bffd17 	ldw	r2,-12(fp)
    2b20:	10801217 	ldw	r2,72(r2)
    2b24:	10bfffd8 	cmpnei	r2,r2,-1
    2b28:	1000021e 	bne	r2,zero,2b34 <vQueueWaitForMessageRestricted+0x54>
    2b2c:	e0bffd17 	ldw	r2,-12(fp)
    2b30:	10001215 	stw	zero,72(r2)
    2b34:	00040fc0 	call	40fc <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2b38:	e0bffd17 	ldw	r2,-12(fp)
    2b3c:	10800e17 	ldw	r2,56(r2)
    2b40:	1000051e 	bne	r2,zero,2b58 <vQueueWaitForMessageRestricted+0x78>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2b44:	e0bffd17 	ldw	r2,-12(fp)
    2b48:	10800904 	addi	r2,r2,36
    2b4c:	e17fff17 	ldw	r5,-4(fp)
    2b50:	1009883a 	mov	r4,r2
    2b54:	00035340 	call	3534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2b58:	e13ffd17 	ldw	r4,-12(fp)
    2b5c:	00028bc0 	call	28bc <prvUnlockQueue>
	}
    2b60:	0001883a 	nop
    2b64:	e037883a 	mov	sp,fp
    2b68:	dfc00117 	ldw	ra,4(sp)
    2b6c:	df000017 	ldw	fp,0(sp)
    2b70:	dec00204 	addi	sp,sp,8
    2b74:	f800283a 	ret

00002b78 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2b78:	defff604 	addi	sp,sp,-40
    2b7c:	dfc00915 	stw	ra,36(sp)
    2b80:	df000815 	stw	fp,32(sp)
    2b84:	df000804 	addi	fp,sp,32
    2b88:	e13ffc15 	stw	r4,-16(fp)
    2b8c:	e17ffd15 	stw	r5,-12(fp)
    2b90:	3005883a 	mov	r2,r6
    2b94:	e1ffff15 	stw	r7,-4(fp)
    2b98:	e0bffe0d 	sth	r2,-8(fp)
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2b9c:	e0bffe0b 	ldhu	r2,-8(fp)
    2ba0:	e1400417 	ldw	r5,16(fp)
    2ba4:	1009883a 	mov	r4,r2
    2ba8:	0003bdc0 	call	3bdc <prvAllocateTCBAndStack>
    2bac:	e0bffa15 	stw	r2,-24(fp)

	if( pxNewTCB != NULL )
    2bb0:	e0bffa17 	ldw	r2,-24(fp)
    2bb4:	10004f26 	beq	r2,zero,2cf4 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2bb8:	e0bffa17 	ldw	r2,-24(fp)
    2bbc:	10c00c17 	ldw	r3,48(r2)
    2bc0:	e13ffe0b 	ldhu	r4,-8(fp)
    2bc4:	00900034 	movhi	r2,16384
    2bc8:	10bfffc4 	addi	r2,r2,-1
    2bcc:	2085883a 	add	r2,r4,r2
    2bd0:	1085883a 	add	r2,r2,r2
    2bd4:	1085883a 	add	r2,r2,r2
    2bd8:	1885883a 	add	r2,r3,r2
    2bdc:	e0bffb15 	stw	r2,-20(fp)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2be0:	e0fffb17 	ldw	r3,-20(fp)
    2be4:	00bfff04 	movi	r2,-4
    2be8:	1884703a 	and	r2,r3,r2
    2bec:	e0bffb15 	stw	r2,-20(fp)
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2bf0:	e0bffe0b 	ldhu	r2,-8(fp)
    2bf4:	d8800015 	stw	r2,0(sp)
    2bf8:	e1c00517 	ldw	r7,20(fp)
    2bfc:	e1800217 	ldw	r6,8(fp)
    2c00:	e17ffd17 	ldw	r5,-12(fp)
    2c04:	e13ffa17 	ldw	r4,-24(fp)
    2c08:	00038b00 	call	38b0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2c0c:	e1bfff17 	ldw	r6,-4(fp)
    2c10:	e17ffc17 	ldw	r5,-16(fp)
    2c14:	e13ffb17 	ldw	r4,-20(fp)
    2c18:	00017000 	call	1700 <pxPortInitialiseStack>
    2c1c:	1007883a 	mov	r3,r2
    2c20:	e0bffa17 	ldw	r2,-24(fp)
    2c24:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2c28:	e0800317 	ldw	r2,12(fp)
    2c2c:	10000326 	beq	r2,zero,2c3c <xTaskGenericCreate+0xc4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2c30:	e0800317 	ldw	r2,12(fp)
    2c34:	e0fffa17 	ldw	r3,-24(fp)
    2c38:	10c00015 	stw	r3,0(r2)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2c3c:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    2c40:	d0a02697 	ldw	r2,-32614(gp)
    2c44:	10800044 	addi	r2,r2,1
    2c48:	d0a02695 	stw	r2,-32614(gp)
			if( pxCurrentTCB == NULL )
    2c4c:	d0a02297 	ldw	r2,-32630(gp)
    2c50:	1000071e 	bne	r2,zero,2c70 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2c54:	e0bffa17 	ldw	r2,-24(fp)
    2c58:	d0a02295 	stw	r2,-32630(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2c5c:	d0a02697 	ldw	r2,-32614(gp)
    2c60:	10800058 	cmpnei	r2,r2,1
    2c64:	10000a1e 	bne	r2,zero,2c90 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2c68:	00039fc0 	call	39fc <prvInitialiseTaskLists>
    2c6c:	00000806 	br	2c90 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2c70:	d0a02997 	ldw	r2,-32602(gp)
    2c74:	1000061e 	bne	r2,zero,2c90 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2c78:	d0a02297 	ldw	r2,-32630(gp)
    2c7c:	10800b17 	ldw	r2,44(r2)
    2c80:	e0c00217 	ldw	r3,8(fp)
    2c84:	18800236 	bltu	r3,r2,2c90 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    2c88:	e0bffa17 	ldw	r2,-24(fp)
    2c8c:	d0a02295 	stw	r2,-32630(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2c90:	d0a02d97 	ldw	r2,-32586(gp)
    2c94:	10800044 	addi	r2,r2,1
    2c98:	d0a02d95 	stw	r2,-32586(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2c9c:	e0bffa17 	ldw	r2,-24(fp)
    2ca0:	10800b17 	ldw	r2,44(r2)
    2ca4:	d0e02897 	ldw	r3,-32606(gp)
    2ca8:	1880032e 	bgeu	r3,r2,2cb8 <xTaskGenericCreate+0x140>
    2cac:	e0bffa17 	ldw	r2,-24(fp)
    2cb0:	10800b17 	ldw	r2,44(r2)
    2cb4:	d0a02895 	stw	r2,-32606(gp)
    2cb8:	e0bffa17 	ldw	r2,-24(fp)
    2cbc:	10800b17 	ldw	r2,44(r2)
    2cc0:	10c00524 	muli	r3,r2,20
    2cc4:	00820234 	movhi	r2,2056
    2cc8:	10bf7f04 	addi	r2,r2,-516
    2ccc:	1887883a 	add	r3,r3,r2
    2cd0:	e0bffa17 	ldw	r2,-24(fp)
    2cd4:	10800104 	addi	r2,r2,4
    2cd8:	100b883a 	mov	r5,r2
    2cdc:	1809883a 	mov	r4,r3
    2ce0:	00014980 	call	1498 <vListInsertEnd>

			xReturn = pdPASS;
    2ce4:	00800044 	movi	r2,1
    2ce8:	e0bff915 	stw	r2,-28(fp)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2cec:	00040fc0 	call	40fc <vTaskExitCritical>
    2cf0:	00000206 	br	2cfc <xTaskGenericCreate+0x184>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2cf4:	00bfffc4 	movi	r2,-1
    2cf8:	e0bff915 	stw	r2,-28(fp)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2cfc:	e0bff917 	ldw	r2,-28(fp)
    2d00:	10800058 	cmpnei	r2,r2,1
    2d04:	1000071e 	bne	r2,zero,2d24 <xTaskGenericCreate+0x1ac>
	{
		if( xSchedulerRunning != pdFALSE )
    2d08:	d0a02997 	ldw	r2,-32602(gp)
    2d0c:	10000526 	beq	r2,zero,2d24 <xTaskGenericCreate+0x1ac>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2d10:	d0a02297 	ldw	r2,-32630(gp)
    2d14:	10c00b17 	ldw	r3,44(r2)
    2d18:	e0800217 	ldw	r2,8(fp)
    2d1c:	1880012e 	bgeu	r3,r2,2d24 <xTaskGenericCreate+0x1ac>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2d20:	003b683a 	trap	0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2d24:	e0bff917 	ldw	r2,-28(fp)
}
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2d3c:	defffc04 	addi	sp,sp,-16
    2d40:	dfc00315 	stw	ra,12(sp)
    2d44:	df000215 	stw	fp,8(sp)
    2d48:	df000204 	addi	fp,sp,8
    2d4c:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2d50:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2d54:	e0bfff17 	ldw	r2,-4(fp)
    2d58:	1000021e 	bne	r2,zero,2d64 <vTaskDelete+0x28>
    2d5c:	d0a02297 	ldw	r2,-32630(gp)
    2d60:	00000106 	br	2d68 <vTaskDelete+0x2c>
    2d64:	e0bfff17 	ldw	r2,-4(fp)
    2d68:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2d6c:	e0bffe17 	ldw	r2,-8(fp)
    2d70:	10800104 	addi	r2,r2,4
    2d74:	1009883a 	mov	r4,r2
    2d78:	00015fc0 	call	15fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2d7c:	e0bffe17 	ldw	r2,-8(fp)
    2d80:	10800a17 	ldw	r2,40(r2)
    2d84:	10000426 	beq	r2,zero,2d98 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2d88:	e0bffe17 	ldw	r2,-8(fp)
    2d8c:	10800604 	addi	r2,r2,24
    2d90:	1009883a 	mov	r4,r2
    2d94:	00015fc0 	call	15fc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2d98:	e0bffe17 	ldw	r2,-8(fp)
    2d9c:	10800104 	addi	r2,r2,4
    2da0:	100b883a 	mov	r5,r2
    2da4:	01020234 	movhi	r4,2056
    2da8:	213fca04 	addi	r4,r4,-216
    2dac:	00014980 	call	1498 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2db0:	d0a02597 	ldw	r2,-32618(gp)
    2db4:	10800044 	addi	r2,r2,1
    2db8:	d0a02595 	stw	r2,-32618(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2dbc:	d0a02d97 	ldw	r2,-32586(gp)
    2dc0:	10800044 	addi	r2,r2,1
    2dc4:	d0a02d95 	stw	r2,-32586(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2dc8:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2dcc:	d0a02997 	ldw	r2,-32602(gp)
    2dd0:	10000826 	beq	r2,zero,2df4 <vTaskDelete+0xb8>
		{
			if( pxTCB == pxCurrentTCB )
    2dd4:	d0a02297 	ldw	r2,-32630(gp)
    2dd8:	e0fffe17 	ldw	r3,-8(fp)
    2ddc:	1880021e 	bne	r3,r2,2de8 <vTaskDelete+0xac>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    2de0:	003b683a 	trap	0
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
    2de4:	00000306 	br	2df4 <vTaskDelete+0xb8>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    2de8:	00040a80 	call	40a8 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2dec:	0003da80 	call	3da8 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
    2df0:	00040fc0 	call	40fc <vTaskExitCritical>
			}
		}
	}
    2df4:	0001883a 	nop
    2df8:	e037883a 	mov	sp,fp
    2dfc:	dfc00117 	ldw	ra,4(sp)
    2e00:	df000017 	ldw	fp,0(sp)
    2e04:	dec00204 	addi	sp,sp,8
    2e08:	f800283a 	ret

00002e0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2e0c:	defffb04 	addi	sp,sp,-20
    2e10:	dfc00415 	stw	ra,16(sp)
    2e14:	df000315 	stw	fp,12(sp)
    2e18:	df000304 	addi	fp,sp,12
    2e1c:	e13fff15 	stw	r4,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2e20:	e03ffd15 	stw	zero,-12(fp)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2e24:	e0bfff17 	ldw	r2,-4(fp)
    2e28:	10000d26 	beq	r2,zero,2e60 <vTaskDelay+0x54>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2e2c:	0002f6c0 	call	2f6c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2e30:	d0e02797 	ldw	r3,-32610(gp)
    2e34:	e0bfff17 	ldw	r2,-4(fp)
    2e38:	1885883a 	add	r2,r3,r2
    2e3c:	e0bffe15 	stw	r2,-8(fp)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e40:	d0a02297 	ldw	r2,-32630(gp)
    2e44:	10800104 	addi	r2,r2,4
    2e48:	1009883a 	mov	r4,r2
    2e4c:	00015fc0 	call	15fc <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2e50:	e13ffe17 	ldw	r4,-8(fp)
    2e54:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2e58:	0002f980 	call	2f98 <xTaskResumeAll>
    2e5c:	e0bffd15 	stw	r2,-12(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2e60:	e0bffd17 	ldw	r2,-12(fp)
    2e64:	1000011e 	bne	r2,zero,2e6c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
    2e68:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2e6c:	0001883a 	nop
    2e70:	e037883a 	mov	sp,fp
    2e74:	dfc00117 	ldw	ra,4(sp)
    2e78:	df000017 	ldw	fp,0(sp)
    2e7c:	dec00204 	addi	sp,sp,8
    2e80:	f800283a 	ret

00002e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2e84:	defff804 	addi	sp,sp,-32
    2e88:	dfc00715 	stw	ra,28(sp)
    2e8c:	df000615 	stw	fp,24(sp)
    2e90:	df000604 	addi	fp,sp,24
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2e94:	d8000315 	stw	zero,12(sp)
    2e98:	d8000215 	stw	zero,8(sp)
    2e9c:	d8000115 	stw	zero,4(sp)
    2ea0:	d8000015 	stw	zero,0(sp)
    2ea4:	000f883a 	mov	r7,zero
    2ea8:	01840004 	movi	r6,4096
    2eac:	01420034 	movhi	r5,2048
    2eb0:	29400d04 	addi	r5,r5,52
    2eb4:	01000034 	movhi	r4,0
    2eb8:	210e2504 	addi	r4,r4,14484
    2ebc:	0002b780 	call	2b78 <xTaskGenericCreate>
    2ec0:	e0bffe15 	stw	r2,-8(fp)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2ec4:	e0bffe17 	ldw	r2,-8(fp)
    2ec8:	10800058 	cmpnei	r2,r2,1
    2ecc:	1000021e 	bne	r2,zero,2ed8 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
    2ed0:	00048080 	call	4808 <xTimerCreateTimerTask>
    2ed4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2ed8:	e0bffe17 	ldw	r2,-8(fp)
    2edc:	10800058 	cmpnei	r2,r2,1
    2ee0:	10000a1e 	bne	r2,zero,2f0c <vTaskStartScheduler+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ee4:	0005303a 	rdctl	r2,status
    2ee8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2eec:	e0ffff17 	ldw	r3,-4(fp)
    2ef0:	00bfff84 	movi	r2,-2
    2ef4:	1884703a 	and	r2,r3,r2
    2ef8:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2efc:	00800044 	movi	r2,1
    2f00:	d0a02995 	stw	r2,-32602(gp)
		xTickCount = ( TickType_t ) 0U;
    2f04:	d0202795 	stw	zero,-32610(gp)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2f08:	00017e00 	call	17e0 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    2f0c:	0001883a 	nop
    2f10:	e037883a 	mov	sp,fp
    2f14:	dfc00117 	ldw	ra,4(sp)
    2f18:	df000017 	ldw	fp,0(sp)
    2f1c:	dec00204 	addi	sp,sp,8
    2f20:	f800283a 	ret

00002f24 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2f24:	defffd04 	addi	sp,sp,-12
    2f28:	dfc00215 	stw	ra,8(sp)
    2f2c:	df000115 	stw	fp,4(sp)
    2f30:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f34:	0005303a 	rdctl	r2,status
    2f38:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f3c:	e0ffff17 	ldw	r3,-4(fp)
    2f40:	00bfff84 	movi	r2,-2
    2f44:	1884703a 	and	r2,r3,r2
    2f48:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    2f4c:	d0202995 	stw	zero,-32602(gp)
	vPortEndScheduler();
    2f50:	00018180 	call	1818 <vPortEndScheduler>
}
    2f54:	0001883a 	nop
    2f58:	e037883a 	mov	sp,fp
    2f5c:	dfc00117 	ldw	ra,4(sp)
    2f60:	df000017 	ldw	fp,0(sp)
    2f64:	dec00204 	addi	sp,sp,8
    2f68:	f800283a 	ret

00002f6c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2f6c:	deffff04 	addi	sp,sp,-4
    2f70:	df000015 	stw	fp,0(sp)
    2f74:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2f78:	d0a02e97 	ldw	r2,-32582(gp)
    2f7c:	10800044 	addi	r2,r2,1
    2f80:	d0a02e95 	stw	r2,-32582(gp)
}
    2f84:	0001883a 	nop
    2f88:	e037883a 	mov	sp,fp
    2f8c:	df000017 	ldw	fp,0(sp)
    2f90:	dec00104 	addi	sp,sp,4
    2f94:	f800283a 	ret

00002f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2f98:	defffc04 	addi	sp,sp,-16
    2f9c:	dfc00315 	stw	ra,12(sp)
    2fa0:	df000215 	stw	fp,8(sp)
    2fa4:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2fa8:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2fac:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    2fb0:	d0a02e97 	ldw	r2,-32582(gp)
    2fb4:	10bfffc4 	addi	r2,r2,-1
    2fb8:	d0a02e95 	stw	r2,-32582(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2fbc:	d0a02e97 	ldw	r2,-32582(gp)
    2fc0:	10003f1e 	bne	r2,zero,30c0 <xTaskResumeAll+0x128>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2fc4:	d0a02697 	ldw	r2,-32614(gp)
    2fc8:	10003d26 	beq	r2,zero,30c0 <xTaskResumeAll+0x128>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2fcc:	00002606 	br	3068 <xTaskResumeAll+0xd0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2fd0:	00820234 	movhi	r2,2056
    2fd4:	10bfc504 	addi	r2,r2,-236
    2fd8:	10800317 	ldw	r2,12(r2)
    2fdc:	10800317 	ldw	r2,12(r2)
    2fe0:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2fe4:	e0bfff17 	ldw	r2,-4(fp)
    2fe8:	10800604 	addi	r2,r2,24
    2fec:	1009883a 	mov	r4,r2
    2ff0:	00015fc0 	call	15fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2ff4:	e0bfff17 	ldw	r2,-4(fp)
    2ff8:	10800104 	addi	r2,r2,4
    2ffc:	1009883a 	mov	r4,r2
    3000:	00015fc0 	call	15fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3004:	e0bfff17 	ldw	r2,-4(fp)
    3008:	10800b17 	ldw	r2,44(r2)
    300c:	d0e02897 	ldw	r3,-32606(gp)
    3010:	1880032e 	bgeu	r3,r2,3020 <xTaskResumeAll+0x88>
    3014:	e0bfff17 	ldw	r2,-4(fp)
    3018:	10800b17 	ldw	r2,44(r2)
    301c:	d0a02895 	stw	r2,-32606(gp)
    3020:	e0bfff17 	ldw	r2,-4(fp)
    3024:	10800b17 	ldw	r2,44(r2)
    3028:	10c00524 	muli	r3,r2,20
    302c:	00820234 	movhi	r2,2056
    3030:	10bf7f04 	addi	r2,r2,-516
    3034:	1887883a 	add	r3,r3,r2
    3038:	e0bfff17 	ldw	r2,-4(fp)
    303c:	10800104 	addi	r2,r2,4
    3040:	100b883a 	mov	r5,r2
    3044:	1809883a 	mov	r4,r3
    3048:	00014980 	call	1498 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    304c:	e0bfff17 	ldw	r2,-4(fp)
    3050:	10c00b17 	ldw	r3,44(r2)
    3054:	d0a02297 	ldw	r2,-32630(gp)
    3058:	10800b17 	ldw	r2,44(r2)
    305c:	18800236 	bltu	r3,r2,3068 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
    3060:	00800044 	movi	r2,1
    3064:	d0a02b95 	stw	r2,-32594(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3068:	00820234 	movhi	r2,2056
    306c:	10bfc504 	addi	r2,r2,-236
    3070:	10800017 	ldw	r2,0(r2)
    3074:	103fd61e 	bne	r2,zero,2fd0 <__alt_data_end+0xf0002fd0>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    3078:	d0a02a97 	ldw	r2,-32598(gp)
    307c:	10000a26 	beq	r2,zero,30a8 <xTaskResumeAll+0x110>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3080:	00000706 	br	30a0 <xTaskResumeAll+0x108>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3084:	00031500 	call	3150 <xTaskIncrementTick>
    3088:	10000226 	beq	r2,zero,3094 <xTaskResumeAll+0xfc>
						{
							xYieldPending = pdTRUE;
    308c:	00800044 	movi	r2,1
    3090:	d0a02b95 	stw	r2,-32594(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    3094:	d0a02a97 	ldw	r2,-32598(gp)
    3098:	10bfffc4 	addi	r2,r2,-1
    309c:	d0a02a95 	stw	r2,-32598(gp)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    30a0:	d0a02a97 	ldw	r2,-32598(gp)
    30a4:	103ff71e 	bne	r2,zero,3084 <__alt_data_end+0xf0003084>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    30a8:	d0a02b97 	ldw	r2,-32594(gp)
    30ac:	10800058 	cmpnei	r2,r2,1
    30b0:	1000031e 	bne	r2,zero,30c0 <xTaskResumeAll+0x128>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    30b4:	00800044 	movi	r2,1
    30b8:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    30bc:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    30c0:	00040fc0 	call	40fc <vTaskExitCritical>

	return xAlreadyYielded;
    30c4:	e0bffe17 	ldw	r2,-8(fp)
}
    30c8:	e037883a 	mov	sp,fp
    30cc:	dfc00117 	ldw	ra,4(sp)
    30d0:	df000017 	ldw	fp,0(sp)
    30d4:	dec00204 	addi	sp,sp,8
    30d8:	f800283a 	ret

000030dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    30dc:	defffe04 	addi	sp,sp,-8
    30e0:	df000115 	stw	fp,4(sp)
    30e4:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    30e8:	d0a02797 	ldw	r2,-32610(gp)
    30ec:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    30f0:	e0bfff17 	ldw	r2,-4(fp)
}
    30f4:	e037883a 	mov	sp,fp
    30f8:	df000017 	ldw	fp,0(sp)
    30fc:	dec00104 	addi	sp,sp,4
    3100:	f800283a 	ret

00003104 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3104:	defffd04 	addi	sp,sp,-12
    3108:	df000215 	stw	fp,8(sp)
    310c:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    3110:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
    3114:	d0a02797 	ldw	r2,-32610(gp)
    3118:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    311c:	e0bfff17 	ldw	r2,-4(fp)
}
    3120:	e037883a 	mov	sp,fp
    3124:	df000017 	ldw	fp,0(sp)
    3128:	dec00104 	addi	sp,sp,4
    312c:	f800283a 	ret

00003130 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    3130:	deffff04 	addi	sp,sp,-4
    3134:	df000015 	stw	fp,0(sp)
    3138:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    313c:	d0a02697 	ldw	r2,-32614(gp)
}
    3140:	e037883a 	mov	sp,fp
    3144:	df000017 	ldw	fp,0(sp)
    3148:	dec00104 	addi	sp,sp,4
    314c:	f800283a 	ret

00003150 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3150:	defff904 	addi	sp,sp,-28
    3154:	dfc00615 	stw	ra,24(sp)
    3158:	df000515 	stw	fp,20(sp)
    315c:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3160:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3164:	d0a02e97 	ldw	r2,-32582(gp)
    3168:	10005d1e 	bne	r2,zero,32e0 <xTaskIncrementTick+0x190>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    316c:	d0a02797 	ldw	r2,-32610(gp)
    3170:	10800044 	addi	r2,r2,1
    3174:	d0a02795 	stw	r2,-32610(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3178:	d0a02797 	ldw	r2,-32610(gp)
    317c:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount == ( TickType_t ) 0U )
    3180:	e0bffc17 	ldw	r2,-16(fp)
    3184:	10000a1e 	bne	r2,zero,31b0 <xTaskIncrementTick+0x60>
			{
				taskSWITCH_DELAYED_LISTS();
    3188:	d0a02397 	ldw	r2,-32626(gp)
    318c:	e0bffd15 	stw	r2,-12(fp)
    3190:	d0a02497 	ldw	r2,-32622(gp)
    3194:	d0a02395 	stw	r2,-32626(gp)
    3198:	e0bffd17 	ldw	r2,-12(fp)
    319c:	d0a02495 	stw	r2,-32622(gp)
    31a0:	d0a02c97 	ldw	r2,-32590(gp)
    31a4:	10800044 	addi	r2,r2,1
    31a8:	d0a02c95 	stw	r2,-32590(gp)
    31ac:	0003da80 	call	3da8 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    31b0:	d0a00397 	ldw	r2,-32754(gp)
    31b4:	e0fffc17 	ldw	r3,-16(fp)
    31b8:	18803d36 	bltu	r3,r2,32b0 <xTaskIncrementTick+0x160>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    31bc:	d0a02397 	ldw	r2,-32626(gp)
    31c0:	10800017 	ldw	r2,0(r2)
    31c4:	1000021e 	bne	r2,zero,31d0 <xTaskIncrementTick+0x80>
    31c8:	00800044 	movi	r2,1
    31cc:	00000106 	br	31d4 <xTaskIncrementTick+0x84>
    31d0:	0005883a 	mov	r2,zero
    31d4:	10803fcc 	andi	r2,r2,255
    31d8:	10000326 	beq	r2,zero,31e8 <xTaskIncrementTick+0x98>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    31dc:	00bfffc4 	movi	r2,-1
    31e0:	d0a00395 	stw	r2,-32754(gp)
						break;
    31e4:	00003206 	br	32b0 <xTaskIncrementTick+0x160>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    31e8:	d0a02397 	ldw	r2,-32626(gp)
    31ec:	10800317 	ldw	r2,12(r2)
    31f0:	10800317 	ldw	r2,12(r2)
    31f4:	e0bffe15 	stw	r2,-8(fp)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    31f8:	e0bffe17 	ldw	r2,-8(fp)
    31fc:	10800117 	ldw	r2,4(r2)
    3200:	e0bfff15 	stw	r2,-4(fp)

						if( xConstTickCount < xItemValue )
    3204:	e0fffc17 	ldw	r3,-16(fp)
    3208:	e0bfff17 	ldw	r2,-4(fp)
    320c:	1880032e 	bgeu	r3,r2,321c <xTaskIncrementTick+0xcc>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    3210:	e0bfff17 	ldw	r2,-4(fp)
    3214:	d0a00395 	stw	r2,-32754(gp)
							break;
    3218:	00002506 	br	32b0 <xTaskIncrementTick+0x160>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    321c:	e0bffe17 	ldw	r2,-8(fp)
    3220:	10800104 	addi	r2,r2,4
    3224:	1009883a 	mov	r4,r2
    3228:	00015fc0 	call	15fc <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    322c:	e0bffe17 	ldw	r2,-8(fp)
    3230:	10800a17 	ldw	r2,40(r2)
    3234:	10000426 	beq	r2,zero,3248 <xTaskIncrementTick+0xf8>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3238:	e0bffe17 	ldw	r2,-8(fp)
    323c:	10800604 	addi	r2,r2,24
    3240:	1009883a 	mov	r4,r2
    3244:	00015fc0 	call	15fc <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3248:	e0bffe17 	ldw	r2,-8(fp)
    324c:	10800b17 	ldw	r2,44(r2)
    3250:	d0e02897 	ldw	r3,-32606(gp)
    3254:	1880032e 	bgeu	r3,r2,3264 <xTaskIncrementTick+0x114>
    3258:	e0bffe17 	ldw	r2,-8(fp)
    325c:	10800b17 	ldw	r2,44(r2)
    3260:	d0a02895 	stw	r2,-32606(gp)
    3264:	e0bffe17 	ldw	r2,-8(fp)
    3268:	10800b17 	ldw	r2,44(r2)
    326c:	10c00524 	muli	r3,r2,20
    3270:	00820234 	movhi	r2,2056
    3274:	10bf7f04 	addi	r2,r2,-516
    3278:	1887883a 	add	r3,r3,r2
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800104 	addi	r2,r2,4
    3284:	100b883a 	mov	r5,r2
    3288:	1809883a 	mov	r4,r3
    328c:	00014980 	call	1498 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3290:	e0bffe17 	ldw	r2,-8(fp)
    3294:	10c00b17 	ldw	r3,44(r2)
    3298:	d0a02297 	ldw	r2,-32630(gp)
    329c:	10800b17 	ldw	r2,44(r2)
    32a0:	18bfc636 	bltu	r3,r2,31bc <__alt_data_end+0xf00031bc>
							{
								xSwitchRequired = pdTRUE;
    32a4:	00800044 	movi	r2,1
    32a8:	e0bffb15 	stw	r2,-20(fp)
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    32ac:	003fc306 	br	31bc <__alt_data_end+0xf00031bc>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    32b0:	d0a02297 	ldw	r2,-32630(gp)
    32b4:	10c00b17 	ldw	r3,44(r2)
    32b8:	00820234 	movhi	r2,2056
    32bc:	10bf7f04 	addi	r2,r2,-516
    32c0:	18c00524 	muli	r3,r3,20
    32c4:	10c5883a 	add	r2,r2,r3
    32c8:	10800017 	ldw	r2,0(r2)
    32cc:	108000b0 	cmpltui	r2,r2,2
    32d0:	1000061e 	bne	r2,zero,32ec <xTaskIncrementTick+0x19c>
			{
				xSwitchRequired = pdTRUE;
    32d4:	00800044 	movi	r2,1
    32d8:	e0bffb15 	stw	r2,-20(fp)
    32dc:	00000306 	br	32ec <xTaskIncrementTick+0x19c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    32e0:	d0a02a97 	ldw	r2,-32598(gp)
    32e4:	10800044 	addi	r2,r2,1
    32e8:	d0a02a95 	stw	r2,-32598(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    32ec:	d0a02b97 	ldw	r2,-32594(gp)
    32f0:	10000226 	beq	r2,zero,32fc <xTaskIncrementTick+0x1ac>
		{
			xSwitchRequired = pdTRUE;
    32f4:	00800044 	movi	r2,1
    32f8:	e0bffb15 	stw	r2,-20(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    32fc:	e0bffb17 	ldw	r2,-20(fp)
}
    3300:	e037883a 	mov	sp,fp
    3304:	dfc00117 	ldw	ra,4(sp)
    3308:	df000017 	ldw	fp,0(sp)
    330c:	dec00204 	addi	sp,sp,8
    3310:	f800283a 	ret

00003314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3314:	defffd04 	addi	sp,sp,-12
    3318:	dfc00215 	stw	ra,8(sp)
    331c:	df000115 	stw	fp,4(sp)
    3320:	df000104 	addi	fp,sp,4
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3324:	d0a02e97 	ldw	r2,-32582(gp)
    3328:	10000326 	beq	r2,zero,3338 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    332c:	00800044 	movi	r2,1
    3330:	d0a02b95 	stw	r2,-32594(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3334:	00003e06 	br	3430 <vTaskSwitchContext+0x11c>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    3338:	d0202b95 	stw	zero,-32594(gp)
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    333c:	d0a02297 	ldw	r2,-32630(gp)
    3340:	10800017 	ldw	r2,0(r2)
    3344:	d0e02297 	ldw	r3,-32630(gp)
    3348:	18c00c17 	ldw	r3,48(r3)
    334c:	18800636 	bltu	r3,r2,3368 <vTaskSwitchContext+0x54>
    3350:	d0e02297 	ldw	r3,-32630(gp)
    3354:	d0a02297 	ldw	r2,-32630(gp)
    3358:	10800d04 	addi	r2,r2,52
    335c:	100b883a 	mov	r5,r2
    3360:	1809883a 	mov	r4,r3
    3364:	00016940 	call	1694 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    3368:	d0a02297 	ldw	r2,-32630(gp)
    336c:	10800c17 	ldw	r2,48(r2)
    3370:	01800504 	movi	r6,20
    3374:	01420034 	movhi	r5,2048
    3378:	29400e44 	addi	r5,r5,57
    337c:	1009883a 	mov	r4,r2
    3380:	00095000 	call	9500 <memcmp>
    3384:	10000a26 	beq	r2,zero,33b0 <vTaskSwitchContext+0x9c>
    3388:	d0e02297 	ldw	r3,-32630(gp)
    338c:	d0a02297 	ldw	r2,-32630(gp)
    3390:	10800d04 	addi	r2,r2,52
    3394:	100b883a 	mov	r5,r2
    3398:	1809883a 	mov	r4,r3
    339c:	00016940 	call	1694 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    33a0:	00000306 	br	33b0 <vTaskSwitchContext+0x9c>
    33a4:	d0a02897 	ldw	r2,-32606(gp)
    33a8:	10bfffc4 	addi	r2,r2,-1
    33ac:	d0a02895 	stw	r2,-32606(gp)
    33b0:	d0e02897 	ldw	r3,-32606(gp)
    33b4:	00820234 	movhi	r2,2056
    33b8:	10bf7f04 	addi	r2,r2,-516
    33bc:	18c00524 	muli	r3,r3,20
    33c0:	10c5883a 	add	r2,r2,r3
    33c4:	10800017 	ldw	r2,0(r2)
    33c8:	103ff626 	beq	r2,zero,33a4 <__alt_data_end+0xf00033a4>
    33cc:	d0a02897 	ldw	r2,-32606(gp)
    33d0:	10c00524 	muli	r3,r2,20
    33d4:	00820234 	movhi	r2,2056
    33d8:	10bf7f04 	addi	r2,r2,-516
    33dc:	1885883a 	add	r2,r3,r2
    33e0:	e0bfff15 	stw	r2,-4(fp)
    33e4:	e0bfff17 	ldw	r2,-4(fp)
    33e8:	10800117 	ldw	r2,4(r2)
    33ec:	10c00117 	ldw	r3,4(r2)
    33f0:	e0bfff17 	ldw	r2,-4(fp)
    33f4:	10c00115 	stw	r3,4(r2)
    33f8:	e0bfff17 	ldw	r2,-4(fp)
    33fc:	10c00117 	ldw	r3,4(r2)
    3400:	e0bfff17 	ldw	r2,-4(fp)
    3404:	10800204 	addi	r2,r2,8
    3408:	1880051e 	bne	r3,r2,3420 <vTaskSwitchContext+0x10c>
    340c:	e0bfff17 	ldw	r2,-4(fp)
    3410:	10800117 	ldw	r2,4(r2)
    3414:	10c00117 	ldw	r3,4(r2)
    3418:	e0bfff17 	ldw	r2,-4(fp)
    341c:	10c00115 	stw	r3,4(r2)
    3420:	e0bfff17 	ldw	r2,-4(fp)
    3424:	10800117 	ldw	r2,4(r2)
    3428:	10800317 	ldw	r2,12(r2)
    342c:	d0a02295 	stw	r2,-32630(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3430:	0001883a 	nop
    3434:	e037883a 	mov	sp,fp
    3438:	dfc00117 	ldw	ra,4(sp)
    343c:	df000017 	ldw	fp,0(sp)
    3440:	dec00204 	addi	sp,sp,8
    3444:	f800283a 	ret

00003448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3448:	defffb04 	addi	sp,sp,-20
    344c:	dfc00415 	stw	ra,16(sp)
    3450:	df000315 	stw	fp,12(sp)
    3454:	df000304 	addi	fp,sp,12
    3458:	e13ffe15 	stw	r4,-8(fp)
    345c:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3460:	d0a02297 	ldw	r2,-32630(gp)
    3464:	10800604 	addi	r2,r2,24
    3468:	100b883a 	mov	r5,r2
    346c:	e13ffe17 	ldw	r4,-8(fp)
    3470:	00015240 	call	1524 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3474:	d0a02297 	ldw	r2,-32630(gp)
    3478:	10800104 	addi	r2,r2,4
    347c:	1009883a 	mov	r4,r2
    3480:	00015fc0 	call	15fc <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    3484:	d0e02797 	ldw	r3,-32610(gp)
    3488:	e0bfff17 	ldw	r2,-4(fp)
    348c:	1885883a 	add	r2,r3,r2
    3490:	e0bffd15 	stw	r2,-12(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3494:	e13ffd17 	ldw	r4,-12(fp)
    3498:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    349c:	0001883a 	nop
    34a0:	e037883a 	mov	sp,fp
    34a4:	dfc00117 	ldw	ra,4(sp)
    34a8:	df000017 	ldw	fp,0(sp)
    34ac:	dec00204 	addi	sp,sp,8
    34b0:	f800283a 	ret

000034b4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    34b4:	defffa04 	addi	sp,sp,-24
    34b8:	dfc00515 	stw	ra,20(sp)
    34bc:	df000415 	stw	fp,16(sp)
    34c0:	df000404 	addi	fp,sp,16
    34c4:	e13ffd15 	stw	r4,-12(fp)
    34c8:	e17ffe15 	stw	r5,-8(fp)
    34cc:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    34d0:	d0a02297 	ldw	r2,-32630(gp)
    34d4:	e0fffe17 	ldw	r3,-8(fp)
    34d8:	18e00034 	orhi	r3,r3,32768
    34dc:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    34e0:	d0a02297 	ldw	r2,-32630(gp)
    34e4:	10800604 	addi	r2,r2,24
    34e8:	100b883a 	mov	r5,r2
    34ec:	e13ffd17 	ldw	r4,-12(fp)
    34f0:	00014980 	call	1498 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    34f4:	d0a02297 	ldw	r2,-32630(gp)
    34f8:	10800104 	addi	r2,r2,4
    34fc:	1009883a 	mov	r4,r2
    3500:	00015fc0 	call	15fc <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    3504:	d0e02797 	ldw	r3,-32610(gp)
    3508:	e0bfff17 	ldw	r2,-4(fp)
    350c:	1885883a 	add	r2,r3,r2
    3510:	e0bffc15 	stw	r2,-16(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3514:	e13ffc17 	ldw	r4,-16(fp)
    3518:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    351c:	0001883a 	nop
    3520:	e037883a 	mov	sp,fp
    3524:	dfc00117 	ldw	ra,4(sp)
    3528:	df000017 	ldw	fp,0(sp)
    352c:	dec00204 	addi	sp,sp,8
    3530:	f800283a 	ret

00003534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    3534:	defffb04 	addi	sp,sp,-20
    3538:	dfc00415 	stw	ra,16(sp)
    353c:	df000315 	stw	fp,12(sp)
    3540:	df000304 	addi	fp,sp,12
    3544:	e13ffe15 	stw	r4,-8(fp)
    3548:	e17fff15 	stw	r5,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    354c:	d0a02297 	ldw	r2,-32630(gp)
    3550:	10800604 	addi	r2,r2,24
    3554:	100b883a 	mov	r5,r2
    3558:	e13ffe17 	ldw	r4,-8(fp)
    355c:	00014980 	call	1498 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3560:	d0a02297 	ldw	r2,-32630(gp)
    3564:	10800104 	addi	r2,r2,4
    3568:	1009883a 	mov	r4,r2
    356c:	00015fc0 	call	15fc <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    3570:	d0e02797 	ldw	r3,-32610(gp)
    3574:	e0bfff17 	ldw	r2,-4(fp)
    3578:	1885883a 	add	r2,r3,r2
    357c:	e0bffd15 	stw	r2,-12(fp)

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    3580:	e13ffd17 	ldw	r4,-12(fp)
    3584:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
	}
    3588:	0001883a 	nop
    358c:	e037883a 	mov	sp,fp
    3590:	dfc00117 	ldw	ra,4(sp)
    3594:	df000017 	ldw	fp,0(sp)
    3598:	dec00204 	addi	sp,sp,8
    359c:	f800283a 	ret

000035a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    35a0:	defffb04 	addi	sp,sp,-20
    35a4:	dfc00415 	stw	ra,16(sp)
    35a8:	df000315 	stw	fp,12(sp)
    35ac:	df000304 	addi	fp,sp,12
    35b0:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    35b4:	e0bfff17 	ldw	r2,-4(fp)
    35b8:	10800317 	ldw	r2,12(r2)
    35bc:	10800317 	ldw	r2,12(r2)
    35c0:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    35c4:	e0bffe17 	ldw	r2,-8(fp)
    35c8:	10800604 	addi	r2,r2,24
    35cc:	1009883a 	mov	r4,r2
    35d0:	00015fc0 	call	15fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    35d4:	d0a02e97 	ldw	r2,-32582(gp)
    35d8:	1000171e 	bne	r2,zero,3638 <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    35dc:	e0bffe17 	ldw	r2,-8(fp)
    35e0:	10800104 	addi	r2,r2,4
    35e4:	1009883a 	mov	r4,r2
    35e8:	00015fc0 	call	15fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    35ec:	e0bffe17 	ldw	r2,-8(fp)
    35f0:	10800b17 	ldw	r2,44(r2)
    35f4:	d0e02897 	ldw	r3,-32606(gp)
    35f8:	1880032e 	bgeu	r3,r2,3608 <xTaskRemoveFromEventList+0x68>
    35fc:	e0bffe17 	ldw	r2,-8(fp)
    3600:	10800b17 	ldw	r2,44(r2)
    3604:	d0a02895 	stw	r2,-32606(gp)
    3608:	e0bffe17 	ldw	r2,-8(fp)
    360c:	10800b17 	ldw	r2,44(r2)
    3610:	10c00524 	muli	r3,r2,20
    3614:	00820234 	movhi	r2,2056
    3618:	10bf7f04 	addi	r2,r2,-516
    361c:	1887883a 	add	r3,r3,r2
    3620:	e0bffe17 	ldw	r2,-8(fp)
    3624:	10800104 	addi	r2,r2,4
    3628:	100b883a 	mov	r5,r2
    362c:	1809883a 	mov	r4,r3
    3630:	00014980 	call	1498 <vListInsertEnd>
    3634:	00000606 	br	3650 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3638:	e0bffe17 	ldw	r2,-8(fp)
    363c:	10800604 	addi	r2,r2,24
    3640:	100b883a 	mov	r5,r2
    3644:	01020234 	movhi	r4,2056
    3648:	213fc504 	addi	r4,r4,-236
    364c:	00014980 	call	1498 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3650:	e0bffe17 	ldw	r2,-8(fp)
    3654:	10800b17 	ldw	r2,44(r2)
    3658:	d0e02297 	ldw	r3,-32630(gp)
    365c:	18c00b17 	ldw	r3,44(r3)
    3660:	1880052e 	bgeu	r3,r2,3678 <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3664:	00800044 	movi	r2,1
    3668:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    366c:	00800044 	movi	r2,1
    3670:	d0a02b95 	stw	r2,-32594(gp)
    3674:	00000106 	br	367c <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
    3678:	e03ffd15 	stw	zero,-12(fp)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    367c:	e0bffd17 	ldw	r2,-12(fp)
}
    3680:	e037883a 	mov	sp,fp
    3684:	dfc00117 	ldw	ra,4(sp)
    3688:	df000017 	ldw	fp,0(sp)
    368c:	dec00204 	addi	sp,sp,8
    3690:	f800283a 	ret

00003694 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3694:	defffa04 	addi	sp,sp,-24
    3698:	dfc00515 	stw	ra,20(sp)
    369c:	df000415 	stw	fp,16(sp)
    36a0:	df000404 	addi	fp,sp,16
    36a4:	e13ffe15 	stw	r4,-8(fp)
    36a8:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    36ac:	e0bfff17 	ldw	r2,-4(fp)
    36b0:	10e00034 	orhi	r3,r2,32768
    36b4:	e0bffe17 	ldw	r2,-8(fp)
    36b8:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    36bc:	e0bffe17 	ldw	r2,-8(fp)
    36c0:	10800317 	ldw	r2,12(r2)
    36c4:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    36c8:	e13ffe17 	ldw	r4,-8(fp)
    36cc:	00015fc0 	call	15fc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    36d0:	e0bffd17 	ldw	r2,-12(fp)
    36d4:	10800104 	addi	r2,r2,4
    36d8:	1009883a 	mov	r4,r2
    36dc:	00015fc0 	call	15fc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    36e0:	e0bffd17 	ldw	r2,-12(fp)
    36e4:	10800b17 	ldw	r2,44(r2)
    36e8:	d0e02897 	ldw	r3,-32606(gp)
    36ec:	1880032e 	bgeu	r3,r2,36fc <xTaskRemoveFromUnorderedEventList+0x68>
    36f0:	e0bffd17 	ldw	r2,-12(fp)
    36f4:	10800b17 	ldw	r2,44(r2)
    36f8:	d0a02895 	stw	r2,-32606(gp)
    36fc:	e0bffd17 	ldw	r2,-12(fp)
    3700:	10800b17 	ldw	r2,44(r2)
    3704:	10c00524 	muli	r3,r2,20
    3708:	00820234 	movhi	r2,2056
    370c:	10bf7f04 	addi	r2,r2,-516
    3710:	1887883a 	add	r3,r3,r2
    3714:	e0bffd17 	ldw	r2,-12(fp)
    3718:	10800104 	addi	r2,r2,4
    371c:	100b883a 	mov	r5,r2
    3720:	1809883a 	mov	r4,r3
    3724:	00014980 	call	1498 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3728:	e0bffd17 	ldw	r2,-12(fp)
    372c:	10800b17 	ldw	r2,44(r2)
    3730:	d0e02297 	ldw	r3,-32630(gp)
    3734:	18c00b17 	ldw	r3,44(r3)
    3738:	1880052e 	bgeu	r3,r2,3750 <xTaskRemoveFromUnorderedEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    373c:	00800044 	movi	r2,1
    3740:	e0bffc15 	stw	r2,-16(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3744:	00800044 	movi	r2,1
    3748:	d0a02b95 	stw	r2,-32594(gp)
    374c:	00000106 	br	3754 <xTaskRemoveFromUnorderedEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    3750:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
    3754:	e0bffc17 	ldw	r2,-16(fp)
}
    3758:	e037883a 	mov	sp,fp
    375c:	dfc00117 	ldw	ra,4(sp)
    3760:	df000017 	ldw	fp,0(sp)
    3764:	dec00204 	addi	sp,sp,8
    3768:	f800283a 	ret

0000376c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    376c:	defffe04 	addi	sp,sp,-8
    3770:	df000115 	stw	fp,4(sp)
    3774:	df000104 	addi	fp,sp,4
    3778:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    377c:	d0e02c97 	ldw	r3,-32590(gp)
    3780:	e0bfff17 	ldw	r2,-4(fp)
    3784:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
    3788:	d0e02797 	ldw	r3,-32610(gp)
    378c:	e0bfff17 	ldw	r2,-4(fp)
    3790:	10c00115 	stw	r3,4(r2)
}
    3794:	0001883a 	nop
    3798:	e037883a 	mov	sp,fp
    379c:	df000017 	ldw	fp,0(sp)
    37a0:	dec00104 	addi	sp,sp,4
    37a4:	f800283a 	ret

000037a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    37a8:	defffa04 	addi	sp,sp,-24
    37ac:	dfc00515 	stw	ra,20(sp)
    37b0:	df000415 	stw	fp,16(sp)
    37b4:	df000404 	addi	fp,sp,16
    37b8:	e13ffe15 	stw	r4,-8(fp)
    37bc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    37c0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    37c4:	d0a02797 	ldw	r2,-32610(gp)
    37c8:	e0bffd15 	stw	r2,-12(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    37cc:	e0bffe17 	ldw	r2,-8(fp)
    37d0:	10c00017 	ldw	r3,0(r2)
    37d4:	d0a02c97 	ldw	r2,-32590(gp)
    37d8:	18800726 	beq	r3,r2,37f8 <xTaskCheckForTimeOut+0x50>
    37dc:	e0bffe17 	ldw	r2,-8(fp)
    37e0:	10800117 	ldw	r2,4(r2)
    37e4:	e0fffd17 	ldw	r3,-12(fp)
    37e8:	18800336 	bltu	r3,r2,37f8 <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    37ec:	00800044 	movi	r2,1
    37f0:	e0bffc15 	stw	r2,-16(fp)
    37f4:	00001606 	br	3850 <xTaskCheckForTimeOut+0xa8>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    37f8:	e0bffe17 	ldw	r2,-8(fp)
    37fc:	10800117 	ldw	r2,4(r2)
    3800:	e0fffd17 	ldw	r3,-12(fp)
    3804:	1887c83a 	sub	r3,r3,r2
    3808:	e0bfff17 	ldw	r2,-4(fp)
    380c:	10800017 	ldw	r2,0(r2)
    3810:	18800d2e 	bgeu	r3,r2,3848 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3814:	e0bfff17 	ldw	r2,-4(fp)
    3818:	10c00017 	ldw	r3,0(r2)
    381c:	e0bffe17 	ldw	r2,-8(fp)
    3820:	11000117 	ldw	r4,4(r2)
    3824:	e0bffd17 	ldw	r2,-12(fp)
    3828:	2085c83a 	sub	r2,r4,r2
    382c:	1887883a 	add	r3,r3,r2
    3830:	e0bfff17 	ldw	r2,-4(fp)
    3834:	10c00015 	stw	r3,0(r2)
			vTaskSetTimeOutState( pxTimeOut );
    3838:	e13ffe17 	ldw	r4,-8(fp)
    383c:	000376c0 	call	376c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3840:	e03ffc15 	stw	zero,-16(fp)
    3844:	00000206 	br	3850 <xTaskCheckForTimeOut+0xa8>
		}
		else
		{
			xReturn = pdTRUE;
    3848:	00800044 	movi	r2,1
    384c:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	taskEXIT_CRITICAL();
    3850:	00040fc0 	call	40fc <vTaskExitCritical>

	return xReturn;
    3854:	e0bffc17 	ldw	r2,-16(fp)
}
    3858:	e037883a 	mov	sp,fp
    385c:	dfc00117 	ldw	ra,4(sp)
    3860:	df000017 	ldw	fp,0(sp)
    3864:	dec00204 	addi	sp,sp,8
    3868:	f800283a 	ret

0000386c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    386c:	deffff04 	addi	sp,sp,-4
    3870:	df000015 	stw	fp,0(sp)
    3874:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
    3878:	00800044 	movi	r2,1
    387c:	d0a02b95 	stw	r2,-32594(gp)
}
    3880:	0001883a 	nop
    3884:	e037883a 	mov	sp,fp
    3888:	df000017 	ldw	fp,0(sp)
    388c:	dec00104 	addi	sp,sp,4
    3890:	f800283a 	ret

00003894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3894:	defffd04 	addi	sp,sp,-12
    3898:	dfc00215 	stw	ra,8(sp)
    389c:	df000115 	stw	fp,4(sp)
    38a0:	df000104 	addi	fp,sp,4
    38a4:	e13fff15 	stw	r4,-4(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    38a8:	0003aa80 	call	3aa8 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    38ac:	003ffe06 	br	38a8 <__alt_data_end+0xf00038a8>

000038b0 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    38b0:	defff804 	addi	sp,sp,-32
    38b4:	dfc00715 	stw	ra,28(sp)
    38b8:	df000615 	stw	fp,24(sp)
    38bc:	df000604 	addi	fp,sp,24
    38c0:	e13ffb15 	stw	r4,-20(fp)
    38c4:	e17ffc15 	stw	r5,-16(fp)
    38c8:	e1bffd15 	stw	r6,-12(fp)
    38cc:	e1fffe15 	stw	r7,-8(fp)
    38d0:	e0800217 	ldw	r2,8(fp)
    38d4:	e0bfff0d 	sth	r2,-4(fp)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    38d8:	e03ffa15 	stw	zero,-24(fp)
    38dc:	00001406 	br	3930 <prvInitialiseTCBVariables+0x80>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    38e0:	e0fffc17 	ldw	r3,-16(fp)
    38e4:	e0bffa17 	ldw	r2,-24(fp)
    38e8:	1885883a 	add	r2,r3,r2
    38ec:	10c00003 	ldbu	r3,0(r2)
    38f0:	e13ffb17 	ldw	r4,-20(fp)
    38f4:	e0bffa17 	ldw	r2,-24(fp)
    38f8:	2085883a 	add	r2,r4,r2
    38fc:	10800d04 	addi	r2,r2,52
    3900:	10c00005 	stb	r3,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3904:	e0fffc17 	ldw	r3,-16(fp)
    3908:	e0bffa17 	ldw	r2,-24(fp)
    390c:	1885883a 	add	r2,r3,r2
    3910:	10800003 	ldbu	r2,0(r2)
    3914:	10803fcc 	andi	r2,r2,255
    3918:	1080201c 	xori	r2,r2,128
    391c:	10bfe004 	addi	r2,r2,-128
    3920:	10000726 	beq	r2,zero,3940 <prvInitialiseTCBVariables+0x90>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3924:	e0bffa17 	ldw	r2,-24(fp)
    3928:	10800044 	addi	r2,r2,1
    392c:	e0bffa15 	stw	r2,-24(fp)
    3930:	e0bffa17 	ldw	r2,-24(fp)
    3934:	10800230 	cmpltui	r2,r2,8
    3938:	103fe91e 	bne	r2,zero,38e0 <__alt_data_end+0xf00038e0>
    393c:	00000106 	br	3944 <prvInitialiseTCBVariables+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    3940:	0001883a 	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3944:	e0bffb17 	ldw	r2,-20(fp)
    3948:	10000ec5 	stb	zero,59(r2)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    394c:	e0bffd17 	ldw	r2,-12(fp)
    3950:	10800330 	cmpltui	r2,r2,12
    3954:	1000021e 	bne	r2,zero,3960 <prvInitialiseTCBVariables+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3958:	008002c4 	movi	r2,11
    395c:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    3960:	e0bffb17 	ldw	r2,-20(fp)
    3964:	e0fffd17 	ldw	r3,-12(fp)
    3968:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    396c:	e0bffb17 	ldw	r2,-20(fp)
    3970:	e0fffd17 	ldw	r3,-12(fp)
    3974:	10c01015 	stw	r3,64(r2)
		pxTCB->uxMutexesHeld = 0;
    3978:	e0bffb17 	ldw	r2,-20(fp)
    397c:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3980:	e0bffb17 	ldw	r2,-20(fp)
    3984:	10800104 	addi	r2,r2,4
    3988:	1009883a 	mov	r4,r2
    398c:	000146c0 	call	146c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3990:	e0bffb17 	ldw	r2,-20(fp)
    3994:	10800604 	addi	r2,r2,24
    3998:	1009883a 	mov	r4,r2
    399c:	000146c0 	call	146c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    39a0:	e0bffb17 	ldw	r2,-20(fp)
    39a4:	e0fffb17 	ldw	r3,-20(fp)
    39a8:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    39ac:	00c00304 	movi	r3,12
    39b0:	e0bffd17 	ldw	r2,-12(fp)
    39b4:	1887c83a 	sub	r3,r3,r2
    39b8:	e0bffb17 	ldw	r2,-20(fp)
    39bc:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    39c0:	e0bffb17 	ldw	r2,-20(fp)
    39c4:	e0fffb17 	ldw	r3,-20(fp)
    39c8:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    39cc:	e0bffb17 	ldw	r2,-20(fp)
    39d0:	10000f15 	stw	zero,60(r2)
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    39d4:	e0bffb17 	ldw	r2,-20(fp)
    39d8:	10001215 	stw	zero,72(r2)
		pxTCB->eNotifyState = eNotWaitingNotification;
    39dc:	e0bffb17 	ldw	r2,-20(fp)
    39e0:	10001315 	stw	zero,76(r2)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    39e4:	0001883a 	nop
    39e8:	e037883a 	mov	sp,fp
    39ec:	dfc00117 	ldw	ra,4(sp)
    39f0:	df000017 	ldw	fp,0(sp)
    39f4:	dec00204 	addi	sp,sp,8
    39f8:	f800283a 	ret

000039fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    39fc:	defffd04 	addi	sp,sp,-12
    3a00:	dfc00215 	stw	ra,8(sp)
    3a04:	df000115 	stw	fp,4(sp)
    3a08:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a0c:	e03fff15 	stw	zero,-4(fp)
    3a10:	00000a06 	br	3a3c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a14:	e0bfff17 	ldw	r2,-4(fp)
    3a18:	10c00524 	muli	r3,r2,20
    3a1c:	00820234 	movhi	r2,2056
    3a20:	10bf7f04 	addi	r2,r2,-516
    3a24:	1885883a 	add	r2,r3,r2
    3a28:	1009883a 	mov	r4,r2
    3a2c:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a30:	e0bfff17 	ldw	r2,-4(fp)
    3a34:	10800044 	addi	r2,r2,1
    3a38:	e0bfff15 	stw	r2,-4(fp)
    3a3c:	e0bfff17 	ldw	r2,-4(fp)
    3a40:	10800330 	cmpltui	r2,r2,12
    3a44:	103ff31e 	bne	r2,zero,3a14 <__alt_data_end+0xf0003a14>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3a48:	01020234 	movhi	r4,2056
    3a4c:	213fbb04 	addi	r4,r4,-276
    3a50:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3a54:	01020234 	movhi	r4,2056
    3a58:	213fc004 	addi	r4,r4,-256
    3a5c:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3a60:	01020234 	movhi	r4,2056
    3a64:	213fc504 	addi	r4,r4,-236
    3a68:	00014040 	call	1404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3a6c:	01020234 	movhi	r4,2056
    3a70:	213fca04 	addi	r4,r4,-216
    3a74:	00014040 	call	1404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3a78:	00820234 	movhi	r2,2056
    3a7c:	10bfbb04 	addi	r2,r2,-276
    3a80:	d0a02395 	stw	r2,-32626(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3a84:	00820234 	movhi	r2,2056
    3a88:	10bfc004 	addi	r2,r2,-256
    3a8c:	d0a02495 	stw	r2,-32622(gp)
}
    3a90:	0001883a 	nop
    3a94:	e037883a 	mov	sp,fp
    3a98:	dfc00117 	ldw	ra,4(sp)
    3a9c:	df000017 	ldw	fp,0(sp)
    3aa0:	dec00204 	addi	sp,sp,8
    3aa4:	f800283a 	ret

00003aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3aa8:	defffc04 	addi	sp,sp,-16
    3aac:	dfc00315 	stw	ra,12(sp)
    3ab0:	df000215 	stw	fp,8(sp)
    3ab4:	df000204 	addi	fp,sp,8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3ab8:	00001d06 	br	3b30 <prvCheckTasksWaitingTermination+0x88>
		{
			vTaskSuspendAll();
    3abc:	0002f6c0 	call	2f6c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3ac0:	00820234 	movhi	r2,2056
    3ac4:	10bfca04 	addi	r2,r2,-216
    3ac8:	10800017 	ldw	r2,0(r2)
    3acc:	1005003a 	cmpeq	r2,r2,zero
    3ad0:	10803fcc 	andi	r2,r2,255
    3ad4:	e0bffe15 	stw	r2,-8(fp)
			}
			( void ) xTaskResumeAll();
    3ad8:	0002f980 	call	2f98 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3adc:	e0bffe17 	ldw	r2,-8(fp)
    3ae0:	1000131e 	bne	r2,zero,3b30 <prvCheckTasksWaitingTermination+0x88>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3ae4:	00040a80 	call	40a8 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3ae8:	00820234 	movhi	r2,2056
    3aec:	10bfca04 	addi	r2,r2,-216
    3af0:	10800317 	ldw	r2,12(r2)
    3af4:	10800317 	ldw	r2,12(r2)
    3af8:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3afc:	e0bfff17 	ldw	r2,-4(fp)
    3b00:	10800104 	addi	r2,r2,4
    3b04:	1009883a 	mov	r4,r2
    3b08:	00015fc0 	call	15fc <uxListRemove>
					--uxCurrentNumberOfTasks;
    3b0c:	d0a02697 	ldw	r2,-32614(gp)
    3b10:	10bfffc4 	addi	r2,r2,-1
    3b14:	d0a02695 	stw	r2,-32614(gp)
					--uxTasksDeleted;
    3b18:	d0a02597 	ldw	r2,-32618(gp)
    3b1c:	10bfffc4 	addi	r2,r2,-1
    3b20:	d0a02595 	stw	r2,-32618(gp)
				}
				taskEXIT_CRITICAL();
    3b24:	00040fc0 	call	40fc <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
    3b28:	e13fff17 	ldw	r4,-4(fp)
    3b2c:	0003d640 	call	3d64 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b30:	d0a02597 	ldw	r2,-32618(gp)
    3b34:	103fe11e 	bne	r2,zero,3abc <__alt_data_end+0xf0003abc>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3b38:	0001883a 	nop
    3b3c:	e037883a 	mov	sp,fp
    3b40:	dfc00117 	ldw	ra,4(sp)
    3b44:	df000017 	ldw	fp,0(sp)
    3b48:	dec00204 	addi	sp,sp,8
    3b4c:	f800283a 	ret

00003b50 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    3b50:	defffd04 	addi	sp,sp,-12
    3b54:	dfc00215 	stw	ra,8(sp)
    3b58:	df000115 	stw	fp,4(sp)
    3b5c:	df000104 	addi	fp,sp,4
    3b60:	e13fff15 	stw	r4,-4(fp)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3b64:	d0a02297 	ldw	r2,-32630(gp)
    3b68:	e0ffff17 	ldw	r3,-4(fp)
    3b6c:	10c00115 	stw	r3,4(r2)

	if( xTimeToWake < xTickCount )
    3b70:	d0a02797 	ldw	r2,-32610(gp)
    3b74:	e0ffff17 	ldw	r3,-4(fp)
    3b78:	1880072e 	bgeu	r3,r2,3b98 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3b7c:	d0e02497 	ldw	r3,-32622(gp)
    3b80:	d0a02297 	ldw	r2,-32630(gp)
    3b84:	10800104 	addi	r2,r2,4
    3b88:	100b883a 	mov	r5,r2
    3b8c:	1809883a 	mov	r4,r3
    3b90:	00015240 	call	1524 <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3b94:	00000b06 	br	3bc4 <prvAddCurrentTaskToDelayedList+0x74>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3b98:	d0e02397 	ldw	r3,-32626(gp)
    3b9c:	d0a02297 	ldw	r2,-32630(gp)
    3ba0:	10800104 	addi	r2,r2,4
    3ba4:	100b883a 	mov	r5,r2
    3ba8:	1809883a 	mov	r4,r3
    3bac:	00015240 	call	1524 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3bb0:	d0a00397 	ldw	r2,-32754(gp)
    3bb4:	e0ffff17 	ldw	r3,-4(fp)
    3bb8:	1880022e 	bgeu	r3,r2,3bc4 <prvAddCurrentTaskToDelayedList+0x74>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	d0a00395 	stw	r2,-32754(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3bc4:	0001883a 	nop
    3bc8:	e037883a 	mov	sp,fp
    3bcc:	dfc00117 	ldw	ra,4(sp)
    3bd0:	df000017 	ldw	fp,0(sp)
    3bd4:	dec00204 	addi	sp,sp,8
    3bd8:	f800283a 	ret

00003bdc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    3bdc:	defffa04 	addi	sp,sp,-24
    3be0:	dfc00515 	stw	ra,20(sp)
    3be4:	df000415 	stw	fp,16(sp)
    3be8:	df000404 	addi	fp,sp,16
    3bec:	2005883a 	mov	r2,r4
    3bf0:	e17fff15 	stw	r5,-4(fp)
    3bf4:	e0bffe0d 	sth	r2,-8(fp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3bf8:	e0bfff17 	ldw	r2,-4(fp)
    3bfc:	1000061e 	bne	r2,zero,3c18 <prvAllocateTCBAndStack+0x3c>
    3c00:	e0bffe0b 	ldhu	r2,-8(fp)
    3c04:	1085883a 	add	r2,r2,r2
    3c08:	1085883a 	add	r2,r2,r2
    3c0c:	1009883a 	mov	r4,r2
    3c10:	0000fd00 	call	fd0 <pvPortMalloc>
    3c14:	00000106 	br	3c1c <prvAllocateTCBAndStack+0x40>
    3c18:	e0bfff17 	ldw	r2,-4(fp)
    3c1c:	e0bffd15 	stw	r2,-12(fp)

		if( pxStack != NULL )
    3c20:	e0bffd17 	ldw	r2,-12(fp)
    3c24:	10000c26 	beq	r2,zero,3c58 <prvAllocateTCBAndStack+0x7c>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    3c28:	01001404 	movi	r4,80
    3c2c:	0000fd00 	call	fd0 <pvPortMalloc>
    3c30:	e0bffc15 	stw	r2,-16(fp)

			if( pxNewTCB != NULL )
    3c34:	e0bffc17 	ldw	r2,-16(fp)
    3c38:	10000426 	beq	r2,zero,3c4c <prvAllocateTCBAndStack+0x70>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    3c3c:	e0bffc17 	ldw	r2,-16(fp)
    3c40:	e0fffd17 	ldw	r3,-12(fp)
    3c44:	10c00c15 	stw	r3,48(r2)
    3c48:	00000406 	br	3c5c <prvAllocateTCBAndStack+0x80>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    3c4c:	e13ffd17 	ldw	r4,-12(fp)
    3c50:	00011500 	call	1150 <vPortFree>
    3c54:	00000106 	br	3c5c <prvAllocateTCBAndStack+0x80>
			}
		}
		else
		{
			pxNewTCB = NULL;
    3c58:	e03ffc15 	stw	zero,-16(fp)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
    3c5c:	e0bffc17 	ldw	r2,-16(fp)
    3c60:	10000926 	beq	r2,zero,3c88 <prvAllocateTCBAndStack+0xac>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    3c64:	e0bffc17 	ldw	r2,-16(fp)
    3c68:	10c00c17 	ldw	r3,48(r2)
    3c6c:	e0bffe0b 	ldhu	r2,-8(fp)
    3c70:	1085883a 	add	r2,r2,r2
    3c74:	1085883a 	add	r2,r2,r2
    3c78:	100d883a 	mov	r6,r2
    3c7c:	01402944 	movi	r5,165
    3c80:	1809883a 	mov	r4,r3
    3c84:	00096c40 	call	96c4 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
    3c88:	e0bffc17 	ldw	r2,-16(fp)
}
    3c8c:	e037883a 	mov	sp,fp
    3c90:	dfc00117 	ldw	ra,4(sp)
    3c94:	df000017 	ldw	fp,0(sp)
    3c98:	dec00204 	addi	sp,sp,8
    3c9c:	f800283a 	ret

00003ca0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    3ca0:	defffd04 	addi	sp,sp,-12
    3ca4:	df000215 	stw	fp,8(sp)
    3ca8:	df000204 	addi	fp,sp,8
    3cac:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
    3cb0:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cb4:	00000606 	br	3cd0 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
    3cb8:	e0bfff17 	ldw	r2,-4(fp)
    3cbc:	10800044 	addi	r2,r2,1
    3cc0:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
    3cc4:	e0bffe17 	ldw	r2,-8(fp)
    3cc8:	10800044 	addi	r2,r2,1
    3ccc:	e0bffe15 	stw	r2,-8(fp)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cd0:	e0bfff17 	ldw	r2,-4(fp)
    3cd4:	10800003 	ldbu	r2,0(r2)
    3cd8:	10803fcc 	andi	r2,r2,255
    3cdc:	10802960 	cmpeqi	r2,r2,165
    3ce0:	103ff51e 	bne	r2,zero,3cb8 <__alt_data_end+0xf0003cb8>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    3ce4:	e0bffe17 	ldw	r2,-8(fp)
    3ce8:	1004d0ba 	srli	r2,r2,2
    3cec:	e0bffe15 	stw	r2,-8(fp)

		return ( uint16_t ) ulCount;
    3cf0:	e0bffe17 	ldw	r2,-8(fp)
	}
    3cf4:	e037883a 	mov	sp,fp
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00104 	addi	sp,sp,4
    3d00:	f800283a 	ret

00003d04 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    3d04:	defffa04 	addi	sp,sp,-24
    3d08:	dfc00515 	stw	ra,20(sp)
    3d0c:	df000415 	stw	fp,16(sp)
    3d10:	df000404 	addi	fp,sp,16
    3d14:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3d18:	e0bfff17 	ldw	r2,-4(fp)
    3d1c:	1000021e 	bne	r2,zero,3d28 <uxTaskGetStackHighWaterMark+0x24>
    3d20:	d0a02297 	ldw	r2,-32630(gp)
    3d24:	00000106 	br	3d2c <uxTaskGetStackHighWaterMark+0x28>
    3d28:	e0bfff17 	ldw	r2,-4(fp)
    3d2c:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    3d30:	e0bffc17 	ldw	r2,-16(fp)
    3d34:	10800c17 	ldw	r2,48(r2)
    3d38:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    3d3c:	e13ffd17 	ldw	r4,-12(fp)
    3d40:	0003ca00 	call	3ca0 <prvTaskCheckFreeStackSpace>
    3d44:	10bfffcc 	andi	r2,r2,65535
    3d48:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
    3d4c:	e0bffe17 	ldw	r2,-8(fp)
	}
    3d50:	e037883a 	mov	sp,fp
    3d54:	dfc00117 	ldw	ra,4(sp)
    3d58:	df000017 	ldw	fp,0(sp)
    3d5c:	dec00204 	addi	sp,sp,8
    3d60:	f800283a 	ret

00003d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3d64:	defffd04 	addi	sp,sp,-12
    3d68:	dfc00215 	stw	ra,8(sp)
    3d6c:	df000115 	stw	fp,4(sp)
    3d70:	df000104 	addi	fp,sp,4
    3d74:	e13fff15 	stw	r4,-4(fp)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    3d78:	e0bfff17 	ldw	r2,-4(fp)
    3d7c:	10800c17 	ldw	r2,48(r2)
    3d80:	1009883a 	mov	r4,r2
    3d84:	00011500 	call	1150 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    3d88:	e13fff17 	ldw	r4,-4(fp)
    3d8c:	00011500 	call	1150 <vPortFree>
	}
    3d90:	0001883a 	nop
    3d94:	e037883a 	mov	sp,fp
    3d98:	dfc00117 	ldw	ra,4(sp)
    3d9c:	df000017 	ldw	fp,0(sp)
    3da0:	dec00204 	addi	sp,sp,8
    3da4:	f800283a 	ret

00003da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3da8:	defffe04 	addi	sp,sp,-8
    3dac:	df000115 	stw	fp,4(sp)
    3db0:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3db4:	d0a02397 	ldw	r2,-32626(gp)
    3db8:	10800017 	ldw	r2,0(r2)
    3dbc:	1000021e 	bne	r2,zero,3dc8 <prvResetNextTaskUnblockTime+0x20>
    3dc0:	00800044 	movi	r2,1
    3dc4:	00000106 	br	3dcc <prvResetNextTaskUnblockTime+0x24>
    3dc8:	0005883a 	mov	r2,zero
    3dcc:	10803fcc 	andi	r2,r2,255
    3dd0:	10000326 	beq	r2,zero,3de0 <prvResetNextTaskUnblockTime+0x38>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3dd4:	00bfffc4 	movi	r2,-1
    3dd8:	d0a00395 	stw	r2,-32754(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
    3ddc:	00000706 	br	3dfc <prvResetNextTaskUnblockTime+0x54>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3de0:	d0a02397 	ldw	r2,-32626(gp)
    3de4:	10800317 	ldw	r2,12(r2)
    3de8:	10800317 	ldw	r2,12(r2)
    3dec:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    3df0:	e0bfff17 	ldw	r2,-4(fp)
    3df4:	10800117 	ldw	r2,4(r2)
    3df8:	d0a00395 	stw	r2,-32754(gp)
	}
}
    3dfc:	0001883a 	nop
    3e00:	e037883a 	mov	sp,fp
    3e04:	df000017 	ldw	fp,0(sp)
    3e08:	dec00104 	addi	sp,sp,4
    3e0c:	f800283a 	ret

00003e10 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3e10:	defffe04 	addi	sp,sp,-8
    3e14:	df000115 	stw	fp,4(sp)
    3e18:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e1c:	d0a02297 	ldw	r2,-32630(gp)
    3e20:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
    3e24:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e28:	e037883a 	mov	sp,fp
    3e2c:	df000017 	ldw	fp,0(sp)
    3e30:	dec00104 	addi	sp,sp,4
    3e34:	f800283a 	ret

00003e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3e38:	defffe04 	addi	sp,sp,-8
    3e3c:	df000115 	stw	fp,4(sp)
    3e40:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3e44:	d0a02997 	ldw	r2,-32602(gp)
    3e48:	1000031e 	bne	r2,zero,3e58 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3e4c:	00800044 	movi	r2,1
    3e50:	e0bfff15 	stw	r2,-4(fp)
    3e54:	00000606 	br	3e70 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3e58:	d0a02e97 	ldw	r2,-32582(gp)
    3e5c:	1000031e 	bne	r2,zero,3e6c <xTaskGetSchedulerState+0x34>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3e60:	00800084 	movi	r2,2
    3e64:	e0bfff15 	stw	r2,-4(fp)
    3e68:	00000106 	br	3e70 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3e6c:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
    3e70:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e74:	e037883a 	mov	sp,fp
    3e78:	df000017 	ldw	fp,0(sp)
    3e7c:	dec00104 	addi	sp,sp,4
    3e80:	f800283a 	ret

00003e84 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3e84:	defffc04 	addi	sp,sp,-16
    3e88:	dfc00315 	stw	ra,12(sp)
    3e8c:	df000215 	stw	fp,8(sp)
    3e90:	df000204 	addi	fp,sp,8
    3e94:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3e98:	e0bfff17 	ldw	r2,-4(fp)
    3e9c:	e0bffe15 	stw	r2,-8(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3ea0:	e0bfff17 	ldw	r2,-4(fp)
    3ea4:	10003b26 	beq	r2,zero,3f94 <vTaskPriorityInherit+0x110>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3ea8:	e0bffe17 	ldw	r2,-8(fp)
    3eac:	10c00b17 	ldw	r3,44(r2)
    3eb0:	d0a02297 	ldw	r2,-32630(gp)
    3eb4:	10800b17 	ldw	r2,44(r2)
    3eb8:	1880362e 	bgeu	r3,r2,3f94 <vTaskPriorityInherit+0x110>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3ebc:	e0bffe17 	ldw	r2,-8(fp)
    3ec0:	10800617 	ldw	r2,24(r2)
    3ec4:	10000616 	blt	r2,zero,3ee0 <vTaskPriorityInherit+0x5c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3ec8:	d0a02297 	ldw	r2,-32630(gp)
    3ecc:	10800b17 	ldw	r2,44(r2)
    3ed0:	00c00304 	movi	r3,12
    3ed4:	1887c83a 	sub	r3,r3,r2
    3ed8:	e0bffe17 	ldw	r2,-8(fp)
    3edc:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3ee0:	e0bffe17 	ldw	r2,-8(fp)
    3ee4:	10c00517 	ldw	r3,20(r2)
    3ee8:	e0bffe17 	ldw	r2,-8(fp)
    3eec:	10800b17 	ldw	r2,44(r2)
    3ef0:	11000524 	muli	r4,r2,20
    3ef4:	00820234 	movhi	r2,2056
    3ef8:	10bf7f04 	addi	r2,r2,-516
    3efc:	2085883a 	add	r2,r4,r2
    3f00:	1880021e 	bne	r3,r2,3f0c <vTaskPriorityInherit+0x88>
    3f04:	00800044 	movi	r2,1
    3f08:	00000106 	br	3f10 <vTaskPriorityInherit+0x8c>
    3f0c:	0005883a 	mov	r2,zero
    3f10:	10803fcc 	andi	r2,r2,255
    3f14:	10001b26 	beq	r2,zero,3f84 <vTaskPriorityInherit+0x100>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3f18:	e0bffe17 	ldw	r2,-8(fp)
    3f1c:	10800104 	addi	r2,r2,4
    3f20:	1009883a 	mov	r4,r2
    3f24:	00015fc0 	call	15fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f28:	d0a02297 	ldw	r2,-32630(gp)
    3f2c:	10c00b17 	ldw	r3,44(r2)
    3f30:	e0bffe17 	ldw	r2,-8(fp)
    3f34:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxTCB );
    3f38:	e0bffe17 	ldw	r2,-8(fp)
    3f3c:	10800b17 	ldw	r2,44(r2)
    3f40:	d0e02897 	ldw	r3,-32606(gp)
    3f44:	1880032e 	bgeu	r3,r2,3f54 <vTaskPriorityInherit+0xd0>
    3f48:	e0bffe17 	ldw	r2,-8(fp)
    3f4c:	10800b17 	ldw	r2,44(r2)
    3f50:	d0a02895 	stw	r2,-32606(gp)
    3f54:	e0bffe17 	ldw	r2,-8(fp)
    3f58:	10800b17 	ldw	r2,44(r2)
    3f5c:	10c00524 	muli	r3,r2,20
    3f60:	00820234 	movhi	r2,2056
    3f64:	10bf7f04 	addi	r2,r2,-516
    3f68:	1887883a 	add	r3,r3,r2
    3f6c:	e0bffe17 	ldw	r2,-8(fp)
    3f70:	10800104 	addi	r2,r2,4
    3f74:	100b883a 	mov	r5,r2
    3f78:	1809883a 	mov	r4,r3
    3f7c:	00014980 	call	1498 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3f80:	00000406 	br	3f94 <vTaskPriorityInherit+0x110>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f84:	d0a02297 	ldw	r2,-32630(gp)
    3f88:	10c00b17 	ldw	r3,44(r2)
    3f8c:	e0bffe17 	ldw	r2,-8(fp)
    3f90:	10c00b15 	stw	r3,44(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3f94:	0001883a 	nop
    3f98:	e037883a 	mov	sp,fp
    3f9c:	dfc00117 	ldw	ra,4(sp)
    3fa0:	df000017 	ldw	fp,0(sp)
    3fa4:	dec00204 	addi	sp,sp,8
    3fa8:	f800283a 	ret

00003fac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    3fac:	defffb04 	addi	sp,sp,-20
    3fb0:	dfc00415 	stw	ra,16(sp)
    3fb4:	df000315 	stw	fp,12(sp)
    3fb8:	df000304 	addi	fp,sp,12
    3fbc:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3fc0:	e0bfff17 	ldw	r2,-4(fp)
    3fc4:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
    3fc8:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
    3fcc:	e0bfff17 	ldw	r2,-4(fp)
    3fd0:	10002f26 	beq	r2,zero,4090 <xTaskPriorityDisinherit+0xe4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    3fd4:	e0bffe17 	ldw	r2,-8(fp)
    3fd8:	10801117 	ldw	r2,68(r2)
    3fdc:	10ffffc4 	addi	r3,r2,-1
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	10c01115 	stw	r3,68(r2)

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3fe8:	e0bffe17 	ldw	r2,-8(fp)
    3fec:	10c00b17 	ldw	r3,44(r2)
    3ff0:	e0bffe17 	ldw	r2,-8(fp)
    3ff4:	10801017 	ldw	r2,64(r2)
    3ff8:	18802526 	beq	r3,r2,4090 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3ffc:	e0bffe17 	ldw	r2,-8(fp)
    4000:	10801117 	ldw	r2,68(r2)
    4004:	1000221e 	bne	r2,zero,4090 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4008:	e0bffe17 	ldw	r2,-8(fp)
    400c:	10800104 	addi	r2,r2,4
    4010:	1009883a 	mov	r4,r2
    4014:	00015fc0 	call	15fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4018:	e0bffe17 	ldw	r2,-8(fp)
    401c:	10c01017 	ldw	r3,64(r2)
    4020:	e0bffe17 	ldw	r2,-8(fp)
    4024:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4028:	e0bffe17 	ldw	r2,-8(fp)
    402c:	10800b17 	ldw	r2,44(r2)
    4030:	00c00304 	movi	r3,12
    4034:	1887c83a 	sub	r3,r3,r2
    4038:	e0bffe17 	ldw	r2,-8(fp)
    403c:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
    4040:	e0bffe17 	ldw	r2,-8(fp)
    4044:	10800b17 	ldw	r2,44(r2)
    4048:	d0e02897 	ldw	r3,-32606(gp)
    404c:	1880032e 	bgeu	r3,r2,405c <xTaskPriorityDisinherit+0xb0>
    4050:	e0bffe17 	ldw	r2,-8(fp)
    4054:	10800b17 	ldw	r2,44(r2)
    4058:	d0a02895 	stw	r2,-32606(gp)
    405c:	e0bffe17 	ldw	r2,-8(fp)
    4060:	10800b17 	ldw	r2,44(r2)
    4064:	10c00524 	muli	r3,r2,20
    4068:	00820234 	movhi	r2,2056
    406c:	10bf7f04 	addi	r2,r2,-516
    4070:	1887883a 	add	r3,r3,r2
    4074:	e0bffe17 	ldw	r2,-8(fp)
    4078:	10800104 	addi	r2,r2,4
    407c:	100b883a 	mov	r5,r2
    4080:	1809883a 	mov	r4,r3
    4084:	00014980 	call	1498 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4088:	00800044 	movi	r2,1
    408c:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4090:	e0bffd17 	ldw	r2,-12(fp)
	}
    4094:	e037883a 	mov	sp,fp
    4098:	dfc00117 	ldw	ra,4(sp)
    409c:	df000017 	ldw	fp,0(sp)
    40a0:	dec00204 	addi	sp,sp,8
    40a4:	f800283a 	ret

000040a8 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
    40a8:	defffe04 	addi	sp,sp,-8
    40ac:	df000115 	stw	fp,4(sp)
    40b0:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    40b4:	0005303a 	rdctl	r2,status
    40b8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    40bc:	e0ffff17 	ldw	r3,-4(fp)
    40c0:	00bfff84 	movi	r2,-2
    40c4:	1884703a 	and	r2,r3,r2
    40c8:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    40cc:	d0a02997 	ldw	r2,-32602(gp)
    40d0:	10000526 	beq	r2,zero,40e8 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    40d4:	d0a02297 	ldw	r2,-32630(gp)
    40d8:	10c00f17 	ldw	r3,60(r2)
    40dc:	18c00044 	addi	r3,r3,1
    40e0:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    40e4:	d0a02297 	ldw	r2,-32630(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    40e8:	0001883a 	nop
    40ec:	e037883a 	mov	sp,fp
    40f0:	df000017 	ldw	fp,0(sp)
    40f4:	dec00104 	addi	sp,sp,4
    40f8:	f800283a 	ret

000040fc <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	df000115 	stw	fp,4(sp)
    4104:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
    4108:	d0a02997 	ldw	r2,-32602(gp)
    410c:	10000e26 	beq	r2,zero,4148 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    4110:	d0a02297 	ldw	r2,-32630(gp)
    4114:	10800f17 	ldw	r2,60(r2)
    4118:	10000b26 	beq	r2,zero,4148 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    411c:	d0a02297 	ldw	r2,-32630(gp)
    4120:	10c00f17 	ldw	r3,60(r2)
    4124:	18ffffc4 	addi	r3,r3,-1
    4128:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    412c:	d0a02297 	ldw	r2,-32630(gp)
    4130:	10800f17 	ldw	r2,60(r2)
    4134:	1000041e 	bne	r2,zero,4148 <vTaskExitCritical+0x4c>
    4138:	00800044 	movi	r2,1
    413c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4140:	e0bfff17 	ldw	r2,-4(fp)
    4144:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4148:	0001883a 	nop
    414c:	e037883a 	mov	sp,fp
    4150:	df000017 	ldw	fp,0(sp)
    4154:	dec00104 	addi	sp,sp,4
    4158:	f800283a 	ret

0000415c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    415c:	defffe04 	addi	sp,sp,-8
    4160:	df000115 	stw	fp,4(sp)
    4164:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4168:	d0a02297 	ldw	r2,-32630(gp)
    416c:	10800617 	ldw	r2,24(r2)
    4170:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4174:	d0a02297 	ldw	r2,-32630(gp)
    4178:	d0e02297 	ldw	r3,-32630(gp)
    417c:	18c00b17 	ldw	r3,44(r3)
    4180:	01000304 	movi	r4,12
    4184:	20c7c83a 	sub	r3,r4,r3
    4188:	10c00615 	stw	r3,24(r2)

	return uxReturn;
    418c:	e0bfff17 	ldw	r2,-4(fp)
}
    4190:	e037883a 	mov	sp,fp
    4194:	df000017 	ldw	fp,0(sp)
    4198:	dec00104 	addi	sp,sp,4
    419c:	f800283a 	ret

000041a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    41a0:	deffff04 	addi	sp,sp,-4
    41a4:	df000015 	stw	fp,0(sp)
    41a8:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    41ac:	d0a02297 	ldw	r2,-32630(gp)
    41b0:	10000426 	beq	r2,zero,41c4 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    41b4:	d0a02297 	ldw	r2,-32630(gp)
    41b8:	10c01117 	ldw	r3,68(r2)
    41bc:	18c00044 	addi	r3,r3,1
    41c0:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
    41c4:	d0a02297 	ldw	r2,-32630(gp)
	}
    41c8:	e037883a 	mov	sp,fp
    41cc:	df000017 	ldw	fp,0(sp)
    41d0:	dec00104 	addi	sp,sp,4
    41d4:	f800283a 	ret

000041d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    41d8:	defffa04 	addi	sp,sp,-24
    41dc:	dfc00515 	stw	ra,20(sp)
    41e0:	df000415 	stw	fp,16(sp)
    41e4:	df000404 	addi	fp,sp,16
    41e8:	e13ffe15 	stw	r4,-8(fp)
    41ec:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    41f0:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    41f4:	d0a02297 	ldw	r2,-32630(gp)
    41f8:	10801217 	ldw	r2,72(r2)
    41fc:	1000101e 	bne	r2,zero,4240 <ulTaskNotifyTake+0x68>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    4200:	d0a02297 	ldw	r2,-32630(gp)
    4204:	00c00044 	movi	r3,1
    4208:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	10000b26 	beq	r2,zero,4240 <ulTaskNotifyTake+0x68>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4214:	d0a02297 	ldw	r2,-32630(gp)
    4218:	10800104 	addi	r2,r2,4
    421c:	1009883a 	mov	r4,r2
    4220:	00015fc0 	call	15fc <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4224:	d0e02797 	ldw	r3,-32610(gp)
    4228:	e0bfff17 	ldw	r2,-4(fp)
    422c:	1885883a 	add	r2,r3,r2
    4230:	e0bffc15 	stw	r2,-16(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    4234:	e13ffc17 	ldw	r4,-16(fp)
    4238:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    423c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4240:	00040fc0 	call	40fc <vTaskExitCritical>

		taskENTER_CRITICAL();
    4244:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4248:	d0a02297 	ldw	r2,-32630(gp)
    424c:	10801217 	ldw	r2,72(r2)
    4250:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
    4254:	e0bffd17 	ldw	r2,-12(fp)
    4258:	10000926 	beq	r2,zero,4280 <ulTaskNotifyTake+0xa8>
			{
				if( xClearCountOnExit != pdFALSE )
    425c:	e0bffe17 	ldw	r2,-8(fp)
    4260:	10000326 	beq	r2,zero,4270 <ulTaskNotifyTake+0x98>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    4264:	d0a02297 	ldw	r2,-32630(gp)
    4268:	10001215 	stw	zero,72(r2)
    426c:	00000406 	br	4280 <ulTaskNotifyTake+0xa8>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    4270:	d0a02297 	ldw	r2,-32630(gp)
    4274:	10c01217 	ldw	r3,72(r2)
    4278:	18ffffc4 	addi	r3,r3,-1
    427c:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4280:	d0a02297 	ldw	r2,-32630(gp)
    4284:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4288:	00040fc0 	call	40fc <vTaskExitCritical>

		return ulReturn;
    428c:	e0bffd17 	ldw	r2,-12(fp)
	}
    4290:	e037883a 	mov	sp,fp
    4294:	dfc00117 	ldw	ra,4(sp)
    4298:	df000017 	ldw	fp,0(sp)
    429c:	dec00204 	addi	sp,sp,8
    42a0:	f800283a 	ret

000042a4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    42a4:	defff804 	addi	sp,sp,-32
    42a8:	dfc00715 	stw	ra,28(sp)
    42ac:	df000615 	stw	fp,24(sp)
    42b0:	df000604 	addi	fp,sp,24
    42b4:	e13ffc15 	stw	r4,-16(fp)
    42b8:	e17ffd15 	stw	r5,-12(fp)
    42bc:	e1bffe15 	stw	r6,-8(fp)
    42c0:	e1ffff15 	stw	r7,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    42c4:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    42c8:	d0a02297 	ldw	r2,-32630(gp)
    42cc:	10801317 	ldw	r2,76(r2)
    42d0:	108000a0 	cmpeqi	r2,r2,2
    42d4:	1000161e 	bne	r2,zero,4330 <xTaskNotifyWait+0x8c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    42d8:	d0a02297 	ldw	r2,-32630(gp)
    42dc:	11001217 	ldw	r4,72(r2)
    42e0:	e0fffc17 	ldw	r3,-16(fp)
    42e4:	00c6303a 	nor	r3,zero,r3
    42e8:	20c6703a 	and	r3,r4,r3
    42ec:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    42f0:	d0a02297 	ldw	r2,-32630(gp)
    42f4:	00c00044 	movi	r3,1
    42f8:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	10000b26 	beq	r2,zero,4330 <xTaskNotifyWait+0x8c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4304:	d0a02297 	ldw	r2,-32630(gp)
    4308:	10800104 	addi	r2,r2,4
    430c:	1009883a 	mov	r4,r2
    4310:	00015fc0 	call	15fc <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4314:	d0e02797 	ldw	r3,-32610(gp)
    4318:	e0bfff17 	ldw	r2,-4(fp)
    431c:	1885883a 	add	r2,r3,r2
    4320:	e0bffb15 	stw	r2,-20(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    4324:	e13ffb17 	ldw	r4,-20(fp)
    4328:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    432c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4330:	00040fc0 	call	40fc <vTaskExitCritical>

		taskENTER_CRITICAL();
    4334:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			if( pulNotificationValue != NULL )
    4338:	e0bffe17 	ldw	r2,-8(fp)
    433c:	10000426 	beq	r2,zero,4350 <xTaskNotifyWait+0xac>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4340:	d0a02297 	ldw	r2,-32630(gp)
    4344:	10c01217 	ldw	r3,72(r2)
    4348:	e0bffe17 	ldw	r2,-8(fp)
    434c:	10c00015 	stw	r3,0(r2)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    4350:	d0a02297 	ldw	r2,-32630(gp)
    4354:	10801317 	ldw	r2,76(r2)
    4358:	10800058 	cmpnei	r2,r2,1
    435c:	1000021e 	bne	r2,zero,4368 <xTaskNotifyWait+0xc4>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    4360:	e03ffa15 	stw	zero,-24(fp)
    4364:	00000806 	br	4388 <xTaskNotifyWait+0xe4>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4368:	d0a02297 	ldw	r2,-32630(gp)
    436c:	11001217 	ldw	r4,72(r2)
    4370:	e0fffd17 	ldw	r3,-12(fp)
    4374:	00c6303a 	nor	r3,zero,r3
    4378:	20c6703a 	and	r3,r4,r3
    437c:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
    4380:	00800044 	movi	r2,1
    4384:	e0bffa15 	stw	r2,-24(fp)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4388:	d0a02297 	ldw	r2,-32630(gp)
    438c:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4390:	00040fc0 	call	40fc <vTaskExitCritical>

		return xReturn;
    4394:	e0bffa17 	ldw	r2,-24(fp)
	}
    4398:	e037883a 	mov	sp,fp
    439c:	dfc00117 	ldw	ra,4(sp)
    43a0:	df000017 	ldw	fp,0(sp)
    43a4:	dec00204 	addi	sp,sp,8
    43a8:	f800283a 	ret

000043ac <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
    43ac:	defff804 	addi	sp,sp,-32
    43b0:	dfc00715 	stw	ra,28(sp)
    43b4:	df000615 	stw	fp,24(sp)
    43b8:	df000604 	addi	fp,sp,24
    43bc:	e13ffd15 	stw	r4,-12(fp)
    43c0:	e17ffe15 	stw	r5,-8(fp)
    43c4:	e1bfff15 	stw	r6,-4(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    43c8:	00800044 	movi	r2,1
    43cc:	e0bffa15 	stw	r2,-24(fp)

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    43d0:	e0bffd17 	ldw	r2,-12(fp)
    43d4:	e0bffb15 	stw	r2,-20(fp)

		taskENTER_CRITICAL();
    43d8:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    43dc:	e0bffb17 	ldw	r2,-20(fp)
    43e0:	10801317 	ldw	r2,76(r2)
    43e4:	e0bffc15 	stw	r2,-16(fp)

			pxTCB->eNotifyState = eNotified;
    43e8:	e0bffb17 	ldw	r2,-20(fp)
    43ec:	00c00084 	movi	r3,2
    43f0:	10c01315 	stw	r3,76(r2)

			switch( eAction )
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	10800168 	cmpgeui	r2,r2,5
    43fc:	1000271e 	bne	r2,zero,449c <xTaskNotify+0xf0>
    4400:	e0bfff17 	ldw	r2,-4(fp)
    4404:	100690ba 	slli	r3,r2,2
    4408:	00800034 	movhi	r2,0
    440c:	10910704 	addi	r2,r2,17436
    4410:	1885883a 	add	r2,r3,r2
    4414:	10800017 	ldw	r2,0(r2)
    4418:	1000683a 	jmp	r2
    441c:	00004498 	cmpnei	zero,zero,274
    4420:	00004430 	cmpltui	zero,zero,272
    4424:	0000444c 	andi	zero,zero,273
    4428:	00004464 	muli	zero,zero,273
    442c:	00004474 	movhi	zero,273
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4430:	e0bffb17 	ldw	r2,-20(fp)
    4434:	10c01217 	ldw	r3,72(r2)
    4438:	e0bffe17 	ldw	r2,-8(fp)
    443c:	1886b03a 	or	r3,r3,r2
    4440:	e0bffb17 	ldw	r2,-20(fp)
    4444:	10c01215 	stw	r3,72(r2)
					break;
    4448:	00001406 	br	449c <xTaskNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    444c:	e0bffb17 	ldw	r2,-20(fp)
    4450:	10801217 	ldw	r2,72(r2)
    4454:	10c00044 	addi	r3,r2,1
    4458:	e0bffb17 	ldw	r2,-20(fp)
    445c:	10c01215 	stw	r3,72(r2)
					break;
    4460:	00000e06 	br	449c <xTaskNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	e0fffe17 	ldw	r3,-8(fp)
    446c:	10c01215 	stw	r3,72(r2)
					break;
    4470:	00000a06 	br	449c <xTaskNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4474:	e0bffc17 	ldw	r2,-16(fp)
    4478:	108000a0 	cmpeqi	r2,r2,2
    447c:	1000041e 	bne	r2,zero,4490 <xTaskNotify+0xe4>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4480:	e0bffb17 	ldw	r2,-20(fp)
    4484:	e0fffe17 	ldw	r3,-8(fp)
    4488:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    448c:	00000306 	br	449c <xTaskNotify+0xf0>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4490:	e03ffa15 	stw	zero,-24(fp)
					}
					break;
    4494:	00000106 	br	449c <xTaskNotify+0xf0>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
    4498:	0001883a 	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    449c:	e0bffc17 	ldw	r2,-16(fp)
    44a0:	10800058 	cmpnei	r2,r2,1
    44a4:	10001c1e 	bne	r2,zero,4518 <xTaskNotify+0x16c>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    44a8:	e0bffb17 	ldw	r2,-20(fp)
    44ac:	10800104 	addi	r2,r2,4
    44b0:	1009883a 	mov	r4,r2
    44b4:	00015fc0 	call	15fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    44b8:	e0bffb17 	ldw	r2,-20(fp)
    44bc:	10800b17 	ldw	r2,44(r2)
    44c0:	d0e02897 	ldw	r3,-32606(gp)
    44c4:	1880032e 	bgeu	r3,r2,44d4 <xTaskNotify+0x128>
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10800b17 	ldw	r2,44(r2)
    44d0:	d0a02895 	stw	r2,-32606(gp)
    44d4:	e0bffb17 	ldw	r2,-20(fp)
    44d8:	10800b17 	ldw	r2,44(r2)
    44dc:	10c00524 	muli	r3,r2,20
    44e0:	00820234 	movhi	r2,2056
    44e4:	10bf7f04 	addi	r2,r2,-516
    44e8:	1887883a 	add	r3,r3,r2
    44ec:	e0bffb17 	ldw	r2,-20(fp)
    44f0:	10800104 	addi	r2,r2,4
    44f4:	100b883a 	mov	r5,r2
    44f8:	1809883a 	mov	r4,r3
    44fc:	00014980 	call	1498 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4500:	e0bffb17 	ldw	r2,-20(fp)
    4504:	10800b17 	ldw	r2,44(r2)
    4508:	d0e02297 	ldw	r3,-32630(gp)
    450c:	18c00b17 	ldw	r3,44(r3)
    4510:	1880012e 	bgeu	r3,r2,4518 <xTaskNotify+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
    4514:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4518:	00040fc0 	call	40fc <vTaskExitCritical>

		return xReturn;
    451c:	e0bffa17 	ldw	r2,-24(fp)
	}
    4520:	e037883a 	mov	sp,fp
    4524:	dfc00117 	ldw	ra,4(sp)
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00204 	addi	sp,sp,8
    4530:	f800283a 	ret

00004534 <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4534:	defff604 	addi	sp,sp,-40
    4538:	dfc00915 	stw	ra,36(sp)
    453c:	df000815 	stw	fp,32(sp)
    4540:	df000804 	addi	fp,sp,32
    4544:	e13ffc15 	stw	r4,-16(fp)
    4548:	e17ffd15 	stw	r5,-12(fp)
    454c:	e1bffe15 	stw	r6,-8(fp)
    4550:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4554:	00800044 	movi	r2,1
    4558:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    455c:	e0bffc17 	ldw	r2,-16(fp)
    4560:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4564:	e03ffa15 	stw	zero,-24(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4568:	e0bff917 	ldw	r2,-28(fp)
    456c:	10801317 	ldw	r2,76(r2)
    4570:	e0bffb15 	stw	r2,-20(fp)

			pxTCB->eNotifyState = eNotified;
    4574:	e0bff917 	ldw	r2,-28(fp)
    4578:	00c00084 	movi	r3,2
    457c:	10c01315 	stw	r3,76(r2)

			switch( eAction )
    4580:	e0bffe17 	ldw	r2,-8(fp)
    4584:	10800168 	cmpgeui	r2,r2,5
    4588:	1000271e 	bne	r2,zero,4628 <xTaskNotifyFromISR+0xf4>
    458c:	e0bffe17 	ldw	r2,-8(fp)
    4590:	100690ba 	slli	r3,r2,2
    4594:	00800034 	movhi	r2,0
    4598:	10916a04 	addi	r2,r2,17832
    459c:	1885883a 	add	r2,r3,r2
    45a0:	10800017 	ldw	r2,0(r2)
    45a4:	1000683a 	jmp	r2
    45a8:	00004624 	muli	zero,zero,280
    45ac:	000045bc 	xorhi	zero,zero,278
    45b0:	000045d8 	cmpnei	zero,zero,279
    45b4:	000045f0 	cmpltui	zero,zero,279
    45b8:	00004600 	call	460 <vCoRoutineAddToDelayedList+0x80>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    45bc:	e0bff917 	ldw	r2,-28(fp)
    45c0:	10c01217 	ldw	r3,72(r2)
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	1886b03a 	or	r3,r3,r2
    45cc:	e0bff917 	ldw	r2,-28(fp)
    45d0:	10c01215 	stw	r3,72(r2)
					break;
    45d4:	00001406 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    45d8:	e0bff917 	ldw	r2,-28(fp)
    45dc:	10801217 	ldw	r2,72(r2)
    45e0:	10c00044 	addi	r3,r2,1
    45e4:	e0bff917 	ldw	r2,-28(fp)
    45e8:	10c01215 	stw	r3,72(r2)
					break;
    45ec:	00000e06 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    45f0:	e0bff917 	ldw	r2,-28(fp)
    45f4:	e0fffd17 	ldw	r3,-12(fp)
    45f8:	10c01215 	stw	r3,72(r2)
					break;
    45fc:	00000a06 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4600:	e0bffb17 	ldw	r2,-20(fp)
    4604:	108000a0 	cmpeqi	r2,r2,2
    4608:	1000041e 	bne	r2,zero,461c <xTaskNotifyFromISR+0xe8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    460c:	e0bff917 	ldw	r2,-28(fp)
    4610:	e0fffd17 	ldw	r3,-12(fp)
    4614:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    4618:	00000306 	br	4628 <xTaskNotifyFromISR+0xf4>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    461c:	e03ff815 	stw	zero,-32(fp)
					}
					break;
    4620:	00000106 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
    4624:	0001883a 	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    4628:	e0bffb17 	ldw	r2,-20(fp)
    462c:	10800058 	cmpnei	r2,r2,1
    4630:	1000291e 	bne	r2,zero,46d8 <xTaskNotifyFromISR+0x1a4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4634:	d0a02e97 	ldw	r2,-32582(gp)
    4638:	1000171e 	bne	r2,zero,4698 <xTaskNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    463c:	e0bff917 	ldw	r2,-28(fp)
    4640:	10800104 	addi	r2,r2,4
    4644:	1009883a 	mov	r4,r2
    4648:	00015fc0 	call	15fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    464c:	e0bff917 	ldw	r2,-28(fp)
    4650:	10800b17 	ldw	r2,44(r2)
    4654:	d0e02897 	ldw	r3,-32606(gp)
    4658:	1880032e 	bgeu	r3,r2,4668 <xTaskNotifyFromISR+0x134>
    465c:	e0bff917 	ldw	r2,-28(fp)
    4660:	10800b17 	ldw	r2,44(r2)
    4664:	d0a02895 	stw	r2,-32606(gp)
    4668:	e0bff917 	ldw	r2,-28(fp)
    466c:	10800b17 	ldw	r2,44(r2)
    4670:	10c00524 	muli	r3,r2,20
    4674:	00820234 	movhi	r2,2056
    4678:	10bf7f04 	addi	r2,r2,-516
    467c:	1887883a 	add	r3,r3,r2
    4680:	e0bff917 	ldw	r2,-28(fp)
    4684:	10800104 	addi	r2,r2,4
    4688:	100b883a 	mov	r5,r2
    468c:	1809883a 	mov	r4,r3
    4690:	00014980 	call	1498 <vListInsertEnd>
    4694:	00000606 	br	46b0 <xTaskNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4698:	e0bff917 	ldw	r2,-28(fp)
    469c:	10800604 	addi	r2,r2,24
    46a0:	100b883a 	mov	r5,r2
    46a4:	01020234 	movhi	r4,2056
    46a8:	213fc504 	addi	r4,r4,-236
    46ac:	00014980 	call	1498 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    46b0:	e0bff917 	ldw	r2,-28(fp)
    46b4:	10800b17 	ldw	r2,44(r2)
    46b8:	d0e02297 	ldw	r3,-32630(gp)
    46bc:	18c00b17 	ldw	r3,44(r3)
    46c0:	1880052e 	bgeu	r3,r2,46d8 <xTaskNotifyFromISR+0x1a4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    46c4:	e0bfff17 	ldw	r2,-4(fp)
    46c8:	10000326 	beq	r2,zero,46d8 <xTaskNotifyFromISR+0x1a4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    46cc:	e0bfff17 	ldw	r2,-4(fp)
    46d0:	00c00044 	movi	r3,1
    46d4:	10c00015 	stw	r3,0(r2)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    46d8:	e0bff817 	ldw	r2,-32(fp)
	}
    46dc:	e037883a 	mov	sp,fp
    46e0:	dfc00117 	ldw	ra,4(sp)
    46e4:	df000017 	ldw	fp,0(sp)
    46e8:	dec00204 	addi	sp,sp,8
    46ec:	f800283a 	ret

000046f0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    46f0:	defff904 	addi	sp,sp,-28
    46f4:	dfc00615 	stw	ra,24(sp)
    46f8:	df000515 	stw	fp,20(sp)
    46fc:	df000504 	addi	fp,sp,20
    4700:	e13ffe15 	stw	r4,-8(fp)
    4704:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4708:	e0bffe17 	ldw	r2,-8(fp)
    470c:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4710:	e03ffc15 	stw	zero,-16(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4714:	e0bffb17 	ldw	r2,-20(fp)
    4718:	10801317 	ldw	r2,76(r2)
    471c:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->eNotifyState = eNotified;
    4720:	e0bffb17 	ldw	r2,-20(fp)
    4724:	00c00084 	movi	r3,2
    4728:	10c01315 	stw	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    472c:	e0bffb17 	ldw	r2,-20(fp)
    4730:	10801217 	ldw	r2,72(r2)
    4734:	10c00044 	addi	r3,r2,1
    4738:	e0bffb17 	ldw	r2,-20(fp)
    473c:	10c01215 	stw	r3,72(r2)

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    4740:	e0bffd17 	ldw	r2,-12(fp)
    4744:	10800058 	cmpnei	r2,r2,1
    4748:	1000291e 	bne	r2,zero,47f0 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    474c:	d0a02e97 	ldw	r2,-32582(gp)
    4750:	1000171e 	bne	r2,zero,47b0 <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4754:	e0bffb17 	ldw	r2,-20(fp)
    4758:	10800104 	addi	r2,r2,4
    475c:	1009883a 	mov	r4,r2
    4760:	00015fc0 	call	15fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4764:	e0bffb17 	ldw	r2,-20(fp)
    4768:	10800b17 	ldw	r2,44(r2)
    476c:	d0e02897 	ldw	r3,-32606(gp)
    4770:	1880032e 	bgeu	r3,r2,4780 <vTaskNotifyGiveFromISR+0x90>
    4774:	e0bffb17 	ldw	r2,-20(fp)
    4778:	10800b17 	ldw	r2,44(r2)
    477c:	d0a02895 	stw	r2,-32606(gp)
    4780:	e0bffb17 	ldw	r2,-20(fp)
    4784:	10800b17 	ldw	r2,44(r2)
    4788:	10c00524 	muli	r3,r2,20
    478c:	00820234 	movhi	r2,2056
    4790:	10bf7f04 	addi	r2,r2,-516
    4794:	1887883a 	add	r3,r3,r2
    4798:	e0bffb17 	ldw	r2,-20(fp)
    479c:	10800104 	addi	r2,r2,4
    47a0:	100b883a 	mov	r5,r2
    47a4:	1809883a 	mov	r4,r3
    47a8:	00014980 	call	1498 <vListInsertEnd>
    47ac:	00000606 	br	47c8 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    47b0:	e0bffb17 	ldw	r2,-20(fp)
    47b4:	10800604 	addi	r2,r2,24
    47b8:	100b883a 	mov	r5,r2
    47bc:	01020234 	movhi	r4,2056
    47c0:	213fc504 	addi	r4,r4,-236
    47c4:	00014980 	call	1498 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    47c8:	e0bffb17 	ldw	r2,-20(fp)
    47cc:	10800b17 	ldw	r2,44(r2)
    47d0:	d0e02297 	ldw	r3,-32630(gp)
    47d4:	18c00b17 	ldw	r3,44(r3)
    47d8:	1880052e 	bgeu	r3,r2,47f0 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    47dc:	e0bfff17 	ldw	r2,-4(fp)
    47e0:	10000326 	beq	r2,zero,47f0 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    47e4:	e0bfff17 	ldw	r2,-4(fp)
    47e8:	00c00044 	movi	r3,1
    47ec:	10c00015 	stw	r3,0(r2)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    47f0:	0001883a 	nop
    47f4:	e037883a 	mov	sp,fp
    47f8:	dfc00117 	ldw	ra,4(sp)
    47fc:	df000017 	ldw	fp,0(sp)
    4800:	dec00204 	addi	sp,sp,8
    4804:	f800283a 	ret

00004808 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    4808:	defff904 	addi	sp,sp,-28
    480c:	dfc00615 	stw	ra,24(sp)
    4810:	df000515 	stw	fp,20(sp)
    4814:	df000504 	addi	fp,sp,20
BaseType_t xReturn = pdFAIL;
    4818:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    481c:	00050080 	call	5008 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    4820:	d0a03197 	ldw	r2,-32570(gp)
    4824:	10000d26 	beq	r2,zero,485c <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    4828:	d8000315 	stw	zero,12(sp)
    482c:	d8000215 	stw	zero,8(sp)
    4830:	d8000115 	stw	zero,4(sp)
    4834:	008000c4 	movi	r2,3
    4838:	d8800015 	stw	r2,0(sp)
    483c:	000f883a 	mov	r7,zero
    4840:	01820004 	movi	r6,2048
    4844:	01420034 	movhi	r5,2048
    4848:	29401404 	addi	r5,r5,80
    484c:	01000034 	movhi	r4,0
    4850:	2112b904 	addi	r4,r4,19172
    4854:	0002b780 	call	2b78 <xTaskGenericCreate>
    4858:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    485c:	e0bfff17 	ldw	r2,-4(fp)
}
    4860:	e037883a 	mov	sp,fp
    4864:	dfc00117 	ldw	ra,4(sp)
    4868:	df000017 	ldw	fp,0(sp)
    486c:	dec00204 	addi	sp,sp,8
    4870:	f800283a 	ret

00004874 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    4874:	defff904 	addi	sp,sp,-28
    4878:	dfc00615 	stw	ra,24(sp)
    487c:	df000515 	stw	fp,20(sp)
    4880:	df000504 	addi	fp,sp,20
    4884:	e13ffc15 	stw	r4,-16(fp)
    4888:	e17ffd15 	stw	r5,-12(fp)
    488c:	e1bffe15 	stw	r6,-8(fp)
    4890:	e1ffff15 	stw	r7,-4(fp)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    4894:	e0bffd17 	ldw	r2,-12(fp)
    4898:	1000021e 	bne	r2,zero,48a4 <xTimerCreate+0x30>
	{
		pxNewTimer = NULL;
    489c:	e03ffb15 	stw	zero,-20(fp)
    48a0:	00001906 	br	4908 <xTimerCreate+0x94>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    48a4:	01000a04 	movi	r4,40
    48a8:	0000fd00 	call	fd0 <pvPortMalloc>
    48ac:	e0bffb15 	stw	r2,-20(fp)
		if( pxNewTimer != NULL )
    48b0:	e0bffb17 	ldw	r2,-20(fp)
    48b4:	10001426 	beq	r2,zero,4908 <xTimerCreate+0x94>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    48b8:	00050080 	call	5008 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    48bc:	e0bffb17 	ldw	r2,-20(fp)
    48c0:	e0fffc17 	ldw	r3,-16(fp)
    48c4:	10c00015 	stw	r3,0(r2)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    48c8:	e0bffb17 	ldw	r2,-20(fp)
    48cc:	e0fffd17 	ldw	r3,-12(fp)
    48d0:	10c00615 	stw	r3,24(r2)
			pxNewTimer->uxAutoReload = uxAutoReload;
    48d4:	e0bffb17 	ldw	r2,-20(fp)
    48d8:	e0fffe17 	ldw	r3,-8(fp)
    48dc:	10c00715 	stw	r3,28(r2)
			pxNewTimer->pvTimerID = pvTimerID;
    48e0:	e0bffb17 	ldw	r2,-20(fp)
    48e4:	e0ffff17 	ldw	r3,-4(fp)
    48e8:	10c00815 	stw	r3,32(r2)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    48ec:	e0bffb17 	ldw	r2,-20(fp)
    48f0:	e0c00217 	ldw	r3,8(fp)
    48f4:	10c00915 	stw	r3,36(r2)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    48f8:	e0bffb17 	ldw	r2,-20(fp)
    48fc:	10800104 	addi	r2,r2,4
    4900:	1009883a 	mov	r4,r2
    4904:	000146c0 	call	146c <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
    4908:	e0bffb17 	ldw	r2,-20(fp)
}
    490c:	e037883a 	mov	sp,fp
    4910:	dfc00117 	ldw	ra,4(sp)
    4914:	df000017 	ldw	fp,0(sp)
    4918:	dec00204 	addi	sp,sp,8
    491c:	f800283a 	ret

00004920 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    4920:	defff604 	addi	sp,sp,-40
    4924:	dfc00915 	stw	ra,36(sp)
    4928:	df000815 	stw	fp,32(sp)
    492c:	df000804 	addi	fp,sp,32
    4930:	e13ffc15 	stw	r4,-16(fp)
    4934:	e17ffd15 	stw	r5,-12(fp)
    4938:	e1bffe15 	stw	r6,-8(fp)
    493c:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
    4940:	e03ff815 	stw	zero,-32(fp)
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    4944:	d0a03197 	ldw	r2,-32570(gp)
    4948:	10002626 	beq	r2,zero,49e4 <xTimerGenericCommand+0xc4>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    494c:	e0bffd17 	ldw	r2,-12(fp)
    4950:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4954:	e0bffe17 	ldw	r2,-8(fp)
    4958:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    495c:	e0bffc17 	ldw	r2,-16(fp)
    4960:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4964:	e0bffd17 	ldw	r2,-12(fp)
    4968:	10800188 	cmpgei	r2,r2,6
    496c:	1000151e 	bne	r2,zero,49c4 <xTimerGenericCommand+0xa4>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4970:	0003e380 	call	3e38 <xTaskGetSchedulerState>
    4974:	10800098 	cmpnei	r2,r2,2
    4978:	1000091e 	bne	r2,zero,49a0 <xTimerGenericCommand+0x80>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    497c:	d0a03197 	ldw	r2,-32570(gp)
    4980:	e0fff904 	addi	r3,fp,-28
    4984:	000f883a 	mov	r7,zero
    4988:	e1800217 	ldw	r6,8(fp)
    498c:	180b883a 	mov	r5,r3
    4990:	1009883a 	mov	r4,r2
    4994:	0001edc0 	call	1edc <xQueueGenericSend>
    4998:	e0bff815 	stw	r2,-32(fp)
    499c:	00001106 	br	49e4 <xTimerGenericCommand+0xc4>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    49a0:	d0a03197 	ldw	r2,-32570(gp)
    49a4:	e0fff904 	addi	r3,fp,-28
    49a8:	000f883a 	mov	r7,zero
    49ac:	000d883a 	mov	r6,zero
    49b0:	180b883a 	mov	r5,r3
    49b4:	1009883a 	mov	r4,r2
    49b8:	0001edc0 	call	1edc <xQueueGenericSend>
    49bc:	e0bff815 	stw	r2,-32(fp)
    49c0:	00000806 	br	49e4 <xTimerGenericCommand+0xc4>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    49c4:	d0a03197 	ldw	r2,-32570(gp)
    49c8:	e0fff904 	addi	r3,fp,-28
    49cc:	000f883a 	mov	r7,zero
    49d0:	e1bfff17 	ldw	r6,-4(fp)
    49d4:	180b883a 	mov	r5,r3
    49d8:	1009883a 	mov	r4,r2
    49dc:	000207c0 	call	207c <xQueueGenericSendFromISR>
    49e0:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    49e4:	e0bff817 	ldw	r2,-32(fp)
}
    49e8:	e037883a 	mov	sp,fp
    49ec:	dfc00117 	ldw	ra,4(sp)
    49f0:	df000017 	ldw	fp,0(sp)
    49f4:	dec00204 	addi	sp,sp,8
    49f8:	f800283a 	ret

000049fc <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
    49fc:	defffd04 	addi	sp,sp,-12
    4a00:	df000215 	stw	fp,8(sp)
    4a04:	df000204 	addi	fp,sp,8
    4a08:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    4a0c:	e0bfff17 	ldw	r2,-4(fp)
    4a10:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pcTimerName;
    4a14:	e0bffe17 	ldw	r2,-8(fp)
    4a18:	10800017 	ldw	r2,0(r2)
}
    4a1c:	e037883a 	mov	sp,fp
    4a20:	df000017 	ldw	fp,0(sp)
    4a24:	dec00104 	addi	sp,sp,4
    4a28:	f800283a 	ret

00004a2c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    4a2c:	defff904 	addi	sp,sp,-28
    4a30:	dfc00615 	stw	ra,24(sp)
    4a34:	df000515 	stw	fp,20(sp)
    4a38:	df000504 	addi	fp,sp,20
    4a3c:	e13ffe15 	stw	r4,-8(fp)
    4a40:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4a44:	d0a02f97 	ldw	r2,-32578(gp)
    4a48:	10800317 	ldw	r2,12(r2)
    4a4c:	10800317 	ldw	r2,12(r2)
    4a50:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4a54:	e0bffc17 	ldw	r2,-16(fp)
    4a58:	10800104 	addi	r2,r2,4
    4a5c:	1009883a 	mov	r4,r2
    4a60:	00015fc0 	call	15fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4a64:	e0bffc17 	ldw	r2,-16(fp)
    4a68:	10800717 	ldw	r2,28(r2)
    4a6c:	10800058 	cmpnei	r2,r2,1
    4a70:	1000121e 	bne	r2,zero,4abc <prvProcessExpiredTimer+0x90>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    4a74:	e0bffc17 	ldw	r2,-16(fp)
    4a78:	10c00617 	ldw	r3,24(r2)
    4a7c:	e0bffe17 	ldw	r2,-8(fp)
    4a80:	1885883a 	add	r2,r3,r2
    4a84:	e1fffe17 	ldw	r7,-8(fp)
    4a88:	e1bfff17 	ldw	r6,-4(fp)
    4a8c:	100b883a 	mov	r5,r2
    4a90:	e13ffc17 	ldw	r4,-16(fp)
    4a94:	0004c840 	call	4c84 <prvInsertTimerInActiveList>
    4a98:	10800058 	cmpnei	r2,r2,1
    4a9c:	1000071e 	bne	r2,zero,4abc <prvProcessExpiredTimer+0x90>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4aa0:	d8000015 	stw	zero,0(sp)
    4aa4:	000f883a 	mov	r7,zero
    4aa8:	e1bffe17 	ldw	r6,-8(fp)
    4aac:	000b883a 	mov	r5,zero
    4ab0:	e13ffc17 	ldw	r4,-16(fp)
    4ab4:	00049200 	call	4920 <xTimerGenericCommand>
    4ab8:	e0bffd15 	stw	r2,-12(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4abc:	e0bffc17 	ldw	r2,-16(fp)
    4ac0:	10800917 	ldw	r2,36(r2)
    4ac4:	e13ffc17 	ldw	r4,-16(fp)
    4ac8:	103ee83a 	callr	r2
}
    4acc:	0001883a 	nop
    4ad0:	e037883a 	mov	sp,fp
    4ad4:	dfc00117 	ldw	ra,4(sp)
    4ad8:	df000017 	ldw	fp,0(sp)
    4adc:	dec00204 	addi	sp,sp,8
    4ae0:	f800283a 	ret

00004ae4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4ae4:	defffb04 	addi	sp,sp,-20
    4ae8:	dfc00415 	stw	ra,16(sp)
    4aec:	df000315 	stw	fp,12(sp)
    4af0:	df000304 	addi	fp,sp,12
    4af4:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    4af8:	e0bffe04 	addi	r2,fp,-8
    4afc:	1009883a 	mov	r4,r2
    4b00:	0004bc00 	call	4bc0 <prvGetNextExpireTime>
    4b04:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    4b08:	e0bffe17 	ldw	r2,-8(fp)
    4b0c:	100b883a 	mov	r5,r2
    4b10:	e13ffd17 	ldw	r4,-12(fp)
    4b14:	0004b200 	call	4b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    4b18:	0004d600 	call	4d60 <prvProcessReceivedCommands>
	}
    4b1c:	003ff606 	br	4af8 <__alt_data_end+0xf0004af8>

00004b20 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    4b20:	defffa04 	addi	sp,sp,-24
    4b24:	dfc00515 	stw	ra,20(sp)
    4b28:	df000415 	stw	fp,16(sp)
    4b2c:	df000404 	addi	fp,sp,16
    4b30:	e13ffe15 	stw	r4,-8(fp)
    4b34:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    4b38:	0002f6c0 	call	2f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4b3c:	e0bffd04 	addi	r2,fp,-12
    4b40:	1009883a 	mov	r4,r2
    4b44:	0004c200 	call	4c20 <prvSampleTimeNow>
    4b48:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
    4b4c:	e0bffd17 	ldw	r2,-12(fp)
    4b50:	1000141e 	bne	r2,zero,4ba4 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4b54:	e0bfff17 	ldw	r2,-4(fp)
    4b58:	1000081e 	bne	r2,zero,4b7c <prvProcessTimerOrBlockTask+0x5c>
    4b5c:	e0bffe17 	ldw	r2,-8(fp)
    4b60:	e0fffc17 	ldw	r3,-16(fp)
    4b64:	18800536 	bltu	r3,r2,4b7c <prvProcessTimerOrBlockTask+0x5c>
			{
				( void ) xTaskResumeAll();
    4b68:	0002f980 	call	2f98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4b6c:	e17ffc17 	ldw	r5,-16(fp)
    4b70:	e13ffe17 	ldw	r4,-8(fp)
    4b74:	0004a2c0 	call	4a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    4b78:	00000b06 	br	4ba8 <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    4b7c:	d1203197 	ldw	r4,-32570(gp)
    4b80:	e0fffe17 	ldw	r3,-8(fp)
    4b84:	e0bffc17 	ldw	r2,-16(fp)
    4b88:	1885c83a 	sub	r2,r3,r2
    4b8c:	100b883a 	mov	r5,r2
    4b90:	0002ae00 	call	2ae0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    4b94:	0002f980 	call	2f98 <xTaskResumeAll>
    4b98:	1000031e 	bne	r2,zero,4ba8 <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    4b9c:	003b683a 	trap	0
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    4ba0:	00000106 	br	4ba8 <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    4ba4:	0002f980 	call	2f98 <xTaskResumeAll>
		}
	}
}
    4ba8:	0001883a 	nop
    4bac:	e037883a 	mov	sp,fp
    4bb0:	dfc00117 	ldw	ra,4(sp)
    4bb4:	df000017 	ldw	fp,0(sp)
    4bb8:	dec00204 	addi	sp,sp,8
    4bbc:	f800283a 	ret

00004bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    4bc0:	defffd04 	addi	sp,sp,-12
    4bc4:	df000215 	stw	fp,8(sp)
    4bc8:	df000204 	addi	fp,sp,8
    4bcc:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4bd0:	d0a02f97 	ldw	r2,-32578(gp)
    4bd4:	10800017 	ldw	r2,0(r2)
    4bd8:	1005003a 	cmpeq	r2,r2,zero
    4bdc:	10c03fcc 	andi	r3,r2,255
    4be0:	e0bfff17 	ldw	r2,-4(fp)
    4be4:	10c00015 	stw	r3,0(r2)
	if( *pxListWasEmpty == pdFALSE )
    4be8:	e0bfff17 	ldw	r2,-4(fp)
    4bec:	10800017 	ldw	r2,0(r2)
    4bf0:	1000051e 	bne	r2,zero,4c08 <prvGetNextExpireTime+0x48>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4bf4:	d0a02f97 	ldw	r2,-32578(gp)
    4bf8:	10800317 	ldw	r2,12(r2)
    4bfc:	10800017 	ldw	r2,0(r2)
    4c00:	e0bffe15 	stw	r2,-8(fp)
    4c04:	00000106 	br	4c0c <prvGetNextExpireTime+0x4c>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    4c08:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
    4c0c:	e0bffe17 	ldw	r2,-8(fp)
}
    4c10:	e037883a 	mov	sp,fp
    4c14:	df000017 	ldw	fp,0(sp)
    4c18:	dec00104 	addi	sp,sp,4
    4c1c:	f800283a 	ret

00004c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4c20:	defffc04 	addi	sp,sp,-16
    4c24:	dfc00315 	stw	ra,12(sp)
    4c28:	df000215 	stw	fp,8(sp)
    4c2c:	df000204 	addi	fp,sp,8
    4c30:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    4c34:	00030dc0 	call	30dc <xTaskGetTickCount>
    4c38:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
    4c3c:	d0a03297 	ldw	r2,-32566(gp)
    4c40:	e0fffe17 	ldw	r3,-8(fp)
    4c44:	1880052e 	bgeu	r3,r2,4c5c <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
    4c48:	0004ef80 	call	4ef8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    4c4c:	e0bfff17 	ldw	r2,-4(fp)
    4c50:	00c00044 	movi	r3,1
    4c54:	10c00015 	stw	r3,0(r2)
    4c58:	00000206 	br	4c64 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4c5c:	e0bfff17 	ldw	r2,-4(fp)
    4c60:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
    4c64:	e0bffe17 	ldw	r2,-8(fp)
    4c68:	d0a03295 	stw	r2,-32566(gp)

	return xTimeNow;
    4c6c:	e0bffe17 	ldw	r2,-8(fp)
}
    4c70:	e037883a 	mov	sp,fp
    4c74:	dfc00117 	ldw	ra,4(sp)
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00204 	addi	sp,sp,8
    4c80:	f800283a 	ret

00004c84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4c84:	defff904 	addi	sp,sp,-28
    4c88:	dfc00615 	stw	ra,24(sp)
    4c8c:	df000515 	stw	fp,20(sp)
    4c90:	df000504 	addi	fp,sp,20
    4c94:	e13ffc15 	stw	r4,-16(fp)
    4c98:	e17ffd15 	stw	r5,-12(fp)
    4c9c:	e1bffe15 	stw	r6,-8(fp)
    4ca0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
    4ca4:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4ca8:	e0bffc17 	ldw	r2,-16(fp)
    4cac:	e0fffd17 	ldw	r3,-12(fp)
    4cb0:	10c00115 	stw	r3,4(r2)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4cb4:	e0bffc17 	ldw	r2,-16(fp)
    4cb8:	e0fffc17 	ldw	r3,-16(fp)
    4cbc:	10c00415 	stw	r3,16(r2)

	if( xNextExpiryTime <= xTimeNow )
    4cc0:	e0bffd17 	ldw	r2,-12(fp)
    4cc4:	e0fffe17 	ldw	r3,-8(fp)
    4cc8:	18801036 	bltu	r3,r2,4d0c <prvInsertTimerInActiveList+0x88>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    4ccc:	e0fffe17 	ldw	r3,-8(fp)
    4cd0:	e0bfff17 	ldw	r2,-4(fp)
    4cd4:	1887c83a 	sub	r3,r3,r2
    4cd8:	e0bffc17 	ldw	r2,-16(fp)
    4cdc:	10800617 	ldw	r2,24(r2)
    4ce0:	18800336 	bltu	r3,r2,4cf0 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4ce4:	00800044 	movi	r2,1
    4ce8:	e0bffb15 	stw	r2,-20(fp)
    4cec:	00001606 	br	4d48 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4cf0:	d0e03097 	ldw	r3,-32574(gp)
    4cf4:	e0bffc17 	ldw	r2,-16(fp)
    4cf8:	10800104 	addi	r2,r2,4
    4cfc:	100b883a 	mov	r5,r2
    4d00:	1809883a 	mov	r4,r3
    4d04:	00015240 	call	1524 <vListInsert>
    4d08:	00000f06 	br	4d48 <prvInsertTimerInActiveList+0xc4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d0c:	e0fffe17 	ldw	r3,-8(fp)
    4d10:	e0bfff17 	ldw	r2,-4(fp)
    4d14:	1880062e 	bgeu	r3,r2,4d30 <prvInsertTimerInActiveList+0xac>
    4d18:	e0fffd17 	ldw	r3,-12(fp)
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	18800336 	bltu	r3,r2,4d30 <prvInsertTimerInActiveList+0xac>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4d24:	00800044 	movi	r2,1
    4d28:	e0bffb15 	stw	r2,-20(fp)
    4d2c:	00000606 	br	4d48 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4d30:	d0e02f97 	ldw	r3,-32578(gp)
    4d34:	e0bffc17 	ldw	r2,-16(fp)
    4d38:	10800104 	addi	r2,r2,4
    4d3c:	100b883a 	mov	r5,r2
    4d40:	1809883a 	mov	r4,r3
    4d44:	00015240 	call	1524 <vListInsert>
		}
	}

	return xProcessTimerNow;
    4d48:	e0bffb17 	ldw	r2,-20(fp)
}
    4d4c:	e037883a 	mov	sp,fp
    4d50:	dfc00117 	ldw	ra,4(sp)
    4d54:	df000017 	ldw	fp,0(sp)
    4d58:	dec00204 	addi	sp,sp,8
    4d5c:	f800283a 	ret

00004d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    4d60:	defff604 	addi	sp,sp,-40
    4d64:	dfc00915 	stw	ra,36(sp)
    4d68:	df000815 	stw	fp,32(sp)
    4d6c:	df000804 	addi	fp,sp,32
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4d70:	00005306 	br	4ec0 <prvProcessReceivedCommands+0x160>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	10005116 	blt	r2,zero,4ec0 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4d7c:	e0bffe17 	ldw	r2,-8(fp)
    4d80:	e0bff915 	stw	r2,-28(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    4d84:	e0bff917 	ldw	r2,-28(fp)
    4d88:	10800517 	ldw	r2,20(r2)
    4d8c:	10000426 	beq	r2,zero,4da0 <prvProcessReceivedCommands+0x40>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4d90:	e0bff917 	ldw	r2,-28(fp)
    4d94:	10800104 	addi	r2,r2,4
    4d98:	1009883a 	mov	r4,r2
    4d9c:	00015fc0 	call	15fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4da0:	e0bfff04 	addi	r2,fp,-4
    4da4:	1009883a 	mov	r4,r2
    4da8:	0004c200 	call	4c20 <prvSampleTimeNow>
    4dac:	e0bffa15 	stw	r2,-24(fp)

			switch( xMessage.xMessageID )
    4db0:	e0bffc17 	ldw	r2,-16(fp)
    4db4:	10c002a8 	cmpgeui	r3,r2,10
    4db8:	1800401e 	bne	r3,zero,4ebc <prvProcessReceivedCommands+0x15c>
    4dbc:	100690ba 	slli	r3,r2,2
    4dc0:	00800034 	movhi	r2,0
    4dc4:	10937504 	addi	r2,r2,19924
    4dc8:	1885883a 	add	r2,r3,r2
    4dcc:	10800017 	ldw	r2,0(r2)
    4dd0:	1000683a 	jmp	r2
    4dd4:	00004dfc 	xorhi	zero,zero,311
    4dd8:	00004dfc 	xorhi	zero,zero,311
    4ddc:	00004dfc 	xorhi	zero,zero,311
    4de0:	00004ec0 	call	4ec <prvCheckPendingReadyList+0x54>
    4de4:	00004e7c 	xorhi	zero,zero,313
    4de8:	00004eb0 	cmpltui	zero,zero,314
    4dec:	00004dfc 	xorhi	zero,zero,311
    4df0:	00004dfc 	xorhi	zero,zero,311
    4df4:	00004ec0 	call	4ec <prvCheckPendingReadyList+0x54>
    4df8:	00004e7c 	xorhi	zero,zero,313
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    4dfc:	e0fffd17 	ldw	r3,-12(fp)
    4e00:	e0bff917 	ldw	r2,-28(fp)
    4e04:	10800617 	ldw	r2,24(r2)
    4e08:	1885883a 	add	r2,r3,r2
    4e0c:	e0fffd17 	ldw	r3,-12(fp)
    4e10:	180f883a 	mov	r7,r3
    4e14:	e1bffa17 	ldw	r6,-24(fp)
    4e18:	100b883a 	mov	r5,r2
    4e1c:	e13ff917 	ldw	r4,-28(fp)
    4e20:	0004c840 	call	4c84 <prvInsertTimerInActiveList>
    4e24:	10800058 	cmpnei	r2,r2,1
    4e28:	1000251e 	bne	r2,zero,4ec0 <prvProcessReceivedCommands+0x160>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4e2c:	e0bff917 	ldw	r2,-28(fp)
    4e30:	10800917 	ldw	r2,36(r2)
    4e34:	e13ff917 	ldw	r4,-28(fp)
    4e38:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4e3c:	e0bff917 	ldw	r2,-28(fp)
    4e40:	10800717 	ldw	r2,28(r2)
    4e44:	10800058 	cmpnei	r2,r2,1
    4e48:	10001d1e 	bne	r2,zero,4ec0 <prvProcessReceivedCommands+0x160>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4e4c:	e0fffd17 	ldw	r3,-12(fp)
    4e50:	e0bff917 	ldw	r2,-28(fp)
    4e54:	10800617 	ldw	r2,24(r2)
    4e58:	1885883a 	add	r2,r3,r2
    4e5c:	d8000015 	stw	zero,0(sp)
    4e60:	000f883a 	mov	r7,zero
    4e64:	100d883a 	mov	r6,r2
    4e68:	000b883a 	mov	r5,zero
    4e6c:	e13ff917 	ldw	r4,-28(fp)
    4e70:	00049200 	call	4920 <xTimerGenericCommand>
    4e74:	e0bffb15 	stw	r2,-20(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    4e78:	00001106 	br	4ec0 <prvProcessReceivedCommands+0x160>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4e7c:	e0fffd17 	ldw	r3,-12(fp)
    4e80:	e0bff917 	ldw	r2,-28(fp)
    4e84:	10c00615 	stw	r3,24(r2)
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4e88:	e0bff917 	ldw	r2,-28(fp)
    4e8c:	10c00617 	ldw	r3,24(r2)
    4e90:	e0bffa17 	ldw	r2,-24(fp)
    4e94:	1885883a 	add	r2,r3,r2
    4e98:	e1fffa17 	ldw	r7,-24(fp)
    4e9c:	e1bffa17 	ldw	r6,-24(fp)
    4ea0:	100b883a 	mov	r5,r2
    4ea4:	e13ff917 	ldw	r4,-28(fp)
    4ea8:	0004c840 	call	4c84 <prvInsertTimerInActiveList>
					break;
    4eac:	00000406 	br	4ec0 <prvProcessReceivedCommands+0x160>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4eb0:	e13ff917 	ldw	r4,-28(fp)
    4eb4:	00011500 	call	1150 <vPortFree>
					break;
    4eb8:	00000106 	br	4ec0 <prvProcessReceivedCommands+0x160>

				default	:
					/* Don't expect to get here. */
					break;
    4ebc:	0001883a 	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4ec0:	d0a03197 	ldw	r2,-32570(gp)
    4ec4:	e0fffc04 	addi	r3,fp,-16
    4ec8:	000f883a 	mov	r7,zero
    4ecc:	000d883a 	mov	r6,zero
    4ed0:	180b883a 	mov	r5,r3
    4ed4:	1009883a 	mov	r4,r2
    4ed8:	000222c0 	call	222c <xQueueGenericReceive>
    4edc:	103fa51e 	bne	r2,zero,4d74 <__alt_data_end+0xf0004d74>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    4ee0:	0001883a 	nop
    4ee4:	e037883a 	mov	sp,fp
    4ee8:	dfc00117 	ldw	ra,4(sp)
    4eec:	df000017 	ldw	fp,0(sp)
    4ef0:	dec00204 	addi	sp,sp,8
    4ef4:	f800283a 	ret

00004ef8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4ef8:	defff804 	addi	sp,sp,-32
    4efc:	dfc00715 	stw	ra,28(sp)
    4f00:	df000615 	stw	fp,24(sp)
    4f04:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4f08:	00003006 	br	4fcc <prvSwitchTimerLists+0xd4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f0c:	d0a02f97 	ldw	r2,-32578(gp)
    4f10:	10800317 	ldw	r2,12(r2)
    4f14:	10800017 	ldw	r2,0(r2)
    4f18:	e0bffb15 	stw	r2,-20(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f1c:	d0a02f97 	ldw	r2,-32578(gp)
    4f20:	10800317 	ldw	r2,12(r2)
    4f24:	10800317 	ldw	r2,12(r2)
    4f28:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4f2c:	e0bffc17 	ldw	r2,-16(fp)
    4f30:	10800104 	addi	r2,r2,4
    4f34:	1009883a 	mov	r4,r2
    4f38:	00015fc0 	call	15fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4f3c:	e0bffc17 	ldw	r2,-16(fp)
    4f40:	10800917 	ldw	r2,36(r2)
    4f44:	e13ffc17 	ldw	r4,-16(fp)
    4f48:	103ee83a 	callr	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4f4c:	e0bffc17 	ldw	r2,-16(fp)
    4f50:	10800717 	ldw	r2,28(r2)
    4f54:	10800058 	cmpnei	r2,r2,1
    4f58:	10001c1e 	bne	r2,zero,4fcc <prvSwitchTimerLists+0xd4>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4f5c:	e0bffc17 	ldw	r2,-16(fp)
    4f60:	10c00617 	ldw	r3,24(r2)
    4f64:	e0bffb17 	ldw	r2,-20(fp)
    4f68:	1885883a 	add	r2,r3,r2
    4f6c:	e0bffd15 	stw	r2,-12(fp)
			if( xReloadTime > xNextExpireTime )
    4f70:	e0bffd17 	ldw	r2,-12(fp)
    4f74:	e0fffb17 	ldw	r3,-20(fp)
    4f78:	18800d2e 	bgeu	r3,r2,4fb0 <prvSwitchTimerLists+0xb8>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4f7c:	e0bffc17 	ldw	r2,-16(fp)
    4f80:	e0fffd17 	ldw	r3,-12(fp)
    4f84:	10c00115 	stw	r3,4(r2)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	e0fffc17 	ldw	r3,-16(fp)
    4f90:	10c00415 	stw	r3,16(r2)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4f94:	d0e02f97 	ldw	r3,-32578(gp)
    4f98:	e0bffc17 	ldw	r2,-16(fp)
    4f9c:	10800104 	addi	r2,r2,4
    4fa0:	100b883a 	mov	r5,r2
    4fa4:	1809883a 	mov	r4,r3
    4fa8:	00015240 	call	1524 <vListInsert>
    4fac:	00000706 	br	4fcc <prvSwitchTimerLists+0xd4>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4fb0:	d8000015 	stw	zero,0(sp)
    4fb4:	000f883a 	mov	r7,zero
    4fb8:	e1bffb17 	ldw	r6,-20(fp)
    4fbc:	000b883a 	mov	r5,zero
    4fc0:	e13ffc17 	ldw	r4,-16(fp)
    4fc4:	00049200 	call	4920 <xTimerGenericCommand>
    4fc8:	e0bffe15 	stw	r2,-8(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4fcc:	d0a02f97 	ldw	r2,-32578(gp)
    4fd0:	10800017 	ldw	r2,0(r2)
    4fd4:	103fcd1e 	bne	r2,zero,4f0c <__alt_data_end+0xf0004f0c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    4fd8:	d0a02f97 	ldw	r2,-32578(gp)
    4fdc:	e0bfff15 	stw	r2,-4(fp)
	pxCurrentTimerList = pxOverflowTimerList;
    4fe0:	d0a03097 	ldw	r2,-32574(gp)
    4fe4:	d0a02f95 	stw	r2,-32578(gp)
	pxOverflowTimerList = pxTemp;
    4fe8:	e0bfff17 	ldw	r2,-4(fp)
    4fec:	d0a03095 	stw	r2,-32574(gp)
}
    4ff0:	0001883a 	nop
    4ff4:	e037883a 	mov	sp,fp
    4ff8:	dfc00117 	ldw	ra,4(sp)
    4ffc:	df000017 	ldw	fp,0(sp)
    5000:	dec00204 	addi	sp,sp,8
    5004:	f800283a 	ret

00005008 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5008:	defffe04 	addi	sp,sp,-8
    500c:	dfc00115 	stw	ra,4(sp)
    5010:	df000015 	stw	fp,0(sp)
    5014:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5018:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
    501c:	d0a03197 	ldw	r2,-32570(gp)
    5020:	1000111e 	bne	r2,zero,5068 <prvCheckForValidListAndQueue+0x60>
		{
			vListInitialise( &xActiveTimerList1 );
    5024:	01020234 	movhi	r4,2056
    5028:	213fcf04 	addi	r4,r4,-196
    502c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    5030:	01020234 	movhi	r4,2056
    5034:	213fd404 	addi	r4,r4,-176
    5038:	00014040 	call	1404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    503c:	00820234 	movhi	r2,2056
    5040:	10bfcf04 	addi	r2,r2,-196
    5044:	d0a02f95 	stw	r2,-32578(gp)
			pxOverflowTimerList = &xActiveTimerList2;
    5048:	00820234 	movhi	r2,2056
    504c:	10bfd404 	addi	r2,r2,-176
    5050:	d0a03095 	stw	r2,-32574(gp)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5054:	000d883a 	mov	r6,zero
    5058:	01400304 	movi	r5,12
    505c:	01000284 	movi	r4,10
    5060:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5064:	d0a03195 	stw	r2,-32570(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5068:	00040fc0 	call	40fc <vTaskExitCritical>
}
    506c:	0001883a 	nop
    5070:	e037883a 	mov	sp,fp
    5074:	dfc00117 	ldw	ra,4(sp)
    5078:	df000017 	ldw	fp,0(sp)
    507c:	dec00204 	addi	sp,sp,8
    5080:	f800283a 	ret

00005084 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    5084:	defffb04 	addi	sp,sp,-20
    5088:	dfc00415 	stw	ra,16(sp)
    508c:	df000315 	stw	fp,12(sp)
    5090:	df000304 	addi	fp,sp,12
    5094:	e13fff15 	stw	r4,-4(fp)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    5098:	e0bfff17 	ldw	r2,-4(fp)
    509c:	e0bffd15 	stw	r2,-12(fp)

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    50a0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    50a4:	e0bffd17 	ldw	r2,-12(fp)
    50a8:	10800517 	ldw	r2,20(r2)
    50ac:	1004c03a 	cmpne	r2,r2,zero
    50b0:	10803fcc 	andi	r2,r2,255
    50b4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    50b8:	00040fc0 	call	40fc <vTaskExitCritical>

	return xTimerIsInActiveList;
    50bc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
    50c0:	e037883a 	mov	sp,fp
    50c4:	dfc00117 	ldw	ra,4(sp)
    50c8:	df000017 	ldw	fp,0(sp)
    50cc:	dec00204 	addi	sp,sp,8
    50d0:	f800283a 	ret

000050d4 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
    50d4:	defffd04 	addi	sp,sp,-12
    50d8:	df000215 	stw	fp,8(sp)
    50dc:	df000204 	addi	fp,sp,8
    50e0:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
    50e4:	e0bfff17 	ldw	r2,-4(fp)
    50e8:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pvTimerID;
    50ec:	e0bffe17 	ldw	r2,-8(fp)
    50f0:	10800817 	ldw	r2,32(r2)
}
    50f4:	e037883a 	mov	sp,fp
    50f8:	df000017 	ldw	fp,0(sp)
    50fc:	dec00104 	addi	sp,sp,4
    5100:	f800283a 	ret

00005104 <MaintenanceStateButton>:
static void Load_LED_Ctrl_Task(void *pvParams);
static void Switch_Control_Task(void *pvParams);
unsigned char byte;


void MaintenanceStateButton () {
    5104:	deffff04 	addi	sp,sp,-4
    5108:	df000015 	stw	fp,0(sp)
    510c:	d839883a 	mov	fp,sp

	  // Inverting maintenance mode:
	Maintenance ^= 0x1;
    5110:	d0a03497 	ldw	r2,-32558(gp)
    5114:	1080005c 	xori	r2,r2,1
    5118:	d0a03495 	stw	r2,-32558(gp)
	  // clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7);
    511c:	00c001c4 	movi	r3,7
    5120:	00800134 	movhi	r2,4
    5124:	108c3304 	addi	r2,r2,12492
    5128:	10c00035 	stwio	r3,0(r2)

}
    512c:	0001883a 	nop
    5130:	e037883a 	mov	sp,fp
    5134:	df000017 	ldw	fp,0(sp)
    5138:	dec00104 	addi	sp,sp,4
    513c:	f800283a 	ret

00005140 <ps2_isr>:
void ps2_isr(void* ps2_device, alt_u32 id){
    5140:	defff804 	addi	sp,sp,-32
    5144:	dfc00715 	stw	ra,28(sp)
    5148:	df000615 	stw	fp,24(sp)
    514c:	df000604 	addi	fp,sp,24
    5150:	e13ffe15 	stw	r4,-8(fp)
    5154:	e17fff15 	stw	r5,-4(fp)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    5158:	e03ffb15 	stw	zero,-20(fp)
	char ascii;
	int status = 0;
    515c:	e03ffa15 	stw	zero,-24(fp)
	KB_CODE_TYPE decode_mode;
	status = decode_scancode (ps2_device, &decode_mode , &byte , &ascii) ;
    5160:	e0fffc04 	addi	r3,fp,-16
    5164:	e0bffd04 	addi	r2,fp,-12
    5168:	180f883a 	mov	r7,r3
    516c:	d1a04484 	addi	r6,gp,-32494
    5170:	100b883a 	mov	r5,r2
    5174:	e13ffe17 	ldw	r4,-8(fp)
    5178:	001df5c0 	call	1df5c <decode_scancode>
    517c:	e0bffa15 	stw	r2,-24(fp)
	if ( status == 0 ) //success
    5180:	e0bffa17 	ldw	r2,-24(fp)
    5184:	1000131e 	bne	r2,zero,51d4 <ps2_isr+0x94>
	{
		// print out the result
		switch ( decode_mode )
    5188:	e0bffd17 	ldw	r2,-12(fp)
    518c:	10c00060 	cmpeqi	r3,r2,1
    5190:	18000a1e 	bne	r3,zero,51bc <ps2_isr+0x7c>
    5194:	0080032e 	bgeu	zero,r2,51a4 <ps2_isr+0x64>
    5198:	10800128 	cmpgeui	r2,r2,4
    519c:	1000011e 	bne	r2,zero,51a4 <ps2_isr+0x64>
	        break ;
	      case KB_LONG_BINARY_MAKE_CODE :
	        // do nothing
	      case KB_BINARY_MAKE_CODE :
	        //printf ( "MAKE CODE : %x\n", byte ) ;
	        break ;
    51a0:	00000706 	br	51c0 <ps2_isr+0x80>
	      case KB_BREAK_CODE :
	        // do nothing
	      default :
	        xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
    51a4:	d0a03797 	ldw	r2,-32546(gp)
    51a8:	e0fffb04 	addi	r3,fp,-20
    51ac:	180b883a 	mov	r5,r3
    51b0:	1009883a 	mov	r4,r2
    51b4:	000215c0 	call	215c <xQueueGiveFromISR>
	        break ;
    51b8:	00000106 	br	51c0 <ps2_isr+0x80>
		// print out the result
		switch ( decode_mode )
	    {
	      case KB_ASCII_MAKE_CODE :
	        //printf ( "ASCII   : %x\n", byte ) ;
	        break ;
    51bc:	0001883a 	nop
	        // do nothing
	      default :
	        xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
	        break ;
	    }
	    IOWR(SEVEN_SEG_BASE,0 ,byte);
    51c0:	d0a04483 	ldbu	r2,-32494(gp)
    51c4:	10c03fcc 	andi	r3,r2,255
    51c8:	00800134 	movhi	r2,4
    51cc:	108c4104 	addi	r2,r2,12548
    51d0:	10c00035 	stwio	r3,0(r2)
	  }


}
    51d4:	0001883a 	nop
    51d8:	e037883a 	mov	sp,fp
    51dc:	dfc00117 	ldw	ra,4(sp)
    51e0:	df000017 	ldw	fp,0(sp)
    51e4:	dec00204 	addi	sp,sp,8
    51e8:	f800283a 	ret

000051ec <loadTimerISR>:
void loadTimerISR(TimerHandle_t xTimer) {
    51ec:	defffe04 	addi	sp,sp,-8
    51f0:	df000115 	stw	fp,4(sp)
    51f4:	df000104 	addi	fp,sp,4
    51f8:	e13fff15 	stw	r4,-4(fp)
	// Timer has expired, do smthn
	//printf("expired \n");
	LoadTimeExp = 1;
    51fc:	00800044 	movi	r2,1
    5200:	d0a03995 	stw	r2,-32538(gp)
}
    5204:	0001883a 	nop
    5208:	e037883a 	mov	sp,fp
    520c:	df000017 	ldw	fp,0(sp)
    5210:	dec00104 	addi	sp,sp,4
    5214:	f800283a 	ret

00005218 <freq_relay_isr>:

void freq_relay_isr() {
    5218:	defffd04 	addi	sp,sp,-12
    521c:	dfc00215 	stw	ra,8(sp)
    5220:	df000115 	stw	fp,4(sp)
    5224:	df000104 	addi	fp,sp,4
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    5228:	e03fff15 	stw	zero,-4(fp)
	Freq_Val= IORD(FREQUENCY_ANALYSER_BASE, 0); //it's in COUNT, not in HERTZ. to convert, do 16000/temp
    522c:	00800134 	movhi	r2,4
    5230:	108c4004 	addi	r2,r2,12544
    5234:	10800037 	ldwio	r2,0(r2)
    5238:	d0a04595 	stw	r2,-32490(gp)
	xSemaphoreGiveFromISR(freqSemaphore, &xHigherPriorityTaskWoken);
    523c:	d0a03f97 	ldw	r2,-32514(gp)
    5240:	e17fff04 	addi	r5,fp,-4
    5244:	1009883a 	mov	r4,r2
    5248:	000215c0 	call	215c <xQueueGiveFromISR>
}
    524c:	0001883a 	nop
    5250:	e037883a 	mov	sp,fp
    5254:	dfc00117 	ldw	ra,4(sp)
    5258:	df000017 	ldw	fp,0(sp)
    525c:	dec00204 	addi	sp,sp,8
    5260:	f800283a 	ret

00005264 <main>:

//===================================MAIN=============================================//
int main(void) {
    5264:	defff904 	addi	sp,sp,-28
    5268:	dfc00615 	stw	ra,24(sp)
    526c:	df000515 	stw	fp,20(sp)
    5270:	df000504 	addi	fp,sp,20
	StabilityQ = xQueueCreate( STBL_QUEUE_SIZE, sizeof( void* ) );
    5274:	000d883a 	mov	r6,zero
    5278:	01400104 	movi	r5,4
    527c:	01000c84 	movi	r4,50
    5280:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5284:	d0a04095 	stw	r2,-32510(gp)
	LoadControlQ = xQueueCreate(STBL_QUEUE_SIZE, sizeof(void*));
    5288:	000d883a 	mov	r6,zero
    528c:	01400104 	movi	r5,4
    5290:	01000c84 	movi	r4,50
    5294:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5298:	d0a04c95 	stw	r2,-32462(gp)
	TimeQ = xQueueCreate(5, sizeof(unsigned int));
    529c:	000d883a 	mov	r6,zero
    52a0:	01400104 	movi	r5,4
    52a4:	01000144 	movi	r4,5
    52a8:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    52ac:	d0a03d95 	stw	r2,-32522(gp)
	alt_up_ps2_dev * ps2_device = alt_up_ps2_open_dev(PS2_NAME);
    52b0:	01020034 	movhi	r4,2048
    52b4:	21001604 	addi	r4,r4,88
    52b8:	001ca600 	call	1ca60 <alt_up_ps2_open_dev>
    52bc:	e0bfff15 	stw	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7); // Clearing edge capture register for ISR
    52c0:	00c001c4 	movi	r3,7
    52c4:	00800134 	movhi	r2,4
    52c8:	108c3304 	addi	r2,r2,12492
    52cc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTON_BASE,0x7); // Enabling interrupts for the buttons
    52d0:	00c001c4 	movi	r3,7
    52d4:	00800134 	movhi	r2,4
    52d8:	108c3204 	addi	r2,r2,12488
    52dc:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(PUSH_BUTTON_IRQ,0,MaintenanceStateButton);
    52e0:	01800034 	movhi	r6,0
    52e4:	31944104 	addi	r6,r6,20740
    52e8:	000b883a 	mov	r5,zero
    52ec:	01000044 	movi	r4,1
    52f0:	00019200 	call	1920 <alt_irq_register>
	//Threshold values defined.
	Thresh_Val = 55;
    52f4:	00800dc4 	movi	r2,55
    52f8:	d0a03a95 	stw	r2,-32534(gp)
	Thresh_ROC = 5;
    52fc:	00800144 	movi	r2,5
    5300:	d0a04995 	stw	r2,-32474(gp)
	if(ps2_device == NULL){
    5304:	e0bfff17 	ldw	r2,-4(fp)
    5308:	1000051e 	bne	r2,zero,5320 <main+0xbc>
		printf("can't find PS/2 device\n");
    530c:	01020034 	movhi	r4,2048
    5310:	21001904 	addi	r4,r4,100
    5314:	00099180 	call	9918 <puts>
		return 1;
    5318:	00800044 	movi	r2,1
    531c:	00007006 	br	54e0 <main+0x27c>
	}

	alt_up_ps2_enable_read_interrupt(ps2_device);
    5320:	e13fff17 	ldw	r4,-4(fp)
    5324:	001c5dc0 	call	1c5dc <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_IRQ, ps2_device, ps2_isr);
    5328:	01800034 	movhi	r6,0
    532c:	31945004 	addi	r6,r6,20800
    5330:	e17fff17 	ldw	r5,-4(fp)
    5334:	01000084 	movi	r4,2
    5338:	00019200 	call	1920 <alt_irq_register>
	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay_isr);
    533c:	01800034 	movhi	r6,0
    5340:	31948604 	addi	r6,r6,21016
    5344:	000b883a 	mov	r5,zero
    5348:	010001c4 	movi	r4,7
    534c:	00019200 	call	1920 <alt_irq_register>
	//Create binary Semaphore
	semaphore = xSemaphoreCreateBinary();
    5350:	018000c4 	movi	r6,3
    5354:	000b883a 	mov	r5,zero
    5358:	01000044 	movi	r4,1
    535c:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5360:	d0a03795 	stw	r2,-32546(gp)
	freqSemaphore = xSemaphoreCreateBinary();
    5364:	018000c4 	movi	r6,3
    5368:	000b883a 	mov	r5,zero
    536c:	01000044 	movi	r4,1
    5370:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5374:	d0a03f95 	stw	r2,-32514(gp)
	threshold_mutex = xSemaphoreCreateMutex(); //has a priority inheritance mechanism unlike binary semaphores.
    5378:	01000044 	movi	r4,1
    537c:	0001c800 	call	1c80 <xQueueCreateMutex>
    5380:	d0a03c95 	stw	r2,-32526(gp)


	// Creating Timers
	LoadTimer = xTimerCreate("LoadTimer",pdMS_TO_TICKS(500),pdTRUE,NULL,loadTimerISR);
    5384:	00800034 	movhi	r2,0
    5388:	10947b04 	addi	r2,r2,20972
    538c:	d8800015 	stw	r2,0(sp)
    5390:	000f883a 	mov	r7,zero
    5394:	01800044 	movi	r6,1
    5398:	01407d04 	movi	r5,500
    539c:	01020034 	movhi	r4,2048
    53a0:	21001f04 	addi	r4,r4,124
    53a4:	00048740 	call	4874 <xTimerCreate>
    53a8:	d0a03b95 	stw	r2,-32530(gp)
	// Creating Tasks used
	xTaskCreate(Switch_Control_Task, 'Switch', configMINIMAL_STACK_SIZE, Switch_Control_Param, Switch_Task_Priority, switch_control_handle);
    53ac:	d0a04797 	ldw	r2,-32482(gp)
    53b0:	d8000315 	stw	zero,12(sp)
    53b4:	d8000215 	stw	zero,8(sp)
    53b8:	d8800115 	stw	r2,4(sp)
    53bc:	00800104 	movi	r2,4
    53c0:	d8800015 	stw	r2,0(sp)
    53c4:	01c48d34 	movhi	r7,4660
    53c8:	39d59e04 	addi	r7,r7,22136
    53cc:	01840004 	movi	r6,4096
    53d0:	015a5d34 	movhi	r5,26996
    53d4:	2958da04 	addi	r5,r5,25448
    53d8:	01000034 	movhi	r4,0
    53dc:	21153d04 	addi	r4,r4,21748
    53e0:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Load_LED_Ctrl_Task,'LEDs',configMINIMAL_STACK_SIZE,NULL,Load_LED_Ctrl_Task_Priority,NULL);
    53e4:	d8000315 	stw	zero,12(sp)
    53e8:	d8000215 	stw	zero,8(sp)
    53ec:	d8000115 	stw	zero,4(sp)
    53f0:	008000c4 	movi	r2,3
    53f4:	d8800015 	stw	r2,0(sp)
    53f8:	000f883a 	mov	r7,zero
    53fc:	01840004 	movi	r6,4096
    5400:	01531174 	movhi	r5,19525
    5404:	29511cc4 	addi	r5,r5,17523
    5408:	01000034 	movhi	r4,0
    540c:	21155304 	addi	r4,r4,21836
    5410:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Keyboard_Task, 'Keyboard', configMINIMAL_STACK_SIZE, NULL, Keyboard_Task_Priority, NULL);
    5414:	d8000315 	stw	zero,12(sp)
    5418:	d8000215 	stw	zero,8(sp)
    541c:	d8000115 	stw	zero,4(sp)
    5420:	00800144 	movi	r2,5
    5424:	d8800015 	stw	r2,0(sp)
    5428:	000f883a 	mov	r7,zero
    542c:	01840004 	movi	r6,4096
    5430:	015bd874 	movhi	r5,28513
    5434:	295c9904 	addi	r5,r5,29284
    5438:	01000034 	movhi	r4,0
    543c:	21179804 	addi	r4,r4,24160
    5440:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Stability_Monitor_Task, 'Monitoring', configMINIMAL_STACK_SIZE, NULL, Stable_Mon_Tsk_Priority, NULL);
    5444:	d8000315 	stw	zero,12(sp)
    5448:	d8000215 	stw	zero,8(sp)
    544c:	d8000115 	stw	zero,4(sp)
    5450:	00800044 	movi	r2,1
    5454:	d8800015 	stw	r2,0(sp)
    5458:	000f883a 	mov	r7,zero
    545c:	01840004 	movi	r6,4096
    5460:	015c9a74 	movhi	r5,29289
    5464:	295b99c4 	addi	r5,r5,28263
    5468:	01000034 	movhi	r4,0
    546c:	2116b904 	addi	r4,r4,23268
    5470:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Load_Management_Task, 'LoadShed',configMINIMAL_STACK_SIZE,NULL,Load_Management_Task_Priority,&PRVGADraw);
    5474:	d8000315 	stw	zero,12(sp)
    5478:	d8000215 	stw	zero,8(sp)
    547c:	d0a04184 	addi	r2,gp,-32506
    5480:	d8800115 	stw	r2,4(sp)
    5484:	00800084 	movi	r2,2
    5488:	d8800015 	stw	r2,0(sp)
    548c:	000f883a 	mov	r7,zero
    5490:	01840004 	movi	r6,4096
    5494:	0154da34 	movhi	r5,21352
    5498:	29595904 	addi	r5,r5,25956
    549c:	01000034 	movhi	r4,0
    54a0:	2115b304 	addi	r4,r4,22220
    54a4:	0002b780 	call	2b78 <xTaskGenericCreate>

	xTaskCreate(VGA_Task, 'VGA', configMINIMAL_STACK_SIZE, NULL, VGA_Task_Priority, NULL);
    54a8:	d8000315 	stw	zero,12(sp)
    54ac:	d8000215 	stw	zero,8(sp)
    54b0:	d8000115 	stw	zero,4(sp)
    54b4:	00800184 	movi	r2,6
    54b8:	d8800015 	stw	r2,0(sp)
    54bc:	000f883a 	mov	r7,zero
    54c0:	01840004 	movi	r6,4096
    54c4:	014015b4 	movhi	r5,86
    54c8:	2951d044 	addi	r5,r5,18241
    54cc:	01000034 	movhi	r4,0
    54d0:	2117f104 	addi	r4,r4,24516
    54d4:	0002b780 	call	2b78 <xTaskGenericCreate>

	vTaskStartScheduler();
    54d8:	0002e840 	call	2e84 <vTaskStartScheduler>
	for(;;);
    54dc:	003fff06 	br	54dc <__alt_data_end+0xf00054dc>
}
    54e0:	e037883a 	mov	sp,fp
    54e4:	dfc00117 	ldw	ra,4(sp)
    54e8:	df000017 	ldw	fp,0(sp)
    54ec:	dec00204 	addi	sp,sp,8
    54f0:	f800283a 	ret

000054f4 <Switch_Control_Task>:

//=======================================END OF MAIN==================================================================//

static void Switch_Control_Task(void *pvParams) {
    54f4:	defffd04 	addi	sp,sp,-12
    54f8:	dfc00215 	stw	ra,8(sp)
    54fc:	df000115 	stw	fp,4(sp)
    5500:	df000104 	addi	fp,sp,4
    5504:	e13fff15 	stw	r4,-4(fp)
	while (1) {
		//printf("SwitchTask\n"); //Debug version
		if (Ld_Manage_State == 1) {
    5508:	d0a03897 	ldw	r2,-32542(gp)
    550c:	10800058 	cmpnei	r2,r2,1
    5510:	1000071e 	bne	r2,zero,5530 <Switch_Control_Task+0x3c>
			Current_Switch_State &= IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE);
    5514:	00800134 	movhi	r2,4
    5518:	108c2c04 	addi	r2,r2,12464
    551c:	10c00037 	ldwio	r3,0(r2)
    5520:	d0a03597 	ldw	r2,-32554(gp)
    5524:	1884703a 	and	r2,r3,r2
    5528:	d0a03595 	stw	r2,-32554(gp)
    552c:	00000406 	br	5540 <Switch_Control_Task+0x4c>
		} else {
			Current_Switch_State = IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE);
    5530:	00800134 	movhi	r2,4
    5534:	108c2c04 	addi	r2,r2,12464
    5538:	10800037 	ldwio	r2,0(r2)
    553c:	d0a03595 	stw	r2,-32554(gp)
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    5540:	01001904 	movi	r4,100
    5544:	0002e0c0 	call	2e0c <vTaskDelay>
	}
    5548:	003fef06 	br	5508 <__alt_data_end+0xf0005508>

0000554c <Load_LED_Ctrl_Task>:
}

static void Load_LED_Ctrl_Task(void *pvParams) {
    554c:	defff504 	addi	sp,sp,-44
    5550:	dfc00a15 	stw	ra,40(sp)
    5554:	df000915 	stw	fp,36(sp)
    5558:	df000904 	addi	fp,sp,36
    555c:	e13fff15 	stw	r4,-4(fp)
	unsigned int *LdQ;
	unsigned int calc_time;
	unsigned int temp_start[5];
	while (1) {
		//xQueueReceive(Time_Start_ValQ, &time_start, portMAX_DELAY);
		xQueueReceive(LoadControlQ,&LdQ,portMAX_DELAY);
    5560:	d0a04c97 	ldw	r2,-32462(gp)
    5564:	e0fff804 	addi	r3,fp,-32
    5568:	000f883a 	mov	r7,zero
    556c:	01bfffc4 	movi	r6,-1
    5570:	180b883a 	mov	r5,r3
    5574:	1009883a 	mov	r4,r2
    5578:	000222c0 	call	222c <xQueueGenericReceive>
		//printf("LdQ: %u\n", LdQ);
		if (recordTime == 1) {
    557c:	d0a04297 	ldw	r2,-32502(gp)
    5580:	10800058 	cmpnei	r2,r2,1
    5584:	1000451e 	bne	r2,zero,569c <Load_LED_Ctrl_Task+0x150>
			recordTime = 0;
    5588:	d0204295 	stw	zero,-32502(gp)
			time_end = xTaskGetTickCount();
    558c:	00030dc0 	call	30dc <xTaskGetTickCount>
    5590:	d0a04695 	stw	r2,-32486(gp)
			calc_time = time_end - start_time[0];
    5594:	d0a04697 	ldw	r2,-32486(gp)
    5598:	1007883a 	mov	r3,r2
    559c:	00820234 	movhi	r2,2056
    55a0:	10bfed04 	addi	r2,r2,-76
    55a4:	10800017 	ldw	r2,0(r2)
    55a8:	1885c83a 	sub	r2,r3,r2
    55ac:	e0bff915 	stw	r2,-28(fp)
			printf("Time taken to shed: %d \n",(int) (time_end-start_time[0]));
    55b0:	d0a04697 	ldw	r2,-32486(gp)
    55b4:	1007883a 	mov	r3,r2
    55b8:	00820234 	movhi	r2,2056
    55bc:	10bfed04 	addi	r2,r2,-76
    55c0:	10800017 	ldw	r2,0(r2)
    55c4:	1885c83a 	sub	r2,r3,r2
    55c8:	100b883a 	mov	r5,r2
    55cc:	01020034 	movhi	r4,2048
    55d0:	21002204 	addi	r4,r4,136
    55d4:	000981c0 	call	981c <printf>
			printf("Start: %d, end: %d\n",start,time_end);
    55d8:	d0a04b97 	ldw	r2,-32466(gp)
    55dc:	d0e04697 	ldw	r3,-32486(gp)
    55e0:	180d883a 	mov	r6,r3
    55e4:	100b883a 	mov	r5,r2
    55e8:	01020034 	movhi	r4,2048
    55ec:	21002904 	addi	r4,r4,164
    55f0:	000981c0 	call	981c <printf>
			memcpy(temp_start,start_time, 5*sizeof(unsigned int));
    55f4:	00820234 	movhi	r2,2056
    55f8:	10bfed04 	addi	r2,r2,-76
    55fc:	10c00017 	ldw	r3,0(r2)
    5600:	e0fffa15 	stw	r3,-24(fp)
    5604:	10c00117 	ldw	r3,4(r2)
    5608:	e0fffb15 	stw	r3,-20(fp)
    560c:	10c00217 	ldw	r3,8(r2)
    5610:	e0fffc15 	stw	r3,-16(fp)
    5614:	10c00317 	ldw	r3,12(r2)
    5618:	e0fffd15 	stw	r3,-12(fp)
    561c:	10800417 	ldw	r2,16(r2)
    5620:	e0bffe15 	stw	r2,-8(fp)
			for (uint8_t i=0;i<4;i++) {
    5624:	e03ff705 	stb	zero,-36(fp)
    5628:	00001206 	br	5674 <Load_LED_Ctrl_Task+0x128>
				start_time[i+1] = temp_start[i];
    562c:	e0bff703 	ldbu	r2,-36(fp)
    5630:	10c00044 	addi	r3,r2,1
    5634:	e0bff703 	ldbu	r2,-36(fp)
    5638:	1085883a 	add	r2,r2,r2
    563c:	1085883a 	add	r2,r2,r2
    5640:	e13ff704 	addi	r4,fp,-36
    5644:	2085883a 	add	r2,r4,r2
    5648:	10800304 	addi	r2,r2,12
    564c:	11000017 	ldw	r4,0(r2)
    5650:	00820234 	movhi	r2,2056
    5654:	10bfed04 	addi	r2,r2,-76
    5658:	18c7883a 	add	r3,r3,r3
    565c:	18c7883a 	add	r3,r3,r3
    5660:	10c5883a 	add	r2,r2,r3
    5664:	11000015 	stw	r4,0(r2)
			time_end = xTaskGetTickCount();
			calc_time = time_end - start_time[0];
			printf("Time taken to shed: %d \n",(int) (time_end-start_time[0]));
			printf("Start: %d, end: %d\n",start,time_end);
			memcpy(temp_start,start_time, 5*sizeof(unsigned int));
			for (uint8_t i=0;i<4;i++) {
    5668:	e0bff703 	ldbu	r2,-36(fp)
    566c:	10800044 	addi	r2,r2,1
    5670:	e0bff705 	stb	r2,-36(fp)
    5674:	e0bff703 	ldbu	r2,-36(fp)
    5678:	10800130 	cmpltui	r2,r2,4
    567c:	103feb1e 	bne	r2,zero,562c <__alt_data_end+0xf000562c>
				start_time[i+1] = temp_start[i];
			}
			xQueueSend(TimeQ,&calc_time,0);
    5680:	d0a03d97 	ldw	r2,-32522(gp)
    5684:	e0fff904 	addi	r3,fp,-28
    5688:	000f883a 	mov	r7,zero
    568c:	000d883a 	mov	r6,zero
    5690:	180b883a 	mov	r5,r3
    5694:	1009883a 	mov	r4,r2
    5698:	0001edc0 	call	1edc <xQueueGenericSend>
		}
		IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, Current_Switch_State);
    569c:	d0e03597 	ldw	r3,-32554(gp)
    56a0:	00800134 	movhi	r2,4
    56a4:	108c1804 	addi	r2,r2,12384
    56a8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, LdQ);
    56ac:	e0bff817 	ldw	r2,-32(fp)
    56b0:	1007883a 	mov	r3,r2
    56b4:	00800134 	movhi	r2,4
    56b8:	108c2004 	addi	r2,r2,12416
    56bc:	10c00035 	stwio	r3,0(r2)
		vTaskDelay(pdMS_TO_TICKS(5)); //Original 50
    56c0:	01000144 	movi	r4,5
    56c4:	0002e0c0 	call	2e0c <vTaskDelay>
	}
    56c8:	003fa506 	br	5560 <__alt_data_end+0xf0005560>

000056cc <Load_Management_Task>:
}

static void Load_Management_Task(void *pvParams) {
    56cc:	defff204 	addi	sp,sp,-56
    56d0:	dfc00d15 	stw	ra,52(sp)
    56d4:	df000c15 	stw	fp,48(sp)
    56d8:	dc000b15 	stw	r16,44(sp)
    56dc:	df000c04 	addi	fp,sp,48
    56e0:	e13ffe15 	stw	r4,-8(fp)
	unsigned int *stable;
	unsigned int LoadQ;
	while(1) {

		xQueueReceive(StabilityQ,&stable,portMAX_DELAY);
    56e4:	d0a04097 	ldw	r2,-32510(gp)
    56e8:	e0fffc04 	addi	r3,fp,-16
    56ec:	000f883a 	mov	r7,zero
    56f0:	01bfffc4 	movi	r6,-1
    56f4:	180b883a 	mov	r5,r3
    56f8:	1009883a 	mov	r4,r2
    56fc:	000222c0 	call	222c <xQueueGenericReceive>
		//printf("Maintenance: %d\n", Maintenance);
		if (Maintenance != 0) {
    5700:	d0a03497 	ldw	r2,-32558(gp)
    5704:	1000e826 	beq	r2,zero,5aa8 <Load_Management_Task+0x3dc>
			if (stable == 0 && Ld_Manage_State == 0) { // Found to be unstable
    5708:	e0bffc17 	ldw	r2,-16(fp)
    570c:	1000101e 	bne	r2,zero,5750 <Load_Management_Task+0x84>
    5710:	d0a03897 	ldw	r2,-32542(gp)
    5714:	10000e1e 	bne	r2,zero,5750 <Load_Management_Task+0x84>
			// Labeling as now in load managing state
				Ld_Manage_State = 1;
    5718:	00800044 	movi	r2,1
    571c:	d0a03895 	stw	r2,-32542(gp)

				Init_Load = 1;
    5720:	00800044 	movi	r2,1
    5724:	d0a03695 	stw	r2,-32550(gp)
				Prev_Stable = Current_Switch_State;
    5728:	d0a03597 	ldw	r2,-32554(gp)
    572c:	d0a03e95 	stw	r2,-32518(gp)
				xTimerStart(LoadTimer,0);
    5730:	d4203b97 	ldw	r16,-32530(gp)
    5734:	00030dc0 	call	30dc <xTaskGetTickCount>
    5738:	d8000015 	stw	zero,0(sp)
    573c:	000f883a 	mov	r7,zero
    5740:	100d883a 	mov	r6,r2
    5744:	01400044 	movi	r5,1
    5748:	8009883a 	mov	r4,r16
    574c:	00049200 	call	4920 <xTimerGenericCommand>
			}
			if (Ld_Manage_State == 1) {
    5750:	d0a03897 	ldw	r2,-32542(gp)
    5754:	10800058 	cmpnei	r2,r2,1
    5758:	1000c61e 	bne	r2,zero,5a74 <Load_Management_Task+0x3a8>
				if (stable ==1) {
    575c:	e0bffc17 	ldw	r2,-16(fp)
    5760:	10800058 	cmpnei	r2,r2,1
    5764:	10006b1e 	bne	r2,zero,5914 <Load_Management_Task+0x248>
					if ((Prev_Stable >> 5) == 0) { // If it was unstable prior we reset the timer
    5768:	d0a03e97 	ldw	r2,-32518(gp)
    576c:	1005d17a 	srai	r2,r2,5
    5770:	1000091e 	bne	r2,zero,5798 <Load_Management_Task+0xcc>
						xTimerReset(LoadTimer,0);
    5774:	d4203b97 	ldw	r16,-32530(gp)
    5778:	00030dc0 	call	30dc <xTaskGetTickCount>
    577c:	d8000015 	stw	zero,0(sp)
    5780:	000f883a 	mov	r7,zero
    5784:	100d883a 	mov	r6,r2
    5788:	01400084 	movi	r5,2
    578c:	8009883a 	mov	r4,r16
    5790:	00049200 	call	4920 <xTimerGenericCommand>
    5794:	00004a06 	br	58c0 <Load_Management_Task+0x1f4>
					} else if (LoadTimeExp == 1) {
    5798:	d0a03997 	ldw	r2,-32538(gp)
    579c:	10800058 	cmpnei	r2,r2,1
    57a0:	1000471e 	bne	r2,zero,58c0 <Load_Management_Task+0x1f4>
						LoadTimeExp = 0;
    57a4:	d0203995 	stw	zero,-32538(gp)
						// Restoring

						//loop through and check to see which of the highest bits need to be 'unshedded'
						int found = 0;
    57a8:	e03ff515 	stw	zero,-44(fp)
						int pos = 4;
    57ac:	00800104 	movi	r2,4
    57b0:	e0bff615 	stw	r2,-40(fp)
						int mask = 1;
    57b4:	00800044 	movi	r2,1
    57b8:	e0bff915 	stw	r2,-28(fp)
						int val;
						//printf("Prev_Stable: %d\n",Prev_Stable);
						//printf("Current state: %d\n",Current_Switch_State);
						while (found == 0 && pos>=0) {
    57bc:	00001f06 	br	583c <Load_Management_Task+0x170>
							mask = 1<<pos;
    57c0:	00c00044 	movi	r3,1
    57c4:	e0bff617 	ldw	r2,-40(fp)
    57c8:	1884983a 	sll	r2,r3,r2
    57cc:	e0bff915 	stw	r2,-28(fp)
							val = Prev_Stable & mask;
    57d0:	d0e03e97 	ldw	r3,-32518(gp)
    57d4:	e0bff917 	ldw	r2,-28(fp)
    57d8:	1884703a 	and	r2,r3,r2
    57dc:	e0bffa15 	stw	r2,-24(fp)
							if (!val && (Current_Switch_State & (1U << pos))) {
    57e0:	e0bffa17 	ldw	r2,-24(fp)
    57e4:	1000121e 	bne	r2,zero,5830 <Load_Management_Task+0x164>
    57e8:	d0a03597 	ldw	r2,-32554(gp)
    57ec:	1007883a 	mov	r3,r2
    57f0:	e0bff617 	ldw	r2,-40(fp)
    57f4:	1884d83a 	srl	r2,r3,r2
    57f8:	1080004c 	andi	r2,r2,1
    57fc:	10000c26 	beq	r2,zero,5830 <Load_Management_Task+0x164>
								found =1;
    5800:	00800044 	movi	r2,1
    5804:	e0bff515 	stw	r2,-44(fp)
								printf("Position:%d \n",pos);
    5808:	e17ff617 	ldw	r5,-40(fp)
    580c:	01020034 	movhi	r4,2048
    5810:	21002e04 	addi	r4,r4,184
    5814:	000981c0 	call	981c <printf>
								printf("Init: %d\n",Init_Load);
    5818:	d0a03697 	ldw	r2,-32550(gp)
    581c:	100b883a 	mov	r5,r2
    5820:	01020034 	movhi	r4,2048
    5824:	21003204 	addi	r4,r4,200
    5828:	000981c0 	call	981c <printf>
								break;
    582c:	00000706 	br	584c <Load_Management_Task+0x180>
							}
							pos--;
    5830:	e0bff617 	ldw	r2,-40(fp)
    5834:	10bfffc4 	addi	r2,r2,-1
    5838:	e0bff615 	stw	r2,-40(fp)
						int pos = 4;
						int mask = 1;
						int val;
						//printf("Prev_Stable: %d\n",Prev_Stable);
						//printf("Current state: %d\n",Current_Switch_State);
						while (found == 0 && pos>=0) {
    583c:	e0bff517 	ldw	r2,-44(fp)
    5840:	1000021e 	bne	r2,zero,584c <Load_Management_Task+0x180>
    5844:	e0bff617 	ldw	r2,-40(fp)
    5848:	103fdd0e 	bge	r2,zero,57c0 <__alt_data_end+0xf00057c0>
								printf("Init: %d\n",Init_Load);
								break;
							}
							pos--;
						}
						if (found == 1) {
    584c:	e0bff517 	ldw	r2,-44(fp)
    5850:	10800058 	cmpnei	r2,r2,1
    5854:	1000121e 	bne	r2,zero,58a0 <Load_Management_Task+0x1d4>
							Prev_Stable |= (1U << pos); // putting 1 into the position found
    5858:	00c00044 	movi	r3,1
    585c:	e0bff617 	ldw	r2,-40(fp)
    5860:	1884983a 	sll	r2,r3,r2
    5864:	d0e03e97 	ldw	r3,-32518(gp)
    5868:	10c4b03a 	or	r2,r2,r3
    586c:	d0a03e95 	stw	r2,-32518(gp)
							LoadQ = Prev_Stable;
    5870:	d0a03e97 	ldw	r2,-32518(gp)
    5874:	e0bffd15 	stw	r2,-12(fp)
							LoadQ &= 0b011111;
    5878:	e0bffd17 	ldw	r2,-12(fp)
    587c:	108007cc 	andi	r2,r2,31
    5880:	e0bffd15 	stw	r2,-12(fp)
							//printf("LOAD: %d\n",LoadQ);
							xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    5884:	d0a04c97 	ldw	r2,-32462(gp)
    5888:	e0fffd04 	addi	r3,fp,-12
    588c:	000f883a 	mov	r7,zero
    5890:	000d883a 	mov	r6,zero
    5894:	180b883a 	mov	r5,r3
    5898:	1009883a 	mov	r4,r2
    589c:	0001edc0 	call	1edc <xQueueGenericSend>

						}
						xTimerStart(LoadTimer,0);
    58a0:	d4203b97 	ldw	r16,-32530(gp)
    58a4:	00030dc0 	call	30dc <xTaskGetTickCount>
    58a8:	d8000015 	stw	zero,0(sp)
    58ac:	000f883a 	mov	r7,zero
    58b0:	100d883a 	mov	r6,r2
    58b4:	01400044 	movi	r5,1
    58b8:	8009883a 	mov	r4,r16
    58bc:	00049200 	call	4920 <xTimerGenericCommand>
					}
					Prev_Stable |= (1U << 5);
    58c0:	d0a03e97 	ldw	r2,-32518(gp)
    58c4:	10800814 	ori	r2,r2,32
    58c8:	d0a03e95 	stw	r2,-32518(gp)
					if (Prev_Stable == (Current_Switch_State | 1<<5)) {
    58cc:	d0a03597 	ldw	r2,-32554(gp)
    58d0:	10c00814 	ori	r3,r2,32
    58d4:	d0a03e97 	ldw	r2,-32518(gp)
    58d8:	18807f1e 	bne	r3,r2,5ad8 <Load_Management_Task+0x40c>
						// No longer needs to be in load manage state
						Ld_Manage_State = 0;
    58dc:	d0203895 	stw	zero,-32542(gp)
						printf("Stable Now\n");
    58e0:	01020034 	movhi	r4,2048
    58e4:	21003504 	addi	r4,r4,212
    58e8:	00099180 	call	9918 <puts>
						readStart = 1;
    58ec:	00800044 	movi	r2,1
    58f0:	d0a04a95 	stw	r2,-32470(gp)
						xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    58f4:	d0a04c97 	ldw	r2,-32462(gp)
    58f8:	e0fffd04 	addi	r3,fp,-12
    58fc:	000f883a 	mov	r7,zero
    5900:	000d883a 	mov	r6,zero
    5904:	180b883a 	mov	r5,r3
    5908:	1009883a 	mov	r4,r2
    590c:	0001edc0 	call	1edc <xQueueGenericSend>
    5910:	00007106 	br	5ad8 <Load_Management_Task+0x40c>
					}

				} else {
					//printf("UNSTABLE \n");
					// Finding the lowest bit (lowest priority that is on)
					int pos = 0;
    5914:	e03ff715 	stw	zero,-36(fp)
					unsigned int mask = 1;
    5918:	00800044 	movi	r2,1
    591c:	e0bffb15 	stw	r2,-20(fp)
					if ((Prev_Stable >> 5) == 1) { // If it was stable prior we reset the timer
    5920:	d0a03e97 	ldw	r2,-32518(gp)
    5924:	1005d17a 	srai	r2,r2,5
    5928:	10800058 	cmpnei	r2,r2,1
    592c:	1000091e 	bne	r2,zero,5954 <Load_Management_Task+0x288>
						xTimerReset(LoadTimer,0);
    5930:	d4203b97 	ldw	r16,-32530(gp)
    5934:	00030dc0 	call	30dc <xTaskGetTickCount>
    5938:	d8000015 	stw	zero,0(sp)
    593c:	000f883a 	mov	r7,zero
    5940:	100d883a 	mov	r6,r2
    5944:	01400084 	movi	r5,2
    5948:	8009883a 	mov	r4,r16
    594c:	00049200 	call	4920 <xTimerGenericCommand>
    5950:	00006106 	br	5ad8 <Load_Management_Task+0x40c>

					} else if ((LoadTimeExp == 1) || ((Init_Load == 1))) {
    5954:	d0a03997 	ldw	r2,-32538(gp)
    5958:	10800060 	cmpeqi	r2,r2,1
    595c:	1000031e 	bne	r2,zero,596c <Load_Management_Task+0x2a0>
    5960:	d0a03697 	ldw	r2,-32550(gp)
    5964:	10800058 	cmpnei	r2,r2,1
    5968:	10005b1e 	bne	r2,zero,5ad8 <Load_Management_Task+0x40c>
						if (Init_Load == 1) {
    596c:	d0a03697 	ldw	r2,-32550(gp)
    5970:	10800058 	cmpnei	r2,r2,1
    5974:	1000021e 	bne	r2,zero,5980 <Load_Management_Task+0x2b4>
							recordTime = 1;
    5978:	00800044 	movi	r2,1
    597c:	d0a04295 	stw	r2,-32502(gp)
						}
						Init_Load = 0;
    5980:	d0203695 	stw	zero,-32550(gp)
						LoadTimeExp = 0;
    5984:	d0203995 	stw	zero,-32538(gp)
						int iso = Prev_Stable & -Prev_Stable;
    5988:	d0a03e97 	ldw	r2,-32518(gp)
    598c:	0087c83a 	sub	r3,zero,r2
    5990:	d0a03e97 	ldw	r2,-32518(gp)
    5994:	1884703a 	and	r2,r3,r2
    5998:	e0bff815 	stw	r2,-32(fp)
						while (iso > 1) {
    599c:	00000606 	br	59b8 <Load_Management_Task+0x2ec>
							iso>>=1;
    59a0:	e0bff817 	ldw	r2,-32(fp)
    59a4:	1005d07a 	srai	r2,r2,1
    59a8:	e0bff815 	stw	r2,-32(fp)
							pos++;
    59ac:	e0bff717 	ldw	r2,-36(fp)
    59b0:	10800044 	addi	r2,r2,1
    59b4:	e0bff715 	stw	r2,-36(fp)
							recordTime = 1;
						}
						Init_Load = 0;
						LoadTimeExp = 0;
						int iso = Prev_Stable & -Prev_Stable;
						while (iso > 1) {
    59b8:	e0bff817 	ldw	r2,-32(fp)
    59bc:	10800088 	cmpgei	r2,r2,2
    59c0:	103ff71e 	bne	r2,zero,59a0 <__alt_data_end+0xf00059a0>
							iso>>=1;
							pos++;
						}
						if (pos == 5) {
    59c4:	e0bff717 	ldw	r2,-36(fp)
    59c8:	10800160 	cmpeqi	r2,r2,5
    59cc:	1000151e 	bne	r2,zero,5a24 <Load_Management_Task+0x358>
							// ALL LOADS ARE OFF, don't do any shedding
						} else {
							mask = 1 << pos;
    59d0:	00c00044 	movi	r3,1
    59d4:	e0bff717 	ldw	r2,-36(fp)
    59d8:	1884983a 	sll	r2,r3,r2
    59dc:	e0bffb15 	stw	r2,-20(fp)
							Prev_Stable &= ~mask;
    59e0:	e0bffb17 	ldw	r2,-20(fp)
    59e4:	0084303a 	nor	r2,zero,r2
    59e8:	d0e03e97 	ldw	r3,-32518(gp)
    59ec:	10c4703a 	and	r2,r2,r3
    59f0:	d0a03e95 	stw	r2,-32518(gp)
							LoadQ = Prev_Stable;
    59f4:	d0a03e97 	ldw	r2,-32518(gp)
    59f8:	e0bffd15 	stw	r2,-12(fp)
							LoadQ &= 0b011111;
    59fc:	e0bffd17 	ldw	r2,-12(fp)
    5a00:	108007cc 	andi	r2,r2,31
    5a04:	e0bffd15 	stw	r2,-12(fp)
							//printf("LOAD: %d\n",LoadQ);

							xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    5a08:	d0a04c97 	ldw	r2,-32462(gp)
    5a0c:	e0fffd04 	addi	r3,fp,-12
    5a10:	000f883a 	mov	r7,zero
    5a14:	000d883a 	mov	r6,zero
    5a18:	180b883a 	mov	r5,r3
    5a1c:	1009883a 	mov	r4,r2
    5a20:	0001edc0 	call	1edc <xQueueGenericSend>

						}
						Prev_Stable = (Prev_Stable & ~(1 << 5)) | (0<< 5);
    5a24:	d0e03e97 	ldw	r3,-32518(gp)
    5a28:	00bff7c4 	movi	r2,-33
    5a2c:	1884703a 	and	r2,r3,r2
    5a30:	d0a03e95 	stw	r2,-32518(gp)

						xTimerStart(LoadTimer,0);
    5a34:	d4203b97 	ldw	r16,-32530(gp)
    5a38:	00030dc0 	call	30dc <xTaskGetTickCount>
    5a3c:	d8000015 	stw	zero,0(sp)
    5a40:	000f883a 	mov	r7,zero
    5a44:	100d883a 	mov	r6,r2
    5a48:	01400044 	movi	r5,1
    5a4c:	8009883a 	mov	r4,r16
    5a50:	00049200 	call	4920 <xTimerGenericCommand>
						start = xTaskGetTickCount();
    5a54:	00030dc0 	call	30dc <xTaskGetTickCount>
    5a58:	d0a04b95 	stw	r2,-32466(gp)
						start_time[0] = start;
    5a5c:	d0a04b97 	ldw	r2,-32466(gp)
    5a60:	1007883a 	mov	r3,r2
    5a64:	00820234 	movhi	r2,2056
    5a68:	10bfed04 	addi	r2,r2,-76
    5a6c:	10c00015 	stw	r3,0(r2)
    5a70:	00001906 	br	5ad8 <Load_Management_Task+0x40c>

					}

				}
			} else {
				LoadQ = Current_Switch_State;
    5a74:	d0a03597 	ldw	r2,-32554(gp)
    5a78:	e0bffd15 	stw	r2,-12(fp)
				xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    5a7c:	d0a04c97 	ldw	r2,-32462(gp)
    5a80:	e0fffd04 	addi	r3,fp,-12
    5a84:	000f883a 	mov	r7,zero
    5a88:	000d883a 	mov	r6,zero
    5a8c:	180b883a 	mov	r5,r3
    5a90:	1009883a 	mov	r4,r2
    5a94:	0001edc0 	call	1edc <xQueueGenericSend>
				Ld_Manage_State = 0;
    5a98:	d0203895 	stw	zero,-32542(gp)
				readStart = 1;
    5a9c:	00800044 	movi	r2,1
    5aa0:	d0a04a95 	stw	r2,-32470(gp)
    5aa4:	00000c06 	br	5ad8 <Load_Management_Task+0x40c>

			}
		} else {
			LoadQ = Current_Switch_State;
    5aa8:	d0a03597 	ldw	r2,-32554(gp)
    5aac:	e0bffd15 	stw	r2,-12(fp)
			xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    5ab0:	d0a04c97 	ldw	r2,-32462(gp)
    5ab4:	e0fffd04 	addi	r3,fp,-12
    5ab8:	000f883a 	mov	r7,zero
    5abc:	000d883a 	mov	r6,zero
    5ac0:	180b883a 	mov	r5,r3
    5ac4:	1009883a 	mov	r4,r2
    5ac8:	0001edc0 	call	1edc <xQueueGenericSend>
			Ld_Manage_State = 0;
    5acc:	d0203895 	stw	zero,-32542(gp)
			readStart = 1;
    5ad0:	00800044 	movi	r2,1
    5ad4:	d0a04a95 	stw	r2,-32470(gp)
		}
		vTaskDelay(50);
    5ad8:	01000c84 	movi	r4,50
    5adc:	0002e0c0 	call	2e0c <vTaskDelay>

	}
    5ae0:	003f0006 	br	56e4 <__alt_data_end+0xf00056e4>

00005ae4 <Stability_Monitor_Task>:
}
static void Stability_Monitor_Task(void *paParams) {
    5ae4:	defff304 	addi	sp,sp,-52
    5ae8:	dfc00c15 	stw	ra,48(sp)
    5aec:	df000b15 	stw	fp,44(sp)
    5af0:	dc400a15 	stw	r17,40(sp)
    5af4:	dc000915 	stw	r16,36(sp)
    5af8:	df000b04 	addi	fp,sp,44
    5afc:	e13ffd15 	stw	r4,-12(fp)
	unsigned int stableQ;
	readStart = 1;
    5b00:	00800044 	movi	r2,1
    5b04:	d0a04a95 	stw	r2,-32470(gp)
	while (1) {
		float temp_five[5];
		if (xSemaphoreTake(freqSemaphore, portMAX_DELAY) == pdTRUE) {
    5b08:	d0a03f97 	ldw	r2,-32514(gp)
    5b0c:	000f883a 	mov	r7,zero
    5b10:	01bfffc4 	movi	r6,-1
    5b14:	000b883a 	mov	r5,zero
    5b18:	1009883a 	mov	r4,r2
    5b1c:	000222c0 	call	222c <xQueueGenericReceive>
    5b20:	10800058 	cmpnei	r2,r2,1
    5b24:	1000ca1e 	bne	r2,zero,5e50 <Stability_Monitor_Task+0x36c>
			memcpy(temp_five,Prev_Five_Freq, 5*sizeof(float));
    5b28:	00820234 	movhi	r2,2056
    5b2c:	10bfe304 	addi	r2,r2,-116
    5b30:	10c00017 	ldw	r3,0(r2)
    5b34:	e0fff815 	stw	r3,-32(fp)
    5b38:	10c00117 	ldw	r3,4(r2)
    5b3c:	e0fff915 	stw	r3,-28(fp)
    5b40:	10c00217 	ldw	r3,8(r2)
    5b44:	e0fffa15 	stw	r3,-24(fp)
    5b48:	10c00317 	ldw	r3,12(r2)
    5b4c:	e0fffb15 	stw	r3,-20(fp)
    5b50:	10800417 	ldw	r2,16(r2)
    5b54:	e0bffc15 	stw	r2,-16(fp)
			for (uint8_t i=0;i<4;i++) {
    5b58:	e03ff505 	stb	zero,-44(fp)
    5b5c:	00001206 	br	5ba8 <Stability_Monitor_Task+0xc4>
				Prev_Five_Freq[i+1] = temp_five[i];
    5b60:	e0bff503 	ldbu	r2,-44(fp)
    5b64:	10c00044 	addi	r3,r2,1
    5b68:	e0bff503 	ldbu	r2,-44(fp)
    5b6c:	1085883a 	add	r2,r2,r2
    5b70:	1085883a 	add	r2,r2,r2
    5b74:	e13ff504 	addi	r4,fp,-44
    5b78:	2085883a 	add	r2,r4,r2
    5b7c:	10800304 	addi	r2,r2,12
    5b80:	11000017 	ldw	r4,0(r2)
    5b84:	00820234 	movhi	r2,2056
    5b88:	10bfe304 	addi	r2,r2,-116
    5b8c:	18c7883a 	add	r3,r3,r3
    5b90:	18c7883a 	add	r3,r3,r3
    5b94:	10c5883a 	add	r2,r2,r3
    5b98:	11000015 	stw	r4,0(r2)
	readStart = 1;
	while (1) {
		float temp_five[5];
		if (xSemaphoreTake(freqSemaphore, portMAX_DELAY) == pdTRUE) {
			memcpy(temp_five,Prev_Five_Freq, 5*sizeof(float));
			for (uint8_t i=0;i<4;i++) {
    5b9c:	e0bff503 	ldbu	r2,-44(fp)
    5ba0:	10800044 	addi	r2,r2,1
    5ba4:	e0bff505 	stb	r2,-44(fp)
    5ba8:	e0bff503 	ldbu	r2,-44(fp)
    5bac:	10800130 	cmpltui	r2,r2,4
    5bb0:	103feb1e 	bne	r2,zero,5b60 <__alt_data_end+0xf0005b60>
				Prev_Five_Freq[i+1] = temp_five[i];
			}
			memcpy(temp_five,Current_ROC_Freq, 5*sizeof(float));
    5bb4:	00820234 	movhi	r2,2056
    5bb8:	10bfe804 	addi	r2,r2,-96
    5bbc:	10c00017 	ldw	r3,0(r2)
    5bc0:	e0fff815 	stw	r3,-32(fp)
    5bc4:	10c00117 	ldw	r3,4(r2)
    5bc8:	e0fff915 	stw	r3,-28(fp)
    5bcc:	10c00217 	ldw	r3,8(r2)
    5bd0:	e0fffa15 	stw	r3,-24(fp)
    5bd4:	10c00317 	ldw	r3,12(r2)
    5bd8:	e0fffb15 	stw	r3,-20(fp)
    5bdc:	10800417 	ldw	r2,16(r2)
    5be0:	e0bffc15 	stw	r2,-16(fp)
			for (uint8_t i=0;i<4;i++) {
    5be4:	e03ff545 	stb	zero,-43(fp)
    5be8:	00001206 	br	5c34 <Stability_Monitor_Task+0x150>
				Current_ROC_Freq[i+1] = temp_five[i];
    5bec:	e0bff543 	ldbu	r2,-43(fp)
    5bf0:	10c00044 	addi	r3,r2,1
    5bf4:	e0bff543 	ldbu	r2,-43(fp)
    5bf8:	1085883a 	add	r2,r2,r2
    5bfc:	1085883a 	add	r2,r2,r2
    5c00:	e13ff504 	addi	r4,fp,-44
    5c04:	2085883a 	add	r2,r4,r2
    5c08:	10800304 	addi	r2,r2,12
    5c0c:	11000017 	ldw	r4,0(r2)
    5c10:	00820234 	movhi	r2,2056
    5c14:	10bfe804 	addi	r2,r2,-96
    5c18:	18c7883a 	add	r3,r3,r3
    5c1c:	18c7883a 	add	r3,r3,r3
    5c20:	10c5883a 	add	r2,r2,r3
    5c24:	11000015 	stw	r4,0(r2)
			memcpy(temp_five,Prev_Five_Freq, 5*sizeof(float));
			for (uint8_t i=0;i<4;i++) {
				Prev_Five_Freq[i+1] = temp_five[i];
			}
			memcpy(temp_five,Current_ROC_Freq, 5*sizeof(float));
			for (uint8_t i=0;i<4;i++) {
    5c28:	e0bff543 	ldbu	r2,-43(fp)
    5c2c:	10800044 	addi	r2,r2,1
    5c30:	e0bff545 	stb	r2,-43(fp)
    5c34:	e0bff543 	ldbu	r2,-43(fp)
    5c38:	10800130 	cmpltui	r2,r2,4
    5c3c:	103feb1e 	bne	r2,zero,5bec <__alt_data_end+0xf0005bec>
				Current_ROC_Freq[i+1] = temp_five[i];
			}

			Prev_Five_Freq[0] = 16000.0/(double)Freq_Val;	//Freq_val is in count
    5c40:	d0a04597 	ldw	r2,-32490(gp)
    5c44:	1009883a 	mov	r4,r2
    5c48:	0008f540 	call	8f54 <__floatsidf>
    5c4c:	1009883a 	mov	r4,r2
    5c50:	180b883a 	mov	r5,r3
    5c54:	200d883a 	mov	r6,r4
    5c58:	280f883a 	mov	r7,r5
    5c5c:	0009883a 	mov	r4,zero
    5c60:	015033f4 	movhi	r5,16591
    5c64:	29500004 	addi	r5,r5,16384
    5c68:	00074fc0 	call	74fc <__divdf3>
    5c6c:	1009883a 	mov	r4,r2
    5c70:	180b883a 	mov	r5,r3
    5c74:	2005883a 	mov	r2,r4
    5c78:	2807883a 	mov	r3,r5
    5c7c:	1009883a 	mov	r4,r2
    5c80:	180b883a 	mov	r5,r3
    5c84:	00091400 	call	9140 <__truncdfsf2>
    5c88:	1007883a 	mov	r3,r2
    5c8c:	00820234 	movhi	r2,2056
    5c90:	10bfe304 	addi	r2,r2,-116
    5c94:	10c00015 	stw	r3,0(r2)
			//printf("%f hz\n", 16000.0/(double)Freq_Val);
			//printf("Count number %d\n", Freq_Val);
			float change_freq = Prev_Five_Freq[0] - Prev_Five_Freq[1];
    5c98:	00820234 	movhi	r2,2056
    5c9c:	10bfe304 	addi	r2,r2,-116
    5ca0:	10c00017 	ldw	r3,0(r2)
    5ca4:	00820234 	movhi	r2,2056
    5ca8:	10bfe304 	addi	r2,r2,-116
    5cac:	11000117 	ldw	r4,4(r2)
    5cb0:	200b883a 	mov	r5,r4
    5cb4:	1809883a 	mov	r4,r3
    5cb8:	0006e840 	call	6e84 <__subsf3>
    5cbc:	1007883a 	mov	r3,r2
    5cc0:	e0fff615 	stw	r3,-40(fp)
			//printf("change freq %f\n", change_freq);
			Current_ROC_Freq[0] = (double)(change_freq * 16000)/ (double)Freq_Val;
    5cc4:	01519eb4 	movhi	r5,18042
    5cc8:	e13ff617 	ldw	r4,-40(fp)
    5ccc:	0006a880 	call	6a88 <__mulsf3>
    5cd0:	1007883a 	mov	r3,r2
    5cd4:	1805883a 	mov	r2,r3
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	00090300 	call	9030 <__extendsfdf2>
    5ce0:	1021883a 	mov	r16,r2
    5ce4:	1823883a 	mov	r17,r3
    5ce8:	d0a04597 	ldw	r2,-32490(gp)
    5cec:	1009883a 	mov	r4,r2
    5cf0:	0008f540 	call	8f54 <__floatsidf>
    5cf4:	1009883a 	mov	r4,r2
    5cf8:	180b883a 	mov	r5,r3
    5cfc:	200d883a 	mov	r6,r4
    5d00:	280f883a 	mov	r7,r5
    5d04:	8009883a 	mov	r4,r16
    5d08:	880b883a 	mov	r5,r17
    5d0c:	00074fc0 	call	74fc <__divdf3>
    5d10:	1009883a 	mov	r4,r2
    5d14:	180b883a 	mov	r5,r3
    5d18:	2005883a 	mov	r2,r4
    5d1c:	2807883a 	mov	r3,r5
    5d20:	1009883a 	mov	r4,r2
    5d24:	180b883a 	mov	r5,r3
    5d28:	00091400 	call	9140 <__truncdfsf2>
    5d2c:	1007883a 	mov	r3,r2
    5d30:	00820234 	movhi	r2,2056
    5d34:	10bfe804 	addi	r2,r2,-96
    5d38:	10c00015 	stw	r3,0(r2)
			//printf("Rate of change is %f hz/s \n", Current_ROC_Freq[0]);

			if ((Prev_Five_Freq[0] < Thresh_Val) || (fabs(Current_ROC_Freq[0])>Thresh_ROC)) {
    5d3c:	00820234 	movhi	r2,2056
    5d40:	10bfe304 	addi	r2,r2,-116
    5d44:	14000017 	ldw	r16,0(r2)
    5d48:	d0a03a97 	ldw	r2,-32534(gp)
    5d4c:	1009883a 	mov	r4,r2
    5d50:	00073d80 	call	73d8 <__floatsisf>
    5d54:	1007883a 	mov	r3,r2
    5d58:	180b883a 	mov	r5,r3
    5d5c:	8009883a 	mov	r4,r16
    5d60:	00069c00 	call	69c0 <__lesf2>
    5d64:	10001516 	blt	r2,zero,5dbc <Stability_Monitor_Task+0x2d8>
    5d68:	00820234 	movhi	r2,2056
    5d6c:	10bfe804 	addi	r2,r2,-96
    5d70:	10c00017 	ldw	r3,0(r2)
    5d74:	00a00034 	movhi	r2,32768
    5d78:	10bfffc4 	addi	r2,r2,-1
    5d7c:	1884703a 	and	r2,r3,r2
    5d80:	1009883a 	mov	r4,r2
    5d84:	00090300 	call	9030 <__extendsfdf2>
    5d88:	1021883a 	mov	r16,r2
    5d8c:	1823883a 	mov	r17,r3
    5d90:	d0a04997 	ldw	r2,-32474(gp)
    5d94:	1009883a 	mov	r4,r2
    5d98:	0008f540 	call	8f54 <__floatsidf>
    5d9c:	1009883a 	mov	r4,r2
    5da0:	180b883a 	mov	r5,r3
    5da4:	200d883a 	mov	r6,r4
    5da8:	280f883a 	mov	r7,r5
    5dac:	8009883a 	mov	r4,r16
    5db0:	880b883a 	mov	r5,r17
    5db4:	0007de40 	call	7de4 <__gedf2>
    5db8:	0080190e 	bge	zero,r2,5e20 <Stability_Monitor_Task+0x33c>
				//printf("-----UNSTABLE----- \n");
				//printf("Current Freq:%f, Thresh: %d, Current ROC: %f, Thresh: %d \n",Prev_Five_Freq[0],Thresh_Val,Current_ROC_Freq,Thresh_ROC);
				Current_Stable = 0;  //Unstable
    5dbc:	d0204395 	stw	zero,-32498(gp)

				// Start timer to see how long it took to shed
				if (readStart == 1 && Maintenance == 1) {
    5dc0:	d0a04a97 	ldw	r2,-32470(gp)
    5dc4:	10800058 	cmpnei	r2,r2,1
    5dc8:	10000b1e 	bne	r2,zero,5df8 <Stability_Monitor_Task+0x314>
    5dcc:	d0a03497 	ldw	r2,-32558(gp)
    5dd0:	10800058 	cmpnei	r2,r2,1
    5dd4:	1000081e 	bne	r2,zero,5df8 <Stability_Monitor_Task+0x314>
					start = xTaskGetTickCount(); //TickType_t's bits are set in FreeRTOSConfig.h by configUSE_16_BIT_TICKS where 0 is 32bits while 1 is 16 bits
    5dd8:	00030dc0 	call	30dc <xTaskGetTickCount>
    5ddc:	d0a04b95 	stw	r2,-32466(gp)
					start_time[0] = start;
    5de0:	d0a04b97 	ldw	r2,-32466(gp)
    5de4:	1007883a 	mov	r3,r2
    5de8:	00820234 	movhi	r2,2056
    5dec:	10bfed04 	addi	r2,r2,-76
    5df0:	10c00015 	stw	r3,0(r2)
					//xQueueSend(Time_Start_ValQ, &start ,0); //=================Sending time value into Queue===================================================
					readStart = 0;
    5df4:	d0204a95 	stw	zero,-32470(gp)
				}


				stableQ = Current_Stable;
    5df8:	d0a04397 	ldw	r2,-32498(gp)
    5dfc:	e0bff715 	stw	r2,-36(fp)
				xQueueSend(StabilityQ, (void *)&stableQ,0);
    5e00:	d0a04097 	ldw	r2,-32510(gp)
    5e04:	e0fff704 	addi	r3,fp,-36
    5e08:	000f883a 	mov	r7,zero
    5e0c:	000d883a 	mov	r6,zero
    5e10:	180b883a 	mov	r5,r3
    5e14:	1009883a 	mov	r4,r2
    5e18:	0001edc0 	call	1edc <xQueueGenericSend>
    5e1c:	00000f06 	br	5e5c <Stability_Monitor_Task+0x378>
			} else {
				Current_Stable = 1;   //stable
    5e20:	00800044 	movi	r2,1
    5e24:	d0a04395 	stw	r2,-32498(gp)
				stableQ = Current_Stable;
    5e28:	d0a04397 	ldw	r2,-32498(gp)
    5e2c:	e0bff715 	stw	r2,-36(fp)
				xQueueSend(StabilityQ, (void *)&stableQ,0);
    5e30:	d0a04097 	ldw	r2,-32510(gp)
    5e34:	e0fff704 	addi	r3,fp,-36
    5e38:	000f883a 	mov	r7,zero
    5e3c:	000d883a 	mov	r6,zero
    5e40:	180b883a 	mov	r5,r3
    5e44:	1009883a 	mov	r4,r2
    5e48:	0001edc0 	call	1edc <xQueueGenericSend>
    5e4c:	003f2e06 	br	5b08 <__alt_data_end+0xf0005b08>
			}
			//printf("Stable: %d \n",stableQ);
		} else {
			printf("no freq_semaphore was taken");
    5e50:	01020034 	movhi	r4,2048
    5e54:	21003804 	addi	r4,r4,224
    5e58:	000981c0 	call	981c <printf>
		}
	}
    5e5c:	003f2a06 	br	5b08 <__alt_data_end+0xf0005b08>

00005e60 <Keyboard_Task>:
}
static void Keyboard_Task(void *pvParams) {
    5e60:	defffd04 	addi	sp,sp,-12
    5e64:	dfc00215 	stw	ra,8(sp)
    5e68:	df000115 	stw	fp,4(sp)
    5e6c:	df000104 	addi	fp,sp,4
    5e70:	e13fff15 	stw	r4,-4(fp)
	// UP:   75
	//DOWN:  72
	//LEFT:  6B
	//RIGHT: 74
	while (1) {
		if (xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
    5e74:	d0a03797 	ldw	r2,-32546(gp)
    5e78:	000f883a 	mov	r7,zero
    5e7c:	01bfffc4 	movi	r6,-1
    5e80:	000b883a 	mov	r5,zero
    5e84:	1009883a 	mov	r4,r2
    5e88:	000222c0 	call	222c <xQueueGenericReceive>
    5e8c:	10800058 	cmpnei	r2,r2,1
    5e90:	1000481e 	bne	r2,zero,5fb4 <Keyboard_Task+0x154>
			if (byte == 0x75) {
    5e94:	d0a04483 	ldbu	r2,-32494(gp)
    5e98:	10803fcc 	andi	r2,r2,255
    5e9c:	10801d58 	cmpnei	r2,r2,117
    5ea0:	1000151e 	bne	r2,zero,5ef8 <Keyboard_Task+0x98>
				// Up case
				if (use_ROC_Thresh == 0) {
    5ea4:	d0a03383 	ldbu	r2,-32562(gp)
    5ea8:	10803fcc 	andi	r2,r2,255
    5eac:	1000091e 	bne	r2,zero,5ed4 <Keyboard_Task+0x74>
					Thresh_Val +=1;
    5eb0:	d0a03a97 	ldw	r2,-32534(gp)
    5eb4:	10800044 	addi	r2,r2,1
    5eb8:	d0a03a95 	stw	r2,-32534(gp)
					printf("%d\n",Thresh_Val);
    5ebc:	d0a03a97 	ldw	r2,-32534(gp)
    5ec0:	100b883a 	mov	r5,r2
    5ec4:	01020034 	movhi	r4,2048
    5ec8:	21003f04 	addi	r4,r4,252
    5ecc:	000981c0 	call	981c <printf>
    5ed0:	003fe806 	br	5e74 <__alt_data_end+0xf0005e74>
				} else {
					Thresh_ROC += 1;
    5ed4:	d0a04997 	ldw	r2,-32474(gp)
    5ed8:	10800044 	addi	r2,r2,1
    5edc:	d0a04995 	stw	r2,-32474(gp)
					printf("%d\n",Thresh_ROC);
    5ee0:	d0a04997 	ldw	r2,-32474(gp)
    5ee4:	100b883a 	mov	r5,r2
    5ee8:	01020034 	movhi	r4,2048
    5eec:	21003f04 	addi	r4,r4,252
    5ef0:	000981c0 	call	981c <printf>
    5ef4:	003fdf06 	br	5e74 <__alt_data_end+0xf0005e74>
				}

			} else if (byte == 0x72) {
    5ef8:	d0a04483 	ldbu	r2,-32494(gp)
    5efc:	10803fcc 	andi	r2,r2,255
    5f00:	10801c98 	cmpnei	r2,r2,114
    5f04:	10001b1e 	bne	r2,zero,5f74 <Keyboard_Task+0x114>
				// DOWN case
				if (use_ROC_Thresh ==0) {
    5f08:	d0a03383 	ldbu	r2,-32562(gp)
    5f0c:	10803fcc 	andi	r2,r2,255
    5f10:	10000c1e 	bne	r2,zero,5f44 <Keyboard_Task+0xe4>
					Thresh_Val += -1;
    5f14:	d0a03a97 	ldw	r2,-32534(gp)
    5f18:	10bfffc4 	addi	r2,r2,-1
    5f1c:	d0a03a95 	stw	r2,-32534(gp)
					if (Thresh_Val <= 0) {
    5f20:	d0a03a97 	ldw	r2,-32534(gp)
    5f24:	00800116 	blt	zero,r2,5f2c <Keyboard_Task+0xcc>
						Thresh_Val = 0;
    5f28:	d0203a95 	stw	zero,-32534(gp)
					}
					printf("%d\n",Thresh_Val);
    5f2c:	d0a03a97 	ldw	r2,-32534(gp)
    5f30:	100b883a 	mov	r5,r2
    5f34:	01020034 	movhi	r4,2048
    5f38:	21003f04 	addi	r4,r4,252
    5f3c:	000981c0 	call	981c <printf>
    5f40:	003fcc06 	br	5e74 <__alt_data_end+0xf0005e74>
				} else {
					Thresh_ROC += -1;
    5f44:	d0a04997 	ldw	r2,-32474(gp)
    5f48:	10bfffc4 	addi	r2,r2,-1
    5f4c:	d0a04995 	stw	r2,-32474(gp)
					if (Thresh_ROC <= 0) {
    5f50:	d0a04997 	ldw	r2,-32474(gp)
    5f54:	00800116 	blt	zero,r2,5f5c <Keyboard_Task+0xfc>
						Thresh_ROC = 0;
    5f58:	d0204995 	stw	zero,-32474(gp)
					}
					printf("%d\n",Thresh_ROC);
    5f5c:	d0a04997 	ldw	r2,-32474(gp)
    5f60:	100b883a 	mov	r5,r2
    5f64:	01020034 	movhi	r4,2048
    5f68:	21003f04 	addi	r4,r4,252
    5f6c:	000981c0 	call	981c <printf>
    5f70:	003fc006 	br	5e74 <__alt_data_end+0xf0005e74>
				}
			} else if (byte == 0x6B || byte== 0x74) {
    5f74:	d0a04483 	ldbu	r2,-32494(gp)
    5f78:	10803fcc 	andi	r2,r2,255
    5f7c:	10801ae0 	cmpeqi	r2,r2,107
    5f80:	1000041e 	bne	r2,zero,5f94 <Keyboard_Task+0x134>
    5f84:	d0a04483 	ldbu	r2,-32494(gp)
    5f88:	10803fcc 	andi	r2,r2,255
    5f8c:	10801d18 	cmpnei	r2,r2,116
    5f90:	1000041e 	bne	r2,zero,5fa4 <Keyboard_Task+0x144>
				use_ROC_Thresh = use_ROC_Thresh ^ 0b1;
    5f94:	d0a03383 	ldbu	r2,-32562(gp)
    5f98:	1080005c 	xori	r2,r2,1
    5f9c:	d0a03385 	stb	r2,-32562(gp)
    5fa0:	00000706 	br	5fc0 <Keyboard_Task+0x160>
			} else {
				printf("not valid key press \n");
    5fa4:	01020034 	movhi	r4,2048
    5fa8:	21004004 	addi	r4,r4,256
    5fac:	00099180 	call	9918 <puts>
    5fb0:	003fb006 	br	5e74 <__alt_data_end+0xf0005e74>
			}
		} else {
			printf("no semaphore was taken");
    5fb4:	01020034 	movhi	r4,2048
    5fb8:	21004604 	addi	r4,r4,280
    5fbc:	000981c0 	call	981c <printf>
		}
	}
    5fc0:	003fac06 	br	5e74 <__alt_data_end+0xf0005e74>

00005fc4 <VGA_Task>:
}

void VGA_Task(void *pvParameters ){
    5fc4:	deffb104 	addi	sp,sp,-316
    5fc8:	dfc04e15 	stw	ra,312(sp)
    5fcc:	df004d15 	stw	fp,308(sp)
    5fd0:	df004d04 	addi	fp,sp,308
    5fd4:	e13fff15 	stw	r4,-4(fp)


	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
    5fd8:	01020034 	movhi	r4,2048
    5fdc:	21004c04 	addi	r4,r4,304
    5fe0:	001cd7c0 	call	1cd7c <alt_up_pixel_buffer_dma_open_dev>
    5fe4:	e0bfbc15 	stw	r2,-272(fp)
	if(pixel_buf == NULL){
    5fe8:	e0bfbc17 	ldw	r2,-272(fp)
    5fec:	1000031e 	bne	r2,zero,5ffc <VGA_Task+0x38>
		printf("can't find pixel buffer device\n");
    5ff0:	01020034 	movhi	r4,2048
    5ff4:	21005304 	addi	r4,r4,332
    5ff8:	00099180 	call	9918 <puts>
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);
    5ffc:	000b883a 	mov	r5,zero
    6000:	e13fbc17 	ldw	r4,-272(fp)
    6004:	001d03c0 	call	1d03c <alt_up_pixel_buffer_dma_clear_screen>

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
    6008:	01020034 	movhi	r4,2048
    600c:	21005b04 	addi	r4,r4,364
    6010:	001cb1c0 	call	1cb1c <alt_up_char_buffer_open_dev>
    6014:	e0bfbd15 	stw	r2,-268(fp)
	if(char_buf == NULL){
    6018:	e0bfbd17 	ldw	r2,-268(fp)
    601c:	1000031e 	bne	r2,zero,602c <VGA_Task+0x68>
		printf("can't find char buffer device\n");
    6020:	01020034 	movhi	r4,2048
    6024:	21006504 	addi	r4,r4,404
    6028:	00099180 	call	9918 <puts>
	}
	alt_up_char_buffer_clear(char_buf);
    602c:	e13fbd17 	ldw	r4,-268(fp)
    6030:	001cd200 	call	1cd20 <alt_up_char_buffer_clear>



	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 350, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    6034:	d8000115 	stw	zero,4(sp)
    6038:	00900034 	movhi	r2,16384
    603c:	10bfffc4 	addi	r2,r2,-1
    6040:	d8800015 	stw	r2,0(sp)
    6044:	01c03204 	movi	r7,200
    6048:	01805784 	movi	r6,350
    604c:	01401904 	movi	r5,100
    6050:	e13fbc17 	ldw	r4,-272(fp)
    6054:	001d4400 	call	1d440 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 350, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    6058:	d8000115 	stw	zero,4(sp)
    605c:	00900034 	movhi	r2,16384
    6060:	10bfffc4 	addi	r2,r2,-1
    6064:	d8800015 	stw	r2,0(sp)
    6068:	01c04b04 	movi	r7,300
    606c:	01805784 	movi	r6,350
    6070:	01401904 	movi	r5,100
    6074:	e13fbc17 	ldw	r4,-272(fp)
    6078:	001d4400 	call	1d440 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    607c:	d8000115 	stw	zero,4(sp)
    6080:	00900034 	movhi	r2,16384
    6084:	10bfffc4 	addi	r2,r2,-1
    6088:	d8800015 	stw	r2,0(sp)
    608c:	01c03204 	movi	r7,200
    6090:	01800c84 	movi	r6,50
    6094:	01401904 	movi	r5,100
    6098:	e13fbc17 	ldw	r4,-272(fp)
    609c:	001d6500 	call	1d650 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    60a0:	d8000115 	stw	zero,4(sp)
    60a4:	00900034 	movhi	r2,16384
    60a8:	10bfffc4 	addi	r2,r2,-1
    60ac:	d8800015 	stw	r2,0(sp)
    60b0:	01c04b04 	movi	r7,300
    60b4:	01803704 	movi	r6,220
    60b8:	01401904 	movi	r5,100
    60bc:	e13fbc17 	ldw	r4,-272(fp)
    60c0:	001d6500 	call	1d650 <alt_up_pixel_buffer_dma_draw_vline>

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
    60c4:	01c00104 	movi	r7,4
    60c8:	01800104 	movi	r6,4
    60cc:	01420034 	movhi	r5,2048
    60d0:	29406d04 	addi	r5,r5,436
    60d4:	e13fbd17 	ldw	r4,-268(fp)
    60d8:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
    60dc:	01c001c4 	movi	r7,7
    60e0:	01800284 	movi	r6,10
    60e4:	01420034 	movhi	r5,2048
    60e8:	29407104 	addi	r5,r5,452
    60ec:	e13fbd17 	ldw	r4,-268(fp)
    60f0:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
    60f4:	01c00304 	movi	r7,12
    60f8:	01800284 	movi	r6,10
    60fc:	01420034 	movhi	r5,2048
    6100:	29407204 	addi	r5,r5,456
    6104:	e13fbd17 	ldw	r4,-268(fp)
    6108:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
    610c:	01c00444 	movi	r7,17
    6110:	01800284 	movi	r6,10
    6114:	01420034 	movhi	r5,2048
    6118:	29407304 	addi	r5,r5,460
    611c:	e13fbd17 	ldw	r4,-268(fp)
    6120:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "46", 10, 22);
    6124:	01c00584 	movi	r7,22
    6128:	01800284 	movi	r6,10
    612c:	01420034 	movhi	r5,2048
    6130:	29407404 	addi	r5,r5,464
    6134:	e13fbd17 	ldw	r4,-268(fp)
    6138:	001cc240 	call	1cc24 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
    613c:	01c00684 	movi	r7,26
    6140:	01800104 	movi	r6,4
    6144:	01420034 	movhi	r5,2048
    6148:	29407504 	addi	r5,r5,468
    614c:	e13fbd17 	ldw	r4,-268(fp)
    6150:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
    6154:	01c00704 	movi	r7,28
    6158:	01800284 	movi	r6,10
    615c:	01420034 	movhi	r5,2048
    6160:	29407804 	addi	r5,r5,480
    6164:	e13fbd17 	ldw	r4,-268(fp)
    6168:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
    616c:	01c00784 	movi	r7,30
    6170:	01800284 	movi	r6,10
    6174:	01420034 	movhi	r5,2048
    6178:	29407904 	addi	r5,r5,484
    617c:	e13fbd17 	ldw	r4,-268(fp)
    6180:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
    6184:	01c00804 	movi	r7,32
    6188:	01800284 	movi	r6,10
    618c:	01420034 	movhi	r5,2048
    6190:	29407a04 	addi	r5,r5,488
    6194:	e13fbd17 	ldw	r4,-268(fp)
    6198:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
    619c:	01c00884 	movi	r7,34
    61a0:	01800244 	movi	r6,9
    61a4:	01420034 	movhi	r5,2048
    61a8:	29407b04 	addi	r5,r5,492
    61ac:	e13fbd17 	ldw	r4,-268(fp)
    61b0:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);
    61b4:	01c00904 	movi	r7,36
    61b8:	01800244 	movi	r6,9
    61bc:	01420034 	movhi	r5,2048
    61c0:	29407c04 	addi	r5,r5,496
    61c4:	e13fbd17 	ldw	r4,-268(fp)
    61c8:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "Lower Threshold", 10, 45);
    61cc:	01c00b44 	movi	r7,45
    61d0:	01800284 	movi	r6,10
    61d4:	01420034 	movhi	r5,2048
    61d8:	29407d04 	addi	r5,r5,500
    61dc:	e13fbd17 	ldw	r4,-268(fp)
    61e0:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "RoC Threshold", 10, 48);
    61e4:	01c00c04 	movi	r7,48
    61e8:	01800284 	movi	r6,10
    61ec:	01420034 	movhi	r5,2048
    61f0:	29408104 	addi	r5,r5,516
    61f4:	e13fbd17 	ldw	r4,-268(fp)
    61f8:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "Status", 40, 43);
    61fc:	01c00ac4 	movi	r7,43
    6200:	01800a04 	movi	r6,40
    6204:	01420034 	movhi	r5,2048
    6208:	29408504 	addi	r5,r5,532
    620c:	e13fbd17 	ldw	r4,-268(fp)
    6210:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "Min Time", 40, 51);
    6214:	01c00cc4 	movi	r7,51
    6218:	01800a04 	movi	r6,40
    621c:	01420034 	movhi	r5,2048
    6220:	29408704 	addi	r5,r5,540
    6224:	e13fbd17 	ldw	r4,-268(fp)
    6228:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "Max time", 50, 51);
    622c:	01c00cc4 	movi	r7,51
    6230:	01800c84 	movi	r6,50
    6234:	01420034 	movhi	r5,2048
    6238:	29408a04 	addi	r5,r5,552
    623c:	e13fbd17 	ldw	r4,-268(fp)
    6240:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "Average time", 60, 51);
    6244:	01c00cc4 	movi	r7,51
    6248:	01800f04 	movi	r6,60
    624c:	01420034 	movhi	r5,2048
    6250:	29408d04 	addi	r5,r5,564
    6254:	e13fbd17 	ldw	r4,-268(fp)
    6258:	001cc240 	call	1cc24 <alt_up_char_buffer_string>

	int i = 0, j = 0;
    625c:	e03fb615 	stw	zero,-296(fp)
    6260:	e03fb715 	stw	zero,-292(fp)
	Line line_freq, line_roc;
	char buffer1[50], buffer2[50], buffer3[50], buffer4[50], buffer5[5];
	unsigned int max = 0, min = 0, temp = 0; //Temp is for first storing the total, then stores the calculated average
    6264:	e03fb815 	stw	zero,-288(fp)
    6268:	e03fb915 	stw	zero,-284(fp)
    626c:	e03fba15 	stw	zero,-280(fp)
	unsigned int Time[] = {0,0,0,0,0};
    6270:	e03ffa15 	stw	zero,-24(fp)
    6274:	e03ffb15 	stw	zero,-20(fp)
    6278:	e03ffc15 	stw	zero,-16(fp)
    627c:	e03ffd15 	stw	zero,-12(fp)
    6280:	e03ffe15 	stw	zero,-8(fp)
	while(1){

		//receive frequency data from queue
		//printf("VGA\n");
		//clear old graph to draw new graph
		while (uxQueueMessagesWaiting(TimeQ) != 0) {
    6284:	00001106 	br	62cc <VGA_Task+0x308>
			xQueueReceive(TimeQ, &Time+i, portMAX_DELAY);
    6288:	d1203d97 	ldw	r4,-32522(gp)
    628c:	e0bfb617 	ldw	r2,-296(fp)
    6290:	10800524 	muli	r2,r2,20
    6294:	e0fffa04 	addi	r3,fp,-24
    6298:	1885883a 	add	r2,r3,r2
    629c:	000f883a 	mov	r7,zero
    62a0:	01bfffc4 	movi	r6,-1
    62a4:	100b883a 	mov	r5,r2
    62a8:	000222c0 	call	222c <xQueueGenericReceive>
			i=i++%5;
    62ac:	e0bfb617 	ldw	r2,-296(fp)
    62b0:	10c00044 	addi	r3,r2,1
    62b4:	e0ffb615 	stw	r3,-296(fp)
    62b8:	00c00144 	movi	r3,5
    62bc:	10c7283a 	div	r3,r2,r3
    62c0:	18c00164 	muli	r3,r3,5
    62c4:	10c5c83a 	sub	r2,r2,r3
    62c8:	e0bfb615 	stw	r2,-296(fp)
	while(1){

		//receive frequency data from queue
		//printf("VGA\n");
		//clear old graph to draw new graph
		while (uxQueueMessagesWaiting(TimeQ) != 0) {
    62cc:	d0a03d97 	ldw	r2,-32522(gp)
    62d0:	1009883a 	mov	r4,r2
    62d4:	00025900 	call	2590 <uxQueueMessagesWaiting>
    62d8:	103feb1e 	bne	r2,zero,6288 <__alt_data_end+0xf0006288>
			xQueueReceive(TimeQ, &Time+i, portMAX_DELAY);
			i=i++%5;
		}

		for (uint8_t k = 0; k < 5; k++) {
    62dc:	e03fbb05 	stb	zero,-276(fp)
    62e0:	00003206 	br	63ac <VGA_Task+0x3e8>
			printf("Time %u\n", Time[i]);
    62e4:	e0bfb617 	ldw	r2,-296(fp)
    62e8:	1085883a 	add	r2,r2,r2
    62ec:	1085883a 	add	r2,r2,r2
    62f0:	e0ffb604 	addi	r3,fp,-296
    62f4:	1885883a 	add	r2,r3,r2
    62f8:	10804404 	addi	r2,r2,272
    62fc:	10800017 	ldw	r2,0(r2)
    6300:	100b883a 	mov	r5,r2
    6304:	01020034 	movhi	r4,2048
    6308:	21009104 	addi	r4,r4,580
    630c:	000981c0 	call	981c <printf>
			if (Time[i] > max) {
    6310:	e0bfb617 	ldw	r2,-296(fp)
    6314:	1085883a 	add	r2,r2,r2
    6318:	1085883a 	add	r2,r2,r2
    631c:	e0ffb604 	addi	r3,fp,-296
    6320:	1885883a 	add	r2,r3,r2
    6324:	10804404 	addi	r2,r2,272
    6328:	10800017 	ldw	r2,0(r2)
    632c:	e0ffb817 	ldw	r3,-288(fp)
    6330:	1880092e 	bgeu	r3,r2,6358 <VGA_Task+0x394>
				max = Time[i];
    6334:	e0bfb617 	ldw	r2,-296(fp)
    6338:	1085883a 	add	r2,r2,r2
    633c:	1085883a 	add	r2,r2,r2
    6340:	e0ffb604 	addi	r3,fp,-296
    6344:	1885883a 	add	r2,r3,r2
    6348:	10804404 	addi	r2,r2,272
    634c:	10800017 	ldw	r2,0(r2)
    6350:	e0bfb815 	stw	r2,-288(fp)
    6354:	00000806 	br	6378 <VGA_Task+0x3b4>
			} else {
				min = Time[i];
    6358:	e0bfb617 	ldw	r2,-296(fp)
    635c:	1085883a 	add	r2,r2,r2
    6360:	1085883a 	add	r2,r2,r2
    6364:	e0ffb604 	addi	r3,fp,-296
    6368:	1885883a 	add	r2,r3,r2
    636c:	10804404 	addi	r2,r2,272
    6370:	10800017 	ldw	r2,0(r2)
    6374:	e0bfb915 	stw	r2,-284(fp)
			}
			temp = temp + Time[i];
    6378:	e0bfb617 	ldw	r2,-296(fp)
    637c:	1085883a 	add	r2,r2,r2
    6380:	1085883a 	add	r2,r2,r2
    6384:	e0ffb604 	addi	r3,fp,-296
    6388:	1885883a 	add	r2,r3,r2
    638c:	10804404 	addi	r2,r2,272
    6390:	10800017 	ldw	r2,0(r2)
    6394:	e0ffba17 	ldw	r3,-280(fp)
    6398:	1885883a 	add	r2,r3,r2
    639c:	e0bfba15 	stw	r2,-280(fp)
		while (uxQueueMessagesWaiting(TimeQ) != 0) {
			xQueueReceive(TimeQ, &Time+i, portMAX_DELAY);
			i=i++%5;
		}

		for (uint8_t k = 0; k < 5; k++) {
    63a0:	e0bfbb03 	ldbu	r2,-276(fp)
    63a4:	10800044 	addi	r2,r2,1
    63a8:	e0bfbb05 	stb	r2,-276(fp)
    63ac:	e0bfbb03 	ldbu	r2,-276(fp)
    63b0:	10800170 	cmpltui	r2,r2,5
    63b4:	103fcb1e 	bne	r2,zero,62e4 <__alt_data_end+0xf00062e4>
				min = Time[i];
			}
			temp = temp + Time[i];
		}

		temp = temp/5;
    63b8:	e0ffba17 	ldw	r3,-280(fp)
    63bc:	00800144 	movi	r2,5
    63c0:	1885203a 	divu	r2,r3,r2
    63c4:	e0bfba15 	stw	r2,-280(fp)
		sprintf(buffer1, "%d ", Thresh_Val);
    63c8:	d0e03a97 	ldw	r3,-32534(gp)
    63cc:	e0bfc604 	addi	r2,fp,-232
    63d0:	180d883a 	mov	r6,r3
    63d4:	01420034 	movhi	r5,2048
    63d8:	29409404 	addi	r5,r5,592
    63dc:	1009883a 	mov	r4,r2
    63e0:	00099840 	call	9984 <sprintf>
		sprintf(buffer2, "%d ", Thresh_ROC);
    63e4:	d0e04997 	ldw	r3,-32474(gp)
    63e8:	e0bfd284 	addi	r2,fp,-182
    63ec:	180d883a 	mov	r6,r3
    63f0:	01420034 	movhi	r5,2048
    63f4:	29409404 	addi	r5,r5,592
    63f8:	1009883a 	mov	r4,r2
    63fc:	00099840 	call	9984 <sprintf>
		sprintf(buffer3, "%u ", max);
    6400:	e0bfdf04 	addi	r2,fp,-132
    6404:	e1bfb817 	ldw	r6,-288(fp)
    6408:	01420034 	movhi	r5,2048
    640c:	29409504 	addi	r5,r5,596
    6410:	1009883a 	mov	r4,r2
    6414:	00099840 	call	9984 <sprintf>
		sprintf(buffer4, "%u ", min);
    6418:	e0bfeb84 	addi	r2,fp,-82
    641c:	e1bfb917 	ldw	r6,-284(fp)
    6420:	01420034 	movhi	r5,2048
    6424:	29409504 	addi	r5,r5,596
    6428:	1009883a 	mov	r4,r2
    642c:	00099840 	call	9984 <sprintf>
		sprintf(buffer5, "%u ", temp);
    6430:	e0bff804 	addi	r2,fp,-32
    6434:	e1bfba17 	ldw	r6,-280(fp)
    6438:	01420034 	movhi	r5,2048
    643c:	29409504 	addi	r5,r5,596
    6440:	1009883a 	mov	r4,r2
    6444:	00099840 	call	9984 <sprintf>

		alt_up_char_buffer_string(char_buf, buffer1 , 30, 45);
    6448:	e0bfc604 	addi	r2,fp,-232
    644c:	01c00b44 	movi	r7,45
    6450:	01800784 	movi	r6,30
    6454:	100b883a 	mov	r5,r2
    6458:	e13fbd17 	ldw	r4,-268(fp)
    645c:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf, buffer2 , 30, 48);
    6460:	e0bfd284 	addi	r2,fp,-182
    6464:	01c00c04 	movi	r7,48
    6468:	01800784 	movi	r6,30
    646c:	100b883a 	mov	r5,r2
    6470:	e13fbd17 	ldw	r4,-268(fp)
    6474:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf, buffer3 , 40, 54);
    6478:	e0bfdf04 	addi	r2,fp,-132
    647c:	01c00d84 	movi	r7,54
    6480:	01800a04 	movi	r6,40
    6484:	100b883a 	mov	r5,r2
    6488:	e13fbd17 	ldw	r4,-268(fp)
    648c:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf, buffer4 , 50, 54);
    6490:	e0bfeb84 	addi	r2,fp,-82
    6494:	01c00d84 	movi	r7,54
    6498:	01800c84 	movi	r6,50
    649c:	100b883a 	mov	r5,r2
    64a0:	e13fbd17 	ldw	r4,-268(fp)
    64a4:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf, buffer5 , 60, 54);
    64a8:	e0bff804 	addi	r2,fp,-32
    64ac:	01c00d84 	movi	r7,54
    64b0:	01800f04 	movi	r6,60
    64b4:	100b883a 	mov	r5,r2
    64b8:	e13fbd17 	ldw	r4,-268(fp)
    64bc:	001cc240 	call	1cc24 <alt_up_char_buffer_string>

		if (Current_Stable == 1) {
    64c0:	d0a04397 	ldw	r2,-32498(gp)
    64c4:	10800058 	cmpnei	r2,r2,1
    64c8:	1000071e 	bne	r2,zero,64e8 <VGA_Task+0x524>
			alt_up_char_buffer_string(char_buf, "Stable  ", 40, 46);
    64cc:	01c00b84 	movi	r7,46
    64d0:	01800a04 	movi	r6,40
    64d4:	01420034 	movhi	r5,2048
    64d8:	29409604 	addi	r5,r5,600
    64dc:	e13fbd17 	ldw	r4,-268(fp)
    64e0:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
    64e4:	00000606 	br	6500 <VGA_Task+0x53c>
		} else {
			alt_up_char_buffer_string(char_buf, "Unstable", 40, 46);
    64e8:	01c00b84 	movi	r7,46
    64ec:	01800a04 	movi	r6,40
    64f0:	01420034 	movhi	r5,2048
    64f4:	29409904 	addi	r5,r5,612
    64f8:	e13fbd17 	ldw	r4,-268(fp)
    64fc:	001cc240 	call	1cc24 <alt_up_char_buffer_string>
		}

		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
    6500:	d8000215 	stw	zero,8(sp)
    6504:	d8000115 	stw	zero,4(sp)
    6508:	008031c4 	movi	r2,199
    650c:	d8800015 	stw	r2,0(sp)
    6510:	01c09fc4 	movi	r7,639
    6514:	000d883a 	mov	r6,zero
    6518:	01401944 	movi	r5,101
    651c:	e13fbc17 	ldw	r4,-272(fp)
    6520:	001d1640 	call	1d164 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);
    6524:	d8000215 	stw	zero,8(sp)
    6528:	d8000115 	stw	zero,4(sp)
    652c:	00804ac4 	movi	r2,299
    6530:	d8800015 	stw	r2,0(sp)
    6534:	01c09fc4 	movi	r7,639
    6538:	01803244 	movi	r6,201
    653c:	01401944 	movi	r5,101
    6540:	e13fbc17 	ldw	r4,-272(fp)
    6544:	001d1640 	call	1d164 <alt_up_pixel_buffer_dma_draw_box>

		for(j=0;j<5;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    6548:	e03fb715 	stw	zero,-292(fp)
    654c:	00011606 	br	69a8 <VGA_Task+0x9e4>
			if (((int)(Prev_Five_Freq[(j)%5]) > MIN_FREQ) && ((int)(Prev_Five_Freq[(j+1)%5]) > MIN_FREQ)){
    6550:	e0bfb717 	ldw	r2,-292(fp)
    6554:	00c00144 	movi	r3,5
    6558:	10c7283a 	div	r3,r2,r3
    655c:	18c00164 	muli	r3,r3,5
    6560:	10c7c83a 	sub	r3,r2,r3
    6564:	00820234 	movhi	r2,2056
    6568:	10bfe304 	addi	r2,r2,-116
    656c:	18c7883a 	add	r3,r3,r3
    6570:	18c7883a 	add	r3,r3,r3
    6574:	10c5883a 	add	r2,r2,r3
    6578:	10c00017 	ldw	r3,0(r2)
    657c:	1809883a 	mov	r4,r3
    6580:	00073680 	call	7368 <__fixsfsi>
    6584:	1009883a 	mov	r4,r2
    6588:	0008f540 	call	8f54 <__floatsidf>
    658c:	1011883a 	mov	r8,r2
    6590:	1813883a 	mov	r9,r3
    6594:	000d883a 	mov	r6,zero
    6598:	01d011f4 	movhi	r7,16455
    659c:	39e00004 	addi	r7,r7,-32768
    65a0:	4009883a 	mov	r4,r8
    65a4:	480b883a 	mov	r5,r9
    65a8:	0007de40 	call	7de4 <__gedf2>
    65ac:	0080fb0e 	bge	zero,r2,699c <VGA_Task+0x9d8>
    65b0:	e0bfb717 	ldw	r2,-292(fp)
    65b4:	10800044 	addi	r2,r2,1
    65b8:	00c00144 	movi	r3,5
    65bc:	10c7283a 	div	r3,r2,r3
    65c0:	18c00164 	muli	r3,r3,5
    65c4:	10c7c83a 	sub	r3,r2,r3
    65c8:	00820234 	movhi	r2,2056
    65cc:	10bfe304 	addi	r2,r2,-116
    65d0:	18c7883a 	add	r3,r3,r3
    65d4:	18c7883a 	add	r3,r3,r3
    65d8:	10c5883a 	add	r2,r2,r3
    65dc:	10c00017 	ldw	r3,0(r2)
    65e0:	1809883a 	mov	r4,r3
    65e4:	00073680 	call	7368 <__fixsfsi>
    65e8:	1009883a 	mov	r4,r2
    65ec:	0008f540 	call	8f54 <__floatsidf>
    65f0:	1011883a 	mov	r8,r2
    65f4:	1813883a 	mov	r9,r3
    65f8:	000d883a 	mov	r6,zero
    65fc:	01d011f4 	movhi	r7,16455
    6600:	39e00004 	addi	r7,r7,-32768
    6604:	4009883a 	mov	r4,r8
    6608:	480b883a 	mov	r5,r9
    660c:	0007de40 	call	7de4 <__gedf2>
    6610:	0080e20e 	bge	zero,r2,699c <VGA_Task+0x9d8>
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
    6614:	e0bfb717 	ldw	r2,-292(fp)
    6618:	10800ca4 	muli	r2,r2,50
    661c:	10801944 	addi	r2,r2,101
    6620:	e0bfbe15 	stw	r2,-264(fp)
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (Prev_Five_Freq[(j)%5] - MIN_FREQ));
    6624:	e0bfb717 	ldw	r2,-292(fp)
    6628:	00c00144 	movi	r3,5
    662c:	10c7283a 	div	r3,r2,r3
    6630:	18c00164 	muli	r3,r3,5
    6634:	10c7c83a 	sub	r3,r2,r3
    6638:	00820234 	movhi	r2,2056
    663c:	10bfe304 	addi	r2,r2,-116
    6640:	18c7883a 	add	r3,r3,r3
    6644:	18c7883a 	add	r3,r3,r3
    6648:	10c5883a 	add	r2,r2,r3
    664c:	10c00017 	ldw	r3,0(r2)
    6650:	1809883a 	mov	r4,r3
    6654:	00090300 	call	9030 <__extendsfdf2>
    6658:	1011883a 	mov	r8,r2
    665c:	1813883a 	mov	r9,r3
    6660:	000d883a 	mov	r6,zero
    6664:	01d011f4 	movhi	r7,16455
    6668:	39e00004 	addi	r7,r7,-32768
    666c:	4009883a 	mov	r4,r8
    6670:	480b883a 	mov	r5,r9
    6674:	00085d80 	call	85d8 <__subdf3>
    6678:	1009883a 	mov	r4,r2
    667c:	180b883a 	mov	r5,r3
    6680:	2005883a 	mov	r2,r4
    6684:	2807883a 	mov	r3,r5
    6688:	000d883a 	mov	r6,zero
    668c:	01d00d34 	movhi	r7,16436
    6690:	1009883a 	mov	r4,r2
    6694:	180b883a 	mov	r5,r3
    6698:	0007ec00 	call	7ec0 <__muldf3>
    669c:	1009883a 	mov	r4,r2
    66a0:	180b883a 	mov	r5,r3
    66a4:	2005883a 	mov	r2,r4
    66a8:	2807883a 	mov	r3,r5
    66ac:	100d883a 	mov	r6,r2
    66b0:	180f883a 	mov	r7,r3
    66b4:	0009883a 	mov	r4,zero
    66b8:	01501a74 	movhi	r5,16489
    66bc:	29780004 	addi	r5,r5,-8192
    66c0:	00085d80 	call	85d8 <__subdf3>
    66c4:	1009883a 	mov	r4,r2
    66c8:	180b883a 	mov	r5,r3
    66cc:	2005883a 	mov	r2,r4
    66d0:	2807883a 	mov	r3,r5
    66d4:	1009883a 	mov	r4,r2
    66d8:	180b883a 	mov	r5,r3
    66dc:	0008ed40 	call	8ed4 <__fixdfsi>
    66e0:	e0bfbf15 	stw	r2,-260(fp)

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
    66e4:	e0bfb717 	ldw	r2,-292(fp)
    66e8:	10800044 	addi	r2,r2,1
    66ec:	10800ca4 	muli	r2,r2,50
    66f0:	10801944 	addi	r2,r2,101
    66f4:	e0bfc015 	stw	r2,-256(fp)
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (Prev_Five_Freq[(j+1)%5] - MIN_FREQ));
    66f8:	e0bfb717 	ldw	r2,-292(fp)
    66fc:	10800044 	addi	r2,r2,1
    6700:	00c00144 	movi	r3,5
    6704:	10c7283a 	div	r3,r2,r3
    6708:	18c00164 	muli	r3,r3,5
    670c:	10c7c83a 	sub	r3,r2,r3
    6710:	00820234 	movhi	r2,2056
    6714:	10bfe304 	addi	r2,r2,-116
    6718:	18c7883a 	add	r3,r3,r3
    671c:	18c7883a 	add	r3,r3,r3
    6720:	10c5883a 	add	r2,r2,r3
    6724:	10c00017 	ldw	r3,0(r2)
    6728:	1809883a 	mov	r4,r3
    672c:	00090300 	call	9030 <__extendsfdf2>
    6730:	1011883a 	mov	r8,r2
    6734:	1813883a 	mov	r9,r3
    6738:	000d883a 	mov	r6,zero
    673c:	01d011f4 	movhi	r7,16455
    6740:	39e00004 	addi	r7,r7,-32768
    6744:	4009883a 	mov	r4,r8
    6748:	480b883a 	mov	r5,r9
    674c:	00085d80 	call	85d8 <__subdf3>
    6750:	1009883a 	mov	r4,r2
    6754:	180b883a 	mov	r5,r3
    6758:	2005883a 	mov	r2,r4
    675c:	2807883a 	mov	r3,r5
    6760:	000d883a 	mov	r6,zero
    6764:	01d00d34 	movhi	r7,16436
    6768:	1009883a 	mov	r4,r2
    676c:	180b883a 	mov	r5,r3
    6770:	0007ec00 	call	7ec0 <__muldf3>
    6774:	1009883a 	mov	r4,r2
    6778:	180b883a 	mov	r5,r3
    677c:	2005883a 	mov	r2,r4
    6780:	2807883a 	mov	r3,r5
    6784:	100d883a 	mov	r6,r2
    6788:	180f883a 	mov	r7,r3
    678c:	0009883a 	mov	r4,zero
    6790:	01501a74 	movhi	r5,16489
    6794:	29780004 	addi	r5,r5,-8192
    6798:	00085d80 	call	85d8 <__subdf3>
    679c:	1009883a 	mov	r4,r2
    67a0:	180b883a 	mov	r5,r3
    67a4:	2005883a 	mov	r2,r4
    67a8:	2807883a 	mov	r3,r5
    67ac:	1009883a 	mov	r4,r2
    67b0:	180b883a 	mov	r5,r3
    67b4:	0008ed40 	call	8ed4 <__fixdfsi>
    67b8:	e0bfc115 	stw	r2,-252(fp)

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
    67bc:	e0bfb717 	ldw	r2,-292(fp)
    67c0:	10800ca4 	muli	r2,r2,50
    67c4:	10801944 	addi	r2,r2,101
    67c8:	e0bfc215 	stw	r2,-248(fp)
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * Current_ROC_Freq[(j)%5]);
    67cc:	e0bfb717 	ldw	r2,-292(fp)
    67d0:	00c00144 	movi	r3,5
    67d4:	10c7283a 	div	r3,r2,r3
    67d8:	18c00164 	muli	r3,r3,5
    67dc:	10c7c83a 	sub	r3,r2,r3
    67e0:	00820234 	movhi	r2,2056
    67e4:	10bfe804 	addi	r2,r2,-96
    67e8:	18c7883a 	add	r3,r3,r3
    67ec:	18c7883a 	add	r3,r3,r3
    67f0:	10c5883a 	add	r2,r2,r3
    67f4:	10c00017 	ldw	r3,0(r2)
    67f8:	1809883a 	mov	r4,r3
    67fc:	00090300 	call	9030 <__extendsfdf2>
    6800:	1011883a 	mov	r8,r2
    6804:	1813883a 	mov	r9,r3
    6808:	000d883a 	mov	r6,zero
    680c:	01cff834 	movhi	r7,16352
    6810:	4009883a 	mov	r4,r8
    6814:	480b883a 	mov	r5,r9
    6818:	0007ec00 	call	7ec0 <__muldf3>
    681c:	1009883a 	mov	r4,r2
    6820:	180b883a 	mov	r5,r3
    6824:	2005883a 	mov	r2,r4
    6828:	2807883a 	mov	r3,r5
    682c:	100d883a 	mov	r6,r2
    6830:	180f883a 	mov	r7,r3
    6834:	0009883a 	mov	r4,zero
    6838:	01501c34 	movhi	r5,16496
    683c:	294c0004 	addi	r5,r5,12288
    6840:	00085d80 	call	85d8 <__subdf3>
    6844:	1009883a 	mov	r4,r2
    6848:	180b883a 	mov	r5,r3
    684c:	2005883a 	mov	r2,r4
    6850:	2807883a 	mov	r3,r5
    6854:	1009883a 	mov	r4,r2
    6858:	180b883a 	mov	r5,r3
    685c:	0008ed40 	call	8ed4 <__fixdfsi>
    6860:	e0bfc315 	stw	r2,-244(fp)

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
    6864:	e0bfb717 	ldw	r2,-292(fp)
    6868:	10800044 	addi	r2,r2,1
    686c:	10800ca4 	muli	r2,r2,50
    6870:	10801944 	addi	r2,r2,101
    6874:	e0bfc415 	stw	r2,-240(fp)
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * Current_ROC_Freq[(j+1)%5]);
    6878:	e0bfb717 	ldw	r2,-292(fp)
    687c:	10800044 	addi	r2,r2,1
    6880:	00c00144 	movi	r3,5
    6884:	10c7283a 	div	r3,r2,r3
    6888:	18c00164 	muli	r3,r3,5
    688c:	10c7c83a 	sub	r3,r2,r3
    6890:	00820234 	movhi	r2,2056
    6894:	10bfe804 	addi	r2,r2,-96
    6898:	18c7883a 	add	r3,r3,r3
    689c:	18c7883a 	add	r3,r3,r3
    68a0:	10c5883a 	add	r2,r2,r3
    68a4:	10c00017 	ldw	r3,0(r2)
    68a8:	1809883a 	mov	r4,r3
    68ac:	00090300 	call	9030 <__extendsfdf2>
    68b0:	1011883a 	mov	r8,r2
    68b4:	1813883a 	mov	r9,r3
    68b8:	000d883a 	mov	r6,zero
    68bc:	01cff834 	movhi	r7,16352
    68c0:	4009883a 	mov	r4,r8
    68c4:	480b883a 	mov	r5,r9
    68c8:	0007ec00 	call	7ec0 <__muldf3>
    68cc:	1009883a 	mov	r4,r2
    68d0:	180b883a 	mov	r5,r3
    68d4:	2005883a 	mov	r2,r4
    68d8:	2807883a 	mov	r3,r5
    68dc:	100d883a 	mov	r6,r2
    68e0:	180f883a 	mov	r7,r3
    68e4:	0009883a 	mov	r4,zero
    68e8:	01501c34 	movhi	r5,16496
    68ec:	294c0004 	addi	r5,r5,12288
    68f0:	00085d80 	call	85d8 <__subdf3>
    68f4:	1009883a 	mov	r4,r2
    68f8:	180b883a 	mov	r5,r3
    68fc:	2005883a 	mov	r2,r4
    6900:	2807883a 	mov	r3,r5
    6904:	1009883a 	mov	r4,r2
    6908:	180b883a 	mov	r5,r3
    690c:	0008ed40 	call	8ed4 <__fixdfsi>
    6910:	e0bfc515 	stw	r2,-236(fp)

				//printf("first: %f\n", Prev_Five_Freq[0]);
				//printf("last value: %f\n", Prev_Five_Freq[4]);
				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
    6914:	e0bfbe17 	ldw	r2,-264(fp)
    6918:	1009883a 	mov	r4,r2
    691c:	e0bfbf17 	ldw	r2,-260(fp)
    6920:	100b883a 	mov	r5,r2
    6924:	e0bfc017 	ldw	r2,-256(fp)
    6928:	100d883a 	mov	r6,r2
    692c:	e0bfc117 	ldw	r2,-252(fp)
    6930:	1007883a 	mov	r3,r2
    6934:	d8000215 	stw	zero,8(sp)
    6938:	0080ffc4 	movi	r2,1023
    693c:	d8800115 	stw	r2,4(sp)
    6940:	d8c00015 	stw	r3,0(sp)
    6944:	300f883a 	mov	r7,r6
    6948:	280d883a 	mov	r6,r5
    694c:	200b883a 	mov	r5,r4
    6950:	e13fbc17 	ldw	r4,-272(fp)
    6954:	001d9e80 	call	1d9e8 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
    6958:	e0bfc217 	ldw	r2,-248(fp)
    695c:	1009883a 	mov	r4,r2
    6960:	e0bfc317 	ldw	r2,-244(fp)
    6964:	100b883a 	mov	r5,r2
    6968:	e0bfc417 	ldw	r2,-240(fp)
    696c:	100d883a 	mov	r6,r2
    6970:	e0bfc517 	ldw	r2,-236(fp)
    6974:	1007883a 	mov	r3,r2
    6978:	d8000215 	stw	zero,8(sp)
    697c:	0080ffc4 	movi	r2,1023
    6980:	d8800115 	stw	r2,4(sp)
    6984:	d8c00015 	stw	r3,0(sp)
    6988:	300f883a 	mov	r7,r6
    698c:	280d883a 	mov	r6,r5
    6990:	200b883a 	mov	r5,r4
    6994:	e13fbc17 	ldw	r4,-272(fp)
    6998:	001d9e80 	call	1d9e8 <alt_up_pixel_buffer_dma_draw_line>
		}

		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		for(j=0;j<5;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    699c:	e0bfb717 	ldw	r2,-292(fp)
    69a0:	10800044 	addi	r2,r2,1
    69a4:	e0bfb715 	stw	r2,-292(fp)
    69a8:	e0bfb717 	ldw	r2,-292(fp)
    69ac:	10800150 	cmplti	r2,r2,5
    69b0:	103ee71e 	bne	r2,zero,6550 <__alt_data_end+0xf0006550>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}

		vTaskDelay(pdMS_TO_TICKS(500));
    69b4:	01007d04 	movi	r4,500
    69b8:	0002e0c0 	call	2e0c <vTaskDelay>

	}
    69bc:	003e3106 	br	6284 <__alt_data_end+0xf0006284>

000069c0 <__lesf2>:
    69c0:	2004d5fa 	srli	r2,r4,23
    69c4:	280cd5fa 	srli	r6,r5,23
    69c8:	00c02034 	movhi	r3,128
    69cc:	18ffffc4 	addi	r3,r3,-1
    69d0:	10803fcc 	andi	r2,r2,255
    69d4:	01c03fc4 	movi	r7,255
    69d8:	1910703a 	and	r8,r3,r4
    69dc:	31803fcc 	andi	r6,r6,255
    69e0:	1946703a 	and	r3,r3,r5
    69e4:	2008d7fa 	srli	r4,r4,31
    69e8:	280ad7fa 	srli	r5,r5,31
    69ec:	11c01b26 	beq	r2,r7,6a5c <__lesf2+0x9c>
    69f0:	01c03fc4 	movi	r7,255
    69f4:	31c01126 	beq	r6,r7,6a3c <__lesf2+0x7c>
    69f8:	1000071e 	bne	r2,zero,6a18 <__lesf2+0x58>
    69fc:	400f003a 	cmpeq	r7,r8,zero
    6a00:	21003fcc 	andi	r4,r4,255
    6a04:	3000081e 	bne	r6,zero,6a28 <__lesf2+0x68>
    6a08:	1800071e 	bne	r3,zero,6a28 <__lesf2+0x68>
    6a0c:	0005883a 	mov	r2,zero
    6a10:	40000f1e 	bne	r8,zero,6a50 <__lesf2+0x90>
    6a14:	f800283a 	ret
    6a18:	21003fcc 	andi	r4,r4,255
    6a1c:	30000a1e 	bne	r6,zero,6a48 <__lesf2+0x88>
    6a20:	18000b26 	beq	r3,zero,6a50 <__lesf2+0x90>
    6a24:	000f883a 	mov	r7,zero
    6a28:	29403fcc 	andi	r5,r5,255
    6a2c:	38000726 	beq	r7,zero,6a4c <__lesf2+0x8c>
    6a30:	28000826 	beq	r5,zero,6a54 <__lesf2+0x94>
    6a34:	00800044 	movi	r2,1
    6a38:	f800283a 	ret
    6a3c:	183fee26 	beq	r3,zero,69f8 <__alt_data_end+0xf00069f8>
    6a40:	00800084 	movi	r2,2
    6a44:	f800283a 	ret
    6a48:	29403fcc 	andi	r5,r5,255
    6a4c:	21400626 	beq	r4,r5,6a68 <__lesf2+0xa8>
    6a50:	203ff826 	beq	r4,zero,6a34 <__alt_data_end+0xf0006a34>
    6a54:	00bfffc4 	movi	r2,-1
    6a58:	f800283a 	ret
    6a5c:	403fe426 	beq	r8,zero,69f0 <__alt_data_end+0xf00069f0>
    6a60:	00800084 	movi	r2,2
    6a64:	f800283a 	ret
    6a68:	30bff916 	blt	r6,r2,6a50 <__alt_data_end+0xf0006a50>
    6a6c:	11800216 	blt	r2,r6,6a78 <__lesf2+0xb8>
    6a70:	1a3ff736 	bltu	r3,r8,6a50 <__alt_data_end+0xf0006a50>
    6a74:	40c0022e 	bgeu	r8,r3,6a80 <__lesf2+0xc0>
    6a78:	203fee1e 	bne	r4,zero,6a34 <__alt_data_end+0xf0006a34>
    6a7c:	003ff506 	br	6a54 <__alt_data_end+0xf0006a54>
    6a80:	0005883a 	mov	r2,zero
    6a84:	f800283a 	ret

00006a88 <__mulsf3>:
    6a88:	defff504 	addi	sp,sp,-44
    6a8c:	dc000115 	stw	r16,4(sp)
    6a90:	2020d5fa 	srli	r16,r4,23
    6a94:	dd400615 	stw	r21,24(sp)
    6a98:	202ad7fa 	srli	r21,r4,31
    6a9c:	dc800315 	stw	r18,12(sp)
    6aa0:	04802034 	movhi	r18,128
    6aa4:	df000915 	stw	fp,36(sp)
    6aa8:	dd000515 	stw	r20,20(sp)
    6aac:	94bfffc4 	addi	r18,r18,-1
    6ab0:	dfc00a15 	stw	ra,40(sp)
    6ab4:	ddc00815 	stw	r23,32(sp)
    6ab8:	dd800715 	stw	r22,28(sp)
    6abc:	dcc00415 	stw	r19,16(sp)
    6ac0:	dc400215 	stw	r17,8(sp)
    6ac4:	84003fcc 	andi	r16,r16,255
    6ac8:	9124703a 	and	r18,r18,r4
    6acc:	a829883a 	mov	r20,r21
    6ad0:	af003fcc 	andi	fp,r21,255
    6ad4:	80005426 	beq	r16,zero,6c28 <__mulsf3+0x1a0>
    6ad8:	00803fc4 	movi	r2,255
    6adc:	80802f26 	beq	r16,r2,6b9c <__mulsf3+0x114>
    6ae0:	91002034 	orhi	r4,r18,128
    6ae4:	202490fa 	slli	r18,r4,3
    6ae8:	843fe044 	addi	r16,r16,-127
    6aec:	0023883a 	mov	r17,zero
    6af0:	002f883a 	mov	r23,zero
    6af4:	2804d5fa 	srli	r2,r5,23
    6af8:	282cd7fa 	srli	r22,r5,31
    6afc:	01002034 	movhi	r4,128
    6b00:	213fffc4 	addi	r4,r4,-1
    6b04:	10803fcc 	andi	r2,r2,255
    6b08:	2166703a 	and	r19,r4,r5
    6b0c:	b1803fcc 	andi	r6,r22,255
    6b10:	10004c26 	beq	r2,zero,6c44 <__mulsf3+0x1bc>
    6b14:	00c03fc4 	movi	r3,255
    6b18:	10c04726 	beq	r2,r3,6c38 <__mulsf3+0x1b0>
    6b1c:	99002034 	orhi	r4,r19,128
    6b20:	202690fa 	slli	r19,r4,3
    6b24:	10bfe044 	addi	r2,r2,-127
    6b28:	0007883a 	mov	r3,zero
    6b2c:	80a1883a 	add	r16,r16,r2
    6b30:	010003c4 	movi	r4,15
    6b34:	1c44b03a 	or	r2,r3,r17
    6b38:	b56af03a 	xor	r21,r22,r21
    6b3c:	81c00044 	addi	r7,r16,1
    6b40:	20806b36 	bltu	r4,r2,6cf0 <__mulsf3+0x268>
    6b44:	100490ba 	slli	r2,r2,2
    6b48:	01000034 	movhi	r4,0
    6b4c:	211ad704 	addi	r4,r4,27484
    6b50:	1105883a 	add	r2,r2,r4
    6b54:	10800017 	ldw	r2,0(r2)
    6b58:	1000683a 	jmp	r2
    6b5c:	00006cf0 	cmpltui	zero,zero,435
    6b60:	00006bb0 	cmpltui	zero,zero,430
    6b64:	00006bb0 	cmpltui	zero,zero,430
    6b68:	00006bac 	andhi	zero,zero,430
    6b6c:	00006cd4 	movui	zero,435
    6b70:	00006cd4 	movui	zero,435
    6b74:	00006cc0 	call	6cc <prvCheckDelayedList+0x154>
    6b78:	00006bac 	andhi	zero,zero,430
    6b7c:	00006cd4 	movui	zero,435
    6b80:	00006cc0 	call	6cc <prvCheckDelayedList+0x154>
    6b84:	00006cd4 	movui	zero,435
    6b88:	00006bac 	andhi	zero,zero,430
    6b8c:	00006ce0 	cmpeqi	zero,zero,435
    6b90:	00006ce0 	cmpeqi	zero,zero,435
    6b94:	00006ce0 	cmpeqi	zero,zero,435
    6b98:	00006dbc 	xorhi	zero,zero,438
    6b9c:	90003b1e 	bne	r18,zero,6c8c <__mulsf3+0x204>
    6ba0:	04400204 	movi	r17,8
    6ba4:	05c00084 	movi	r23,2
    6ba8:	003fd206 	br	6af4 <__alt_data_end+0xf0006af4>
    6bac:	302b883a 	mov	r21,r6
    6bb0:	00800084 	movi	r2,2
    6bb4:	18802626 	beq	r3,r2,6c50 <__mulsf3+0x1c8>
    6bb8:	008000c4 	movi	r2,3
    6bbc:	1880ab26 	beq	r3,r2,6e6c <__mulsf3+0x3e4>
    6bc0:	00800044 	movi	r2,1
    6bc4:	1880a21e 	bne	r3,r2,6e50 <__mulsf3+0x3c8>
    6bc8:	a829883a 	mov	r20,r21
    6bcc:	0007883a 	mov	r3,zero
    6bd0:	0009883a 	mov	r4,zero
    6bd4:	18803fcc 	andi	r2,r3,255
    6bd8:	100695fa 	slli	r3,r2,23
    6bdc:	a0803fcc 	andi	r2,r20,255
    6be0:	100a97fa 	slli	r5,r2,31
    6be4:	00802034 	movhi	r2,128
    6be8:	10bfffc4 	addi	r2,r2,-1
    6bec:	2084703a 	and	r2,r4,r2
    6bf0:	10c4b03a 	or	r2,r2,r3
    6bf4:	1144b03a 	or	r2,r2,r5
    6bf8:	dfc00a17 	ldw	ra,40(sp)
    6bfc:	df000917 	ldw	fp,36(sp)
    6c00:	ddc00817 	ldw	r23,32(sp)
    6c04:	dd800717 	ldw	r22,28(sp)
    6c08:	dd400617 	ldw	r21,24(sp)
    6c0c:	dd000517 	ldw	r20,20(sp)
    6c10:	dcc00417 	ldw	r19,16(sp)
    6c14:	dc800317 	ldw	r18,12(sp)
    6c18:	dc400217 	ldw	r17,8(sp)
    6c1c:	dc000117 	ldw	r16,4(sp)
    6c20:	dec00b04 	addi	sp,sp,44
    6c24:	f800283a 	ret
    6c28:	90000d1e 	bne	r18,zero,6c60 <__mulsf3+0x1d8>
    6c2c:	04400104 	movi	r17,4
    6c30:	05c00044 	movi	r23,1
    6c34:	003faf06 	br	6af4 <__alt_data_end+0xf0006af4>
    6c38:	9806c03a 	cmpne	r3,r19,zero
    6c3c:	18c00084 	addi	r3,r3,2
    6c40:	003fba06 	br	6b2c <__alt_data_end+0xf0006b2c>
    6c44:	9800141e 	bne	r19,zero,6c98 <__mulsf3+0x210>
    6c48:	00c00044 	movi	r3,1
    6c4c:	003fb706 	br	6b2c <__alt_data_end+0xf0006b2c>
    6c50:	a829883a 	mov	r20,r21
    6c54:	00ffffc4 	movi	r3,-1
    6c58:	0009883a 	mov	r4,zero
    6c5c:	003fdd06 	br	6bd4 <__alt_data_end+0xf0006bd4>
    6c60:	9009883a 	mov	r4,r18
    6c64:	d9400015 	stw	r5,0(sp)
    6c68:	00092e80 	call	92e8 <__clzsi2>
    6c6c:	10fffec4 	addi	r3,r2,-5
    6c70:	10801d84 	addi	r2,r2,118
    6c74:	90e4983a 	sll	r18,r18,r3
    6c78:	00a1c83a 	sub	r16,zero,r2
    6c7c:	0023883a 	mov	r17,zero
    6c80:	002f883a 	mov	r23,zero
    6c84:	d9400017 	ldw	r5,0(sp)
    6c88:	003f9a06 	br	6af4 <__alt_data_end+0xf0006af4>
    6c8c:	04400304 	movi	r17,12
    6c90:	05c000c4 	movi	r23,3
    6c94:	003f9706 	br	6af4 <__alt_data_end+0xf0006af4>
    6c98:	9809883a 	mov	r4,r19
    6c9c:	d9800015 	stw	r6,0(sp)
    6ca0:	00092e80 	call	92e8 <__clzsi2>
    6ca4:	10fffec4 	addi	r3,r2,-5
    6ca8:	10801d84 	addi	r2,r2,118
    6cac:	98e6983a 	sll	r19,r19,r3
    6cb0:	0085c83a 	sub	r2,zero,r2
    6cb4:	0007883a 	mov	r3,zero
    6cb8:	d9800017 	ldw	r6,0(sp)
    6cbc:	003f9b06 	br	6b2c <__alt_data_end+0xf0006b2c>
    6cc0:	01002034 	movhi	r4,128
    6cc4:	0029883a 	mov	r20,zero
    6cc8:	213fffc4 	addi	r4,r4,-1
    6ccc:	00ffffc4 	movi	r3,-1
    6cd0:	003fc006 	br	6bd4 <__alt_data_end+0xf0006bd4>
    6cd4:	9027883a 	mov	r19,r18
    6cd8:	b807883a 	mov	r3,r23
    6cdc:	003fb406 	br	6bb0 <__alt_data_end+0xf0006bb0>
    6ce0:	9027883a 	mov	r19,r18
    6ce4:	e02b883a 	mov	r21,fp
    6ce8:	b807883a 	mov	r3,r23
    6cec:	003fb006 	br	6bb0 <__alt_data_end+0xf0006bb0>
    6cf0:	9004d43a 	srli	r2,r18,16
    6cf4:	9810d43a 	srli	r8,r19,16
    6cf8:	94bfffcc 	andi	r18,r18,65535
    6cfc:	993fffcc 	andi	r4,r19,65535
    6d00:	910d383a 	mul	r6,r18,r4
    6d04:	20a7383a 	mul	r19,r4,r2
    6d08:	9225383a 	mul	r18,r18,r8
    6d0c:	3006d43a 	srli	r3,r6,16
    6d10:	1211383a 	mul	r8,r2,r8
    6d14:	94e5883a 	add	r18,r18,r19
    6d18:	1c87883a 	add	r3,r3,r18
    6d1c:	1cc0022e 	bgeu	r3,r19,6d28 <__mulsf3+0x2a0>
    6d20:	00800074 	movhi	r2,1
    6d24:	4091883a 	add	r8,r8,r2
    6d28:	1804943a 	slli	r2,r3,16
    6d2c:	31bfffcc 	andi	r6,r6,65535
    6d30:	1806d43a 	srli	r3,r3,16
    6d34:	1185883a 	add	r2,r2,r6
    6d38:	102691ba 	slli	r19,r2,6
    6d3c:	1a07883a 	add	r3,r3,r8
    6d40:	1004d6ba 	srli	r2,r2,26
    6d44:	180891ba 	slli	r4,r3,6
    6d48:	9826c03a 	cmpne	r19,r19,zero
    6d4c:	9884b03a 	or	r2,r19,r2
    6d50:	1126b03a 	or	r19,r2,r4
    6d54:	9882002c 	andhi	r2,r19,2048
    6d58:	10000426 	beq	r2,zero,6d6c <__mulsf3+0x2e4>
    6d5c:	9804d07a 	srli	r2,r19,1
    6d60:	9900004c 	andi	r4,r19,1
    6d64:	3821883a 	mov	r16,r7
    6d68:	1126b03a 	or	r19,r2,r4
    6d6c:	80c01fc4 	addi	r3,r16,127
    6d70:	00c0210e 	bge	zero,r3,6df8 <__mulsf3+0x370>
    6d74:	988001cc 	andi	r2,r19,7
    6d78:	10000426 	beq	r2,zero,6d8c <__mulsf3+0x304>
    6d7c:	988003cc 	andi	r2,r19,15
    6d80:	01000104 	movi	r4,4
    6d84:	11000126 	beq	r2,r4,6d8c <__mulsf3+0x304>
    6d88:	9927883a 	add	r19,r19,r4
    6d8c:	9882002c 	andhi	r2,r19,2048
    6d90:	10000426 	beq	r2,zero,6da4 <__mulsf3+0x31c>
    6d94:	00be0034 	movhi	r2,63488
    6d98:	10bfffc4 	addi	r2,r2,-1
    6d9c:	80c02004 	addi	r3,r16,128
    6da0:	98a6703a 	and	r19,r19,r2
    6da4:	00803f84 	movi	r2,254
    6da8:	10ffa916 	blt	r2,r3,6c50 <__alt_data_end+0xf0006c50>
    6dac:	980891ba 	slli	r4,r19,6
    6db0:	a829883a 	mov	r20,r21
    6db4:	2008d27a 	srli	r4,r4,9
    6db8:	003f8606 	br	6bd4 <__alt_data_end+0xf0006bd4>
    6dbc:	9080102c 	andhi	r2,r18,64
    6dc0:	10000826 	beq	r2,zero,6de4 <__mulsf3+0x35c>
    6dc4:	9880102c 	andhi	r2,r19,64
    6dc8:	1000061e 	bne	r2,zero,6de4 <__mulsf3+0x35c>
    6dcc:	00802034 	movhi	r2,128
    6dd0:	99001034 	orhi	r4,r19,64
    6dd4:	10bfffc4 	addi	r2,r2,-1
    6dd8:	b029883a 	mov	r20,r22
    6ddc:	2088703a 	and	r4,r4,r2
    6de0:	003fba06 	br	6ccc <__alt_data_end+0xf0006ccc>
    6de4:	00802034 	movhi	r2,128
    6de8:	91001034 	orhi	r4,r18,64
    6dec:	10bfffc4 	addi	r2,r2,-1
    6df0:	2088703a 	and	r4,r4,r2
    6df4:	003fb506 	br	6ccc <__alt_data_end+0xf0006ccc>
    6df8:	00800044 	movi	r2,1
    6dfc:	10c7c83a 	sub	r3,r2,r3
    6e00:	008006c4 	movi	r2,27
    6e04:	10ff7016 	blt	r2,r3,6bc8 <__alt_data_end+0xf0006bc8>
    6e08:	00800804 	movi	r2,32
    6e0c:	10c5c83a 	sub	r2,r2,r3
    6e10:	9884983a 	sll	r2,r19,r2
    6e14:	98c6d83a 	srl	r3,r19,r3
    6e18:	1004c03a 	cmpne	r2,r2,zero
    6e1c:	1884b03a 	or	r2,r3,r2
    6e20:	10c001cc 	andi	r3,r2,7
    6e24:	18000426 	beq	r3,zero,6e38 <__mulsf3+0x3b0>
    6e28:	10c003cc 	andi	r3,r2,15
    6e2c:	01000104 	movi	r4,4
    6e30:	19000126 	beq	r3,r4,6e38 <__mulsf3+0x3b0>
    6e34:	1105883a 	add	r2,r2,r4
    6e38:	10c1002c 	andhi	r3,r2,1024
    6e3c:	18000626 	beq	r3,zero,6e58 <__mulsf3+0x3d0>
    6e40:	a829883a 	mov	r20,r21
    6e44:	00c00044 	movi	r3,1
    6e48:	0009883a 	mov	r4,zero
    6e4c:	003f6106 	br	6bd4 <__alt_data_end+0xf0006bd4>
    6e50:	3821883a 	mov	r16,r7
    6e54:	003fc506 	br	6d6c <__alt_data_end+0xf0006d6c>
    6e58:	100491ba 	slli	r2,r2,6
    6e5c:	a829883a 	mov	r20,r21
    6e60:	0007883a 	mov	r3,zero
    6e64:	1008d27a 	srli	r4,r2,9
    6e68:	003f5a06 	br	6bd4 <__alt_data_end+0xf0006bd4>
    6e6c:	00802034 	movhi	r2,128
    6e70:	99001034 	orhi	r4,r19,64
    6e74:	10bfffc4 	addi	r2,r2,-1
    6e78:	a829883a 	mov	r20,r21
    6e7c:	2088703a 	and	r4,r4,r2
    6e80:	003f9206 	br	6ccc <__alt_data_end+0xf0006ccc>

00006e84 <__subsf3>:
    6e84:	defffc04 	addi	sp,sp,-16
    6e88:	280cd5fa 	srli	r6,r5,23
    6e8c:	dc000015 	stw	r16,0(sp)
    6e90:	01c02034 	movhi	r7,128
    6e94:	2020d5fa 	srli	r16,r4,23
    6e98:	39ffffc4 	addi	r7,r7,-1
    6e9c:	3906703a 	and	r3,r7,r4
    6ea0:	dc400115 	stw	r17,4(sp)
    6ea4:	394e703a 	and	r7,r7,r5
    6ea8:	2022d7fa 	srli	r17,r4,31
    6eac:	dfc00315 	stw	ra,12(sp)
    6eb0:	dc800215 	stw	r18,8(sp)
    6eb4:	31803fcc 	andi	r6,r6,255
    6eb8:	01003fc4 	movi	r4,255
    6ebc:	84003fcc 	andi	r16,r16,255
    6ec0:	180690fa 	slli	r3,r3,3
    6ec4:	2804d7fa 	srli	r2,r5,31
    6ec8:	380e90fa 	slli	r7,r7,3
    6ecc:	31006d26 	beq	r6,r4,7084 <__subsf3+0x200>
    6ed0:	1080005c 	xori	r2,r2,1
    6ed4:	8189c83a 	sub	r4,r16,r6
    6ed8:	14404f26 	beq	r2,r17,7018 <__subsf3+0x194>
    6edc:	0100770e 	bge	zero,r4,70bc <__subsf3+0x238>
    6ee0:	30001e1e 	bne	r6,zero,6f5c <__subsf3+0xd8>
    6ee4:	38006a1e 	bne	r7,zero,7090 <__subsf3+0x20c>
    6ee8:	188001cc 	andi	r2,r3,7
    6eec:	10000426 	beq	r2,zero,6f00 <__subsf3+0x7c>
    6ef0:	188003cc 	andi	r2,r3,15
    6ef4:	01000104 	movi	r4,4
    6ef8:	11000126 	beq	r2,r4,6f00 <__subsf3+0x7c>
    6efc:	1907883a 	add	r3,r3,r4
    6f00:	1881002c 	andhi	r2,r3,1024
    6f04:	10003926 	beq	r2,zero,6fec <__subsf3+0x168>
    6f08:	84000044 	addi	r16,r16,1
    6f0c:	00803fc4 	movi	r2,255
    6f10:	80807526 	beq	r16,r2,70e8 <__subsf3+0x264>
    6f14:	180691ba 	slli	r3,r3,6
    6f18:	8880004c 	andi	r2,r17,1
    6f1c:	180ad27a 	srli	r5,r3,9
    6f20:	84003fcc 	andi	r16,r16,255
    6f24:	800695fa 	slli	r3,r16,23
    6f28:	10803fcc 	andi	r2,r2,255
    6f2c:	01002034 	movhi	r4,128
    6f30:	213fffc4 	addi	r4,r4,-1
    6f34:	100497fa 	slli	r2,r2,31
    6f38:	2920703a 	and	r16,r5,r4
    6f3c:	80e0b03a 	or	r16,r16,r3
    6f40:	8084b03a 	or	r2,r16,r2
    6f44:	dfc00317 	ldw	ra,12(sp)
    6f48:	dc800217 	ldw	r18,8(sp)
    6f4c:	dc400117 	ldw	r17,4(sp)
    6f50:	dc000017 	ldw	r16,0(sp)
    6f54:	dec00404 	addi	sp,sp,16
    6f58:	f800283a 	ret
    6f5c:	00803fc4 	movi	r2,255
    6f60:	80bfe126 	beq	r16,r2,6ee8 <__alt_data_end+0xf0006ee8>
    6f64:	39c10034 	orhi	r7,r7,1024
    6f68:	008006c4 	movi	r2,27
    6f6c:	11007416 	blt	r2,r4,7140 <__subsf3+0x2bc>
    6f70:	00800804 	movi	r2,32
    6f74:	1105c83a 	sub	r2,r2,r4
    6f78:	3884983a 	sll	r2,r7,r2
    6f7c:	390ed83a 	srl	r7,r7,r4
    6f80:	1008c03a 	cmpne	r4,r2,zero
    6f84:	390eb03a 	or	r7,r7,r4
    6f88:	19c7c83a 	sub	r3,r3,r7
    6f8c:	1881002c 	andhi	r2,r3,1024
    6f90:	10001426 	beq	r2,zero,6fe4 <__subsf3+0x160>
    6f94:	04810034 	movhi	r18,1024
    6f98:	94bfffc4 	addi	r18,r18,-1
    6f9c:	1ca4703a 	and	r18,r3,r18
    6fa0:	9009883a 	mov	r4,r18
    6fa4:	00092e80 	call	92e8 <__clzsi2>
    6fa8:	10bffec4 	addi	r2,r2,-5
    6fac:	90a4983a 	sll	r18,r18,r2
    6fb0:	14005116 	blt	r2,r16,70f8 <__subsf3+0x274>
    6fb4:	1405c83a 	sub	r2,r2,r16
    6fb8:	10c00044 	addi	r3,r2,1
    6fbc:	00800804 	movi	r2,32
    6fc0:	10c5c83a 	sub	r2,r2,r3
    6fc4:	9084983a 	sll	r2,r18,r2
    6fc8:	90e4d83a 	srl	r18,r18,r3
    6fcc:	0021883a 	mov	r16,zero
    6fd0:	1006c03a 	cmpne	r3,r2,zero
    6fd4:	90c6b03a 	or	r3,r18,r3
    6fd8:	003fc306 	br	6ee8 <__alt_data_end+0xf0006ee8>
    6fdc:	2000e026 	beq	r4,zero,7360 <__subsf3+0x4dc>
    6fe0:	2007883a 	mov	r3,r4
    6fe4:	188001cc 	andi	r2,r3,7
    6fe8:	103fc11e 	bne	r2,zero,6ef0 <__alt_data_end+0xf0006ef0>
    6fec:	180ad0fa 	srli	r5,r3,3
    6ff0:	00c03fc4 	movi	r3,255
    6ff4:	8880004c 	andi	r2,r17,1
    6ff8:	80c0031e 	bne	r16,r3,7008 <__subsf3+0x184>
    6ffc:	28006d26 	beq	r5,zero,71b4 <__subsf3+0x330>
    7000:	29401034 	orhi	r5,r5,64
    7004:	043fffc4 	movi	r16,-1
    7008:	00c02034 	movhi	r3,128
    700c:	18ffffc4 	addi	r3,r3,-1
    7010:	28ca703a 	and	r5,r5,r3
    7014:	003fc206 	br	6f20 <__alt_data_end+0xf0006f20>
    7018:	01003c0e 	bge	zero,r4,710c <__subsf3+0x288>
    701c:	30002126 	beq	r6,zero,70a4 <__subsf3+0x220>
    7020:	01403fc4 	movi	r5,255
    7024:	817fb026 	beq	r16,r5,6ee8 <__alt_data_end+0xf0006ee8>
    7028:	39c10034 	orhi	r7,r7,1024
    702c:	014006c4 	movi	r5,27
    7030:	29007416 	blt	r5,r4,7204 <__subsf3+0x380>
    7034:	01400804 	movi	r5,32
    7038:	290bc83a 	sub	r5,r5,r4
    703c:	394a983a 	sll	r5,r7,r5
    7040:	390ed83a 	srl	r7,r7,r4
    7044:	2808c03a 	cmpne	r4,r5,zero
    7048:	390eb03a 	or	r7,r7,r4
    704c:	19c7883a 	add	r3,r3,r7
    7050:	1901002c 	andhi	r4,r3,1024
    7054:	20003826 	beq	r4,zero,7138 <__subsf3+0x2b4>
    7058:	84000044 	addi	r16,r16,1
    705c:	01003fc4 	movi	r4,255
    7060:	81005426 	beq	r16,r4,71b4 <__subsf3+0x330>
    7064:	1023883a 	mov	r17,r2
    7068:	00bf0034 	movhi	r2,64512
    706c:	10bfffc4 	addi	r2,r2,-1
    7070:	1900004c 	andi	r4,r3,1
    7074:	1886703a 	and	r3,r3,r2
    7078:	1806d07a 	srli	r3,r3,1
    707c:	1906b03a 	or	r3,r3,r4
    7080:	003f9906 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7084:	383f9226 	beq	r7,zero,6ed0 <__alt_data_end+0xf0006ed0>
    7088:	10803fcc 	andi	r2,r2,255
    708c:	003f9106 	br	6ed4 <__alt_data_end+0xf0006ed4>
    7090:	213fffc4 	addi	r4,r4,-1
    7094:	203fbc26 	beq	r4,zero,6f88 <__alt_data_end+0xf0006f88>
    7098:	00803fc4 	movi	r2,255
    709c:	80bfb21e 	bne	r16,r2,6f68 <__alt_data_end+0xf0006f68>
    70a0:	003f9106 	br	6ee8 <__alt_data_end+0xf0006ee8>
    70a4:	383f9026 	beq	r7,zero,6ee8 <__alt_data_end+0xf0006ee8>
    70a8:	213fffc4 	addi	r4,r4,-1
    70ac:	203fe726 	beq	r4,zero,704c <__alt_data_end+0xf000704c>
    70b0:	01403fc4 	movi	r5,255
    70b4:	817fdd1e 	bne	r16,r5,702c <__alt_data_end+0xf000702c>
    70b8:	003f8b06 	br	6ee8 <__alt_data_end+0xf0006ee8>
    70bc:	2000221e 	bne	r4,zero,7148 <__subsf3+0x2c4>
    70c0:	81000044 	addi	r4,r16,1
    70c4:	21003fcc 	andi	r4,r4,255
    70c8:	01400044 	movi	r5,1
    70cc:	2900470e 	bge	r5,r4,71ec <__subsf3+0x368>
    70d0:	19e5c83a 	sub	r18,r3,r7
    70d4:	9141002c 	andhi	r5,r18,1024
    70d8:	28002d26 	beq	r5,zero,7190 <__subsf3+0x30c>
    70dc:	38e5c83a 	sub	r18,r7,r3
    70e0:	1023883a 	mov	r17,r2
    70e4:	003fae06 	br	6fa0 <__alt_data_end+0xf0006fa0>
    70e8:	8880004c 	andi	r2,r17,1
    70ec:	043fffc4 	movi	r16,-1
    70f0:	000b883a 	mov	r5,zero
    70f4:	003f8a06 	br	6f20 <__alt_data_end+0xf0006f20>
    70f8:	00ff0034 	movhi	r3,64512
    70fc:	18ffffc4 	addi	r3,r3,-1
    7100:	80a1c83a 	sub	r16,r16,r2
    7104:	90c6703a 	and	r3,r18,r3
    7108:	003f7706 	br	6ee8 <__alt_data_end+0xf0006ee8>
    710c:	2000431e 	bne	r4,zero,721c <__subsf3+0x398>
    7110:	81000044 	addi	r4,r16,1
    7114:	21803fcc 	andi	r6,r4,255
    7118:	01400044 	movi	r5,1
    711c:	2980280e 	bge	r5,r6,71c0 <__subsf3+0x33c>
    7120:	01403fc4 	movi	r5,255
    7124:	21402326 	beq	r4,r5,71b4 <__subsf3+0x330>
    7128:	19c7883a 	add	r3,r3,r7
    712c:	1806d07a 	srli	r3,r3,1
    7130:	2021883a 	mov	r16,r4
    7134:	003f6c06 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7138:	1023883a 	mov	r17,r2
    713c:	003fa906 	br	6fe4 <__alt_data_end+0xf0006fe4>
    7140:	01c00044 	movi	r7,1
    7144:	003f9006 	br	6f88 <__alt_data_end+0xf0006f88>
    7148:	8000151e 	bne	r16,zero,71a0 <__subsf3+0x31c>
    714c:	18002f26 	beq	r3,zero,720c <__subsf3+0x388>
    7150:	0108303a 	nor	r4,zero,r4
    7154:	20000a26 	beq	r4,zero,7180 <__subsf3+0x2fc>
    7158:	01403fc4 	movi	r5,255
    715c:	31402b26 	beq	r6,r5,720c <__subsf3+0x388>
    7160:	014006c4 	movi	r5,27
    7164:	29006e16 	blt	r5,r4,7320 <__subsf3+0x49c>
    7168:	01400804 	movi	r5,32
    716c:	290bc83a 	sub	r5,r5,r4
    7170:	194a983a 	sll	r5,r3,r5
    7174:	1908d83a 	srl	r4,r3,r4
    7178:	2806c03a 	cmpne	r3,r5,zero
    717c:	20c6b03a 	or	r3,r4,r3
    7180:	38c7c83a 	sub	r3,r7,r3
    7184:	3021883a 	mov	r16,r6
    7188:	1023883a 	mov	r17,r2
    718c:	003f7f06 	br	6f8c <__alt_data_end+0xf0006f8c>
    7190:	903f831e 	bne	r18,zero,6fa0 <__alt_data_end+0xf0006fa0>
    7194:	0005883a 	mov	r2,zero
    7198:	0021883a 	mov	r16,zero
    719c:	003f9a06 	br	7008 <__alt_data_end+0xf0007008>
    71a0:	01403fc4 	movi	r5,255
    71a4:	31401926 	beq	r6,r5,720c <__subsf3+0x388>
    71a8:	0109c83a 	sub	r4,zero,r4
    71ac:	18c10034 	orhi	r3,r3,1024
    71b0:	003feb06 	br	7160 <__alt_data_end+0xf0007160>
    71b4:	043fffc4 	movi	r16,-1
    71b8:	000b883a 	mov	r5,zero
    71bc:	003f5806 	br	6f20 <__alt_data_end+0xf0006f20>
    71c0:	8000481e 	bne	r16,zero,72e4 <__subsf3+0x460>
    71c4:	18006226 	beq	r3,zero,7350 <__subsf3+0x4cc>
    71c8:	383f4726 	beq	r7,zero,6ee8 <__alt_data_end+0xf0006ee8>
    71cc:	19c7883a 	add	r3,r3,r7
    71d0:	1881002c 	andhi	r2,r3,1024
    71d4:	103f8326 	beq	r2,zero,6fe4 <__alt_data_end+0xf0006fe4>
    71d8:	00bf0034 	movhi	r2,64512
    71dc:	10bfffc4 	addi	r2,r2,-1
    71e0:	2821883a 	mov	r16,r5
    71e4:	1886703a 	and	r3,r3,r2
    71e8:	003f3f06 	br	6ee8 <__alt_data_end+0xf0006ee8>
    71ec:	80001c1e 	bne	r16,zero,7260 <__subsf3+0x3dc>
    71f0:	1800261e 	bne	r3,zero,728c <__subsf3+0x408>
    71f4:	38004c26 	beq	r7,zero,7328 <__subsf3+0x4a4>
    71f8:	3807883a 	mov	r3,r7
    71fc:	1023883a 	mov	r17,r2
    7200:	003f3906 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7204:	01c00044 	movi	r7,1
    7208:	003f9006 	br	704c <__alt_data_end+0xf000704c>
    720c:	3807883a 	mov	r3,r7
    7210:	3021883a 	mov	r16,r6
    7214:	1023883a 	mov	r17,r2
    7218:	003f3306 	br	6ee8 <__alt_data_end+0xf0006ee8>
    721c:	8000161e 	bne	r16,zero,7278 <__subsf3+0x3f4>
    7220:	18002d26 	beq	r3,zero,72d8 <__subsf3+0x454>
    7224:	0108303a 	nor	r4,zero,r4
    7228:	20000a26 	beq	r4,zero,7254 <__subsf3+0x3d0>
    722c:	01403fc4 	movi	r5,255
    7230:	31402926 	beq	r6,r5,72d8 <__subsf3+0x454>
    7234:	014006c4 	movi	r5,27
    7238:	29004716 	blt	r5,r4,7358 <__subsf3+0x4d4>
    723c:	01400804 	movi	r5,32
    7240:	290bc83a 	sub	r5,r5,r4
    7244:	194a983a 	sll	r5,r3,r5
    7248:	1908d83a 	srl	r4,r3,r4
    724c:	2806c03a 	cmpne	r3,r5,zero
    7250:	20c6b03a 	or	r3,r4,r3
    7254:	19c7883a 	add	r3,r3,r7
    7258:	3021883a 	mov	r16,r6
    725c:	003f7c06 	br	7050 <__alt_data_end+0xf0007050>
    7260:	1800111e 	bne	r3,zero,72a8 <__subsf3+0x424>
    7264:	38003326 	beq	r7,zero,7334 <__subsf3+0x4b0>
    7268:	3807883a 	mov	r3,r7
    726c:	1023883a 	mov	r17,r2
    7270:	04003fc4 	movi	r16,255
    7274:	003f1c06 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7278:	01403fc4 	movi	r5,255
    727c:	31401626 	beq	r6,r5,72d8 <__subsf3+0x454>
    7280:	0109c83a 	sub	r4,zero,r4
    7284:	18c10034 	orhi	r3,r3,1024
    7288:	003fea06 	br	7234 <__alt_data_end+0xf0007234>
    728c:	383f1626 	beq	r7,zero,6ee8 <__alt_data_end+0xf0006ee8>
    7290:	19c9c83a 	sub	r4,r3,r7
    7294:	2141002c 	andhi	r5,r4,1024
    7298:	283f5026 	beq	r5,zero,6fdc <__alt_data_end+0xf0006fdc>
    729c:	38c7c83a 	sub	r3,r7,r3
    72a0:	1023883a 	mov	r17,r2
    72a4:	003f1006 	br	6ee8 <__alt_data_end+0xf0006ee8>
    72a8:	38001b26 	beq	r7,zero,7318 <__subsf3+0x494>
    72ac:	1806d0fa 	srli	r3,r3,3
    72b0:	1900102c 	andhi	r4,r3,64
    72b4:	20000526 	beq	r4,zero,72cc <__subsf3+0x448>
    72b8:	380ed0fa 	srli	r7,r7,3
    72bc:	3900102c 	andhi	r4,r7,64
    72c0:	2000021e 	bne	r4,zero,72cc <__subsf3+0x448>
    72c4:	3807883a 	mov	r3,r7
    72c8:	1023883a 	mov	r17,r2
    72cc:	180690fa 	slli	r3,r3,3
    72d0:	04003fc4 	movi	r16,255
    72d4:	003f0406 	br	6ee8 <__alt_data_end+0xf0006ee8>
    72d8:	3807883a 	mov	r3,r7
    72dc:	3021883a 	mov	r16,r6
    72e0:	003f0106 	br	6ee8 <__alt_data_end+0xf0006ee8>
    72e4:	18001726 	beq	r3,zero,7344 <__subsf3+0x4c0>
    72e8:	38000b26 	beq	r7,zero,7318 <__subsf3+0x494>
    72ec:	1806d0fa 	srli	r3,r3,3
    72f0:	1900102c 	andhi	r4,r3,64
    72f4:	20000426 	beq	r4,zero,7308 <__subsf3+0x484>
    72f8:	380ed0fa 	srli	r7,r7,3
    72fc:	3900102c 	andhi	r4,r7,64
    7300:	2000011e 	bne	r4,zero,7308 <__subsf3+0x484>
    7304:	3807883a 	mov	r3,r7
    7308:	180690fa 	slli	r3,r3,3
    730c:	1023883a 	mov	r17,r2
    7310:	04003fc4 	movi	r16,255
    7314:	003ef406 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7318:	04003fc4 	movi	r16,255
    731c:	003ef206 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7320:	00c00044 	movi	r3,1
    7324:	003f9606 	br	7180 <__alt_data_end+0xf0007180>
    7328:	000b883a 	mov	r5,zero
    732c:	0005883a 	mov	r2,zero
    7330:	003f3506 	br	7008 <__alt_data_end+0xf0007008>
    7334:	01402034 	movhi	r5,128
    7338:	297fffc4 	addi	r5,r5,-1
    733c:	0005883a 	mov	r2,zero
    7340:	003f2f06 	br	7000 <__alt_data_end+0xf0007000>
    7344:	3807883a 	mov	r3,r7
    7348:	04003fc4 	movi	r16,255
    734c:	003ee606 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7350:	3807883a 	mov	r3,r7
    7354:	003ee406 	br	6ee8 <__alt_data_end+0xf0006ee8>
    7358:	00c00044 	movi	r3,1
    735c:	003fbd06 	br	7254 <__alt_data_end+0xf0007254>
    7360:	0005883a 	mov	r2,zero
    7364:	003f2806 	br	7008 <__alt_data_end+0xf0007008>

00007368 <__fixsfsi>:
    7368:	200ad5fa 	srli	r5,r4,23
    736c:	00c02034 	movhi	r3,128
    7370:	18ffffc4 	addi	r3,r3,-1
    7374:	29403fcc 	andi	r5,r5,255
    7378:	00801f84 	movi	r2,126
    737c:	1906703a 	and	r3,r3,r4
    7380:	2008d7fa 	srli	r4,r4,31
    7384:	11400e0e 	bge	r2,r5,73c0 <__fixsfsi+0x58>
    7388:	00802744 	movi	r2,157
    738c:	11400816 	blt	r2,r5,73b0 <__fixsfsi+0x48>
    7390:	00802544 	movi	r2,149
    7394:	18c02034 	orhi	r3,r3,128
    7398:	11400b0e 	bge	r2,r5,73c8 <__fixsfsi+0x60>
    739c:	28bfda84 	addi	r2,r5,-150
    73a0:	1884983a 	sll	r2,r3,r2
    73a4:	20000726 	beq	r4,zero,73c4 <__fixsfsi+0x5c>
    73a8:	0085c83a 	sub	r2,zero,r2
    73ac:	f800283a 	ret
    73b0:	00a00034 	movhi	r2,32768
    73b4:	10bfffc4 	addi	r2,r2,-1
    73b8:	2085883a 	add	r2,r4,r2
    73bc:	f800283a 	ret
    73c0:	0005883a 	mov	r2,zero
    73c4:	f800283a 	ret
    73c8:	00802584 	movi	r2,150
    73cc:	1145c83a 	sub	r2,r2,r5
    73d0:	1884d83a 	srl	r2,r3,r2
    73d4:	003ff306 	br	73a4 <__alt_data_end+0xf00073a4>

000073d8 <__floatsisf>:
    73d8:	defffd04 	addi	sp,sp,-12
    73dc:	dfc00215 	stw	ra,8(sp)
    73e0:	dc400115 	stw	r17,4(sp)
    73e4:	dc000015 	stw	r16,0(sp)
    73e8:	20003526 	beq	r4,zero,74c0 <__floatsisf+0xe8>
    73ec:	2021883a 	mov	r16,r4
    73f0:	2022d7fa 	srli	r17,r4,31
    73f4:	20003616 	blt	r4,zero,74d0 <__floatsisf+0xf8>
    73f8:	8009883a 	mov	r4,r16
    73fc:	00092e80 	call	92e8 <__clzsi2>
    7400:	00c02784 	movi	r3,158
    7404:	1887c83a 	sub	r3,r3,r2
    7408:	01002584 	movi	r4,150
    740c:	20c01416 	blt	r4,r3,7460 <__floatsisf+0x88>
    7410:	20c9c83a 	sub	r4,r4,r3
    7414:	8120983a 	sll	r16,r16,r4
    7418:	00802034 	movhi	r2,128
    741c:	10bfffc4 	addi	r2,r2,-1
    7420:	8809883a 	mov	r4,r17
    7424:	80a0703a 	and	r16,r16,r2
    7428:	18803fcc 	andi	r2,r3,255
    742c:	100695fa 	slli	r3,r2,23
    7430:	20803fcc 	andi	r2,r4,255
    7434:	100897fa 	slli	r4,r2,31
    7438:	00802034 	movhi	r2,128
    743c:	10bfffc4 	addi	r2,r2,-1
    7440:	8084703a 	and	r2,r16,r2
    7444:	10c4b03a 	or	r2,r2,r3
    7448:	1104b03a 	or	r2,r2,r4
    744c:	dfc00217 	ldw	ra,8(sp)
    7450:	dc400117 	ldw	r17,4(sp)
    7454:	dc000017 	ldw	r16,0(sp)
    7458:	dec00304 	addi	sp,sp,12
    745c:	f800283a 	ret
    7460:	01002644 	movi	r4,153
    7464:	20c01c16 	blt	r4,r3,74d8 <__floatsisf+0x100>
    7468:	20c9c83a 	sub	r4,r4,r3
    746c:	8120983a 	sll	r16,r16,r4
    7470:	013f0034 	movhi	r4,64512
    7474:	213fffc4 	addi	r4,r4,-1
    7478:	814001cc 	andi	r5,r16,7
    747c:	8108703a 	and	r4,r16,r4
    7480:	28000426 	beq	r5,zero,7494 <__floatsisf+0xbc>
    7484:	840003cc 	andi	r16,r16,15
    7488:	01400104 	movi	r5,4
    748c:	81400126 	beq	r16,r5,7494 <__floatsisf+0xbc>
    7490:	2149883a 	add	r4,r4,r5
    7494:	2141002c 	andhi	r5,r4,1024
    7498:	28000526 	beq	r5,zero,74b0 <__floatsisf+0xd8>
    749c:	00c027c4 	movi	r3,159
    74a0:	1887c83a 	sub	r3,r3,r2
    74a4:	00bf0034 	movhi	r2,64512
    74a8:	10bfffc4 	addi	r2,r2,-1
    74ac:	2088703a 	and	r4,r4,r2
    74b0:	202091ba 	slli	r16,r4,6
    74b4:	8809883a 	mov	r4,r17
    74b8:	8020d27a 	srli	r16,r16,9
    74bc:	003fda06 	br	7428 <__alt_data_end+0xf0007428>
    74c0:	0009883a 	mov	r4,zero
    74c4:	0007883a 	mov	r3,zero
    74c8:	0021883a 	mov	r16,zero
    74cc:	003fd606 	br	7428 <__alt_data_end+0xf0007428>
    74d0:	0121c83a 	sub	r16,zero,r4
    74d4:	003fc806 	br	73f8 <__alt_data_end+0xf00073f8>
    74d8:	01002e44 	movi	r4,185
    74dc:	20c9c83a 	sub	r4,r4,r3
    74e0:	01400144 	movi	r5,5
    74e4:	8108983a 	sll	r4,r16,r4
    74e8:	288bc83a 	sub	r5,r5,r2
    74ec:	8160d83a 	srl	r16,r16,r5
    74f0:	2008c03a 	cmpne	r4,r4,zero
    74f4:	8120b03a 	or	r16,r16,r4
    74f8:	003fdd06 	br	7470 <__alt_data_end+0xf0007470>

000074fc <__divdf3>:
    74fc:	defff204 	addi	sp,sp,-56
    7500:	dd400915 	stw	r21,36(sp)
    7504:	282ad53a 	srli	r21,r5,20
    7508:	dd000815 	stw	r20,32(sp)
    750c:	2828d7fa 	srli	r20,r5,31
    7510:	dc000415 	stw	r16,16(sp)
    7514:	04000434 	movhi	r16,16
    7518:	df000c15 	stw	fp,48(sp)
    751c:	843fffc4 	addi	r16,r16,-1
    7520:	dfc00d15 	stw	ra,52(sp)
    7524:	ddc00b15 	stw	r23,44(sp)
    7528:	dd800a15 	stw	r22,40(sp)
    752c:	dcc00715 	stw	r19,28(sp)
    7530:	dc800615 	stw	r18,24(sp)
    7534:	dc400515 	stw	r17,20(sp)
    7538:	ad41ffcc 	andi	r21,r21,2047
    753c:	2c20703a 	and	r16,r5,r16
    7540:	a7003fcc 	andi	fp,r20,255
    7544:	a8006126 	beq	r21,zero,76cc <__divdf3+0x1d0>
    7548:	0081ffc4 	movi	r2,2047
    754c:	2025883a 	mov	r18,r4
    7550:	a8803726 	beq	r21,r2,7630 <__divdf3+0x134>
    7554:	80800434 	orhi	r2,r16,16
    7558:	100490fa 	slli	r2,r2,3
    755c:	2020d77a 	srli	r16,r4,29
    7560:	202490fa 	slli	r18,r4,3
    7564:	ad7f0044 	addi	r21,r21,-1023
    7568:	80a0b03a 	or	r16,r16,r2
    756c:	0027883a 	mov	r19,zero
    7570:	0013883a 	mov	r9,zero
    7574:	3804d53a 	srli	r2,r7,20
    7578:	382cd7fa 	srli	r22,r7,31
    757c:	04400434 	movhi	r17,16
    7580:	8c7fffc4 	addi	r17,r17,-1
    7584:	1081ffcc 	andi	r2,r2,2047
    7588:	3011883a 	mov	r8,r6
    758c:	3c62703a 	and	r17,r7,r17
    7590:	b5c03fcc 	andi	r23,r22,255
    7594:	10006c26 	beq	r2,zero,7748 <__divdf3+0x24c>
    7598:	00c1ffc4 	movi	r3,2047
    759c:	10c06426 	beq	r2,r3,7730 <__divdf3+0x234>
    75a0:	88c00434 	orhi	r3,r17,16
    75a4:	180690fa 	slli	r3,r3,3
    75a8:	3022d77a 	srli	r17,r6,29
    75ac:	301090fa 	slli	r8,r6,3
    75b0:	10bf0044 	addi	r2,r2,-1023
    75b4:	88e2b03a 	or	r17,r17,r3
    75b8:	000f883a 	mov	r7,zero
    75bc:	a58cf03a 	xor	r6,r20,r22
    75c0:	3cc8b03a 	or	r4,r7,r19
    75c4:	a8abc83a 	sub	r21,r21,r2
    75c8:	008003c4 	movi	r2,15
    75cc:	3007883a 	mov	r3,r6
    75d0:	34c03fcc 	andi	r19,r6,255
    75d4:	11009036 	bltu	r2,r4,7818 <__divdf3+0x31c>
    75d8:	200890ba 	slli	r4,r4,2
    75dc:	00800034 	movhi	r2,0
    75e0:	109d7c04 	addi	r2,r2,30192
    75e4:	2089883a 	add	r4,r4,r2
    75e8:	20800017 	ldw	r2,0(r4)
    75ec:	1000683a 	jmp	r2
    75f0:	00007818 	cmpnei	zero,zero,480
    75f4:	00007668 	cmpgeui	zero,zero,473
    75f8:	00007808 	cmpgei	zero,zero,480
    75fc:	0000765c 	xori	zero,zero,473
    7600:	00007808 	cmpgei	zero,zero,480
    7604:	000077dc 	xori	zero,zero,479
    7608:	00007808 	cmpgei	zero,zero,480
    760c:	0000765c 	xori	zero,zero,473
    7610:	00007668 	cmpgeui	zero,zero,473
    7614:	00007668 	cmpgeui	zero,zero,473
    7618:	000077dc 	xori	zero,zero,479
    761c:	0000765c 	xori	zero,zero,473
    7620:	0000764c 	andi	zero,zero,473
    7624:	0000764c 	andi	zero,zero,473
    7628:	0000764c 	andi	zero,zero,473
    762c:	00007afc 	xorhi	zero,zero,491
    7630:	2404b03a 	or	r2,r4,r16
    7634:	1000661e 	bne	r2,zero,77d0 <__divdf3+0x2d4>
    7638:	04c00204 	movi	r19,8
    763c:	0021883a 	mov	r16,zero
    7640:	0025883a 	mov	r18,zero
    7644:	02400084 	movi	r9,2
    7648:	003fca06 	br	7574 <__alt_data_end+0xf0007574>
    764c:	8023883a 	mov	r17,r16
    7650:	9011883a 	mov	r8,r18
    7654:	e02f883a 	mov	r23,fp
    7658:	480f883a 	mov	r7,r9
    765c:	00800084 	movi	r2,2
    7660:	3881311e 	bne	r7,r2,7b28 <__divdf3+0x62c>
    7664:	b827883a 	mov	r19,r23
    7668:	98c0004c 	andi	r3,r19,1
    766c:	0081ffc4 	movi	r2,2047
    7670:	000b883a 	mov	r5,zero
    7674:	0025883a 	mov	r18,zero
    7678:	1004953a 	slli	r2,r2,20
    767c:	18c03fcc 	andi	r3,r3,255
    7680:	04400434 	movhi	r17,16
    7684:	8c7fffc4 	addi	r17,r17,-1
    7688:	180697fa 	slli	r3,r3,31
    768c:	2c4a703a 	and	r5,r5,r17
    7690:	288ab03a 	or	r5,r5,r2
    7694:	28c6b03a 	or	r3,r5,r3
    7698:	9005883a 	mov	r2,r18
    769c:	dfc00d17 	ldw	ra,52(sp)
    76a0:	df000c17 	ldw	fp,48(sp)
    76a4:	ddc00b17 	ldw	r23,44(sp)
    76a8:	dd800a17 	ldw	r22,40(sp)
    76ac:	dd400917 	ldw	r21,36(sp)
    76b0:	dd000817 	ldw	r20,32(sp)
    76b4:	dcc00717 	ldw	r19,28(sp)
    76b8:	dc800617 	ldw	r18,24(sp)
    76bc:	dc400517 	ldw	r17,20(sp)
    76c0:	dc000417 	ldw	r16,16(sp)
    76c4:	dec00e04 	addi	sp,sp,56
    76c8:	f800283a 	ret
    76cc:	2404b03a 	or	r2,r4,r16
    76d0:	2027883a 	mov	r19,r4
    76d4:	10003926 	beq	r2,zero,77bc <__divdf3+0x2c0>
    76d8:	80012e26 	beq	r16,zero,7b94 <__divdf3+0x698>
    76dc:	8009883a 	mov	r4,r16
    76e0:	d9800315 	stw	r6,12(sp)
    76e4:	d9c00215 	stw	r7,8(sp)
    76e8:	00092e80 	call	92e8 <__clzsi2>
    76ec:	d9800317 	ldw	r6,12(sp)
    76f0:	d9c00217 	ldw	r7,8(sp)
    76f4:	113ffd44 	addi	r4,r2,-11
    76f8:	00c00704 	movi	r3,28
    76fc:	19012116 	blt	r3,r4,7b84 <__divdf3+0x688>
    7700:	00c00744 	movi	r3,29
    7704:	147ffe04 	addi	r17,r2,-8
    7708:	1907c83a 	sub	r3,r3,r4
    770c:	8460983a 	sll	r16,r16,r17
    7710:	98c6d83a 	srl	r3,r19,r3
    7714:	9c64983a 	sll	r18,r19,r17
    7718:	1c20b03a 	or	r16,r3,r16
    771c:	1080fcc4 	addi	r2,r2,1011
    7720:	00abc83a 	sub	r21,zero,r2
    7724:	0027883a 	mov	r19,zero
    7728:	0013883a 	mov	r9,zero
    772c:	003f9106 	br	7574 <__alt_data_end+0xf0007574>
    7730:	3446b03a 	or	r3,r6,r17
    7734:	18001f1e 	bne	r3,zero,77b4 <__divdf3+0x2b8>
    7738:	0023883a 	mov	r17,zero
    773c:	0011883a 	mov	r8,zero
    7740:	01c00084 	movi	r7,2
    7744:	003f9d06 	br	75bc <__alt_data_end+0xf00075bc>
    7748:	3446b03a 	or	r3,r6,r17
    774c:	18001526 	beq	r3,zero,77a4 <__divdf3+0x2a8>
    7750:	88011b26 	beq	r17,zero,7bc0 <__divdf3+0x6c4>
    7754:	8809883a 	mov	r4,r17
    7758:	d9800315 	stw	r6,12(sp)
    775c:	da400115 	stw	r9,4(sp)
    7760:	00092e80 	call	92e8 <__clzsi2>
    7764:	d9800317 	ldw	r6,12(sp)
    7768:	da400117 	ldw	r9,4(sp)
    776c:	113ffd44 	addi	r4,r2,-11
    7770:	00c00704 	movi	r3,28
    7774:	19010e16 	blt	r3,r4,7bb0 <__divdf3+0x6b4>
    7778:	00c00744 	movi	r3,29
    777c:	123ffe04 	addi	r8,r2,-8
    7780:	1907c83a 	sub	r3,r3,r4
    7784:	8a22983a 	sll	r17,r17,r8
    7788:	30c6d83a 	srl	r3,r6,r3
    778c:	3210983a 	sll	r8,r6,r8
    7790:	1c62b03a 	or	r17,r3,r17
    7794:	1080fcc4 	addi	r2,r2,1011
    7798:	0085c83a 	sub	r2,zero,r2
    779c:	000f883a 	mov	r7,zero
    77a0:	003f8606 	br	75bc <__alt_data_end+0xf00075bc>
    77a4:	0023883a 	mov	r17,zero
    77a8:	0011883a 	mov	r8,zero
    77ac:	01c00044 	movi	r7,1
    77b0:	003f8206 	br	75bc <__alt_data_end+0xf00075bc>
    77b4:	01c000c4 	movi	r7,3
    77b8:	003f8006 	br	75bc <__alt_data_end+0xf00075bc>
    77bc:	04c00104 	movi	r19,4
    77c0:	0021883a 	mov	r16,zero
    77c4:	0025883a 	mov	r18,zero
    77c8:	02400044 	movi	r9,1
    77cc:	003f6906 	br	7574 <__alt_data_end+0xf0007574>
    77d0:	04c00304 	movi	r19,12
    77d4:	024000c4 	movi	r9,3
    77d8:	003f6606 	br	7574 <__alt_data_end+0xf0007574>
    77dc:	01400434 	movhi	r5,16
    77e0:	0007883a 	mov	r3,zero
    77e4:	297fffc4 	addi	r5,r5,-1
    77e8:	04bfffc4 	movi	r18,-1
    77ec:	0081ffc4 	movi	r2,2047
    77f0:	003fa106 	br	7678 <__alt_data_end+0xf0007678>
    77f4:	00c00044 	movi	r3,1
    77f8:	1887c83a 	sub	r3,r3,r2
    77fc:	01000e04 	movi	r4,56
    7800:	20c1210e 	bge	r4,r3,7c88 <__divdf3+0x78c>
    7804:	98c0004c 	andi	r3,r19,1
    7808:	0005883a 	mov	r2,zero
    780c:	000b883a 	mov	r5,zero
    7810:	0025883a 	mov	r18,zero
    7814:	003f9806 	br	7678 <__alt_data_end+0xf0007678>
    7818:	8c00fd36 	bltu	r17,r16,7c10 <__divdf3+0x714>
    781c:	8440fb26 	beq	r16,r17,7c0c <__divdf3+0x710>
    7820:	8007883a 	mov	r3,r16
    7824:	ad7fffc4 	addi	r21,r21,-1
    7828:	0021883a 	mov	r16,zero
    782c:	4004d63a 	srli	r2,r8,24
    7830:	8822923a 	slli	r17,r17,8
    7834:	1809883a 	mov	r4,r3
    7838:	402c923a 	slli	r22,r8,8
    783c:	88b8b03a 	or	fp,r17,r2
    7840:	e028d43a 	srli	r20,fp,16
    7844:	d8c00015 	stw	r3,0(sp)
    7848:	e5ffffcc 	andi	r23,fp,65535
    784c:	a00b883a 	mov	r5,r20
    7850:	00094440 	call	9444 <__udivsi3>
    7854:	d8c00017 	ldw	r3,0(sp)
    7858:	a00b883a 	mov	r5,r20
    785c:	d8800315 	stw	r2,12(sp)
    7860:	1809883a 	mov	r4,r3
    7864:	00094a80 	call	94a8 <__umodsi3>
    7868:	d9800317 	ldw	r6,12(sp)
    786c:	1006943a 	slli	r3,r2,16
    7870:	9004d43a 	srli	r2,r18,16
    7874:	b9a3383a 	mul	r17,r23,r6
    7878:	10c4b03a 	or	r2,r2,r3
    787c:	1440062e 	bgeu	r2,r17,7898 <__divdf3+0x39c>
    7880:	1705883a 	add	r2,r2,fp
    7884:	30ffffc4 	addi	r3,r6,-1
    7888:	1700ee36 	bltu	r2,fp,7c44 <__divdf3+0x748>
    788c:	1440ed2e 	bgeu	r2,r17,7c44 <__divdf3+0x748>
    7890:	31bfff84 	addi	r6,r6,-2
    7894:	1705883a 	add	r2,r2,fp
    7898:	1463c83a 	sub	r17,r2,r17
    789c:	a00b883a 	mov	r5,r20
    78a0:	8809883a 	mov	r4,r17
    78a4:	d9800315 	stw	r6,12(sp)
    78a8:	00094440 	call	9444 <__udivsi3>
    78ac:	a00b883a 	mov	r5,r20
    78b0:	8809883a 	mov	r4,r17
    78b4:	d8800215 	stw	r2,8(sp)
    78b8:	00094a80 	call	94a8 <__umodsi3>
    78bc:	d9c00217 	ldw	r7,8(sp)
    78c0:	1004943a 	slli	r2,r2,16
    78c4:	94bfffcc 	andi	r18,r18,65535
    78c8:	b9d1383a 	mul	r8,r23,r7
    78cc:	90a4b03a 	or	r18,r18,r2
    78d0:	d9800317 	ldw	r6,12(sp)
    78d4:	9200062e 	bgeu	r18,r8,78f0 <__divdf3+0x3f4>
    78d8:	9725883a 	add	r18,r18,fp
    78dc:	38bfffc4 	addi	r2,r7,-1
    78e0:	9700d636 	bltu	r18,fp,7c3c <__divdf3+0x740>
    78e4:	9200d52e 	bgeu	r18,r8,7c3c <__divdf3+0x740>
    78e8:	39ffff84 	addi	r7,r7,-2
    78ec:	9725883a 	add	r18,r18,fp
    78f0:	3004943a 	slli	r2,r6,16
    78f4:	b012d43a 	srli	r9,r22,16
    78f8:	b1bfffcc 	andi	r6,r22,65535
    78fc:	11e2b03a 	or	r17,r2,r7
    7900:	8806d43a 	srli	r3,r17,16
    7904:	893fffcc 	andi	r4,r17,65535
    7908:	218b383a 	mul	r5,r4,r6
    790c:	30c5383a 	mul	r2,r6,r3
    7910:	2249383a 	mul	r4,r4,r9
    7914:	280ed43a 	srli	r7,r5,16
    7918:	9225c83a 	sub	r18,r18,r8
    791c:	2089883a 	add	r4,r4,r2
    7920:	3909883a 	add	r4,r7,r4
    7924:	1a47383a 	mul	r3,r3,r9
    7928:	2080022e 	bgeu	r4,r2,7934 <__divdf3+0x438>
    792c:	00800074 	movhi	r2,1
    7930:	1887883a 	add	r3,r3,r2
    7934:	2004d43a 	srli	r2,r4,16
    7938:	2008943a 	slli	r4,r4,16
    793c:	297fffcc 	andi	r5,r5,65535
    7940:	10c7883a 	add	r3,r2,r3
    7944:	2149883a 	add	r4,r4,r5
    7948:	90c0a536 	bltu	r18,r3,7be0 <__divdf3+0x6e4>
    794c:	90c0bf26 	beq	r18,r3,7c4c <__divdf3+0x750>
    7950:	90c7c83a 	sub	r3,r18,r3
    7954:	810fc83a 	sub	r7,r16,r4
    7958:	81e5803a 	cmpltu	r18,r16,r7
    795c:	1ca5c83a 	sub	r18,r3,r18
    7960:	e480c126 	beq	fp,r18,7c68 <__divdf3+0x76c>
    7964:	a00b883a 	mov	r5,r20
    7968:	9009883a 	mov	r4,r18
    796c:	d9800315 	stw	r6,12(sp)
    7970:	d9c00215 	stw	r7,8(sp)
    7974:	da400115 	stw	r9,4(sp)
    7978:	00094440 	call	9444 <__udivsi3>
    797c:	a00b883a 	mov	r5,r20
    7980:	9009883a 	mov	r4,r18
    7984:	d8800015 	stw	r2,0(sp)
    7988:	00094a80 	call	94a8 <__umodsi3>
    798c:	d9c00217 	ldw	r7,8(sp)
    7990:	da000017 	ldw	r8,0(sp)
    7994:	1006943a 	slli	r3,r2,16
    7998:	3804d43a 	srli	r2,r7,16
    799c:	ba21383a 	mul	r16,r23,r8
    79a0:	d9800317 	ldw	r6,12(sp)
    79a4:	10c4b03a 	or	r2,r2,r3
    79a8:	da400117 	ldw	r9,4(sp)
    79ac:	1400062e 	bgeu	r2,r16,79c8 <__divdf3+0x4cc>
    79b0:	1705883a 	add	r2,r2,fp
    79b4:	40ffffc4 	addi	r3,r8,-1
    79b8:	1700ad36 	bltu	r2,fp,7c70 <__divdf3+0x774>
    79bc:	1400ac2e 	bgeu	r2,r16,7c70 <__divdf3+0x774>
    79c0:	423fff84 	addi	r8,r8,-2
    79c4:	1705883a 	add	r2,r2,fp
    79c8:	1421c83a 	sub	r16,r2,r16
    79cc:	a00b883a 	mov	r5,r20
    79d0:	8009883a 	mov	r4,r16
    79d4:	d9800315 	stw	r6,12(sp)
    79d8:	d9c00215 	stw	r7,8(sp)
    79dc:	da000015 	stw	r8,0(sp)
    79e0:	da400115 	stw	r9,4(sp)
    79e4:	00094440 	call	9444 <__udivsi3>
    79e8:	8009883a 	mov	r4,r16
    79ec:	a00b883a 	mov	r5,r20
    79f0:	1025883a 	mov	r18,r2
    79f4:	00094a80 	call	94a8 <__umodsi3>
    79f8:	d9c00217 	ldw	r7,8(sp)
    79fc:	1004943a 	slli	r2,r2,16
    7a00:	bcaf383a 	mul	r23,r23,r18
    7a04:	393fffcc 	andi	r4,r7,65535
    7a08:	2088b03a 	or	r4,r4,r2
    7a0c:	d9800317 	ldw	r6,12(sp)
    7a10:	da000017 	ldw	r8,0(sp)
    7a14:	da400117 	ldw	r9,4(sp)
    7a18:	25c0062e 	bgeu	r4,r23,7a34 <__divdf3+0x538>
    7a1c:	2709883a 	add	r4,r4,fp
    7a20:	90bfffc4 	addi	r2,r18,-1
    7a24:	27009436 	bltu	r4,fp,7c78 <__divdf3+0x77c>
    7a28:	25c0932e 	bgeu	r4,r23,7c78 <__divdf3+0x77c>
    7a2c:	94bfff84 	addi	r18,r18,-2
    7a30:	2709883a 	add	r4,r4,fp
    7a34:	4004943a 	slli	r2,r8,16
    7a38:	25efc83a 	sub	r23,r4,r23
    7a3c:	1490b03a 	or	r8,r2,r18
    7a40:	4008d43a 	srli	r4,r8,16
    7a44:	40ffffcc 	andi	r3,r8,65535
    7a48:	30c5383a 	mul	r2,r6,r3
    7a4c:	1a47383a 	mul	r3,r3,r9
    7a50:	310d383a 	mul	r6,r6,r4
    7a54:	100ad43a 	srli	r5,r2,16
    7a58:	4913383a 	mul	r9,r9,r4
    7a5c:	1987883a 	add	r3,r3,r6
    7a60:	28c7883a 	add	r3,r5,r3
    7a64:	1980022e 	bgeu	r3,r6,7a70 <__divdf3+0x574>
    7a68:	01000074 	movhi	r4,1
    7a6c:	4913883a 	add	r9,r9,r4
    7a70:	1808d43a 	srli	r4,r3,16
    7a74:	1806943a 	slli	r3,r3,16
    7a78:	10bfffcc 	andi	r2,r2,65535
    7a7c:	2253883a 	add	r9,r4,r9
    7a80:	1887883a 	add	r3,r3,r2
    7a84:	ba403836 	bltu	r23,r9,7b68 <__divdf3+0x66c>
    7a88:	ba403626 	beq	r23,r9,7b64 <__divdf3+0x668>
    7a8c:	42000054 	ori	r8,r8,1
    7a90:	a880ffc4 	addi	r2,r21,1023
    7a94:	00bf570e 	bge	zero,r2,77f4 <__alt_data_end+0xf00077f4>
    7a98:	40c001cc 	andi	r3,r8,7
    7a9c:	18000726 	beq	r3,zero,7abc <__divdf3+0x5c0>
    7aa0:	40c003cc 	andi	r3,r8,15
    7aa4:	01000104 	movi	r4,4
    7aa8:	19000426 	beq	r3,r4,7abc <__divdf3+0x5c0>
    7aac:	4107883a 	add	r3,r8,r4
    7ab0:	1a11803a 	cmpltu	r8,r3,r8
    7ab4:	8a23883a 	add	r17,r17,r8
    7ab8:	1811883a 	mov	r8,r3
    7abc:	88c0402c 	andhi	r3,r17,256
    7ac0:	18000426 	beq	r3,zero,7ad4 <__divdf3+0x5d8>
    7ac4:	00ffc034 	movhi	r3,65280
    7ac8:	18ffffc4 	addi	r3,r3,-1
    7acc:	a8810004 	addi	r2,r21,1024
    7ad0:	88e2703a 	and	r17,r17,r3
    7ad4:	00c1ff84 	movi	r3,2046
    7ad8:	18bee316 	blt	r3,r2,7668 <__alt_data_end+0xf0007668>
    7adc:	8824977a 	slli	r18,r17,29
    7ae0:	4010d0fa 	srli	r8,r8,3
    7ae4:	8822927a 	slli	r17,r17,9
    7ae8:	1081ffcc 	andi	r2,r2,2047
    7aec:	9224b03a 	or	r18,r18,r8
    7af0:	880ad33a 	srli	r5,r17,12
    7af4:	98c0004c 	andi	r3,r19,1
    7af8:	003edf06 	br	7678 <__alt_data_end+0xf0007678>
    7afc:	8080022c 	andhi	r2,r16,8
    7b00:	10001226 	beq	r2,zero,7b4c <__divdf3+0x650>
    7b04:	8880022c 	andhi	r2,r17,8
    7b08:	1000101e 	bne	r2,zero,7b4c <__divdf3+0x650>
    7b0c:	00800434 	movhi	r2,16
    7b10:	89400234 	orhi	r5,r17,8
    7b14:	10bfffc4 	addi	r2,r2,-1
    7b18:	b007883a 	mov	r3,r22
    7b1c:	288a703a 	and	r5,r5,r2
    7b20:	4025883a 	mov	r18,r8
    7b24:	003f3106 	br	77ec <__alt_data_end+0xf00077ec>
    7b28:	008000c4 	movi	r2,3
    7b2c:	3880a626 	beq	r7,r2,7dc8 <__divdf3+0x8cc>
    7b30:	00800044 	movi	r2,1
    7b34:	3880521e 	bne	r7,r2,7c80 <__divdf3+0x784>
    7b38:	b807883a 	mov	r3,r23
    7b3c:	0005883a 	mov	r2,zero
    7b40:	000b883a 	mov	r5,zero
    7b44:	0025883a 	mov	r18,zero
    7b48:	003ecb06 	br	7678 <__alt_data_end+0xf0007678>
    7b4c:	00800434 	movhi	r2,16
    7b50:	81400234 	orhi	r5,r16,8
    7b54:	10bfffc4 	addi	r2,r2,-1
    7b58:	a007883a 	mov	r3,r20
    7b5c:	288a703a 	and	r5,r5,r2
    7b60:	003f2206 	br	77ec <__alt_data_end+0xf00077ec>
    7b64:	183fca26 	beq	r3,zero,7a90 <__alt_data_end+0xf0007a90>
    7b68:	e5ef883a 	add	r23,fp,r23
    7b6c:	40bfffc4 	addi	r2,r8,-1
    7b70:	bf00392e 	bgeu	r23,fp,7c58 <__divdf3+0x75c>
    7b74:	1011883a 	mov	r8,r2
    7b78:	ba7fc41e 	bne	r23,r9,7a8c <__alt_data_end+0xf0007a8c>
    7b7c:	b0ffc31e 	bne	r22,r3,7a8c <__alt_data_end+0xf0007a8c>
    7b80:	003fc306 	br	7a90 <__alt_data_end+0xf0007a90>
    7b84:	143ff604 	addi	r16,r2,-40
    7b88:	9c20983a 	sll	r16,r19,r16
    7b8c:	0025883a 	mov	r18,zero
    7b90:	003ee206 	br	771c <__alt_data_end+0xf000771c>
    7b94:	d9800315 	stw	r6,12(sp)
    7b98:	d9c00215 	stw	r7,8(sp)
    7b9c:	00092e80 	call	92e8 <__clzsi2>
    7ba0:	10800804 	addi	r2,r2,32
    7ba4:	d9c00217 	ldw	r7,8(sp)
    7ba8:	d9800317 	ldw	r6,12(sp)
    7bac:	003ed106 	br	76f4 <__alt_data_end+0xf00076f4>
    7bb0:	147ff604 	addi	r17,r2,-40
    7bb4:	3462983a 	sll	r17,r6,r17
    7bb8:	0011883a 	mov	r8,zero
    7bbc:	003ef506 	br	7794 <__alt_data_end+0xf0007794>
    7bc0:	3009883a 	mov	r4,r6
    7bc4:	d9800315 	stw	r6,12(sp)
    7bc8:	da400115 	stw	r9,4(sp)
    7bcc:	00092e80 	call	92e8 <__clzsi2>
    7bd0:	10800804 	addi	r2,r2,32
    7bd4:	da400117 	ldw	r9,4(sp)
    7bd8:	d9800317 	ldw	r6,12(sp)
    7bdc:	003ee306 	br	776c <__alt_data_end+0xf000776c>
    7be0:	85a1883a 	add	r16,r16,r22
    7be4:	8585803a 	cmpltu	r2,r16,r22
    7be8:	1705883a 	add	r2,r2,fp
    7bec:	14a5883a 	add	r18,r2,r18
    7bf0:	88bfffc4 	addi	r2,r17,-1
    7bf4:	e4800c2e 	bgeu	fp,r18,7c28 <__divdf3+0x72c>
    7bf8:	90c03e36 	bltu	r18,r3,7cf4 <__divdf3+0x7f8>
    7bfc:	1c806926 	beq	r3,r18,7da4 <__divdf3+0x8a8>
    7c00:	90c7c83a 	sub	r3,r18,r3
    7c04:	1023883a 	mov	r17,r2
    7c08:	003f5206 	br	7954 <__alt_data_end+0xf0007954>
    7c0c:	923f0436 	bltu	r18,r8,7820 <__alt_data_end+0xf0007820>
    7c10:	800897fa 	slli	r4,r16,31
    7c14:	9004d07a 	srli	r2,r18,1
    7c18:	8006d07a 	srli	r3,r16,1
    7c1c:	902097fa 	slli	r16,r18,31
    7c20:	20a4b03a 	or	r18,r4,r2
    7c24:	003f0106 	br	782c <__alt_data_end+0xf000782c>
    7c28:	e4bff51e 	bne	fp,r18,7c00 <__alt_data_end+0xf0007c00>
    7c2c:	85bff22e 	bgeu	r16,r22,7bf8 <__alt_data_end+0xf0007bf8>
    7c30:	e0c7c83a 	sub	r3,fp,r3
    7c34:	1023883a 	mov	r17,r2
    7c38:	003f4606 	br	7954 <__alt_data_end+0xf0007954>
    7c3c:	100f883a 	mov	r7,r2
    7c40:	003f2b06 	br	78f0 <__alt_data_end+0xf00078f0>
    7c44:	180d883a 	mov	r6,r3
    7c48:	003f1306 	br	7898 <__alt_data_end+0xf0007898>
    7c4c:	813fe436 	bltu	r16,r4,7be0 <__alt_data_end+0xf0007be0>
    7c50:	0007883a 	mov	r3,zero
    7c54:	003f3f06 	br	7954 <__alt_data_end+0xf0007954>
    7c58:	ba402c36 	bltu	r23,r9,7d0c <__divdf3+0x810>
    7c5c:	4dc05426 	beq	r9,r23,7db0 <__divdf3+0x8b4>
    7c60:	1011883a 	mov	r8,r2
    7c64:	003f8906 	br	7a8c <__alt_data_end+0xf0007a8c>
    7c68:	023fffc4 	movi	r8,-1
    7c6c:	003f8806 	br	7a90 <__alt_data_end+0xf0007a90>
    7c70:	1811883a 	mov	r8,r3
    7c74:	003f5406 	br	79c8 <__alt_data_end+0xf00079c8>
    7c78:	1025883a 	mov	r18,r2
    7c7c:	003f6d06 	br	7a34 <__alt_data_end+0xf0007a34>
    7c80:	b827883a 	mov	r19,r23
    7c84:	003f8206 	br	7a90 <__alt_data_end+0xf0007a90>
    7c88:	010007c4 	movi	r4,31
    7c8c:	20c02616 	blt	r4,r3,7d28 <__divdf3+0x82c>
    7c90:	00800804 	movi	r2,32
    7c94:	10c5c83a 	sub	r2,r2,r3
    7c98:	888a983a 	sll	r5,r17,r2
    7c9c:	40c8d83a 	srl	r4,r8,r3
    7ca0:	4084983a 	sll	r2,r8,r2
    7ca4:	88e2d83a 	srl	r17,r17,r3
    7ca8:	2906b03a 	or	r3,r5,r4
    7cac:	1004c03a 	cmpne	r2,r2,zero
    7cb0:	1886b03a 	or	r3,r3,r2
    7cb4:	188001cc 	andi	r2,r3,7
    7cb8:	10000726 	beq	r2,zero,7cd8 <__divdf3+0x7dc>
    7cbc:	188003cc 	andi	r2,r3,15
    7cc0:	01000104 	movi	r4,4
    7cc4:	11000426 	beq	r2,r4,7cd8 <__divdf3+0x7dc>
    7cc8:	1805883a 	mov	r2,r3
    7ccc:	10c00104 	addi	r3,r2,4
    7cd0:	1885803a 	cmpltu	r2,r3,r2
    7cd4:	88a3883a 	add	r17,r17,r2
    7cd8:	8880202c 	andhi	r2,r17,128
    7cdc:	10002726 	beq	r2,zero,7d7c <__divdf3+0x880>
    7ce0:	98c0004c 	andi	r3,r19,1
    7ce4:	00800044 	movi	r2,1
    7ce8:	000b883a 	mov	r5,zero
    7cec:	0025883a 	mov	r18,zero
    7cf0:	003e6106 	br	7678 <__alt_data_end+0xf0007678>
    7cf4:	85a1883a 	add	r16,r16,r22
    7cf8:	8585803a 	cmpltu	r2,r16,r22
    7cfc:	1705883a 	add	r2,r2,fp
    7d00:	14a5883a 	add	r18,r2,r18
    7d04:	8c7fff84 	addi	r17,r17,-2
    7d08:	003f1106 	br	7950 <__alt_data_end+0xf0007950>
    7d0c:	b589883a 	add	r4,r22,r22
    7d10:	25ad803a 	cmpltu	r22,r4,r22
    7d14:	b739883a 	add	fp,r22,fp
    7d18:	40bfff84 	addi	r2,r8,-2
    7d1c:	bf2f883a 	add	r23,r23,fp
    7d20:	202d883a 	mov	r22,r4
    7d24:	003f9306 	br	7b74 <__alt_data_end+0xf0007b74>
    7d28:	013ff844 	movi	r4,-31
    7d2c:	2085c83a 	sub	r2,r4,r2
    7d30:	8888d83a 	srl	r4,r17,r2
    7d34:	00800804 	movi	r2,32
    7d38:	18802126 	beq	r3,r2,7dc0 <__divdf3+0x8c4>
    7d3c:	00801004 	movi	r2,64
    7d40:	10c5c83a 	sub	r2,r2,r3
    7d44:	8884983a 	sll	r2,r17,r2
    7d48:	1204b03a 	or	r2,r2,r8
    7d4c:	1004c03a 	cmpne	r2,r2,zero
    7d50:	2084b03a 	or	r2,r4,r2
    7d54:	144001cc 	andi	r17,r2,7
    7d58:	88000d1e 	bne	r17,zero,7d90 <__divdf3+0x894>
    7d5c:	000b883a 	mov	r5,zero
    7d60:	1024d0fa 	srli	r18,r2,3
    7d64:	98c0004c 	andi	r3,r19,1
    7d68:	0005883a 	mov	r2,zero
    7d6c:	9464b03a 	or	r18,r18,r17
    7d70:	003e4106 	br	7678 <__alt_data_end+0xf0007678>
    7d74:	1007883a 	mov	r3,r2
    7d78:	0023883a 	mov	r17,zero
    7d7c:	880a927a 	slli	r5,r17,9
    7d80:	1805883a 	mov	r2,r3
    7d84:	8822977a 	slli	r17,r17,29
    7d88:	280ad33a 	srli	r5,r5,12
    7d8c:	003ff406 	br	7d60 <__alt_data_end+0xf0007d60>
    7d90:	10c003cc 	andi	r3,r2,15
    7d94:	01000104 	movi	r4,4
    7d98:	193ff626 	beq	r3,r4,7d74 <__alt_data_end+0xf0007d74>
    7d9c:	0023883a 	mov	r17,zero
    7da0:	003fca06 	br	7ccc <__alt_data_end+0xf0007ccc>
    7da4:	813fd336 	bltu	r16,r4,7cf4 <__alt_data_end+0xf0007cf4>
    7da8:	1023883a 	mov	r17,r2
    7dac:	003fa806 	br	7c50 <__alt_data_end+0xf0007c50>
    7db0:	b0ffd636 	bltu	r22,r3,7d0c <__alt_data_end+0xf0007d0c>
    7db4:	1011883a 	mov	r8,r2
    7db8:	b0ff341e 	bne	r22,r3,7a8c <__alt_data_end+0xf0007a8c>
    7dbc:	003f3406 	br	7a90 <__alt_data_end+0xf0007a90>
    7dc0:	0005883a 	mov	r2,zero
    7dc4:	003fe006 	br	7d48 <__alt_data_end+0xf0007d48>
    7dc8:	00800434 	movhi	r2,16
    7dcc:	89400234 	orhi	r5,r17,8
    7dd0:	10bfffc4 	addi	r2,r2,-1
    7dd4:	b807883a 	mov	r3,r23
    7dd8:	288a703a 	and	r5,r5,r2
    7ddc:	4025883a 	mov	r18,r8
    7de0:	003e8206 	br	77ec <__alt_data_end+0xf00077ec>

00007de4 <__gedf2>:
    7de4:	2804d53a 	srli	r2,r5,20
    7de8:	3806d53a 	srli	r3,r7,20
    7dec:	02000434 	movhi	r8,16
    7df0:	423fffc4 	addi	r8,r8,-1
    7df4:	1081ffcc 	andi	r2,r2,2047
    7df8:	0241ffc4 	movi	r9,2047
    7dfc:	2a14703a 	and	r10,r5,r8
    7e00:	18c1ffcc 	andi	r3,r3,2047
    7e04:	3a10703a 	and	r8,r7,r8
    7e08:	280ad7fa 	srli	r5,r5,31
    7e0c:	380ed7fa 	srli	r7,r7,31
    7e10:	12401d26 	beq	r2,r9,7e88 <__gedf2+0xa4>
    7e14:	0241ffc4 	movi	r9,2047
    7e18:	1a401226 	beq	r3,r9,7e64 <__gedf2+0x80>
    7e1c:	1000081e 	bne	r2,zero,7e40 <__gedf2+0x5c>
    7e20:	2296b03a 	or	r11,r4,r10
    7e24:	5813003a 	cmpeq	r9,r11,zero
    7e28:	1800091e 	bne	r3,zero,7e50 <__gedf2+0x6c>
    7e2c:	3218b03a 	or	r12,r6,r8
    7e30:	6000071e 	bne	r12,zero,7e50 <__gedf2+0x6c>
    7e34:	0005883a 	mov	r2,zero
    7e38:	5800101e 	bne	r11,zero,7e7c <__gedf2+0x98>
    7e3c:	f800283a 	ret
    7e40:	18000c1e 	bne	r3,zero,7e74 <__gedf2+0x90>
    7e44:	3212b03a 	or	r9,r6,r8
    7e48:	48000c26 	beq	r9,zero,7e7c <__gedf2+0x98>
    7e4c:	0013883a 	mov	r9,zero
    7e50:	39c03fcc 	andi	r7,r7,255
    7e54:	48000826 	beq	r9,zero,7e78 <__gedf2+0x94>
    7e58:	38000926 	beq	r7,zero,7e80 <__gedf2+0x9c>
    7e5c:	00800044 	movi	r2,1
    7e60:	f800283a 	ret
    7e64:	3212b03a 	or	r9,r6,r8
    7e68:	483fec26 	beq	r9,zero,7e1c <__alt_data_end+0xf0007e1c>
    7e6c:	00bfff84 	movi	r2,-2
    7e70:	f800283a 	ret
    7e74:	39c03fcc 	andi	r7,r7,255
    7e78:	29c00626 	beq	r5,r7,7e94 <__gedf2+0xb0>
    7e7c:	283ff726 	beq	r5,zero,7e5c <__alt_data_end+0xf0007e5c>
    7e80:	00bfffc4 	movi	r2,-1
    7e84:	f800283a 	ret
    7e88:	2292b03a 	or	r9,r4,r10
    7e8c:	483fe126 	beq	r9,zero,7e14 <__alt_data_end+0xf0007e14>
    7e90:	003ff606 	br	7e6c <__alt_data_end+0xf0007e6c>
    7e94:	18bff916 	blt	r3,r2,7e7c <__alt_data_end+0xf0007e7c>
    7e98:	10c00316 	blt	r2,r3,7ea8 <__gedf2+0xc4>
    7e9c:	42bff736 	bltu	r8,r10,7e7c <__alt_data_end+0xf0007e7c>
    7ea0:	52000326 	beq	r10,r8,7eb0 <__gedf2+0xcc>
    7ea4:	5200042e 	bgeu	r10,r8,7eb8 <__gedf2+0xd4>
    7ea8:	283fec1e 	bne	r5,zero,7e5c <__alt_data_end+0xf0007e5c>
    7eac:	003ff406 	br	7e80 <__alt_data_end+0xf0007e80>
    7eb0:	313ff236 	bltu	r6,r4,7e7c <__alt_data_end+0xf0007e7c>
    7eb4:	21bffc36 	bltu	r4,r6,7ea8 <__alt_data_end+0xf0007ea8>
    7eb8:	0005883a 	mov	r2,zero
    7ebc:	f800283a 	ret

00007ec0 <__muldf3>:
    7ec0:	defff304 	addi	sp,sp,-52
    7ec4:	2804d53a 	srli	r2,r5,20
    7ec8:	dd800915 	stw	r22,36(sp)
    7ecc:	282cd7fa 	srli	r22,r5,31
    7ed0:	dc000315 	stw	r16,12(sp)
    7ed4:	04000434 	movhi	r16,16
    7ed8:	dd400815 	stw	r21,32(sp)
    7edc:	dc800515 	stw	r18,20(sp)
    7ee0:	843fffc4 	addi	r16,r16,-1
    7ee4:	dfc00c15 	stw	ra,48(sp)
    7ee8:	df000b15 	stw	fp,44(sp)
    7eec:	ddc00a15 	stw	r23,40(sp)
    7ef0:	dd000715 	stw	r20,28(sp)
    7ef4:	dcc00615 	stw	r19,24(sp)
    7ef8:	dc400415 	stw	r17,16(sp)
    7efc:	1481ffcc 	andi	r18,r2,2047
    7f00:	2c20703a 	and	r16,r5,r16
    7f04:	b02b883a 	mov	r21,r22
    7f08:	b2403fcc 	andi	r9,r22,255
    7f0c:	90006026 	beq	r18,zero,8090 <__muldf3+0x1d0>
    7f10:	0081ffc4 	movi	r2,2047
    7f14:	2029883a 	mov	r20,r4
    7f18:	90803626 	beq	r18,r2,7ff4 <__muldf3+0x134>
    7f1c:	80800434 	orhi	r2,r16,16
    7f20:	100490fa 	slli	r2,r2,3
    7f24:	2020d77a 	srli	r16,r4,29
    7f28:	202890fa 	slli	r20,r4,3
    7f2c:	94bf0044 	addi	r18,r18,-1023
    7f30:	80a0b03a 	or	r16,r16,r2
    7f34:	0027883a 	mov	r19,zero
    7f38:	0039883a 	mov	fp,zero
    7f3c:	3804d53a 	srli	r2,r7,20
    7f40:	382ed7fa 	srli	r23,r7,31
    7f44:	04400434 	movhi	r17,16
    7f48:	8c7fffc4 	addi	r17,r17,-1
    7f4c:	1081ffcc 	andi	r2,r2,2047
    7f50:	3011883a 	mov	r8,r6
    7f54:	3c62703a 	and	r17,r7,r17
    7f58:	ba803fcc 	andi	r10,r23,255
    7f5c:	10006d26 	beq	r2,zero,8114 <__muldf3+0x254>
    7f60:	00c1ffc4 	movi	r3,2047
    7f64:	10c06526 	beq	r2,r3,80fc <__muldf3+0x23c>
    7f68:	88c00434 	orhi	r3,r17,16
    7f6c:	180690fa 	slli	r3,r3,3
    7f70:	3022d77a 	srli	r17,r6,29
    7f74:	301090fa 	slli	r8,r6,3
    7f78:	10bf0044 	addi	r2,r2,-1023
    7f7c:	88e2b03a 	or	r17,r17,r3
    7f80:	000b883a 	mov	r5,zero
    7f84:	9085883a 	add	r2,r18,r2
    7f88:	2cc8b03a 	or	r4,r5,r19
    7f8c:	00c003c4 	movi	r3,15
    7f90:	bdacf03a 	xor	r22,r23,r22
    7f94:	12c00044 	addi	r11,r2,1
    7f98:	19009936 	bltu	r3,r4,8200 <__muldf3+0x340>
    7f9c:	200890ba 	slli	r4,r4,2
    7fa0:	00c00034 	movhi	r3,0
    7fa4:	18dfed04 	addi	r3,r3,32692
    7fa8:	20c9883a 	add	r4,r4,r3
    7fac:	20c00017 	ldw	r3,0(r4)
    7fb0:	1800683a 	jmp	r3
    7fb4:	00008200 	call	820 <prvInitialiseCoRoutineLists+0x64>
    7fb8:	00008014 	movui	zero,512
    7fbc:	00008014 	movui	zero,512
    7fc0:	00008010 	cmplti	zero,zero,512
    7fc4:	000081dc 	xori	zero,zero,519
    7fc8:	000081dc 	xori	zero,zero,519
    7fcc:	000081c4 	movi	zero,519
    7fd0:	00008010 	cmplti	zero,zero,512
    7fd4:	000081dc 	xori	zero,zero,519
    7fd8:	000081c4 	movi	zero,519
    7fdc:	000081dc 	xori	zero,zero,519
    7fe0:	00008010 	cmplti	zero,zero,512
    7fe4:	000081ec 	andhi	zero,zero,519
    7fe8:	000081ec 	andhi	zero,zero,519
    7fec:	000081ec 	andhi	zero,zero,519
    7ff0:	00008408 	cmpgei	zero,zero,528
    7ff4:	2404b03a 	or	r2,r4,r16
    7ff8:	10006f1e 	bne	r2,zero,81b8 <__muldf3+0x2f8>
    7ffc:	04c00204 	movi	r19,8
    8000:	0021883a 	mov	r16,zero
    8004:	0029883a 	mov	r20,zero
    8008:	07000084 	movi	fp,2
    800c:	003fcb06 	br	7f3c <__alt_data_end+0xf0007f3c>
    8010:	502d883a 	mov	r22,r10
    8014:	00800084 	movi	r2,2
    8018:	28805726 	beq	r5,r2,8178 <__muldf3+0x2b8>
    801c:	008000c4 	movi	r2,3
    8020:	28816626 	beq	r5,r2,85bc <__muldf3+0x6fc>
    8024:	00800044 	movi	r2,1
    8028:	2881411e 	bne	r5,r2,8530 <__muldf3+0x670>
    802c:	b02b883a 	mov	r21,r22
    8030:	0005883a 	mov	r2,zero
    8034:	000b883a 	mov	r5,zero
    8038:	0029883a 	mov	r20,zero
    803c:	1004953a 	slli	r2,r2,20
    8040:	a8c03fcc 	andi	r3,r21,255
    8044:	04400434 	movhi	r17,16
    8048:	8c7fffc4 	addi	r17,r17,-1
    804c:	180697fa 	slli	r3,r3,31
    8050:	2c4a703a 	and	r5,r5,r17
    8054:	288ab03a 	or	r5,r5,r2
    8058:	28c6b03a 	or	r3,r5,r3
    805c:	a005883a 	mov	r2,r20
    8060:	dfc00c17 	ldw	ra,48(sp)
    8064:	df000b17 	ldw	fp,44(sp)
    8068:	ddc00a17 	ldw	r23,40(sp)
    806c:	dd800917 	ldw	r22,36(sp)
    8070:	dd400817 	ldw	r21,32(sp)
    8074:	dd000717 	ldw	r20,28(sp)
    8078:	dcc00617 	ldw	r19,24(sp)
    807c:	dc800517 	ldw	r18,20(sp)
    8080:	dc400417 	ldw	r17,16(sp)
    8084:	dc000317 	ldw	r16,12(sp)
    8088:	dec00d04 	addi	sp,sp,52
    808c:	f800283a 	ret
    8090:	2404b03a 	or	r2,r4,r16
    8094:	2027883a 	mov	r19,r4
    8098:	10004226 	beq	r2,zero,81a4 <__muldf3+0x2e4>
    809c:	8000fc26 	beq	r16,zero,8490 <__muldf3+0x5d0>
    80a0:	8009883a 	mov	r4,r16
    80a4:	d9800215 	stw	r6,8(sp)
    80a8:	d9c00015 	stw	r7,0(sp)
    80ac:	da400115 	stw	r9,4(sp)
    80b0:	00092e80 	call	92e8 <__clzsi2>
    80b4:	d9800217 	ldw	r6,8(sp)
    80b8:	d9c00017 	ldw	r7,0(sp)
    80bc:	da400117 	ldw	r9,4(sp)
    80c0:	113ffd44 	addi	r4,r2,-11
    80c4:	00c00704 	movi	r3,28
    80c8:	1900ed16 	blt	r3,r4,8480 <__muldf3+0x5c0>
    80cc:	00c00744 	movi	r3,29
    80d0:	147ffe04 	addi	r17,r2,-8
    80d4:	1907c83a 	sub	r3,r3,r4
    80d8:	8460983a 	sll	r16,r16,r17
    80dc:	98c6d83a 	srl	r3,r19,r3
    80e0:	9c68983a 	sll	r20,r19,r17
    80e4:	1c20b03a 	or	r16,r3,r16
    80e8:	1080fcc4 	addi	r2,r2,1011
    80ec:	00a5c83a 	sub	r18,zero,r2
    80f0:	0027883a 	mov	r19,zero
    80f4:	0039883a 	mov	fp,zero
    80f8:	003f9006 	br	7f3c <__alt_data_end+0xf0007f3c>
    80fc:	3446b03a 	or	r3,r6,r17
    8100:	1800261e 	bne	r3,zero,819c <__muldf3+0x2dc>
    8104:	0023883a 	mov	r17,zero
    8108:	0011883a 	mov	r8,zero
    810c:	01400084 	movi	r5,2
    8110:	003f9c06 	br	7f84 <__alt_data_end+0xf0007f84>
    8114:	3446b03a 	or	r3,r6,r17
    8118:	18001c26 	beq	r3,zero,818c <__muldf3+0x2cc>
    811c:	8800ce26 	beq	r17,zero,8458 <__muldf3+0x598>
    8120:	8809883a 	mov	r4,r17
    8124:	d9800215 	stw	r6,8(sp)
    8128:	da400115 	stw	r9,4(sp)
    812c:	da800015 	stw	r10,0(sp)
    8130:	00092e80 	call	92e8 <__clzsi2>
    8134:	d9800217 	ldw	r6,8(sp)
    8138:	da400117 	ldw	r9,4(sp)
    813c:	da800017 	ldw	r10,0(sp)
    8140:	113ffd44 	addi	r4,r2,-11
    8144:	00c00704 	movi	r3,28
    8148:	1900bf16 	blt	r3,r4,8448 <__muldf3+0x588>
    814c:	00c00744 	movi	r3,29
    8150:	123ffe04 	addi	r8,r2,-8
    8154:	1907c83a 	sub	r3,r3,r4
    8158:	8a22983a 	sll	r17,r17,r8
    815c:	30c6d83a 	srl	r3,r6,r3
    8160:	3210983a 	sll	r8,r6,r8
    8164:	1c62b03a 	or	r17,r3,r17
    8168:	1080fcc4 	addi	r2,r2,1011
    816c:	0085c83a 	sub	r2,zero,r2
    8170:	000b883a 	mov	r5,zero
    8174:	003f8306 	br	7f84 <__alt_data_end+0xf0007f84>
    8178:	b02b883a 	mov	r21,r22
    817c:	0081ffc4 	movi	r2,2047
    8180:	000b883a 	mov	r5,zero
    8184:	0029883a 	mov	r20,zero
    8188:	003fac06 	br	803c <__alt_data_end+0xf000803c>
    818c:	0023883a 	mov	r17,zero
    8190:	0011883a 	mov	r8,zero
    8194:	01400044 	movi	r5,1
    8198:	003f7a06 	br	7f84 <__alt_data_end+0xf0007f84>
    819c:	014000c4 	movi	r5,3
    81a0:	003f7806 	br	7f84 <__alt_data_end+0xf0007f84>
    81a4:	04c00104 	movi	r19,4
    81a8:	0021883a 	mov	r16,zero
    81ac:	0029883a 	mov	r20,zero
    81b0:	07000044 	movi	fp,1
    81b4:	003f6106 	br	7f3c <__alt_data_end+0xf0007f3c>
    81b8:	04c00304 	movi	r19,12
    81bc:	070000c4 	movi	fp,3
    81c0:	003f5e06 	br	7f3c <__alt_data_end+0xf0007f3c>
    81c4:	01400434 	movhi	r5,16
    81c8:	002b883a 	mov	r21,zero
    81cc:	297fffc4 	addi	r5,r5,-1
    81d0:	053fffc4 	movi	r20,-1
    81d4:	0081ffc4 	movi	r2,2047
    81d8:	003f9806 	br	803c <__alt_data_end+0xf000803c>
    81dc:	8023883a 	mov	r17,r16
    81e0:	a011883a 	mov	r8,r20
    81e4:	e00b883a 	mov	r5,fp
    81e8:	003f8a06 	br	8014 <__alt_data_end+0xf0008014>
    81ec:	8023883a 	mov	r17,r16
    81f0:	a011883a 	mov	r8,r20
    81f4:	482d883a 	mov	r22,r9
    81f8:	e00b883a 	mov	r5,fp
    81fc:	003f8506 	br	8014 <__alt_data_end+0xf0008014>
    8200:	a00ad43a 	srli	r5,r20,16
    8204:	401ad43a 	srli	r13,r8,16
    8208:	a53fffcc 	andi	r20,r20,65535
    820c:	423fffcc 	andi	r8,r8,65535
    8210:	4519383a 	mul	r12,r8,r20
    8214:	4147383a 	mul	r3,r8,r5
    8218:	6d09383a 	mul	r4,r13,r20
    821c:	600cd43a 	srli	r6,r12,16
    8220:	2b5d383a 	mul	r14,r5,r13
    8224:	20c9883a 	add	r4,r4,r3
    8228:	310d883a 	add	r6,r6,r4
    822c:	30c0022e 	bgeu	r6,r3,8238 <__muldf3+0x378>
    8230:	00c00074 	movhi	r3,1
    8234:	70dd883a 	add	r14,r14,r3
    8238:	8826d43a 	srli	r19,r17,16
    823c:	8bffffcc 	andi	r15,r17,65535
    8240:	7d23383a 	mul	r17,r15,r20
    8244:	7949383a 	mul	r4,r15,r5
    8248:	9d29383a 	mul	r20,r19,r20
    824c:	8814d43a 	srli	r10,r17,16
    8250:	3012943a 	slli	r9,r6,16
    8254:	a129883a 	add	r20,r20,r4
    8258:	633fffcc 	andi	r12,r12,65535
    825c:	5515883a 	add	r10,r10,r20
    8260:	3006d43a 	srli	r3,r6,16
    8264:	4b13883a 	add	r9,r9,r12
    8268:	2ccb383a 	mul	r5,r5,r19
    826c:	5100022e 	bgeu	r10,r4,8278 <__muldf3+0x3b8>
    8270:	01000074 	movhi	r4,1
    8274:	290b883a 	add	r5,r5,r4
    8278:	802ad43a 	srli	r21,r16,16
    827c:	843fffcc 	andi	r16,r16,65535
    8280:	440d383a 	mul	r6,r8,r16
    8284:	4565383a 	mul	r18,r8,r21
    8288:	8349383a 	mul	r4,r16,r13
    828c:	500e943a 	slli	r7,r10,16
    8290:	3010d43a 	srli	r8,r6,16
    8294:	5028d43a 	srli	r20,r10,16
    8298:	2489883a 	add	r4,r4,r18
    829c:	8abfffcc 	andi	r10,r17,65535
    82a0:	3a95883a 	add	r10,r7,r10
    82a4:	4119883a 	add	r12,r8,r4
    82a8:	a169883a 	add	r20,r20,r5
    82ac:	1a87883a 	add	r3,r3,r10
    82b0:	6d5b383a 	mul	r13,r13,r21
    82b4:	6480022e 	bgeu	r12,r18,82c0 <__muldf3+0x400>
    82b8:	01000074 	movhi	r4,1
    82bc:	691b883a 	add	r13,r13,r4
    82c0:	7c25383a 	mul	r18,r15,r16
    82c4:	7d4b383a 	mul	r5,r15,r21
    82c8:	84cf383a 	mul	r7,r16,r19
    82cc:	901ed43a 	srli	r15,r18,16
    82d0:	6008d43a 	srli	r4,r12,16
    82d4:	6010943a 	slli	r8,r12,16
    82d8:	394f883a 	add	r7,r7,r5
    82dc:	333fffcc 	andi	r12,r6,65535
    82e0:	79df883a 	add	r15,r15,r7
    82e4:	235b883a 	add	r13,r4,r13
    82e8:	9d63383a 	mul	r17,r19,r21
    82ec:	4309883a 	add	r4,r8,r12
    82f0:	7940022e 	bgeu	r15,r5,82fc <__muldf3+0x43c>
    82f4:	01400074 	movhi	r5,1
    82f8:	8963883a 	add	r17,r17,r5
    82fc:	780a943a 	slli	r5,r15,16
    8300:	91bfffcc 	andi	r6,r18,65535
    8304:	70c7883a 	add	r3,r14,r3
    8308:	298d883a 	add	r6,r5,r6
    830c:	1a8f803a 	cmpltu	r7,r3,r10
    8310:	350b883a 	add	r5,r6,r20
    8314:	20c7883a 	add	r3,r4,r3
    8318:	3955883a 	add	r10,r7,r5
    831c:	1909803a 	cmpltu	r4,r3,r4
    8320:	6a91883a 	add	r8,r13,r10
    8324:	780cd43a 	srli	r6,r15,16
    8328:	2219883a 	add	r12,r4,r8
    832c:	2d0b803a 	cmpltu	r5,r5,r20
    8330:	51cf803a 	cmpltu	r7,r10,r7
    8334:	29ceb03a 	or	r7,r5,r7
    8338:	4351803a 	cmpltu	r8,r8,r13
    833c:	610b803a 	cmpltu	r5,r12,r4
    8340:	4148b03a 	or	r4,r8,r5
    8344:	398f883a 	add	r7,r7,r6
    8348:	3909883a 	add	r4,r7,r4
    834c:	1810927a 	slli	r8,r3,9
    8350:	2449883a 	add	r4,r4,r17
    8354:	2008927a 	slli	r4,r4,9
    8358:	6022d5fa 	srli	r17,r12,23
    835c:	1806d5fa 	srli	r3,r3,23
    8360:	4252b03a 	or	r9,r8,r9
    8364:	600a927a 	slli	r5,r12,9
    8368:	4810c03a 	cmpne	r8,r9,zero
    836c:	2462b03a 	or	r17,r4,r17
    8370:	40c6b03a 	or	r3,r8,r3
    8374:	8900402c 	andhi	r4,r17,256
    8378:	1950b03a 	or	r8,r3,r5
    837c:	20000726 	beq	r4,zero,839c <__muldf3+0x4dc>
    8380:	4006d07a 	srli	r3,r8,1
    8384:	880497fa 	slli	r2,r17,31
    8388:	4200004c 	andi	r8,r8,1
    838c:	8822d07a 	srli	r17,r17,1
    8390:	1a10b03a 	or	r8,r3,r8
    8394:	1210b03a 	or	r8,r2,r8
    8398:	5805883a 	mov	r2,r11
    839c:	1140ffc4 	addi	r5,r2,1023
    83a0:	0140440e 	bge	zero,r5,84b4 <__muldf3+0x5f4>
    83a4:	40c001cc 	andi	r3,r8,7
    83a8:	18000726 	beq	r3,zero,83c8 <__muldf3+0x508>
    83ac:	40c003cc 	andi	r3,r8,15
    83b0:	01000104 	movi	r4,4
    83b4:	19000426 	beq	r3,r4,83c8 <__muldf3+0x508>
    83b8:	4107883a 	add	r3,r8,r4
    83bc:	1a11803a 	cmpltu	r8,r3,r8
    83c0:	8a23883a 	add	r17,r17,r8
    83c4:	1811883a 	mov	r8,r3
    83c8:	88c0402c 	andhi	r3,r17,256
    83cc:	18000426 	beq	r3,zero,83e0 <__muldf3+0x520>
    83d0:	11410004 	addi	r5,r2,1024
    83d4:	00bfc034 	movhi	r2,65280
    83d8:	10bfffc4 	addi	r2,r2,-1
    83dc:	88a2703a 	and	r17,r17,r2
    83e0:	0081ff84 	movi	r2,2046
    83e4:	117f6416 	blt	r2,r5,8178 <__alt_data_end+0xf0008178>
    83e8:	8828977a 	slli	r20,r17,29
    83ec:	4010d0fa 	srli	r8,r8,3
    83f0:	8822927a 	slli	r17,r17,9
    83f4:	2881ffcc 	andi	r2,r5,2047
    83f8:	a228b03a 	or	r20,r20,r8
    83fc:	880ad33a 	srli	r5,r17,12
    8400:	b02b883a 	mov	r21,r22
    8404:	003f0d06 	br	803c <__alt_data_end+0xf000803c>
    8408:	8080022c 	andhi	r2,r16,8
    840c:	10000926 	beq	r2,zero,8434 <__muldf3+0x574>
    8410:	8880022c 	andhi	r2,r17,8
    8414:	1000071e 	bne	r2,zero,8434 <__muldf3+0x574>
    8418:	00800434 	movhi	r2,16
    841c:	89400234 	orhi	r5,r17,8
    8420:	10bfffc4 	addi	r2,r2,-1
    8424:	b82b883a 	mov	r21,r23
    8428:	288a703a 	and	r5,r5,r2
    842c:	4029883a 	mov	r20,r8
    8430:	003f6806 	br	81d4 <__alt_data_end+0xf00081d4>
    8434:	00800434 	movhi	r2,16
    8438:	81400234 	orhi	r5,r16,8
    843c:	10bfffc4 	addi	r2,r2,-1
    8440:	288a703a 	and	r5,r5,r2
    8444:	003f6306 	br	81d4 <__alt_data_end+0xf00081d4>
    8448:	147ff604 	addi	r17,r2,-40
    844c:	3462983a 	sll	r17,r6,r17
    8450:	0011883a 	mov	r8,zero
    8454:	003f4406 	br	8168 <__alt_data_end+0xf0008168>
    8458:	3009883a 	mov	r4,r6
    845c:	d9800215 	stw	r6,8(sp)
    8460:	da400115 	stw	r9,4(sp)
    8464:	da800015 	stw	r10,0(sp)
    8468:	00092e80 	call	92e8 <__clzsi2>
    846c:	10800804 	addi	r2,r2,32
    8470:	da800017 	ldw	r10,0(sp)
    8474:	da400117 	ldw	r9,4(sp)
    8478:	d9800217 	ldw	r6,8(sp)
    847c:	003f3006 	br	8140 <__alt_data_end+0xf0008140>
    8480:	143ff604 	addi	r16,r2,-40
    8484:	9c20983a 	sll	r16,r19,r16
    8488:	0029883a 	mov	r20,zero
    848c:	003f1606 	br	80e8 <__alt_data_end+0xf00080e8>
    8490:	d9800215 	stw	r6,8(sp)
    8494:	d9c00015 	stw	r7,0(sp)
    8498:	da400115 	stw	r9,4(sp)
    849c:	00092e80 	call	92e8 <__clzsi2>
    84a0:	10800804 	addi	r2,r2,32
    84a4:	da400117 	ldw	r9,4(sp)
    84a8:	d9c00017 	ldw	r7,0(sp)
    84ac:	d9800217 	ldw	r6,8(sp)
    84b0:	003f0306 	br	80c0 <__alt_data_end+0xf00080c0>
    84b4:	00c00044 	movi	r3,1
    84b8:	1947c83a 	sub	r3,r3,r5
    84bc:	00800e04 	movi	r2,56
    84c0:	10feda16 	blt	r2,r3,802c <__alt_data_end+0xf000802c>
    84c4:	008007c4 	movi	r2,31
    84c8:	10c01b16 	blt	r2,r3,8538 <__muldf3+0x678>
    84cc:	00800804 	movi	r2,32
    84d0:	10c5c83a 	sub	r2,r2,r3
    84d4:	888a983a 	sll	r5,r17,r2
    84d8:	40c8d83a 	srl	r4,r8,r3
    84dc:	4084983a 	sll	r2,r8,r2
    84e0:	88e2d83a 	srl	r17,r17,r3
    84e4:	2906b03a 	or	r3,r5,r4
    84e8:	1004c03a 	cmpne	r2,r2,zero
    84ec:	1886b03a 	or	r3,r3,r2
    84f0:	188001cc 	andi	r2,r3,7
    84f4:	10000726 	beq	r2,zero,8514 <__muldf3+0x654>
    84f8:	188003cc 	andi	r2,r3,15
    84fc:	01000104 	movi	r4,4
    8500:	11000426 	beq	r2,r4,8514 <__muldf3+0x654>
    8504:	1805883a 	mov	r2,r3
    8508:	10c00104 	addi	r3,r2,4
    850c:	1885803a 	cmpltu	r2,r3,r2
    8510:	88a3883a 	add	r17,r17,r2
    8514:	8880202c 	andhi	r2,r17,128
    8518:	10001c26 	beq	r2,zero,858c <__muldf3+0x6cc>
    851c:	b02b883a 	mov	r21,r22
    8520:	00800044 	movi	r2,1
    8524:	000b883a 	mov	r5,zero
    8528:	0029883a 	mov	r20,zero
    852c:	003ec306 	br	803c <__alt_data_end+0xf000803c>
    8530:	5805883a 	mov	r2,r11
    8534:	003f9906 	br	839c <__alt_data_end+0xf000839c>
    8538:	00bff844 	movi	r2,-31
    853c:	1145c83a 	sub	r2,r2,r5
    8540:	8888d83a 	srl	r4,r17,r2
    8544:	00800804 	movi	r2,32
    8548:	18801a26 	beq	r3,r2,85b4 <__muldf3+0x6f4>
    854c:	00801004 	movi	r2,64
    8550:	10c5c83a 	sub	r2,r2,r3
    8554:	8884983a 	sll	r2,r17,r2
    8558:	1204b03a 	or	r2,r2,r8
    855c:	1004c03a 	cmpne	r2,r2,zero
    8560:	2084b03a 	or	r2,r4,r2
    8564:	144001cc 	andi	r17,r2,7
    8568:	88000d1e 	bne	r17,zero,85a0 <__muldf3+0x6e0>
    856c:	000b883a 	mov	r5,zero
    8570:	1028d0fa 	srli	r20,r2,3
    8574:	b02b883a 	mov	r21,r22
    8578:	0005883a 	mov	r2,zero
    857c:	a468b03a 	or	r20,r20,r17
    8580:	003eae06 	br	803c <__alt_data_end+0xf000803c>
    8584:	1007883a 	mov	r3,r2
    8588:	0023883a 	mov	r17,zero
    858c:	880a927a 	slli	r5,r17,9
    8590:	1805883a 	mov	r2,r3
    8594:	8822977a 	slli	r17,r17,29
    8598:	280ad33a 	srli	r5,r5,12
    859c:	003ff406 	br	8570 <__alt_data_end+0xf0008570>
    85a0:	10c003cc 	andi	r3,r2,15
    85a4:	01000104 	movi	r4,4
    85a8:	193ff626 	beq	r3,r4,8584 <__alt_data_end+0xf0008584>
    85ac:	0023883a 	mov	r17,zero
    85b0:	003fd506 	br	8508 <__alt_data_end+0xf0008508>
    85b4:	0005883a 	mov	r2,zero
    85b8:	003fe706 	br	8558 <__alt_data_end+0xf0008558>
    85bc:	00800434 	movhi	r2,16
    85c0:	89400234 	orhi	r5,r17,8
    85c4:	10bfffc4 	addi	r2,r2,-1
    85c8:	b02b883a 	mov	r21,r22
    85cc:	288a703a 	and	r5,r5,r2
    85d0:	4029883a 	mov	r20,r8
    85d4:	003eff06 	br	81d4 <__alt_data_end+0xf00081d4>

000085d8 <__subdf3>:
    85d8:	02000434 	movhi	r8,16
    85dc:	423fffc4 	addi	r8,r8,-1
    85e0:	defffb04 	addi	sp,sp,-20
    85e4:	2a14703a 	and	r10,r5,r8
    85e8:	3812d53a 	srli	r9,r7,20
    85ec:	3a10703a 	and	r8,r7,r8
    85f0:	2006d77a 	srli	r3,r4,29
    85f4:	3004d77a 	srli	r2,r6,29
    85f8:	dc000015 	stw	r16,0(sp)
    85fc:	501490fa 	slli	r10,r10,3
    8600:	2820d53a 	srli	r16,r5,20
    8604:	401090fa 	slli	r8,r8,3
    8608:	dc800215 	stw	r18,8(sp)
    860c:	dc400115 	stw	r17,4(sp)
    8610:	dfc00415 	stw	ra,16(sp)
    8614:	202290fa 	slli	r17,r4,3
    8618:	dcc00315 	stw	r19,12(sp)
    861c:	4a41ffcc 	andi	r9,r9,2047
    8620:	0101ffc4 	movi	r4,2047
    8624:	2824d7fa 	srli	r18,r5,31
    8628:	8401ffcc 	andi	r16,r16,2047
    862c:	50c6b03a 	or	r3,r10,r3
    8630:	380ed7fa 	srli	r7,r7,31
    8634:	408ab03a 	or	r5,r8,r2
    8638:	300c90fa 	slli	r6,r6,3
    863c:	49009626 	beq	r9,r4,8898 <__subdf3+0x2c0>
    8640:	39c0005c 	xori	r7,r7,1
    8644:	8245c83a 	sub	r2,r16,r9
    8648:	3c807426 	beq	r7,r18,881c <__subdf3+0x244>
    864c:	0080af0e 	bge	zero,r2,890c <__subdf3+0x334>
    8650:	48002a1e 	bne	r9,zero,86fc <__subdf3+0x124>
    8654:	2988b03a 	or	r4,r5,r6
    8658:	20009a1e 	bne	r4,zero,88c4 <__subdf3+0x2ec>
    865c:	888001cc 	andi	r2,r17,7
    8660:	10000726 	beq	r2,zero,8680 <__subdf3+0xa8>
    8664:	888003cc 	andi	r2,r17,15
    8668:	01000104 	movi	r4,4
    866c:	11000426 	beq	r2,r4,8680 <__subdf3+0xa8>
    8670:	890b883a 	add	r5,r17,r4
    8674:	2c63803a 	cmpltu	r17,r5,r17
    8678:	1c47883a 	add	r3,r3,r17
    867c:	2823883a 	mov	r17,r5
    8680:	1880202c 	andhi	r2,r3,128
    8684:	10005926 	beq	r2,zero,87ec <__subdf3+0x214>
    8688:	84000044 	addi	r16,r16,1
    868c:	0081ffc4 	movi	r2,2047
    8690:	8080be26 	beq	r16,r2,898c <__subdf3+0x3b4>
    8694:	017fe034 	movhi	r5,65408
    8698:	297fffc4 	addi	r5,r5,-1
    869c:	1946703a 	and	r3,r3,r5
    86a0:	1804977a 	slli	r2,r3,29
    86a4:	1806927a 	slli	r3,r3,9
    86a8:	8822d0fa 	srli	r17,r17,3
    86ac:	8401ffcc 	andi	r16,r16,2047
    86b0:	180ad33a 	srli	r5,r3,12
    86b4:	9100004c 	andi	r4,r18,1
    86b8:	1444b03a 	or	r2,r2,r17
    86bc:	80c1ffcc 	andi	r3,r16,2047
    86c0:	1820953a 	slli	r16,r3,20
    86c4:	20c03fcc 	andi	r3,r4,255
    86c8:	180897fa 	slli	r4,r3,31
    86cc:	00c00434 	movhi	r3,16
    86d0:	18ffffc4 	addi	r3,r3,-1
    86d4:	28c6703a 	and	r3,r5,r3
    86d8:	1c06b03a 	or	r3,r3,r16
    86dc:	1906b03a 	or	r3,r3,r4
    86e0:	dfc00417 	ldw	ra,16(sp)
    86e4:	dcc00317 	ldw	r19,12(sp)
    86e8:	dc800217 	ldw	r18,8(sp)
    86ec:	dc400117 	ldw	r17,4(sp)
    86f0:	dc000017 	ldw	r16,0(sp)
    86f4:	dec00504 	addi	sp,sp,20
    86f8:	f800283a 	ret
    86fc:	0101ffc4 	movi	r4,2047
    8700:	813fd626 	beq	r16,r4,865c <__alt_data_end+0xf000865c>
    8704:	29402034 	orhi	r5,r5,128
    8708:	01000e04 	movi	r4,56
    870c:	2080a316 	blt	r4,r2,899c <__subdf3+0x3c4>
    8710:	010007c4 	movi	r4,31
    8714:	2080c616 	blt	r4,r2,8a30 <__subdf3+0x458>
    8718:	01000804 	movi	r4,32
    871c:	2089c83a 	sub	r4,r4,r2
    8720:	2910983a 	sll	r8,r5,r4
    8724:	308ed83a 	srl	r7,r6,r2
    8728:	3108983a 	sll	r4,r6,r4
    872c:	2884d83a 	srl	r2,r5,r2
    8730:	41ccb03a 	or	r6,r8,r7
    8734:	2008c03a 	cmpne	r4,r4,zero
    8738:	310cb03a 	or	r6,r6,r4
    873c:	898dc83a 	sub	r6,r17,r6
    8740:	89a3803a 	cmpltu	r17,r17,r6
    8744:	1887c83a 	sub	r3,r3,r2
    8748:	1c47c83a 	sub	r3,r3,r17
    874c:	3023883a 	mov	r17,r6
    8750:	1880202c 	andhi	r2,r3,128
    8754:	10002326 	beq	r2,zero,87e4 <__subdf3+0x20c>
    8758:	04c02034 	movhi	r19,128
    875c:	9cffffc4 	addi	r19,r19,-1
    8760:	1ce6703a 	and	r19,r3,r19
    8764:	98007a26 	beq	r19,zero,8950 <__subdf3+0x378>
    8768:	9809883a 	mov	r4,r19
    876c:	00092e80 	call	92e8 <__clzsi2>
    8770:	113ffe04 	addi	r4,r2,-8
    8774:	00c007c4 	movi	r3,31
    8778:	19007b16 	blt	r3,r4,8968 <__subdf3+0x390>
    877c:	00800804 	movi	r2,32
    8780:	1105c83a 	sub	r2,r2,r4
    8784:	8884d83a 	srl	r2,r17,r2
    8788:	9906983a 	sll	r3,r19,r4
    878c:	8922983a 	sll	r17,r17,r4
    8790:	10c4b03a 	or	r2,r2,r3
    8794:	24007816 	blt	r4,r16,8978 <__subdf3+0x3a0>
    8798:	2421c83a 	sub	r16,r4,r16
    879c:	80c00044 	addi	r3,r16,1
    87a0:	010007c4 	movi	r4,31
    87a4:	20c09516 	blt	r4,r3,89fc <__subdf3+0x424>
    87a8:	01400804 	movi	r5,32
    87ac:	28cbc83a 	sub	r5,r5,r3
    87b0:	88c8d83a 	srl	r4,r17,r3
    87b4:	8962983a 	sll	r17,r17,r5
    87b8:	114a983a 	sll	r5,r2,r5
    87bc:	10c6d83a 	srl	r3,r2,r3
    87c0:	8804c03a 	cmpne	r2,r17,zero
    87c4:	290ab03a 	or	r5,r5,r4
    87c8:	28a2b03a 	or	r17,r5,r2
    87cc:	0021883a 	mov	r16,zero
    87d0:	003fa206 	br	865c <__alt_data_end+0xf000865c>
    87d4:	2090b03a 	or	r8,r4,r2
    87d8:	40018e26 	beq	r8,zero,8e14 <__subdf3+0x83c>
    87dc:	1007883a 	mov	r3,r2
    87e0:	2023883a 	mov	r17,r4
    87e4:	888001cc 	andi	r2,r17,7
    87e8:	103f9e1e 	bne	r2,zero,8664 <__alt_data_end+0xf0008664>
    87ec:	1804977a 	slli	r2,r3,29
    87f0:	8822d0fa 	srli	r17,r17,3
    87f4:	1810d0fa 	srli	r8,r3,3
    87f8:	9100004c 	andi	r4,r18,1
    87fc:	1444b03a 	or	r2,r2,r17
    8800:	00c1ffc4 	movi	r3,2047
    8804:	80c02826 	beq	r16,r3,88a8 <__subdf3+0x2d0>
    8808:	01400434 	movhi	r5,16
    880c:	297fffc4 	addi	r5,r5,-1
    8810:	80e0703a 	and	r16,r16,r3
    8814:	414a703a 	and	r5,r8,r5
    8818:	003fa806 	br	86bc <__alt_data_end+0xf00086bc>
    881c:	0080630e 	bge	zero,r2,89ac <__subdf3+0x3d4>
    8820:	48003026 	beq	r9,zero,88e4 <__subdf3+0x30c>
    8824:	0101ffc4 	movi	r4,2047
    8828:	813f8c26 	beq	r16,r4,865c <__alt_data_end+0xf000865c>
    882c:	29402034 	orhi	r5,r5,128
    8830:	01000e04 	movi	r4,56
    8834:	2080a90e 	bge	r4,r2,8adc <__subdf3+0x504>
    8838:	298cb03a 	or	r6,r5,r6
    883c:	3012c03a 	cmpne	r9,r6,zero
    8840:	0005883a 	mov	r2,zero
    8844:	4c53883a 	add	r9,r9,r17
    8848:	4c63803a 	cmpltu	r17,r9,r17
    884c:	10c7883a 	add	r3,r2,r3
    8850:	88c7883a 	add	r3,r17,r3
    8854:	4823883a 	mov	r17,r9
    8858:	1880202c 	andhi	r2,r3,128
    885c:	1000d026 	beq	r2,zero,8ba0 <__subdf3+0x5c8>
    8860:	84000044 	addi	r16,r16,1
    8864:	0081ffc4 	movi	r2,2047
    8868:	8080fe26 	beq	r16,r2,8c64 <__subdf3+0x68c>
    886c:	00bfe034 	movhi	r2,65408
    8870:	10bfffc4 	addi	r2,r2,-1
    8874:	1886703a 	and	r3,r3,r2
    8878:	880ad07a 	srli	r5,r17,1
    887c:	180497fa 	slli	r2,r3,31
    8880:	8900004c 	andi	r4,r17,1
    8884:	2922b03a 	or	r17,r5,r4
    8888:	1806d07a 	srli	r3,r3,1
    888c:	1462b03a 	or	r17,r2,r17
    8890:	3825883a 	mov	r18,r7
    8894:	003f7106 	br	865c <__alt_data_end+0xf000865c>
    8898:	2984b03a 	or	r2,r5,r6
    889c:	103f6826 	beq	r2,zero,8640 <__alt_data_end+0xf0008640>
    88a0:	39c03fcc 	andi	r7,r7,255
    88a4:	003f6706 	br	8644 <__alt_data_end+0xf0008644>
    88a8:	4086b03a 	or	r3,r8,r2
    88ac:	18015226 	beq	r3,zero,8df8 <__subdf3+0x820>
    88b0:	00c00434 	movhi	r3,16
    88b4:	41400234 	orhi	r5,r8,8
    88b8:	18ffffc4 	addi	r3,r3,-1
    88bc:	28ca703a 	and	r5,r5,r3
    88c0:	003f7e06 	br	86bc <__alt_data_end+0xf00086bc>
    88c4:	10bfffc4 	addi	r2,r2,-1
    88c8:	1000491e 	bne	r2,zero,89f0 <__subdf3+0x418>
    88cc:	898fc83a 	sub	r7,r17,r6
    88d0:	89e3803a 	cmpltu	r17,r17,r7
    88d4:	1947c83a 	sub	r3,r3,r5
    88d8:	1c47c83a 	sub	r3,r3,r17
    88dc:	3823883a 	mov	r17,r7
    88e0:	003f9b06 	br	8750 <__alt_data_end+0xf0008750>
    88e4:	2988b03a 	or	r4,r5,r6
    88e8:	203f5c26 	beq	r4,zero,865c <__alt_data_end+0xf000865c>
    88ec:	10bfffc4 	addi	r2,r2,-1
    88f0:	1000931e 	bne	r2,zero,8b40 <__subdf3+0x568>
    88f4:	898d883a 	add	r6,r17,r6
    88f8:	3463803a 	cmpltu	r17,r6,r17
    88fc:	1947883a 	add	r3,r3,r5
    8900:	88c7883a 	add	r3,r17,r3
    8904:	3023883a 	mov	r17,r6
    8908:	003fd306 	br	8858 <__alt_data_end+0xf0008858>
    890c:	1000541e 	bne	r2,zero,8a60 <__subdf3+0x488>
    8910:	80800044 	addi	r2,r16,1
    8914:	1081ffcc 	andi	r2,r2,2047
    8918:	01000044 	movi	r4,1
    891c:	2080a20e 	bge	r4,r2,8ba8 <__subdf3+0x5d0>
    8920:	8989c83a 	sub	r4,r17,r6
    8924:	8905803a 	cmpltu	r2,r17,r4
    8928:	1967c83a 	sub	r19,r3,r5
    892c:	98a7c83a 	sub	r19,r19,r2
    8930:	9880202c 	andhi	r2,r19,128
    8934:	10006326 	beq	r2,zero,8ac4 <__subdf3+0x4ec>
    8938:	3463c83a 	sub	r17,r6,r17
    893c:	28c7c83a 	sub	r3,r5,r3
    8940:	344d803a 	cmpltu	r6,r6,r17
    8944:	19a7c83a 	sub	r19,r3,r6
    8948:	3825883a 	mov	r18,r7
    894c:	983f861e 	bne	r19,zero,8768 <__alt_data_end+0xf0008768>
    8950:	8809883a 	mov	r4,r17
    8954:	00092e80 	call	92e8 <__clzsi2>
    8958:	10800804 	addi	r2,r2,32
    895c:	113ffe04 	addi	r4,r2,-8
    8960:	00c007c4 	movi	r3,31
    8964:	193f850e 	bge	r3,r4,877c <__alt_data_end+0xf000877c>
    8968:	10bff604 	addi	r2,r2,-40
    896c:	8884983a 	sll	r2,r17,r2
    8970:	0023883a 	mov	r17,zero
    8974:	243f880e 	bge	r4,r16,8798 <__alt_data_end+0xf0008798>
    8978:	00ffe034 	movhi	r3,65408
    897c:	18ffffc4 	addi	r3,r3,-1
    8980:	8121c83a 	sub	r16,r16,r4
    8984:	10c6703a 	and	r3,r2,r3
    8988:	003f3406 	br	865c <__alt_data_end+0xf000865c>
    898c:	9100004c 	andi	r4,r18,1
    8990:	000b883a 	mov	r5,zero
    8994:	0005883a 	mov	r2,zero
    8998:	003f4806 	br	86bc <__alt_data_end+0xf00086bc>
    899c:	298cb03a 	or	r6,r5,r6
    89a0:	300cc03a 	cmpne	r6,r6,zero
    89a4:	0005883a 	mov	r2,zero
    89a8:	003f6406 	br	873c <__alt_data_end+0xf000873c>
    89ac:	10009a1e 	bne	r2,zero,8c18 <__subdf3+0x640>
    89b0:	82400044 	addi	r9,r16,1
    89b4:	4881ffcc 	andi	r2,r9,2047
    89b8:	02800044 	movi	r10,1
    89bc:	5080670e 	bge	r10,r2,8b5c <__subdf3+0x584>
    89c0:	0081ffc4 	movi	r2,2047
    89c4:	4880af26 	beq	r9,r2,8c84 <__subdf3+0x6ac>
    89c8:	898d883a 	add	r6,r17,r6
    89cc:	1945883a 	add	r2,r3,r5
    89d0:	3447803a 	cmpltu	r3,r6,r17
    89d4:	1887883a 	add	r3,r3,r2
    89d8:	182297fa 	slli	r17,r3,31
    89dc:	300cd07a 	srli	r6,r6,1
    89e0:	1806d07a 	srli	r3,r3,1
    89e4:	4821883a 	mov	r16,r9
    89e8:	89a2b03a 	or	r17,r17,r6
    89ec:	003f1b06 	br	865c <__alt_data_end+0xf000865c>
    89f0:	0101ffc4 	movi	r4,2047
    89f4:	813f441e 	bne	r16,r4,8708 <__alt_data_end+0xf0008708>
    89f8:	003f1806 	br	865c <__alt_data_end+0xf000865c>
    89fc:	843ff844 	addi	r16,r16,-31
    8a00:	01400804 	movi	r5,32
    8a04:	1408d83a 	srl	r4,r2,r16
    8a08:	19405026 	beq	r3,r5,8b4c <__subdf3+0x574>
    8a0c:	01401004 	movi	r5,64
    8a10:	28c7c83a 	sub	r3,r5,r3
    8a14:	10c4983a 	sll	r2,r2,r3
    8a18:	88a2b03a 	or	r17,r17,r2
    8a1c:	8822c03a 	cmpne	r17,r17,zero
    8a20:	2462b03a 	or	r17,r4,r17
    8a24:	0007883a 	mov	r3,zero
    8a28:	0021883a 	mov	r16,zero
    8a2c:	003f6d06 	br	87e4 <__alt_data_end+0xf00087e4>
    8a30:	11fff804 	addi	r7,r2,-32
    8a34:	01000804 	movi	r4,32
    8a38:	29ced83a 	srl	r7,r5,r7
    8a3c:	11004526 	beq	r2,r4,8b54 <__subdf3+0x57c>
    8a40:	01001004 	movi	r4,64
    8a44:	2089c83a 	sub	r4,r4,r2
    8a48:	2904983a 	sll	r2,r5,r4
    8a4c:	118cb03a 	or	r6,r2,r6
    8a50:	300cc03a 	cmpne	r6,r6,zero
    8a54:	398cb03a 	or	r6,r7,r6
    8a58:	0005883a 	mov	r2,zero
    8a5c:	003f3706 	br	873c <__alt_data_end+0xf000873c>
    8a60:	80002a26 	beq	r16,zero,8b0c <__subdf3+0x534>
    8a64:	0101ffc4 	movi	r4,2047
    8a68:	49006626 	beq	r9,r4,8c04 <__subdf3+0x62c>
    8a6c:	0085c83a 	sub	r2,zero,r2
    8a70:	18c02034 	orhi	r3,r3,128
    8a74:	01000e04 	movi	r4,56
    8a78:	20807e16 	blt	r4,r2,8c74 <__subdf3+0x69c>
    8a7c:	010007c4 	movi	r4,31
    8a80:	2080e716 	blt	r4,r2,8e20 <__subdf3+0x848>
    8a84:	01000804 	movi	r4,32
    8a88:	2089c83a 	sub	r4,r4,r2
    8a8c:	1914983a 	sll	r10,r3,r4
    8a90:	8890d83a 	srl	r8,r17,r2
    8a94:	8908983a 	sll	r4,r17,r4
    8a98:	1884d83a 	srl	r2,r3,r2
    8a9c:	5222b03a 	or	r17,r10,r8
    8aa0:	2006c03a 	cmpne	r3,r4,zero
    8aa4:	88e2b03a 	or	r17,r17,r3
    8aa8:	3463c83a 	sub	r17,r6,r17
    8aac:	2885c83a 	sub	r2,r5,r2
    8ab0:	344d803a 	cmpltu	r6,r6,r17
    8ab4:	1187c83a 	sub	r3,r2,r6
    8ab8:	4821883a 	mov	r16,r9
    8abc:	3825883a 	mov	r18,r7
    8ac0:	003f2306 	br	8750 <__alt_data_end+0xf0008750>
    8ac4:	24d0b03a 	or	r8,r4,r19
    8ac8:	40001b1e 	bne	r8,zero,8b38 <__subdf3+0x560>
    8acc:	0005883a 	mov	r2,zero
    8ad0:	0009883a 	mov	r4,zero
    8ad4:	0021883a 	mov	r16,zero
    8ad8:	003f4906 	br	8800 <__alt_data_end+0xf0008800>
    8adc:	010007c4 	movi	r4,31
    8ae0:	20803a16 	blt	r4,r2,8bcc <__subdf3+0x5f4>
    8ae4:	01000804 	movi	r4,32
    8ae8:	2089c83a 	sub	r4,r4,r2
    8aec:	2912983a 	sll	r9,r5,r4
    8af0:	3090d83a 	srl	r8,r6,r2
    8af4:	3108983a 	sll	r4,r6,r4
    8af8:	2884d83a 	srl	r2,r5,r2
    8afc:	4a12b03a 	or	r9,r9,r8
    8b00:	2008c03a 	cmpne	r4,r4,zero
    8b04:	4912b03a 	or	r9,r9,r4
    8b08:	003f4e06 	br	8844 <__alt_data_end+0xf0008844>
    8b0c:	1c48b03a 	or	r4,r3,r17
    8b10:	20003c26 	beq	r4,zero,8c04 <__subdf3+0x62c>
    8b14:	0084303a 	nor	r2,zero,r2
    8b18:	1000381e 	bne	r2,zero,8bfc <__subdf3+0x624>
    8b1c:	3463c83a 	sub	r17,r6,r17
    8b20:	28c5c83a 	sub	r2,r5,r3
    8b24:	344d803a 	cmpltu	r6,r6,r17
    8b28:	1187c83a 	sub	r3,r2,r6
    8b2c:	4821883a 	mov	r16,r9
    8b30:	3825883a 	mov	r18,r7
    8b34:	003f0606 	br	8750 <__alt_data_end+0xf0008750>
    8b38:	2023883a 	mov	r17,r4
    8b3c:	003f0906 	br	8764 <__alt_data_end+0xf0008764>
    8b40:	0101ffc4 	movi	r4,2047
    8b44:	813f3a1e 	bne	r16,r4,8830 <__alt_data_end+0xf0008830>
    8b48:	003ec406 	br	865c <__alt_data_end+0xf000865c>
    8b4c:	0005883a 	mov	r2,zero
    8b50:	003fb106 	br	8a18 <__alt_data_end+0xf0008a18>
    8b54:	0005883a 	mov	r2,zero
    8b58:	003fbc06 	br	8a4c <__alt_data_end+0xf0008a4c>
    8b5c:	1c44b03a 	or	r2,r3,r17
    8b60:	80008e1e 	bne	r16,zero,8d9c <__subdf3+0x7c4>
    8b64:	1000c826 	beq	r2,zero,8e88 <__subdf3+0x8b0>
    8b68:	2984b03a 	or	r2,r5,r6
    8b6c:	103ebb26 	beq	r2,zero,865c <__alt_data_end+0xf000865c>
    8b70:	8989883a 	add	r4,r17,r6
    8b74:	1945883a 	add	r2,r3,r5
    8b78:	2447803a 	cmpltu	r3,r4,r17
    8b7c:	1887883a 	add	r3,r3,r2
    8b80:	1880202c 	andhi	r2,r3,128
    8b84:	2023883a 	mov	r17,r4
    8b88:	103f1626 	beq	r2,zero,87e4 <__alt_data_end+0xf00087e4>
    8b8c:	00bfe034 	movhi	r2,65408
    8b90:	10bfffc4 	addi	r2,r2,-1
    8b94:	5021883a 	mov	r16,r10
    8b98:	1886703a 	and	r3,r3,r2
    8b9c:	003eaf06 	br	865c <__alt_data_end+0xf000865c>
    8ba0:	3825883a 	mov	r18,r7
    8ba4:	003f0f06 	br	87e4 <__alt_data_end+0xf00087e4>
    8ba8:	1c44b03a 	or	r2,r3,r17
    8bac:	8000251e 	bne	r16,zero,8c44 <__subdf3+0x66c>
    8bb0:	1000661e 	bne	r2,zero,8d4c <__subdf3+0x774>
    8bb4:	2990b03a 	or	r8,r5,r6
    8bb8:	40009626 	beq	r8,zero,8e14 <__subdf3+0x83c>
    8bbc:	2807883a 	mov	r3,r5
    8bc0:	3023883a 	mov	r17,r6
    8bc4:	3825883a 	mov	r18,r7
    8bc8:	003ea406 	br	865c <__alt_data_end+0xf000865c>
    8bcc:	127ff804 	addi	r9,r2,-32
    8bd0:	01000804 	movi	r4,32
    8bd4:	2a52d83a 	srl	r9,r5,r9
    8bd8:	11008c26 	beq	r2,r4,8e0c <__subdf3+0x834>
    8bdc:	01001004 	movi	r4,64
    8be0:	2085c83a 	sub	r2,r4,r2
    8be4:	2884983a 	sll	r2,r5,r2
    8be8:	118cb03a 	or	r6,r2,r6
    8bec:	300cc03a 	cmpne	r6,r6,zero
    8bf0:	4992b03a 	or	r9,r9,r6
    8bf4:	0005883a 	mov	r2,zero
    8bf8:	003f1206 	br	8844 <__alt_data_end+0xf0008844>
    8bfc:	0101ffc4 	movi	r4,2047
    8c00:	493f9c1e 	bne	r9,r4,8a74 <__alt_data_end+0xf0008a74>
    8c04:	2807883a 	mov	r3,r5
    8c08:	3023883a 	mov	r17,r6
    8c0c:	4821883a 	mov	r16,r9
    8c10:	3825883a 	mov	r18,r7
    8c14:	003e9106 	br	865c <__alt_data_end+0xf000865c>
    8c18:	80001f1e 	bne	r16,zero,8c98 <__subdf3+0x6c0>
    8c1c:	1c48b03a 	or	r4,r3,r17
    8c20:	20005a26 	beq	r4,zero,8d8c <__subdf3+0x7b4>
    8c24:	0084303a 	nor	r2,zero,r2
    8c28:	1000561e 	bne	r2,zero,8d84 <__subdf3+0x7ac>
    8c2c:	89a3883a 	add	r17,r17,r6
    8c30:	1945883a 	add	r2,r3,r5
    8c34:	898d803a 	cmpltu	r6,r17,r6
    8c38:	3087883a 	add	r3,r6,r2
    8c3c:	4821883a 	mov	r16,r9
    8c40:	003f0506 	br	8858 <__alt_data_end+0xf0008858>
    8c44:	10002b1e 	bne	r2,zero,8cf4 <__subdf3+0x71c>
    8c48:	2984b03a 	or	r2,r5,r6
    8c4c:	10008026 	beq	r2,zero,8e50 <__subdf3+0x878>
    8c50:	2807883a 	mov	r3,r5
    8c54:	3023883a 	mov	r17,r6
    8c58:	3825883a 	mov	r18,r7
    8c5c:	0401ffc4 	movi	r16,2047
    8c60:	003e7e06 	br	865c <__alt_data_end+0xf000865c>
    8c64:	3809883a 	mov	r4,r7
    8c68:	0011883a 	mov	r8,zero
    8c6c:	0005883a 	mov	r2,zero
    8c70:	003ee306 	br	8800 <__alt_data_end+0xf0008800>
    8c74:	1c62b03a 	or	r17,r3,r17
    8c78:	8822c03a 	cmpne	r17,r17,zero
    8c7c:	0005883a 	mov	r2,zero
    8c80:	003f8906 	br	8aa8 <__alt_data_end+0xf0008aa8>
    8c84:	3809883a 	mov	r4,r7
    8c88:	4821883a 	mov	r16,r9
    8c8c:	0011883a 	mov	r8,zero
    8c90:	0005883a 	mov	r2,zero
    8c94:	003eda06 	br	8800 <__alt_data_end+0xf0008800>
    8c98:	0101ffc4 	movi	r4,2047
    8c9c:	49003b26 	beq	r9,r4,8d8c <__subdf3+0x7b4>
    8ca0:	0085c83a 	sub	r2,zero,r2
    8ca4:	18c02034 	orhi	r3,r3,128
    8ca8:	01000e04 	movi	r4,56
    8cac:	20806e16 	blt	r4,r2,8e68 <__subdf3+0x890>
    8cb0:	010007c4 	movi	r4,31
    8cb4:	20807716 	blt	r4,r2,8e94 <__subdf3+0x8bc>
    8cb8:	01000804 	movi	r4,32
    8cbc:	2089c83a 	sub	r4,r4,r2
    8cc0:	1914983a 	sll	r10,r3,r4
    8cc4:	8890d83a 	srl	r8,r17,r2
    8cc8:	8908983a 	sll	r4,r17,r4
    8ccc:	1884d83a 	srl	r2,r3,r2
    8cd0:	5222b03a 	or	r17,r10,r8
    8cd4:	2006c03a 	cmpne	r3,r4,zero
    8cd8:	88e2b03a 	or	r17,r17,r3
    8cdc:	89a3883a 	add	r17,r17,r6
    8ce0:	1145883a 	add	r2,r2,r5
    8ce4:	898d803a 	cmpltu	r6,r17,r6
    8ce8:	3087883a 	add	r3,r6,r2
    8cec:	4821883a 	mov	r16,r9
    8cf0:	003ed906 	br	8858 <__alt_data_end+0xf0008858>
    8cf4:	2984b03a 	or	r2,r5,r6
    8cf8:	10004226 	beq	r2,zero,8e04 <__subdf3+0x82c>
    8cfc:	1808d0fa 	srli	r4,r3,3
    8d00:	8822d0fa 	srli	r17,r17,3
    8d04:	1806977a 	slli	r3,r3,29
    8d08:	2080022c 	andhi	r2,r4,8
    8d0c:	1c62b03a 	or	r17,r3,r17
    8d10:	10000826 	beq	r2,zero,8d34 <__subdf3+0x75c>
    8d14:	2812d0fa 	srli	r9,r5,3
    8d18:	4880022c 	andhi	r2,r9,8
    8d1c:	1000051e 	bne	r2,zero,8d34 <__subdf3+0x75c>
    8d20:	300cd0fa 	srli	r6,r6,3
    8d24:	2804977a 	slli	r2,r5,29
    8d28:	4809883a 	mov	r4,r9
    8d2c:	3825883a 	mov	r18,r7
    8d30:	11a2b03a 	or	r17,r2,r6
    8d34:	8806d77a 	srli	r3,r17,29
    8d38:	200890fa 	slli	r4,r4,3
    8d3c:	882290fa 	slli	r17,r17,3
    8d40:	0401ffc4 	movi	r16,2047
    8d44:	1906b03a 	or	r3,r3,r4
    8d48:	003e4406 	br	865c <__alt_data_end+0xf000865c>
    8d4c:	2984b03a 	or	r2,r5,r6
    8d50:	103e4226 	beq	r2,zero,865c <__alt_data_end+0xf000865c>
    8d54:	8989c83a 	sub	r4,r17,r6
    8d58:	8911803a 	cmpltu	r8,r17,r4
    8d5c:	1945c83a 	sub	r2,r3,r5
    8d60:	1205c83a 	sub	r2,r2,r8
    8d64:	1200202c 	andhi	r8,r2,128
    8d68:	403e9a26 	beq	r8,zero,87d4 <__alt_data_end+0xf00087d4>
    8d6c:	3463c83a 	sub	r17,r6,r17
    8d70:	28c5c83a 	sub	r2,r5,r3
    8d74:	344d803a 	cmpltu	r6,r6,r17
    8d78:	1187c83a 	sub	r3,r2,r6
    8d7c:	3825883a 	mov	r18,r7
    8d80:	003e3606 	br	865c <__alt_data_end+0xf000865c>
    8d84:	0101ffc4 	movi	r4,2047
    8d88:	493fc71e 	bne	r9,r4,8ca8 <__alt_data_end+0xf0008ca8>
    8d8c:	2807883a 	mov	r3,r5
    8d90:	3023883a 	mov	r17,r6
    8d94:	4821883a 	mov	r16,r9
    8d98:	003e3006 	br	865c <__alt_data_end+0xf000865c>
    8d9c:	10003626 	beq	r2,zero,8e78 <__subdf3+0x8a0>
    8da0:	2984b03a 	or	r2,r5,r6
    8da4:	10001726 	beq	r2,zero,8e04 <__subdf3+0x82c>
    8da8:	1808d0fa 	srli	r4,r3,3
    8dac:	8822d0fa 	srli	r17,r17,3
    8db0:	1806977a 	slli	r3,r3,29
    8db4:	2080022c 	andhi	r2,r4,8
    8db8:	1c62b03a 	or	r17,r3,r17
    8dbc:	10000726 	beq	r2,zero,8ddc <__subdf3+0x804>
    8dc0:	2812d0fa 	srli	r9,r5,3
    8dc4:	4880022c 	andhi	r2,r9,8
    8dc8:	1000041e 	bne	r2,zero,8ddc <__subdf3+0x804>
    8dcc:	300cd0fa 	srli	r6,r6,3
    8dd0:	2804977a 	slli	r2,r5,29
    8dd4:	4809883a 	mov	r4,r9
    8dd8:	11a2b03a 	or	r17,r2,r6
    8ddc:	8806d77a 	srli	r3,r17,29
    8de0:	200890fa 	slli	r4,r4,3
    8de4:	882290fa 	slli	r17,r17,3
    8de8:	3825883a 	mov	r18,r7
    8dec:	1906b03a 	or	r3,r3,r4
    8df0:	0401ffc4 	movi	r16,2047
    8df4:	003e1906 	br	865c <__alt_data_end+0xf000865c>
    8df8:	000b883a 	mov	r5,zero
    8dfc:	0005883a 	mov	r2,zero
    8e00:	003e2e06 	br	86bc <__alt_data_end+0xf00086bc>
    8e04:	0401ffc4 	movi	r16,2047
    8e08:	003e1406 	br	865c <__alt_data_end+0xf000865c>
    8e0c:	0005883a 	mov	r2,zero
    8e10:	003f7506 	br	8be8 <__alt_data_end+0xf0008be8>
    8e14:	0005883a 	mov	r2,zero
    8e18:	0009883a 	mov	r4,zero
    8e1c:	003e7806 	br	8800 <__alt_data_end+0xf0008800>
    8e20:	123ff804 	addi	r8,r2,-32
    8e24:	01000804 	movi	r4,32
    8e28:	1a10d83a 	srl	r8,r3,r8
    8e2c:	11002526 	beq	r2,r4,8ec4 <__subdf3+0x8ec>
    8e30:	01001004 	movi	r4,64
    8e34:	2085c83a 	sub	r2,r4,r2
    8e38:	1884983a 	sll	r2,r3,r2
    8e3c:	1444b03a 	or	r2,r2,r17
    8e40:	1004c03a 	cmpne	r2,r2,zero
    8e44:	40a2b03a 	or	r17,r8,r2
    8e48:	0005883a 	mov	r2,zero
    8e4c:	003f1606 	br	8aa8 <__alt_data_end+0xf0008aa8>
    8e50:	02000434 	movhi	r8,16
    8e54:	0009883a 	mov	r4,zero
    8e58:	423fffc4 	addi	r8,r8,-1
    8e5c:	00bfffc4 	movi	r2,-1
    8e60:	0401ffc4 	movi	r16,2047
    8e64:	003e6606 	br	8800 <__alt_data_end+0xf0008800>
    8e68:	1c62b03a 	or	r17,r3,r17
    8e6c:	8822c03a 	cmpne	r17,r17,zero
    8e70:	0005883a 	mov	r2,zero
    8e74:	003f9906 	br	8cdc <__alt_data_end+0xf0008cdc>
    8e78:	2807883a 	mov	r3,r5
    8e7c:	3023883a 	mov	r17,r6
    8e80:	0401ffc4 	movi	r16,2047
    8e84:	003df506 	br	865c <__alt_data_end+0xf000865c>
    8e88:	2807883a 	mov	r3,r5
    8e8c:	3023883a 	mov	r17,r6
    8e90:	003df206 	br	865c <__alt_data_end+0xf000865c>
    8e94:	123ff804 	addi	r8,r2,-32
    8e98:	01000804 	movi	r4,32
    8e9c:	1a10d83a 	srl	r8,r3,r8
    8ea0:	11000a26 	beq	r2,r4,8ecc <__subdf3+0x8f4>
    8ea4:	01001004 	movi	r4,64
    8ea8:	2085c83a 	sub	r2,r4,r2
    8eac:	1884983a 	sll	r2,r3,r2
    8eb0:	1444b03a 	or	r2,r2,r17
    8eb4:	1004c03a 	cmpne	r2,r2,zero
    8eb8:	40a2b03a 	or	r17,r8,r2
    8ebc:	0005883a 	mov	r2,zero
    8ec0:	003f8606 	br	8cdc <__alt_data_end+0xf0008cdc>
    8ec4:	0005883a 	mov	r2,zero
    8ec8:	003fdc06 	br	8e3c <__alt_data_end+0xf0008e3c>
    8ecc:	0005883a 	mov	r2,zero
    8ed0:	003ff706 	br	8eb0 <__alt_data_end+0xf0008eb0>

00008ed4 <__fixdfsi>:
    8ed4:	280cd53a 	srli	r6,r5,20
    8ed8:	00c00434 	movhi	r3,16
    8edc:	18ffffc4 	addi	r3,r3,-1
    8ee0:	3181ffcc 	andi	r6,r6,2047
    8ee4:	01c0ff84 	movi	r7,1022
    8ee8:	28c6703a 	and	r3,r5,r3
    8eec:	280ad7fa 	srli	r5,r5,31
    8ef0:	3980120e 	bge	r7,r6,8f3c <__fixdfsi+0x68>
    8ef4:	00810744 	movi	r2,1053
    8ef8:	11800c16 	blt	r2,r6,8f2c <__fixdfsi+0x58>
    8efc:	00810cc4 	movi	r2,1075
    8f00:	1185c83a 	sub	r2,r2,r6
    8f04:	01c007c4 	movi	r7,31
    8f08:	18c00434 	orhi	r3,r3,16
    8f0c:	38800d16 	blt	r7,r2,8f44 <__fixdfsi+0x70>
    8f10:	31befb44 	addi	r6,r6,-1043
    8f14:	2084d83a 	srl	r2,r4,r2
    8f18:	1986983a 	sll	r3,r3,r6
    8f1c:	1884b03a 	or	r2,r3,r2
    8f20:	28000726 	beq	r5,zero,8f40 <__fixdfsi+0x6c>
    8f24:	0085c83a 	sub	r2,zero,r2
    8f28:	f800283a 	ret
    8f2c:	00a00034 	movhi	r2,32768
    8f30:	10bfffc4 	addi	r2,r2,-1
    8f34:	2885883a 	add	r2,r5,r2
    8f38:	f800283a 	ret
    8f3c:	0005883a 	mov	r2,zero
    8f40:	f800283a 	ret
    8f44:	008104c4 	movi	r2,1043
    8f48:	1185c83a 	sub	r2,r2,r6
    8f4c:	1884d83a 	srl	r2,r3,r2
    8f50:	003ff306 	br	8f20 <__alt_data_end+0xf0008f20>

00008f54 <__floatsidf>:
    8f54:	defffd04 	addi	sp,sp,-12
    8f58:	dfc00215 	stw	ra,8(sp)
    8f5c:	dc400115 	stw	r17,4(sp)
    8f60:	dc000015 	stw	r16,0(sp)
    8f64:	20002b26 	beq	r4,zero,9014 <__floatsidf+0xc0>
    8f68:	2023883a 	mov	r17,r4
    8f6c:	2020d7fa 	srli	r16,r4,31
    8f70:	20002d16 	blt	r4,zero,9028 <__floatsidf+0xd4>
    8f74:	8809883a 	mov	r4,r17
    8f78:	00092e80 	call	92e8 <__clzsi2>
    8f7c:	01410784 	movi	r5,1054
    8f80:	288bc83a 	sub	r5,r5,r2
    8f84:	01010cc4 	movi	r4,1075
    8f88:	2149c83a 	sub	r4,r4,r5
    8f8c:	00c007c4 	movi	r3,31
    8f90:	1900160e 	bge	r3,r4,8fec <__floatsidf+0x98>
    8f94:	00c104c4 	movi	r3,1043
    8f98:	1947c83a 	sub	r3,r3,r5
    8f9c:	88c6983a 	sll	r3,r17,r3
    8fa0:	00800434 	movhi	r2,16
    8fa4:	10bfffc4 	addi	r2,r2,-1
    8fa8:	1886703a 	and	r3,r3,r2
    8fac:	2941ffcc 	andi	r5,r5,2047
    8fb0:	800d883a 	mov	r6,r16
    8fb4:	0005883a 	mov	r2,zero
    8fb8:	280a953a 	slli	r5,r5,20
    8fbc:	31803fcc 	andi	r6,r6,255
    8fc0:	01000434 	movhi	r4,16
    8fc4:	300c97fa 	slli	r6,r6,31
    8fc8:	213fffc4 	addi	r4,r4,-1
    8fcc:	1906703a 	and	r3,r3,r4
    8fd0:	1946b03a 	or	r3,r3,r5
    8fd4:	1986b03a 	or	r3,r3,r6
    8fd8:	dfc00217 	ldw	ra,8(sp)
    8fdc:	dc400117 	ldw	r17,4(sp)
    8fe0:	dc000017 	ldw	r16,0(sp)
    8fe4:	dec00304 	addi	sp,sp,12
    8fe8:	f800283a 	ret
    8fec:	00c002c4 	movi	r3,11
    8ff0:	1887c83a 	sub	r3,r3,r2
    8ff4:	88c6d83a 	srl	r3,r17,r3
    8ff8:	8904983a 	sll	r2,r17,r4
    8ffc:	01000434 	movhi	r4,16
    9000:	213fffc4 	addi	r4,r4,-1
    9004:	2941ffcc 	andi	r5,r5,2047
    9008:	1906703a 	and	r3,r3,r4
    900c:	800d883a 	mov	r6,r16
    9010:	003fe906 	br	8fb8 <__alt_data_end+0xf0008fb8>
    9014:	000d883a 	mov	r6,zero
    9018:	000b883a 	mov	r5,zero
    901c:	0007883a 	mov	r3,zero
    9020:	0005883a 	mov	r2,zero
    9024:	003fe406 	br	8fb8 <__alt_data_end+0xf0008fb8>
    9028:	0123c83a 	sub	r17,zero,r4
    902c:	003fd106 	br	8f74 <__alt_data_end+0xf0008f74>

00009030 <__extendsfdf2>:
    9030:	200ad5fa 	srli	r5,r4,23
    9034:	defffd04 	addi	sp,sp,-12
    9038:	dc400115 	stw	r17,4(sp)
    903c:	29403fcc 	andi	r5,r5,255
    9040:	29800044 	addi	r6,r5,1
    9044:	04402034 	movhi	r17,128
    9048:	dc000015 	stw	r16,0(sp)
    904c:	8c7fffc4 	addi	r17,r17,-1
    9050:	dfc00215 	stw	ra,8(sp)
    9054:	31803fcc 	andi	r6,r6,255
    9058:	00800044 	movi	r2,1
    905c:	8922703a 	and	r17,r17,r4
    9060:	2020d7fa 	srli	r16,r4,31
    9064:	1180110e 	bge	r2,r6,90ac <__extendsfdf2+0x7c>
    9068:	880cd0fa 	srli	r6,r17,3
    906c:	8822977a 	slli	r17,r17,29
    9070:	2940e004 	addi	r5,r5,896
    9074:	2941ffcc 	andi	r5,r5,2047
    9078:	2804953a 	slli	r2,r5,20
    907c:	01400434 	movhi	r5,16
    9080:	800697fa 	slli	r3,r16,31
    9084:	297fffc4 	addi	r5,r5,-1
    9088:	314a703a 	and	r5,r6,r5
    908c:	288ab03a 	or	r5,r5,r2
    9090:	28c6b03a 	or	r3,r5,r3
    9094:	8805883a 	mov	r2,r17
    9098:	dfc00217 	ldw	ra,8(sp)
    909c:	dc400117 	ldw	r17,4(sp)
    90a0:	dc000017 	ldw	r16,0(sp)
    90a4:	dec00304 	addi	sp,sp,12
    90a8:	f800283a 	ret
    90ac:	2800111e 	bne	r5,zero,90f4 <__extendsfdf2+0xc4>
    90b0:	88001c26 	beq	r17,zero,9124 <__extendsfdf2+0xf4>
    90b4:	8809883a 	mov	r4,r17
    90b8:	00092e80 	call	92e8 <__clzsi2>
    90bc:	00c00284 	movi	r3,10
    90c0:	18801b16 	blt	r3,r2,9130 <__extendsfdf2+0x100>
    90c4:	018002c4 	movi	r6,11
    90c8:	308dc83a 	sub	r6,r6,r2
    90cc:	11000544 	addi	r4,r2,21
    90d0:	8986d83a 	srl	r3,r17,r6
    90d4:	8922983a 	sll	r17,r17,r4
    90d8:	0180e244 	movi	r6,905
    90dc:	01400434 	movhi	r5,16
    90e0:	3085c83a 	sub	r2,r6,r2
    90e4:	297fffc4 	addi	r5,r5,-1
    90e8:	194c703a 	and	r6,r3,r5
    90ec:	1141ffcc 	andi	r5,r2,2047
    90f0:	003fe006 	br	9074 <__alt_data_end+0xf0009074>
    90f4:	88000826 	beq	r17,zero,9118 <__extendsfdf2+0xe8>
    90f8:	880cd0fa 	srli	r6,r17,3
    90fc:	00800434 	movhi	r2,16
    9100:	10bfffc4 	addi	r2,r2,-1
    9104:	31800234 	orhi	r6,r6,8
    9108:	8822977a 	slli	r17,r17,29
    910c:	308c703a 	and	r6,r6,r2
    9110:	0141ffc4 	movi	r5,2047
    9114:	003fd706 	br	9074 <__alt_data_end+0xf0009074>
    9118:	0141ffc4 	movi	r5,2047
    911c:	000d883a 	mov	r6,zero
    9120:	003fd406 	br	9074 <__alt_data_end+0xf0009074>
    9124:	000b883a 	mov	r5,zero
    9128:	000d883a 	mov	r6,zero
    912c:	003fd106 	br	9074 <__alt_data_end+0xf0009074>
    9130:	11bffd44 	addi	r6,r2,-11
    9134:	8986983a 	sll	r3,r17,r6
    9138:	0023883a 	mov	r17,zero
    913c:	003fe606 	br	90d8 <__alt_data_end+0xf00090d8>

00009140 <__truncdfsf2>:
    9140:	2810d53a 	srli	r8,r5,20
    9144:	01c00434 	movhi	r7,16
    9148:	39ffffc4 	addi	r7,r7,-1
    914c:	29ce703a 	and	r7,r5,r7
    9150:	4201ffcc 	andi	r8,r8,2047
    9154:	380e90fa 	slli	r7,r7,3
    9158:	200cd77a 	srli	r6,r4,29
    915c:	42400044 	addi	r9,r8,1
    9160:	4a41ffcc 	andi	r9,r9,2047
    9164:	00c00044 	movi	r3,1
    9168:	280ad7fa 	srli	r5,r5,31
    916c:	31ceb03a 	or	r7,r6,r7
    9170:	200490fa 	slli	r2,r4,3
    9174:	1a40230e 	bge	r3,r9,9204 <__truncdfsf2+0xc4>
    9178:	40ff2004 	addi	r3,r8,-896
    917c:	01803f84 	movi	r6,254
    9180:	30c01516 	blt	r6,r3,91d8 <__truncdfsf2+0x98>
    9184:	00c0380e 	bge	zero,r3,9268 <__truncdfsf2+0x128>
    9188:	200c91ba 	slli	r6,r4,6
    918c:	380e90fa 	slli	r7,r7,3
    9190:	1004d77a 	srli	r2,r2,29
    9194:	300cc03a 	cmpne	r6,r6,zero
    9198:	31ccb03a 	or	r6,r6,r7
    919c:	308cb03a 	or	r6,r6,r2
    91a0:	308001cc 	andi	r2,r6,7
    91a4:	10000426 	beq	r2,zero,91b8 <__truncdfsf2+0x78>
    91a8:	308003cc 	andi	r2,r6,15
    91ac:	01000104 	movi	r4,4
    91b0:	11000126 	beq	r2,r4,91b8 <__truncdfsf2+0x78>
    91b4:	31800104 	addi	r6,r6,4
    91b8:	3081002c 	andhi	r2,r6,1024
    91bc:	10001626 	beq	r2,zero,9218 <__truncdfsf2+0xd8>
    91c0:	18c00044 	addi	r3,r3,1
    91c4:	00803fc4 	movi	r2,255
    91c8:	18800326 	beq	r3,r2,91d8 <__truncdfsf2+0x98>
    91cc:	300c91ba 	slli	r6,r6,6
    91d0:	300cd27a 	srli	r6,r6,9
    91d4:	00000206 	br	91e0 <__truncdfsf2+0xa0>
    91d8:	00ffffc4 	movi	r3,-1
    91dc:	000d883a 	mov	r6,zero
    91e0:	18c03fcc 	andi	r3,r3,255
    91e4:	180895fa 	slli	r4,r3,23
    91e8:	00c02034 	movhi	r3,128
    91ec:	280a97fa 	slli	r5,r5,31
    91f0:	18ffffc4 	addi	r3,r3,-1
    91f4:	30c6703a 	and	r3,r6,r3
    91f8:	1906b03a 	or	r3,r3,r4
    91fc:	1944b03a 	or	r2,r3,r5
    9200:	f800283a 	ret
    9204:	40000b1e 	bne	r8,zero,9234 <__truncdfsf2+0xf4>
    9208:	388cb03a 	or	r6,r7,r2
    920c:	0007883a 	mov	r3,zero
    9210:	30000426 	beq	r6,zero,9224 <__truncdfsf2+0xe4>
    9214:	01800144 	movi	r6,5
    9218:	00803fc4 	movi	r2,255
    921c:	300cd0fa 	srli	r6,r6,3
    9220:	18800a26 	beq	r3,r2,924c <__truncdfsf2+0x10c>
    9224:	00802034 	movhi	r2,128
    9228:	10bfffc4 	addi	r2,r2,-1
    922c:	308c703a 	and	r6,r6,r2
    9230:	003feb06 	br	91e0 <__alt_data_end+0xf00091e0>
    9234:	3888b03a 	or	r4,r7,r2
    9238:	203fe726 	beq	r4,zero,91d8 <__alt_data_end+0xf00091d8>
    923c:	380c90fa 	slli	r6,r7,3
    9240:	00c03fc4 	movi	r3,255
    9244:	31808034 	orhi	r6,r6,512
    9248:	003fd506 	br	91a0 <__alt_data_end+0xf00091a0>
    924c:	303fe226 	beq	r6,zero,91d8 <__alt_data_end+0xf00091d8>
    9250:	00802034 	movhi	r2,128
    9254:	31801034 	orhi	r6,r6,64
    9258:	10bfffc4 	addi	r2,r2,-1
    925c:	00ffffc4 	movi	r3,-1
    9260:	308c703a 	and	r6,r6,r2
    9264:	003fde06 	br	91e0 <__alt_data_end+0xf00091e0>
    9268:	013ffa44 	movi	r4,-23
    926c:	19000e16 	blt	r3,r4,92a8 <__truncdfsf2+0x168>
    9270:	01000784 	movi	r4,30
    9274:	20c9c83a 	sub	r4,r4,r3
    9278:	018007c4 	movi	r6,31
    927c:	39c02034 	orhi	r7,r7,128
    9280:	31000b16 	blt	r6,r4,92b0 <__truncdfsf2+0x170>
    9284:	423f2084 	addi	r8,r8,-894
    9288:	120c983a 	sll	r6,r2,r8
    928c:	3a0e983a 	sll	r7,r7,r8
    9290:	1104d83a 	srl	r2,r2,r4
    9294:	300cc03a 	cmpne	r6,r6,zero
    9298:	31ceb03a 	or	r7,r6,r7
    929c:	388cb03a 	or	r6,r7,r2
    92a0:	0007883a 	mov	r3,zero
    92a4:	003fbe06 	br	91a0 <__alt_data_end+0xf00091a0>
    92a8:	0007883a 	mov	r3,zero
    92ac:	003fd906 	br	9214 <__alt_data_end+0xf0009214>
    92b0:	01bfff84 	movi	r6,-2
    92b4:	30cdc83a 	sub	r6,r6,r3
    92b8:	00c00804 	movi	r3,32
    92bc:	398cd83a 	srl	r6,r7,r6
    92c0:	20c00726 	beq	r4,r3,92e0 <__truncdfsf2+0x1a0>
    92c4:	423f2884 	addi	r8,r8,-862
    92c8:	3a0e983a 	sll	r7,r7,r8
    92cc:	3884b03a 	or	r2,r7,r2
    92d0:	1004c03a 	cmpne	r2,r2,zero
    92d4:	118cb03a 	or	r6,r2,r6
    92d8:	0007883a 	mov	r3,zero
    92dc:	003fb006 	br	91a0 <__alt_data_end+0xf00091a0>
    92e0:	000f883a 	mov	r7,zero
    92e4:	003ff906 	br	92cc <__alt_data_end+0xf00092cc>

000092e8 <__clzsi2>:
    92e8:	00bfffd4 	movui	r2,65535
    92ec:	11000536 	bltu	r2,r4,9304 <__clzsi2+0x1c>
    92f0:	00803fc4 	movi	r2,255
    92f4:	11000f36 	bltu	r2,r4,9334 <__clzsi2+0x4c>
    92f8:	00800804 	movi	r2,32
    92fc:	0007883a 	mov	r3,zero
    9300:	00000506 	br	9318 <__clzsi2+0x30>
    9304:	00804034 	movhi	r2,256
    9308:	10bfffc4 	addi	r2,r2,-1
    930c:	11000c2e 	bgeu	r2,r4,9340 <__clzsi2+0x58>
    9310:	00800204 	movi	r2,8
    9314:	00c00604 	movi	r3,24
    9318:	20c8d83a 	srl	r4,r4,r3
    931c:	00c20034 	movhi	r3,2048
    9320:	18c09b44 	addi	r3,r3,621
    9324:	1909883a 	add	r4,r3,r4
    9328:	20c00003 	ldbu	r3,0(r4)
    932c:	10c5c83a 	sub	r2,r2,r3
    9330:	f800283a 	ret
    9334:	00800604 	movi	r2,24
    9338:	00c00204 	movi	r3,8
    933c:	003ff606 	br	9318 <__alt_data_end+0xf0009318>
    9340:	00800404 	movi	r2,16
    9344:	1007883a 	mov	r3,r2
    9348:	003ff306 	br	9318 <__alt_data_end+0xf0009318>

0000934c <__divsi3>:
    934c:	20001b16 	blt	r4,zero,93bc <__divsi3+0x70>
    9350:	000f883a 	mov	r7,zero
    9354:	28001616 	blt	r5,zero,93b0 <__divsi3+0x64>
    9358:	200d883a 	mov	r6,r4
    935c:	29001a2e 	bgeu	r5,r4,93c8 <__divsi3+0x7c>
    9360:	00800804 	movi	r2,32
    9364:	00c00044 	movi	r3,1
    9368:	00000106 	br	9370 <__divsi3+0x24>
    936c:	10000d26 	beq	r2,zero,93a4 <__divsi3+0x58>
    9370:	294b883a 	add	r5,r5,r5
    9374:	10bfffc4 	addi	r2,r2,-1
    9378:	18c7883a 	add	r3,r3,r3
    937c:	293ffb36 	bltu	r5,r4,936c <__alt_data_end+0xf000936c>
    9380:	0005883a 	mov	r2,zero
    9384:	18000726 	beq	r3,zero,93a4 <__divsi3+0x58>
    9388:	0005883a 	mov	r2,zero
    938c:	31400236 	bltu	r6,r5,9398 <__divsi3+0x4c>
    9390:	314dc83a 	sub	r6,r6,r5
    9394:	10c4b03a 	or	r2,r2,r3
    9398:	1806d07a 	srli	r3,r3,1
    939c:	280ad07a 	srli	r5,r5,1
    93a0:	183ffa1e 	bne	r3,zero,938c <__alt_data_end+0xf000938c>
    93a4:	38000126 	beq	r7,zero,93ac <__divsi3+0x60>
    93a8:	0085c83a 	sub	r2,zero,r2
    93ac:	f800283a 	ret
    93b0:	014bc83a 	sub	r5,zero,r5
    93b4:	39c0005c 	xori	r7,r7,1
    93b8:	003fe706 	br	9358 <__alt_data_end+0xf0009358>
    93bc:	0109c83a 	sub	r4,zero,r4
    93c0:	01c00044 	movi	r7,1
    93c4:	003fe306 	br	9354 <__alt_data_end+0xf0009354>
    93c8:	00c00044 	movi	r3,1
    93cc:	003fee06 	br	9388 <__alt_data_end+0xf0009388>

000093d0 <__modsi3>:
    93d0:	20001716 	blt	r4,zero,9430 <__modsi3+0x60>
    93d4:	000f883a 	mov	r7,zero
    93d8:	2005883a 	mov	r2,r4
    93dc:	28001216 	blt	r5,zero,9428 <__modsi3+0x58>
    93e0:	2900162e 	bgeu	r5,r4,943c <__modsi3+0x6c>
    93e4:	01800804 	movi	r6,32
    93e8:	00c00044 	movi	r3,1
    93ec:	00000106 	br	93f4 <__modsi3+0x24>
    93f0:	30000a26 	beq	r6,zero,941c <__modsi3+0x4c>
    93f4:	294b883a 	add	r5,r5,r5
    93f8:	31bfffc4 	addi	r6,r6,-1
    93fc:	18c7883a 	add	r3,r3,r3
    9400:	293ffb36 	bltu	r5,r4,93f0 <__alt_data_end+0xf00093f0>
    9404:	18000526 	beq	r3,zero,941c <__modsi3+0x4c>
    9408:	1806d07a 	srli	r3,r3,1
    940c:	11400136 	bltu	r2,r5,9414 <__modsi3+0x44>
    9410:	1145c83a 	sub	r2,r2,r5
    9414:	280ad07a 	srli	r5,r5,1
    9418:	183ffb1e 	bne	r3,zero,9408 <__alt_data_end+0xf0009408>
    941c:	38000126 	beq	r7,zero,9424 <__modsi3+0x54>
    9420:	0085c83a 	sub	r2,zero,r2
    9424:	f800283a 	ret
    9428:	014bc83a 	sub	r5,zero,r5
    942c:	003fec06 	br	93e0 <__alt_data_end+0xf00093e0>
    9430:	0109c83a 	sub	r4,zero,r4
    9434:	01c00044 	movi	r7,1
    9438:	003fe706 	br	93d8 <__alt_data_end+0xf00093d8>
    943c:	00c00044 	movi	r3,1
    9440:	003ff106 	br	9408 <__alt_data_end+0xf0009408>

00009444 <__udivsi3>:
    9444:	200d883a 	mov	r6,r4
    9448:	2900152e 	bgeu	r5,r4,94a0 <__udivsi3+0x5c>
    944c:	28001416 	blt	r5,zero,94a0 <__udivsi3+0x5c>
    9450:	00800804 	movi	r2,32
    9454:	00c00044 	movi	r3,1
    9458:	00000206 	br	9464 <__udivsi3+0x20>
    945c:	10000e26 	beq	r2,zero,9498 <__udivsi3+0x54>
    9460:	28000516 	blt	r5,zero,9478 <__udivsi3+0x34>
    9464:	294b883a 	add	r5,r5,r5
    9468:	10bfffc4 	addi	r2,r2,-1
    946c:	18c7883a 	add	r3,r3,r3
    9470:	293ffa36 	bltu	r5,r4,945c <__alt_data_end+0xf000945c>
    9474:	18000826 	beq	r3,zero,9498 <__udivsi3+0x54>
    9478:	0005883a 	mov	r2,zero
    947c:	31400236 	bltu	r6,r5,9488 <__udivsi3+0x44>
    9480:	314dc83a 	sub	r6,r6,r5
    9484:	10c4b03a 	or	r2,r2,r3
    9488:	1806d07a 	srli	r3,r3,1
    948c:	280ad07a 	srli	r5,r5,1
    9490:	183ffa1e 	bne	r3,zero,947c <__alt_data_end+0xf000947c>
    9494:	f800283a 	ret
    9498:	0005883a 	mov	r2,zero
    949c:	f800283a 	ret
    94a0:	00c00044 	movi	r3,1
    94a4:	003ff406 	br	9478 <__alt_data_end+0xf0009478>

000094a8 <__umodsi3>:
    94a8:	2005883a 	mov	r2,r4
    94ac:	2900122e 	bgeu	r5,r4,94f8 <__umodsi3+0x50>
    94b0:	28001116 	blt	r5,zero,94f8 <__umodsi3+0x50>
    94b4:	01800804 	movi	r6,32
    94b8:	00c00044 	movi	r3,1
    94bc:	00000206 	br	94c8 <__umodsi3+0x20>
    94c0:	30000c26 	beq	r6,zero,94f4 <__umodsi3+0x4c>
    94c4:	28000516 	blt	r5,zero,94dc <__umodsi3+0x34>
    94c8:	294b883a 	add	r5,r5,r5
    94cc:	31bfffc4 	addi	r6,r6,-1
    94d0:	18c7883a 	add	r3,r3,r3
    94d4:	293ffa36 	bltu	r5,r4,94c0 <__alt_data_end+0xf00094c0>
    94d8:	18000626 	beq	r3,zero,94f4 <__umodsi3+0x4c>
    94dc:	1806d07a 	srli	r3,r3,1
    94e0:	11400136 	bltu	r2,r5,94e8 <__umodsi3+0x40>
    94e4:	1145c83a 	sub	r2,r2,r5
    94e8:	280ad07a 	srli	r5,r5,1
    94ec:	183ffb1e 	bne	r3,zero,94dc <__alt_data_end+0xf00094dc>
    94f0:	f800283a 	ret
    94f4:	f800283a 	ret
    94f8:	00c00044 	movi	r3,1
    94fc:	003ff706 	br	94dc <__alt_data_end+0xf00094dc>

00009500 <memcmp>:
    9500:	01c000c4 	movi	r7,3
    9504:	3980192e 	bgeu	r7,r6,956c <memcmp+0x6c>
    9508:	2144b03a 	or	r2,r4,r5
    950c:	11c4703a 	and	r2,r2,r7
    9510:	10000f26 	beq	r2,zero,9550 <memcmp+0x50>
    9514:	20800003 	ldbu	r2,0(r4)
    9518:	28c00003 	ldbu	r3,0(r5)
    951c:	10c0151e 	bne	r2,r3,9574 <memcmp+0x74>
    9520:	31bfff84 	addi	r6,r6,-2
    9524:	01ffffc4 	movi	r7,-1
    9528:	00000406 	br	953c <memcmp+0x3c>
    952c:	20800003 	ldbu	r2,0(r4)
    9530:	28c00003 	ldbu	r3,0(r5)
    9534:	31bfffc4 	addi	r6,r6,-1
    9538:	10c00e1e 	bne	r2,r3,9574 <memcmp+0x74>
    953c:	21000044 	addi	r4,r4,1
    9540:	29400044 	addi	r5,r5,1
    9544:	31fff91e 	bne	r6,r7,952c <__alt_data_end+0xf000952c>
    9548:	0005883a 	mov	r2,zero
    954c:	f800283a 	ret
    9550:	20c00017 	ldw	r3,0(r4)
    9554:	28800017 	ldw	r2,0(r5)
    9558:	18bfee1e 	bne	r3,r2,9514 <__alt_data_end+0xf0009514>
    955c:	31bfff04 	addi	r6,r6,-4
    9560:	21000104 	addi	r4,r4,4
    9564:	29400104 	addi	r5,r5,4
    9568:	39bff936 	bltu	r7,r6,9550 <__alt_data_end+0xf0009550>
    956c:	303fe91e 	bne	r6,zero,9514 <__alt_data_end+0xf0009514>
    9570:	003ff506 	br	9548 <__alt_data_end+0xf0009548>
    9574:	10c5c83a 	sub	r2,r2,r3
    9578:	f800283a 	ret

0000957c <memcpy>:
    957c:	defffd04 	addi	sp,sp,-12
    9580:	dfc00215 	stw	ra,8(sp)
    9584:	dc400115 	stw	r17,4(sp)
    9588:	dc000015 	stw	r16,0(sp)
    958c:	00c003c4 	movi	r3,15
    9590:	2005883a 	mov	r2,r4
    9594:	1980452e 	bgeu	r3,r6,96ac <memcpy+0x130>
    9598:	2906b03a 	or	r3,r5,r4
    959c:	18c000cc 	andi	r3,r3,3
    95a0:	1800441e 	bne	r3,zero,96b4 <memcpy+0x138>
    95a4:	347ffc04 	addi	r17,r6,-16
    95a8:	8822d13a 	srli	r17,r17,4
    95ac:	28c00104 	addi	r3,r5,4
    95b0:	23400104 	addi	r13,r4,4
    95b4:	8820913a 	slli	r16,r17,4
    95b8:	2b000204 	addi	r12,r5,8
    95bc:	22c00204 	addi	r11,r4,8
    95c0:	84000504 	addi	r16,r16,20
    95c4:	2a800304 	addi	r10,r5,12
    95c8:	22400304 	addi	r9,r4,12
    95cc:	2c21883a 	add	r16,r5,r16
    95d0:	2811883a 	mov	r8,r5
    95d4:	200f883a 	mov	r7,r4
    95d8:	41000017 	ldw	r4,0(r8)
    95dc:	1fc00017 	ldw	ra,0(r3)
    95e0:	63c00017 	ldw	r15,0(r12)
    95e4:	39000015 	stw	r4,0(r7)
    95e8:	53800017 	ldw	r14,0(r10)
    95ec:	6fc00015 	stw	ra,0(r13)
    95f0:	5bc00015 	stw	r15,0(r11)
    95f4:	4b800015 	stw	r14,0(r9)
    95f8:	18c00404 	addi	r3,r3,16
    95fc:	39c00404 	addi	r7,r7,16
    9600:	42000404 	addi	r8,r8,16
    9604:	6b400404 	addi	r13,r13,16
    9608:	63000404 	addi	r12,r12,16
    960c:	5ac00404 	addi	r11,r11,16
    9610:	52800404 	addi	r10,r10,16
    9614:	4a400404 	addi	r9,r9,16
    9618:	1c3fef1e 	bne	r3,r16,95d8 <__alt_data_end+0xf00095d8>
    961c:	89c00044 	addi	r7,r17,1
    9620:	380e913a 	slli	r7,r7,4
    9624:	310003cc 	andi	r4,r6,15
    9628:	02c000c4 	movi	r11,3
    962c:	11c7883a 	add	r3,r2,r7
    9630:	29cb883a 	add	r5,r5,r7
    9634:	5900212e 	bgeu	r11,r4,96bc <memcpy+0x140>
    9638:	1813883a 	mov	r9,r3
    963c:	2811883a 	mov	r8,r5
    9640:	200f883a 	mov	r7,r4
    9644:	42800017 	ldw	r10,0(r8)
    9648:	4a400104 	addi	r9,r9,4
    964c:	39ffff04 	addi	r7,r7,-4
    9650:	4abfff15 	stw	r10,-4(r9)
    9654:	42000104 	addi	r8,r8,4
    9658:	59fffa36 	bltu	r11,r7,9644 <__alt_data_end+0xf0009644>
    965c:	213fff04 	addi	r4,r4,-4
    9660:	2008d0ba 	srli	r4,r4,2
    9664:	318000cc 	andi	r6,r6,3
    9668:	21000044 	addi	r4,r4,1
    966c:	2109883a 	add	r4,r4,r4
    9670:	2109883a 	add	r4,r4,r4
    9674:	1907883a 	add	r3,r3,r4
    9678:	290b883a 	add	r5,r5,r4
    967c:	30000626 	beq	r6,zero,9698 <memcpy+0x11c>
    9680:	198d883a 	add	r6,r3,r6
    9684:	29c00003 	ldbu	r7,0(r5)
    9688:	18c00044 	addi	r3,r3,1
    968c:	29400044 	addi	r5,r5,1
    9690:	19ffffc5 	stb	r7,-1(r3)
    9694:	19bffb1e 	bne	r3,r6,9684 <__alt_data_end+0xf0009684>
    9698:	dfc00217 	ldw	ra,8(sp)
    969c:	dc400117 	ldw	r17,4(sp)
    96a0:	dc000017 	ldw	r16,0(sp)
    96a4:	dec00304 	addi	sp,sp,12
    96a8:	f800283a 	ret
    96ac:	2007883a 	mov	r3,r4
    96b0:	003ff206 	br	967c <__alt_data_end+0xf000967c>
    96b4:	2007883a 	mov	r3,r4
    96b8:	003ff106 	br	9680 <__alt_data_end+0xf0009680>
    96bc:	200d883a 	mov	r6,r4
    96c0:	003fee06 	br	967c <__alt_data_end+0xf000967c>

000096c4 <memset>:
    96c4:	20c000cc 	andi	r3,r4,3
    96c8:	2005883a 	mov	r2,r4
    96cc:	18004426 	beq	r3,zero,97e0 <memset+0x11c>
    96d0:	31ffffc4 	addi	r7,r6,-1
    96d4:	30004026 	beq	r6,zero,97d8 <memset+0x114>
    96d8:	2813883a 	mov	r9,r5
    96dc:	200d883a 	mov	r6,r4
    96e0:	2007883a 	mov	r3,r4
    96e4:	00000406 	br	96f8 <memset+0x34>
    96e8:	3a3fffc4 	addi	r8,r7,-1
    96ec:	31800044 	addi	r6,r6,1
    96f0:	38003926 	beq	r7,zero,97d8 <memset+0x114>
    96f4:	400f883a 	mov	r7,r8
    96f8:	18c00044 	addi	r3,r3,1
    96fc:	32400005 	stb	r9,0(r6)
    9700:	1a0000cc 	andi	r8,r3,3
    9704:	403ff81e 	bne	r8,zero,96e8 <__alt_data_end+0xf00096e8>
    9708:	010000c4 	movi	r4,3
    970c:	21c02d2e 	bgeu	r4,r7,97c4 <memset+0x100>
    9710:	29003fcc 	andi	r4,r5,255
    9714:	200c923a 	slli	r6,r4,8
    9718:	3108b03a 	or	r4,r6,r4
    971c:	200c943a 	slli	r6,r4,16
    9720:	218cb03a 	or	r6,r4,r6
    9724:	010003c4 	movi	r4,15
    9728:	21c0182e 	bgeu	r4,r7,978c <memset+0xc8>
    972c:	3b3ffc04 	addi	r12,r7,-16
    9730:	6018d13a 	srli	r12,r12,4
    9734:	1a000104 	addi	r8,r3,4
    9738:	1ac00204 	addi	r11,r3,8
    973c:	6008913a 	slli	r4,r12,4
    9740:	1a800304 	addi	r10,r3,12
    9744:	1813883a 	mov	r9,r3
    9748:	21000504 	addi	r4,r4,20
    974c:	1909883a 	add	r4,r3,r4
    9750:	49800015 	stw	r6,0(r9)
    9754:	41800015 	stw	r6,0(r8)
    9758:	59800015 	stw	r6,0(r11)
    975c:	51800015 	stw	r6,0(r10)
    9760:	42000404 	addi	r8,r8,16
    9764:	4a400404 	addi	r9,r9,16
    9768:	5ac00404 	addi	r11,r11,16
    976c:	52800404 	addi	r10,r10,16
    9770:	413ff71e 	bne	r8,r4,9750 <__alt_data_end+0xf0009750>
    9774:	63000044 	addi	r12,r12,1
    9778:	6018913a 	slli	r12,r12,4
    977c:	39c003cc 	andi	r7,r7,15
    9780:	010000c4 	movi	r4,3
    9784:	1b07883a 	add	r3,r3,r12
    9788:	21c00e2e 	bgeu	r4,r7,97c4 <memset+0x100>
    978c:	1813883a 	mov	r9,r3
    9790:	3811883a 	mov	r8,r7
    9794:	010000c4 	movi	r4,3
    9798:	49800015 	stw	r6,0(r9)
    979c:	423fff04 	addi	r8,r8,-4
    97a0:	4a400104 	addi	r9,r9,4
    97a4:	223ffc36 	bltu	r4,r8,9798 <__alt_data_end+0xf0009798>
    97a8:	393fff04 	addi	r4,r7,-4
    97ac:	2008d0ba 	srli	r4,r4,2
    97b0:	39c000cc 	andi	r7,r7,3
    97b4:	21000044 	addi	r4,r4,1
    97b8:	2109883a 	add	r4,r4,r4
    97bc:	2109883a 	add	r4,r4,r4
    97c0:	1907883a 	add	r3,r3,r4
    97c4:	38000526 	beq	r7,zero,97dc <memset+0x118>
    97c8:	19cf883a 	add	r7,r3,r7
    97cc:	19400005 	stb	r5,0(r3)
    97d0:	18c00044 	addi	r3,r3,1
    97d4:	38fffd1e 	bne	r7,r3,97cc <__alt_data_end+0xf00097cc>
    97d8:	f800283a 	ret
    97dc:	f800283a 	ret
    97e0:	2007883a 	mov	r3,r4
    97e4:	300f883a 	mov	r7,r6
    97e8:	003fc706 	br	9708 <__alt_data_end+0xf0009708>

000097ec <_printf_r>:
    97ec:	defffd04 	addi	sp,sp,-12
    97f0:	2805883a 	mov	r2,r5
    97f4:	dfc00015 	stw	ra,0(sp)
    97f8:	d9800115 	stw	r6,4(sp)
    97fc:	d9c00215 	stw	r7,8(sp)
    9800:	21400217 	ldw	r5,8(r4)
    9804:	d9c00104 	addi	r7,sp,4
    9808:	100d883a 	mov	r6,r2
    980c:	000bc600 	call	bc60 <___vfprintf_internal_r>
    9810:	dfc00017 	ldw	ra,0(sp)
    9814:	dec00304 	addi	sp,sp,12
    9818:	f800283a 	ret

0000981c <printf>:
    981c:	defffc04 	addi	sp,sp,-16
    9820:	dfc00015 	stw	ra,0(sp)
    9824:	d9400115 	stw	r5,4(sp)
    9828:	d9800215 	stw	r6,8(sp)
    982c:	d9c00315 	stw	r7,12(sp)
    9830:	00820034 	movhi	r2,2048
    9834:	108b1004 	addi	r2,r2,11328
    9838:	10800017 	ldw	r2,0(r2)
    983c:	200b883a 	mov	r5,r4
    9840:	d9800104 	addi	r6,sp,4
    9844:	11000217 	ldw	r4,8(r2)
    9848:	000de580 	call	de58 <__vfprintf_internal>
    984c:	dfc00017 	ldw	ra,0(sp)
    9850:	dec00404 	addi	sp,sp,16
    9854:	f800283a 	ret

00009858 <_puts_r>:
    9858:	defff604 	addi	sp,sp,-40
    985c:	dc000715 	stw	r16,28(sp)
    9860:	2021883a 	mov	r16,r4
    9864:	2809883a 	mov	r4,r5
    9868:	dc400815 	stw	r17,32(sp)
    986c:	dfc00915 	stw	ra,36(sp)
    9870:	2823883a 	mov	r17,r5
    9874:	00099f00 	call	99f0 <strlen>
    9878:	10c00044 	addi	r3,r2,1
    987c:	d8800115 	stw	r2,4(sp)
    9880:	00820034 	movhi	r2,2048
    9884:	1080dc04 	addi	r2,r2,880
    9888:	d8800215 	stw	r2,8(sp)
    988c:	00800044 	movi	r2,1
    9890:	d8800315 	stw	r2,12(sp)
    9894:	00800084 	movi	r2,2
    9898:	dc400015 	stw	r17,0(sp)
    989c:	d8c00615 	stw	r3,24(sp)
    98a0:	dec00415 	stw	sp,16(sp)
    98a4:	d8800515 	stw	r2,20(sp)
    98a8:	80000226 	beq	r16,zero,98b4 <_puts_r+0x5c>
    98ac:	80800e17 	ldw	r2,56(r16)
    98b0:	10001426 	beq	r2,zero,9904 <_puts_r+0xac>
    98b4:	81400217 	ldw	r5,8(r16)
    98b8:	2880030b 	ldhu	r2,12(r5)
    98bc:	10c8000c 	andi	r3,r2,8192
    98c0:	1800061e 	bne	r3,zero,98dc <_puts_r+0x84>
    98c4:	29001917 	ldw	r4,100(r5)
    98c8:	00f7ffc4 	movi	r3,-8193
    98cc:	10880014 	ori	r2,r2,8192
    98d0:	20c6703a 	and	r3,r4,r3
    98d4:	2880030d 	sth	r2,12(r5)
    98d8:	28c01915 	stw	r3,100(r5)
    98dc:	d9800404 	addi	r6,sp,16
    98e0:	8009883a 	mov	r4,r16
    98e4:	00103880 	call	10388 <__sfvwrite_r>
    98e8:	1000091e 	bne	r2,zero,9910 <_puts_r+0xb8>
    98ec:	00800284 	movi	r2,10
    98f0:	dfc00917 	ldw	ra,36(sp)
    98f4:	dc400817 	ldw	r17,32(sp)
    98f8:	dc000717 	ldw	r16,28(sp)
    98fc:	dec00a04 	addi	sp,sp,40
    9900:	f800283a 	ret
    9904:	8009883a 	mov	r4,r16
    9908:	000ff040 	call	ff04 <__sinit>
    990c:	003fe906 	br	98b4 <__alt_data_end+0xf00098b4>
    9910:	00bfffc4 	movi	r2,-1
    9914:	003ff606 	br	98f0 <__alt_data_end+0xf00098f0>

00009918 <puts>:
    9918:	00820034 	movhi	r2,2048
    991c:	108b1004 	addi	r2,r2,11328
    9920:	200b883a 	mov	r5,r4
    9924:	11000017 	ldw	r4,0(r2)
    9928:	00098581 	jmpi	9858 <_puts_r>

0000992c <_sprintf_r>:
    992c:	deffe404 	addi	sp,sp,-112
    9930:	2807883a 	mov	r3,r5
    9934:	dfc01a15 	stw	ra,104(sp)
    9938:	d9c01b15 	stw	r7,108(sp)
    993c:	00a00034 	movhi	r2,32768
    9940:	10bfffc4 	addi	r2,r2,-1
    9944:	02008204 	movi	r8,520
    9948:	d8800215 	stw	r2,8(sp)
    994c:	d8800515 	stw	r2,20(sp)
    9950:	d9c01b04 	addi	r7,sp,108
    9954:	d80b883a 	mov	r5,sp
    9958:	00bfffc4 	movi	r2,-1
    995c:	d8c00015 	stw	r3,0(sp)
    9960:	d8c00415 	stw	r3,16(sp)
    9964:	da00030d 	sth	r8,12(sp)
    9968:	d880038d 	sth	r2,14(sp)
    996c:	0009a880 	call	9a88 <___svfprintf_internal_r>
    9970:	d8c00017 	ldw	r3,0(sp)
    9974:	18000005 	stb	zero,0(r3)
    9978:	dfc01a17 	ldw	ra,104(sp)
    997c:	dec01c04 	addi	sp,sp,112
    9980:	f800283a 	ret

00009984 <sprintf>:
    9984:	deffe304 	addi	sp,sp,-116
    9988:	2007883a 	mov	r3,r4
    998c:	dfc01a15 	stw	ra,104(sp)
    9990:	d9801b15 	stw	r6,108(sp)
    9994:	d9c01c15 	stw	r7,112(sp)
    9998:	01020034 	movhi	r4,2048
    999c:	210b1004 	addi	r4,r4,11328
    99a0:	21000017 	ldw	r4,0(r4)
    99a4:	00a00034 	movhi	r2,32768
    99a8:	10bfffc4 	addi	r2,r2,-1
    99ac:	280d883a 	mov	r6,r5
    99b0:	02008204 	movi	r8,520
    99b4:	d8800215 	stw	r2,8(sp)
    99b8:	d8800515 	stw	r2,20(sp)
    99bc:	d9c01b04 	addi	r7,sp,108
    99c0:	d80b883a 	mov	r5,sp
    99c4:	00bfffc4 	movi	r2,-1
    99c8:	d8c00015 	stw	r3,0(sp)
    99cc:	d8c00415 	stw	r3,16(sp)
    99d0:	da00030d 	sth	r8,12(sp)
    99d4:	d880038d 	sth	r2,14(sp)
    99d8:	0009a880 	call	9a88 <___svfprintf_internal_r>
    99dc:	d8c00017 	ldw	r3,0(sp)
    99e0:	18000005 	stb	zero,0(r3)
    99e4:	dfc01a17 	ldw	ra,104(sp)
    99e8:	dec01d04 	addi	sp,sp,116
    99ec:	f800283a 	ret

000099f0 <strlen>:
    99f0:	208000cc 	andi	r2,r4,3
    99f4:	10002026 	beq	r2,zero,9a78 <strlen+0x88>
    99f8:	20800007 	ldb	r2,0(r4)
    99fc:	10002026 	beq	r2,zero,9a80 <strlen+0x90>
    9a00:	2005883a 	mov	r2,r4
    9a04:	00000206 	br	9a10 <strlen+0x20>
    9a08:	10c00007 	ldb	r3,0(r2)
    9a0c:	18001826 	beq	r3,zero,9a70 <strlen+0x80>
    9a10:	10800044 	addi	r2,r2,1
    9a14:	10c000cc 	andi	r3,r2,3
    9a18:	183ffb1e 	bne	r3,zero,9a08 <__alt_data_end+0xf0009a08>
    9a1c:	10c00017 	ldw	r3,0(r2)
    9a20:	01ffbff4 	movhi	r7,65279
    9a24:	39ffbfc4 	addi	r7,r7,-257
    9a28:	00ca303a 	nor	r5,zero,r3
    9a2c:	01a02074 	movhi	r6,32897
    9a30:	19c7883a 	add	r3,r3,r7
    9a34:	31a02004 	addi	r6,r6,-32640
    9a38:	1946703a 	and	r3,r3,r5
    9a3c:	1986703a 	and	r3,r3,r6
    9a40:	1800091e 	bne	r3,zero,9a68 <strlen+0x78>
    9a44:	10800104 	addi	r2,r2,4
    9a48:	10c00017 	ldw	r3,0(r2)
    9a4c:	19cb883a 	add	r5,r3,r7
    9a50:	00c6303a 	nor	r3,zero,r3
    9a54:	28c6703a 	and	r3,r5,r3
    9a58:	1986703a 	and	r3,r3,r6
    9a5c:	183ff926 	beq	r3,zero,9a44 <__alt_data_end+0xf0009a44>
    9a60:	00000106 	br	9a68 <strlen+0x78>
    9a64:	10800044 	addi	r2,r2,1
    9a68:	10c00007 	ldb	r3,0(r2)
    9a6c:	183ffd1e 	bne	r3,zero,9a64 <__alt_data_end+0xf0009a64>
    9a70:	1105c83a 	sub	r2,r2,r4
    9a74:	f800283a 	ret
    9a78:	2005883a 	mov	r2,r4
    9a7c:	003fe706 	br	9a1c <__alt_data_end+0xf0009a1c>
    9a80:	0005883a 	mov	r2,zero
    9a84:	f800283a 	ret

00009a88 <___svfprintf_internal_r>:
    9a88:	deffb704 	addi	sp,sp,-292
    9a8c:	dfc04815 	stw	ra,288(sp)
    9a90:	ddc04615 	stw	r23,280(sp)
    9a94:	d9402c15 	stw	r5,176(sp)
    9a98:	d9003915 	stw	r4,228(sp)
    9a9c:	302f883a 	mov	r23,r6
    9aa0:	d9c02d15 	stw	r7,180(sp)
    9aa4:	df004715 	stw	fp,284(sp)
    9aa8:	dd804515 	stw	r22,276(sp)
    9aac:	dd404415 	stw	r21,272(sp)
    9ab0:	dd004315 	stw	r20,268(sp)
    9ab4:	dcc04215 	stw	r19,264(sp)
    9ab8:	dc804115 	stw	r18,260(sp)
    9abc:	dc404015 	stw	r17,256(sp)
    9ac0:	dc003f15 	stw	r16,252(sp)
    9ac4:	0010a780 	call	10a78 <_localeconv_r>
    9ac8:	10800017 	ldw	r2,0(r2)
    9acc:	1009883a 	mov	r4,r2
    9ad0:	d8803415 	stw	r2,208(sp)
    9ad4:	00099f00 	call	99f0 <strlen>
    9ad8:	d8c02c17 	ldw	r3,176(sp)
    9adc:	d8803815 	stw	r2,224(sp)
    9ae0:	1880030b 	ldhu	r2,12(r3)
    9ae4:	1080200c 	andi	r2,r2,128
    9ae8:	10000226 	beq	r2,zero,9af4 <___svfprintf_internal_r+0x6c>
    9aec:	18800417 	ldw	r2,16(r3)
    9af0:	10067f26 	beq	r2,zero,b4f0 <___svfprintf_internal_r+0x1a68>
    9af4:	dcc03917 	ldw	r19,228(sp)
    9af8:	d8c00404 	addi	r3,sp,16
    9afc:	05420034 	movhi	r21,2048
    9b00:	d9001e04 	addi	r4,sp,120
    9b04:	ad40ed84 	addi	r21,r21,950
    9b08:	d8c01e15 	stw	r3,120(sp)
    9b0c:	d8002015 	stw	zero,128(sp)
    9b10:	d8001f15 	stw	zero,124(sp)
    9b14:	d8003315 	stw	zero,204(sp)
    9b18:	d8003615 	stw	zero,216(sp)
    9b1c:	d8003715 	stw	zero,220(sp)
    9b20:	1811883a 	mov	r8,r3
    9b24:	d8003a15 	stw	zero,232(sp)
    9b28:	d8003b15 	stw	zero,236(sp)
    9b2c:	d8002f15 	stw	zero,188(sp)
    9b30:	d9002815 	stw	r4,160(sp)
    9b34:	b8800007 	ldb	r2,0(r23)
    9b38:	10026726 	beq	r2,zero,a4d8 <___svfprintf_internal_r+0xa50>
    9b3c:	00c00944 	movi	r3,37
    9b40:	b821883a 	mov	r16,r23
    9b44:	10c0021e 	bne	r2,r3,9b50 <___svfprintf_internal_r+0xc8>
    9b48:	00001406 	br	9b9c <___svfprintf_internal_r+0x114>
    9b4c:	10c00326 	beq	r2,r3,9b5c <___svfprintf_internal_r+0xd4>
    9b50:	84000044 	addi	r16,r16,1
    9b54:	80800007 	ldb	r2,0(r16)
    9b58:	103ffc1e 	bne	r2,zero,9b4c <__alt_data_end+0xf0009b4c>
    9b5c:	85e3c83a 	sub	r17,r16,r23
    9b60:	88000e26 	beq	r17,zero,9b9c <___svfprintf_internal_r+0x114>
    9b64:	d8c02017 	ldw	r3,128(sp)
    9b68:	d8801f17 	ldw	r2,124(sp)
    9b6c:	45c00015 	stw	r23,0(r8)
    9b70:	1c47883a 	add	r3,r3,r17
    9b74:	10800044 	addi	r2,r2,1
    9b78:	d8c02015 	stw	r3,128(sp)
    9b7c:	44400115 	stw	r17,4(r8)
    9b80:	d8801f15 	stw	r2,124(sp)
    9b84:	00c001c4 	movi	r3,7
    9b88:	18809716 	blt	r3,r2,9de8 <___svfprintf_internal_r+0x360>
    9b8c:	42000204 	addi	r8,r8,8
    9b90:	d9402f17 	ldw	r5,188(sp)
    9b94:	2c4b883a 	add	r5,r5,r17
    9b98:	d9402f15 	stw	r5,188(sp)
    9b9c:	80800007 	ldb	r2,0(r16)
    9ba0:	10009826 	beq	r2,zero,9e04 <___svfprintf_internal_r+0x37c>
    9ba4:	84400047 	ldb	r17,1(r16)
    9ba8:	00bfffc4 	movi	r2,-1
    9bac:	85c00044 	addi	r23,r16,1
    9bb0:	d8002785 	stb	zero,158(sp)
    9bb4:	0007883a 	mov	r3,zero
    9bb8:	000f883a 	mov	r7,zero
    9bbc:	d8802915 	stw	r2,164(sp)
    9bc0:	d8003115 	stw	zero,196(sp)
    9bc4:	0025883a 	mov	r18,zero
    9bc8:	01401604 	movi	r5,88
    9bcc:	01800244 	movi	r6,9
    9bd0:	02800a84 	movi	r10,42
    9bd4:	02401b04 	movi	r9,108
    9bd8:	bdc00044 	addi	r23,r23,1
    9bdc:	88bff804 	addi	r2,r17,-32
    9be0:	2882f036 	bltu	r5,r2,a7a4 <___svfprintf_internal_r+0xd1c>
    9be4:	100490ba 	slli	r2,r2,2
    9be8:	01000074 	movhi	r4,1
    9bec:	2126ff04 	addi	r4,r4,-25604
    9bf0:	1105883a 	add	r2,r2,r4
    9bf4:	10800017 	ldw	r2,0(r2)
    9bf8:	1000683a 	jmp	r2
    9bfc:	0000a70c 	andi	zero,zero,668
    9c00:	0000a7a4 	muli	zero,zero,670
    9c04:	0000a7a4 	muli	zero,zero,670
    9c08:	0000a700 	call	a70 <xEventGroupSync+0x138>
    9c0c:	0000a7a4 	muli	zero,zero,670
    9c10:	0000a7a4 	muli	zero,zero,670
    9c14:	0000a7a4 	muli	zero,zero,670
    9c18:	0000a7a4 	muli	zero,zero,670
    9c1c:	0000a7a4 	muli	zero,zero,670
    9c20:	0000a7a4 	muli	zero,zero,670
    9c24:	00009e60 	cmpeqi	zero,zero,633
    9c28:	0000a63c 	xorhi	zero,zero,664
    9c2c:	0000a7a4 	muli	zero,zero,670
    9c30:	00009d70 	cmpltui	zero,zero,629
    9c34:	00009e88 	cmpgei	zero,zero,634
    9c38:	0000a7a4 	muli	zero,zero,670
    9c3c:	00009efc 	xorhi	zero,zero,635
    9c40:	00009ec8 	cmpgei	zero,zero,635
    9c44:	00009ec8 	cmpgei	zero,zero,635
    9c48:	00009ec8 	cmpgei	zero,zero,635
    9c4c:	00009ec8 	cmpgei	zero,zero,635
    9c50:	00009ec8 	cmpgei	zero,zero,635
    9c54:	00009ec8 	cmpgei	zero,zero,635
    9c58:	00009ec8 	cmpgei	zero,zero,635
    9c5c:	00009ec8 	cmpgei	zero,zero,635
    9c60:	00009ec8 	cmpgei	zero,zero,635
    9c64:	0000a7a4 	muli	zero,zero,670
    9c68:	0000a7a4 	muli	zero,zero,670
    9c6c:	0000a7a4 	muli	zero,zero,670
    9c70:	0000a7a4 	muli	zero,zero,670
    9c74:	0000a7a4 	muli	zero,zero,670
    9c78:	0000a7a4 	muli	zero,zero,670
    9c7c:	0000a7a4 	muli	zero,zero,670
    9c80:	0000a7a4 	muli	zero,zero,670
    9c84:	0000a7a4 	muli	zero,zero,670
    9c88:	0000a7a4 	muli	zero,zero,670
    9c8c:	00009fb4 	movhi	zero,638
    9c90:	00009f08 	cmpgei	zero,zero,636
    9c94:	0000a7a4 	muli	zero,zero,670
    9c98:	00009f08 	cmpgei	zero,zero,636
    9c9c:	0000a7a4 	muli	zero,zero,670
    9ca0:	0000a7a4 	muli	zero,zero,670
    9ca4:	0000a7a4 	muli	zero,zero,670
    9ca8:	0000a7a4 	muli	zero,zero,670
    9cac:	00009fa8 	cmpgeui	zero,zero,638
    9cb0:	0000a7a4 	muli	zero,zero,670
    9cb4:	0000a7a4 	muli	zero,zero,670
    9cb8:	0000a070 	cmpltui	zero,zero,641
    9cbc:	0000a7a4 	muli	zero,zero,670
    9cc0:	0000a7a4 	muli	zero,zero,670
    9cc4:	0000a7a4 	muli	zero,zero,670
    9cc8:	0000a7a4 	muli	zero,zero,670
    9ccc:	0000a7a4 	muli	zero,zero,670
    9cd0:	0000a4e0 	cmpeqi	zero,zero,659
    9cd4:	0000a7a4 	muli	zero,zero,670
    9cd8:	0000a7a4 	muli	zero,zero,670
    9cdc:	0000a540 	call	a54 <xEventGroupSync+0x11c>
    9ce0:	0000a7a4 	muli	zero,zero,670
    9ce4:	0000a7a4 	muli	zero,zero,670
    9ce8:	0000a7a4 	muli	zero,zero,670
    9cec:	0000a7a4 	muli	zero,zero,670
    9cf0:	0000a7a4 	muli	zero,zero,670
    9cf4:	0000a7a4 	muli	zero,zero,670
    9cf8:	0000a7a4 	muli	zero,zero,670
    9cfc:	0000a7a4 	muli	zero,zero,670
    9d00:	0000a7a4 	muli	zero,zero,670
    9d04:	0000a7a4 	muli	zero,zero,670
    9d08:	0000a5f0 	cmpltui	zero,zero,663
    9d0c:	0000a72c 	andhi	zero,zero,668
    9d10:	00009f08 	cmpgei	zero,zero,636
    9d14:	00009f08 	cmpgei	zero,zero,636
    9d18:	00009f08 	cmpgei	zero,zero,636
    9d1c:	0000a780 	call	a78 <xEventGroupSync+0x140>
    9d20:	0000a72c 	andhi	zero,zero,668
    9d24:	0000a7a4 	muli	zero,zero,670
    9d28:	0000a7a4 	muli	zero,zero,670
    9d2c:	0000a73c 	xorhi	zero,zero,668
    9d30:	0000a7a4 	muli	zero,zero,670
    9d34:	0000a74c 	andi	zero,zero,669
    9d38:	0000a62c 	andhi	zero,zero,664
    9d3c:	00009d7c 	xorhi	zero,zero,629
    9d40:	0000a64c 	andi	zero,zero,665
    9d44:	0000a7a4 	muli	zero,zero,670
    9d48:	0000a658 	cmpnei	zero,zero,665
    9d4c:	0000a7a4 	muli	zero,zero,670
    9d50:	0000a6b4 	movhi	zero,666
    9d54:	0000a7a4 	muli	zero,zero,670
    9d58:	0000a7a4 	muli	zero,zero,670
    9d5c:	0000a6c4 	movi	zero,667
    9d60:	d9003117 	ldw	r4,196(sp)
    9d64:	d8802d15 	stw	r2,180(sp)
    9d68:	0109c83a 	sub	r4,zero,r4
    9d6c:	d9003115 	stw	r4,196(sp)
    9d70:	94800114 	ori	r18,r18,4
    9d74:	bc400007 	ldb	r17,0(r23)
    9d78:	003f9706 	br	9bd8 <__alt_data_end+0xf0009bd8>
    9d7c:	00800c04 	movi	r2,48
    9d80:	d9002d17 	ldw	r4,180(sp)
    9d84:	d9402917 	ldw	r5,164(sp)
    9d88:	d8802705 	stb	r2,156(sp)
    9d8c:	00801e04 	movi	r2,120
    9d90:	d8802745 	stb	r2,157(sp)
    9d94:	d8002785 	stb	zero,158(sp)
    9d98:	20c00104 	addi	r3,r4,4
    9d9c:	25000017 	ldw	r20,0(r4)
    9da0:	002d883a 	mov	r22,zero
    9da4:	90800094 	ori	r2,r18,2
    9da8:	28028616 	blt	r5,zero,a7c4 <___svfprintf_internal_r+0xd3c>
    9dac:	00bfdfc4 	movi	r2,-129
    9db0:	90a4703a 	and	r18,r18,r2
    9db4:	d8c02d15 	stw	r3,180(sp)
    9db8:	94800094 	ori	r18,r18,2
    9dbc:	a002731e 	bne	r20,zero,a78c <___svfprintf_internal_r+0xd04>
    9dc0:	00820034 	movhi	r2,2048
    9dc4:	1080e604 	addi	r2,r2,920
    9dc8:	d8803a15 	stw	r2,232(sp)
    9dcc:	04401e04 	movi	r17,120
    9dd0:	d8c02917 	ldw	r3,164(sp)
    9dd4:	0039883a 	mov	fp,zero
    9dd8:	1801d526 	beq	r3,zero,a530 <___svfprintf_internal_r+0xaa8>
    9ddc:	0029883a 	mov	r20,zero
    9de0:	002d883a 	mov	r22,zero
    9de4:	0001f106 	br	a5ac <___svfprintf_internal_r+0xb24>
    9de8:	d9402c17 	ldw	r5,176(sp)
    9dec:	d9801e04 	addi	r6,sp,120
    9df0:	9809883a 	mov	r4,r19
    9df4:	0012ef00 	call	12ef0 <__ssprint_r>
    9df8:	1000081e 	bne	r2,zero,9e1c <___svfprintf_internal_r+0x394>
    9dfc:	da000404 	addi	r8,sp,16
    9e00:	003f6306 	br	9b90 <__alt_data_end+0xf0009b90>
    9e04:	d8802017 	ldw	r2,128(sp)
    9e08:	10000426 	beq	r2,zero,9e1c <___svfprintf_internal_r+0x394>
    9e0c:	d9402c17 	ldw	r5,176(sp)
    9e10:	d9003917 	ldw	r4,228(sp)
    9e14:	d9801e04 	addi	r6,sp,120
    9e18:	0012ef00 	call	12ef0 <__ssprint_r>
    9e1c:	d8802c17 	ldw	r2,176(sp)
    9e20:	10c0030b 	ldhu	r3,12(r2)
    9e24:	d8802f17 	ldw	r2,188(sp)
    9e28:	18c0100c 	andi	r3,r3,64
    9e2c:	1805f51e 	bne	r3,zero,b604 <___svfprintf_internal_r+0x1b7c>
    9e30:	dfc04817 	ldw	ra,288(sp)
    9e34:	df004717 	ldw	fp,284(sp)
    9e38:	ddc04617 	ldw	r23,280(sp)
    9e3c:	dd804517 	ldw	r22,276(sp)
    9e40:	dd404417 	ldw	r21,272(sp)
    9e44:	dd004317 	ldw	r20,268(sp)
    9e48:	dcc04217 	ldw	r19,264(sp)
    9e4c:	dc804117 	ldw	r18,260(sp)
    9e50:	dc404017 	ldw	r17,256(sp)
    9e54:	dc003f17 	ldw	r16,252(sp)
    9e58:	dec04904 	addi	sp,sp,292
    9e5c:	f800283a 	ret
    9e60:	d8802d17 	ldw	r2,180(sp)
    9e64:	d9002d17 	ldw	r4,180(sp)
    9e68:	10800017 	ldw	r2,0(r2)
    9e6c:	d8803115 	stw	r2,196(sp)
    9e70:	20800104 	addi	r2,r4,4
    9e74:	d9003117 	ldw	r4,196(sp)
    9e78:	203fb916 	blt	r4,zero,9d60 <__alt_data_end+0xf0009d60>
    9e7c:	d8802d15 	stw	r2,180(sp)
    9e80:	bc400007 	ldb	r17,0(r23)
    9e84:	003f5406 	br	9bd8 <__alt_data_end+0xf0009bd8>
    9e88:	bc400007 	ldb	r17,0(r23)
    9e8c:	bac00044 	addi	r11,r23,1
    9e90:	8a873926 	beq	r17,r10,bb78 <___svfprintf_internal_r+0x20f0>
    9e94:	88bff404 	addi	r2,r17,-48
    9e98:	0009883a 	mov	r4,zero
    9e9c:	30868836 	bltu	r6,r2,b8c0 <___svfprintf_internal_r+0x1e38>
    9ea0:	5c400007 	ldb	r17,0(r11)
    9ea4:	210002a4 	muli	r4,r4,10
    9ea8:	5dc00044 	addi	r23,r11,1
    9eac:	b817883a 	mov	r11,r23
    9eb0:	2089883a 	add	r4,r4,r2
    9eb4:	88bff404 	addi	r2,r17,-48
    9eb8:	30bff92e 	bgeu	r6,r2,9ea0 <__alt_data_end+0xf0009ea0>
    9ebc:	2005d716 	blt	r4,zero,b61c <___svfprintf_internal_r+0x1b94>
    9ec0:	d9002915 	stw	r4,164(sp)
    9ec4:	003f4506 	br	9bdc <__alt_data_end+0xf0009bdc>
    9ec8:	b809883a 	mov	r4,r23
    9ecc:	d8003115 	stw	zero,196(sp)
    9ed0:	88bff404 	addi	r2,r17,-48
    9ed4:	0017883a 	mov	r11,zero
    9ed8:	24400007 	ldb	r17,0(r4)
    9edc:	5ac002a4 	muli	r11,r11,10
    9ee0:	bdc00044 	addi	r23,r23,1
    9ee4:	b809883a 	mov	r4,r23
    9ee8:	12d7883a 	add	r11,r2,r11
    9eec:	88bff404 	addi	r2,r17,-48
    9ef0:	30bff92e 	bgeu	r6,r2,9ed8 <__alt_data_end+0xf0009ed8>
    9ef4:	dac03115 	stw	r11,196(sp)
    9ef8:	003f3806 	br	9bdc <__alt_data_end+0xf0009bdc>
    9efc:	94802014 	ori	r18,r18,128
    9f00:	bc400007 	ldb	r17,0(r23)
    9f04:	003f3406 	br	9bd8 <__alt_data_end+0xf0009bd8>
    9f08:	18c03fcc 	andi	r3,r3,255
    9f0c:	1807471e 	bne	r3,zero,bc2c <___svfprintf_internal_r+0x21a4>
    9f10:	9080020c 	andi	r2,r18,8
    9f14:	10047d26 	beq	r2,zero,b10c <___svfprintf_internal_r+0x1684>
    9f18:	d8c02d17 	ldw	r3,180(sp)
    9f1c:	d9002d17 	ldw	r4,180(sp)
    9f20:	d9402d17 	ldw	r5,180(sp)
    9f24:	18c00017 	ldw	r3,0(r3)
    9f28:	21000117 	ldw	r4,4(r4)
    9f2c:	29400204 	addi	r5,r5,8
    9f30:	d8c03615 	stw	r3,216(sp)
    9f34:	d9003715 	stw	r4,220(sp)
    9f38:	d9402d15 	stw	r5,180(sp)
    9f3c:	d9003617 	ldw	r4,216(sp)
    9f40:	d9403717 	ldw	r5,220(sp)
    9f44:	da003e15 	stw	r8,248(sp)
    9f48:	04000044 	movi	r16,1
    9f4c:	0012c100 	call	12c10 <__fpclassifyd>
    9f50:	da003e17 	ldw	r8,248(sp)
    9f54:	14044b1e 	bne	r2,r16,b084 <___svfprintf_internal_r+0x15fc>
    9f58:	d9003617 	ldw	r4,216(sp)
    9f5c:	d9403717 	ldw	r5,220(sp)
    9f60:	000d883a 	mov	r6,zero
    9f64:	000f883a 	mov	r7,zero
    9f68:	001765c0 	call	1765c <__ledf2>
    9f6c:	da003e17 	ldw	r8,248(sp)
    9f70:	1005f316 	blt	r2,zero,b740 <___svfprintf_internal_r+0x1cb8>
    9f74:	df002783 	ldbu	fp,158(sp)
    9f78:	008011c4 	movi	r2,71
    9f7c:	1445590e 	bge	r2,r17,b4e4 <___svfprintf_internal_r+0x1a5c>
    9f80:	04020034 	movhi	r16,2048
    9f84:	8400de04 	addi	r16,r16,888
    9f88:	00c000c4 	movi	r3,3
    9f8c:	00bfdfc4 	movi	r2,-129
    9f90:	d8c02a15 	stw	r3,168(sp)
    9f94:	90a4703a 	and	r18,r18,r2
    9f98:	d8c02e15 	stw	r3,184(sp)
    9f9c:	d8002915 	stw	zero,164(sp)
    9fa0:	d8003215 	stw	zero,200(sp)
    9fa4:	00006606 	br	a140 <___svfprintf_internal_r+0x6b8>
    9fa8:	94800214 	ori	r18,r18,8
    9fac:	bc400007 	ldb	r17,0(r23)
    9fb0:	003f0906 	br	9bd8 <__alt_data_end+0xf0009bd8>
    9fb4:	18c03fcc 	andi	r3,r3,255
    9fb8:	1807181e 	bne	r3,zero,bc1c <___svfprintf_internal_r+0x2194>
    9fbc:	94800414 	ori	r18,r18,16
    9fc0:	9080080c 	andi	r2,r18,32
    9fc4:	10039626 	beq	r2,zero,ae20 <___svfprintf_internal_r+0x1398>
    9fc8:	d9402d17 	ldw	r5,180(sp)
    9fcc:	28800117 	ldw	r2,4(r5)
    9fd0:	2d000017 	ldw	r20,0(r5)
    9fd4:	29400204 	addi	r5,r5,8
    9fd8:	d9402d15 	stw	r5,180(sp)
    9fdc:	102d883a 	mov	r22,r2
    9fe0:	10039816 	blt	r2,zero,ae44 <___svfprintf_internal_r+0x13bc>
    9fe4:	d9402917 	ldw	r5,164(sp)
    9fe8:	df002783 	ldbu	fp,158(sp)
    9fec:	2803ab16 	blt	r5,zero,ae9c <___svfprintf_internal_r+0x1414>
    9ff0:	00ffdfc4 	movi	r3,-129
    9ff4:	a584b03a 	or	r2,r20,r22
    9ff8:	90e4703a 	and	r18,r18,r3
    9ffc:	10014a26 	beq	r2,zero,a528 <___svfprintf_internal_r+0xaa0>
    a000:	b0034b26 	beq	r22,zero,ad30 <___svfprintf_internal_r+0x12a8>
    a004:	dc402a15 	stw	r17,168(sp)
    a008:	dc001e04 	addi	r16,sp,120
    a00c:	b023883a 	mov	r17,r22
    a010:	402d883a 	mov	r22,r8
    a014:	a009883a 	mov	r4,r20
    a018:	880b883a 	mov	r5,r17
    a01c:	01800284 	movi	r6,10
    a020:	000f883a 	mov	r7,zero
    a024:	00167f00 	call	167f0 <__umoddi3>
    a028:	10800c04 	addi	r2,r2,48
    a02c:	843fffc4 	addi	r16,r16,-1
    a030:	a009883a 	mov	r4,r20
    a034:	880b883a 	mov	r5,r17
    a038:	80800005 	stb	r2,0(r16)
    a03c:	01800284 	movi	r6,10
    a040:	000f883a 	mov	r7,zero
    a044:	00162780 	call	16278 <__udivdi3>
    a048:	1029883a 	mov	r20,r2
    a04c:	10c4b03a 	or	r2,r2,r3
    a050:	1823883a 	mov	r17,r3
    a054:	103fef1e 	bne	r2,zero,a014 <__alt_data_end+0xf000a014>
    a058:	d8c02817 	ldw	r3,160(sp)
    a05c:	dc402a17 	ldw	r17,168(sp)
    a060:	b011883a 	mov	r8,r22
    a064:	1c07c83a 	sub	r3,r3,r16
    a068:	d8c02e15 	stw	r3,184(sp)
    a06c:	00002e06 	br	a128 <___svfprintf_internal_r+0x6a0>
    a070:	18c03fcc 	andi	r3,r3,255
    a074:	1806e71e 	bne	r3,zero,bc14 <___svfprintf_internal_r+0x218c>
    a078:	94800414 	ori	r18,r18,16
    a07c:	9080080c 	andi	r2,r18,32
    a080:	1002d426 	beq	r2,zero,abd4 <___svfprintf_internal_r+0x114c>
    a084:	d9402d17 	ldw	r5,180(sp)
    a088:	d8c02917 	ldw	r3,164(sp)
    a08c:	d8002785 	stb	zero,158(sp)
    a090:	28800204 	addi	r2,r5,8
    a094:	2d000017 	ldw	r20,0(r5)
    a098:	2d800117 	ldw	r22,4(r5)
    a09c:	18041516 	blt	r3,zero,b0f4 <___svfprintf_internal_r+0x166c>
    a0a0:	013fdfc4 	movi	r4,-129
    a0a4:	a586b03a 	or	r3,r20,r22
    a0a8:	d8802d15 	stw	r2,180(sp)
    a0ac:	9124703a 	and	r18,r18,r4
    a0b0:	1802d51e 	bne	r3,zero,ac08 <___svfprintf_internal_r+0x1180>
    a0b4:	d9402917 	ldw	r5,164(sp)
    a0b8:	0039883a 	mov	fp,zero
    a0bc:	2806be26 	beq	r5,zero,bbb8 <___svfprintf_internal_r+0x2130>
    a0c0:	0029883a 	mov	r20,zero
    a0c4:	002d883a 	mov	r22,zero
    a0c8:	dc001e04 	addi	r16,sp,120
    a0cc:	a006d0fa 	srli	r3,r20,3
    a0d0:	b008977a 	slli	r4,r22,29
    a0d4:	b02cd0fa 	srli	r22,r22,3
    a0d8:	a50001cc 	andi	r20,r20,7
    a0dc:	a0800c04 	addi	r2,r20,48
    a0e0:	843fffc4 	addi	r16,r16,-1
    a0e4:	20e8b03a 	or	r20,r4,r3
    a0e8:	80800005 	stb	r2,0(r16)
    a0ec:	a586b03a 	or	r3,r20,r22
    a0f0:	183ff61e 	bne	r3,zero,a0cc <__alt_data_end+0xf000a0cc>
    a0f4:	90c0004c 	andi	r3,r18,1
    a0f8:	18013926 	beq	r3,zero,a5e0 <___svfprintf_internal_r+0xb58>
    a0fc:	10803fcc 	andi	r2,r2,255
    a100:	1080201c 	xori	r2,r2,128
    a104:	10bfe004 	addi	r2,r2,-128
    a108:	00c00c04 	movi	r3,48
    a10c:	10c13426 	beq	r2,r3,a5e0 <___svfprintf_internal_r+0xb58>
    a110:	80ffffc5 	stb	r3,-1(r16)
    a114:	d8c02817 	ldw	r3,160(sp)
    a118:	80bfffc4 	addi	r2,r16,-1
    a11c:	1021883a 	mov	r16,r2
    a120:	1887c83a 	sub	r3,r3,r2
    a124:	d8c02e15 	stw	r3,184(sp)
    a128:	d8802e17 	ldw	r2,184(sp)
    a12c:	d9002917 	ldw	r4,164(sp)
    a130:	1100010e 	bge	r2,r4,a138 <___svfprintf_internal_r+0x6b0>
    a134:	2005883a 	mov	r2,r4
    a138:	d8802a15 	stw	r2,168(sp)
    a13c:	d8003215 	stw	zero,200(sp)
    a140:	e7003fcc 	andi	fp,fp,255
    a144:	e700201c 	xori	fp,fp,128
    a148:	e73fe004 	addi	fp,fp,-128
    a14c:	e0000326 	beq	fp,zero,a15c <___svfprintf_internal_r+0x6d4>
    a150:	d8c02a17 	ldw	r3,168(sp)
    a154:	18c00044 	addi	r3,r3,1
    a158:	d8c02a15 	stw	r3,168(sp)
    a15c:	90c0008c 	andi	r3,r18,2
    a160:	d8c02b15 	stw	r3,172(sp)
    a164:	18000326 	beq	r3,zero,a174 <___svfprintf_internal_r+0x6ec>
    a168:	d8c02a17 	ldw	r3,168(sp)
    a16c:	18c00084 	addi	r3,r3,2
    a170:	d8c02a15 	stw	r3,168(sp)
    a174:	90c0210c 	andi	r3,r18,132
    a178:	d8c03015 	stw	r3,192(sp)
    a17c:	1801a11e 	bne	r3,zero,a804 <___svfprintf_internal_r+0xd7c>
    a180:	d9003117 	ldw	r4,196(sp)
    a184:	d8c02a17 	ldw	r3,168(sp)
    a188:	20e9c83a 	sub	r20,r4,r3
    a18c:	05019d0e 	bge	zero,r20,a804 <___svfprintf_internal_r+0xd7c>
    a190:	02400404 	movi	r9,16
    a194:	d8c02017 	ldw	r3,128(sp)
    a198:	d8801f17 	ldw	r2,124(sp)
    a19c:	4d051b0e 	bge	r9,r20,b60c <___svfprintf_internal_r+0x1b84>
    a1a0:	01420034 	movhi	r5,2048
    a1a4:	2940f184 	addi	r5,r5,966
    a1a8:	dc403c15 	stw	r17,240(sp)
    a1ac:	d9403515 	stw	r5,212(sp)
    a1b0:	a023883a 	mov	r17,r20
    a1b4:	482d883a 	mov	r22,r9
    a1b8:	9029883a 	mov	r20,r18
    a1bc:	070001c4 	movi	fp,7
    a1c0:	8025883a 	mov	r18,r16
    a1c4:	dc002c17 	ldw	r16,176(sp)
    a1c8:	00000306 	br	a1d8 <___svfprintf_internal_r+0x750>
    a1cc:	8c7ffc04 	addi	r17,r17,-16
    a1d0:	42000204 	addi	r8,r8,8
    a1d4:	b440130e 	bge	r22,r17,a224 <___svfprintf_internal_r+0x79c>
    a1d8:	01020034 	movhi	r4,2048
    a1dc:	18c00404 	addi	r3,r3,16
    a1e0:	10800044 	addi	r2,r2,1
    a1e4:	2100f184 	addi	r4,r4,966
    a1e8:	41000015 	stw	r4,0(r8)
    a1ec:	45800115 	stw	r22,4(r8)
    a1f0:	d8c02015 	stw	r3,128(sp)
    a1f4:	d8801f15 	stw	r2,124(sp)
    a1f8:	e0bff40e 	bge	fp,r2,a1cc <__alt_data_end+0xf000a1cc>
    a1fc:	d9801e04 	addi	r6,sp,120
    a200:	800b883a 	mov	r5,r16
    a204:	9809883a 	mov	r4,r19
    a208:	0012ef00 	call	12ef0 <__ssprint_r>
    a20c:	103f031e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    a210:	8c7ffc04 	addi	r17,r17,-16
    a214:	d8c02017 	ldw	r3,128(sp)
    a218:	d8801f17 	ldw	r2,124(sp)
    a21c:	da000404 	addi	r8,sp,16
    a220:	b47fed16 	blt	r22,r17,a1d8 <__alt_data_end+0xf000a1d8>
    a224:	9021883a 	mov	r16,r18
    a228:	a025883a 	mov	r18,r20
    a22c:	8829883a 	mov	r20,r17
    a230:	dc403c17 	ldw	r17,240(sp)
    a234:	d9403517 	ldw	r5,212(sp)
    a238:	a0c7883a 	add	r3,r20,r3
    a23c:	10800044 	addi	r2,r2,1
    a240:	41400015 	stw	r5,0(r8)
    a244:	45000115 	stw	r20,4(r8)
    a248:	d8c02015 	stw	r3,128(sp)
    a24c:	d8801f15 	stw	r2,124(sp)
    a250:	010001c4 	movi	r4,7
    a254:	20829f16 	blt	r4,r2,acd4 <___svfprintf_internal_r+0x124c>
    a258:	df002787 	ldb	fp,158(sp)
    a25c:	42000204 	addi	r8,r8,8
    a260:	e0000c26 	beq	fp,zero,a294 <___svfprintf_internal_r+0x80c>
    a264:	d8801f17 	ldw	r2,124(sp)
    a268:	d9002784 	addi	r4,sp,158
    a26c:	18c00044 	addi	r3,r3,1
    a270:	10800044 	addi	r2,r2,1
    a274:	41000015 	stw	r4,0(r8)
    a278:	01000044 	movi	r4,1
    a27c:	41000115 	stw	r4,4(r8)
    a280:	d8c02015 	stw	r3,128(sp)
    a284:	d8801f15 	stw	r2,124(sp)
    a288:	010001c4 	movi	r4,7
    a28c:	20823816 	blt	r4,r2,ab70 <___svfprintf_internal_r+0x10e8>
    a290:	42000204 	addi	r8,r8,8
    a294:	d8802b17 	ldw	r2,172(sp)
    a298:	10000c26 	beq	r2,zero,a2cc <___svfprintf_internal_r+0x844>
    a29c:	d8801f17 	ldw	r2,124(sp)
    a2a0:	d9002704 	addi	r4,sp,156
    a2a4:	18c00084 	addi	r3,r3,2
    a2a8:	10800044 	addi	r2,r2,1
    a2ac:	41000015 	stw	r4,0(r8)
    a2b0:	01000084 	movi	r4,2
    a2b4:	41000115 	stw	r4,4(r8)
    a2b8:	d8c02015 	stw	r3,128(sp)
    a2bc:	d8801f15 	stw	r2,124(sp)
    a2c0:	010001c4 	movi	r4,7
    a2c4:	20823216 	blt	r4,r2,ab90 <___svfprintf_internal_r+0x1108>
    a2c8:	42000204 	addi	r8,r8,8
    a2cc:	d9003017 	ldw	r4,192(sp)
    a2d0:	00802004 	movi	r2,128
    a2d4:	20819726 	beq	r4,r2,a934 <___svfprintf_internal_r+0xeac>
    a2d8:	d9402917 	ldw	r5,164(sp)
    a2dc:	d8802e17 	ldw	r2,184(sp)
    a2e0:	28adc83a 	sub	r22,r5,r2
    a2e4:	05802f0e 	bge	zero,r22,a3a4 <___svfprintf_internal_r+0x91c>
    a2e8:	07000404 	movi	fp,16
    a2ec:	d8801f17 	ldw	r2,124(sp)
    a2f0:	e583c00e 	bge	fp,r22,b1f4 <___svfprintf_internal_r+0x176c>
    a2f4:	01420034 	movhi	r5,2048
    a2f8:	2940ed84 	addi	r5,r5,950
    a2fc:	dc402915 	stw	r17,164(sp)
    a300:	d9402b15 	stw	r5,172(sp)
    a304:	b023883a 	mov	r17,r22
    a308:	050001c4 	movi	r20,7
    a30c:	902d883a 	mov	r22,r18
    a310:	8025883a 	mov	r18,r16
    a314:	dc002c17 	ldw	r16,176(sp)
    a318:	00000306 	br	a328 <___svfprintf_internal_r+0x8a0>
    a31c:	8c7ffc04 	addi	r17,r17,-16
    a320:	42000204 	addi	r8,r8,8
    a324:	e440110e 	bge	fp,r17,a36c <___svfprintf_internal_r+0x8e4>
    a328:	18c00404 	addi	r3,r3,16
    a32c:	10800044 	addi	r2,r2,1
    a330:	45400015 	stw	r21,0(r8)
    a334:	47000115 	stw	fp,4(r8)
    a338:	d8c02015 	stw	r3,128(sp)
    a33c:	d8801f15 	stw	r2,124(sp)
    a340:	a0bff60e 	bge	r20,r2,a31c <__alt_data_end+0xf000a31c>
    a344:	d9801e04 	addi	r6,sp,120
    a348:	800b883a 	mov	r5,r16
    a34c:	9809883a 	mov	r4,r19
    a350:	0012ef00 	call	12ef0 <__ssprint_r>
    a354:	103eb11e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    a358:	8c7ffc04 	addi	r17,r17,-16
    a35c:	d8c02017 	ldw	r3,128(sp)
    a360:	d8801f17 	ldw	r2,124(sp)
    a364:	da000404 	addi	r8,sp,16
    a368:	e47fef16 	blt	fp,r17,a328 <__alt_data_end+0xf000a328>
    a36c:	9021883a 	mov	r16,r18
    a370:	b025883a 	mov	r18,r22
    a374:	882d883a 	mov	r22,r17
    a378:	dc402917 	ldw	r17,164(sp)
    a37c:	d9002b17 	ldw	r4,172(sp)
    a380:	1d87883a 	add	r3,r3,r22
    a384:	10800044 	addi	r2,r2,1
    a388:	41000015 	stw	r4,0(r8)
    a38c:	45800115 	stw	r22,4(r8)
    a390:	d8c02015 	stw	r3,128(sp)
    a394:	d8801f15 	stw	r2,124(sp)
    a398:	010001c4 	movi	r4,7
    a39c:	2081ec16 	blt	r4,r2,ab50 <___svfprintf_internal_r+0x10c8>
    a3a0:	42000204 	addi	r8,r8,8
    a3a4:	9080400c 	andi	r2,r18,256
    a3a8:	1001181e 	bne	r2,zero,a80c <___svfprintf_internal_r+0xd84>
    a3ac:	d9402e17 	ldw	r5,184(sp)
    a3b0:	d8801f17 	ldw	r2,124(sp)
    a3b4:	44000015 	stw	r16,0(r8)
    a3b8:	1947883a 	add	r3,r3,r5
    a3bc:	10800044 	addi	r2,r2,1
    a3c0:	41400115 	stw	r5,4(r8)
    a3c4:	d8c02015 	stw	r3,128(sp)
    a3c8:	d8801f15 	stw	r2,124(sp)
    a3cc:	010001c4 	movi	r4,7
    a3d0:	2081d116 	blt	r4,r2,ab18 <___svfprintf_internal_r+0x1090>
    a3d4:	42000204 	addi	r8,r8,8
    a3d8:	9480010c 	andi	r18,r18,4
    a3dc:	90003226 	beq	r18,zero,a4a8 <___svfprintf_internal_r+0xa20>
    a3e0:	d9403117 	ldw	r5,196(sp)
    a3e4:	d8802a17 	ldw	r2,168(sp)
    a3e8:	28a1c83a 	sub	r16,r5,r2
    a3ec:	04002e0e 	bge	zero,r16,a4a8 <___svfprintf_internal_r+0xa20>
    a3f0:	04400404 	movi	r17,16
    a3f4:	d8801f17 	ldw	r2,124(sp)
    a3f8:	8c04b90e 	bge	r17,r16,b6e0 <___svfprintf_internal_r+0x1c58>
    a3fc:	01420034 	movhi	r5,2048
    a400:	2940f184 	addi	r5,r5,966
    a404:	d9403515 	stw	r5,212(sp)
    a408:	048001c4 	movi	r18,7
    a40c:	dd002c17 	ldw	r20,176(sp)
    a410:	00000306 	br	a420 <___svfprintf_internal_r+0x998>
    a414:	843ffc04 	addi	r16,r16,-16
    a418:	42000204 	addi	r8,r8,8
    a41c:	8c00130e 	bge	r17,r16,a46c <___svfprintf_internal_r+0x9e4>
    a420:	01020034 	movhi	r4,2048
    a424:	18c00404 	addi	r3,r3,16
    a428:	10800044 	addi	r2,r2,1
    a42c:	2100f184 	addi	r4,r4,966
    a430:	41000015 	stw	r4,0(r8)
    a434:	44400115 	stw	r17,4(r8)
    a438:	d8c02015 	stw	r3,128(sp)
    a43c:	d8801f15 	stw	r2,124(sp)
    a440:	90bff40e 	bge	r18,r2,a414 <__alt_data_end+0xf000a414>
    a444:	d9801e04 	addi	r6,sp,120
    a448:	a00b883a 	mov	r5,r20
    a44c:	9809883a 	mov	r4,r19
    a450:	0012ef00 	call	12ef0 <__ssprint_r>
    a454:	103e711e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    a458:	843ffc04 	addi	r16,r16,-16
    a45c:	d8c02017 	ldw	r3,128(sp)
    a460:	d8801f17 	ldw	r2,124(sp)
    a464:	da000404 	addi	r8,sp,16
    a468:	8c3fed16 	blt	r17,r16,a420 <__alt_data_end+0xf000a420>
    a46c:	d9403517 	ldw	r5,212(sp)
    a470:	1c07883a 	add	r3,r3,r16
    a474:	10800044 	addi	r2,r2,1
    a478:	41400015 	stw	r5,0(r8)
    a47c:	44000115 	stw	r16,4(r8)
    a480:	d8c02015 	stw	r3,128(sp)
    a484:	d8801f15 	stw	r2,124(sp)
    a488:	010001c4 	movi	r4,7
    a48c:	2080060e 	bge	r4,r2,a4a8 <___svfprintf_internal_r+0xa20>
    a490:	d9402c17 	ldw	r5,176(sp)
    a494:	d9801e04 	addi	r6,sp,120
    a498:	9809883a 	mov	r4,r19
    a49c:	0012ef00 	call	12ef0 <__ssprint_r>
    a4a0:	103e5e1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    a4a4:	d8c02017 	ldw	r3,128(sp)
    a4a8:	d8803117 	ldw	r2,196(sp)
    a4ac:	d9002a17 	ldw	r4,168(sp)
    a4b0:	1100010e 	bge	r2,r4,a4b8 <___svfprintf_internal_r+0xa30>
    a4b4:	2005883a 	mov	r2,r4
    a4b8:	d9402f17 	ldw	r5,188(sp)
    a4bc:	288b883a 	add	r5,r5,r2
    a4c0:	d9402f15 	stw	r5,188(sp)
    a4c4:	18019c1e 	bne	r3,zero,ab38 <___svfprintf_internal_r+0x10b0>
    a4c8:	b8800007 	ldb	r2,0(r23)
    a4cc:	d8001f15 	stw	zero,124(sp)
    a4d0:	da000404 	addi	r8,sp,16
    a4d4:	103d991e 	bne	r2,zero,9b3c <__alt_data_end+0xf0009b3c>
    a4d8:	b821883a 	mov	r16,r23
    a4dc:	003daf06 	br	9b9c <__alt_data_end+0xf0009b9c>
    a4e0:	18c03fcc 	andi	r3,r3,255
    a4e4:	1805c71e 	bne	r3,zero,bc04 <___svfprintf_internal_r+0x217c>
    a4e8:	94800414 	ori	r18,r18,16
    a4ec:	9080080c 	andi	r2,r18,32
    a4f0:	10020126 	beq	r2,zero,acf8 <___svfprintf_internal_r+0x1270>
    a4f4:	d8802d17 	ldw	r2,180(sp)
    a4f8:	d9002917 	ldw	r4,164(sp)
    a4fc:	d8002785 	stb	zero,158(sp)
    a500:	10c00204 	addi	r3,r2,8
    a504:	15000017 	ldw	r20,0(r2)
    a508:	15800117 	ldw	r22,4(r2)
    a50c:	20038e16 	blt	r4,zero,b348 <___svfprintf_internal_r+0x18c0>
    a510:	013fdfc4 	movi	r4,-129
    a514:	a584b03a 	or	r2,r20,r22
    a518:	d8c02d15 	stw	r3,180(sp)
    a51c:	9124703a 	and	r18,r18,r4
    a520:	0039883a 	mov	fp,zero
    a524:	103eb61e 	bne	r2,zero,a000 <__alt_data_end+0xf000a000>
    a528:	d8802917 	ldw	r2,164(sp)
    a52c:	1002c81e 	bne	r2,zero,b050 <___svfprintf_internal_r+0x15c8>
    a530:	d8002915 	stw	zero,164(sp)
    a534:	d8002e15 	stw	zero,184(sp)
    a538:	dc001e04 	addi	r16,sp,120
    a53c:	003efa06 	br	a128 <__alt_data_end+0xf000a128>
    a540:	18c03fcc 	andi	r3,r3,255
    a544:	1805ad1e 	bne	r3,zero,bbfc <___svfprintf_internal_r+0x2174>
    a548:	01420034 	movhi	r5,2048
    a54c:	2940e104 	addi	r5,r5,900
    a550:	d9403a15 	stw	r5,232(sp)
    a554:	9080080c 	andi	r2,r18,32
    a558:	10006126 	beq	r2,zero,a6e0 <___svfprintf_internal_r+0xc58>
    a55c:	d8802d17 	ldw	r2,180(sp)
    a560:	15000017 	ldw	r20,0(r2)
    a564:	15800117 	ldw	r22,4(r2)
    a568:	10800204 	addi	r2,r2,8
    a56c:	d8802d15 	stw	r2,180(sp)
    a570:	9080004c 	andi	r2,r18,1
    a574:	10018e26 	beq	r2,zero,abb0 <___svfprintf_internal_r+0x1128>
    a578:	a584b03a 	or	r2,r20,r22
    a57c:	10030926 	beq	r2,zero,b1a4 <___svfprintf_internal_r+0x171c>
    a580:	d8c02917 	ldw	r3,164(sp)
    a584:	00800c04 	movi	r2,48
    a588:	d8802705 	stb	r2,156(sp)
    a58c:	dc402745 	stb	r17,157(sp)
    a590:	d8002785 	stb	zero,158(sp)
    a594:	90800094 	ori	r2,r18,2
    a598:	18048716 	blt	r3,zero,b7b8 <___svfprintf_internal_r+0x1d30>
    a59c:	00bfdfc4 	movi	r2,-129
    a5a0:	90a4703a 	and	r18,r18,r2
    a5a4:	94800094 	ori	r18,r18,2
    a5a8:	0039883a 	mov	fp,zero
    a5ac:	d9003a17 	ldw	r4,232(sp)
    a5b0:	dc001e04 	addi	r16,sp,120
    a5b4:	a08003cc 	andi	r2,r20,15
    a5b8:	b006973a 	slli	r3,r22,28
    a5bc:	2085883a 	add	r2,r4,r2
    a5c0:	a028d13a 	srli	r20,r20,4
    a5c4:	10800003 	ldbu	r2,0(r2)
    a5c8:	b02cd13a 	srli	r22,r22,4
    a5cc:	843fffc4 	addi	r16,r16,-1
    a5d0:	1d28b03a 	or	r20,r3,r20
    a5d4:	80800005 	stb	r2,0(r16)
    a5d8:	a584b03a 	or	r2,r20,r22
    a5dc:	103ff51e 	bne	r2,zero,a5b4 <__alt_data_end+0xf000a5b4>
    a5e0:	d8c02817 	ldw	r3,160(sp)
    a5e4:	1c07c83a 	sub	r3,r3,r16
    a5e8:	d8c02e15 	stw	r3,184(sp)
    a5ec:	003ece06 	br	a128 <__alt_data_end+0xf000a128>
    a5f0:	d8c02d17 	ldw	r3,180(sp)
    a5f4:	d9002d17 	ldw	r4,180(sp)
    a5f8:	d8002785 	stb	zero,158(sp)
    a5fc:	18800017 	ldw	r2,0(r3)
    a600:	21000104 	addi	r4,r4,4
    a604:	00c00044 	movi	r3,1
    a608:	d8c02a15 	stw	r3,168(sp)
    a60c:	d8801405 	stb	r2,80(sp)
    a610:	d9002d15 	stw	r4,180(sp)
    a614:	d8c02e15 	stw	r3,184(sp)
    a618:	d8002915 	stw	zero,164(sp)
    a61c:	d8003215 	stw	zero,200(sp)
    a620:	dc001404 	addi	r16,sp,80
    a624:	0039883a 	mov	fp,zero
    a628:	003ecc06 	br	a15c <__alt_data_end+0xf000a15c>
    a62c:	18c03fcc 	andi	r3,r3,255
    a630:	183e9226 	beq	r3,zero,a07c <__alt_data_end+0xf000a07c>
    a634:	d9c02785 	stb	r7,158(sp)
    a638:	003e9006 	br	a07c <__alt_data_end+0xf000a07c>
    a63c:	00c00044 	movi	r3,1
    a640:	01c00ac4 	movi	r7,43
    a644:	bc400007 	ldb	r17,0(r23)
    a648:	003d6306 	br	9bd8 <__alt_data_end+0xf0009bd8>
    a64c:	94800814 	ori	r18,r18,32
    a650:	bc400007 	ldb	r17,0(r23)
    a654:	003d6006 	br	9bd8 <__alt_data_end+0xf0009bd8>
    a658:	d8c02d17 	ldw	r3,180(sp)
    a65c:	d8002785 	stb	zero,158(sp)
    a660:	1c000017 	ldw	r16,0(r3)
    a664:	1d000104 	addi	r20,r3,4
    a668:	80040f26 	beq	r16,zero,b6a8 <___svfprintf_internal_r+0x1c20>
    a66c:	d9002917 	ldw	r4,164(sp)
    a670:	2003dc16 	blt	r4,zero,b5e4 <___svfprintf_internal_r+0x1b5c>
    a674:	200d883a 	mov	r6,r4
    a678:	000b883a 	mov	r5,zero
    a67c:	8009883a 	mov	r4,r16
    a680:	da003e15 	stw	r8,248(sp)
    a684:	00114700 	call	11470 <memchr>
    a688:	da003e17 	ldw	r8,248(sp)
    a68c:	10045826 	beq	r2,zero,b7f0 <___svfprintf_internal_r+0x1d68>
    a690:	1405c83a 	sub	r2,r2,r16
    a694:	d8802e15 	stw	r2,184(sp)
    a698:	1003d816 	blt	r2,zero,b5fc <___svfprintf_internal_r+0x1b74>
    a69c:	df002783 	ldbu	fp,158(sp)
    a6a0:	d8802a15 	stw	r2,168(sp)
    a6a4:	dd002d15 	stw	r20,180(sp)
    a6a8:	d8002915 	stw	zero,164(sp)
    a6ac:	d8003215 	stw	zero,200(sp)
    a6b0:	003ea306 	br	a140 <__alt_data_end+0xf000a140>
    a6b4:	18c03fcc 	andi	r3,r3,255
    a6b8:	183f8c26 	beq	r3,zero,a4ec <__alt_data_end+0xf000a4ec>
    a6bc:	d9c02785 	stb	r7,158(sp)
    a6c0:	003f8a06 	br	a4ec <__alt_data_end+0xf000a4ec>
    a6c4:	18c03fcc 	andi	r3,r3,255
    a6c8:	1805631e 	bne	r3,zero,bc58 <___svfprintf_internal_r+0x21d0>
    a6cc:	01420034 	movhi	r5,2048
    a6d0:	2940e604 	addi	r5,r5,920
    a6d4:	d9403a15 	stw	r5,232(sp)
    a6d8:	9080080c 	andi	r2,r18,32
    a6dc:	103f9f1e 	bne	r2,zero,a55c <__alt_data_end+0xf000a55c>
    a6e0:	9080040c 	andi	r2,r18,16
    a6e4:	10029c26 	beq	r2,zero,b158 <___svfprintf_internal_r+0x16d0>
    a6e8:	d8c02d17 	ldw	r3,180(sp)
    a6ec:	002d883a 	mov	r22,zero
    a6f0:	1d000017 	ldw	r20,0(r3)
    a6f4:	18c00104 	addi	r3,r3,4
    a6f8:	d8c02d15 	stw	r3,180(sp)
    a6fc:	003f9c06 	br	a570 <__alt_data_end+0xf000a570>
    a700:	94800054 	ori	r18,r18,1
    a704:	bc400007 	ldb	r17,0(r23)
    a708:	003d3306 	br	9bd8 <__alt_data_end+0xf0009bd8>
    a70c:	38803fcc 	andi	r2,r7,255
    a710:	1080201c 	xori	r2,r2,128
    a714:	10bfe004 	addi	r2,r2,-128
    a718:	1002971e 	bne	r2,zero,b178 <___svfprintf_internal_r+0x16f0>
    a71c:	00c00044 	movi	r3,1
    a720:	01c00804 	movi	r7,32
    a724:	bc400007 	ldb	r17,0(r23)
    a728:	003d2b06 	br	9bd8 <__alt_data_end+0xf0009bd8>
    a72c:	18c03fcc 	andi	r3,r3,255
    a730:	183e2326 	beq	r3,zero,9fc0 <__alt_data_end+0xf0009fc0>
    a734:	d9c02785 	stb	r7,158(sp)
    a738:	003e2106 	br	9fc0 <__alt_data_end+0xf0009fc0>
    a73c:	bc400007 	ldb	r17,0(r23)
    a740:	8a430426 	beq	r17,r9,b354 <___svfprintf_internal_r+0x18cc>
    a744:	94800414 	ori	r18,r18,16
    a748:	003d2306 	br	9bd8 <__alt_data_end+0xf0009bd8>
    a74c:	18c03fcc 	andi	r3,r3,255
    a750:	18053f1e 	bne	r3,zero,bc50 <___svfprintf_internal_r+0x21c8>
    a754:	9080080c 	andi	r2,r18,32
    a758:	10028926 	beq	r2,zero,b180 <___svfprintf_internal_r+0x16f8>
    a75c:	d9402d17 	ldw	r5,180(sp)
    a760:	d9002f17 	ldw	r4,188(sp)
    a764:	28800017 	ldw	r2,0(r5)
    a768:	2007d7fa 	srai	r3,r4,31
    a76c:	29400104 	addi	r5,r5,4
    a770:	d9402d15 	stw	r5,180(sp)
    a774:	11000015 	stw	r4,0(r2)
    a778:	10c00115 	stw	r3,4(r2)
    a77c:	003ced06 	br	9b34 <__alt_data_end+0xf0009b34>
    a780:	94801014 	ori	r18,r18,64
    a784:	bc400007 	ldb	r17,0(r23)
    a788:	003d1306 	br	9bd8 <__alt_data_end+0xf0009bd8>
    a78c:	01020034 	movhi	r4,2048
    a790:	2100e604 	addi	r4,r4,920
    a794:	0039883a 	mov	fp,zero
    a798:	d9003a15 	stw	r4,232(sp)
    a79c:	04401e04 	movi	r17,120
    a7a0:	003f8206 	br	a5ac <__alt_data_end+0xf000a5ac>
    a7a4:	18c03fcc 	andi	r3,r3,255
    a7a8:	1805221e 	bne	r3,zero,bc34 <___svfprintf_internal_r+0x21ac>
    a7ac:	883d9526 	beq	r17,zero,9e04 <__alt_data_end+0xf0009e04>
    a7b0:	00c00044 	movi	r3,1
    a7b4:	d8c02a15 	stw	r3,168(sp)
    a7b8:	dc401405 	stb	r17,80(sp)
    a7bc:	d8002785 	stb	zero,158(sp)
    a7c0:	003f9406 	br	a614 <__alt_data_end+0xf000a614>
    a7c4:	01020034 	movhi	r4,2048
    a7c8:	2100e604 	addi	r4,r4,920
    a7cc:	d9003a15 	stw	r4,232(sp)
    a7d0:	d8c02d15 	stw	r3,180(sp)
    a7d4:	1025883a 	mov	r18,r2
    a7d8:	04401e04 	movi	r17,120
    a7dc:	a584b03a 	or	r2,r20,r22
    a7e0:	1000fa1e 	bne	r2,zero,abcc <___svfprintf_internal_r+0x1144>
    a7e4:	0039883a 	mov	fp,zero
    a7e8:	00800084 	movi	r2,2
    a7ec:	10803fcc 	andi	r2,r2,255
    a7f0:	00c00044 	movi	r3,1
    a7f4:	10c21626 	beq	r2,r3,b050 <___svfprintf_internal_r+0x15c8>
    a7f8:	00c00084 	movi	r3,2
    a7fc:	10fe301e 	bne	r2,r3,a0c0 <__alt_data_end+0xf000a0c0>
    a800:	003d7606 	br	9ddc <__alt_data_end+0xf0009ddc>
    a804:	d8c02017 	ldw	r3,128(sp)
    a808:	003e9506 	br	a260 <__alt_data_end+0xf000a260>
    a80c:	00801944 	movi	r2,101
    a810:	14407c0e 	bge	r2,r17,aa04 <___svfprintf_internal_r+0xf7c>
    a814:	d9003617 	ldw	r4,216(sp)
    a818:	d9403717 	ldw	r5,220(sp)
    a81c:	000d883a 	mov	r6,zero
    a820:	000f883a 	mov	r7,zero
    a824:	d8c03d15 	stw	r3,244(sp)
    a828:	da003e15 	stw	r8,248(sp)
    a82c:	00175d40 	call	175d4 <__eqdf2>
    a830:	d8c03d17 	ldw	r3,244(sp)
    a834:	da003e17 	ldw	r8,248(sp)
    a838:	1000f51e 	bne	r2,zero,ac10 <___svfprintf_internal_r+0x1188>
    a83c:	d8801f17 	ldw	r2,124(sp)
    a840:	01020034 	movhi	r4,2048
    a844:	2100ed04 	addi	r4,r4,948
    a848:	18c00044 	addi	r3,r3,1
    a84c:	10800044 	addi	r2,r2,1
    a850:	41000015 	stw	r4,0(r8)
    a854:	01000044 	movi	r4,1
    a858:	41000115 	stw	r4,4(r8)
    a85c:	d8c02015 	stw	r3,128(sp)
    a860:	d8801f15 	stw	r2,124(sp)
    a864:	010001c4 	movi	r4,7
    a868:	20826616 	blt	r4,r2,b204 <___svfprintf_internal_r+0x177c>
    a86c:	42000204 	addi	r8,r8,8
    a870:	d8802617 	ldw	r2,152(sp)
    a874:	d9403317 	ldw	r5,204(sp)
    a878:	11400216 	blt	r2,r5,a884 <___svfprintf_internal_r+0xdfc>
    a87c:	9080004c 	andi	r2,r18,1
    a880:	103ed526 	beq	r2,zero,a3d8 <__alt_data_end+0xf000a3d8>
    a884:	d8803817 	ldw	r2,224(sp)
    a888:	d9003417 	ldw	r4,208(sp)
    a88c:	d9403817 	ldw	r5,224(sp)
    a890:	1887883a 	add	r3,r3,r2
    a894:	d8801f17 	ldw	r2,124(sp)
    a898:	41000015 	stw	r4,0(r8)
    a89c:	41400115 	stw	r5,4(r8)
    a8a0:	10800044 	addi	r2,r2,1
    a8a4:	d8c02015 	stw	r3,128(sp)
    a8a8:	d8801f15 	stw	r2,124(sp)
    a8ac:	010001c4 	movi	r4,7
    a8b0:	2082af16 	blt	r4,r2,b370 <___svfprintf_internal_r+0x18e8>
    a8b4:	42000204 	addi	r8,r8,8
    a8b8:	d8803317 	ldw	r2,204(sp)
    a8bc:	143fffc4 	addi	r16,r2,-1
    a8c0:	043ec50e 	bge	zero,r16,a3d8 <__alt_data_end+0xf000a3d8>
    a8c4:	04400404 	movi	r17,16
    a8c8:	d8801f17 	ldw	r2,124(sp)
    a8cc:	8c00860e 	bge	r17,r16,aae8 <___svfprintf_internal_r+0x1060>
    a8d0:	01420034 	movhi	r5,2048
    a8d4:	2940ed84 	addi	r5,r5,950
    a8d8:	d9402b15 	stw	r5,172(sp)
    a8dc:	058001c4 	movi	r22,7
    a8e0:	dd002c17 	ldw	r20,176(sp)
    a8e4:	00000306 	br	a8f4 <___svfprintf_internal_r+0xe6c>
    a8e8:	42000204 	addi	r8,r8,8
    a8ec:	843ffc04 	addi	r16,r16,-16
    a8f0:	8c00800e 	bge	r17,r16,aaf4 <___svfprintf_internal_r+0x106c>
    a8f4:	18c00404 	addi	r3,r3,16
    a8f8:	10800044 	addi	r2,r2,1
    a8fc:	45400015 	stw	r21,0(r8)
    a900:	44400115 	stw	r17,4(r8)
    a904:	d8c02015 	stw	r3,128(sp)
    a908:	d8801f15 	stw	r2,124(sp)
    a90c:	b0bff60e 	bge	r22,r2,a8e8 <__alt_data_end+0xf000a8e8>
    a910:	d9801e04 	addi	r6,sp,120
    a914:	a00b883a 	mov	r5,r20
    a918:	9809883a 	mov	r4,r19
    a91c:	0012ef00 	call	12ef0 <__ssprint_r>
    a920:	103d3e1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    a924:	d8c02017 	ldw	r3,128(sp)
    a928:	d8801f17 	ldw	r2,124(sp)
    a92c:	da000404 	addi	r8,sp,16
    a930:	003fee06 	br	a8ec <__alt_data_end+0xf000a8ec>
    a934:	d9403117 	ldw	r5,196(sp)
    a938:	d8802a17 	ldw	r2,168(sp)
    a93c:	28adc83a 	sub	r22,r5,r2
    a940:	05be650e 	bge	zero,r22,a2d8 <__alt_data_end+0xf000a2d8>
    a944:	07000404 	movi	fp,16
    a948:	d8801f17 	ldw	r2,124(sp)
    a94c:	e583a20e 	bge	fp,r22,b7d8 <___svfprintf_internal_r+0x1d50>
    a950:	01420034 	movhi	r5,2048
    a954:	2940ed84 	addi	r5,r5,950
    a958:	dc403015 	stw	r17,192(sp)
    a95c:	d9402b15 	stw	r5,172(sp)
    a960:	b023883a 	mov	r17,r22
    a964:	050001c4 	movi	r20,7
    a968:	902d883a 	mov	r22,r18
    a96c:	8025883a 	mov	r18,r16
    a970:	dc002c17 	ldw	r16,176(sp)
    a974:	00000306 	br	a984 <___svfprintf_internal_r+0xefc>
    a978:	8c7ffc04 	addi	r17,r17,-16
    a97c:	42000204 	addi	r8,r8,8
    a980:	e440110e 	bge	fp,r17,a9c8 <___svfprintf_internal_r+0xf40>
    a984:	18c00404 	addi	r3,r3,16
    a988:	10800044 	addi	r2,r2,1
    a98c:	45400015 	stw	r21,0(r8)
    a990:	47000115 	stw	fp,4(r8)
    a994:	d8c02015 	stw	r3,128(sp)
    a998:	d8801f15 	stw	r2,124(sp)
    a99c:	a0bff60e 	bge	r20,r2,a978 <__alt_data_end+0xf000a978>
    a9a0:	d9801e04 	addi	r6,sp,120
    a9a4:	800b883a 	mov	r5,r16
    a9a8:	9809883a 	mov	r4,r19
    a9ac:	0012ef00 	call	12ef0 <__ssprint_r>
    a9b0:	103d1a1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    a9b4:	8c7ffc04 	addi	r17,r17,-16
    a9b8:	d8c02017 	ldw	r3,128(sp)
    a9bc:	d8801f17 	ldw	r2,124(sp)
    a9c0:	da000404 	addi	r8,sp,16
    a9c4:	e47fef16 	blt	fp,r17,a984 <__alt_data_end+0xf000a984>
    a9c8:	9021883a 	mov	r16,r18
    a9cc:	b025883a 	mov	r18,r22
    a9d0:	882d883a 	mov	r22,r17
    a9d4:	dc403017 	ldw	r17,192(sp)
    a9d8:	d9002b17 	ldw	r4,172(sp)
    a9dc:	1d87883a 	add	r3,r3,r22
    a9e0:	10800044 	addi	r2,r2,1
    a9e4:	41000015 	stw	r4,0(r8)
    a9e8:	45800115 	stw	r22,4(r8)
    a9ec:	d8c02015 	stw	r3,128(sp)
    a9f0:	d8801f15 	stw	r2,124(sp)
    a9f4:	010001c4 	movi	r4,7
    a9f8:	20819a16 	blt	r4,r2,b064 <___svfprintf_internal_r+0x15dc>
    a9fc:	42000204 	addi	r8,r8,8
    aa00:	003e3506 	br	a2d8 <__alt_data_end+0xf000a2d8>
    aa04:	d9403317 	ldw	r5,204(sp)
    aa08:	00800044 	movi	r2,1
    aa0c:	18c00044 	addi	r3,r3,1
    aa10:	1141710e 	bge	r2,r5,afd8 <___svfprintf_internal_r+0x1550>
    aa14:	dc401f17 	ldw	r17,124(sp)
    aa18:	00800044 	movi	r2,1
    aa1c:	40800115 	stw	r2,4(r8)
    aa20:	8c400044 	addi	r17,r17,1
    aa24:	44000015 	stw	r16,0(r8)
    aa28:	d8c02015 	stw	r3,128(sp)
    aa2c:	dc401f15 	stw	r17,124(sp)
    aa30:	008001c4 	movi	r2,7
    aa34:	14417416 	blt	r2,r17,b008 <___svfprintf_internal_r+0x1580>
    aa38:	42000204 	addi	r8,r8,8
    aa3c:	d8803817 	ldw	r2,224(sp)
    aa40:	d9003417 	ldw	r4,208(sp)
    aa44:	8c400044 	addi	r17,r17,1
    aa48:	10c7883a 	add	r3,r2,r3
    aa4c:	40800115 	stw	r2,4(r8)
    aa50:	41000015 	stw	r4,0(r8)
    aa54:	d8c02015 	stw	r3,128(sp)
    aa58:	dc401f15 	stw	r17,124(sp)
    aa5c:	008001c4 	movi	r2,7
    aa60:	14417216 	blt	r2,r17,b02c <___svfprintf_internal_r+0x15a4>
    aa64:	45800204 	addi	r22,r8,8
    aa68:	d9003617 	ldw	r4,216(sp)
    aa6c:	d9403717 	ldw	r5,220(sp)
    aa70:	000d883a 	mov	r6,zero
    aa74:	000f883a 	mov	r7,zero
    aa78:	d8c03d15 	stw	r3,244(sp)
    aa7c:	00175d40 	call	175d4 <__eqdf2>
    aa80:	d8c03d17 	ldw	r3,244(sp)
    aa84:	1000b326 	beq	r2,zero,ad54 <___svfprintf_internal_r+0x12cc>
    aa88:	d9403317 	ldw	r5,204(sp)
    aa8c:	84000044 	addi	r16,r16,1
    aa90:	8c400044 	addi	r17,r17,1
    aa94:	28bfffc4 	addi	r2,r5,-1
    aa98:	1887883a 	add	r3,r3,r2
    aa9c:	b0800115 	stw	r2,4(r22)
    aaa0:	b4000015 	stw	r16,0(r22)
    aaa4:	d8c02015 	stw	r3,128(sp)
    aaa8:	dc401f15 	stw	r17,124(sp)
    aaac:	008001c4 	movi	r2,7
    aab0:	1440d216 	blt	r2,r17,adfc <___svfprintf_internal_r+0x1374>
    aab4:	b5800204 	addi	r22,r22,8
    aab8:	d9003b17 	ldw	r4,236(sp)
    aabc:	df0022c4 	addi	fp,sp,139
    aac0:	8c400044 	addi	r17,r17,1
    aac4:	20c7883a 	add	r3,r4,r3
    aac8:	b7000015 	stw	fp,0(r22)
    aacc:	b1000115 	stw	r4,4(r22)
    aad0:	d8c02015 	stw	r3,128(sp)
    aad4:	dc401f15 	stw	r17,124(sp)
    aad8:	008001c4 	movi	r2,7
    aadc:	14400e16 	blt	r2,r17,ab18 <___svfprintf_internal_r+0x1090>
    aae0:	b2000204 	addi	r8,r22,8
    aae4:	003e3c06 	br	a3d8 <__alt_data_end+0xf000a3d8>
    aae8:	01020034 	movhi	r4,2048
    aaec:	2100ed84 	addi	r4,r4,950
    aaf0:	d9002b15 	stw	r4,172(sp)
    aaf4:	d9002b17 	ldw	r4,172(sp)
    aaf8:	1c07883a 	add	r3,r3,r16
    aafc:	44000115 	stw	r16,4(r8)
    ab00:	41000015 	stw	r4,0(r8)
    ab04:	10800044 	addi	r2,r2,1
    ab08:	d8c02015 	stw	r3,128(sp)
    ab0c:	d8801f15 	stw	r2,124(sp)
    ab10:	010001c4 	movi	r4,7
    ab14:	20be2f0e 	bge	r4,r2,a3d4 <__alt_data_end+0xf000a3d4>
    ab18:	d9402c17 	ldw	r5,176(sp)
    ab1c:	d9801e04 	addi	r6,sp,120
    ab20:	9809883a 	mov	r4,r19
    ab24:	0012ef00 	call	12ef0 <__ssprint_r>
    ab28:	103cbc1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    ab2c:	d8c02017 	ldw	r3,128(sp)
    ab30:	da000404 	addi	r8,sp,16
    ab34:	003e2806 	br	a3d8 <__alt_data_end+0xf000a3d8>
    ab38:	d9402c17 	ldw	r5,176(sp)
    ab3c:	d9801e04 	addi	r6,sp,120
    ab40:	9809883a 	mov	r4,r19
    ab44:	0012ef00 	call	12ef0 <__ssprint_r>
    ab48:	103e5f26 	beq	r2,zero,a4c8 <__alt_data_end+0xf000a4c8>
    ab4c:	003cb306 	br	9e1c <__alt_data_end+0xf0009e1c>
    ab50:	d9402c17 	ldw	r5,176(sp)
    ab54:	d9801e04 	addi	r6,sp,120
    ab58:	9809883a 	mov	r4,r19
    ab5c:	0012ef00 	call	12ef0 <__ssprint_r>
    ab60:	103cae1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    ab64:	d8c02017 	ldw	r3,128(sp)
    ab68:	da000404 	addi	r8,sp,16
    ab6c:	003e0d06 	br	a3a4 <__alt_data_end+0xf000a3a4>
    ab70:	d9402c17 	ldw	r5,176(sp)
    ab74:	d9801e04 	addi	r6,sp,120
    ab78:	9809883a 	mov	r4,r19
    ab7c:	0012ef00 	call	12ef0 <__ssprint_r>
    ab80:	103ca61e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    ab84:	d8c02017 	ldw	r3,128(sp)
    ab88:	da000404 	addi	r8,sp,16
    ab8c:	003dc106 	br	a294 <__alt_data_end+0xf000a294>
    ab90:	d9402c17 	ldw	r5,176(sp)
    ab94:	d9801e04 	addi	r6,sp,120
    ab98:	9809883a 	mov	r4,r19
    ab9c:	0012ef00 	call	12ef0 <__ssprint_r>
    aba0:	103c9e1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    aba4:	d8c02017 	ldw	r3,128(sp)
    aba8:	da000404 	addi	r8,sp,16
    abac:	003dc706 	br	a2cc <__alt_data_end+0xf000a2cc>
    abb0:	d8802917 	ldw	r2,164(sp)
    abb4:	d8002785 	stb	zero,158(sp)
    abb8:	103f0816 	blt	r2,zero,a7dc <__alt_data_end+0xf000a7dc>
    abbc:	00ffdfc4 	movi	r3,-129
    abc0:	a584b03a 	or	r2,r20,r22
    abc4:	90e4703a 	and	r18,r18,r3
    abc8:	103c8126 	beq	r2,zero,9dd0 <__alt_data_end+0xf0009dd0>
    abcc:	0039883a 	mov	fp,zero
    abd0:	003e7606 	br	a5ac <__alt_data_end+0xf000a5ac>
    abd4:	9080040c 	andi	r2,r18,16
    abd8:	10013d26 	beq	r2,zero,b0d0 <___svfprintf_internal_r+0x1648>
    abdc:	d9002d17 	ldw	r4,180(sp)
    abe0:	d9402917 	ldw	r5,164(sp)
    abe4:	d8002785 	stb	zero,158(sp)
    abe8:	20800104 	addi	r2,r4,4
    abec:	25000017 	ldw	r20,0(r4)
    abf0:	002d883a 	mov	r22,zero
    abf4:	28013f16 	blt	r5,zero,b0f4 <___svfprintf_internal_r+0x166c>
    abf8:	00ffdfc4 	movi	r3,-129
    abfc:	d8802d15 	stw	r2,180(sp)
    ac00:	90e4703a 	and	r18,r18,r3
    ac04:	a03d2b26 	beq	r20,zero,a0b4 <__alt_data_end+0xf000a0b4>
    ac08:	0039883a 	mov	fp,zero
    ac0c:	003d2e06 	br	a0c8 <__alt_data_end+0xf000a0c8>
    ac10:	dc402617 	ldw	r17,152(sp)
    ac14:	0441830e 	bge	zero,r17,b224 <___svfprintf_internal_r+0x179c>
    ac18:	dc403217 	ldw	r17,200(sp)
    ac1c:	d8803317 	ldw	r2,204(sp)
    ac20:	1440010e 	bge	r2,r17,ac28 <___svfprintf_internal_r+0x11a0>
    ac24:	1023883a 	mov	r17,r2
    ac28:	04400a0e 	bge	zero,r17,ac54 <___svfprintf_internal_r+0x11cc>
    ac2c:	d8801f17 	ldw	r2,124(sp)
    ac30:	1c47883a 	add	r3,r3,r17
    ac34:	44000015 	stw	r16,0(r8)
    ac38:	10800044 	addi	r2,r2,1
    ac3c:	44400115 	stw	r17,4(r8)
    ac40:	d8c02015 	stw	r3,128(sp)
    ac44:	d8801f15 	stw	r2,124(sp)
    ac48:	010001c4 	movi	r4,7
    ac4c:	20827516 	blt	r4,r2,b624 <___svfprintf_internal_r+0x1b9c>
    ac50:	42000204 	addi	r8,r8,8
    ac54:	88027b16 	blt	r17,zero,b644 <___svfprintf_internal_r+0x1bbc>
    ac58:	d9003217 	ldw	r4,200(sp)
    ac5c:	2463c83a 	sub	r17,r4,r17
    ac60:	0440990e 	bge	zero,r17,aec8 <___svfprintf_internal_r+0x1440>
    ac64:	05800404 	movi	r22,16
    ac68:	d8801f17 	ldw	r2,124(sp)
    ac6c:	b441530e 	bge	r22,r17,b1bc <___svfprintf_internal_r+0x1734>
    ac70:	01020034 	movhi	r4,2048
    ac74:	2100ed84 	addi	r4,r4,950
    ac78:	d9002b15 	stw	r4,172(sp)
    ac7c:	070001c4 	movi	fp,7
    ac80:	dd002c17 	ldw	r20,176(sp)
    ac84:	00000306 	br	ac94 <___svfprintf_internal_r+0x120c>
    ac88:	42000204 	addi	r8,r8,8
    ac8c:	8c7ffc04 	addi	r17,r17,-16
    ac90:	b4414d0e 	bge	r22,r17,b1c8 <___svfprintf_internal_r+0x1740>
    ac94:	18c00404 	addi	r3,r3,16
    ac98:	10800044 	addi	r2,r2,1
    ac9c:	45400015 	stw	r21,0(r8)
    aca0:	45800115 	stw	r22,4(r8)
    aca4:	d8c02015 	stw	r3,128(sp)
    aca8:	d8801f15 	stw	r2,124(sp)
    acac:	e0bff60e 	bge	fp,r2,ac88 <__alt_data_end+0xf000ac88>
    acb0:	d9801e04 	addi	r6,sp,120
    acb4:	a00b883a 	mov	r5,r20
    acb8:	9809883a 	mov	r4,r19
    acbc:	0012ef00 	call	12ef0 <__ssprint_r>
    acc0:	103c561e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    acc4:	d8c02017 	ldw	r3,128(sp)
    acc8:	d8801f17 	ldw	r2,124(sp)
    accc:	da000404 	addi	r8,sp,16
    acd0:	003fee06 	br	ac8c <__alt_data_end+0xf000ac8c>
    acd4:	d9402c17 	ldw	r5,176(sp)
    acd8:	d9801e04 	addi	r6,sp,120
    acdc:	9809883a 	mov	r4,r19
    ace0:	0012ef00 	call	12ef0 <__ssprint_r>
    ace4:	103c4d1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    ace8:	d8c02017 	ldw	r3,128(sp)
    acec:	df002787 	ldb	fp,158(sp)
    acf0:	da000404 	addi	r8,sp,16
    acf4:	003d5a06 	br	a260 <__alt_data_end+0xf000a260>
    acf8:	9080040c 	andi	r2,r18,16
    acfc:	10005c26 	beq	r2,zero,ae70 <___svfprintf_internal_r+0x13e8>
    ad00:	d9402d17 	ldw	r5,180(sp)
    ad04:	d8c02917 	ldw	r3,164(sp)
    ad08:	d8002785 	stb	zero,158(sp)
    ad0c:	28800104 	addi	r2,r5,4
    ad10:	2d000017 	ldw	r20,0(r5)
    ad14:	002d883a 	mov	r22,zero
    ad18:	18005e16 	blt	r3,zero,ae94 <___svfprintf_internal_r+0x140c>
    ad1c:	00ffdfc4 	movi	r3,-129
    ad20:	d8802d15 	stw	r2,180(sp)
    ad24:	90e4703a 	and	r18,r18,r3
    ad28:	0039883a 	mov	fp,zero
    ad2c:	a03dfe26 	beq	r20,zero,a528 <__alt_data_end+0xf000a528>
    ad30:	00800244 	movi	r2,9
    ad34:	153cb336 	bltu	r2,r20,a004 <__alt_data_end+0xf000a004>
    ad38:	a5000c04 	addi	r20,r20,48
    ad3c:	dc001dc4 	addi	r16,sp,119
    ad40:	dd001dc5 	stb	r20,119(sp)
    ad44:	d8c02817 	ldw	r3,160(sp)
    ad48:	1c07c83a 	sub	r3,r3,r16
    ad4c:	d8c02e15 	stw	r3,184(sp)
    ad50:	003cf506 	br	a128 <__alt_data_end+0xf000a128>
    ad54:	d8803317 	ldw	r2,204(sp)
    ad58:	143fffc4 	addi	r16,r2,-1
    ad5c:	043f560e 	bge	zero,r16,aab8 <__alt_data_end+0xf000aab8>
    ad60:	07000404 	movi	fp,16
    ad64:	e403530e 	bge	fp,r16,bab4 <___svfprintf_internal_r+0x202c>
    ad68:	01420034 	movhi	r5,2048
    ad6c:	2940ed84 	addi	r5,r5,950
    ad70:	d9402b15 	stw	r5,172(sp)
    ad74:	01c001c4 	movi	r7,7
    ad78:	dd002c17 	ldw	r20,176(sp)
    ad7c:	00000306 	br	ad8c <___svfprintf_internal_r+0x1304>
    ad80:	843ffc04 	addi	r16,r16,-16
    ad84:	b5800204 	addi	r22,r22,8
    ad88:	e400130e 	bge	fp,r16,add8 <___svfprintf_internal_r+0x1350>
    ad8c:	18c00404 	addi	r3,r3,16
    ad90:	8c400044 	addi	r17,r17,1
    ad94:	b5400015 	stw	r21,0(r22)
    ad98:	b7000115 	stw	fp,4(r22)
    ad9c:	d8c02015 	stw	r3,128(sp)
    ada0:	dc401f15 	stw	r17,124(sp)
    ada4:	3c7ff60e 	bge	r7,r17,ad80 <__alt_data_end+0xf000ad80>
    ada8:	d9801e04 	addi	r6,sp,120
    adac:	a00b883a 	mov	r5,r20
    adb0:	9809883a 	mov	r4,r19
    adb4:	d9c03d15 	stw	r7,244(sp)
    adb8:	0012ef00 	call	12ef0 <__ssprint_r>
    adbc:	d9c03d17 	ldw	r7,244(sp)
    adc0:	103c161e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    adc4:	843ffc04 	addi	r16,r16,-16
    adc8:	d8c02017 	ldw	r3,128(sp)
    adcc:	dc401f17 	ldw	r17,124(sp)
    add0:	dd800404 	addi	r22,sp,16
    add4:	e43fed16 	blt	fp,r16,ad8c <__alt_data_end+0xf000ad8c>
    add8:	d8802b17 	ldw	r2,172(sp)
    addc:	1c07883a 	add	r3,r3,r16
    ade0:	8c400044 	addi	r17,r17,1
    ade4:	b0800015 	stw	r2,0(r22)
    ade8:	b4000115 	stw	r16,4(r22)
    adec:	d8c02015 	stw	r3,128(sp)
    adf0:	dc401f15 	stw	r17,124(sp)
    adf4:	008001c4 	movi	r2,7
    adf8:	147f2e0e 	bge	r2,r17,aab4 <__alt_data_end+0xf000aab4>
    adfc:	d9402c17 	ldw	r5,176(sp)
    ae00:	d9801e04 	addi	r6,sp,120
    ae04:	9809883a 	mov	r4,r19
    ae08:	0012ef00 	call	12ef0 <__ssprint_r>
    ae0c:	103c031e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    ae10:	d8c02017 	ldw	r3,128(sp)
    ae14:	dc401f17 	ldw	r17,124(sp)
    ae18:	dd800404 	addi	r22,sp,16
    ae1c:	003f2606 	br	aab8 <__alt_data_end+0xf000aab8>
    ae20:	9080040c 	andi	r2,r18,16
    ae24:	1000c326 	beq	r2,zero,b134 <___svfprintf_internal_r+0x16ac>
    ae28:	d8802d17 	ldw	r2,180(sp)
    ae2c:	15000017 	ldw	r20,0(r2)
    ae30:	10800104 	addi	r2,r2,4
    ae34:	d8802d15 	stw	r2,180(sp)
    ae38:	a02dd7fa 	srai	r22,r20,31
    ae3c:	b005883a 	mov	r2,r22
    ae40:	103c680e 	bge	r2,zero,9fe4 <__alt_data_end+0xf0009fe4>
    ae44:	0529c83a 	sub	r20,zero,r20
    ae48:	a004c03a 	cmpne	r2,r20,zero
    ae4c:	05adc83a 	sub	r22,zero,r22
    ae50:	b0adc83a 	sub	r22,r22,r2
    ae54:	d8802917 	ldw	r2,164(sp)
    ae58:	07000b44 	movi	fp,45
    ae5c:	df002785 	stb	fp,158(sp)
    ae60:	10022e16 	blt	r2,zero,b71c <___svfprintf_internal_r+0x1c94>
    ae64:	00bfdfc4 	movi	r2,-129
    ae68:	90a4703a 	and	r18,r18,r2
    ae6c:	003c6406 	br	a000 <__alt_data_end+0xf000a000>
    ae70:	9080100c 	andi	r2,r18,64
    ae74:	d8002785 	stb	zero,158(sp)
    ae78:	10012526 	beq	r2,zero,b310 <___svfprintf_internal_r+0x1888>
    ae7c:	d9002d17 	ldw	r4,180(sp)
    ae80:	d9402917 	ldw	r5,164(sp)
    ae84:	002d883a 	mov	r22,zero
    ae88:	20800104 	addi	r2,r4,4
    ae8c:	2500000b 	ldhu	r20,0(r4)
    ae90:	283fa20e 	bge	r5,zero,ad1c <__alt_data_end+0xf000ad1c>
    ae94:	d8802d15 	stw	r2,180(sp)
    ae98:	0039883a 	mov	fp,zero
    ae9c:	a584b03a 	or	r2,r20,r22
    aea0:	103c571e 	bne	r2,zero,a000 <__alt_data_end+0xf000a000>
    aea4:	00800044 	movi	r2,1
    aea8:	003e5006 	br	a7ec <__alt_data_end+0xf000a7ec>
    aeac:	d9402c17 	ldw	r5,176(sp)
    aeb0:	d9801e04 	addi	r6,sp,120
    aeb4:	9809883a 	mov	r4,r19
    aeb8:	0012ef00 	call	12ef0 <__ssprint_r>
    aebc:	103bd71e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    aec0:	d8c02017 	ldw	r3,128(sp)
    aec4:	da000404 	addi	r8,sp,16
    aec8:	d9003217 	ldw	r4,200(sp)
    aecc:	d8802617 	ldw	r2,152(sp)
    aed0:	d9403317 	ldw	r5,204(sp)
    aed4:	8123883a 	add	r17,r16,r4
    aed8:	11400216 	blt	r2,r5,aee4 <___svfprintf_internal_r+0x145c>
    aedc:	9100004c 	andi	r4,r18,1
    aee0:	20000d26 	beq	r4,zero,af18 <___svfprintf_internal_r+0x1490>
    aee4:	d9003817 	ldw	r4,224(sp)
    aee8:	d9403417 	ldw	r5,208(sp)
    aeec:	1907883a 	add	r3,r3,r4
    aef0:	d9001f17 	ldw	r4,124(sp)
    aef4:	41400015 	stw	r5,0(r8)
    aef8:	d9403817 	ldw	r5,224(sp)
    aefc:	21000044 	addi	r4,r4,1
    af00:	d8c02015 	stw	r3,128(sp)
    af04:	41400115 	stw	r5,4(r8)
    af08:	d9001f15 	stw	r4,124(sp)
    af0c:	014001c4 	movi	r5,7
    af10:	2901dc16 	blt	r5,r4,b684 <___svfprintf_internal_r+0x1bfc>
    af14:	42000204 	addi	r8,r8,8
    af18:	d9003317 	ldw	r4,204(sp)
    af1c:	8121883a 	add	r16,r16,r4
    af20:	2085c83a 	sub	r2,r4,r2
    af24:	8461c83a 	sub	r16,r16,r17
    af28:	1400010e 	bge	r2,r16,af30 <___svfprintf_internal_r+0x14a8>
    af2c:	1021883a 	mov	r16,r2
    af30:	04000a0e 	bge	zero,r16,af5c <___svfprintf_internal_r+0x14d4>
    af34:	d9001f17 	ldw	r4,124(sp)
    af38:	1c07883a 	add	r3,r3,r16
    af3c:	44400015 	stw	r17,0(r8)
    af40:	21000044 	addi	r4,r4,1
    af44:	44000115 	stw	r16,4(r8)
    af48:	d8c02015 	stw	r3,128(sp)
    af4c:	d9001f15 	stw	r4,124(sp)
    af50:	014001c4 	movi	r5,7
    af54:	2901e616 	blt	r5,r4,b6f0 <___svfprintf_internal_r+0x1c68>
    af58:	42000204 	addi	r8,r8,8
    af5c:	8001f616 	blt	r16,zero,b738 <___svfprintf_internal_r+0x1cb0>
    af60:	1421c83a 	sub	r16,r2,r16
    af64:	043d1c0e 	bge	zero,r16,a3d8 <__alt_data_end+0xf000a3d8>
    af68:	04400404 	movi	r17,16
    af6c:	d8801f17 	ldw	r2,124(sp)
    af70:	8c3edd0e 	bge	r17,r16,aae8 <__alt_data_end+0xf000aae8>
    af74:	01420034 	movhi	r5,2048
    af78:	2940ed84 	addi	r5,r5,950
    af7c:	d9402b15 	stw	r5,172(sp)
    af80:	058001c4 	movi	r22,7
    af84:	dd002c17 	ldw	r20,176(sp)
    af88:	00000306 	br	af98 <___svfprintf_internal_r+0x1510>
    af8c:	42000204 	addi	r8,r8,8
    af90:	843ffc04 	addi	r16,r16,-16
    af94:	8c3ed70e 	bge	r17,r16,aaf4 <__alt_data_end+0xf000aaf4>
    af98:	18c00404 	addi	r3,r3,16
    af9c:	10800044 	addi	r2,r2,1
    afa0:	45400015 	stw	r21,0(r8)
    afa4:	44400115 	stw	r17,4(r8)
    afa8:	d8c02015 	stw	r3,128(sp)
    afac:	d8801f15 	stw	r2,124(sp)
    afb0:	b0bff60e 	bge	r22,r2,af8c <__alt_data_end+0xf000af8c>
    afb4:	d9801e04 	addi	r6,sp,120
    afb8:	a00b883a 	mov	r5,r20
    afbc:	9809883a 	mov	r4,r19
    afc0:	0012ef00 	call	12ef0 <__ssprint_r>
    afc4:	103b951e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    afc8:	d8c02017 	ldw	r3,128(sp)
    afcc:	d8801f17 	ldw	r2,124(sp)
    afd0:	da000404 	addi	r8,sp,16
    afd4:	003fee06 	br	af90 <__alt_data_end+0xf000af90>
    afd8:	9088703a 	and	r4,r18,r2
    afdc:	203e8d1e 	bne	r4,zero,aa14 <__alt_data_end+0xf000aa14>
    afe0:	dc401f17 	ldw	r17,124(sp)
    afe4:	40800115 	stw	r2,4(r8)
    afe8:	44000015 	stw	r16,0(r8)
    afec:	8c400044 	addi	r17,r17,1
    aff0:	d8c02015 	stw	r3,128(sp)
    aff4:	dc401f15 	stw	r17,124(sp)
    aff8:	008001c4 	movi	r2,7
    affc:	147f7f16 	blt	r2,r17,adfc <__alt_data_end+0xf000adfc>
    b000:	45800204 	addi	r22,r8,8
    b004:	003eac06 	br	aab8 <__alt_data_end+0xf000aab8>
    b008:	d9402c17 	ldw	r5,176(sp)
    b00c:	d9801e04 	addi	r6,sp,120
    b010:	9809883a 	mov	r4,r19
    b014:	0012ef00 	call	12ef0 <__ssprint_r>
    b018:	103b801e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b01c:	d8c02017 	ldw	r3,128(sp)
    b020:	dc401f17 	ldw	r17,124(sp)
    b024:	da000404 	addi	r8,sp,16
    b028:	003e8406 	br	aa3c <__alt_data_end+0xf000aa3c>
    b02c:	d9402c17 	ldw	r5,176(sp)
    b030:	d9801e04 	addi	r6,sp,120
    b034:	9809883a 	mov	r4,r19
    b038:	0012ef00 	call	12ef0 <__ssprint_r>
    b03c:	103b771e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b040:	d8c02017 	ldw	r3,128(sp)
    b044:	dc401f17 	ldw	r17,124(sp)
    b048:	dd800404 	addi	r22,sp,16
    b04c:	003e8606 	br	aa68 <__alt_data_end+0xf000aa68>
    b050:	0029883a 	mov	r20,zero
    b054:	a5000c04 	addi	r20,r20,48
    b058:	dc001dc4 	addi	r16,sp,119
    b05c:	dd001dc5 	stb	r20,119(sp)
    b060:	003f3806 	br	ad44 <__alt_data_end+0xf000ad44>
    b064:	d9402c17 	ldw	r5,176(sp)
    b068:	d9801e04 	addi	r6,sp,120
    b06c:	9809883a 	mov	r4,r19
    b070:	0012ef00 	call	12ef0 <__ssprint_r>
    b074:	103b691e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b078:	d8c02017 	ldw	r3,128(sp)
    b07c:	da000404 	addi	r8,sp,16
    b080:	003c9506 	br	a2d8 <__alt_data_end+0xf000a2d8>
    b084:	d9003617 	ldw	r4,216(sp)
    b088:	d9403717 	ldw	r5,220(sp)
    b08c:	da003e15 	stw	r8,248(sp)
    b090:	0012c100 	call	12c10 <__fpclassifyd>
    b094:	da003e17 	ldw	r8,248(sp)
    b098:	1000bd1e 	bne	r2,zero,b390 <___svfprintf_internal_r+0x1908>
    b09c:	008011c4 	movi	r2,71
    b0a0:	14411e0e 	bge	r2,r17,b51c <___svfprintf_internal_r+0x1a94>
    b0a4:	04020034 	movhi	r16,2048
    b0a8:	8400e004 	addi	r16,r16,896
    b0ac:	00c000c4 	movi	r3,3
    b0b0:	00bfdfc4 	movi	r2,-129
    b0b4:	d8c02a15 	stw	r3,168(sp)
    b0b8:	90a4703a 	and	r18,r18,r2
    b0bc:	df002783 	ldbu	fp,158(sp)
    b0c0:	d8c02e15 	stw	r3,184(sp)
    b0c4:	d8002915 	stw	zero,164(sp)
    b0c8:	d8003215 	stw	zero,200(sp)
    b0cc:	003c1c06 	br	a140 <__alt_data_end+0xf000a140>
    b0d0:	9080100c 	andi	r2,r18,64
    b0d4:	d8002785 	stb	zero,158(sp)
    b0d8:	10009426 	beq	r2,zero,b32c <___svfprintf_internal_r+0x18a4>
    b0dc:	d8c02d17 	ldw	r3,180(sp)
    b0e0:	d9002917 	ldw	r4,164(sp)
    b0e4:	002d883a 	mov	r22,zero
    b0e8:	18800104 	addi	r2,r3,4
    b0ec:	1d00000b 	ldhu	r20,0(r3)
    b0f0:	203ec10e 	bge	r4,zero,abf8 <__alt_data_end+0xf000abf8>
    b0f4:	a586b03a 	or	r3,r20,r22
    b0f8:	d8802d15 	stw	r2,180(sp)
    b0fc:	183ec21e 	bne	r3,zero,ac08 <__alt_data_end+0xf000ac08>
    b100:	0039883a 	mov	fp,zero
    b104:	0005883a 	mov	r2,zero
    b108:	003db806 	br	a7ec <__alt_data_end+0xf000a7ec>
    b10c:	d8802d17 	ldw	r2,180(sp)
    b110:	d8c02d17 	ldw	r3,180(sp)
    b114:	d9002d17 	ldw	r4,180(sp)
    b118:	10800017 	ldw	r2,0(r2)
    b11c:	18c00117 	ldw	r3,4(r3)
    b120:	21000204 	addi	r4,r4,8
    b124:	d8803615 	stw	r2,216(sp)
    b128:	d8c03715 	stw	r3,220(sp)
    b12c:	d9002d15 	stw	r4,180(sp)
    b130:	003b8206 	br	9f3c <__alt_data_end+0xf0009f3c>
    b134:	9080100c 	andi	r2,r18,64
    b138:	10010726 	beq	r2,zero,b558 <___svfprintf_internal_r+0x1ad0>
    b13c:	d8c02d17 	ldw	r3,180(sp)
    b140:	1d00000f 	ldh	r20,0(r3)
    b144:	18c00104 	addi	r3,r3,4
    b148:	d8c02d15 	stw	r3,180(sp)
    b14c:	a02dd7fa 	srai	r22,r20,31
    b150:	b005883a 	mov	r2,r22
    b154:	003ba206 	br	9fe0 <__alt_data_end+0xf0009fe0>
    b158:	9080100c 	andi	r2,r18,64
    b15c:	10010526 	beq	r2,zero,b574 <___svfprintf_internal_r+0x1aec>
    b160:	d9002d17 	ldw	r4,180(sp)
    b164:	002d883a 	mov	r22,zero
    b168:	2500000b 	ldhu	r20,0(r4)
    b16c:	21000104 	addi	r4,r4,4
    b170:	d9002d15 	stw	r4,180(sp)
    b174:	003cfe06 	br	a570 <__alt_data_end+0xf000a570>
    b178:	bc400007 	ldb	r17,0(r23)
    b17c:	003a9606 	br	9bd8 <__alt_data_end+0xf0009bd8>
    b180:	9080040c 	andi	r2,r18,16
    b184:	10010126 	beq	r2,zero,b58c <___svfprintf_internal_r+0x1b04>
    b188:	d9402d17 	ldw	r5,180(sp)
    b18c:	d8c02f17 	ldw	r3,188(sp)
    b190:	28800017 	ldw	r2,0(r5)
    b194:	29400104 	addi	r5,r5,4
    b198:	d9402d15 	stw	r5,180(sp)
    b19c:	10c00015 	stw	r3,0(r2)
    b1a0:	003a6406 	br	9b34 <__alt_data_end+0xf0009b34>
    b1a4:	d9002917 	ldw	r4,164(sp)
    b1a8:	d8002785 	stb	zero,158(sp)
    b1ac:	203d8d16 	blt	r4,zero,a7e4 <__alt_data_end+0xf000a7e4>
    b1b0:	00bfdfc4 	movi	r2,-129
    b1b4:	90a4703a 	and	r18,r18,r2
    b1b8:	003b0506 	br	9dd0 <__alt_data_end+0xf0009dd0>
    b1bc:	01420034 	movhi	r5,2048
    b1c0:	2940ed84 	addi	r5,r5,950
    b1c4:	d9402b15 	stw	r5,172(sp)
    b1c8:	d9402b17 	ldw	r5,172(sp)
    b1cc:	1c47883a 	add	r3,r3,r17
    b1d0:	10800044 	addi	r2,r2,1
    b1d4:	41400015 	stw	r5,0(r8)
    b1d8:	44400115 	stw	r17,4(r8)
    b1dc:	d8c02015 	stw	r3,128(sp)
    b1e0:	d8801f15 	stw	r2,124(sp)
    b1e4:	010001c4 	movi	r4,7
    b1e8:	20bf3016 	blt	r4,r2,aeac <__alt_data_end+0xf000aeac>
    b1ec:	42000204 	addi	r8,r8,8
    b1f0:	003f3506 	br	aec8 <__alt_data_end+0xf000aec8>
    b1f4:	01020034 	movhi	r4,2048
    b1f8:	2100ed84 	addi	r4,r4,950
    b1fc:	d9002b15 	stw	r4,172(sp)
    b200:	003c5e06 	br	a37c <__alt_data_end+0xf000a37c>
    b204:	d9402c17 	ldw	r5,176(sp)
    b208:	d9801e04 	addi	r6,sp,120
    b20c:	9809883a 	mov	r4,r19
    b210:	0012ef00 	call	12ef0 <__ssprint_r>
    b214:	103b011e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b218:	d8c02017 	ldw	r3,128(sp)
    b21c:	da000404 	addi	r8,sp,16
    b220:	003d9306 	br	a870 <__alt_data_end+0xf000a870>
    b224:	d8801f17 	ldw	r2,124(sp)
    b228:	01420034 	movhi	r5,2048
    b22c:	01000044 	movi	r4,1
    b230:	18c00044 	addi	r3,r3,1
    b234:	10800044 	addi	r2,r2,1
    b238:	2940ed04 	addi	r5,r5,948
    b23c:	41000115 	stw	r4,4(r8)
    b240:	41400015 	stw	r5,0(r8)
    b244:	d8c02015 	stw	r3,128(sp)
    b248:	d8801f15 	stw	r2,124(sp)
    b24c:	010001c4 	movi	r4,7
    b250:	2080b516 	blt	r4,r2,b528 <___svfprintf_internal_r+0x1aa0>
    b254:	42000204 	addi	r8,r8,8
    b258:	8800041e 	bne	r17,zero,b26c <___svfprintf_internal_r+0x17e4>
    b25c:	d8803317 	ldw	r2,204(sp)
    b260:	1000021e 	bne	r2,zero,b26c <___svfprintf_internal_r+0x17e4>
    b264:	9080004c 	andi	r2,r18,1
    b268:	103c5b26 	beq	r2,zero,a3d8 <__alt_data_end+0xf000a3d8>
    b26c:	d9003817 	ldw	r4,224(sp)
    b270:	d8801f17 	ldw	r2,124(sp)
    b274:	d9403417 	ldw	r5,208(sp)
    b278:	20c7883a 	add	r3,r4,r3
    b27c:	10800044 	addi	r2,r2,1
    b280:	41000115 	stw	r4,4(r8)
    b284:	41400015 	stw	r5,0(r8)
    b288:	d8c02015 	stw	r3,128(sp)
    b28c:	d8801f15 	stw	r2,124(sp)
    b290:	010001c4 	movi	r4,7
    b294:	20818016 	blt	r4,r2,b898 <___svfprintf_internal_r+0x1e10>
    b298:	42000204 	addi	r8,r8,8
    b29c:	0463c83a 	sub	r17,zero,r17
    b2a0:	0440cb0e 	bge	zero,r17,b5d0 <___svfprintf_internal_r+0x1b48>
    b2a4:	05800404 	movi	r22,16
    b2a8:	b440e80e 	bge	r22,r17,b64c <___svfprintf_internal_r+0x1bc4>
    b2ac:	01420034 	movhi	r5,2048
    b2b0:	2940ed84 	addi	r5,r5,950
    b2b4:	d9402b15 	stw	r5,172(sp)
    b2b8:	070001c4 	movi	fp,7
    b2bc:	dd002c17 	ldw	r20,176(sp)
    b2c0:	00000306 	br	b2d0 <___svfprintf_internal_r+0x1848>
    b2c4:	42000204 	addi	r8,r8,8
    b2c8:	8c7ffc04 	addi	r17,r17,-16
    b2cc:	b440e20e 	bge	r22,r17,b658 <___svfprintf_internal_r+0x1bd0>
    b2d0:	18c00404 	addi	r3,r3,16
    b2d4:	10800044 	addi	r2,r2,1
    b2d8:	45400015 	stw	r21,0(r8)
    b2dc:	45800115 	stw	r22,4(r8)
    b2e0:	d8c02015 	stw	r3,128(sp)
    b2e4:	d8801f15 	stw	r2,124(sp)
    b2e8:	e0bff60e 	bge	fp,r2,b2c4 <__alt_data_end+0xf000b2c4>
    b2ec:	d9801e04 	addi	r6,sp,120
    b2f0:	a00b883a 	mov	r5,r20
    b2f4:	9809883a 	mov	r4,r19
    b2f8:	0012ef00 	call	12ef0 <__ssprint_r>
    b2fc:	103ac71e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b300:	d8c02017 	ldw	r3,128(sp)
    b304:	d8801f17 	ldw	r2,124(sp)
    b308:	da000404 	addi	r8,sp,16
    b30c:	003fee06 	br	b2c8 <__alt_data_end+0xf000b2c8>
    b310:	d8c02d17 	ldw	r3,180(sp)
    b314:	d9002917 	ldw	r4,164(sp)
    b318:	002d883a 	mov	r22,zero
    b31c:	18800104 	addi	r2,r3,4
    b320:	1d000017 	ldw	r20,0(r3)
    b324:	203e7d0e 	bge	r4,zero,ad1c <__alt_data_end+0xf000ad1c>
    b328:	003eda06 	br	ae94 <__alt_data_end+0xf000ae94>
    b32c:	d9402d17 	ldw	r5,180(sp)
    b330:	d8c02917 	ldw	r3,164(sp)
    b334:	002d883a 	mov	r22,zero
    b338:	28800104 	addi	r2,r5,4
    b33c:	2d000017 	ldw	r20,0(r5)
    b340:	183e2d0e 	bge	r3,zero,abf8 <__alt_data_end+0xf000abf8>
    b344:	003f6b06 	br	b0f4 <__alt_data_end+0xf000b0f4>
    b348:	d8c02d15 	stw	r3,180(sp)
    b34c:	0039883a 	mov	fp,zero
    b350:	003ed206 	br	ae9c <__alt_data_end+0xf000ae9c>
    b354:	bc400043 	ldbu	r17,1(r23)
    b358:	94800814 	ori	r18,r18,32
    b35c:	bdc00044 	addi	r23,r23,1
    b360:	8c403fcc 	andi	r17,r17,255
    b364:	8c40201c 	xori	r17,r17,128
    b368:	8c7fe004 	addi	r17,r17,-128
    b36c:	003a1a06 	br	9bd8 <__alt_data_end+0xf0009bd8>
    b370:	d9402c17 	ldw	r5,176(sp)
    b374:	d9801e04 	addi	r6,sp,120
    b378:	9809883a 	mov	r4,r19
    b37c:	0012ef00 	call	12ef0 <__ssprint_r>
    b380:	103aa61e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b384:	d8c02017 	ldw	r3,128(sp)
    b388:	da000404 	addi	r8,sp,16
    b38c:	003d4a06 	br	a8b8 <__alt_data_end+0xf000a8b8>
    b390:	d9002917 	ldw	r4,164(sp)
    b394:	05bff7c4 	movi	r22,-33
    b398:	00bfffc4 	movi	r2,-1
    b39c:	8dac703a 	and	r22,r17,r22
    b3a0:	20806a26 	beq	r4,r2,b54c <___svfprintf_internal_r+0x1ac4>
    b3a4:	008011c4 	movi	r2,71
    b3a8:	b0813726 	beq	r22,r2,b888 <___svfprintf_internal_r+0x1e00>
    b3ac:	d9003717 	ldw	r4,220(sp)
    b3b0:	90c04014 	ori	r3,r18,256
    b3b4:	d8c02b15 	stw	r3,172(sp)
    b3b8:	20015d16 	blt	r4,zero,b930 <___svfprintf_internal_r+0x1ea8>
    b3bc:	dd003717 	ldw	r20,220(sp)
    b3c0:	d8002a05 	stb	zero,168(sp)
    b3c4:	00801984 	movi	r2,102
    b3c8:	88814026 	beq	r17,r2,b8cc <___svfprintf_internal_r+0x1e44>
    b3cc:	00801184 	movi	r2,70
    b3d0:	88817126 	beq	r17,r2,b998 <___svfprintf_internal_r+0x1f10>
    b3d4:	00801144 	movi	r2,69
    b3d8:	b0816226 	beq	r22,r2,b964 <___svfprintf_internal_r+0x1edc>
    b3dc:	d8c02917 	ldw	r3,164(sp)
    b3e0:	d8802104 	addi	r2,sp,132
    b3e4:	d8800315 	stw	r2,12(sp)
    b3e8:	d9403617 	ldw	r5,216(sp)
    b3ec:	d8802504 	addi	r2,sp,148
    b3f0:	d8800215 	stw	r2,8(sp)
    b3f4:	d8802604 	addi	r2,sp,152
    b3f8:	d8c00015 	stw	r3,0(sp)
    b3fc:	d8800115 	stw	r2,4(sp)
    b400:	01c00084 	movi	r7,2
    b404:	a00d883a 	mov	r6,r20
    b408:	9809883a 	mov	r4,r19
    b40c:	d8c03d15 	stw	r3,244(sp)
    b410:	da003e15 	stw	r8,248(sp)
    b414:	000e2840 	call	e284 <_dtoa_r>
    b418:	1021883a 	mov	r16,r2
    b41c:	008019c4 	movi	r2,103
    b420:	d8c03d17 	ldw	r3,244(sp)
    b424:	da003e17 	ldw	r8,248(sp)
    b428:	8880e726 	beq	r17,r2,b7c8 <___svfprintf_internal_r+0x1d40>
    b42c:	008011c4 	movi	r2,71
    b430:	8880d426 	beq	r17,r2,b784 <___svfprintf_internal_r+0x1cfc>
    b434:	80f9883a 	add	fp,r16,r3
    b438:	d9003617 	ldw	r4,216(sp)
    b43c:	000d883a 	mov	r6,zero
    b440:	000f883a 	mov	r7,zero
    b444:	a00b883a 	mov	r5,r20
    b448:	da003e15 	stw	r8,248(sp)
    b44c:	00175d40 	call	175d4 <__eqdf2>
    b450:	da003e17 	ldw	r8,248(sp)
    b454:	1000e426 	beq	r2,zero,b7e8 <___svfprintf_internal_r+0x1d60>
    b458:	d8802117 	ldw	r2,132(sp)
    b45c:	1700062e 	bgeu	r2,fp,b478 <___svfprintf_internal_r+0x19f0>
    b460:	01000c04 	movi	r4,48
    b464:	10c00044 	addi	r3,r2,1
    b468:	d8c02115 	stw	r3,132(sp)
    b46c:	11000005 	stb	r4,0(r2)
    b470:	d8802117 	ldw	r2,132(sp)
    b474:	173ffb36 	bltu	r2,fp,b464 <__alt_data_end+0xf000b464>
    b478:	1405c83a 	sub	r2,r2,r16
    b47c:	d8803315 	stw	r2,204(sp)
    b480:	008011c4 	movi	r2,71
    b484:	b080c526 	beq	r22,r2,b79c <___svfprintf_internal_r+0x1d14>
    b488:	00801944 	movi	r2,101
    b48c:	1441d90e 	bge	r2,r17,bbf4 <___svfprintf_internal_r+0x216c>
    b490:	d8c02617 	ldw	r3,152(sp)
    b494:	00801984 	movi	r2,102
    b498:	d8c03215 	stw	r3,200(sp)
    b49c:	88813426 	beq	r17,r2,b970 <___svfprintf_internal_r+0x1ee8>
    b4a0:	d8c03217 	ldw	r3,200(sp)
    b4a4:	d9003317 	ldw	r4,204(sp)
    b4a8:	19012516 	blt	r3,r4,b940 <___svfprintf_internal_r+0x1eb8>
    b4ac:	9480004c 	andi	r18,r18,1
    b4b0:	9001841e 	bne	r18,zero,bac4 <___svfprintf_internal_r+0x203c>
    b4b4:	1805883a 	mov	r2,r3
    b4b8:	1801cc16 	blt	r3,zero,bbec <___svfprintf_internal_r+0x2164>
    b4bc:	d8c03217 	ldw	r3,200(sp)
    b4c0:	044019c4 	movi	r17,103
    b4c4:	d8c02e15 	stw	r3,184(sp)
    b4c8:	df002a07 	ldb	fp,168(sp)
    b4cc:	e000a61e 	bne	fp,zero,b768 <___svfprintf_internal_r+0x1ce0>
    b4d0:	df002783 	ldbu	fp,158(sp)
    b4d4:	d8802a15 	stw	r2,168(sp)
    b4d8:	dc802b17 	ldw	r18,172(sp)
    b4dc:	d8002915 	stw	zero,164(sp)
    b4e0:	003b1706 	br	a140 <__alt_data_end+0xf000a140>
    b4e4:	04020034 	movhi	r16,2048
    b4e8:	8400dd04 	addi	r16,r16,884
    b4ec:	003aa606 	br	9f88 <__alt_data_end+0xf0009f88>
    b4f0:	d9003917 	ldw	r4,228(sp)
    b4f4:	04001004 	movi	r16,64
    b4f8:	800b883a 	mov	r5,r16
    b4fc:	0010c640 	call	10c64 <_malloc_r>
    b500:	d9002c17 	ldw	r4,176(sp)
    b504:	20800015 	stw	r2,0(r4)
    b508:	20800415 	stw	r2,16(r4)
    b50c:	1001cb26 	beq	r2,zero,bc3c <___svfprintf_internal_r+0x21b4>
    b510:	d8802c17 	ldw	r2,176(sp)
    b514:	14000515 	stw	r16,20(r2)
    b518:	00397606 	br	9af4 <__alt_data_end+0xf0009af4>
    b51c:	04020034 	movhi	r16,2048
    b520:	8400df04 	addi	r16,r16,892
    b524:	003ee106 	br	b0ac <__alt_data_end+0xf000b0ac>
    b528:	d9402c17 	ldw	r5,176(sp)
    b52c:	d9801e04 	addi	r6,sp,120
    b530:	9809883a 	mov	r4,r19
    b534:	0012ef00 	call	12ef0 <__ssprint_r>
    b538:	103a381e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b53c:	dc402617 	ldw	r17,152(sp)
    b540:	d8c02017 	ldw	r3,128(sp)
    b544:	da000404 	addi	r8,sp,16
    b548:	003f4306 	br	b258 <__alt_data_end+0xf000b258>
    b54c:	01400184 	movi	r5,6
    b550:	d9402915 	stw	r5,164(sp)
    b554:	003f9506 	br	b3ac <__alt_data_end+0xf000b3ac>
    b558:	d9002d17 	ldw	r4,180(sp)
    b55c:	25000017 	ldw	r20,0(r4)
    b560:	21000104 	addi	r4,r4,4
    b564:	d9002d15 	stw	r4,180(sp)
    b568:	a02dd7fa 	srai	r22,r20,31
    b56c:	b005883a 	mov	r2,r22
    b570:	003a9b06 	br	9fe0 <__alt_data_end+0xf0009fe0>
    b574:	d9402d17 	ldw	r5,180(sp)
    b578:	002d883a 	mov	r22,zero
    b57c:	2d000017 	ldw	r20,0(r5)
    b580:	29400104 	addi	r5,r5,4
    b584:	d9402d15 	stw	r5,180(sp)
    b588:	003bf906 	br	a570 <__alt_data_end+0xf000a570>
    b58c:	9480100c 	andi	r18,r18,64
    b590:	90006e26 	beq	r18,zero,b74c <___svfprintf_internal_r+0x1cc4>
    b594:	d9002d17 	ldw	r4,180(sp)
    b598:	d9402f17 	ldw	r5,188(sp)
    b59c:	20800017 	ldw	r2,0(r4)
    b5a0:	21000104 	addi	r4,r4,4
    b5a4:	d9002d15 	stw	r4,180(sp)
    b5a8:	1140000d 	sth	r5,0(r2)
    b5ac:	00396106 	br	9b34 <__alt_data_end+0xf0009b34>
    b5b0:	d9402c17 	ldw	r5,176(sp)
    b5b4:	d9801e04 	addi	r6,sp,120
    b5b8:	9809883a 	mov	r4,r19
    b5bc:	0012ef00 	call	12ef0 <__ssprint_r>
    b5c0:	103a161e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b5c4:	d8c02017 	ldw	r3,128(sp)
    b5c8:	d8801f17 	ldw	r2,124(sp)
    b5cc:	da000404 	addi	r8,sp,16
    b5d0:	d9403317 	ldw	r5,204(sp)
    b5d4:	10800044 	addi	r2,r2,1
    b5d8:	44000015 	stw	r16,0(r8)
    b5dc:	28c7883a 	add	r3,r5,r3
    b5e0:	003b7706 	br	a3c0 <__alt_data_end+0xf000a3c0>
    b5e4:	8009883a 	mov	r4,r16
    b5e8:	da003e15 	stw	r8,248(sp)
    b5ec:	00099f00 	call	99f0 <strlen>
    b5f0:	d8802e15 	stw	r2,184(sp)
    b5f4:	da003e17 	ldw	r8,248(sp)
    b5f8:	103c280e 	bge	r2,zero,a69c <__alt_data_end+0xf000a69c>
    b5fc:	0005883a 	mov	r2,zero
    b600:	003c2606 	br	a69c <__alt_data_end+0xf000a69c>
    b604:	00bfffc4 	movi	r2,-1
    b608:	003a0906 	br	9e30 <__alt_data_end+0xf0009e30>
    b60c:	01020034 	movhi	r4,2048
    b610:	2100f184 	addi	r4,r4,966
    b614:	d9003515 	stw	r4,212(sp)
    b618:	003b0606 	br	a234 <__alt_data_end+0xf000a234>
    b61c:	013fffc4 	movi	r4,-1
    b620:	003a2706 	br	9ec0 <__alt_data_end+0xf0009ec0>
    b624:	d9402c17 	ldw	r5,176(sp)
    b628:	d9801e04 	addi	r6,sp,120
    b62c:	9809883a 	mov	r4,r19
    b630:	0012ef00 	call	12ef0 <__ssprint_r>
    b634:	1039f91e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b638:	d8c02017 	ldw	r3,128(sp)
    b63c:	da000404 	addi	r8,sp,16
    b640:	003d8406 	br	ac54 <__alt_data_end+0xf000ac54>
    b644:	0023883a 	mov	r17,zero
    b648:	003d8306 	br	ac58 <__alt_data_end+0xf000ac58>
    b64c:	01020034 	movhi	r4,2048
    b650:	2100ed84 	addi	r4,r4,950
    b654:	d9002b15 	stw	r4,172(sp)
    b658:	d9002b17 	ldw	r4,172(sp)
    b65c:	1c47883a 	add	r3,r3,r17
    b660:	10800044 	addi	r2,r2,1
    b664:	41000015 	stw	r4,0(r8)
    b668:	44400115 	stw	r17,4(r8)
    b66c:	d8c02015 	stw	r3,128(sp)
    b670:	d8801f15 	stw	r2,124(sp)
    b674:	010001c4 	movi	r4,7
    b678:	20bfcd16 	blt	r4,r2,b5b0 <__alt_data_end+0xf000b5b0>
    b67c:	42000204 	addi	r8,r8,8
    b680:	003fd306 	br	b5d0 <__alt_data_end+0xf000b5d0>
    b684:	d9402c17 	ldw	r5,176(sp)
    b688:	d9801e04 	addi	r6,sp,120
    b68c:	9809883a 	mov	r4,r19
    b690:	0012ef00 	call	12ef0 <__ssprint_r>
    b694:	1039e11e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b698:	d8802617 	ldw	r2,152(sp)
    b69c:	d8c02017 	ldw	r3,128(sp)
    b6a0:	da000404 	addi	r8,sp,16
    b6a4:	003e1c06 	br	af18 <__alt_data_end+0xf000af18>
    b6a8:	d8802917 	ldw	r2,164(sp)
    b6ac:	00c00184 	movi	r3,6
    b6b0:	1880012e 	bgeu	r3,r2,b6b8 <___svfprintf_internal_r+0x1c30>
    b6b4:	1805883a 	mov	r2,r3
    b6b8:	d8802e15 	stw	r2,184(sp)
    b6bc:	1000f316 	blt	r2,zero,ba8c <___svfprintf_internal_r+0x2004>
    b6c0:	04020034 	movhi	r16,2048
    b6c4:	d8802a15 	stw	r2,168(sp)
    b6c8:	dd002d15 	stw	r20,180(sp)
    b6cc:	d8002915 	stw	zero,164(sp)
    b6d0:	d8003215 	stw	zero,200(sp)
    b6d4:	8400eb04 	addi	r16,r16,940
    b6d8:	0039883a 	mov	fp,zero
    b6dc:	003a9f06 	br	a15c <__alt_data_end+0xf000a15c>
    b6e0:	01020034 	movhi	r4,2048
    b6e4:	2100f184 	addi	r4,r4,966
    b6e8:	d9003515 	stw	r4,212(sp)
    b6ec:	003b5f06 	br	a46c <__alt_data_end+0xf000a46c>
    b6f0:	d9402c17 	ldw	r5,176(sp)
    b6f4:	d9801e04 	addi	r6,sp,120
    b6f8:	9809883a 	mov	r4,r19
    b6fc:	0012ef00 	call	12ef0 <__ssprint_r>
    b700:	1039c61e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b704:	d8802617 	ldw	r2,152(sp)
    b708:	d9403317 	ldw	r5,204(sp)
    b70c:	d8c02017 	ldw	r3,128(sp)
    b710:	da000404 	addi	r8,sp,16
    b714:	2885c83a 	sub	r2,r5,r2
    b718:	003e1006 	br	af5c <__alt_data_end+0xf000af5c>
    b71c:	00800044 	movi	r2,1
    b720:	10803fcc 	andi	r2,r2,255
    b724:	00c00044 	movi	r3,1
    b728:	10fa3526 	beq	r2,r3,a000 <__alt_data_end+0xf000a000>
    b72c:	00c00084 	movi	r3,2
    b730:	10fb9e26 	beq	r2,r3,a5ac <__alt_data_end+0xf000a5ac>
    b734:	003a6406 	br	a0c8 <__alt_data_end+0xf000a0c8>
    b738:	0021883a 	mov	r16,zero
    b73c:	003e0806 	br	af60 <__alt_data_end+0xf000af60>
    b740:	07000b44 	movi	fp,45
    b744:	df002785 	stb	fp,158(sp)
    b748:	003a0b06 	br	9f78 <__alt_data_end+0xf0009f78>
    b74c:	d8c02d17 	ldw	r3,180(sp)
    b750:	d9002f17 	ldw	r4,188(sp)
    b754:	18800017 	ldw	r2,0(r3)
    b758:	18c00104 	addi	r3,r3,4
    b75c:	d8c02d15 	stw	r3,180(sp)
    b760:	11000015 	stw	r4,0(r2)
    b764:	0038f306 	br	9b34 <__alt_data_end+0xf0009b34>
    b768:	00c00b44 	movi	r3,45
    b76c:	d8c02785 	stb	r3,158(sp)
    b770:	d8802a15 	stw	r2,168(sp)
    b774:	dc802b17 	ldw	r18,172(sp)
    b778:	d8002915 	stw	zero,164(sp)
    b77c:	07000b44 	movi	fp,45
    b780:	003a7306 	br	a150 <__alt_data_end+0xf000a150>
    b784:	9080004c 	andi	r2,r18,1
    b788:	1000941e 	bne	r2,zero,b9dc <___svfprintf_internal_r+0x1f54>
    b78c:	d8802117 	ldw	r2,132(sp)
    b790:	1405c83a 	sub	r2,r2,r16
    b794:	d8803315 	stw	r2,204(sp)
    b798:	b441161e 	bne	r22,r17,bbf4 <___svfprintf_internal_r+0x216c>
    b79c:	dd802617 	ldw	r22,152(sp)
    b7a0:	00bfff44 	movi	r2,-3
    b7a4:	b0801a16 	blt	r22,r2,b810 <___svfprintf_internal_r+0x1d88>
    b7a8:	d9402917 	ldw	r5,164(sp)
    b7ac:	2d801816 	blt	r5,r22,b810 <___svfprintf_internal_r+0x1d88>
    b7b0:	dd803215 	stw	r22,200(sp)
    b7b4:	003f3a06 	br	b4a0 <__alt_data_end+0xf000b4a0>
    b7b8:	1025883a 	mov	r18,r2
    b7bc:	0039883a 	mov	fp,zero
    b7c0:	00800084 	movi	r2,2
    b7c4:	003fd606 	br	b720 <__alt_data_end+0xf000b720>
    b7c8:	9080004c 	andi	r2,r18,1
    b7cc:	103f191e 	bne	r2,zero,b434 <__alt_data_end+0xf000b434>
    b7d0:	d8802117 	ldw	r2,132(sp)
    b7d4:	003f2806 	br	b478 <__alt_data_end+0xf000b478>
    b7d8:	01020034 	movhi	r4,2048
    b7dc:	2100ed84 	addi	r4,r4,950
    b7e0:	d9002b15 	stw	r4,172(sp)
    b7e4:	003c7c06 	br	a9d8 <__alt_data_end+0xf000a9d8>
    b7e8:	e005883a 	mov	r2,fp
    b7ec:	003f2206 	br	b478 <__alt_data_end+0xf000b478>
    b7f0:	d9402917 	ldw	r5,164(sp)
    b7f4:	df002783 	ldbu	fp,158(sp)
    b7f8:	dd002d15 	stw	r20,180(sp)
    b7fc:	d9402a15 	stw	r5,168(sp)
    b800:	d9402e15 	stw	r5,184(sp)
    b804:	d8002915 	stw	zero,164(sp)
    b808:	d8003215 	stw	zero,200(sp)
    b80c:	003a4c06 	br	a140 <__alt_data_end+0xf000a140>
    b810:	8c7fff84 	addi	r17,r17,-2
    b814:	b5bfffc4 	addi	r22,r22,-1
    b818:	dd802615 	stw	r22,152(sp)
    b81c:	dc4022c5 	stb	r17,139(sp)
    b820:	b000c316 	blt	r22,zero,bb30 <___svfprintf_internal_r+0x20a8>
    b824:	00800ac4 	movi	r2,43
    b828:	d8802305 	stb	r2,140(sp)
    b82c:	00800244 	movi	r2,9
    b830:	15806e16 	blt	r2,r22,b9ec <___svfprintf_internal_r+0x1f64>
    b834:	00800c04 	movi	r2,48
    b838:	b5800c04 	addi	r22,r22,48
    b83c:	d8802345 	stb	r2,141(sp)
    b840:	dd802385 	stb	r22,142(sp)
    b844:	d88023c4 	addi	r2,sp,143
    b848:	df0022c4 	addi	fp,sp,139
    b84c:	d8c03317 	ldw	r3,204(sp)
    b850:	1739c83a 	sub	fp,r2,fp
    b854:	d9003317 	ldw	r4,204(sp)
    b858:	e0c7883a 	add	r3,fp,r3
    b85c:	df003b15 	stw	fp,236(sp)
    b860:	d8c02e15 	stw	r3,184(sp)
    b864:	00800044 	movi	r2,1
    b868:	1100b70e 	bge	r2,r4,bb48 <___svfprintf_internal_r+0x20c0>
    b86c:	d8c02e17 	ldw	r3,184(sp)
    b870:	18c00044 	addi	r3,r3,1
    b874:	d8c02e15 	stw	r3,184(sp)
    b878:	1805883a 	mov	r2,r3
    b87c:	1800b016 	blt	r3,zero,bb40 <___svfprintf_internal_r+0x20b8>
    b880:	d8003215 	stw	zero,200(sp)
    b884:	003f1006 	br	b4c8 <__alt_data_end+0xf000b4c8>
    b888:	d8802917 	ldw	r2,164(sp)
    b88c:	103ec71e 	bne	r2,zero,b3ac <__alt_data_end+0xf000b3ac>
    b890:	dc002915 	stw	r16,164(sp)
    b894:	003ec506 	br	b3ac <__alt_data_end+0xf000b3ac>
    b898:	d9402c17 	ldw	r5,176(sp)
    b89c:	d9801e04 	addi	r6,sp,120
    b8a0:	9809883a 	mov	r4,r19
    b8a4:	0012ef00 	call	12ef0 <__ssprint_r>
    b8a8:	10395c1e 	bne	r2,zero,9e1c <__alt_data_end+0xf0009e1c>
    b8ac:	dc402617 	ldw	r17,152(sp)
    b8b0:	d8c02017 	ldw	r3,128(sp)
    b8b4:	d8801f17 	ldw	r2,124(sp)
    b8b8:	da000404 	addi	r8,sp,16
    b8bc:	003e7706 	br	b29c <__alt_data_end+0xf000b29c>
    b8c0:	582f883a 	mov	r23,r11
    b8c4:	d8002915 	stw	zero,164(sp)
    b8c8:	0038c406 	br	9bdc <__alt_data_end+0xf0009bdc>
    b8cc:	d8c02917 	ldw	r3,164(sp)
    b8d0:	d8802104 	addi	r2,sp,132
    b8d4:	d8800315 	stw	r2,12(sp)
    b8d8:	d9403617 	ldw	r5,216(sp)
    b8dc:	d8802504 	addi	r2,sp,148
    b8e0:	d8800215 	stw	r2,8(sp)
    b8e4:	d8802604 	addi	r2,sp,152
    b8e8:	d8c00015 	stw	r3,0(sp)
    b8ec:	9809883a 	mov	r4,r19
    b8f0:	d8800115 	stw	r2,4(sp)
    b8f4:	01c000c4 	movi	r7,3
    b8f8:	a00d883a 	mov	r6,r20
    b8fc:	da003e15 	stw	r8,248(sp)
    b900:	000e2840 	call	e284 <_dtoa_r>
    b904:	d9002917 	ldw	r4,164(sp)
    b908:	da003e17 	ldw	r8,248(sp)
    b90c:	1021883a 	mov	r16,r2
    b910:	1139883a 	add	fp,r2,r4
    b914:	2007883a 	mov	r3,r4
    b918:	81000007 	ldb	r4,0(r16)
    b91c:	00800c04 	movi	r2,48
    b920:	20806f26 	beq	r4,r2,bae0 <___svfprintf_internal_r+0x2058>
    b924:	d8c02617 	ldw	r3,152(sp)
    b928:	e0f9883a 	add	fp,fp,r3
    b92c:	003ec206 	br	b438 <__alt_data_end+0xf000b438>
    b930:	00c00b44 	movi	r3,45
    b934:	2520003c 	xorhi	r20,r4,32768
    b938:	d8c02a05 	stb	r3,168(sp)
    b93c:	003ea106 	br	b3c4 <__alt_data_end+0xf000b3c4>
    b940:	d8c03217 	ldw	r3,200(sp)
    b944:	00c0890e 	bge	zero,r3,bb6c <___svfprintf_internal_r+0x20e4>
    b948:	00800044 	movi	r2,1
    b94c:	d9003317 	ldw	r4,204(sp)
    b950:	1105883a 	add	r2,r2,r4
    b954:	d8802e15 	stw	r2,184(sp)
    b958:	10005f16 	blt	r2,zero,bad8 <___svfprintf_internal_r+0x2050>
    b95c:	044019c4 	movi	r17,103
    b960:	003ed906 	br	b4c8 <__alt_data_end+0xf000b4c8>
    b964:	d9002917 	ldw	r4,164(sp)
    b968:	20c00044 	addi	r3,r4,1
    b96c:	003e9c06 	br	b3e0 <__alt_data_end+0xf000b3e0>
    b970:	d9002917 	ldw	r4,164(sp)
    b974:	00c0680e 	bge	zero,r3,bb18 <___svfprintf_internal_r+0x2090>
    b978:	2000461e 	bne	r4,zero,ba94 <___svfprintf_internal_r+0x200c>
    b97c:	9480004c 	andi	r18,r18,1
    b980:	9000441e 	bne	r18,zero,ba94 <___svfprintf_internal_r+0x200c>
    b984:	1805883a 	mov	r2,r3
    b988:	1800a016 	blt	r3,zero,bc0c <___svfprintf_internal_r+0x2184>
    b98c:	d8c03217 	ldw	r3,200(sp)
    b990:	d8c02e15 	stw	r3,184(sp)
    b994:	003ecc06 	br	b4c8 <__alt_data_end+0xf000b4c8>
    b998:	d9402917 	ldw	r5,164(sp)
    b99c:	d8802104 	addi	r2,sp,132
    b9a0:	d8800315 	stw	r2,12(sp)
    b9a4:	d9400015 	stw	r5,0(sp)
    b9a8:	d8802504 	addi	r2,sp,148
    b9ac:	d9403617 	ldw	r5,216(sp)
    b9b0:	d8800215 	stw	r2,8(sp)
    b9b4:	d8802604 	addi	r2,sp,152
    b9b8:	d8800115 	stw	r2,4(sp)
    b9bc:	01c000c4 	movi	r7,3
    b9c0:	a00d883a 	mov	r6,r20
    b9c4:	9809883a 	mov	r4,r19
    b9c8:	da003e15 	stw	r8,248(sp)
    b9cc:	000e2840 	call	e284 <_dtoa_r>
    b9d0:	d8c02917 	ldw	r3,164(sp)
    b9d4:	da003e17 	ldw	r8,248(sp)
    b9d8:	1021883a 	mov	r16,r2
    b9dc:	00801184 	movi	r2,70
    b9e0:	80f9883a 	add	fp,r16,r3
    b9e4:	88bfcc26 	beq	r17,r2,b918 <__alt_data_end+0xf000b918>
    b9e8:	003e9306 	br	b438 <__alt_data_end+0xf000b438>
    b9ec:	df0022c4 	addi	fp,sp,139
    b9f0:	dc002915 	stw	r16,164(sp)
    b9f4:	9829883a 	mov	r20,r19
    b9f8:	e021883a 	mov	r16,fp
    b9fc:	4027883a 	mov	r19,r8
    ba00:	b009883a 	mov	r4,r22
    ba04:	01400284 	movi	r5,10
    ba08:	00093d00 	call	93d0 <__modsi3>
    ba0c:	10800c04 	addi	r2,r2,48
    ba10:	843fffc4 	addi	r16,r16,-1
    ba14:	b009883a 	mov	r4,r22
    ba18:	01400284 	movi	r5,10
    ba1c:	80800005 	stb	r2,0(r16)
    ba20:	000934c0 	call	934c <__divsi3>
    ba24:	102d883a 	mov	r22,r2
    ba28:	00800244 	movi	r2,9
    ba2c:	15bff416 	blt	r2,r22,ba00 <__alt_data_end+0xf000ba00>
    ba30:	9811883a 	mov	r8,r19
    ba34:	b0800c04 	addi	r2,r22,48
    ba38:	a027883a 	mov	r19,r20
    ba3c:	8029883a 	mov	r20,r16
    ba40:	a17fffc4 	addi	r5,r20,-1
    ba44:	a0bfffc5 	stb	r2,-1(r20)
    ba48:	dc002917 	ldw	r16,164(sp)
    ba4c:	2f00752e 	bgeu	r5,fp,bc24 <___svfprintf_internal_r+0x219c>
    ba50:	d9c02384 	addi	r7,sp,142
    ba54:	3d0fc83a 	sub	r7,r7,r20
    ba58:	d9002344 	addi	r4,sp,141
    ba5c:	e1cf883a 	add	r7,fp,r7
    ba60:	00000106 	br	ba68 <___svfprintf_internal_r+0x1fe0>
    ba64:	28800003 	ldbu	r2,0(r5)
    ba68:	20800005 	stb	r2,0(r4)
    ba6c:	21000044 	addi	r4,r4,1
    ba70:	29400044 	addi	r5,r5,1
    ba74:	21fffb1e 	bne	r4,r7,ba64 <__alt_data_end+0xf000ba64>
    ba78:	d8802304 	addi	r2,sp,140
    ba7c:	1505c83a 	sub	r2,r2,r20
    ba80:	d8c02344 	addi	r3,sp,141
    ba84:	1885883a 	add	r2,r3,r2
    ba88:	003f7006 	br	b84c <__alt_data_end+0xf000b84c>
    ba8c:	0005883a 	mov	r2,zero
    ba90:	003f0b06 	br	b6c0 <__alt_data_end+0xf000b6c0>
    ba94:	d9002917 	ldw	r4,164(sp)
    ba98:	d8c03217 	ldw	r3,200(sp)
    ba9c:	20800044 	addi	r2,r4,1
    baa0:	1885883a 	add	r2,r3,r2
    baa4:	d8802e15 	stw	r2,184(sp)
    baa8:	103e870e 	bge	r2,zero,b4c8 <__alt_data_end+0xf000b4c8>
    baac:	0005883a 	mov	r2,zero
    bab0:	003e8506 	br	b4c8 <__alt_data_end+0xf000b4c8>
    bab4:	01020034 	movhi	r4,2048
    bab8:	2100ed84 	addi	r4,r4,950
    babc:	d9002b15 	stw	r4,172(sp)
    bac0:	003cc506 	br	add8 <__alt_data_end+0xf000add8>
    bac4:	d8c03217 	ldw	r3,200(sp)
    bac8:	18c00044 	addi	r3,r3,1
    bacc:	d8c02e15 	stw	r3,184(sp)
    bad0:	1805883a 	mov	r2,r3
    bad4:	183fa10e 	bge	r3,zero,b95c <__alt_data_end+0xf000b95c>
    bad8:	0005883a 	mov	r2,zero
    badc:	003f9f06 	br	b95c <__alt_data_end+0xf000b95c>
    bae0:	d9003617 	ldw	r4,216(sp)
    bae4:	000d883a 	mov	r6,zero
    bae8:	000f883a 	mov	r7,zero
    baec:	a00b883a 	mov	r5,r20
    baf0:	d8c03d15 	stw	r3,244(sp)
    baf4:	da003e15 	stw	r8,248(sp)
    baf8:	00175d40 	call	175d4 <__eqdf2>
    bafc:	d8c03d17 	ldw	r3,244(sp)
    bb00:	da003e17 	ldw	r8,248(sp)
    bb04:	103f8726 	beq	r2,zero,b924 <__alt_data_end+0xf000b924>
    bb08:	00800044 	movi	r2,1
    bb0c:	10c7c83a 	sub	r3,r2,r3
    bb10:	d8c02615 	stw	r3,152(sp)
    bb14:	003f8406 	br	b928 <__alt_data_end+0xf000b928>
    bb18:	20000e1e 	bne	r4,zero,bb54 <___svfprintf_internal_r+0x20cc>
    bb1c:	9480004c 	andi	r18,r18,1
    bb20:	90000c1e 	bne	r18,zero,bb54 <___svfprintf_internal_r+0x20cc>
    bb24:	00800044 	movi	r2,1
    bb28:	d8802e15 	stw	r2,184(sp)
    bb2c:	003e6606 	br	b4c8 <__alt_data_end+0xf000b4c8>
    bb30:	00800b44 	movi	r2,45
    bb34:	05adc83a 	sub	r22,zero,r22
    bb38:	d8802305 	stb	r2,140(sp)
    bb3c:	003f3b06 	br	b82c <__alt_data_end+0xf000b82c>
    bb40:	0005883a 	mov	r2,zero
    bb44:	003f4e06 	br	b880 <__alt_data_end+0xf000b880>
    bb48:	90a4703a 	and	r18,r18,r2
    bb4c:	903f4a26 	beq	r18,zero,b878 <__alt_data_end+0xf000b878>
    bb50:	003f4606 	br	b86c <__alt_data_end+0xf000b86c>
    bb54:	d8c02917 	ldw	r3,164(sp)
    bb58:	18c00084 	addi	r3,r3,2
    bb5c:	d8c02e15 	stw	r3,184(sp)
    bb60:	1805883a 	mov	r2,r3
    bb64:	183e580e 	bge	r3,zero,b4c8 <__alt_data_end+0xf000b4c8>
    bb68:	003fd006 	br	baac <__alt_data_end+0xf000baac>
    bb6c:	00800084 	movi	r2,2
    bb70:	10c5c83a 	sub	r2,r2,r3
    bb74:	003f7506 	br	b94c <__alt_data_end+0xf000b94c>
    bb78:	d8802d17 	ldw	r2,180(sp)
    bb7c:	d9002d17 	ldw	r4,180(sp)
    bb80:	bc400043 	ldbu	r17,1(r23)
    bb84:	10800017 	ldw	r2,0(r2)
    bb88:	582f883a 	mov	r23,r11
    bb8c:	d8802915 	stw	r2,164(sp)
    bb90:	20800104 	addi	r2,r4,4
    bb94:	d9002917 	ldw	r4,164(sp)
    bb98:	d8802d15 	stw	r2,180(sp)
    bb9c:	203df00e 	bge	r4,zero,b360 <__alt_data_end+0xf000b360>
    bba0:	8c403fcc 	andi	r17,r17,255
    bba4:	00bfffc4 	movi	r2,-1
    bba8:	8c40201c 	xori	r17,r17,128
    bbac:	d8802915 	stw	r2,164(sp)
    bbb0:	8c7fe004 	addi	r17,r17,-128
    bbb4:	00380806 	br	9bd8 <__alt_data_end+0xf0009bd8>
    bbb8:	9080004c 	andi	r2,r18,1
    bbbc:	0039883a 	mov	fp,zero
    bbc0:	10000726 	beq	r2,zero,bbe0 <___svfprintf_internal_r+0x2158>
    bbc4:	d8c02817 	ldw	r3,160(sp)
    bbc8:	dc001dc4 	addi	r16,sp,119
    bbcc:	00800c04 	movi	r2,48
    bbd0:	1c07c83a 	sub	r3,r3,r16
    bbd4:	d8801dc5 	stb	r2,119(sp)
    bbd8:	d8c02e15 	stw	r3,184(sp)
    bbdc:	00395206 	br	a128 <__alt_data_end+0xf000a128>
    bbe0:	d8002e15 	stw	zero,184(sp)
    bbe4:	dc001e04 	addi	r16,sp,120
    bbe8:	00394f06 	br	a128 <__alt_data_end+0xf000a128>
    bbec:	0005883a 	mov	r2,zero
    bbf0:	003e3206 	br	b4bc <__alt_data_end+0xf000b4bc>
    bbf4:	dd802617 	ldw	r22,152(sp)
    bbf8:	003f0606 	br	b814 <__alt_data_end+0xf000b814>
    bbfc:	d9c02785 	stb	r7,158(sp)
    bc00:	003a5106 	br	a548 <__alt_data_end+0xf000a548>
    bc04:	d9c02785 	stb	r7,158(sp)
    bc08:	003a3706 	br	a4e8 <__alt_data_end+0xf000a4e8>
    bc0c:	0005883a 	mov	r2,zero
    bc10:	003f5e06 	br	b98c <__alt_data_end+0xf000b98c>
    bc14:	d9c02785 	stb	r7,158(sp)
    bc18:	00391706 	br	a078 <__alt_data_end+0xf000a078>
    bc1c:	d9c02785 	stb	r7,158(sp)
    bc20:	0038e606 	br	9fbc <__alt_data_end+0xf0009fbc>
    bc24:	d8802344 	addi	r2,sp,141
    bc28:	003f0806 	br	b84c <__alt_data_end+0xf000b84c>
    bc2c:	d9c02785 	stb	r7,158(sp)
    bc30:	0038b706 	br	9f10 <__alt_data_end+0xf0009f10>
    bc34:	d9c02785 	stb	r7,158(sp)
    bc38:	003adc06 	br	a7ac <__alt_data_end+0xf000a7ac>
    bc3c:	d9403917 	ldw	r5,228(sp)
    bc40:	00800304 	movi	r2,12
    bc44:	28800015 	stw	r2,0(r5)
    bc48:	00bfffc4 	movi	r2,-1
    bc4c:	00387806 	br	9e30 <__alt_data_end+0xf0009e30>
    bc50:	d9c02785 	stb	r7,158(sp)
    bc54:	003abf06 	br	a754 <__alt_data_end+0xf000a754>
    bc58:	d9c02785 	stb	r7,158(sp)
    bc5c:	003a9b06 	br	a6cc <__alt_data_end+0xf000a6cc>

0000bc60 <___vfprintf_internal_r>:
    bc60:	deffb804 	addi	sp,sp,-288
    bc64:	dfc04715 	stw	ra,284(sp)
    bc68:	ddc04515 	stw	r23,276(sp)
    bc6c:	dd404315 	stw	r21,268(sp)
    bc70:	d9002c15 	stw	r4,176(sp)
    bc74:	282f883a 	mov	r23,r5
    bc78:	302b883a 	mov	r21,r6
    bc7c:	d9c02d15 	stw	r7,180(sp)
    bc80:	df004615 	stw	fp,280(sp)
    bc84:	dd804415 	stw	r22,272(sp)
    bc88:	dd004215 	stw	r20,264(sp)
    bc8c:	dcc04115 	stw	r19,260(sp)
    bc90:	dc804015 	stw	r18,256(sp)
    bc94:	dc403f15 	stw	r17,252(sp)
    bc98:	dc003e15 	stw	r16,248(sp)
    bc9c:	0010a780 	call	10a78 <_localeconv_r>
    bca0:	10800017 	ldw	r2,0(r2)
    bca4:	1009883a 	mov	r4,r2
    bca8:	d8803415 	stw	r2,208(sp)
    bcac:	00099f00 	call	99f0 <strlen>
    bcb0:	d8803715 	stw	r2,220(sp)
    bcb4:	d8802c17 	ldw	r2,176(sp)
    bcb8:	10000226 	beq	r2,zero,bcc4 <___vfprintf_internal_r+0x64>
    bcbc:	10800e17 	ldw	r2,56(r2)
    bcc0:	1000f926 	beq	r2,zero,c0a8 <___vfprintf_internal_r+0x448>
    bcc4:	b880030b 	ldhu	r2,12(r23)
    bcc8:	10c8000c 	andi	r3,r2,8192
    bccc:	1800061e 	bne	r3,zero,bce8 <___vfprintf_internal_r+0x88>
    bcd0:	b9001917 	ldw	r4,100(r23)
    bcd4:	00f7ffc4 	movi	r3,-8193
    bcd8:	10880014 	ori	r2,r2,8192
    bcdc:	20c6703a 	and	r3,r4,r3
    bce0:	b880030d 	sth	r2,12(r23)
    bce4:	b8c01915 	stw	r3,100(r23)
    bce8:	10c0020c 	andi	r3,r2,8
    bcec:	1800c126 	beq	r3,zero,bff4 <___vfprintf_internal_r+0x394>
    bcf0:	b8c00417 	ldw	r3,16(r23)
    bcf4:	1800bf26 	beq	r3,zero,bff4 <___vfprintf_internal_r+0x394>
    bcf8:	1080068c 	andi	r2,r2,26
    bcfc:	00c00284 	movi	r3,10
    bd00:	10c0c426 	beq	r2,r3,c014 <___vfprintf_internal_r+0x3b4>
    bd04:	d8c00404 	addi	r3,sp,16
    bd08:	05020034 	movhi	r20,2048
    bd0c:	d9001e04 	addi	r4,sp,120
    bd10:	a500f584 	addi	r20,r20,982
    bd14:	d8c01e15 	stw	r3,120(sp)
    bd18:	d8002015 	stw	zero,128(sp)
    bd1c:	d8001f15 	stw	zero,124(sp)
    bd20:	d8003315 	stw	zero,204(sp)
    bd24:	d8003615 	stw	zero,216(sp)
    bd28:	d8003815 	stw	zero,224(sp)
    bd2c:	1811883a 	mov	r8,r3
    bd30:	d8003915 	stw	zero,228(sp)
    bd34:	d8003a15 	stw	zero,232(sp)
    bd38:	d8002f15 	stw	zero,188(sp)
    bd3c:	d9002815 	stw	r4,160(sp)
    bd40:	a8800007 	ldb	r2,0(r21)
    bd44:	10027b26 	beq	r2,zero,c734 <___vfprintf_internal_r+0xad4>
    bd48:	00c00944 	movi	r3,37
    bd4c:	a821883a 	mov	r16,r21
    bd50:	10c0021e 	bne	r2,r3,bd5c <___vfprintf_internal_r+0xfc>
    bd54:	00001406 	br	bda8 <___vfprintf_internal_r+0x148>
    bd58:	10c00326 	beq	r2,r3,bd68 <___vfprintf_internal_r+0x108>
    bd5c:	84000044 	addi	r16,r16,1
    bd60:	80800007 	ldb	r2,0(r16)
    bd64:	103ffc1e 	bne	r2,zero,bd58 <__alt_data_end+0xf000bd58>
    bd68:	8563c83a 	sub	r17,r16,r21
    bd6c:	88000e26 	beq	r17,zero,bda8 <___vfprintf_internal_r+0x148>
    bd70:	d8c02017 	ldw	r3,128(sp)
    bd74:	d8801f17 	ldw	r2,124(sp)
    bd78:	45400015 	stw	r21,0(r8)
    bd7c:	1c47883a 	add	r3,r3,r17
    bd80:	10800044 	addi	r2,r2,1
    bd84:	d8c02015 	stw	r3,128(sp)
    bd88:	44400115 	stw	r17,4(r8)
    bd8c:	d8801f15 	stw	r2,124(sp)
    bd90:	00c001c4 	movi	r3,7
    bd94:	1880a716 	blt	r3,r2,c034 <___vfprintf_internal_r+0x3d4>
    bd98:	42000204 	addi	r8,r8,8
    bd9c:	d9402f17 	ldw	r5,188(sp)
    bda0:	2c4b883a 	add	r5,r5,r17
    bda4:	d9402f15 	stw	r5,188(sp)
    bda8:	80800007 	ldb	r2,0(r16)
    bdac:	1000a826 	beq	r2,zero,c050 <___vfprintf_internal_r+0x3f0>
    bdb0:	84400047 	ldb	r17,1(r16)
    bdb4:	00bfffc4 	movi	r2,-1
    bdb8:	85400044 	addi	r21,r16,1
    bdbc:	d8002785 	stb	zero,158(sp)
    bdc0:	0007883a 	mov	r3,zero
    bdc4:	000f883a 	mov	r7,zero
    bdc8:	d8802915 	stw	r2,164(sp)
    bdcc:	d8003115 	stw	zero,196(sp)
    bdd0:	0025883a 	mov	r18,zero
    bdd4:	01401604 	movi	r5,88
    bdd8:	01800244 	movi	r6,9
    bddc:	02800a84 	movi	r10,42
    bde0:	02401b04 	movi	r9,108
    bde4:	ad400044 	addi	r21,r21,1
    bde8:	88bff804 	addi	r2,r17,-32
    bdec:	28830436 	bltu	r5,r2,ca00 <___vfprintf_internal_r+0xda0>
    bdf0:	100490ba 	slli	r2,r2,2
    bdf4:	01000074 	movhi	r4,1
    bdf8:	212f8204 	addi	r4,r4,-16888
    bdfc:	1105883a 	add	r2,r2,r4
    be00:	10800017 	ldw	r2,0(r2)
    be04:	1000683a 	jmp	r2
    be08:	0000c920 	cmpeqi	zero,zero,804
    be0c:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be10:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be14:	0000c940 	call	c94 <xEventGroupClearBits+0x44>
    be18:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be1c:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be20:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be24:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be28:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be2c:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be30:	0000c0b4 	movhi	zero,770
    be34:	0000c85c 	xori	zero,zero,801
    be38:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be3c:	0000bf7c 	xorhi	zero,zero,765
    be40:	0000c0dc 	xori	zero,zero,771
    be44:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be48:	0000c11c 	xori	zero,zero,772
    be4c:	0000c128 	cmpgeui	zero,zero,772
    be50:	0000c128 	cmpgeui	zero,zero,772
    be54:	0000c128 	cmpgeui	zero,zero,772
    be58:	0000c128 	cmpgeui	zero,zero,772
    be5c:	0000c128 	cmpgeui	zero,zero,772
    be60:	0000c128 	cmpgeui	zero,zero,772
    be64:	0000c128 	cmpgeui	zero,zero,772
    be68:	0000c128 	cmpgeui	zero,zero,772
    be6c:	0000c128 	cmpgeui	zero,zero,772
    be70:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be74:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be78:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be7c:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be80:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be84:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be88:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be8c:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be90:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be94:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    be98:	0000c15c 	xori	zero,zero,773
    be9c:	0000c218 	cmpnei	zero,zero,776
    bea0:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bea4:	0000c218 	cmpnei	zero,zero,776
    bea8:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    beac:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    beb0:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    beb4:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    beb8:	0000c2b8 	rdprs	zero,zero,778
    bebc:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bec0:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bec4:	0000c2c4 	movi	zero,779
    bec8:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    becc:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bed0:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bed4:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bed8:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bedc:	0000c73c 	xorhi	zero,zero,796
    bee0:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bee4:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bee8:	0000c79c 	xori	zero,zero,798
    beec:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bef0:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bef4:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bef8:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    befc:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf00:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf04:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf08:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf0c:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf10:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf14:	0000c9ac 	andhi	zero,zero,806
    bf18:	0000c94c 	andi	zero,zero,805
    bf1c:	0000c218 	cmpnei	zero,zero,776
    bf20:	0000c218 	cmpnei	zero,zero,776
    bf24:	0000c218 	cmpnei	zero,zero,776
    bf28:	0000c95c 	xori	zero,zero,805
    bf2c:	0000c94c 	andi	zero,zero,805
    bf30:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf34:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf38:	0000c968 	cmpgeui	zero,zero,805
    bf3c:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf40:	0000c978 	rdprs	zero,zero,805
    bf44:	0000c84c 	andi	zero,zero,801
    bf48:	0000bf88 	cmpgei	zero,zero,766
    bf4c:	0000c86c 	andhi	zero,zero,801
    bf50:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf54:	0000c878 	rdprs	zero,zero,801
    bf58:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf5c:	0000c8d4 	movui	zero,803
    bf60:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf64:	0000ca00 	call	ca0 <xEventGroupClearBits+0x50>
    bf68:	0000c8e4 	muli	zero,zero,803
    bf6c:	d9003117 	ldw	r4,196(sp)
    bf70:	d8802d15 	stw	r2,180(sp)
    bf74:	0109c83a 	sub	r4,zero,r4
    bf78:	d9003115 	stw	r4,196(sp)
    bf7c:	94800114 	ori	r18,r18,4
    bf80:	ac400007 	ldb	r17,0(r21)
    bf84:	003f9706 	br	bde4 <__alt_data_end+0xf000bde4>
    bf88:	00800c04 	movi	r2,48
    bf8c:	d9002d17 	ldw	r4,180(sp)
    bf90:	d9402917 	ldw	r5,164(sp)
    bf94:	d8802705 	stb	r2,156(sp)
    bf98:	00801e04 	movi	r2,120
    bf9c:	d8802745 	stb	r2,157(sp)
    bfa0:	d8002785 	stb	zero,158(sp)
    bfa4:	20c00104 	addi	r3,r4,4
    bfa8:	24c00017 	ldw	r19,0(r4)
    bfac:	002d883a 	mov	r22,zero
    bfb0:	90800094 	ori	r2,r18,2
    bfb4:	28029a16 	blt	r5,zero,ca20 <___vfprintf_internal_r+0xdc0>
    bfb8:	00bfdfc4 	movi	r2,-129
    bfbc:	90a4703a 	and	r18,r18,r2
    bfc0:	d8c02d15 	stw	r3,180(sp)
    bfc4:	94800094 	ori	r18,r18,2
    bfc8:	9802871e 	bne	r19,zero,c9e8 <___vfprintf_internal_r+0xd88>
    bfcc:	00820034 	movhi	r2,2048
    bfd0:	1080e604 	addi	r2,r2,920
    bfd4:	d8803915 	stw	r2,228(sp)
    bfd8:	04401e04 	movi	r17,120
    bfdc:	d8802917 	ldw	r2,164(sp)
    bfe0:	0039883a 	mov	fp,zero
    bfe4:	1001e926 	beq	r2,zero,c78c <___vfprintf_internal_r+0xb2c>
    bfe8:	0027883a 	mov	r19,zero
    bfec:	002d883a 	mov	r22,zero
    bff0:	00020506 	br	c808 <___vfprintf_internal_r+0xba8>
    bff4:	d9002c17 	ldw	r4,176(sp)
    bff8:	b80b883a 	mov	r5,r23
    bffc:	000df300 	call	df30 <__swsetup_r>
    c000:	1005ac1e 	bne	r2,zero,d6b4 <___vfprintf_internal_r+0x1a54>
    c004:	b880030b 	ldhu	r2,12(r23)
    c008:	00c00284 	movi	r3,10
    c00c:	1080068c 	andi	r2,r2,26
    c010:	10ff3c1e 	bne	r2,r3,bd04 <__alt_data_end+0xf000bd04>
    c014:	b880038f 	ldh	r2,14(r23)
    c018:	103f3a16 	blt	r2,zero,bd04 <__alt_data_end+0xf000bd04>
    c01c:	d9c02d17 	ldw	r7,180(sp)
    c020:	d9002c17 	ldw	r4,176(sp)
    c024:	a80d883a 	mov	r6,r21
    c028:	b80b883a 	mov	r5,r23
    c02c:	000de740 	call	de74 <__sbprintf>
    c030:	00001106 	br	c078 <___vfprintf_internal_r+0x418>
    c034:	d9002c17 	ldw	r4,176(sp)
    c038:	d9801e04 	addi	r6,sp,120
    c03c:	b80b883a 	mov	r5,r23
    c040:	00143f80 	call	143f8 <__sprint_r>
    c044:	1000081e 	bne	r2,zero,c068 <___vfprintf_internal_r+0x408>
    c048:	da000404 	addi	r8,sp,16
    c04c:	003f5306 	br	bd9c <__alt_data_end+0xf000bd9c>
    c050:	d8802017 	ldw	r2,128(sp)
    c054:	10000426 	beq	r2,zero,c068 <___vfprintf_internal_r+0x408>
    c058:	d9002c17 	ldw	r4,176(sp)
    c05c:	d9801e04 	addi	r6,sp,120
    c060:	b80b883a 	mov	r5,r23
    c064:	00143f80 	call	143f8 <__sprint_r>
    c068:	b880030b 	ldhu	r2,12(r23)
    c06c:	1080100c 	andi	r2,r2,64
    c070:	1005901e 	bne	r2,zero,d6b4 <___vfprintf_internal_r+0x1a54>
    c074:	d8802f17 	ldw	r2,188(sp)
    c078:	dfc04717 	ldw	ra,284(sp)
    c07c:	df004617 	ldw	fp,280(sp)
    c080:	ddc04517 	ldw	r23,276(sp)
    c084:	dd804417 	ldw	r22,272(sp)
    c088:	dd404317 	ldw	r21,268(sp)
    c08c:	dd004217 	ldw	r20,264(sp)
    c090:	dcc04117 	ldw	r19,260(sp)
    c094:	dc804017 	ldw	r18,256(sp)
    c098:	dc403f17 	ldw	r17,252(sp)
    c09c:	dc003e17 	ldw	r16,248(sp)
    c0a0:	dec04804 	addi	sp,sp,288
    c0a4:	f800283a 	ret
    c0a8:	d9002c17 	ldw	r4,176(sp)
    c0ac:	000ff040 	call	ff04 <__sinit>
    c0b0:	003f0406 	br	bcc4 <__alt_data_end+0xf000bcc4>
    c0b4:	d8802d17 	ldw	r2,180(sp)
    c0b8:	d9002d17 	ldw	r4,180(sp)
    c0bc:	10800017 	ldw	r2,0(r2)
    c0c0:	d8803115 	stw	r2,196(sp)
    c0c4:	20800104 	addi	r2,r4,4
    c0c8:	d9003117 	ldw	r4,196(sp)
    c0cc:	203fa716 	blt	r4,zero,bf6c <__alt_data_end+0xf000bf6c>
    c0d0:	d8802d15 	stw	r2,180(sp)
    c0d4:	ac400007 	ldb	r17,0(r21)
    c0d8:	003f4206 	br	bde4 <__alt_data_end+0xf000bde4>
    c0dc:	ac400007 	ldb	r17,0(r21)
    c0e0:	aac00044 	addi	r11,r21,1
    c0e4:	8a872826 	beq	r17,r10,dd88 <___vfprintf_internal_r+0x2128>
    c0e8:	88bff404 	addi	r2,r17,-48
    c0ec:	0009883a 	mov	r4,zero
    c0f0:	30867d36 	bltu	r6,r2,dae8 <___vfprintf_internal_r+0x1e88>
    c0f4:	5c400007 	ldb	r17,0(r11)
    c0f8:	210002a4 	muli	r4,r4,10
    c0fc:	5d400044 	addi	r21,r11,1
    c100:	a817883a 	mov	r11,r21
    c104:	2089883a 	add	r4,r4,r2
    c108:	88bff404 	addi	r2,r17,-48
    c10c:	30bff92e 	bgeu	r6,r2,c0f4 <__alt_data_end+0xf000c0f4>
    c110:	2005c916 	blt	r4,zero,d838 <___vfprintf_internal_r+0x1bd8>
    c114:	d9002915 	stw	r4,164(sp)
    c118:	003f3306 	br	bde8 <__alt_data_end+0xf000bde8>
    c11c:	94802014 	ori	r18,r18,128
    c120:	ac400007 	ldb	r17,0(r21)
    c124:	003f2f06 	br	bde4 <__alt_data_end+0xf000bde4>
    c128:	a809883a 	mov	r4,r21
    c12c:	d8003115 	stw	zero,196(sp)
    c130:	88bff404 	addi	r2,r17,-48
    c134:	0017883a 	mov	r11,zero
    c138:	24400007 	ldb	r17,0(r4)
    c13c:	5ac002a4 	muli	r11,r11,10
    c140:	ad400044 	addi	r21,r21,1
    c144:	a809883a 	mov	r4,r21
    c148:	12d7883a 	add	r11,r2,r11
    c14c:	88bff404 	addi	r2,r17,-48
    c150:	30bff92e 	bgeu	r6,r2,c138 <__alt_data_end+0xf000c138>
    c154:	dac03115 	stw	r11,196(sp)
    c158:	003f2306 	br	bde8 <__alt_data_end+0xf000bde8>
    c15c:	18c03fcc 	andi	r3,r3,255
    c160:	18072b1e 	bne	r3,zero,de10 <___vfprintf_internal_r+0x21b0>
    c164:	94800414 	ori	r18,r18,16
    c168:	9080080c 	andi	r2,r18,32
    c16c:	10037b26 	beq	r2,zero,cf5c <___vfprintf_internal_r+0x12fc>
    c170:	d9402d17 	ldw	r5,180(sp)
    c174:	28800117 	ldw	r2,4(r5)
    c178:	2cc00017 	ldw	r19,0(r5)
    c17c:	29400204 	addi	r5,r5,8
    c180:	d9402d15 	stw	r5,180(sp)
    c184:	102d883a 	mov	r22,r2
    c188:	10044b16 	blt	r2,zero,d2b8 <___vfprintf_internal_r+0x1658>
    c18c:	d9402917 	ldw	r5,164(sp)
    c190:	df002783 	ldbu	fp,158(sp)
    c194:	2803bc16 	blt	r5,zero,d088 <___vfprintf_internal_r+0x1428>
    c198:	00ffdfc4 	movi	r3,-129
    c19c:	9d84b03a 	or	r2,r19,r22
    c1a0:	90e4703a 	and	r18,r18,r3
    c1a4:	10017726 	beq	r2,zero,c784 <___vfprintf_internal_r+0xb24>
    c1a8:	b0038326 	beq	r22,zero,cfb8 <___vfprintf_internal_r+0x1358>
    c1ac:	dc402a15 	stw	r17,168(sp)
    c1b0:	dc001e04 	addi	r16,sp,120
    c1b4:	b023883a 	mov	r17,r22
    c1b8:	402d883a 	mov	r22,r8
    c1bc:	9809883a 	mov	r4,r19
    c1c0:	880b883a 	mov	r5,r17
    c1c4:	01800284 	movi	r6,10
    c1c8:	000f883a 	mov	r7,zero
    c1cc:	00167f00 	call	167f0 <__umoddi3>
    c1d0:	10800c04 	addi	r2,r2,48
    c1d4:	843fffc4 	addi	r16,r16,-1
    c1d8:	9809883a 	mov	r4,r19
    c1dc:	880b883a 	mov	r5,r17
    c1e0:	80800005 	stb	r2,0(r16)
    c1e4:	01800284 	movi	r6,10
    c1e8:	000f883a 	mov	r7,zero
    c1ec:	00162780 	call	16278 <__udivdi3>
    c1f0:	1027883a 	mov	r19,r2
    c1f4:	10c4b03a 	or	r2,r2,r3
    c1f8:	1823883a 	mov	r17,r3
    c1fc:	103fef1e 	bne	r2,zero,c1bc <__alt_data_end+0xf000c1bc>
    c200:	d8c02817 	ldw	r3,160(sp)
    c204:	dc402a17 	ldw	r17,168(sp)
    c208:	b011883a 	mov	r8,r22
    c20c:	1c07c83a 	sub	r3,r3,r16
    c210:	d8c02e15 	stw	r3,184(sp)
    c214:	00005906 	br	c37c <___vfprintf_internal_r+0x71c>
    c218:	18c03fcc 	andi	r3,r3,255
    c21c:	1806fa1e 	bne	r3,zero,de08 <___vfprintf_internal_r+0x21a8>
    c220:	9080020c 	andi	r2,r18,8
    c224:	10048a26 	beq	r2,zero,d450 <___vfprintf_internal_r+0x17f0>
    c228:	d8c02d17 	ldw	r3,180(sp)
    c22c:	d9002d17 	ldw	r4,180(sp)
    c230:	d9402d17 	ldw	r5,180(sp)
    c234:	18c00017 	ldw	r3,0(r3)
    c238:	21000117 	ldw	r4,4(r4)
    c23c:	29400204 	addi	r5,r5,8
    c240:	d8c03615 	stw	r3,216(sp)
    c244:	d9003815 	stw	r4,224(sp)
    c248:	d9402d15 	stw	r5,180(sp)
    c24c:	d9003617 	ldw	r4,216(sp)
    c250:	d9403817 	ldw	r5,224(sp)
    c254:	da003d15 	stw	r8,244(sp)
    c258:	04000044 	movi	r16,1
    c25c:	0012c100 	call	12c10 <__fpclassifyd>
    c260:	da003d17 	ldw	r8,244(sp)
    c264:	14041f1e 	bne	r2,r16,d2e4 <___vfprintf_internal_r+0x1684>
    c268:	d9003617 	ldw	r4,216(sp)
    c26c:	d9403817 	ldw	r5,224(sp)
    c270:	000d883a 	mov	r6,zero
    c274:	000f883a 	mov	r7,zero
    c278:	001765c0 	call	1765c <__ledf2>
    c27c:	da003d17 	ldw	r8,244(sp)
    c280:	1005be16 	blt	r2,zero,d97c <___vfprintf_internal_r+0x1d1c>
    c284:	df002783 	ldbu	fp,158(sp)
    c288:	008011c4 	movi	r2,71
    c28c:	1445330e 	bge	r2,r17,d75c <___vfprintf_internal_r+0x1afc>
    c290:	04020034 	movhi	r16,2048
    c294:	8400de04 	addi	r16,r16,888
    c298:	00c000c4 	movi	r3,3
    c29c:	00bfdfc4 	movi	r2,-129
    c2a0:	d8c02a15 	stw	r3,168(sp)
    c2a4:	90a4703a 	and	r18,r18,r2
    c2a8:	d8c02e15 	stw	r3,184(sp)
    c2ac:	d8002915 	stw	zero,164(sp)
    c2b0:	d8003215 	stw	zero,200(sp)
    c2b4:	00003706 	br	c394 <___vfprintf_internal_r+0x734>
    c2b8:	94800214 	ori	r18,r18,8
    c2bc:	ac400007 	ldb	r17,0(r21)
    c2c0:	003ec806 	br	bde4 <__alt_data_end+0xf000bde4>
    c2c4:	18c03fcc 	andi	r3,r3,255
    c2c8:	1806db1e 	bne	r3,zero,de38 <___vfprintf_internal_r+0x21d8>
    c2cc:	94800414 	ori	r18,r18,16
    c2d0:	9080080c 	andi	r2,r18,32
    c2d4:	1002d826 	beq	r2,zero,ce38 <___vfprintf_internal_r+0x11d8>
    c2d8:	d9402d17 	ldw	r5,180(sp)
    c2dc:	d8c02917 	ldw	r3,164(sp)
    c2e0:	d8002785 	stb	zero,158(sp)
    c2e4:	28800204 	addi	r2,r5,8
    c2e8:	2cc00017 	ldw	r19,0(r5)
    c2ec:	2d800117 	ldw	r22,4(r5)
    c2f0:	18048f16 	blt	r3,zero,d530 <___vfprintf_internal_r+0x18d0>
    c2f4:	013fdfc4 	movi	r4,-129
    c2f8:	9d86b03a 	or	r3,r19,r22
    c2fc:	d8802d15 	stw	r2,180(sp)
    c300:	9124703a 	and	r18,r18,r4
    c304:	1802d91e 	bne	r3,zero,ce6c <___vfprintf_internal_r+0x120c>
    c308:	d8c02917 	ldw	r3,164(sp)
    c30c:	0039883a 	mov	fp,zero
    c310:	1805c326 	beq	r3,zero,da20 <___vfprintf_internal_r+0x1dc0>
    c314:	0027883a 	mov	r19,zero
    c318:	002d883a 	mov	r22,zero
    c31c:	dc001e04 	addi	r16,sp,120
    c320:	9806d0fa 	srli	r3,r19,3
    c324:	b008977a 	slli	r4,r22,29
    c328:	b02cd0fa 	srli	r22,r22,3
    c32c:	9cc001cc 	andi	r19,r19,7
    c330:	98800c04 	addi	r2,r19,48
    c334:	843fffc4 	addi	r16,r16,-1
    c338:	20e6b03a 	or	r19,r4,r3
    c33c:	80800005 	stb	r2,0(r16)
    c340:	9d86b03a 	or	r3,r19,r22
    c344:	183ff61e 	bne	r3,zero,c320 <__alt_data_end+0xf000c320>
    c348:	90c0004c 	andi	r3,r18,1
    c34c:	18013b26 	beq	r3,zero,c83c <___vfprintf_internal_r+0xbdc>
    c350:	10803fcc 	andi	r2,r2,255
    c354:	1080201c 	xori	r2,r2,128
    c358:	10bfe004 	addi	r2,r2,-128
    c35c:	00c00c04 	movi	r3,48
    c360:	10c13626 	beq	r2,r3,c83c <___vfprintf_internal_r+0xbdc>
    c364:	80ffffc5 	stb	r3,-1(r16)
    c368:	d8c02817 	ldw	r3,160(sp)
    c36c:	80bfffc4 	addi	r2,r16,-1
    c370:	1021883a 	mov	r16,r2
    c374:	1887c83a 	sub	r3,r3,r2
    c378:	d8c02e15 	stw	r3,184(sp)
    c37c:	d8802e17 	ldw	r2,184(sp)
    c380:	d9002917 	ldw	r4,164(sp)
    c384:	1100010e 	bge	r2,r4,c38c <___vfprintf_internal_r+0x72c>
    c388:	2005883a 	mov	r2,r4
    c38c:	d8802a15 	stw	r2,168(sp)
    c390:	d8003215 	stw	zero,200(sp)
    c394:	e7003fcc 	andi	fp,fp,255
    c398:	e700201c 	xori	fp,fp,128
    c39c:	e73fe004 	addi	fp,fp,-128
    c3a0:	e0000326 	beq	fp,zero,c3b0 <___vfprintf_internal_r+0x750>
    c3a4:	d8c02a17 	ldw	r3,168(sp)
    c3a8:	18c00044 	addi	r3,r3,1
    c3ac:	d8c02a15 	stw	r3,168(sp)
    c3b0:	90c0008c 	andi	r3,r18,2
    c3b4:	d8c02b15 	stw	r3,172(sp)
    c3b8:	18000326 	beq	r3,zero,c3c8 <___vfprintf_internal_r+0x768>
    c3bc:	d8c02a17 	ldw	r3,168(sp)
    c3c0:	18c00084 	addi	r3,r3,2
    c3c4:	d8c02a15 	stw	r3,168(sp)
    c3c8:	90c0210c 	andi	r3,r18,132
    c3cc:	d8c03015 	stw	r3,192(sp)
    c3d0:	1801a31e 	bne	r3,zero,ca60 <___vfprintf_internal_r+0xe00>
    c3d4:	d9003117 	ldw	r4,196(sp)
    c3d8:	d8c02a17 	ldw	r3,168(sp)
    c3dc:	20e7c83a 	sub	r19,r4,r3
    c3e0:	04c19f0e 	bge	zero,r19,ca60 <___vfprintf_internal_r+0xe00>
    c3e4:	02400404 	movi	r9,16
    c3e8:	d8c02017 	ldw	r3,128(sp)
    c3ec:	d8801f17 	ldw	r2,124(sp)
    c3f0:	4cc50d0e 	bge	r9,r19,d828 <___vfprintf_internal_r+0x1bc8>
    c3f4:	01420034 	movhi	r5,2048
    c3f8:	2940f984 	addi	r5,r5,998
    c3fc:	dc403b15 	stw	r17,236(sp)
    c400:	d9403515 	stw	r5,212(sp)
    c404:	9823883a 	mov	r17,r19
    c408:	482d883a 	mov	r22,r9
    c40c:	9027883a 	mov	r19,r18
    c410:	070001c4 	movi	fp,7
    c414:	8025883a 	mov	r18,r16
    c418:	dc002c17 	ldw	r16,176(sp)
    c41c:	00000306 	br	c42c <___vfprintf_internal_r+0x7cc>
    c420:	8c7ffc04 	addi	r17,r17,-16
    c424:	42000204 	addi	r8,r8,8
    c428:	b440130e 	bge	r22,r17,c478 <___vfprintf_internal_r+0x818>
    c42c:	01020034 	movhi	r4,2048
    c430:	18c00404 	addi	r3,r3,16
    c434:	10800044 	addi	r2,r2,1
    c438:	2100f984 	addi	r4,r4,998
    c43c:	41000015 	stw	r4,0(r8)
    c440:	45800115 	stw	r22,4(r8)
    c444:	d8c02015 	stw	r3,128(sp)
    c448:	d8801f15 	stw	r2,124(sp)
    c44c:	e0bff40e 	bge	fp,r2,c420 <__alt_data_end+0xf000c420>
    c450:	d9801e04 	addi	r6,sp,120
    c454:	b80b883a 	mov	r5,r23
    c458:	8009883a 	mov	r4,r16
    c45c:	00143f80 	call	143f8 <__sprint_r>
    c460:	103f011e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    c464:	8c7ffc04 	addi	r17,r17,-16
    c468:	d8c02017 	ldw	r3,128(sp)
    c46c:	d8801f17 	ldw	r2,124(sp)
    c470:	da000404 	addi	r8,sp,16
    c474:	b47fed16 	blt	r22,r17,c42c <__alt_data_end+0xf000c42c>
    c478:	9021883a 	mov	r16,r18
    c47c:	9825883a 	mov	r18,r19
    c480:	8827883a 	mov	r19,r17
    c484:	dc403b17 	ldw	r17,236(sp)
    c488:	d9403517 	ldw	r5,212(sp)
    c48c:	98c7883a 	add	r3,r19,r3
    c490:	10800044 	addi	r2,r2,1
    c494:	41400015 	stw	r5,0(r8)
    c498:	44c00115 	stw	r19,4(r8)
    c49c:	d8c02015 	stw	r3,128(sp)
    c4a0:	d8801f15 	stw	r2,124(sp)
    c4a4:	010001c4 	movi	r4,7
    c4a8:	2082a316 	blt	r4,r2,cf38 <___vfprintf_internal_r+0x12d8>
    c4ac:	df002787 	ldb	fp,158(sp)
    c4b0:	42000204 	addi	r8,r8,8
    c4b4:	e0000c26 	beq	fp,zero,c4e8 <___vfprintf_internal_r+0x888>
    c4b8:	d8801f17 	ldw	r2,124(sp)
    c4bc:	d9002784 	addi	r4,sp,158
    c4c0:	18c00044 	addi	r3,r3,1
    c4c4:	10800044 	addi	r2,r2,1
    c4c8:	41000015 	stw	r4,0(r8)
    c4cc:	01000044 	movi	r4,1
    c4d0:	41000115 	stw	r4,4(r8)
    c4d4:	d8c02015 	stw	r3,128(sp)
    c4d8:	d8801f15 	stw	r2,124(sp)
    c4dc:	010001c4 	movi	r4,7
    c4e0:	20823c16 	blt	r4,r2,cdd4 <___vfprintf_internal_r+0x1174>
    c4e4:	42000204 	addi	r8,r8,8
    c4e8:	d8802b17 	ldw	r2,172(sp)
    c4ec:	10000c26 	beq	r2,zero,c520 <___vfprintf_internal_r+0x8c0>
    c4f0:	d8801f17 	ldw	r2,124(sp)
    c4f4:	d9002704 	addi	r4,sp,156
    c4f8:	18c00084 	addi	r3,r3,2
    c4fc:	10800044 	addi	r2,r2,1
    c500:	41000015 	stw	r4,0(r8)
    c504:	01000084 	movi	r4,2
    c508:	41000115 	stw	r4,4(r8)
    c50c:	d8c02015 	stw	r3,128(sp)
    c510:	d8801f15 	stw	r2,124(sp)
    c514:	010001c4 	movi	r4,7
    c518:	20823616 	blt	r4,r2,cdf4 <___vfprintf_internal_r+0x1194>
    c51c:	42000204 	addi	r8,r8,8
    c520:	d9003017 	ldw	r4,192(sp)
    c524:	00802004 	movi	r2,128
    c528:	20819926 	beq	r4,r2,cb90 <___vfprintf_internal_r+0xf30>
    c52c:	d9402917 	ldw	r5,164(sp)
    c530:	d8802e17 	ldw	r2,184(sp)
    c534:	28adc83a 	sub	r22,r5,r2
    c538:	0580310e 	bge	zero,r22,c600 <___vfprintf_internal_r+0x9a0>
    c53c:	07000404 	movi	fp,16
    c540:	d8801f17 	ldw	r2,124(sp)
    c544:	e584140e 	bge	fp,r22,d598 <___vfprintf_internal_r+0x1938>
    c548:	01420034 	movhi	r5,2048
    c54c:	2940f584 	addi	r5,r5,982
    c550:	dc402915 	stw	r17,164(sp)
    c554:	d9402b15 	stw	r5,172(sp)
    c558:	b023883a 	mov	r17,r22
    c55c:	04c001c4 	movi	r19,7
    c560:	a82d883a 	mov	r22,r21
    c564:	902b883a 	mov	r21,r18
    c568:	8025883a 	mov	r18,r16
    c56c:	dc002c17 	ldw	r16,176(sp)
    c570:	00000306 	br	c580 <___vfprintf_internal_r+0x920>
    c574:	8c7ffc04 	addi	r17,r17,-16
    c578:	42000204 	addi	r8,r8,8
    c57c:	e440110e 	bge	fp,r17,c5c4 <___vfprintf_internal_r+0x964>
    c580:	18c00404 	addi	r3,r3,16
    c584:	10800044 	addi	r2,r2,1
    c588:	45000015 	stw	r20,0(r8)
    c58c:	47000115 	stw	fp,4(r8)
    c590:	d8c02015 	stw	r3,128(sp)
    c594:	d8801f15 	stw	r2,124(sp)
    c598:	98bff60e 	bge	r19,r2,c574 <__alt_data_end+0xf000c574>
    c59c:	d9801e04 	addi	r6,sp,120
    c5a0:	b80b883a 	mov	r5,r23
    c5a4:	8009883a 	mov	r4,r16
    c5a8:	00143f80 	call	143f8 <__sprint_r>
    c5ac:	103eae1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    c5b0:	8c7ffc04 	addi	r17,r17,-16
    c5b4:	d8c02017 	ldw	r3,128(sp)
    c5b8:	d8801f17 	ldw	r2,124(sp)
    c5bc:	da000404 	addi	r8,sp,16
    c5c0:	e47fef16 	blt	fp,r17,c580 <__alt_data_end+0xf000c580>
    c5c4:	9021883a 	mov	r16,r18
    c5c8:	a825883a 	mov	r18,r21
    c5cc:	b02b883a 	mov	r21,r22
    c5d0:	882d883a 	mov	r22,r17
    c5d4:	dc402917 	ldw	r17,164(sp)
    c5d8:	d9002b17 	ldw	r4,172(sp)
    c5dc:	1d87883a 	add	r3,r3,r22
    c5e0:	10800044 	addi	r2,r2,1
    c5e4:	41000015 	stw	r4,0(r8)
    c5e8:	45800115 	stw	r22,4(r8)
    c5ec:	d8c02015 	stw	r3,128(sp)
    c5f0:	d8801f15 	stw	r2,124(sp)
    c5f4:	010001c4 	movi	r4,7
    c5f8:	2081ee16 	blt	r4,r2,cdb4 <___vfprintf_internal_r+0x1154>
    c5fc:	42000204 	addi	r8,r8,8
    c600:	9080400c 	andi	r2,r18,256
    c604:	1001181e 	bne	r2,zero,ca68 <___vfprintf_internal_r+0xe08>
    c608:	d9402e17 	ldw	r5,184(sp)
    c60c:	d8801f17 	ldw	r2,124(sp)
    c610:	44000015 	stw	r16,0(r8)
    c614:	1947883a 	add	r3,r3,r5
    c618:	10800044 	addi	r2,r2,1
    c61c:	41400115 	stw	r5,4(r8)
    c620:	d8c02015 	stw	r3,128(sp)
    c624:	d8801f15 	stw	r2,124(sp)
    c628:	010001c4 	movi	r4,7
    c62c:	2081d316 	blt	r4,r2,cd7c <___vfprintf_internal_r+0x111c>
    c630:	42000204 	addi	r8,r8,8
    c634:	9480010c 	andi	r18,r18,4
    c638:	90003226 	beq	r18,zero,c704 <___vfprintf_internal_r+0xaa4>
    c63c:	d9403117 	ldw	r5,196(sp)
    c640:	d8802a17 	ldw	r2,168(sp)
    c644:	28a1c83a 	sub	r16,r5,r2
    c648:	04002e0e 	bge	zero,r16,c704 <___vfprintf_internal_r+0xaa4>
    c64c:	04400404 	movi	r17,16
    c650:	d8801f17 	ldw	r2,124(sp)
    c654:	8c04a20e 	bge	r17,r16,d8e0 <___vfprintf_internal_r+0x1c80>
    c658:	01420034 	movhi	r5,2048
    c65c:	2940f984 	addi	r5,r5,998
    c660:	d9403515 	stw	r5,212(sp)
    c664:	048001c4 	movi	r18,7
    c668:	dcc02c17 	ldw	r19,176(sp)
    c66c:	00000306 	br	c67c <___vfprintf_internal_r+0xa1c>
    c670:	843ffc04 	addi	r16,r16,-16
    c674:	42000204 	addi	r8,r8,8
    c678:	8c00130e 	bge	r17,r16,c6c8 <___vfprintf_internal_r+0xa68>
    c67c:	01020034 	movhi	r4,2048
    c680:	18c00404 	addi	r3,r3,16
    c684:	10800044 	addi	r2,r2,1
    c688:	2100f984 	addi	r4,r4,998
    c68c:	41000015 	stw	r4,0(r8)
    c690:	44400115 	stw	r17,4(r8)
    c694:	d8c02015 	stw	r3,128(sp)
    c698:	d8801f15 	stw	r2,124(sp)
    c69c:	90bff40e 	bge	r18,r2,c670 <__alt_data_end+0xf000c670>
    c6a0:	d9801e04 	addi	r6,sp,120
    c6a4:	b80b883a 	mov	r5,r23
    c6a8:	9809883a 	mov	r4,r19
    c6ac:	00143f80 	call	143f8 <__sprint_r>
    c6b0:	103e6d1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    c6b4:	843ffc04 	addi	r16,r16,-16
    c6b8:	d8c02017 	ldw	r3,128(sp)
    c6bc:	d8801f17 	ldw	r2,124(sp)
    c6c0:	da000404 	addi	r8,sp,16
    c6c4:	8c3fed16 	blt	r17,r16,c67c <__alt_data_end+0xf000c67c>
    c6c8:	d9403517 	ldw	r5,212(sp)
    c6cc:	1c07883a 	add	r3,r3,r16
    c6d0:	10800044 	addi	r2,r2,1
    c6d4:	41400015 	stw	r5,0(r8)
    c6d8:	44000115 	stw	r16,4(r8)
    c6dc:	d8c02015 	stw	r3,128(sp)
    c6e0:	d8801f15 	stw	r2,124(sp)
    c6e4:	010001c4 	movi	r4,7
    c6e8:	2080060e 	bge	r4,r2,c704 <___vfprintf_internal_r+0xaa4>
    c6ec:	d9002c17 	ldw	r4,176(sp)
    c6f0:	d9801e04 	addi	r6,sp,120
    c6f4:	b80b883a 	mov	r5,r23
    c6f8:	00143f80 	call	143f8 <__sprint_r>
    c6fc:	103e5a1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    c700:	d8c02017 	ldw	r3,128(sp)
    c704:	d8803117 	ldw	r2,196(sp)
    c708:	d9002a17 	ldw	r4,168(sp)
    c70c:	1100010e 	bge	r2,r4,c714 <___vfprintf_internal_r+0xab4>
    c710:	2005883a 	mov	r2,r4
    c714:	d9402f17 	ldw	r5,188(sp)
    c718:	288b883a 	add	r5,r5,r2
    c71c:	d9402f15 	stw	r5,188(sp)
    c720:	18019e1e 	bne	r3,zero,cd9c <___vfprintf_internal_r+0x113c>
    c724:	a8800007 	ldb	r2,0(r21)
    c728:	d8001f15 	stw	zero,124(sp)
    c72c:	da000404 	addi	r8,sp,16
    c730:	103d851e 	bne	r2,zero,bd48 <__alt_data_end+0xf000bd48>
    c734:	a821883a 	mov	r16,r21
    c738:	003d9b06 	br	bda8 <__alt_data_end+0xf000bda8>
    c73c:	18c03fcc 	andi	r3,r3,255
    c740:	1805c11e 	bne	r3,zero,de48 <___vfprintf_internal_r+0x21e8>
    c744:	94800414 	ori	r18,r18,16
    c748:	9080080c 	andi	r2,r18,32
    c74c:	10020c26 	beq	r2,zero,cf80 <___vfprintf_internal_r+0x1320>
    c750:	d8802d17 	ldw	r2,180(sp)
    c754:	d9002917 	ldw	r4,164(sp)
    c758:	d8002785 	stb	zero,158(sp)
    c75c:	10c00204 	addi	r3,r2,8
    c760:	14c00017 	ldw	r19,0(r2)
    c764:	15800117 	ldw	r22,4(r2)
    c768:	20040f16 	blt	r4,zero,d7a8 <___vfprintf_internal_r+0x1b48>
    c76c:	013fdfc4 	movi	r4,-129
    c770:	9d84b03a 	or	r2,r19,r22
    c774:	d8c02d15 	stw	r3,180(sp)
    c778:	9124703a 	and	r18,r18,r4
    c77c:	0039883a 	mov	fp,zero
    c780:	103e891e 	bne	r2,zero,c1a8 <__alt_data_end+0xf000c1a8>
    c784:	d9002917 	ldw	r4,164(sp)
    c788:	2002c11e 	bne	r4,zero,d290 <___vfprintf_internal_r+0x1630>
    c78c:	d8002915 	stw	zero,164(sp)
    c790:	d8002e15 	stw	zero,184(sp)
    c794:	dc001e04 	addi	r16,sp,120
    c798:	003ef806 	br	c37c <__alt_data_end+0xf000c37c>
    c79c:	18c03fcc 	andi	r3,r3,255
    c7a0:	18059d1e 	bne	r3,zero,de18 <___vfprintf_internal_r+0x21b8>
    c7a4:	01420034 	movhi	r5,2048
    c7a8:	2940e104 	addi	r5,r5,900
    c7ac:	d9403915 	stw	r5,228(sp)
    c7b0:	9080080c 	andi	r2,r18,32
    c7b4:	10005226 	beq	r2,zero,c900 <___vfprintf_internal_r+0xca0>
    c7b8:	d8802d17 	ldw	r2,180(sp)
    c7bc:	14c00017 	ldw	r19,0(r2)
    c7c0:	15800117 	ldw	r22,4(r2)
    c7c4:	10800204 	addi	r2,r2,8
    c7c8:	d8802d15 	stw	r2,180(sp)
    c7cc:	9080004c 	andi	r2,r18,1
    c7d0:	10019026 	beq	r2,zero,ce14 <___vfprintf_internal_r+0x11b4>
    c7d4:	9d84b03a 	or	r2,r19,r22
    c7d8:	10036926 	beq	r2,zero,d580 <___vfprintf_internal_r+0x1920>
    c7dc:	d8c02917 	ldw	r3,164(sp)
    c7e0:	00800c04 	movi	r2,48
    c7e4:	d8802705 	stb	r2,156(sp)
    c7e8:	dc402745 	stb	r17,157(sp)
    c7ec:	d8002785 	stb	zero,158(sp)
    c7f0:	90800094 	ori	r2,r18,2
    c7f4:	18045d16 	blt	r3,zero,d96c <___vfprintf_internal_r+0x1d0c>
    c7f8:	00bfdfc4 	movi	r2,-129
    c7fc:	90a4703a 	and	r18,r18,r2
    c800:	94800094 	ori	r18,r18,2
    c804:	0039883a 	mov	fp,zero
    c808:	d9003917 	ldw	r4,228(sp)
    c80c:	dc001e04 	addi	r16,sp,120
    c810:	988003cc 	andi	r2,r19,15
    c814:	b006973a 	slli	r3,r22,28
    c818:	2085883a 	add	r2,r4,r2
    c81c:	9826d13a 	srli	r19,r19,4
    c820:	10800003 	ldbu	r2,0(r2)
    c824:	b02cd13a 	srli	r22,r22,4
    c828:	843fffc4 	addi	r16,r16,-1
    c82c:	1ce6b03a 	or	r19,r3,r19
    c830:	80800005 	stb	r2,0(r16)
    c834:	9d84b03a 	or	r2,r19,r22
    c838:	103ff51e 	bne	r2,zero,c810 <__alt_data_end+0xf000c810>
    c83c:	d8c02817 	ldw	r3,160(sp)
    c840:	1c07c83a 	sub	r3,r3,r16
    c844:	d8c02e15 	stw	r3,184(sp)
    c848:	003ecc06 	br	c37c <__alt_data_end+0xf000c37c>
    c84c:	18c03fcc 	andi	r3,r3,255
    c850:	183e9f26 	beq	r3,zero,c2d0 <__alt_data_end+0xf000c2d0>
    c854:	d9c02785 	stb	r7,158(sp)
    c858:	003e9d06 	br	c2d0 <__alt_data_end+0xf000c2d0>
    c85c:	00c00044 	movi	r3,1
    c860:	01c00ac4 	movi	r7,43
    c864:	ac400007 	ldb	r17,0(r21)
    c868:	003d5e06 	br	bde4 <__alt_data_end+0xf000bde4>
    c86c:	94800814 	ori	r18,r18,32
    c870:	ac400007 	ldb	r17,0(r21)
    c874:	003d5b06 	br	bde4 <__alt_data_end+0xf000bde4>
    c878:	d8c02d17 	ldw	r3,180(sp)
    c87c:	d8002785 	stb	zero,158(sp)
    c880:	1c000017 	ldw	r16,0(r3)
    c884:	1cc00104 	addi	r19,r3,4
    c888:	80041926 	beq	r16,zero,d8f0 <___vfprintf_internal_r+0x1c90>
    c88c:	d9002917 	ldw	r4,164(sp)
    c890:	2003d016 	blt	r4,zero,d7d4 <___vfprintf_internal_r+0x1b74>
    c894:	200d883a 	mov	r6,r4
    c898:	000b883a 	mov	r5,zero
    c89c:	8009883a 	mov	r4,r16
    c8a0:	da003d15 	stw	r8,244(sp)
    c8a4:	00114700 	call	11470 <memchr>
    c8a8:	da003d17 	ldw	r8,244(sp)
    c8ac:	10045426 	beq	r2,zero,da00 <___vfprintf_internal_r+0x1da0>
    c8b0:	1405c83a 	sub	r2,r2,r16
    c8b4:	d8802e15 	stw	r2,184(sp)
    c8b8:	1003cc16 	blt	r2,zero,d7ec <___vfprintf_internal_r+0x1b8c>
    c8bc:	df002783 	ldbu	fp,158(sp)
    c8c0:	d8802a15 	stw	r2,168(sp)
    c8c4:	dcc02d15 	stw	r19,180(sp)
    c8c8:	d8002915 	stw	zero,164(sp)
    c8cc:	d8003215 	stw	zero,200(sp)
    c8d0:	003eb006 	br	c394 <__alt_data_end+0xf000c394>
    c8d4:	18c03fcc 	andi	r3,r3,255
    c8d8:	183f9b26 	beq	r3,zero,c748 <__alt_data_end+0xf000c748>
    c8dc:	d9c02785 	stb	r7,158(sp)
    c8e0:	003f9906 	br	c748 <__alt_data_end+0xf000c748>
    c8e4:	18c03fcc 	andi	r3,r3,255
    c8e8:	1805551e 	bne	r3,zero,de40 <___vfprintf_internal_r+0x21e0>
    c8ec:	01420034 	movhi	r5,2048
    c8f0:	2940e604 	addi	r5,r5,920
    c8f4:	d9403915 	stw	r5,228(sp)
    c8f8:	9080080c 	andi	r2,r18,32
    c8fc:	103fae1e 	bne	r2,zero,c7b8 <__alt_data_end+0xf000c7b8>
    c900:	9080040c 	andi	r2,r18,16
    c904:	1002de26 	beq	r2,zero,d480 <___vfprintf_internal_r+0x1820>
    c908:	d8c02d17 	ldw	r3,180(sp)
    c90c:	002d883a 	mov	r22,zero
    c910:	1cc00017 	ldw	r19,0(r3)
    c914:	18c00104 	addi	r3,r3,4
    c918:	d8c02d15 	stw	r3,180(sp)
    c91c:	003fab06 	br	c7cc <__alt_data_end+0xf000c7cc>
    c920:	38803fcc 	andi	r2,r7,255
    c924:	1080201c 	xori	r2,r2,128
    c928:	10bfe004 	addi	r2,r2,-128
    c92c:	1002d21e 	bne	r2,zero,d478 <___vfprintf_internal_r+0x1818>
    c930:	00c00044 	movi	r3,1
    c934:	01c00804 	movi	r7,32
    c938:	ac400007 	ldb	r17,0(r21)
    c93c:	003d2906 	br	bde4 <__alt_data_end+0xf000bde4>
    c940:	94800054 	ori	r18,r18,1
    c944:	ac400007 	ldb	r17,0(r21)
    c948:	003d2606 	br	bde4 <__alt_data_end+0xf000bde4>
    c94c:	18c03fcc 	andi	r3,r3,255
    c950:	183e0526 	beq	r3,zero,c168 <__alt_data_end+0xf000c168>
    c954:	d9c02785 	stb	r7,158(sp)
    c958:	003e0306 	br	c168 <__alt_data_end+0xf000c168>
    c95c:	94801014 	ori	r18,r18,64
    c960:	ac400007 	ldb	r17,0(r21)
    c964:	003d1f06 	br	bde4 <__alt_data_end+0xf000bde4>
    c968:	ac400007 	ldb	r17,0(r21)
    c96c:	8a438726 	beq	r17,r9,d78c <___vfprintf_internal_r+0x1b2c>
    c970:	94800414 	ori	r18,r18,16
    c974:	003d1b06 	br	bde4 <__alt_data_end+0xf000bde4>
    c978:	18c03fcc 	andi	r3,r3,255
    c97c:	1805341e 	bne	r3,zero,de50 <___vfprintf_internal_r+0x21f0>
    c980:	9080080c 	andi	r2,r18,32
    c984:	1002cd26 	beq	r2,zero,d4bc <___vfprintf_internal_r+0x185c>
    c988:	d9402d17 	ldw	r5,180(sp)
    c98c:	d9002f17 	ldw	r4,188(sp)
    c990:	28800017 	ldw	r2,0(r5)
    c994:	2007d7fa 	srai	r3,r4,31
    c998:	29400104 	addi	r5,r5,4
    c99c:	d9402d15 	stw	r5,180(sp)
    c9a0:	11000015 	stw	r4,0(r2)
    c9a4:	10c00115 	stw	r3,4(r2)
    c9a8:	003ce506 	br	bd40 <__alt_data_end+0xf000bd40>
    c9ac:	d8c02d17 	ldw	r3,180(sp)
    c9b0:	d9002d17 	ldw	r4,180(sp)
    c9b4:	d8002785 	stb	zero,158(sp)
    c9b8:	18800017 	ldw	r2,0(r3)
    c9bc:	21000104 	addi	r4,r4,4
    c9c0:	00c00044 	movi	r3,1
    c9c4:	d8c02a15 	stw	r3,168(sp)
    c9c8:	d8801405 	stb	r2,80(sp)
    c9cc:	d9002d15 	stw	r4,180(sp)
    c9d0:	d8c02e15 	stw	r3,184(sp)
    c9d4:	d8002915 	stw	zero,164(sp)
    c9d8:	d8003215 	stw	zero,200(sp)
    c9dc:	dc001404 	addi	r16,sp,80
    c9e0:	0039883a 	mov	fp,zero
    c9e4:	003e7206 	br	c3b0 <__alt_data_end+0xf000c3b0>
    c9e8:	01020034 	movhi	r4,2048
    c9ec:	2100e604 	addi	r4,r4,920
    c9f0:	0039883a 	mov	fp,zero
    c9f4:	d9003915 	stw	r4,228(sp)
    c9f8:	04401e04 	movi	r17,120
    c9fc:	003f8206 	br	c808 <__alt_data_end+0xf000c808>
    ca00:	18c03fcc 	andi	r3,r3,255
    ca04:	1805061e 	bne	r3,zero,de20 <___vfprintf_internal_r+0x21c0>
    ca08:	883d9126 	beq	r17,zero,c050 <__alt_data_end+0xf000c050>
    ca0c:	00c00044 	movi	r3,1
    ca10:	d8c02a15 	stw	r3,168(sp)
    ca14:	dc401405 	stb	r17,80(sp)
    ca18:	d8002785 	stb	zero,158(sp)
    ca1c:	003fec06 	br	c9d0 <__alt_data_end+0xf000c9d0>
    ca20:	01420034 	movhi	r5,2048
    ca24:	2940e604 	addi	r5,r5,920
    ca28:	d9403915 	stw	r5,228(sp)
    ca2c:	d8c02d15 	stw	r3,180(sp)
    ca30:	1025883a 	mov	r18,r2
    ca34:	04401e04 	movi	r17,120
    ca38:	9d84b03a 	or	r2,r19,r22
    ca3c:	1000fc1e 	bne	r2,zero,ce30 <___vfprintf_internal_r+0x11d0>
    ca40:	0039883a 	mov	fp,zero
    ca44:	00800084 	movi	r2,2
    ca48:	10803fcc 	andi	r2,r2,255
    ca4c:	00c00044 	movi	r3,1
    ca50:	10c20f26 	beq	r2,r3,d290 <___vfprintf_internal_r+0x1630>
    ca54:	00c00084 	movi	r3,2
    ca58:	10fd6326 	beq	r2,r3,bfe8 <__alt_data_end+0xf000bfe8>
    ca5c:	003e2d06 	br	c314 <__alt_data_end+0xf000c314>
    ca60:	d8c02017 	ldw	r3,128(sp)
    ca64:	003e9306 	br	c4b4 <__alt_data_end+0xf000c4b4>
    ca68:	00801944 	movi	r2,101
    ca6c:	14407e0e 	bge	r2,r17,cc68 <___vfprintf_internal_r+0x1008>
    ca70:	d9003617 	ldw	r4,216(sp)
    ca74:	d9403817 	ldw	r5,224(sp)
    ca78:	000d883a 	mov	r6,zero
    ca7c:	000f883a 	mov	r7,zero
    ca80:	d8c03c15 	stw	r3,240(sp)
    ca84:	da003d15 	stw	r8,244(sp)
    ca88:	00175d40 	call	175d4 <__eqdf2>
    ca8c:	d8c03c17 	ldw	r3,240(sp)
    ca90:	da003d17 	ldw	r8,244(sp)
    ca94:	1000f71e 	bne	r2,zero,ce74 <___vfprintf_internal_r+0x1214>
    ca98:	d8801f17 	ldw	r2,124(sp)
    ca9c:	01020034 	movhi	r4,2048
    caa0:	2100ed04 	addi	r4,r4,948
    caa4:	18c00044 	addi	r3,r3,1
    caa8:	10800044 	addi	r2,r2,1
    caac:	41000015 	stw	r4,0(r8)
    cab0:	01000044 	movi	r4,1
    cab4:	41000115 	stw	r4,4(r8)
    cab8:	d8c02015 	stw	r3,128(sp)
    cabc:	d8801f15 	stw	r2,124(sp)
    cac0:	010001c4 	movi	r4,7
    cac4:	2082b816 	blt	r4,r2,d5a8 <___vfprintf_internal_r+0x1948>
    cac8:	42000204 	addi	r8,r8,8
    cacc:	d8802617 	ldw	r2,152(sp)
    cad0:	d9403317 	ldw	r5,204(sp)
    cad4:	11400216 	blt	r2,r5,cae0 <___vfprintf_internal_r+0xe80>
    cad8:	9080004c 	andi	r2,r18,1
    cadc:	103ed526 	beq	r2,zero,c634 <__alt_data_end+0xf000c634>
    cae0:	d8803717 	ldw	r2,220(sp)
    cae4:	d9003417 	ldw	r4,208(sp)
    cae8:	d9403717 	ldw	r5,220(sp)
    caec:	1887883a 	add	r3,r3,r2
    caf0:	d8801f17 	ldw	r2,124(sp)
    caf4:	41000015 	stw	r4,0(r8)
    caf8:	41400115 	stw	r5,4(r8)
    cafc:	10800044 	addi	r2,r2,1
    cb00:	d8c02015 	stw	r3,128(sp)
    cb04:	d8801f15 	stw	r2,124(sp)
    cb08:	010001c4 	movi	r4,7
    cb0c:	20832916 	blt	r4,r2,d7b4 <___vfprintf_internal_r+0x1b54>
    cb10:	42000204 	addi	r8,r8,8
    cb14:	d8803317 	ldw	r2,204(sp)
    cb18:	143fffc4 	addi	r16,r2,-1
    cb1c:	043ec50e 	bge	zero,r16,c634 <__alt_data_end+0xf000c634>
    cb20:	04400404 	movi	r17,16
    cb24:	d8801f17 	ldw	r2,124(sp)
    cb28:	8c00880e 	bge	r17,r16,cd4c <___vfprintf_internal_r+0x10ec>
    cb2c:	01420034 	movhi	r5,2048
    cb30:	2940f584 	addi	r5,r5,982
    cb34:	d9402b15 	stw	r5,172(sp)
    cb38:	058001c4 	movi	r22,7
    cb3c:	dcc02c17 	ldw	r19,176(sp)
    cb40:	00000306 	br	cb50 <___vfprintf_internal_r+0xef0>
    cb44:	42000204 	addi	r8,r8,8
    cb48:	843ffc04 	addi	r16,r16,-16
    cb4c:	8c00820e 	bge	r17,r16,cd58 <___vfprintf_internal_r+0x10f8>
    cb50:	18c00404 	addi	r3,r3,16
    cb54:	10800044 	addi	r2,r2,1
    cb58:	45000015 	stw	r20,0(r8)
    cb5c:	44400115 	stw	r17,4(r8)
    cb60:	d8c02015 	stw	r3,128(sp)
    cb64:	d8801f15 	stw	r2,124(sp)
    cb68:	b0bff60e 	bge	r22,r2,cb44 <__alt_data_end+0xf000cb44>
    cb6c:	d9801e04 	addi	r6,sp,120
    cb70:	b80b883a 	mov	r5,r23
    cb74:	9809883a 	mov	r4,r19
    cb78:	00143f80 	call	143f8 <__sprint_r>
    cb7c:	103d3a1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    cb80:	d8c02017 	ldw	r3,128(sp)
    cb84:	d8801f17 	ldw	r2,124(sp)
    cb88:	da000404 	addi	r8,sp,16
    cb8c:	003fee06 	br	cb48 <__alt_data_end+0xf000cb48>
    cb90:	d9403117 	ldw	r5,196(sp)
    cb94:	d8802a17 	ldw	r2,168(sp)
    cb98:	28adc83a 	sub	r22,r5,r2
    cb9c:	05be630e 	bge	zero,r22,c52c <__alt_data_end+0xf000c52c>
    cba0:	07000404 	movi	fp,16
    cba4:	d8801f17 	ldw	r2,124(sp)
    cba8:	e5838f0e 	bge	fp,r22,d9e8 <___vfprintf_internal_r+0x1d88>
    cbac:	01420034 	movhi	r5,2048
    cbb0:	2940f584 	addi	r5,r5,982
    cbb4:	dc403015 	stw	r17,192(sp)
    cbb8:	d9402b15 	stw	r5,172(sp)
    cbbc:	b023883a 	mov	r17,r22
    cbc0:	04c001c4 	movi	r19,7
    cbc4:	a82d883a 	mov	r22,r21
    cbc8:	902b883a 	mov	r21,r18
    cbcc:	8025883a 	mov	r18,r16
    cbd0:	dc002c17 	ldw	r16,176(sp)
    cbd4:	00000306 	br	cbe4 <___vfprintf_internal_r+0xf84>
    cbd8:	8c7ffc04 	addi	r17,r17,-16
    cbdc:	42000204 	addi	r8,r8,8
    cbe0:	e440110e 	bge	fp,r17,cc28 <___vfprintf_internal_r+0xfc8>
    cbe4:	18c00404 	addi	r3,r3,16
    cbe8:	10800044 	addi	r2,r2,1
    cbec:	45000015 	stw	r20,0(r8)
    cbf0:	47000115 	stw	fp,4(r8)
    cbf4:	d8c02015 	stw	r3,128(sp)
    cbf8:	d8801f15 	stw	r2,124(sp)
    cbfc:	98bff60e 	bge	r19,r2,cbd8 <__alt_data_end+0xf000cbd8>
    cc00:	d9801e04 	addi	r6,sp,120
    cc04:	b80b883a 	mov	r5,r23
    cc08:	8009883a 	mov	r4,r16
    cc0c:	00143f80 	call	143f8 <__sprint_r>
    cc10:	103d151e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    cc14:	8c7ffc04 	addi	r17,r17,-16
    cc18:	d8c02017 	ldw	r3,128(sp)
    cc1c:	d8801f17 	ldw	r2,124(sp)
    cc20:	da000404 	addi	r8,sp,16
    cc24:	e47fef16 	blt	fp,r17,cbe4 <__alt_data_end+0xf000cbe4>
    cc28:	9021883a 	mov	r16,r18
    cc2c:	a825883a 	mov	r18,r21
    cc30:	b02b883a 	mov	r21,r22
    cc34:	882d883a 	mov	r22,r17
    cc38:	dc403017 	ldw	r17,192(sp)
    cc3c:	d9002b17 	ldw	r4,172(sp)
    cc40:	1d87883a 	add	r3,r3,r22
    cc44:	10800044 	addi	r2,r2,1
    cc48:	41000015 	stw	r4,0(r8)
    cc4c:	45800115 	stw	r22,4(r8)
    cc50:	d8c02015 	stw	r3,128(sp)
    cc54:	d8801f15 	stw	r2,124(sp)
    cc58:	010001c4 	movi	r4,7
    cc5c:	20818e16 	blt	r4,r2,d298 <___vfprintf_internal_r+0x1638>
    cc60:	42000204 	addi	r8,r8,8
    cc64:	003e3106 	br	c52c <__alt_data_end+0xf000c52c>
    cc68:	d9403317 	ldw	r5,204(sp)
    cc6c:	00800044 	movi	r2,1
    cc70:	18c00044 	addi	r3,r3,1
    cc74:	1141530e 	bge	r2,r5,d1c4 <___vfprintf_internal_r+0x1564>
    cc78:	dc401f17 	ldw	r17,124(sp)
    cc7c:	00800044 	movi	r2,1
    cc80:	40800115 	stw	r2,4(r8)
    cc84:	8c400044 	addi	r17,r17,1
    cc88:	44000015 	stw	r16,0(r8)
    cc8c:	d8c02015 	stw	r3,128(sp)
    cc90:	dc401f15 	stw	r17,124(sp)
    cc94:	008001c4 	movi	r2,7
    cc98:	14416b16 	blt	r2,r17,d248 <___vfprintf_internal_r+0x15e8>
    cc9c:	42000204 	addi	r8,r8,8
    cca0:	d8803717 	ldw	r2,220(sp)
    cca4:	d9003417 	ldw	r4,208(sp)
    cca8:	8c400044 	addi	r17,r17,1
    ccac:	10c7883a 	add	r3,r2,r3
    ccb0:	40800115 	stw	r2,4(r8)
    ccb4:	41000015 	stw	r4,0(r8)
    ccb8:	d8c02015 	stw	r3,128(sp)
    ccbc:	dc401f15 	stw	r17,124(sp)
    ccc0:	008001c4 	movi	r2,7
    ccc4:	14416916 	blt	r2,r17,d26c <___vfprintf_internal_r+0x160c>
    ccc8:	45800204 	addi	r22,r8,8
    cccc:	d9003617 	ldw	r4,216(sp)
    ccd0:	d9403817 	ldw	r5,224(sp)
    ccd4:	000d883a 	mov	r6,zero
    ccd8:	000f883a 	mov	r7,zero
    ccdc:	d8c03c15 	stw	r3,240(sp)
    cce0:	00175d40 	call	175d4 <__eqdf2>
    cce4:	d8c03c17 	ldw	r3,240(sp)
    cce8:	1000bc26 	beq	r2,zero,cfdc <___vfprintf_internal_r+0x137c>
    ccec:	d9403317 	ldw	r5,204(sp)
    ccf0:	84000044 	addi	r16,r16,1
    ccf4:	8c400044 	addi	r17,r17,1
    ccf8:	28bfffc4 	addi	r2,r5,-1
    ccfc:	1887883a 	add	r3,r3,r2
    cd00:	b0800115 	stw	r2,4(r22)
    cd04:	b4000015 	stw	r16,0(r22)
    cd08:	d8c02015 	stw	r3,128(sp)
    cd0c:	dc401f15 	stw	r17,124(sp)
    cd10:	008001c4 	movi	r2,7
    cd14:	14414316 	blt	r2,r17,d224 <___vfprintf_internal_r+0x15c4>
    cd18:	b5800204 	addi	r22,r22,8
    cd1c:	d9003a17 	ldw	r4,232(sp)
    cd20:	df0022c4 	addi	fp,sp,139
    cd24:	8c400044 	addi	r17,r17,1
    cd28:	20c7883a 	add	r3,r4,r3
    cd2c:	b7000015 	stw	fp,0(r22)
    cd30:	b1000115 	stw	r4,4(r22)
    cd34:	d8c02015 	stw	r3,128(sp)
    cd38:	dc401f15 	stw	r17,124(sp)
    cd3c:	008001c4 	movi	r2,7
    cd40:	14400e16 	blt	r2,r17,cd7c <___vfprintf_internal_r+0x111c>
    cd44:	b2000204 	addi	r8,r22,8
    cd48:	003e3a06 	br	c634 <__alt_data_end+0xf000c634>
    cd4c:	01020034 	movhi	r4,2048
    cd50:	2100f584 	addi	r4,r4,982
    cd54:	d9002b15 	stw	r4,172(sp)
    cd58:	d9002b17 	ldw	r4,172(sp)
    cd5c:	1c07883a 	add	r3,r3,r16
    cd60:	44000115 	stw	r16,4(r8)
    cd64:	41000015 	stw	r4,0(r8)
    cd68:	10800044 	addi	r2,r2,1
    cd6c:	d8c02015 	stw	r3,128(sp)
    cd70:	d8801f15 	stw	r2,124(sp)
    cd74:	010001c4 	movi	r4,7
    cd78:	20be2d0e 	bge	r4,r2,c630 <__alt_data_end+0xf000c630>
    cd7c:	d9002c17 	ldw	r4,176(sp)
    cd80:	d9801e04 	addi	r6,sp,120
    cd84:	b80b883a 	mov	r5,r23
    cd88:	00143f80 	call	143f8 <__sprint_r>
    cd8c:	103cb61e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    cd90:	d8c02017 	ldw	r3,128(sp)
    cd94:	da000404 	addi	r8,sp,16
    cd98:	003e2606 	br	c634 <__alt_data_end+0xf000c634>
    cd9c:	d9002c17 	ldw	r4,176(sp)
    cda0:	d9801e04 	addi	r6,sp,120
    cda4:	b80b883a 	mov	r5,r23
    cda8:	00143f80 	call	143f8 <__sprint_r>
    cdac:	103e5d26 	beq	r2,zero,c724 <__alt_data_end+0xf000c724>
    cdb0:	003cad06 	br	c068 <__alt_data_end+0xf000c068>
    cdb4:	d9002c17 	ldw	r4,176(sp)
    cdb8:	d9801e04 	addi	r6,sp,120
    cdbc:	b80b883a 	mov	r5,r23
    cdc0:	00143f80 	call	143f8 <__sprint_r>
    cdc4:	103ca81e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    cdc8:	d8c02017 	ldw	r3,128(sp)
    cdcc:	da000404 	addi	r8,sp,16
    cdd0:	003e0b06 	br	c600 <__alt_data_end+0xf000c600>
    cdd4:	d9002c17 	ldw	r4,176(sp)
    cdd8:	d9801e04 	addi	r6,sp,120
    cddc:	b80b883a 	mov	r5,r23
    cde0:	00143f80 	call	143f8 <__sprint_r>
    cde4:	103ca01e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    cde8:	d8c02017 	ldw	r3,128(sp)
    cdec:	da000404 	addi	r8,sp,16
    cdf0:	003dbd06 	br	c4e8 <__alt_data_end+0xf000c4e8>
    cdf4:	d9002c17 	ldw	r4,176(sp)
    cdf8:	d9801e04 	addi	r6,sp,120
    cdfc:	b80b883a 	mov	r5,r23
    ce00:	00143f80 	call	143f8 <__sprint_r>
    ce04:	103c981e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    ce08:	d8c02017 	ldw	r3,128(sp)
    ce0c:	da000404 	addi	r8,sp,16
    ce10:	003dc306 	br	c520 <__alt_data_end+0xf000c520>
    ce14:	d8802917 	ldw	r2,164(sp)
    ce18:	d8002785 	stb	zero,158(sp)
    ce1c:	103f0616 	blt	r2,zero,ca38 <__alt_data_end+0xf000ca38>
    ce20:	00ffdfc4 	movi	r3,-129
    ce24:	9d84b03a 	or	r2,r19,r22
    ce28:	90e4703a 	and	r18,r18,r3
    ce2c:	103c6b26 	beq	r2,zero,bfdc <__alt_data_end+0xf000bfdc>
    ce30:	0039883a 	mov	fp,zero
    ce34:	003e7406 	br	c808 <__alt_data_end+0xf000c808>
    ce38:	9080040c 	andi	r2,r18,16
    ce3c:	1001b326 	beq	r2,zero,d50c <___vfprintf_internal_r+0x18ac>
    ce40:	d9002d17 	ldw	r4,180(sp)
    ce44:	d9402917 	ldw	r5,164(sp)
    ce48:	d8002785 	stb	zero,158(sp)
    ce4c:	20800104 	addi	r2,r4,4
    ce50:	24c00017 	ldw	r19,0(r4)
    ce54:	002d883a 	mov	r22,zero
    ce58:	2801b516 	blt	r5,zero,d530 <___vfprintf_internal_r+0x18d0>
    ce5c:	00ffdfc4 	movi	r3,-129
    ce60:	d8802d15 	stw	r2,180(sp)
    ce64:	90e4703a 	and	r18,r18,r3
    ce68:	983d2726 	beq	r19,zero,c308 <__alt_data_end+0xf000c308>
    ce6c:	0039883a 	mov	fp,zero
    ce70:	003d2a06 	br	c31c <__alt_data_end+0xf000c31c>
    ce74:	dc402617 	ldw	r17,152(sp)
    ce78:	0441d30e 	bge	zero,r17,d5c8 <___vfprintf_internal_r+0x1968>
    ce7c:	dc403217 	ldw	r17,200(sp)
    ce80:	d8803317 	ldw	r2,204(sp)
    ce84:	1440010e 	bge	r2,r17,ce8c <___vfprintf_internal_r+0x122c>
    ce88:	1023883a 	mov	r17,r2
    ce8c:	04400a0e 	bge	zero,r17,ceb8 <___vfprintf_internal_r+0x1258>
    ce90:	d8801f17 	ldw	r2,124(sp)
    ce94:	1c47883a 	add	r3,r3,r17
    ce98:	44000015 	stw	r16,0(r8)
    ce9c:	10800044 	addi	r2,r2,1
    cea0:	44400115 	stw	r17,4(r8)
    cea4:	d8c02015 	stw	r3,128(sp)
    cea8:	d8801f15 	stw	r2,124(sp)
    ceac:	010001c4 	movi	r4,7
    ceb0:	20826516 	blt	r4,r2,d848 <___vfprintf_internal_r+0x1be8>
    ceb4:	42000204 	addi	r8,r8,8
    ceb8:	88026116 	blt	r17,zero,d840 <___vfprintf_internal_r+0x1be0>
    cebc:	d9003217 	ldw	r4,200(sp)
    cec0:	2463c83a 	sub	r17,r4,r17
    cec4:	04407b0e 	bge	zero,r17,d0b4 <___vfprintf_internal_r+0x1454>
    cec8:	05800404 	movi	r22,16
    cecc:	d8801f17 	ldw	r2,124(sp)
    ced0:	b4419d0e 	bge	r22,r17,d548 <___vfprintf_internal_r+0x18e8>
    ced4:	01020034 	movhi	r4,2048
    ced8:	2100f584 	addi	r4,r4,982
    cedc:	d9002b15 	stw	r4,172(sp)
    cee0:	070001c4 	movi	fp,7
    cee4:	dcc02c17 	ldw	r19,176(sp)
    cee8:	00000306 	br	cef8 <___vfprintf_internal_r+0x1298>
    ceec:	42000204 	addi	r8,r8,8
    cef0:	8c7ffc04 	addi	r17,r17,-16
    cef4:	b441970e 	bge	r22,r17,d554 <___vfprintf_internal_r+0x18f4>
    cef8:	18c00404 	addi	r3,r3,16
    cefc:	10800044 	addi	r2,r2,1
    cf00:	45000015 	stw	r20,0(r8)
    cf04:	45800115 	stw	r22,4(r8)
    cf08:	d8c02015 	stw	r3,128(sp)
    cf0c:	d8801f15 	stw	r2,124(sp)
    cf10:	e0bff60e 	bge	fp,r2,ceec <__alt_data_end+0xf000ceec>
    cf14:	d9801e04 	addi	r6,sp,120
    cf18:	b80b883a 	mov	r5,r23
    cf1c:	9809883a 	mov	r4,r19
    cf20:	00143f80 	call	143f8 <__sprint_r>
    cf24:	103c501e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    cf28:	d8c02017 	ldw	r3,128(sp)
    cf2c:	d8801f17 	ldw	r2,124(sp)
    cf30:	da000404 	addi	r8,sp,16
    cf34:	003fee06 	br	cef0 <__alt_data_end+0xf000cef0>
    cf38:	d9002c17 	ldw	r4,176(sp)
    cf3c:	d9801e04 	addi	r6,sp,120
    cf40:	b80b883a 	mov	r5,r23
    cf44:	00143f80 	call	143f8 <__sprint_r>
    cf48:	103c471e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    cf4c:	d8c02017 	ldw	r3,128(sp)
    cf50:	df002787 	ldb	fp,158(sp)
    cf54:	da000404 	addi	r8,sp,16
    cf58:	003d5606 	br	c4b4 <__alt_data_end+0xf000c4b4>
    cf5c:	9080040c 	andi	r2,r18,16
    cf60:	10016126 	beq	r2,zero,d4e8 <___vfprintf_internal_r+0x1888>
    cf64:	d8802d17 	ldw	r2,180(sp)
    cf68:	14c00017 	ldw	r19,0(r2)
    cf6c:	10800104 	addi	r2,r2,4
    cf70:	d8802d15 	stw	r2,180(sp)
    cf74:	982dd7fa 	srai	r22,r19,31
    cf78:	b005883a 	mov	r2,r22
    cf7c:	003c8206 	br	c188 <__alt_data_end+0xf000c188>
    cf80:	9080040c 	andi	r2,r18,16
    cf84:	10003526 	beq	r2,zero,d05c <___vfprintf_internal_r+0x13fc>
    cf88:	d9402d17 	ldw	r5,180(sp)
    cf8c:	d8c02917 	ldw	r3,164(sp)
    cf90:	d8002785 	stb	zero,158(sp)
    cf94:	28800104 	addi	r2,r5,4
    cf98:	2cc00017 	ldw	r19,0(r5)
    cf9c:	002d883a 	mov	r22,zero
    cfa0:	18003716 	blt	r3,zero,d080 <___vfprintf_internal_r+0x1420>
    cfa4:	00ffdfc4 	movi	r3,-129
    cfa8:	d8802d15 	stw	r2,180(sp)
    cfac:	90e4703a 	and	r18,r18,r3
    cfb0:	0039883a 	mov	fp,zero
    cfb4:	983df326 	beq	r19,zero,c784 <__alt_data_end+0xf000c784>
    cfb8:	00800244 	movi	r2,9
    cfbc:	14fc7b36 	bltu	r2,r19,c1ac <__alt_data_end+0xf000c1ac>
    cfc0:	d8c02817 	ldw	r3,160(sp)
    cfc4:	dc001dc4 	addi	r16,sp,119
    cfc8:	9cc00c04 	addi	r19,r19,48
    cfcc:	1c07c83a 	sub	r3,r3,r16
    cfd0:	dcc01dc5 	stb	r19,119(sp)
    cfd4:	d8c02e15 	stw	r3,184(sp)
    cfd8:	003ce806 	br	c37c <__alt_data_end+0xf000c37c>
    cfdc:	d8803317 	ldw	r2,204(sp)
    cfe0:	143fffc4 	addi	r16,r2,-1
    cfe4:	043f4d0e 	bge	zero,r16,cd1c <__alt_data_end+0xf000cd1c>
    cfe8:	07000404 	movi	fp,16
    cfec:	e400810e 	bge	fp,r16,d1f4 <___vfprintf_internal_r+0x1594>
    cff0:	01420034 	movhi	r5,2048
    cff4:	2940f584 	addi	r5,r5,982
    cff8:	d9402b15 	stw	r5,172(sp)
    cffc:	01c001c4 	movi	r7,7
    d000:	dcc02c17 	ldw	r19,176(sp)
    d004:	00000306 	br	d014 <___vfprintf_internal_r+0x13b4>
    d008:	b5800204 	addi	r22,r22,8
    d00c:	843ffc04 	addi	r16,r16,-16
    d010:	e4007b0e 	bge	fp,r16,d200 <___vfprintf_internal_r+0x15a0>
    d014:	18c00404 	addi	r3,r3,16
    d018:	8c400044 	addi	r17,r17,1
    d01c:	b5000015 	stw	r20,0(r22)
    d020:	b7000115 	stw	fp,4(r22)
    d024:	d8c02015 	stw	r3,128(sp)
    d028:	dc401f15 	stw	r17,124(sp)
    d02c:	3c7ff60e 	bge	r7,r17,d008 <__alt_data_end+0xf000d008>
    d030:	d9801e04 	addi	r6,sp,120
    d034:	b80b883a 	mov	r5,r23
    d038:	9809883a 	mov	r4,r19
    d03c:	d9c03c15 	stw	r7,240(sp)
    d040:	00143f80 	call	143f8 <__sprint_r>
    d044:	d9c03c17 	ldw	r7,240(sp)
    d048:	103c071e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d04c:	d8c02017 	ldw	r3,128(sp)
    d050:	dc401f17 	ldw	r17,124(sp)
    d054:	dd800404 	addi	r22,sp,16
    d058:	003fec06 	br	d00c <__alt_data_end+0xf000d00c>
    d05c:	9080100c 	andi	r2,r18,64
    d060:	d8002785 	stb	zero,158(sp)
    d064:	10010e26 	beq	r2,zero,d4a0 <___vfprintf_internal_r+0x1840>
    d068:	d9002d17 	ldw	r4,180(sp)
    d06c:	d9402917 	ldw	r5,164(sp)
    d070:	002d883a 	mov	r22,zero
    d074:	20800104 	addi	r2,r4,4
    d078:	24c0000b 	ldhu	r19,0(r4)
    d07c:	283fc90e 	bge	r5,zero,cfa4 <__alt_data_end+0xf000cfa4>
    d080:	d8802d15 	stw	r2,180(sp)
    d084:	0039883a 	mov	fp,zero
    d088:	9d84b03a 	or	r2,r19,r22
    d08c:	103c461e 	bne	r2,zero,c1a8 <__alt_data_end+0xf000c1a8>
    d090:	00800044 	movi	r2,1
    d094:	003e6c06 	br	ca48 <__alt_data_end+0xf000ca48>
    d098:	d9002c17 	ldw	r4,176(sp)
    d09c:	d9801e04 	addi	r6,sp,120
    d0a0:	b80b883a 	mov	r5,r23
    d0a4:	00143f80 	call	143f8 <__sprint_r>
    d0a8:	103bef1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d0ac:	d8c02017 	ldw	r3,128(sp)
    d0b0:	da000404 	addi	r8,sp,16
    d0b4:	d9003217 	ldw	r4,200(sp)
    d0b8:	d8802617 	ldw	r2,152(sp)
    d0bc:	d9403317 	ldw	r5,204(sp)
    d0c0:	8123883a 	add	r17,r16,r4
    d0c4:	11400216 	blt	r2,r5,d0d0 <___vfprintf_internal_r+0x1470>
    d0c8:	9100004c 	andi	r4,r18,1
    d0cc:	20000d26 	beq	r4,zero,d104 <___vfprintf_internal_r+0x14a4>
    d0d0:	d9003717 	ldw	r4,220(sp)
    d0d4:	d9403417 	ldw	r5,208(sp)
    d0d8:	1907883a 	add	r3,r3,r4
    d0dc:	d9001f17 	ldw	r4,124(sp)
    d0e0:	41400015 	stw	r5,0(r8)
    d0e4:	d9403717 	ldw	r5,220(sp)
    d0e8:	21000044 	addi	r4,r4,1
    d0ec:	d8c02015 	stw	r3,128(sp)
    d0f0:	41400115 	stw	r5,4(r8)
    d0f4:	d9001f15 	stw	r4,124(sp)
    d0f8:	014001c4 	movi	r5,7
    d0fc:	2901e816 	blt	r5,r4,d8a0 <___vfprintf_internal_r+0x1c40>
    d100:	42000204 	addi	r8,r8,8
    d104:	d9003317 	ldw	r4,204(sp)
    d108:	8121883a 	add	r16,r16,r4
    d10c:	2085c83a 	sub	r2,r4,r2
    d110:	8461c83a 	sub	r16,r16,r17
    d114:	1400010e 	bge	r2,r16,d11c <___vfprintf_internal_r+0x14bc>
    d118:	1021883a 	mov	r16,r2
    d11c:	04000a0e 	bge	zero,r16,d148 <___vfprintf_internal_r+0x14e8>
    d120:	d9001f17 	ldw	r4,124(sp)
    d124:	1c07883a 	add	r3,r3,r16
    d128:	44400015 	stw	r17,0(r8)
    d12c:	21000044 	addi	r4,r4,1
    d130:	44000115 	stw	r16,4(r8)
    d134:	d8c02015 	stw	r3,128(sp)
    d138:	d9001f15 	stw	r4,124(sp)
    d13c:	014001c4 	movi	r5,7
    d140:	2901fb16 	blt	r5,r4,d930 <___vfprintf_internal_r+0x1cd0>
    d144:	42000204 	addi	r8,r8,8
    d148:	8001f716 	blt	r16,zero,d928 <___vfprintf_internal_r+0x1cc8>
    d14c:	1421c83a 	sub	r16,r2,r16
    d150:	043d380e 	bge	zero,r16,c634 <__alt_data_end+0xf000c634>
    d154:	04400404 	movi	r17,16
    d158:	d8801f17 	ldw	r2,124(sp)
    d15c:	8c3efb0e 	bge	r17,r16,cd4c <__alt_data_end+0xf000cd4c>
    d160:	01420034 	movhi	r5,2048
    d164:	2940f584 	addi	r5,r5,982
    d168:	d9402b15 	stw	r5,172(sp)
    d16c:	058001c4 	movi	r22,7
    d170:	dcc02c17 	ldw	r19,176(sp)
    d174:	00000306 	br	d184 <___vfprintf_internal_r+0x1524>
    d178:	42000204 	addi	r8,r8,8
    d17c:	843ffc04 	addi	r16,r16,-16
    d180:	8c3ef50e 	bge	r17,r16,cd58 <__alt_data_end+0xf000cd58>
    d184:	18c00404 	addi	r3,r3,16
    d188:	10800044 	addi	r2,r2,1
    d18c:	45000015 	stw	r20,0(r8)
    d190:	44400115 	stw	r17,4(r8)
    d194:	d8c02015 	stw	r3,128(sp)
    d198:	d8801f15 	stw	r2,124(sp)
    d19c:	b0bff60e 	bge	r22,r2,d178 <__alt_data_end+0xf000d178>
    d1a0:	d9801e04 	addi	r6,sp,120
    d1a4:	b80b883a 	mov	r5,r23
    d1a8:	9809883a 	mov	r4,r19
    d1ac:	00143f80 	call	143f8 <__sprint_r>
    d1b0:	103bad1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d1b4:	d8c02017 	ldw	r3,128(sp)
    d1b8:	d8801f17 	ldw	r2,124(sp)
    d1bc:	da000404 	addi	r8,sp,16
    d1c0:	003fee06 	br	d17c <__alt_data_end+0xf000d17c>
    d1c4:	9088703a 	and	r4,r18,r2
    d1c8:	203eab1e 	bne	r4,zero,cc78 <__alt_data_end+0xf000cc78>
    d1cc:	dc401f17 	ldw	r17,124(sp)
    d1d0:	40800115 	stw	r2,4(r8)
    d1d4:	44000015 	stw	r16,0(r8)
    d1d8:	8c400044 	addi	r17,r17,1
    d1dc:	d8c02015 	stw	r3,128(sp)
    d1e0:	dc401f15 	stw	r17,124(sp)
    d1e4:	008001c4 	movi	r2,7
    d1e8:	14400e16 	blt	r2,r17,d224 <___vfprintf_internal_r+0x15c4>
    d1ec:	45800204 	addi	r22,r8,8
    d1f0:	003eca06 	br	cd1c <__alt_data_end+0xf000cd1c>
    d1f4:	01020034 	movhi	r4,2048
    d1f8:	2100f584 	addi	r4,r4,982
    d1fc:	d9002b15 	stw	r4,172(sp)
    d200:	d8802b17 	ldw	r2,172(sp)
    d204:	1c07883a 	add	r3,r3,r16
    d208:	8c400044 	addi	r17,r17,1
    d20c:	b0800015 	stw	r2,0(r22)
    d210:	b4000115 	stw	r16,4(r22)
    d214:	d8c02015 	stw	r3,128(sp)
    d218:	dc401f15 	stw	r17,124(sp)
    d21c:	008001c4 	movi	r2,7
    d220:	147ebd0e 	bge	r2,r17,cd18 <__alt_data_end+0xf000cd18>
    d224:	d9002c17 	ldw	r4,176(sp)
    d228:	d9801e04 	addi	r6,sp,120
    d22c:	b80b883a 	mov	r5,r23
    d230:	00143f80 	call	143f8 <__sprint_r>
    d234:	103b8c1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d238:	d8c02017 	ldw	r3,128(sp)
    d23c:	dc401f17 	ldw	r17,124(sp)
    d240:	dd800404 	addi	r22,sp,16
    d244:	003eb506 	br	cd1c <__alt_data_end+0xf000cd1c>
    d248:	d9002c17 	ldw	r4,176(sp)
    d24c:	d9801e04 	addi	r6,sp,120
    d250:	b80b883a 	mov	r5,r23
    d254:	00143f80 	call	143f8 <__sprint_r>
    d258:	103b831e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d25c:	d8c02017 	ldw	r3,128(sp)
    d260:	dc401f17 	ldw	r17,124(sp)
    d264:	da000404 	addi	r8,sp,16
    d268:	003e8d06 	br	cca0 <__alt_data_end+0xf000cca0>
    d26c:	d9002c17 	ldw	r4,176(sp)
    d270:	d9801e04 	addi	r6,sp,120
    d274:	b80b883a 	mov	r5,r23
    d278:	00143f80 	call	143f8 <__sprint_r>
    d27c:	103b7a1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d280:	d8c02017 	ldw	r3,128(sp)
    d284:	dc401f17 	ldw	r17,124(sp)
    d288:	dd800404 	addi	r22,sp,16
    d28c:	003e8f06 	br	cccc <__alt_data_end+0xf000cccc>
    d290:	0027883a 	mov	r19,zero
    d294:	003f4a06 	br	cfc0 <__alt_data_end+0xf000cfc0>
    d298:	d9002c17 	ldw	r4,176(sp)
    d29c:	d9801e04 	addi	r6,sp,120
    d2a0:	b80b883a 	mov	r5,r23
    d2a4:	00143f80 	call	143f8 <__sprint_r>
    d2a8:	103b6f1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d2ac:	d8c02017 	ldw	r3,128(sp)
    d2b0:	da000404 	addi	r8,sp,16
    d2b4:	003c9d06 	br	c52c <__alt_data_end+0xf000c52c>
    d2b8:	04e7c83a 	sub	r19,zero,r19
    d2bc:	9804c03a 	cmpne	r2,r19,zero
    d2c0:	05adc83a 	sub	r22,zero,r22
    d2c4:	b0adc83a 	sub	r22,r22,r2
    d2c8:	d8802917 	ldw	r2,164(sp)
    d2cc:	07000b44 	movi	fp,45
    d2d0:	df002785 	stb	fp,158(sp)
    d2d4:	10017b16 	blt	r2,zero,d8c4 <___vfprintf_internal_r+0x1c64>
    d2d8:	00bfdfc4 	movi	r2,-129
    d2dc:	90a4703a 	and	r18,r18,r2
    d2e0:	003bb106 	br	c1a8 <__alt_data_end+0xf000c1a8>
    d2e4:	d9003617 	ldw	r4,216(sp)
    d2e8:	d9403817 	ldw	r5,224(sp)
    d2ec:	da003d15 	stw	r8,244(sp)
    d2f0:	0012c100 	call	12c10 <__fpclassifyd>
    d2f4:	da003d17 	ldw	r8,244(sp)
    d2f8:	1000f026 	beq	r2,zero,d6bc <___vfprintf_internal_r+0x1a5c>
    d2fc:	d9002917 	ldw	r4,164(sp)
    d300:	05bff7c4 	movi	r22,-33
    d304:	00bfffc4 	movi	r2,-1
    d308:	8dac703a 	and	r22,r17,r22
    d30c:	20820026 	beq	r4,r2,db10 <___vfprintf_internal_r+0x1eb0>
    d310:	008011c4 	movi	r2,71
    d314:	b081f726 	beq	r22,r2,daf4 <___vfprintf_internal_r+0x1e94>
    d318:	d9003817 	ldw	r4,224(sp)
    d31c:	90c04014 	ori	r3,r18,256
    d320:	d8c02b15 	stw	r3,172(sp)
    d324:	20021516 	blt	r4,zero,db7c <___vfprintf_internal_r+0x1f1c>
    d328:	dcc03817 	ldw	r19,224(sp)
    d32c:	d8002a05 	stb	zero,168(sp)
    d330:	00801984 	movi	r2,102
    d334:	8881f926 	beq	r17,r2,db1c <___vfprintf_internal_r+0x1ebc>
    d338:	00801184 	movi	r2,70
    d33c:	88821c26 	beq	r17,r2,dbb0 <___vfprintf_internal_r+0x1f50>
    d340:	00801144 	movi	r2,69
    d344:	b081ef26 	beq	r22,r2,db04 <___vfprintf_internal_r+0x1ea4>
    d348:	d8c02917 	ldw	r3,164(sp)
    d34c:	d8802104 	addi	r2,sp,132
    d350:	d8800315 	stw	r2,12(sp)
    d354:	d9403617 	ldw	r5,216(sp)
    d358:	d8802504 	addi	r2,sp,148
    d35c:	d9002c17 	ldw	r4,176(sp)
    d360:	d8800215 	stw	r2,8(sp)
    d364:	d8802604 	addi	r2,sp,152
    d368:	d8c00015 	stw	r3,0(sp)
    d36c:	d8800115 	stw	r2,4(sp)
    d370:	01c00084 	movi	r7,2
    d374:	980d883a 	mov	r6,r19
    d378:	d8c03c15 	stw	r3,240(sp)
    d37c:	da003d15 	stw	r8,244(sp)
    d380:	000e2840 	call	e284 <_dtoa_r>
    d384:	1021883a 	mov	r16,r2
    d388:	008019c4 	movi	r2,103
    d38c:	d8c03c17 	ldw	r3,240(sp)
    d390:	da003d17 	ldw	r8,244(sp)
    d394:	88817126 	beq	r17,r2,d95c <___vfprintf_internal_r+0x1cfc>
    d398:	008011c4 	movi	r2,71
    d39c:	88829226 	beq	r17,r2,dde8 <___vfprintf_internal_r+0x2188>
    d3a0:	80f9883a 	add	fp,r16,r3
    d3a4:	d9003617 	ldw	r4,216(sp)
    d3a8:	000d883a 	mov	r6,zero
    d3ac:	000f883a 	mov	r7,zero
    d3b0:	980b883a 	mov	r5,r19
    d3b4:	da003d15 	stw	r8,244(sp)
    d3b8:	00175d40 	call	175d4 <__eqdf2>
    d3bc:	da003d17 	ldw	r8,244(sp)
    d3c0:	10018d26 	beq	r2,zero,d9f8 <___vfprintf_internal_r+0x1d98>
    d3c4:	d8802117 	ldw	r2,132(sp)
    d3c8:	1700062e 	bgeu	r2,fp,d3e4 <___vfprintf_internal_r+0x1784>
    d3cc:	01000c04 	movi	r4,48
    d3d0:	10c00044 	addi	r3,r2,1
    d3d4:	d8c02115 	stw	r3,132(sp)
    d3d8:	11000005 	stb	r4,0(r2)
    d3dc:	d8802117 	ldw	r2,132(sp)
    d3e0:	173ffb36 	bltu	r2,fp,d3d0 <__alt_data_end+0xf000d3d0>
    d3e4:	1405c83a 	sub	r2,r2,r16
    d3e8:	d8803315 	stw	r2,204(sp)
    d3ec:	008011c4 	movi	r2,71
    d3f0:	b0817626 	beq	r22,r2,d9cc <___vfprintf_internal_r+0x1d6c>
    d3f4:	00801944 	movi	r2,101
    d3f8:	1442810e 	bge	r2,r17,de00 <___vfprintf_internal_r+0x21a0>
    d3fc:	d8c02617 	ldw	r3,152(sp)
    d400:	00801984 	movi	r2,102
    d404:	d8c03215 	stw	r3,200(sp)
    d408:	8881fe26 	beq	r17,r2,dc04 <___vfprintf_internal_r+0x1fa4>
    d40c:	d8c03217 	ldw	r3,200(sp)
    d410:	d9003317 	ldw	r4,204(sp)
    d414:	1901dd16 	blt	r3,r4,db8c <___vfprintf_internal_r+0x1f2c>
    d418:	9480004c 	andi	r18,r18,1
    d41c:	90022b1e 	bne	r18,zero,dccc <___vfprintf_internal_r+0x206c>
    d420:	1805883a 	mov	r2,r3
    d424:	18028016 	blt	r3,zero,de28 <___vfprintf_internal_r+0x21c8>
    d428:	d8c03217 	ldw	r3,200(sp)
    d42c:	044019c4 	movi	r17,103
    d430:	d8c02e15 	stw	r3,184(sp)
    d434:	df002a07 	ldb	fp,168(sp)
    d438:	e001531e 	bne	fp,zero,d988 <___vfprintf_internal_r+0x1d28>
    d43c:	df002783 	ldbu	fp,158(sp)
    d440:	d8802a15 	stw	r2,168(sp)
    d444:	dc802b17 	ldw	r18,172(sp)
    d448:	d8002915 	stw	zero,164(sp)
    d44c:	003bd106 	br	c394 <__alt_data_end+0xf000c394>
    d450:	d8802d17 	ldw	r2,180(sp)
    d454:	d8c02d17 	ldw	r3,180(sp)
    d458:	d9002d17 	ldw	r4,180(sp)
    d45c:	10800017 	ldw	r2,0(r2)
    d460:	18c00117 	ldw	r3,4(r3)
    d464:	21000204 	addi	r4,r4,8
    d468:	d8803615 	stw	r2,216(sp)
    d46c:	d8c03815 	stw	r3,224(sp)
    d470:	d9002d15 	stw	r4,180(sp)
    d474:	003b7506 	br	c24c <__alt_data_end+0xf000c24c>
    d478:	ac400007 	ldb	r17,0(r21)
    d47c:	003a5906 	br	bde4 <__alt_data_end+0xf000bde4>
    d480:	9080100c 	andi	r2,r18,64
    d484:	1000a826 	beq	r2,zero,d728 <___vfprintf_internal_r+0x1ac8>
    d488:	d9002d17 	ldw	r4,180(sp)
    d48c:	002d883a 	mov	r22,zero
    d490:	24c0000b 	ldhu	r19,0(r4)
    d494:	21000104 	addi	r4,r4,4
    d498:	d9002d15 	stw	r4,180(sp)
    d49c:	003ccb06 	br	c7cc <__alt_data_end+0xf000c7cc>
    d4a0:	d8c02d17 	ldw	r3,180(sp)
    d4a4:	d9002917 	ldw	r4,164(sp)
    d4a8:	002d883a 	mov	r22,zero
    d4ac:	18800104 	addi	r2,r3,4
    d4b0:	1cc00017 	ldw	r19,0(r3)
    d4b4:	203ebb0e 	bge	r4,zero,cfa4 <__alt_data_end+0xf000cfa4>
    d4b8:	003ef106 	br	d080 <__alt_data_end+0xf000d080>
    d4bc:	9080040c 	andi	r2,r18,16
    d4c0:	1000921e 	bne	r2,zero,d70c <___vfprintf_internal_r+0x1aac>
    d4c4:	9480100c 	andi	r18,r18,64
    d4c8:	90013926 	beq	r18,zero,d9b0 <___vfprintf_internal_r+0x1d50>
    d4cc:	d9002d17 	ldw	r4,180(sp)
    d4d0:	d9402f17 	ldw	r5,188(sp)
    d4d4:	20800017 	ldw	r2,0(r4)
    d4d8:	21000104 	addi	r4,r4,4
    d4dc:	d9002d15 	stw	r4,180(sp)
    d4e0:	1140000d 	sth	r5,0(r2)
    d4e4:	003a1606 	br	bd40 <__alt_data_end+0xf000bd40>
    d4e8:	9080100c 	andi	r2,r18,64
    d4ec:	10008026 	beq	r2,zero,d6f0 <___vfprintf_internal_r+0x1a90>
    d4f0:	d8c02d17 	ldw	r3,180(sp)
    d4f4:	1cc0000f 	ldh	r19,0(r3)
    d4f8:	18c00104 	addi	r3,r3,4
    d4fc:	d8c02d15 	stw	r3,180(sp)
    d500:	982dd7fa 	srai	r22,r19,31
    d504:	b005883a 	mov	r2,r22
    d508:	003b1f06 	br	c188 <__alt_data_end+0xf000c188>
    d50c:	9080100c 	andi	r2,r18,64
    d510:	d8002785 	stb	zero,158(sp)
    d514:	10008a1e 	bne	r2,zero,d740 <___vfprintf_internal_r+0x1ae0>
    d518:	d9402d17 	ldw	r5,180(sp)
    d51c:	d8c02917 	ldw	r3,164(sp)
    d520:	002d883a 	mov	r22,zero
    d524:	28800104 	addi	r2,r5,4
    d528:	2cc00017 	ldw	r19,0(r5)
    d52c:	183e4b0e 	bge	r3,zero,ce5c <__alt_data_end+0xf000ce5c>
    d530:	9d86b03a 	or	r3,r19,r22
    d534:	d8802d15 	stw	r2,180(sp)
    d538:	183e4c1e 	bne	r3,zero,ce6c <__alt_data_end+0xf000ce6c>
    d53c:	0039883a 	mov	fp,zero
    d540:	0005883a 	mov	r2,zero
    d544:	003d4006 	br	ca48 <__alt_data_end+0xf000ca48>
    d548:	01420034 	movhi	r5,2048
    d54c:	2940f584 	addi	r5,r5,982
    d550:	d9402b15 	stw	r5,172(sp)
    d554:	d9402b17 	ldw	r5,172(sp)
    d558:	1c47883a 	add	r3,r3,r17
    d55c:	10800044 	addi	r2,r2,1
    d560:	41400015 	stw	r5,0(r8)
    d564:	44400115 	stw	r17,4(r8)
    d568:	d8c02015 	stw	r3,128(sp)
    d56c:	d8801f15 	stw	r2,124(sp)
    d570:	010001c4 	movi	r4,7
    d574:	20bec816 	blt	r4,r2,d098 <__alt_data_end+0xf000d098>
    d578:	42000204 	addi	r8,r8,8
    d57c:	003ecd06 	br	d0b4 <__alt_data_end+0xf000d0b4>
    d580:	d9002917 	ldw	r4,164(sp)
    d584:	d8002785 	stb	zero,158(sp)
    d588:	203d2d16 	blt	r4,zero,ca40 <__alt_data_end+0xf000ca40>
    d58c:	00bfdfc4 	movi	r2,-129
    d590:	90a4703a 	and	r18,r18,r2
    d594:	003a9106 	br	bfdc <__alt_data_end+0xf000bfdc>
    d598:	01020034 	movhi	r4,2048
    d59c:	2100f584 	addi	r4,r4,982
    d5a0:	d9002b15 	stw	r4,172(sp)
    d5a4:	003c0c06 	br	c5d8 <__alt_data_end+0xf000c5d8>
    d5a8:	d9002c17 	ldw	r4,176(sp)
    d5ac:	d9801e04 	addi	r6,sp,120
    d5b0:	b80b883a 	mov	r5,r23
    d5b4:	00143f80 	call	143f8 <__sprint_r>
    d5b8:	103aab1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d5bc:	d8c02017 	ldw	r3,128(sp)
    d5c0:	da000404 	addi	r8,sp,16
    d5c4:	003d4106 	br	cacc <__alt_data_end+0xf000cacc>
    d5c8:	d8801f17 	ldw	r2,124(sp)
    d5cc:	01420034 	movhi	r5,2048
    d5d0:	01000044 	movi	r4,1
    d5d4:	18c00044 	addi	r3,r3,1
    d5d8:	10800044 	addi	r2,r2,1
    d5dc:	2940ed04 	addi	r5,r5,948
    d5e0:	41000115 	stw	r4,4(r8)
    d5e4:	41400015 	stw	r5,0(r8)
    d5e8:	d8c02015 	stw	r3,128(sp)
    d5ec:	d8801f15 	stw	r2,124(sp)
    d5f0:	010001c4 	movi	r4,7
    d5f4:	20805c16 	blt	r4,r2,d768 <___vfprintf_internal_r+0x1b08>
    d5f8:	42000204 	addi	r8,r8,8
    d5fc:	8800041e 	bne	r17,zero,d610 <___vfprintf_internal_r+0x19b0>
    d600:	d8803317 	ldw	r2,204(sp)
    d604:	1000021e 	bne	r2,zero,d610 <___vfprintf_internal_r+0x19b0>
    d608:	9080004c 	andi	r2,r18,1
    d60c:	103c0926 	beq	r2,zero,c634 <__alt_data_end+0xf000c634>
    d610:	d9003717 	ldw	r4,220(sp)
    d614:	d8801f17 	ldw	r2,124(sp)
    d618:	d9403417 	ldw	r5,208(sp)
    d61c:	20c7883a 	add	r3,r4,r3
    d620:	10800044 	addi	r2,r2,1
    d624:	41000115 	stw	r4,4(r8)
    d628:	41400015 	stw	r5,0(r8)
    d62c:	d8c02015 	stw	r3,128(sp)
    d630:	d8801f15 	stw	r2,124(sp)
    d634:	010001c4 	movi	r4,7
    d638:	20812116 	blt	r4,r2,dac0 <___vfprintf_internal_r+0x1e60>
    d63c:	42000204 	addi	r8,r8,8
    d640:	0463c83a 	sub	r17,zero,r17
    d644:	0440730e 	bge	zero,r17,d814 <___vfprintf_internal_r+0x1bb4>
    d648:	05800404 	movi	r22,16
    d64c:	b440860e 	bge	r22,r17,d868 <___vfprintf_internal_r+0x1c08>
    d650:	01420034 	movhi	r5,2048
    d654:	2940f584 	addi	r5,r5,982
    d658:	d9402b15 	stw	r5,172(sp)
    d65c:	070001c4 	movi	fp,7
    d660:	dcc02c17 	ldw	r19,176(sp)
    d664:	00000306 	br	d674 <___vfprintf_internal_r+0x1a14>
    d668:	42000204 	addi	r8,r8,8
    d66c:	8c7ffc04 	addi	r17,r17,-16
    d670:	b440800e 	bge	r22,r17,d874 <___vfprintf_internal_r+0x1c14>
    d674:	18c00404 	addi	r3,r3,16
    d678:	10800044 	addi	r2,r2,1
    d67c:	45000015 	stw	r20,0(r8)
    d680:	45800115 	stw	r22,4(r8)
    d684:	d8c02015 	stw	r3,128(sp)
    d688:	d8801f15 	stw	r2,124(sp)
    d68c:	e0bff60e 	bge	fp,r2,d668 <__alt_data_end+0xf000d668>
    d690:	d9801e04 	addi	r6,sp,120
    d694:	b80b883a 	mov	r5,r23
    d698:	9809883a 	mov	r4,r19
    d69c:	00143f80 	call	143f8 <__sprint_r>
    d6a0:	103a711e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d6a4:	d8c02017 	ldw	r3,128(sp)
    d6a8:	d8801f17 	ldw	r2,124(sp)
    d6ac:	da000404 	addi	r8,sp,16
    d6b0:	003fee06 	br	d66c <__alt_data_end+0xf000d66c>
    d6b4:	00bfffc4 	movi	r2,-1
    d6b8:	003a6f06 	br	c078 <__alt_data_end+0xf000c078>
    d6bc:	008011c4 	movi	r2,71
    d6c0:	1440b816 	blt	r2,r17,d9a4 <___vfprintf_internal_r+0x1d44>
    d6c4:	04020034 	movhi	r16,2048
    d6c8:	8400df04 	addi	r16,r16,892
    d6cc:	00c000c4 	movi	r3,3
    d6d0:	00bfdfc4 	movi	r2,-129
    d6d4:	d8c02a15 	stw	r3,168(sp)
    d6d8:	90a4703a 	and	r18,r18,r2
    d6dc:	df002783 	ldbu	fp,158(sp)
    d6e0:	d8c02e15 	stw	r3,184(sp)
    d6e4:	d8002915 	stw	zero,164(sp)
    d6e8:	d8003215 	stw	zero,200(sp)
    d6ec:	003b2906 	br	c394 <__alt_data_end+0xf000c394>
    d6f0:	d9002d17 	ldw	r4,180(sp)
    d6f4:	24c00017 	ldw	r19,0(r4)
    d6f8:	21000104 	addi	r4,r4,4
    d6fc:	d9002d15 	stw	r4,180(sp)
    d700:	982dd7fa 	srai	r22,r19,31
    d704:	b005883a 	mov	r2,r22
    d708:	003a9f06 	br	c188 <__alt_data_end+0xf000c188>
    d70c:	d9402d17 	ldw	r5,180(sp)
    d710:	d8c02f17 	ldw	r3,188(sp)
    d714:	28800017 	ldw	r2,0(r5)
    d718:	29400104 	addi	r5,r5,4
    d71c:	d9402d15 	stw	r5,180(sp)
    d720:	10c00015 	stw	r3,0(r2)
    d724:	00398606 	br	bd40 <__alt_data_end+0xf000bd40>
    d728:	d9402d17 	ldw	r5,180(sp)
    d72c:	002d883a 	mov	r22,zero
    d730:	2cc00017 	ldw	r19,0(r5)
    d734:	29400104 	addi	r5,r5,4
    d738:	d9402d15 	stw	r5,180(sp)
    d73c:	003c2306 	br	c7cc <__alt_data_end+0xf000c7cc>
    d740:	d8c02d17 	ldw	r3,180(sp)
    d744:	d9002917 	ldw	r4,164(sp)
    d748:	002d883a 	mov	r22,zero
    d74c:	18800104 	addi	r2,r3,4
    d750:	1cc0000b 	ldhu	r19,0(r3)
    d754:	203dc10e 	bge	r4,zero,ce5c <__alt_data_end+0xf000ce5c>
    d758:	003f7506 	br	d530 <__alt_data_end+0xf000d530>
    d75c:	04020034 	movhi	r16,2048
    d760:	8400dd04 	addi	r16,r16,884
    d764:	003acc06 	br	c298 <__alt_data_end+0xf000c298>
    d768:	d9002c17 	ldw	r4,176(sp)
    d76c:	d9801e04 	addi	r6,sp,120
    d770:	b80b883a 	mov	r5,r23
    d774:	00143f80 	call	143f8 <__sprint_r>
    d778:	103a3b1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d77c:	dc402617 	ldw	r17,152(sp)
    d780:	d8c02017 	ldw	r3,128(sp)
    d784:	da000404 	addi	r8,sp,16
    d788:	003f9c06 	br	d5fc <__alt_data_end+0xf000d5fc>
    d78c:	ac400043 	ldbu	r17,1(r21)
    d790:	94800814 	ori	r18,r18,32
    d794:	ad400044 	addi	r21,r21,1
    d798:	8c403fcc 	andi	r17,r17,255
    d79c:	8c40201c 	xori	r17,r17,128
    d7a0:	8c7fe004 	addi	r17,r17,-128
    d7a4:	00398f06 	br	bde4 <__alt_data_end+0xf000bde4>
    d7a8:	d8c02d15 	stw	r3,180(sp)
    d7ac:	0039883a 	mov	fp,zero
    d7b0:	003e3506 	br	d088 <__alt_data_end+0xf000d088>
    d7b4:	d9002c17 	ldw	r4,176(sp)
    d7b8:	d9801e04 	addi	r6,sp,120
    d7bc:	b80b883a 	mov	r5,r23
    d7c0:	00143f80 	call	143f8 <__sprint_r>
    d7c4:	103a281e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d7c8:	d8c02017 	ldw	r3,128(sp)
    d7cc:	da000404 	addi	r8,sp,16
    d7d0:	003cd006 	br	cb14 <__alt_data_end+0xf000cb14>
    d7d4:	8009883a 	mov	r4,r16
    d7d8:	da003d15 	stw	r8,244(sp)
    d7dc:	00099f00 	call	99f0 <strlen>
    d7e0:	d8802e15 	stw	r2,184(sp)
    d7e4:	da003d17 	ldw	r8,244(sp)
    d7e8:	103c340e 	bge	r2,zero,c8bc <__alt_data_end+0xf000c8bc>
    d7ec:	0005883a 	mov	r2,zero
    d7f0:	003c3206 	br	c8bc <__alt_data_end+0xf000c8bc>
    d7f4:	d9002c17 	ldw	r4,176(sp)
    d7f8:	d9801e04 	addi	r6,sp,120
    d7fc:	b80b883a 	mov	r5,r23
    d800:	00143f80 	call	143f8 <__sprint_r>
    d804:	103a181e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d808:	d8c02017 	ldw	r3,128(sp)
    d80c:	d8801f17 	ldw	r2,124(sp)
    d810:	da000404 	addi	r8,sp,16
    d814:	d9403317 	ldw	r5,204(sp)
    d818:	10800044 	addi	r2,r2,1
    d81c:	44000015 	stw	r16,0(r8)
    d820:	28c7883a 	add	r3,r5,r3
    d824:	003b7d06 	br	c61c <__alt_data_end+0xf000c61c>
    d828:	01020034 	movhi	r4,2048
    d82c:	2100f984 	addi	r4,r4,998
    d830:	d9003515 	stw	r4,212(sp)
    d834:	003b1406 	br	c488 <__alt_data_end+0xf000c488>
    d838:	013fffc4 	movi	r4,-1
    d83c:	003a3506 	br	c114 <__alt_data_end+0xf000c114>
    d840:	0023883a 	mov	r17,zero
    d844:	003d9d06 	br	cebc <__alt_data_end+0xf000cebc>
    d848:	d9002c17 	ldw	r4,176(sp)
    d84c:	d9801e04 	addi	r6,sp,120
    d850:	b80b883a 	mov	r5,r23
    d854:	00143f80 	call	143f8 <__sprint_r>
    d858:	103a031e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d85c:	d8c02017 	ldw	r3,128(sp)
    d860:	da000404 	addi	r8,sp,16
    d864:	003d9406 	br	ceb8 <__alt_data_end+0xf000ceb8>
    d868:	01020034 	movhi	r4,2048
    d86c:	2100f584 	addi	r4,r4,982
    d870:	d9002b15 	stw	r4,172(sp)
    d874:	d9002b17 	ldw	r4,172(sp)
    d878:	1c47883a 	add	r3,r3,r17
    d87c:	10800044 	addi	r2,r2,1
    d880:	41000015 	stw	r4,0(r8)
    d884:	44400115 	stw	r17,4(r8)
    d888:	d8c02015 	stw	r3,128(sp)
    d88c:	d8801f15 	stw	r2,124(sp)
    d890:	010001c4 	movi	r4,7
    d894:	20bfd716 	blt	r4,r2,d7f4 <__alt_data_end+0xf000d7f4>
    d898:	42000204 	addi	r8,r8,8
    d89c:	003fdd06 	br	d814 <__alt_data_end+0xf000d814>
    d8a0:	d9002c17 	ldw	r4,176(sp)
    d8a4:	d9801e04 	addi	r6,sp,120
    d8a8:	b80b883a 	mov	r5,r23
    d8ac:	00143f80 	call	143f8 <__sprint_r>
    d8b0:	1039ed1e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d8b4:	d8802617 	ldw	r2,152(sp)
    d8b8:	d8c02017 	ldw	r3,128(sp)
    d8bc:	da000404 	addi	r8,sp,16
    d8c0:	003e1006 	br	d104 <__alt_data_end+0xf000d104>
    d8c4:	00800044 	movi	r2,1
    d8c8:	10803fcc 	andi	r2,r2,255
    d8cc:	00c00044 	movi	r3,1
    d8d0:	10fa3526 	beq	r2,r3,c1a8 <__alt_data_end+0xf000c1a8>
    d8d4:	00c00084 	movi	r3,2
    d8d8:	10fbcb26 	beq	r2,r3,c808 <__alt_data_end+0xf000c808>
    d8dc:	003a8f06 	br	c31c <__alt_data_end+0xf000c31c>
    d8e0:	01020034 	movhi	r4,2048
    d8e4:	2100f984 	addi	r4,r4,998
    d8e8:	d9003515 	stw	r4,212(sp)
    d8ec:	003b7606 	br	c6c8 <__alt_data_end+0xf000c6c8>
    d8f0:	d8802917 	ldw	r2,164(sp)
    d8f4:	00c00184 	movi	r3,6
    d8f8:	1880012e 	bgeu	r3,r2,d900 <___vfprintf_internal_r+0x1ca0>
    d8fc:	1805883a 	mov	r2,r3
    d900:	d8802e15 	stw	r2,184(sp)
    d904:	1000ef16 	blt	r2,zero,dcc4 <___vfprintf_internal_r+0x2064>
    d908:	04020034 	movhi	r16,2048
    d90c:	d8802a15 	stw	r2,168(sp)
    d910:	dcc02d15 	stw	r19,180(sp)
    d914:	d8002915 	stw	zero,164(sp)
    d918:	d8003215 	stw	zero,200(sp)
    d91c:	8400eb04 	addi	r16,r16,940
    d920:	0039883a 	mov	fp,zero
    d924:	003aa206 	br	c3b0 <__alt_data_end+0xf000c3b0>
    d928:	0021883a 	mov	r16,zero
    d92c:	003e0706 	br	d14c <__alt_data_end+0xf000d14c>
    d930:	d9002c17 	ldw	r4,176(sp)
    d934:	d9801e04 	addi	r6,sp,120
    d938:	b80b883a 	mov	r5,r23
    d93c:	00143f80 	call	143f8 <__sprint_r>
    d940:	1039c91e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    d944:	d8802617 	ldw	r2,152(sp)
    d948:	d9403317 	ldw	r5,204(sp)
    d94c:	d8c02017 	ldw	r3,128(sp)
    d950:	da000404 	addi	r8,sp,16
    d954:	2885c83a 	sub	r2,r5,r2
    d958:	003dfb06 	br	d148 <__alt_data_end+0xf000d148>
    d95c:	9080004c 	andi	r2,r18,1
    d960:	103e8f1e 	bne	r2,zero,d3a0 <__alt_data_end+0xf000d3a0>
    d964:	d8802117 	ldw	r2,132(sp)
    d968:	003e9e06 	br	d3e4 <__alt_data_end+0xf000d3e4>
    d96c:	1025883a 	mov	r18,r2
    d970:	0039883a 	mov	fp,zero
    d974:	00800084 	movi	r2,2
    d978:	003fd306 	br	d8c8 <__alt_data_end+0xf000d8c8>
    d97c:	07000b44 	movi	fp,45
    d980:	df002785 	stb	fp,158(sp)
    d984:	003a4006 	br	c288 <__alt_data_end+0xf000c288>
    d988:	00c00b44 	movi	r3,45
    d98c:	d8c02785 	stb	r3,158(sp)
    d990:	d8802a15 	stw	r2,168(sp)
    d994:	dc802b17 	ldw	r18,172(sp)
    d998:	d8002915 	stw	zero,164(sp)
    d99c:	07000b44 	movi	fp,45
    d9a0:	003a8006 	br	c3a4 <__alt_data_end+0xf000c3a4>
    d9a4:	04020034 	movhi	r16,2048
    d9a8:	8400e004 	addi	r16,r16,896
    d9ac:	003f4706 	br	d6cc <__alt_data_end+0xf000d6cc>
    d9b0:	d8c02d17 	ldw	r3,180(sp)
    d9b4:	d9002f17 	ldw	r4,188(sp)
    d9b8:	18800017 	ldw	r2,0(r3)
    d9bc:	18c00104 	addi	r3,r3,4
    d9c0:	d8c02d15 	stw	r3,180(sp)
    d9c4:	11000015 	stw	r4,0(r2)
    d9c8:	0038dd06 	br	bd40 <__alt_data_end+0xf000bd40>
    d9cc:	dd802617 	ldw	r22,152(sp)
    d9d0:	00bfff44 	movi	r2,-3
    d9d4:	b0801c16 	blt	r22,r2,da48 <___vfprintf_internal_r+0x1de8>
    d9d8:	d9402917 	ldw	r5,164(sp)
    d9dc:	2d801a16 	blt	r5,r22,da48 <___vfprintf_internal_r+0x1de8>
    d9e0:	dd803215 	stw	r22,200(sp)
    d9e4:	003e8906 	br	d40c <__alt_data_end+0xf000d40c>
    d9e8:	01020034 	movhi	r4,2048
    d9ec:	2100f584 	addi	r4,r4,982
    d9f0:	d9002b15 	stw	r4,172(sp)
    d9f4:	003c9106 	br	cc3c <__alt_data_end+0xf000cc3c>
    d9f8:	e005883a 	mov	r2,fp
    d9fc:	003e7906 	br	d3e4 <__alt_data_end+0xf000d3e4>
    da00:	d9402917 	ldw	r5,164(sp)
    da04:	df002783 	ldbu	fp,158(sp)
    da08:	dcc02d15 	stw	r19,180(sp)
    da0c:	d9402a15 	stw	r5,168(sp)
    da10:	d9402e15 	stw	r5,184(sp)
    da14:	d8002915 	stw	zero,164(sp)
    da18:	d8003215 	stw	zero,200(sp)
    da1c:	003a5d06 	br	c394 <__alt_data_end+0xf000c394>
    da20:	9080004c 	andi	r2,r18,1
    da24:	0039883a 	mov	fp,zero
    da28:	10000426 	beq	r2,zero,da3c <___vfprintf_internal_r+0x1ddc>
    da2c:	00800c04 	movi	r2,48
    da30:	dc001dc4 	addi	r16,sp,119
    da34:	d8801dc5 	stb	r2,119(sp)
    da38:	003b8006 	br	c83c <__alt_data_end+0xf000c83c>
    da3c:	d8002e15 	stw	zero,184(sp)
    da40:	dc001e04 	addi	r16,sp,120
    da44:	003a4d06 	br	c37c <__alt_data_end+0xf000c37c>
    da48:	8c7fff84 	addi	r17,r17,-2
    da4c:	b5bfffc4 	addi	r22,r22,-1
    da50:	dd802615 	stw	r22,152(sp)
    da54:	dc4022c5 	stb	r17,139(sp)
    da58:	b000bf16 	blt	r22,zero,dd58 <___vfprintf_internal_r+0x20f8>
    da5c:	00800ac4 	movi	r2,43
    da60:	d8802305 	stb	r2,140(sp)
    da64:	00800244 	movi	r2,9
    da68:	15807016 	blt	r2,r22,dc2c <___vfprintf_internal_r+0x1fcc>
    da6c:	00800c04 	movi	r2,48
    da70:	b5800c04 	addi	r22,r22,48
    da74:	d8802345 	stb	r2,141(sp)
    da78:	dd802385 	stb	r22,142(sp)
    da7c:	d88023c4 	addi	r2,sp,143
    da80:	df0022c4 	addi	fp,sp,139
    da84:	d8c03317 	ldw	r3,204(sp)
    da88:	1739c83a 	sub	fp,r2,fp
    da8c:	d9003317 	ldw	r4,204(sp)
    da90:	e0c7883a 	add	r3,fp,r3
    da94:	df003a15 	stw	fp,232(sp)
    da98:	d8c02e15 	stw	r3,184(sp)
    da9c:	00800044 	movi	r2,1
    daa0:	1100b30e 	bge	r2,r4,dd70 <___vfprintf_internal_r+0x2110>
    daa4:	d8c02e17 	ldw	r3,184(sp)
    daa8:	18c00044 	addi	r3,r3,1
    daac:	d8c02e15 	stw	r3,184(sp)
    dab0:	1805883a 	mov	r2,r3
    dab4:	1800ac16 	blt	r3,zero,dd68 <___vfprintf_internal_r+0x2108>
    dab8:	d8003215 	stw	zero,200(sp)
    dabc:	003e5d06 	br	d434 <__alt_data_end+0xf000d434>
    dac0:	d9002c17 	ldw	r4,176(sp)
    dac4:	d9801e04 	addi	r6,sp,120
    dac8:	b80b883a 	mov	r5,r23
    dacc:	00143f80 	call	143f8 <__sprint_r>
    dad0:	1039651e 	bne	r2,zero,c068 <__alt_data_end+0xf000c068>
    dad4:	dc402617 	ldw	r17,152(sp)
    dad8:	d8c02017 	ldw	r3,128(sp)
    dadc:	d8801f17 	ldw	r2,124(sp)
    dae0:	da000404 	addi	r8,sp,16
    dae4:	003ed606 	br	d640 <__alt_data_end+0xf000d640>
    dae8:	582b883a 	mov	r21,r11
    daec:	d8002915 	stw	zero,164(sp)
    daf0:	0038bd06 	br	bde8 <__alt_data_end+0xf000bde8>
    daf4:	d8802917 	ldw	r2,164(sp)
    daf8:	103e071e 	bne	r2,zero,d318 <__alt_data_end+0xf000d318>
    dafc:	dc002915 	stw	r16,164(sp)
    db00:	003e0506 	br	d318 <__alt_data_end+0xf000d318>
    db04:	d9002917 	ldw	r4,164(sp)
    db08:	20c00044 	addi	r3,r4,1
    db0c:	003e0f06 	br	d34c <__alt_data_end+0xf000d34c>
    db10:	01400184 	movi	r5,6
    db14:	d9402915 	stw	r5,164(sp)
    db18:	003dff06 	br	d318 <__alt_data_end+0xf000d318>
    db1c:	d8802104 	addi	r2,sp,132
    db20:	d8800315 	stw	r2,12(sp)
    db24:	d8802504 	addi	r2,sp,148
    db28:	d8800215 	stw	r2,8(sp)
    db2c:	d8802604 	addi	r2,sp,152
    db30:	d8800115 	stw	r2,4(sp)
    db34:	d8802917 	ldw	r2,164(sp)
    db38:	d9403617 	ldw	r5,216(sp)
    db3c:	d9002c17 	ldw	r4,176(sp)
    db40:	d8800015 	stw	r2,0(sp)
    db44:	01c000c4 	movi	r7,3
    db48:	980d883a 	mov	r6,r19
    db4c:	da003d15 	stw	r8,244(sp)
    db50:	000e2840 	call	e284 <_dtoa_r>
    db54:	d8c02917 	ldw	r3,164(sp)
    db58:	da003d17 	ldw	r8,244(sp)
    db5c:	1021883a 	mov	r16,r2
    db60:	10f9883a 	add	fp,r2,r3
    db64:	81000007 	ldb	r4,0(r16)
    db68:	00800c04 	movi	r2,48
    db6c:	20805e26 	beq	r4,r2,dce8 <___vfprintf_internal_r+0x2088>
    db70:	d8c02617 	ldw	r3,152(sp)
    db74:	e0f9883a 	add	fp,fp,r3
    db78:	003e0a06 	br	d3a4 <__alt_data_end+0xf000d3a4>
    db7c:	00c00b44 	movi	r3,45
    db80:	24e0003c 	xorhi	r19,r4,32768
    db84:	d8c02a05 	stb	r3,168(sp)
    db88:	003de906 	br	d330 <__alt_data_end+0xf000d330>
    db8c:	d8c03217 	ldw	r3,200(sp)
    db90:	00c07a0e 	bge	zero,r3,dd7c <___vfprintf_internal_r+0x211c>
    db94:	00800044 	movi	r2,1
    db98:	d9003317 	ldw	r4,204(sp)
    db9c:	1105883a 	add	r2,r2,r4
    dba0:	d8802e15 	stw	r2,184(sp)
    dba4:	10004e16 	blt	r2,zero,dce0 <___vfprintf_internal_r+0x2080>
    dba8:	044019c4 	movi	r17,103
    dbac:	003e2106 	br	d434 <__alt_data_end+0xf000d434>
    dbb0:	d9002917 	ldw	r4,164(sp)
    dbb4:	d8802104 	addi	r2,sp,132
    dbb8:	d8800315 	stw	r2,12(sp)
    dbbc:	d9000015 	stw	r4,0(sp)
    dbc0:	d8802504 	addi	r2,sp,148
    dbc4:	d9403617 	ldw	r5,216(sp)
    dbc8:	d9002c17 	ldw	r4,176(sp)
    dbcc:	d8800215 	stw	r2,8(sp)
    dbd0:	d8802604 	addi	r2,sp,152
    dbd4:	d8800115 	stw	r2,4(sp)
    dbd8:	01c000c4 	movi	r7,3
    dbdc:	980d883a 	mov	r6,r19
    dbe0:	da003d15 	stw	r8,244(sp)
    dbe4:	000e2840 	call	e284 <_dtoa_r>
    dbe8:	d8c02917 	ldw	r3,164(sp)
    dbec:	da003d17 	ldw	r8,244(sp)
    dbf0:	1021883a 	mov	r16,r2
    dbf4:	00801184 	movi	r2,70
    dbf8:	80f9883a 	add	fp,r16,r3
    dbfc:	88bfd926 	beq	r17,r2,db64 <__alt_data_end+0xf000db64>
    dc00:	003de806 	br	d3a4 <__alt_data_end+0xf000d3a4>
    dc04:	d9002917 	ldw	r4,164(sp)
    dc08:	00c04d0e 	bge	zero,r3,dd40 <___vfprintf_internal_r+0x20e0>
    dc0c:	2000441e 	bne	r4,zero,dd20 <___vfprintf_internal_r+0x20c0>
    dc10:	9480004c 	andi	r18,r18,1
    dc14:	9000421e 	bne	r18,zero,dd20 <___vfprintf_internal_r+0x20c0>
    dc18:	1805883a 	mov	r2,r3
    dc1c:	18007016 	blt	r3,zero,dde0 <___vfprintf_internal_r+0x2180>
    dc20:	d8c03217 	ldw	r3,200(sp)
    dc24:	d8c02e15 	stw	r3,184(sp)
    dc28:	003e0206 	br	d434 <__alt_data_end+0xf000d434>
    dc2c:	df0022c4 	addi	fp,sp,139
    dc30:	dc002915 	stw	r16,164(sp)
    dc34:	4027883a 	mov	r19,r8
    dc38:	e021883a 	mov	r16,fp
    dc3c:	b009883a 	mov	r4,r22
    dc40:	01400284 	movi	r5,10
    dc44:	00093d00 	call	93d0 <__modsi3>
    dc48:	10800c04 	addi	r2,r2,48
    dc4c:	843fffc4 	addi	r16,r16,-1
    dc50:	b009883a 	mov	r4,r22
    dc54:	01400284 	movi	r5,10
    dc58:	80800005 	stb	r2,0(r16)
    dc5c:	000934c0 	call	934c <__divsi3>
    dc60:	102d883a 	mov	r22,r2
    dc64:	00800244 	movi	r2,9
    dc68:	15bff416 	blt	r2,r22,dc3c <__alt_data_end+0xf000dc3c>
    dc6c:	9811883a 	mov	r8,r19
    dc70:	b0800c04 	addi	r2,r22,48
    dc74:	8027883a 	mov	r19,r16
    dc78:	997fffc4 	addi	r5,r19,-1
    dc7c:	98bfffc5 	stb	r2,-1(r19)
    dc80:	dc002917 	ldw	r16,164(sp)
    dc84:	2f006a2e 	bgeu	r5,fp,de30 <___vfprintf_internal_r+0x21d0>
    dc88:	d9c02384 	addi	r7,sp,142
    dc8c:	3ccfc83a 	sub	r7,r7,r19
    dc90:	d9002344 	addi	r4,sp,141
    dc94:	e1cf883a 	add	r7,fp,r7
    dc98:	00000106 	br	dca0 <___vfprintf_internal_r+0x2040>
    dc9c:	28800003 	ldbu	r2,0(r5)
    dca0:	20800005 	stb	r2,0(r4)
    dca4:	21000044 	addi	r4,r4,1
    dca8:	29400044 	addi	r5,r5,1
    dcac:	393ffb1e 	bne	r7,r4,dc9c <__alt_data_end+0xf000dc9c>
    dcb0:	d8802304 	addi	r2,sp,140
    dcb4:	14c5c83a 	sub	r2,r2,r19
    dcb8:	d8c02344 	addi	r3,sp,141
    dcbc:	1885883a 	add	r2,r3,r2
    dcc0:	003f7006 	br	da84 <__alt_data_end+0xf000da84>
    dcc4:	0005883a 	mov	r2,zero
    dcc8:	003f0f06 	br	d908 <__alt_data_end+0xf000d908>
    dccc:	d8c03217 	ldw	r3,200(sp)
    dcd0:	18c00044 	addi	r3,r3,1
    dcd4:	d8c02e15 	stw	r3,184(sp)
    dcd8:	1805883a 	mov	r2,r3
    dcdc:	183fb20e 	bge	r3,zero,dba8 <__alt_data_end+0xf000dba8>
    dce0:	0005883a 	mov	r2,zero
    dce4:	003fb006 	br	dba8 <__alt_data_end+0xf000dba8>
    dce8:	d9003617 	ldw	r4,216(sp)
    dcec:	000d883a 	mov	r6,zero
    dcf0:	000f883a 	mov	r7,zero
    dcf4:	980b883a 	mov	r5,r19
    dcf8:	d8c03c15 	stw	r3,240(sp)
    dcfc:	da003d15 	stw	r8,244(sp)
    dd00:	00175d40 	call	175d4 <__eqdf2>
    dd04:	d8c03c17 	ldw	r3,240(sp)
    dd08:	da003d17 	ldw	r8,244(sp)
    dd0c:	103f9826 	beq	r2,zero,db70 <__alt_data_end+0xf000db70>
    dd10:	00800044 	movi	r2,1
    dd14:	10c7c83a 	sub	r3,r2,r3
    dd18:	d8c02615 	stw	r3,152(sp)
    dd1c:	003f9506 	br	db74 <__alt_data_end+0xf000db74>
    dd20:	d9002917 	ldw	r4,164(sp)
    dd24:	d8c03217 	ldw	r3,200(sp)
    dd28:	20800044 	addi	r2,r4,1
    dd2c:	1885883a 	add	r2,r3,r2
    dd30:	d8802e15 	stw	r2,184(sp)
    dd34:	103dbf0e 	bge	r2,zero,d434 <__alt_data_end+0xf000d434>
    dd38:	0005883a 	mov	r2,zero
    dd3c:	003dbd06 	br	d434 <__alt_data_end+0xf000d434>
    dd40:	2000211e 	bne	r4,zero,ddc8 <___vfprintf_internal_r+0x2168>
    dd44:	9480004c 	andi	r18,r18,1
    dd48:	90001f1e 	bne	r18,zero,ddc8 <___vfprintf_internal_r+0x2168>
    dd4c:	00800044 	movi	r2,1
    dd50:	d8802e15 	stw	r2,184(sp)
    dd54:	003db706 	br	d434 <__alt_data_end+0xf000d434>
    dd58:	00800b44 	movi	r2,45
    dd5c:	05adc83a 	sub	r22,zero,r22
    dd60:	d8802305 	stb	r2,140(sp)
    dd64:	003f3f06 	br	da64 <__alt_data_end+0xf000da64>
    dd68:	0005883a 	mov	r2,zero
    dd6c:	003f5206 	br	dab8 <__alt_data_end+0xf000dab8>
    dd70:	90a4703a 	and	r18,r18,r2
    dd74:	903f4e26 	beq	r18,zero,dab0 <__alt_data_end+0xf000dab0>
    dd78:	003f4a06 	br	daa4 <__alt_data_end+0xf000daa4>
    dd7c:	00800084 	movi	r2,2
    dd80:	10c5c83a 	sub	r2,r2,r3
    dd84:	003f8406 	br	db98 <__alt_data_end+0xf000db98>
    dd88:	d8802d17 	ldw	r2,180(sp)
    dd8c:	d9002d17 	ldw	r4,180(sp)
    dd90:	ac400043 	ldbu	r17,1(r21)
    dd94:	10800017 	ldw	r2,0(r2)
    dd98:	582b883a 	mov	r21,r11
    dd9c:	d8802915 	stw	r2,164(sp)
    dda0:	20800104 	addi	r2,r4,4
    dda4:	d9002917 	ldw	r4,164(sp)
    dda8:	d8802d15 	stw	r2,180(sp)
    ddac:	203e7a0e 	bge	r4,zero,d798 <__alt_data_end+0xf000d798>
    ddb0:	8c403fcc 	andi	r17,r17,255
    ddb4:	00bfffc4 	movi	r2,-1
    ddb8:	8c40201c 	xori	r17,r17,128
    ddbc:	d8802915 	stw	r2,164(sp)
    ddc0:	8c7fe004 	addi	r17,r17,-128
    ddc4:	00380706 	br	bde4 <__alt_data_end+0xf000bde4>
    ddc8:	d8c02917 	ldw	r3,164(sp)
    ddcc:	18c00084 	addi	r3,r3,2
    ddd0:	d8c02e15 	stw	r3,184(sp)
    ddd4:	1805883a 	mov	r2,r3
    ddd8:	183d960e 	bge	r3,zero,d434 <__alt_data_end+0xf000d434>
    dddc:	003fd606 	br	dd38 <__alt_data_end+0xf000dd38>
    dde0:	0005883a 	mov	r2,zero
    dde4:	003f8e06 	br	dc20 <__alt_data_end+0xf000dc20>
    dde8:	9080004c 	andi	r2,r18,1
    ddec:	103f811e 	bne	r2,zero,dbf4 <__alt_data_end+0xf000dbf4>
    ddf0:	d8802117 	ldw	r2,132(sp)
    ddf4:	1405c83a 	sub	r2,r2,r16
    ddf8:	d8803315 	stw	r2,204(sp)
    ddfc:	b47ef326 	beq	r22,r17,d9cc <__alt_data_end+0xf000d9cc>
    de00:	dd802617 	ldw	r22,152(sp)
    de04:	003f1106 	br	da4c <__alt_data_end+0xf000da4c>
    de08:	d9c02785 	stb	r7,158(sp)
    de0c:	00390406 	br	c220 <__alt_data_end+0xf000c220>
    de10:	d9c02785 	stb	r7,158(sp)
    de14:	0038d306 	br	c164 <__alt_data_end+0xf000c164>
    de18:	d9c02785 	stb	r7,158(sp)
    de1c:	003a6106 	br	c7a4 <__alt_data_end+0xf000c7a4>
    de20:	d9c02785 	stb	r7,158(sp)
    de24:	003af806 	br	ca08 <__alt_data_end+0xf000ca08>
    de28:	0005883a 	mov	r2,zero
    de2c:	003d7e06 	br	d428 <__alt_data_end+0xf000d428>
    de30:	d8802344 	addi	r2,sp,141
    de34:	003f1306 	br	da84 <__alt_data_end+0xf000da84>
    de38:	d9c02785 	stb	r7,158(sp)
    de3c:	00392306 	br	c2cc <__alt_data_end+0xf000c2cc>
    de40:	d9c02785 	stb	r7,158(sp)
    de44:	003aa906 	br	c8ec <__alt_data_end+0xf000c8ec>
    de48:	d9c02785 	stb	r7,158(sp)
    de4c:	003a3d06 	br	c744 <__alt_data_end+0xf000c744>
    de50:	d9c02785 	stb	r7,158(sp)
    de54:	003aca06 	br	c980 <__alt_data_end+0xf000c980>

0000de58 <__vfprintf_internal>:
    de58:	00820034 	movhi	r2,2048
    de5c:	108b1004 	addi	r2,r2,11328
    de60:	300f883a 	mov	r7,r6
    de64:	280d883a 	mov	r6,r5
    de68:	200b883a 	mov	r5,r4
    de6c:	11000017 	ldw	r4,0(r2)
    de70:	000bc601 	jmpi	bc60 <___vfprintf_internal_r>

0000de74 <__sbprintf>:
    de74:	2880030b 	ldhu	r2,12(r5)
    de78:	2ac01917 	ldw	r11,100(r5)
    de7c:	2a80038b 	ldhu	r10,14(r5)
    de80:	2a400717 	ldw	r9,28(r5)
    de84:	2a000917 	ldw	r8,36(r5)
    de88:	defee204 	addi	sp,sp,-1144
    de8c:	00c10004 	movi	r3,1024
    de90:	dc011a15 	stw	r16,1128(sp)
    de94:	10bfff4c 	andi	r2,r2,65533
    de98:	2821883a 	mov	r16,r5
    de9c:	d8cb883a 	add	r5,sp,r3
    dea0:	dc811c15 	stw	r18,1136(sp)
    dea4:	dc411b15 	stw	r17,1132(sp)
    dea8:	dfc11d15 	stw	ra,1140(sp)
    deac:	2025883a 	mov	r18,r4
    deb0:	d881030d 	sth	r2,1036(sp)
    deb4:	dac11915 	stw	r11,1124(sp)
    deb8:	da81038d 	sth	r10,1038(sp)
    debc:	da410715 	stw	r9,1052(sp)
    dec0:	da010915 	stw	r8,1060(sp)
    dec4:	dec10015 	stw	sp,1024(sp)
    dec8:	dec10415 	stw	sp,1040(sp)
    decc:	d8c10215 	stw	r3,1032(sp)
    ded0:	d8c10515 	stw	r3,1044(sp)
    ded4:	d8010615 	stw	zero,1048(sp)
    ded8:	000bc600 	call	bc60 <___vfprintf_internal_r>
    dedc:	1023883a 	mov	r17,r2
    dee0:	10000416 	blt	r2,zero,def4 <__sbprintf+0x80>
    dee4:	d9410004 	addi	r5,sp,1024
    dee8:	9009883a 	mov	r4,r18
    deec:	000fb280 	call	fb28 <_fflush_r>
    def0:	10000d1e 	bne	r2,zero,df28 <__sbprintf+0xb4>
    def4:	d881030b 	ldhu	r2,1036(sp)
    def8:	1080100c 	andi	r2,r2,64
    defc:	10000326 	beq	r2,zero,df0c <__sbprintf+0x98>
    df00:	8080030b 	ldhu	r2,12(r16)
    df04:	10801014 	ori	r2,r2,64
    df08:	8080030d 	sth	r2,12(r16)
    df0c:	8805883a 	mov	r2,r17
    df10:	dfc11d17 	ldw	ra,1140(sp)
    df14:	dc811c17 	ldw	r18,1136(sp)
    df18:	dc411b17 	ldw	r17,1132(sp)
    df1c:	dc011a17 	ldw	r16,1128(sp)
    df20:	dec11e04 	addi	sp,sp,1144
    df24:	f800283a 	ret
    df28:	047fffc4 	movi	r17,-1
    df2c:	003ff106 	br	def4 <__alt_data_end+0xf000def4>

0000df30 <__swsetup_r>:
    df30:	00820034 	movhi	r2,2048
    df34:	defffd04 	addi	sp,sp,-12
    df38:	108b1004 	addi	r2,r2,11328
    df3c:	dc400115 	stw	r17,4(sp)
    df40:	2023883a 	mov	r17,r4
    df44:	11000017 	ldw	r4,0(r2)
    df48:	dc000015 	stw	r16,0(sp)
    df4c:	dfc00215 	stw	ra,8(sp)
    df50:	2821883a 	mov	r16,r5
    df54:	20000226 	beq	r4,zero,df60 <__swsetup_r+0x30>
    df58:	20800e17 	ldw	r2,56(r4)
    df5c:	10003126 	beq	r2,zero,e024 <__swsetup_r+0xf4>
    df60:	8080030b 	ldhu	r2,12(r16)
    df64:	10c0020c 	andi	r3,r2,8
    df68:	1009883a 	mov	r4,r2
    df6c:	18000f26 	beq	r3,zero,dfac <__swsetup_r+0x7c>
    df70:	80c00417 	ldw	r3,16(r16)
    df74:	18001526 	beq	r3,zero,dfcc <__swsetup_r+0x9c>
    df78:	1100004c 	andi	r4,r2,1
    df7c:	20001c1e 	bne	r4,zero,dff0 <__swsetup_r+0xc0>
    df80:	1080008c 	andi	r2,r2,2
    df84:	1000291e 	bne	r2,zero,e02c <__swsetup_r+0xfc>
    df88:	80800517 	ldw	r2,20(r16)
    df8c:	80800215 	stw	r2,8(r16)
    df90:	18001c26 	beq	r3,zero,e004 <__swsetup_r+0xd4>
    df94:	0005883a 	mov	r2,zero
    df98:	dfc00217 	ldw	ra,8(sp)
    df9c:	dc400117 	ldw	r17,4(sp)
    dfa0:	dc000017 	ldw	r16,0(sp)
    dfa4:	dec00304 	addi	sp,sp,12
    dfa8:	f800283a 	ret
    dfac:	2080040c 	andi	r2,r4,16
    dfb0:	10002e26 	beq	r2,zero,e06c <__swsetup_r+0x13c>
    dfb4:	2080010c 	andi	r2,r4,4
    dfb8:	10001e1e 	bne	r2,zero,e034 <__swsetup_r+0x104>
    dfbc:	80c00417 	ldw	r3,16(r16)
    dfc0:	20800214 	ori	r2,r4,8
    dfc4:	8080030d 	sth	r2,12(r16)
    dfc8:	183feb1e 	bne	r3,zero,df78 <__alt_data_end+0xf000df78>
    dfcc:	1100a00c 	andi	r4,r2,640
    dfd0:	01408004 	movi	r5,512
    dfd4:	217fe826 	beq	r4,r5,df78 <__alt_data_end+0xf000df78>
    dfd8:	800b883a 	mov	r5,r16
    dfdc:	8809883a 	mov	r4,r17
    dfe0:	0010aa80 	call	10aa8 <__smakebuf_r>
    dfe4:	8080030b 	ldhu	r2,12(r16)
    dfe8:	80c00417 	ldw	r3,16(r16)
    dfec:	003fe206 	br	df78 <__alt_data_end+0xf000df78>
    dff0:	80800517 	ldw	r2,20(r16)
    dff4:	80000215 	stw	zero,8(r16)
    dff8:	0085c83a 	sub	r2,zero,r2
    dffc:	80800615 	stw	r2,24(r16)
    e000:	183fe41e 	bne	r3,zero,df94 <__alt_data_end+0xf000df94>
    e004:	80c0030b 	ldhu	r3,12(r16)
    e008:	0005883a 	mov	r2,zero
    e00c:	1900200c 	andi	r4,r3,128
    e010:	203fe126 	beq	r4,zero,df98 <__alt_data_end+0xf000df98>
    e014:	18c01014 	ori	r3,r3,64
    e018:	80c0030d 	sth	r3,12(r16)
    e01c:	00bfffc4 	movi	r2,-1
    e020:	003fdd06 	br	df98 <__alt_data_end+0xf000df98>
    e024:	000ff040 	call	ff04 <__sinit>
    e028:	003fcd06 	br	df60 <__alt_data_end+0xf000df60>
    e02c:	0005883a 	mov	r2,zero
    e030:	003fd606 	br	df8c <__alt_data_end+0xf000df8c>
    e034:	81400c17 	ldw	r5,48(r16)
    e038:	28000626 	beq	r5,zero,e054 <__swsetup_r+0x124>
    e03c:	80801004 	addi	r2,r16,64
    e040:	28800326 	beq	r5,r2,e050 <__swsetup_r+0x120>
    e044:	8809883a 	mov	r4,r17
    e048:	00100780 	call	10078 <_free_r>
    e04c:	8100030b 	ldhu	r4,12(r16)
    e050:	80000c15 	stw	zero,48(r16)
    e054:	80c00417 	ldw	r3,16(r16)
    e058:	00bff6c4 	movi	r2,-37
    e05c:	1108703a 	and	r4,r2,r4
    e060:	80000115 	stw	zero,4(r16)
    e064:	80c00015 	stw	r3,0(r16)
    e068:	003fd506 	br	dfc0 <__alt_data_end+0xf000dfc0>
    e06c:	00800244 	movi	r2,9
    e070:	88800015 	stw	r2,0(r17)
    e074:	20801014 	ori	r2,r4,64
    e078:	8080030d 	sth	r2,12(r16)
    e07c:	00bfffc4 	movi	r2,-1
    e080:	003fc506 	br	df98 <__alt_data_end+0xf000df98>

0000e084 <quorem>:
    e084:	defff704 	addi	sp,sp,-36
    e088:	dc800215 	stw	r18,8(sp)
    e08c:	20800417 	ldw	r2,16(r4)
    e090:	2c800417 	ldw	r18,16(r5)
    e094:	dfc00815 	stw	ra,32(sp)
    e098:	ddc00715 	stw	r23,28(sp)
    e09c:	dd800615 	stw	r22,24(sp)
    e0a0:	dd400515 	stw	r21,20(sp)
    e0a4:	dd000415 	stw	r20,16(sp)
    e0a8:	dcc00315 	stw	r19,12(sp)
    e0ac:	dc400115 	stw	r17,4(sp)
    e0b0:	dc000015 	stw	r16,0(sp)
    e0b4:	14807116 	blt	r2,r18,e27c <quorem+0x1f8>
    e0b8:	94bfffc4 	addi	r18,r18,-1
    e0bc:	94ad883a 	add	r22,r18,r18
    e0c0:	b5ad883a 	add	r22,r22,r22
    e0c4:	2c400504 	addi	r17,r5,20
    e0c8:	8da9883a 	add	r20,r17,r22
    e0cc:	25400504 	addi	r21,r4,20
    e0d0:	282f883a 	mov	r23,r5
    e0d4:	adad883a 	add	r22,r21,r22
    e0d8:	a1400017 	ldw	r5,0(r20)
    e0dc:	2021883a 	mov	r16,r4
    e0e0:	b1000017 	ldw	r4,0(r22)
    e0e4:	29400044 	addi	r5,r5,1
    e0e8:	00094440 	call	9444 <__udivsi3>
    e0ec:	1027883a 	mov	r19,r2
    e0f0:	10002c26 	beq	r2,zero,e1a4 <quorem+0x120>
    e0f4:	a813883a 	mov	r9,r21
    e0f8:	880b883a 	mov	r5,r17
    e0fc:	0009883a 	mov	r4,zero
    e100:	000d883a 	mov	r6,zero
    e104:	2a000017 	ldw	r8,0(r5)
    e108:	49c00017 	ldw	r7,0(r9)
    e10c:	29400104 	addi	r5,r5,4
    e110:	40bfffcc 	andi	r2,r8,65535
    e114:	14c5383a 	mul	r2,r2,r19
    e118:	4010d43a 	srli	r8,r8,16
    e11c:	38ffffcc 	andi	r3,r7,65535
    e120:	1105883a 	add	r2,r2,r4
    e124:	1008d43a 	srli	r4,r2,16
    e128:	44d1383a 	mul	r8,r8,r19
    e12c:	198d883a 	add	r6,r3,r6
    e130:	10ffffcc 	andi	r3,r2,65535
    e134:	30c7c83a 	sub	r3,r6,r3
    e138:	380ed43a 	srli	r7,r7,16
    e13c:	4105883a 	add	r2,r8,r4
    e140:	180dd43a 	srai	r6,r3,16
    e144:	113fffcc 	andi	r4,r2,65535
    e148:	390fc83a 	sub	r7,r7,r4
    e14c:	398d883a 	add	r6,r7,r6
    e150:	300e943a 	slli	r7,r6,16
    e154:	18ffffcc 	andi	r3,r3,65535
    e158:	1008d43a 	srli	r4,r2,16
    e15c:	38ceb03a 	or	r7,r7,r3
    e160:	49c00015 	stw	r7,0(r9)
    e164:	300dd43a 	srai	r6,r6,16
    e168:	4a400104 	addi	r9,r9,4
    e16c:	a17fe52e 	bgeu	r20,r5,e104 <__alt_data_end+0xf000e104>
    e170:	b0800017 	ldw	r2,0(r22)
    e174:	10000b1e 	bne	r2,zero,e1a4 <quorem+0x120>
    e178:	b0bfff04 	addi	r2,r22,-4
    e17c:	a880082e 	bgeu	r21,r2,e1a0 <quorem+0x11c>
    e180:	b0ffff17 	ldw	r3,-4(r22)
    e184:	18000326 	beq	r3,zero,e194 <quorem+0x110>
    e188:	00000506 	br	e1a0 <quorem+0x11c>
    e18c:	10c00017 	ldw	r3,0(r2)
    e190:	1800031e 	bne	r3,zero,e1a0 <quorem+0x11c>
    e194:	10bfff04 	addi	r2,r2,-4
    e198:	94bfffc4 	addi	r18,r18,-1
    e19c:	a8bffb36 	bltu	r21,r2,e18c <__alt_data_end+0xf000e18c>
    e1a0:	84800415 	stw	r18,16(r16)
    e1a4:	b80b883a 	mov	r5,r23
    e1a8:	8009883a 	mov	r4,r16
    e1ac:	0011f780 	call	11f78 <__mcmp>
    e1b0:	10002616 	blt	r2,zero,e24c <quorem+0x1c8>
    e1b4:	9cc00044 	addi	r19,r19,1
    e1b8:	a805883a 	mov	r2,r21
    e1bc:	000b883a 	mov	r5,zero
    e1c0:	11000017 	ldw	r4,0(r2)
    e1c4:	89800017 	ldw	r6,0(r17)
    e1c8:	10800104 	addi	r2,r2,4
    e1cc:	20ffffcc 	andi	r3,r4,65535
    e1d0:	194b883a 	add	r5,r3,r5
    e1d4:	30ffffcc 	andi	r3,r6,65535
    e1d8:	28c7c83a 	sub	r3,r5,r3
    e1dc:	300cd43a 	srli	r6,r6,16
    e1e0:	2008d43a 	srli	r4,r4,16
    e1e4:	180bd43a 	srai	r5,r3,16
    e1e8:	18ffffcc 	andi	r3,r3,65535
    e1ec:	2189c83a 	sub	r4,r4,r6
    e1f0:	2149883a 	add	r4,r4,r5
    e1f4:	200c943a 	slli	r6,r4,16
    e1f8:	8c400104 	addi	r17,r17,4
    e1fc:	200bd43a 	srai	r5,r4,16
    e200:	30c6b03a 	or	r3,r6,r3
    e204:	10ffff15 	stw	r3,-4(r2)
    e208:	a47fed2e 	bgeu	r20,r17,e1c0 <__alt_data_end+0xf000e1c0>
    e20c:	9485883a 	add	r2,r18,r18
    e210:	1085883a 	add	r2,r2,r2
    e214:	a887883a 	add	r3,r21,r2
    e218:	18800017 	ldw	r2,0(r3)
    e21c:	10000b1e 	bne	r2,zero,e24c <quorem+0x1c8>
    e220:	18bfff04 	addi	r2,r3,-4
    e224:	a880082e 	bgeu	r21,r2,e248 <quorem+0x1c4>
    e228:	18ffff17 	ldw	r3,-4(r3)
    e22c:	18000326 	beq	r3,zero,e23c <quorem+0x1b8>
    e230:	00000506 	br	e248 <quorem+0x1c4>
    e234:	10c00017 	ldw	r3,0(r2)
    e238:	1800031e 	bne	r3,zero,e248 <quorem+0x1c4>
    e23c:	10bfff04 	addi	r2,r2,-4
    e240:	94bfffc4 	addi	r18,r18,-1
    e244:	a8bffb36 	bltu	r21,r2,e234 <__alt_data_end+0xf000e234>
    e248:	84800415 	stw	r18,16(r16)
    e24c:	9805883a 	mov	r2,r19
    e250:	dfc00817 	ldw	ra,32(sp)
    e254:	ddc00717 	ldw	r23,28(sp)
    e258:	dd800617 	ldw	r22,24(sp)
    e25c:	dd400517 	ldw	r21,20(sp)
    e260:	dd000417 	ldw	r20,16(sp)
    e264:	dcc00317 	ldw	r19,12(sp)
    e268:	dc800217 	ldw	r18,8(sp)
    e26c:	dc400117 	ldw	r17,4(sp)
    e270:	dc000017 	ldw	r16,0(sp)
    e274:	dec00904 	addi	sp,sp,36
    e278:	f800283a 	ret
    e27c:	0005883a 	mov	r2,zero
    e280:	003ff306 	br	e250 <__alt_data_end+0xf000e250>

0000e284 <_dtoa_r>:
    e284:	20801017 	ldw	r2,64(r4)
    e288:	deffde04 	addi	sp,sp,-136
    e28c:	df002015 	stw	fp,128(sp)
    e290:	dcc01b15 	stw	r19,108(sp)
    e294:	dc801a15 	stw	r18,104(sp)
    e298:	dc401915 	stw	r17,100(sp)
    e29c:	dc001815 	stw	r16,96(sp)
    e2a0:	dfc02115 	stw	ra,132(sp)
    e2a4:	ddc01f15 	stw	r23,124(sp)
    e2a8:	dd801e15 	stw	r22,120(sp)
    e2ac:	dd401d15 	stw	r21,116(sp)
    e2b0:	dd001c15 	stw	r20,112(sp)
    e2b4:	d9c00315 	stw	r7,12(sp)
    e2b8:	2039883a 	mov	fp,r4
    e2bc:	3023883a 	mov	r17,r6
    e2c0:	2825883a 	mov	r18,r5
    e2c4:	dc002417 	ldw	r16,144(sp)
    e2c8:	3027883a 	mov	r19,r6
    e2cc:	10000826 	beq	r2,zero,e2f0 <_dtoa_r+0x6c>
    e2d0:	21801117 	ldw	r6,68(r4)
    e2d4:	00c00044 	movi	r3,1
    e2d8:	100b883a 	mov	r5,r2
    e2dc:	1986983a 	sll	r3,r3,r6
    e2e0:	11800115 	stw	r6,4(r2)
    e2e4:	10c00215 	stw	r3,8(r2)
    e2e8:	00117580 	call	11758 <_Bfree>
    e2ec:	e0001015 	stw	zero,64(fp)
    e2f0:	88002e16 	blt	r17,zero,e3ac <_dtoa_r+0x128>
    e2f4:	80000015 	stw	zero,0(r16)
    e2f8:	889ffc2c 	andhi	r2,r17,32752
    e2fc:	00dffc34 	movhi	r3,32752
    e300:	10c01c26 	beq	r2,r3,e374 <_dtoa_r+0xf0>
    e304:	000d883a 	mov	r6,zero
    e308:	000f883a 	mov	r7,zero
    e30c:	9009883a 	mov	r4,r18
    e310:	980b883a 	mov	r5,r19
    e314:	00175d40 	call	175d4 <__eqdf2>
    e318:	10002b1e 	bne	r2,zero,e3c8 <_dtoa_r+0x144>
    e31c:	d9c02317 	ldw	r7,140(sp)
    e320:	00800044 	movi	r2,1
    e324:	38800015 	stw	r2,0(r7)
    e328:	d8802517 	ldw	r2,148(sp)
    e32c:	10019e26 	beq	r2,zero,e9a8 <_dtoa_r+0x724>
    e330:	d8c02517 	ldw	r3,148(sp)
    e334:	00820034 	movhi	r2,2048
    e338:	1080ed44 	addi	r2,r2,949
    e33c:	18800015 	stw	r2,0(r3)
    e340:	10bfffc4 	addi	r2,r2,-1
    e344:	dfc02117 	ldw	ra,132(sp)
    e348:	df002017 	ldw	fp,128(sp)
    e34c:	ddc01f17 	ldw	r23,124(sp)
    e350:	dd801e17 	ldw	r22,120(sp)
    e354:	dd401d17 	ldw	r21,116(sp)
    e358:	dd001c17 	ldw	r20,112(sp)
    e35c:	dcc01b17 	ldw	r19,108(sp)
    e360:	dc801a17 	ldw	r18,104(sp)
    e364:	dc401917 	ldw	r17,100(sp)
    e368:	dc001817 	ldw	r16,96(sp)
    e36c:	dec02204 	addi	sp,sp,136
    e370:	f800283a 	ret
    e374:	d8c02317 	ldw	r3,140(sp)
    e378:	0089c3c4 	movi	r2,9999
    e37c:	18800015 	stw	r2,0(r3)
    e380:	90017726 	beq	r18,zero,e960 <_dtoa_r+0x6dc>
    e384:	00820034 	movhi	r2,2048
    e388:	10810104 	addi	r2,r2,1028
    e38c:	d9002517 	ldw	r4,148(sp)
    e390:	203fec26 	beq	r4,zero,e344 <__alt_data_end+0xf000e344>
    e394:	10c000c7 	ldb	r3,3(r2)
    e398:	1801781e 	bne	r3,zero,e97c <_dtoa_r+0x6f8>
    e39c:	10c000c4 	addi	r3,r2,3
    e3a0:	d9802517 	ldw	r6,148(sp)
    e3a4:	30c00015 	stw	r3,0(r6)
    e3a8:	003fe606 	br	e344 <__alt_data_end+0xf000e344>
    e3ac:	04e00034 	movhi	r19,32768
    e3b0:	9cffffc4 	addi	r19,r19,-1
    e3b4:	00800044 	movi	r2,1
    e3b8:	8ce6703a 	and	r19,r17,r19
    e3bc:	80800015 	stw	r2,0(r16)
    e3c0:	9823883a 	mov	r17,r19
    e3c4:	003fcc06 	br	e2f8 <__alt_data_end+0xf000e2f8>
    e3c8:	d8800204 	addi	r2,sp,8
    e3cc:	d8800015 	stw	r2,0(sp)
    e3d0:	d9c00104 	addi	r7,sp,4
    e3d4:	900b883a 	mov	r5,r18
    e3d8:	980d883a 	mov	r6,r19
    e3dc:	e009883a 	mov	r4,fp
    e3e0:	8820d53a 	srli	r16,r17,20
    e3e4:	00123440 	call	12344 <__d2b>
    e3e8:	d8800915 	stw	r2,36(sp)
    e3ec:	8001651e 	bne	r16,zero,e984 <_dtoa_r+0x700>
    e3f0:	dd800217 	ldw	r22,8(sp)
    e3f4:	dc000117 	ldw	r16,4(sp)
    e3f8:	00800804 	movi	r2,32
    e3fc:	b421883a 	add	r16,r22,r16
    e400:	80c10c84 	addi	r3,r16,1074
    e404:	10c2d10e 	bge	r2,r3,ef4c <_dtoa_r+0xcc8>
    e408:	00801004 	movi	r2,64
    e40c:	81010484 	addi	r4,r16,1042
    e410:	10c7c83a 	sub	r3,r2,r3
    e414:	9108d83a 	srl	r4,r18,r4
    e418:	88e2983a 	sll	r17,r17,r3
    e41c:	2448b03a 	or	r4,r4,r17
    e420:	00177500 	call	17750 <__floatunsidf>
    e424:	017f8434 	movhi	r5,65040
    e428:	01800044 	movi	r6,1
    e42c:	1009883a 	mov	r4,r2
    e430:	194b883a 	add	r5,r3,r5
    e434:	843fffc4 	addi	r16,r16,-1
    e438:	d9801115 	stw	r6,68(sp)
    e43c:	000d883a 	mov	r6,zero
    e440:	01cffe34 	movhi	r7,16376
    e444:	00085d80 	call	85d8 <__subdf3>
    e448:	0198dbf4 	movhi	r6,25455
    e44c:	01cff4f4 	movhi	r7,16339
    e450:	3190d844 	addi	r6,r6,17249
    e454:	39e1e9c4 	addi	r7,r7,-30809
    e458:	1009883a 	mov	r4,r2
    e45c:	180b883a 	mov	r5,r3
    e460:	0007ec00 	call	7ec0 <__muldf3>
    e464:	01a2d874 	movhi	r6,35681
    e468:	01cff1f4 	movhi	r7,16327
    e46c:	31b22cc4 	addi	r6,r6,-14157
    e470:	39e28a04 	addi	r7,r7,-30168
    e474:	180b883a 	mov	r5,r3
    e478:	1009883a 	mov	r4,r2
    e47c:	0016d280 	call	16d28 <__adddf3>
    e480:	8009883a 	mov	r4,r16
    e484:	1029883a 	mov	r20,r2
    e488:	1823883a 	mov	r17,r3
    e48c:	0008f540 	call	8f54 <__floatsidf>
    e490:	019427f4 	movhi	r6,20639
    e494:	01cff4f4 	movhi	r7,16339
    e498:	319e7ec4 	addi	r6,r6,31227
    e49c:	39d104c4 	addi	r7,r7,17427
    e4a0:	1009883a 	mov	r4,r2
    e4a4:	180b883a 	mov	r5,r3
    e4a8:	0007ec00 	call	7ec0 <__muldf3>
    e4ac:	100d883a 	mov	r6,r2
    e4b0:	180f883a 	mov	r7,r3
    e4b4:	a009883a 	mov	r4,r20
    e4b8:	880b883a 	mov	r5,r17
    e4bc:	0016d280 	call	16d28 <__adddf3>
    e4c0:	1009883a 	mov	r4,r2
    e4c4:	180b883a 	mov	r5,r3
    e4c8:	1029883a 	mov	r20,r2
    e4cc:	1823883a 	mov	r17,r3
    e4d0:	0008ed40 	call	8ed4 <__fixdfsi>
    e4d4:	000d883a 	mov	r6,zero
    e4d8:	000f883a 	mov	r7,zero
    e4dc:	a009883a 	mov	r4,r20
    e4e0:	880b883a 	mov	r5,r17
    e4e4:	d8800515 	stw	r2,20(sp)
    e4e8:	001765c0 	call	1765c <__ledf2>
    e4ec:	10028716 	blt	r2,zero,ef0c <_dtoa_r+0xc88>
    e4f0:	d8c00517 	ldw	r3,20(sp)
    e4f4:	00800584 	movi	r2,22
    e4f8:	10c27536 	bltu	r2,r3,eed0 <_dtoa_r+0xc4c>
    e4fc:	180490fa 	slli	r2,r3,3
    e500:	00c20034 	movhi	r3,2048
    e504:	18c11d04 	addi	r3,r3,1140
    e508:	1885883a 	add	r2,r3,r2
    e50c:	11000017 	ldw	r4,0(r2)
    e510:	11400117 	ldw	r5,4(r2)
    e514:	900d883a 	mov	r6,r18
    e518:	980f883a 	mov	r7,r19
    e51c:	0007de40 	call	7de4 <__gedf2>
    e520:	00828d0e 	bge	zero,r2,ef58 <_dtoa_r+0xcd4>
    e524:	d9000517 	ldw	r4,20(sp)
    e528:	d8000e15 	stw	zero,56(sp)
    e52c:	213fffc4 	addi	r4,r4,-1
    e530:	d9000515 	stw	r4,20(sp)
    e534:	b42dc83a 	sub	r22,r22,r16
    e538:	b5bfffc4 	addi	r22,r22,-1
    e53c:	b0026f16 	blt	r22,zero,eefc <_dtoa_r+0xc78>
    e540:	d8000815 	stw	zero,32(sp)
    e544:	d9c00517 	ldw	r7,20(sp)
    e548:	38026416 	blt	r7,zero,eedc <_dtoa_r+0xc58>
    e54c:	b1ed883a 	add	r22,r22,r7
    e550:	d9c00d15 	stw	r7,52(sp)
    e554:	d8000a15 	stw	zero,40(sp)
    e558:	d9800317 	ldw	r6,12(sp)
    e55c:	00800244 	movi	r2,9
    e560:	11811436 	bltu	r2,r6,e9b4 <_dtoa_r+0x730>
    e564:	00800144 	movi	r2,5
    e568:	1184e10e 	bge	r2,r6,f8f0 <_dtoa_r+0x166c>
    e56c:	31bfff04 	addi	r6,r6,-4
    e570:	d9800315 	stw	r6,12(sp)
    e574:	0023883a 	mov	r17,zero
    e578:	d9800317 	ldw	r6,12(sp)
    e57c:	008000c4 	movi	r2,3
    e580:	30836726 	beq	r6,r2,f320 <_dtoa_r+0x109c>
    e584:	1183410e 	bge	r2,r6,f28c <_dtoa_r+0x1008>
    e588:	d9c00317 	ldw	r7,12(sp)
    e58c:	00800104 	movi	r2,4
    e590:	38827c26 	beq	r7,r2,ef84 <_dtoa_r+0xd00>
    e594:	00800144 	movi	r2,5
    e598:	3884c41e 	bne	r7,r2,f8ac <_dtoa_r+0x1628>
    e59c:	00800044 	movi	r2,1
    e5a0:	d8800b15 	stw	r2,44(sp)
    e5a4:	d8c00517 	ldw	r3,20(sp)
    e5a8:	d9002217 	ldw	r4,136(sp)
    e5ac:	1907883a 	add	r3,r3,r4
    e5b0:	19800044 	addi	r6,r3,1
    e5b4:	d8c00c15 	stw	r3,48(sp)
    e5b8:	d9800615 	stw	r6,24(sp)
    e5bc:	0183a40e 	bge	zero,r6,f450 <_dtoa_r+0x11cc>
    e5c0:	d9800617 	ldw	r6,24(sp)
    e5c4:	3021883a 	mov	r16,r6
    e5c8:	e0001115 	stw	zero,68(fp)
    e5cc:	008005c4 	movi	r2,23
    e5d0:	1184c92e 	bgeu	r2,r6,f8f8 <_dtoa_r+0x1674>
    e5d4:	00c00044 	movi	r3,1
    e5d8:	00800104 	movi	r2,4
    e5dc:	1085883a 	add	r2,r2,r2
    e5e0:	11000504 	addi	r4,r2,20
    e5e4:	180b883a 	mov	r5,r3
    e5e8:	18c00044 	addi	r3,r3,1
    e5ec:	313ffb2e 	bgeu	r6,r4,e5dc <__alt_data_end+0xf000e5dc>
    e5f0:	e1401115 	stw	r5,68(fp)
    e5f4:	e009883a 	mov	r4,fp
    e5f8:	00116b00 	call	116b0 <_Balloc>
    e5fc:	d8800715 	stw	r2,28(sp)
    e600:	e0801015 	stw	r2,64(fp)
    e604:	00800384 	movi	r2,14
    e608:	1400f736 	bltu	r2,r16,e9e8 <_dtoa_r+0x764>
    e60c:	8800f626 	beq	r17,zero,e9e8 <_dtoa_r+0x764>
    e610:	d9c00517 	ldw	r7,20(sp)
    e614:	01c39a0e 	bge	zero,r7,f480 <_dtoa_r+0x11fc>
    e618:	388003cc 	andi	r2,r7,15
    e61c:	100490fa 	slli	r2,r2,3
    e620:	382bd13a 	srai	r21,r7,4
    e624:	00c20034 	movhi	r3,2048
    e628:	18c11d04 	addi	r3,r3,1140
    e62c:	1885883a 	add	r2,r3,r2
    e630:	a8c0040c 	andi	r3,r21,16
    e634:	12400017 	ldw	r9,0(r2)
    e638:	12000117 	ldw	r8,4(r2)
    e63c:	18037926 	beq	r3,zero,f424 <_dtoa_r+0x11a0>
    e640:	00820034 	movhi	r2,2048
    e644:	10811304 	addi	r2,r2,1100
    e648:	11800817 	ldw	r6,32(r2)
    e64c:	11c00917 	ldw	r7,36(r2)
    e650:	9009883a 	mov	r4,r18
    e654:	980b883a 	mov	r5,r19
    e658:	da001715 	stw	r8,92(sp)
    e65c:	da401615 	stw	r9,88(sp)
    e660:	00074fc0 	call	74fc <__divdf3>
    e664:	da001717 	ldw	r8,92(sp)
    e668:	da401617 	ldw	r9,88(sp)
    e66c:	ad4003cc 	andi	r21,r21,15
    e670:	040000c4 	movi	r16,3
    e674:	1023883a 	mov	r17,r2
    e678:	1829883a 	mov	r20,r3
    e67c:	a8001126 	beq	r21,zero,e6c4 <_dtoa_r+0x440>
    e680:	05c20034 	movhi	r23,2048
    e684:	bdc11304 	addi	r23,r23,1100
    e688:	4805883a 	mov	r2,r9
    e68c:	4007883a 	mov	r3,r8
    e690:	a980004c 	andi	r6,r21,1
    e694:	1009883a 	mov	r4,r2
    e698:	a82bd07a 	srai	r21,r21,1
    e69c:	180b883a 	mov	r5,r3
    e6a0:	30000426 	beq	r6,zero,e6b4 <_dtoa_r+0x430>
    e6a4:	b9800017 	ldw	r6,0(r23)
    e6a8:	b9c00117 	ldw	r7,4(r23)
    e6ac:	84000044 	addi	r16,r16,1
    e6b0:	0007ec00 	call	7ec0 <__muldf3>
    e6b4:	bdc00204 	addi	r23,r23,8
    e6b8:	a83ff51e 	bne	r21,zero,e690 <__alt_data_end+0xf000e690>
    e6bc:	1013883a 	mov	r9,r2
    e6c0:	1811883a 	mov	r8,r3
    e6c4:	480d883a 	mov	r6,r9
    e6c8:	400f883a 	mov	r7,r8
    e6cc:	8809883a 	mov	r4,r17
    e6d0:	a00b883a 	mov	r5,r20
    e6d4:	00074fc0 	call	74fc <__divdf3>
    e6d8:	d8800f15 	stw	r2,60(sp)
    e6dc:	d8c01015 	stw	r3,64(sp)
    e6e0:	d8c00e17 	ldw	r3,56(sp)
    e6e4:	18000626 	beq	r3,zero,e700 <_dtoa_r+0x47c>
    e6e8:	d9000f17 	ldw	r4,60(sp)
    e6ec:	d9401017 	ldw	r5,64(sp)
    e6f0:	000d883a 	mov	r6,zero
    e6f4:	01cffc34 	movhi	r7,16368
    e6f8:	001765c0 	call	1765c <__ledf2>
    e6fc:	10040b16 	blt	r2,zero,f72c <_dtoa_r+0x14a8>
    e700:	8009883a 	mov	r4,r16
    e704:	0008f540 	call	8f54 <__floatsidf>
    e708:	d9800f17 	ldw	r6,60(sp)
    e70c:	d9c01017 	ldw	r7,64(sp)
    e710:	1009883a 	mov	r4,r2
    e714:	180b883a 	mov	r5,r3
    e718:	0007ec00 	call	7ec0 <__muldf3>
    e71c:	000d883a 	mov	r6,zero
    e720:	01d00734 	movhi	r7,16412
    e724:	1009883a 	mov	r4,r2
    e728:	180b883a 	mov	r5,r3
    e72c:	0016d280 	call	16d28 <__adddf3>
    e730:	1021883a 	mov	r16,r2
    e734:	d8800617 	ldw	r2,24(sp)
    e738:	047f3034 	movhi	r17,64704
    e73c:	1c63883a 	add	r17,r3,r17
    e740:	10031826 	beq	r2,zero,f3a4 <_dtoa_r+0x1120>
    e744:	d8c00517 	ldw	r3,20(sp)
    e748:	db000617 	ldw	r12,24(sp)
    e74c:	d8c01315 	stw	r3,76(sp)
    e750:	d9000b17 	ldw	r4,44(sp)
    e754:	20038f26 	beq	r4,zero,f594 <_dtoa_r+0x1310>
    e758:	60bfffc4 	addi	r2,r12,-1
    e75c:	100490fa 	slli	r2,r2,3
    e760:	00c20034 	movhi	r3,2048
    e764:	18c11d04 	addi	r3,r3,1140
    e768:	1885883a 	add	r2,r3,r2
    e76c:	11800017 	ldw	r6,0(r2)
    e770:	11c00117 	ldw	r7,4(r2)
    e774:	d8800717 	ldw	r2,28(sp)
    e778:	0009883a 	mov	r4,zero
    e77c:	014ff834 	movhi	r5,16352
    e780:	db001615 	stw	r12,88(sp)
    e784:	15c00044 	addi	r23,r2,1
    e788:	00074fc0 	call	74fc <__divdf3>
    e78c:	800d883a 	mov	r6,r16
    e790:	880f883a 	mov	r7,r17
    e794:	1009883a 	mov	r4,r2
    e798:	180b883a 	mov	r5,r3
    e79c:	00085d80 	call	85d8 <__subdf3>
    e7a0:	d9401017 	ldw	r5,64(sp)
    e7a4:	d9000f17 	ldw	r4,60(sp)
    e7a8:	102b883a 	mov	r21,r2
    e7ac:	d8c01215 	stw	r3,72(sp)
    e7b0:	0008ed40 	call	8ed4 <__fixdfsi>
    e7b4:	1009883a 	mov	r4,r2
    e7b8:	1029883a 	mov	r20,r2
    e7bc:	0008f540 	call	8f54 <__floatsidf>
    e7c0:	d9000f17 	ldw	r4,60(sp)
    e7c4:	d9401017 	ldw	r5,64(sp)
    e7c8:	100d883a 	mov	r6,r2
    e7cc:	180f883a 	mov	r7,r3
    e7d0:	00085d80 	call	85d8 <__subdf3>
    e7d4:	1823883a 	mov	r17,r3
    e7d8:	d8c00717 	ldw	r3,28(sp)
    e7dc:	d9401217 	ldw	r5,72(sp)
    e7e0:	a2000c04 	addi	r8,r20,48
    e7e4:	1021883a 	mov	r16,r2
    e7e8:	1a000005 	stb	r8,0(r3)
    e7ec:	800d883a 	mov	r6,r16
    e7f0:	880f883a 	mov	r7,r17
    e7f4:	a809883a 	mov	r4,r21
    e7f8:	4029883a 	mov	r20,r8
    e7fc:	0007de40 	call	7de4 <__gedf2>
    e800:	00841d16 	blt	zero,r2,f878 <_dtoa_r+0x15f4>
    e804:	800d883a 	mov	r6,r16
    e808:	880f883a 	mov	r7,r17
    e80c:	0009883a 	mov	r4,zero
    e810:	014ffc34 	movhi	r5,16368
    e814:	00085d80 	call	85d8 <__subdf3>
    e818:	d9401217 	ldw	r5,72(sp)
    e81c:	100d883a 	mov	r6,r2
    e820:	180f883a 	mov	r7,r3
    e824:	a809883a 	mov	r4,r21
    e828:	0007de40 	call	7de4 <__gedf2>
    e82c:	db001617 	ldw	r12,88(sp)
    e830:	00840e16 	blt	zero,r2,f86c <_dtoa_r+0x15e8>
    e834:	00800044 	movi	r2,1
    e838:	13006b0e 	bge	r2,r12,e9e8 <_dtoa_r+0x764>
    e83c:	d9000717 	ldw	r4,28(sp)
    e840:	dd800f15 	stw	r22,60(sp)
    e844:	dcc01015 	stw	r19,64(sp)
    e848:	2319883a 	add	r12,r4,r12
    e84c:	dcc01217 	ldw	r19,72(sp)
    e850:	602d883a 	mov	r22,r12
    e854:	dc801215 	stw	r18,72(sp)
    e858:	b825883a 	mov	r18,r23
    e85c:	00000906 	br	e884 <_dtoa_r+0x600>
    e860:	00085d80 	call	85d8 <__subdf3>
    e864:	a80d883a 	mov	r6,r21
    e868:	980f883a 	mov	r7,r19
    e86c:	1009883a 	mov	r4,r2
    e870:	180b883a 	mov	r5,r3
    e874:	001765c0 	call	1765c <__ledf2>
    e878:	1003e816 	blt	r2,zero,f81c <_dtoa_r+0x1598>
    e87c:	b825883a 	mov	r18,r23
    e880:	bd83e926 	beq	r23,r22,f828 <_dtoa_r+0x15a4>
    e884:	a809883a 	mov	r4,r21
    e888:	980b883a 	mov	r5,r19
    e88c:	000d883a 	mov	r6,zero
    e890:	01d00934 	movhi	r7,16420
    e894:	0007ec00 	call	7ec0 <__muldf3>
    e898:	000d883a 	mov	r6,zero
    e89c:	01d00934 	movhi	r7,16420
    e8a0:	8009883a 	mov	r4,r16
    e8a4:	880b883a 	mov	r5,r17
    e8a8:	102b883a 	mov	r21,r2
    e8ac:	1827883a 	mov	r19,r3
    e8b0:	0007ec00 	call	7ec0 <__muldf3>
    e8b4:	180b883a 	mov	r5,r3
    e8b8:	1009883a 	mov	r4,r2
    e8bc:	1821883a 	mov	r16,r3
    e8c0:	1023883a 	mov	r17,r2
    e8c4:	0008ed40 	call	8ed4 <__fixdfsi>
    e8c8:	1009883a 	mov	r4,r2
    e8cc:	1029883a 	mov	r20,r2
    e8d0:	0008f540 	call	8f54 <__floatsidf>
    e8d4:	8809883a 	mov	r4,r17
    e8d8:	800b883a 	mov	r5,r16
    e8dc:	100d883a 	mov	r6,r2
    e8e0:	180f883a 	mov	r7,r3
    e8e4:	00085d80 	call	85d8 <__subdf3>
    e8e8:	a5000c04 	addi	r20,r20,48
    e8ec:	a80d883a 	mov	r6,r21
    e8f0:	980f883a 	mov	r7,r19
    e8f4:	1009883a 	mov	r4,r2
    e8f8:	180b883a 	mov	r5,r3
    e8fc:	95000005 	stb	r20,0(r18)
    e900:	1021883a 	mov	r16,r2
    e904:	1823883a 	mov	r17,r3
    e908:	001765c0 	call	1765c <__ledf2>
    e90c:	bdc00044 	addi	r23,r23,1
    e910:	800d883a 	mov	r6,r16
    e914:	880f883a 	mov	r7,r17
    e918:	0009883a 	mov	r4,zero
    e91c:	014ffc34 	movhi	r5,16368
    e920:	103fcf0e 	bge	r2,zero,e860 <__alt_data_end+0xf000e860>
    e924:	d8c01317 	ldw	r3,76(sp)
    e928:	d8c00515 	stw	r3,20(sp)
    e92c:	d9400917 	ldw	r5,36(sp)
    e930:	e009883a 	mov	r4,fp
    e934:	00117580 	call	11758 <_Bfree>
    e938:	d9000517 	ldw	r4,20(sp)
    e93c:	d9802317 	ldw	r6,140(sp)
    e940:	d9c02517 	ldw	r7,148(sp)
    e944:	b8000005 	stb	zero,0(r23)
    e948:	20800044 	addi	r2,r4,1
    e94c:	30800015 	stw	r2,0(r6)
    e950:	3802aa26 	beq	r7,zero,f3fc <_dtoa_r+0x1178>
    e954:	3dc00015 	stw	r23,0(r7)
    e958:	d8800717 	ldw	r2,28(sp)
    e95c:	003e7906 	br	e344 <__alt_data_end+0xf000e344>
    e960:	00800434 	movhi	r2,16
    e964:	10bfffc4 	addi	r2,r2,-1
    e968:	88a2703a 	and	r17,r17,r2
    e96c:	883e851e 	bne	r17,zero,e384 <__alt_data_end+0xf000e384>
    e970:	00820034 	movhi	r2,2048
    e974:	1080fe04 	addi	r2,r2,1016
    e978:	003e8406 	br	e38c <__alt_data_end+0xf000e38c>
    e97c:	10c00204 	addi	r3,r2,8
    e980:	003e8706 	br	e3a0 <__alt_data_end+0xf000e3a0>
    e984:	01400434 	movhi	r5,16
    e988:	297fffc4 	addi	r5,r5,-1
    e98c:	994a703a 	and	r5,r19,r5
    e990:	9009883a 	mov	r4,r18
    e994:	843f0044 	addi	r16,r16,-1023
    e998:	294ffc34 	orhi	r5,r5,16368
    e99c:	dd800217 	ldw	r22,8(sp)
    e9a0:	d8001115 	stw	zero,68(sp)
    e9a4:	003ea506 	br	e43c <__alt_data_end+0xf000e43c>
    e9a8:	00820034 	movhi	r2,2048
    e9ac:	1080ed04 	addi	r2,r2,948
    e9b0:	003e6406 	br	e344 <__alt_data_end+0xf000e344>
    e9b4:	e0001115 	stw	zero,68(fp)
    e9b8:	000b883a 	mov	r5,zero
    e9bc:	e009883a 	mov	r4,fp
    e9c0:	00116b00 	call	116b0 <_Balloc>
    e9c4:	01bfffc4 	movi	r6,-1
    e9c8:	01c00044 	movi	r7,1
    e9cc:	d8800715 	stw	r2,28(sp)
    e9d0:	d9800c15 	stw	r6,48(sp)
    e9d4:	e0801015 	stw	r2,64(fp)
    e9d8:	d8000315 	stw	zero,12(sp)
    e9dc:	d9c00b15 	stw	r7,44(sp)
    e9e0:	d9800615 	stw	r6,24(sp)
    e9e4:	d8002215 	stw	zero,136(sp)
    e9e8:	d8800117 	ldw	r2,4(sp)
    e9ec:	10008916 	blt	r2,zero,ec14 <_dtoa_r+0x990>
    e9f0:	d9000517 	ldw	r4,20(sp)
    e9f4:	00c00384 	movi	r3,14
    e9f8:	19008616 	blt	r3,r4,ec14 <_dtoa_r+0x990>
    e9fc:	200490fa 	slli	r2,r4,3
    ea00:	00c20034 	movhi	r3,2048
    ea04:	d9802217 	ldw	r6,136(sp)
    ea08:	18c11d04 	addi	r3,r3,1140
    ea0c:	1885883a 	add	r2,r3,r2
    ea10:	14000017 	ldw	r16,0(r2)
    ea14:	14400117 	ldw	r17,4(r2)
    ea18:	30016316 	blt	r6,zero,efa8 <_dtoa_r+0xd24>
    ea1c:	800d883a 	mov	r6,r16
    ea20:	880f883a 	mov	r7,r17
    ea24:	9009883a 	mov	r4,r18
    ea28:	980b883a 	mov	r5,r19
    ea2c:	00074fc0 	call	74fc <__divdf3>
    ea30:	180b883a 	mov	r5,r3
    ea34:	1009883a 	mov	r4,r2
    ea38:	0008ed40 	call	8ed4 <__fixdfsi>
    ea3c:	1009883a 	mov	r4,r2
    ea40:	102b883a 	mov	r21,r2
    ea44:	0008f540 	call	8f54 <__floatsidf>
    ea48:	800d883a 	mov	r6,r16
    ea4c:	880f883a 	mov	r7,r17
    ea50:	1009883a 	mov	r4,r2
    ea54:	180b883a 	mov	r5,r3
    ea58:	0007ec00 	call	7ec0 <__muldf3>
    ea5c:	100d883a 	mov	r6,r2
    ea60:	180f883a 	mov	r7,r3
    ea64:	9009883a 	mov	r4,r18
    ea68:	980b883a 	mov	r5,r19
    ea6c:	00085d80 	call	85d8 <__subdf3>
    ea70:	d9c00717 	ldw	r7,28(sp)
    ea74:	1009883a 	mov	r4,r2
    ea78:	a8800c04 	addi	r2,r21,48
    ea7c:	38800005 	stb	r2,0(r7)
    ea80:	3dc00044 	addi	r23,r7,1
    ea84:	d9c00617 	ldw	r7,24(sp)
    ea88:	01800044 	movi	r6,1
    ea8c:	180b883a 	mov	r5,r3
    ea90:	2005883a 	mov	r2,r4
    ea94:	39803826 	beq	r7,r6,eb78 <_dtoa_r+0x8f4>
    ea98:	000d883a 	mov	r6,zero
    ea9c:	01d00934 	movhi	r7,16420
    eaa0:	0007ec00 	call	7ec0 <__muldf3>
    eaa4:	000d883a 	mov	r6,zero
    eaa8:	000f883a 	mov	r7,zero
    eaac:	1009883a 	mov	r4,r2
    eab0:	180b883a 	mov	r5,r3
    eab4:	1025883a 	mov	r18,r2
    eab8:	1827883a 	mov	r19,r3
    eabc:	00175d40 	call	175d4 <__eqdf2>
    eac0:	103f9a26 	beq	r2,zero,e92c <__alt_data_end+0xf000e92c>
    eac4:	d9c00617 	ldw	r7,24(sp)
    eac8:	d8c00717 	ldw	r3,28(sp)
    eacc:	b829883a 	mov	r20,r23
    ead0:	38bfffc4 	addi	r2,r7,-1
    ead4:	18ad883a 	add	r22,r3,r2
    ead8:	00000a06 	br	eb04 <_dtoa_r+0x880>
    eadc:	0007ec00 	call	7ec0 <__muldf3>
    eae0:	000d883a 	mov	r6,zero
    eae4:	000f883a 	mov	r7,zero
    eae8:	1009883a 	mov	r4,r2
    eaec:	180b883a 	mov	r5,r3
    eaf0:	1025883a 	mov	r18,r2
    eaf4:	1827883a 	mov	r19,r3
    eaf8:	b829883a 	mov	r20,r23
    eafc:	00175d40 	call	175d4 <__eqdf2>
    eb00:	103f8a26 	beq	r2,zero,e92c <__alt_data_end+0xf000e92c>
    eb04:	800d883a 	mov	r6,r16
    eb08:	880f883a 	mov	r7,r17
    eb0c:	9009883a 	mov	r4,r18
    eb10:	980b883a 	mov	r5,r19
    eb14:	00074fc0 	call	74fc <__divdf3>
    eb18:	180b883a 	mov	r5,r3
    eb1c:	1009883a 	mov	r4,r2
    eb20:	0008ed40 	call	8ed4 <__fixdfsi>
    eb24:	1009883a 	mov	r4,r2
    eb28:	102b883a 	mov	r21,r2
    eb2c:	0008f540 	call	8f54 <__floatsidf>
    eb30:	800d883a 	mov	r6,r16
    eb34:	880f883a 	mov	r7,r17
    eb38:	1009883a 	mov	r4,r2
    eb3c:	180b883a 	mov	r5,r3
    eb40:	0007ec00 	call	7ec0 <__muldf3>
    eb44:	100d883a 	mov	r6,r2
    eb48:	180f883a 	mov	r7,r3
    eb4c:	9009883a 	mov	r4,r18
    eb50:	980b883a 	mov	r5,r19
    eb54:	00085d80 	call	85d8 <__subdf3>
    eb58:	aa000c04 	addi	r8,r21,48
    eb5c:	a2000005 	stb	r8,0(r20)
    eb60:	000d883a 	mov	r6,zero
    eb64:	01d00934 	movhi	r7,16420
    eb68:	1009883a 	mov	r4,r2
    eb6c:	180b883a 	mov	r5,r3
    eb70:	a5c00044 	addi	r23,r20,1
    eb74:	b53fd91e 	bne	r22,r20,eadc <__alt_data_end+0xf000eadc>
    eb78:	100d883a 	mov	r6,r2
    eb7c:	180f883a 	mov	r7,r3
    eb80:	1009883a 	mov	r4,r2
    eb84:	180b883a 	mov	r5,r3
    eb88:	0016d280 	call	16d28 <__adddf3>
    eb8c:	100d883a 	mov	r6,r2
    eb90:	180f883a 	mov	r7,r3
    eb94:	8009883a 	mov	r4,r16
    eb98:	880b883a 	mov	r5,r17
    eb9c:	1027883a 	mov	r19,r2
    eba0:	1825883a 	mov	r18,r3
    eba4:	001765c0 	call	1765c <__ledf2>
    eba8:	10000816 	blt	r2,zero,ebcc <_dtoa_r+0x948>
    ebac:	980d883a 	mov	r6,r19
    ebb0:	900f883a 	mov	r7,r18
    ebb4:	8009883a 	mov	r4,r16
    ebb8:	880b883a 	mov	r5,r17
    ebbc:	00175d40 	call	175d4 <__eqdf2>
    ebc0:	103f5a1e 	bne	r2,zero,e92c <__alt_data_end+0xf000e92c>
    ebc4:	ad40004c 	andi	r21,r21,1
    ebc8:	a83f5826 	beq	r21,zero,e92c <__alt_data_end+0xf000e92c>
    ebcc:	bd3fffc3 	ldbu	r20,-1(r23)
    ebd0:	b8bfffc4 	addi	r2,r23,-1
    ebd4:	1007883a 	mov	r3,r2
    ebd8:	01400e44 	movi	r5,57
    ebdc:	d9800717 	ldw	r6,28(sp)
    ebe0:	00000506 	br	ebf8 <_dtoa_r+0x974>
    ebe4:	18ffffc4 	addi	r3,r3,-1
    ebe8:	11824726 	beq	r2,r6,f508 <_dtoa_r+0x1284>
    ebec:	1d000003 	ldbu	r20,0(r3)
    ebf0:	102f883a 	mov	r23,r2
    ebf4:	10bfffc4 	addi	r2,r2,-1
    ebf8:	a1003fcc 	andi	r4,r20,255
    ebfc:	2100201c 	xori	r4,r4,128
    ec00:	213fe004 	addi	r4,r4,-128
    ec04:	217ff726 	beq	r4,r5,ebe4 <__alt_data_end+0xf000ebe4>
    ec08:	a2000044 	addi	r8,r20,1
    ec0c:	12000005 	stb	r8,0(r2)
    ec10:	003f4606 	br	e92c <__alt_data_end+0xf000e92c>
    ec14:	d9000b17 	ldw	r4,44(sp)
    ec18:	2000c826 	beq	r4,zero,ef3c <_dtoa_r+0xcb8>
    ec1c:	d9800317 	ldw	r6,12(sp)
    ec20:	00c00044 	movi	r3,1
    ec24:	1980f90e 	bge	r3,r6,f00c <_dtoa_r+0xd88>
    ec28:	d8800617 	ldw	r2,24(sp)
    ec2c:	d8c00a17 	ldw	r3,40(sp)
    ec30:	157fffc4 	addi	r21,r2,-1
    ec34:	1d41f316 	blt	r3,r21,f404 <_dtoa_r+0x1180>
    ec38:	1d6bc83a 	sub	r21,r3,r21
    ec3c:	d9c00617 	ldw	r7,24(sp)
    ec40:	3802aa16 	blt	r7,zero,f6ec <_dtoa_r+0x1468>
    ec44:	dd000817 	ldw	r20,32(sp)
    ec48:	d8800617 	ldw	r2,24(sp)
    ec4c:	d8c00817 	ldw	r3,32(sp)
    ec50:	01400044 	movi	r5,1
    ec54:	e009883a 	mov	r4,fp
    ec58:	1887883a 	add	r3,r3,r2
    ec5c:	d8c00815 	stw	r3,32(sp)
    ec60:	b0ad883a 	add	r22,r22,r2
    ec64:	0011abc0 	call	11abc <__i2b>
    ec68:	1023883a 	mov	r17,r2
    ec6c:	a0000826 	beq	r20,zero,ec90 <_dtoa_r+0xa0c>
    ec70:	0580070e 	bge	zero,r22,ec90 <_dtoa_r+0xa0c>
    ec74:	a005883a 	mov	r2,r20
    ec78:	b500b916 	blt	r22,r20,ef60 <_dtoa_r+0xcdc>
    ec7c:	d9000817 	ldw	r4,32(sp)
    ec80:	a0a9c83a 	sub	r20,r20,r2
    ec84:	b0adc83a 	sub	r22,r22,r2
    ec88:	2089c83a 	sub	r4,r4,r2
    ec8c:	d9000815 	stw	r4,32(sp)
    ec90:	d9800a17 	ldw	r6,40(sp)
    ec94:	0181810e 	bge	zero,r6,f29c <_dtoa_r+0x1018>
    ec98:	d9c00b17 	ldw	r7,44(sp)
    ec9c:	3800b326 	beq	r7,zero,ef6c <_dtoa_r+0xce8>
    eca0:	a800b226 	beq	r21,zero,ef6c <_dtoa_r+0xce8>
    eca4:	880b883a 	mov	r5,r17
    eca8:	a80d883a 	mov	r6,r21
    ecac:	e009883a 	mov	r4,fp
    ecb0:	0011cf00 	call	11cf0 <__pow5mult>
    ecb4:	d9800917 	ldw	r6,36(sp)
    ecb8:	100b883a 	mov	r5,r2
    ecbc:	e009883a 	mov	r4,fp
    ecc0:	1023883a 	mov	r17,r2
    ecc4:	0011af80 	call	11af8 <__multiply>
    ecc8:	1021883a 	mov	r16,r2
    eccc:	d8800a17 	ldw	r2,40(sp)
    ecd0:	d9400917 	ldw	r5,36(sp)
    ecd4:	e009883a 	mov	r4,fp
    ecd8:	1545c83a 	sub	r2,r2,r21
    ecdc:	d8800a15 	stw	r2,40(sp)
    ece0:	00117580 	call	11758 <_Bfree>
    ece4:	d8c00a17 	ldw	r3,40(sp)
    ece8:	18009f1e 	bne	r3,zero,ef68 <_dtoa_r+0xce4>
    ecec:	05c00044 	movi	r23,1
    ecf0:	e009883a 	mov	r4,fp
    ecf4:	b80b883a 	mov	r5,r23
    ecf8:	0011abc0 	call	11abc <__i2b>
    ecfc:	d9000d17 	ldw	r4,52(sp)
    ed00:	102b883a 	mov	r21,r2
    ed04:	2000ce26 	beq	r4,zero,f040 <_dtoa_r+0xdbc>
    ed08:	200d883a 	mov	r6,r4
    ed0c:	100b883a 	mov	r5,r2
    ed10:	e009883a 	mov	r4,fp
    ed14:	0011cf00 	call	11cf0 <__pow5mult>
    ed18:	d9800317 	ldw	r6,12(sp)
    ed1c:	102b883a 	mov	r21,r2
    ed20:	b981810e 	bge	r23,r6,f328 <_dtoa_r+0x10a4>
    ed24:	0027883a 	mov	r19,zero
    ed28:	a8800417 	ldw	r2,16(r21)
    ed2c:	05c00804 	movi	r23,32
    ed30:	10800104 	addi	r2,r2,4
    ed34:	1085883a 	add	r2,r2,r2
    ed38:	1085883a 	add	r2,r2,r2
    ed3c:	a885883a 	add	r2,r21,r2
    ed40:	11000017 	ldw	r4,0(r2)
    ed44:	00119a40 	call	119a4 <__hi0bits>
    ed48:	b885c83a 	sub	r2,r23,r2
    ed4c:	1585883a 	add	r2,r2,r22
    ed50:	108007cc 	andi	r2,r2,31
    ed54:	1000b326 	beq	r2,zero,f024 <_dtoa_r+0xda0>
    ed58:	00c00804 	movi	r3,32
    ed5c:	1887c83a 	sub	r3,r3,r2
    ed60:	01000104 	movi	r4,4
    ed64:	20c2cd0e 	bge	r4,r3,f89c <_dtoa_r+0x1618>
    ed68:	00c00704 	movi	r3,28
    ed6c:	1885c83a 	sub	r2,r3,r2
    ed70:	d8c00817 	ldw	r3,32(sp)
    ed74:	a0a9883a 	add	r20,r20,r2
    ed78:	b0ad883a 	add	r22,r22,r2
    ed7c:	1887883a 	add	r3,r3,r2
    ed80:	d8c00815 	stw	r3,32(sp)
    ed84:	d9800817 	ldw	r6,32(sp)
    ed88:	0180040e 	bge	zero,r6,ed9c <_dtoa_r+0xb18>
    ed8c:	800b883a 	mov	r5,r16
    ed90:	e009883a 	mov	r4,fp
    ed94:	0011e300 	call	11e30 <__lshift>
    ed98:	1021883a 	mov	r16,r2
    ed9c:	0580050e 	bge	zero,r22,edb4 <_dtoa_r+0xb30>
    eda0:	a80b883a 	mov	r5,r21
    eda4:	b00d883a 	mov	r6,r22
    eda8:	e009883a 	mov	r4,fp
    edac:	0011e300 	call	11e30 <__lshift>
    edb0:	102b883a 	mov	r21,r2
    edb4:	d9c00e17 	ldw	r7,56(sp)
    edb8:	3801211e 	bne	r7,zero,f240 <_dtoa_r+0xfbc>
    edbc:	d9800617 	ldw	r6,24(sp)
    edc0:	0181380e 	bge	zero,r6,f2a4 <_dtoa_r+0x1020>
    edc4:	d8c00b17 	ldw	r3,44(sp)
    edc8:	1800ab1e 	bne	r3,zero,f078 <_dtoa_r+0xdf4>
    edcc:	dc800717 	ldw	r18,28(sp)
    edd0:	dcc00617 	ldw	r19,24(sp)
    edd4:	9029883a 	mov	r20,r18
    edd8:	00000206 	br	ede4 <_dtoa_r+0xb60>
    eddc:	00117800 	call	11780 <__multadd>
    ede0:	1021883a 	mov	r16,r2
    ede4:	a80b883a 	mov	r5,r21
    ede8:	8009883a 	mov	r4,r16
    edec:	000e0840 	call	e084 <quorem>
    edf0:	10800c04 	addi	r2,r2,48
    edf4:	90800005 	stb	r2,0(r18)
    edf8:	94800044 	addi	r18,r18,1
    edfc:	9507c83a 	sub	r3,r18,r20
    ee00:	000f883a 	mov	r7,zero
    ee04:	01800284 	movi	r6,10
    ee08:	800b883a 	mov	r5,r16
    ee0c:	e009883a 	mov	r4,fp
    ee10:	1cfff216 	blt	r3,r19,eddc <__alt_data_end+0xf000eddc>
    ee14:	1011883a 	mov	r8,r2
    ee18:	d8800617 	ldw	r2,24(sp)
    ee1c:	0082370e 	bge	zero,r2,f6fc <_dtoa_r+0x1478>
    ee20:	d9000717 	ldw	r4,28(sp)
    ee24:	0025883a 	mov	r18,zero
    ee28:	20af883a 	add	r23,r4,r2
    ee2c:	01800044 	movi	r6,1
    ee30:	800b883a 	mov	r5,r16
    ee34:	e009883a 	mov	r4,fp
    ee38:	da001715 	stw	r8,92(sp)
    ee3c:	0011e300 	call	11e30 <__lshift>
    ee40:	a80b883a 	mov	r5,r21
    ee44:	1009883a 	mov	r4,r2
    ee48:	d8800915 	stw	r2,36(sp)
    ee4c:	0011f780 	call	11f78 <__mcmp>
    ee50:	da001717 	ldw	r8,92(sp)
    ee54:	0081800e 	bge	zero,r2,f458 <_dtoa_r+0x11d4>
    ee58:	b93fffc3 	ldbu	r4,-1(r23)
    ee5c:	b8bfffc4 	addi	r2,r23,-1
    ee60:	1007883a 	mov	r3,r2
    ee64:	01800e44 	movi	r6,57
    ee68:	d9c00717 	ldw	r7,28(sp)
    ee6c:	00000506 	br	ee84 <_dtoa_r+0xc00>
    ee70:	18ffffc4 	addi	r3,r3,-1
    ee74:	11c12326 	beq	r2,r7,f304 <_dtoa_r+0x1080>
    ee78:	19000003 	ldbu	r4,0(r3)
    ee7c:	102f883a 	mov	r23,r2
    ee80:	10bfffc4 	addi	r2,r2,-1
    ee84:	21403fcc 	andi	r5,r4,255
    ee88:	2940201c 	xori	r5,r5,128
    ee8c:	297fe004 	addi	r5,r5,-128
    ee90:	29bff726 	beq	r5,r6,ee70 <__alt_data_end+0xf000ee70>
    ee94:	21000044 	addi	r4,r4,1
    ee98:	11000005 	stb	r4,0(r2)
    ee9c:	a80b883a 	mov	r5,r21
    eea0:	e009883a 	mov	r4,fp
    eea4:	00117580 	call	11758 <_Bfree>
    eea8:	883ea026 	beq	r17,zero,e92c <__alt_data_end+0xf000e92c>
    eeac:	90000426 	beq	r18,zero,eec0 <_dtoa_r+0xc3c>
    eeb0:	94400326 	beq	r18,r17,eec0 <_dtoa_r+0xc3c>
    eeb4:	900b883a 	mov	r5,r18
    eeb8:	e009883a 	mov	r4,fp
    eebc:	00117580 	call	11758 <_Bfree>
    eec0:	880b883a 	mov	r5,r17
    eec4:	e009883a 	mov	r4,fp
    eec8:	00117580 	call	11758 <_Bfree>
    eecc:	003e9706 	br	e92c <__alt_data_end+0xf000e92c>
    eed0:	01800044 	movi	r6,1
    eed4:	d9800e15 	stw	r6,56(sp)
    eed8:	003d9606 	br	e534 <__alt_data_end+0xf000e534>
    eedc:	d8800817 	ldw	r2,32(sp)
    eee0:	d8c00517 	ldw	r3,20(sp)
    eee4:	d8000d15 	stw	zero,52(sp)
    eee8:	10c5c83a 	sub	r2,r2,r3
    eeec:	00c9c83a 	sub	r4,zero,r3
    eef0:	d8800815 	stw	r2,32(sp)
    eef4:	d9000a15 	stw	r4,40(sp)
    eef8:	003d9706 	br	e558 <__alt_data_end+0xf000e558>
    eefc:	05adc83a 	sub	r22,zero,r22
    ef00:	dd800815 	stw	r22,32(sp)
    ef04:	002d883a 	mov	r22,zero
    ef08:	003d8e06 	br	e544 <__alt_data_end+0xf000e544>
    ef0c:	d9000517 	ldw	r4,20(sp)
    ef10:	0008f540 	call	8f54 <__floatsidf>
    ef14:	100d883a 	mov	r6,r2
    ef18:	180f883a 	mov	r7,r3
    ef1c:	a009883a 	mov	r4,r20
    ef20:	880b883a 	mov	r5,r17
    ef24:	00175d40 	call	175d4 <__eqdf2>
    ef28:	103d7126 	beq	r2,zero,e4f0 <__alt_data_end+0xf000e4f0>
    ef2c:	d9c00517 	ldw	r7,20(sp)
    ef30:	39ffffc4 	addi	r7,r7,-1
    ef34:	d9c00515 	stw	r7,20(sp)
    ef38:	003d6d06 	br	e4f0 <__alt_data_end+0xf000e4f0>
    ef3c:	dd400a17 	ldw	r21,40(sp)
    ef40:	dd000817 	ldw	r20,32(sp)
    ef44:	0023883a 	mov	r17,zero
    ef48:	003f4806 	br	ec6c <__alt_data_end+0xf000ec6c>
    ef4c:	10e3c83a 	sub	r17,r2,r3
    ef50:	9448983a 	sll	r4,r18,r17
    ef54:	003d3206 	br	e420 <__alt_data_end+0xf000e420>
    ef58:	d8000e15 	stw	zero,56(sp)
    ef5c:	003d7506 	br	e534 <__alt_data_end+0xf000e534>
    ef60:	b005883a 	mov	r2,r22
    ef64:	003f4506 	br	ec7c <__alt_data_end+0xf000ec7c>
    ef68:	dc000915 	stw	r16,36(sp)
    ef6c:	d9800a17 	ldw	r6,40(sp)
    ef70:	d9400917 	ldw	r5,36(sp)
    ef74:	e009883a 	mov	r4,fp
    ef78:	0011cf00 	call	11cf0 <__pow5mult>
    ef7c:	1021883a 	mov	r16,r2
    ef80:	003f5a06 	br	ecec <__alt_data_end+0xf000ecec>
    ef84:	01c00044 	movi	r7,1
    ef88:	d9c00b15 	stw	r7,44(sp)
    ef8c:	d8802217 	ldw	r2,136(sp)
    ef90:	0081280e 	bge	zero,r2,f434 <_dtoa_r+0x11b0>
    ef94:	100d883a 	mov	r6,r2
    ef98:	1021883a 	mov	r16,r2
    ef9c:	d8800c15 	stw	r2,48(sp)
    efa0:	d8800615 	stw	r2,24(sp)
    efa4:	003d8806 	br	e5c8 <__alt_data_end+0xf000e5c8>
    efa8:	d8800617 	ldw	r2,24(sp)
    efac:	00be9b16 	blt	zero,r2,ea1c <__alt_data_end+0xf000ea1c>
    efb0:	10010f1e 	bne	r2,zero,f3f0 <_dtoa_r+0x116c>
    efb4:	880b883a 	mov	r5,r17
    efb8:	000d883a 	mov	r6,zero
    efbc:	01d00534 	movhi	r7,16404
    efc0:	8009883a 	mov	r4,r16
    efc4:	0007ec00 	call	7ec0 <__muldf3>
    efc8:	900d883a 	mov	r6,r18
    efcc:	980f883a 	mov	r7,r19
    efd0:	1009883a 	mov	r4,r2
    efd4:	180b883a 	mov	r5,r3
    efd8:	0007de40 	call	7de4 <__gedf2>
    efdc:	002b883a 	mov	r21,zero
    efe0:	0023883a 	mov	r17,zero
    efe4:	1000bf16 	blt	r2,zero,f2e4 <_dtoa_r+0x1060>
    efe8:	d9802217 	ldw	r6,136(sp)
    efec:	ddc00717 	ldw	r23,28(sp)
    eff0:	018c303a 	nor	r6,zero,r6
    eff4:	d9800515 	stw	r6,20(sp)
    eff8:	a80b883a 	mov	r5,r21
    effc:	e009883a 	mov	r4,fp
    f000:	00117580 	call	11758 <_Bfree>
    f004:	883e4926 	beq	r17,zero,e92c <__alt_data_end+0xf000e92c>
    f008:	003fad06 	br	eec0 <__alt_data_end+0xf000eec0>
    f00c:	d9c01117 	ldw	r7,68(sp)
    f010:	3801bc26 	beq	r7,zero,f704 <_dtoa_r+0x1480>
    f014:	10810cc4 	addi	r2,r2,1075
    f018:	dd400a17 	ldw	r21,40(sp)
    f01c:	dd000817 	ldw	r20,32(sp)
    f020:	003f0a06 	br	ec4c <__alt_data_end+0xf000ec4c>
    f024:	00800704 	movi	r2,28
    f028:	d9000817 	ldw	r4,32(sp)
    f02c:	a0a9883a 	add	r20,r20,r2
    f030:	b0ad883a 	add	r22,r22,r2
    f034:	2089883a 	add	r4,r4,r2
    f038:	d9000815 	stw	r4,32(sp)
    f03c:	003f5106 	br	ed84 <__alt_data_end+0xf000ed84>
    f040:	d8c00317 	ldw	r3,12(sp)
    f044:	b8c1fc0e 	bge	r23,r3,f838 <_dtoa_r+0x15b4>
    f048:	0027883a 	mov	r19,zero
    f04c:	b805883a 	mov	r2,r23
    f050:	003f3e06 	br	ed4c <__alt_data_end+0xf000ed4c>
    f054:	880b883a 	mov	r5,r17
    f058:	e009883a 	mov	r4,fp
    f05c:	000f883a 	mov	r7,zero
    f060:	01800284 	movi	r6,10
    f064:	00117800 	call	11780 <__multadd>
    f068:	d9000c17 	ldw	r4,48(sp)
    f06c:	1023883a 	mov	r17,r2
    f070:	0102040e 	bge	zero,r4,f884 <_dtoa_r+0x1600>
    f074:	d9000615 	stw	r4,24(sp)
    f078:	0500050e 	bge	zero,r20,f090 <_dtoa_r+0xe0c>
    f07c:	880b883a 	mov	r5,r17
    f080:	a00d883a 	mov	r6,r20
    f084:	e009883a 	mov	r4,fp
    f088:	0011e300 	call	11e30 <__lshift>
    f08c:	1023883a 	mov	r17,r2
    f090:	9801241e 	bne	r19,zero,f524 <_dtoa_r+0x12a0>
    f094:	8829883a 	mov	r20,r17
    f098:	d9000617 	ldw	r4,24(sp)
    f09c:	dcc00717 	ldw	r19,28(sp)
    f0a0:	9480004c 	andi	r18,r18,1
    f0a4:	20bfffc4 	addi	r2,r4,-1
    f0a8:	9885883a 	add	r2,r19,r2
    f0ac:	d8800415 	stw	r2,16(sp)
    f0b0:	dc800615 	stw	r18,24(sp)
    f0b4:	a80b883a 	mov	r5,r21
    f0b8:	8009883a 	mov	r4,r16
    f0bc:	000e0840 	call	e084 <quorem>
    f0c0:	880b883a 	mov	r5,r17
    f0c4:	8009883a 	mov	r4,r16
    f0c8:	102f883a 	mov	r23,r2
    f0cc:	0011f780 	call	11f78 <__mcmp>
    f0d0:	a80b883a 	mov	r5,r21
    f0d4:	a00d883a 	mov	r6,r20
    f0d8:	e009883a 	mov	r4,fp
    f0dc:	102d883a 	mov	r22,r2
    f0e0:	0011fd80 	call	11fd8 <__mdiff>
    f0e4:	1007883a 	mov	r3,r2
    f0e8:	10800317 	ldw	r2,12(r2)
    f0ec:	bc800c04 	addi	r18,r23,48
    f0f0:	180b883a 	mov	r5,r3
    f0f4:	10004e1e 	bne	r2,zero,f230 <_dtoa_r+0xfac>
    f0f8:	8009883a 	mov	r4,r16
    f0fc:	d8c01615 	stw	r3,88(sp)
    f100:	0011f780 	call	11f78 <__mcmp>
    f104:	d8c01617 	ldw	r3,88(sp)
    f108:	e009883a 	mov	r4,fp
    f10c:	d8801615 	stw	r2,88(sp)
    f110:	180b883a 	mov	r5,r3
    f114:	00117580 	call	11758 <_Bfree>
    f118:	d8801617 	ldw	r2,88(sp)
    f11c:	1000041e 	bne	r2,zero,f130 <_dtoa_r+0xeac>
    f120:	d9800317 	ldw	r6,12(sp)
    f124:	3000021e 	bne	r6,zero,f130 <_dtoa_r+0xeac>
    f128:	d8c00617 	ldw	r3,24(sp)
    f12c:	18003726 	beq	r3,zero,f20c <_dtoa_r+0xf88>
    f130:	b0002016 	blt	r22,zero,f1b4 <_dtoa_r+0xf30>
    f134:	b000041e 	bne	r22,zero,f148 <_dtoa_r+0xec4>
    f138:	d9000317 	ldw	r4,12(sp)
    f13c:	2000021e 	bne	r4,zero,f148 <_dtoa_r+0xec4>
    f140:	d8c00617 	ldw	r3,24(sp)
    f144:	18001b26 	beq	r3,zero,f1b4 <_dtoa_r+0xf30>
    f148:	00810716 	blt	zero,r2,f568 <_dtoa_r+0x12e4>
    f14c:	d8c00417 	ldw	r3,16(sp)
    f150:	9d800044 	addi	r22,r19,1
    f154:	9c800005 	stb	r18,0(r19)
    f158:	b02f883a 	mov	r23,r22
    f15c:	98c10626 	beq	r19,r3,f578 <_dtoa_r+0x12f4>
    f160:	800b883a 	mov	r5,r16
    f164:	000f883a 	mov	r7,zero
    f168:	01800284 	movi	r6,10
    f16c:	e009883a 	mov	r4,fp
    f170:	00117800 	call	11780 <__multadd>
    f174:	1021883a 	mov	r16,r2
    f178:	000f883a 	mov	r7,zero
    f17c:	01800284 	movi	r6,10
    f180:	880b883a 	mov	r5,r17
    f184:	e009883a 	mov	r4,fp
    f188:	8d002526 	beq	r17,r20,f220 <_dtoa_r+0xf9c>
    f18c:	00117800 	call	11780 <__multadd>
    f190:	a00b883a 	mov	r5,r20
    f194:	000f883a 	mov	r7,zero
    f198:	01800284 	movi	r6,10
    f19c:	e009883a 	mov	r4,fp
    f1a0:	1023883a 	mov	r17,r2
    f1a4:	00117800 	call	11780 <__multadd>
    f1a8:	1029883a 	mov	r20,r2
    f1ac:	b027883a 	mov	r19,r22
    f1b0:	003fc006 	br	f0b4 <__alt_data_end+0xf000f0b4>
    f1b4:	9011883a 	mov	r8,r18
    f1b8:	00800e0e 	bge	zero,r2,f1f4 <_dtoa_r+0xf70>
    f1bc:	800b883a 	mov	r5,r16
    f1c0:	01800044 	movi	r6,1
    f1c4:	e009883a 	mov	r4,fp
    f1c8:	da001715 	stw	r8,92(sp)
    f1cc:	0011e300 	call	11e30 <__lshift>
    f1d0:	a80b883a 	mov	r5,r21
    f1d4:	1009883a 	mov	r4,r2
    f1d8:	1021883a 	mov	r16,r2
    f1dc:	0011f780 	call	11f78 <__mcmp>
    f1e0:	da001717 	ldw	r8,92(sp)
    f1e4:	0081960e 	bge	zero,r2,f840 <_dtoa_r+0x15bc>
    f1e8:	00800e44 	movi	r2,57
    f1ec:	40817026 	beq	r8,r2,f7b0 <_dtoa_r+0x152c>
    f1f0:	ba000c44 	addi	r8,r23,49
    f1f4:	8825883a 	mov	r18,r17
    f1f8:	9dc00044 	addi	r23,r19,1
    f1fc:	9a000005 	stb	r8,0(r19)
    f200:	a023883a 	mov	r17,r20
    f204:	dc000915 	stw	r16,36(sp)
    f208:	003f2406 	br	ee9c <__alt_data_end+0xf000ee9c>
    f20c:	00800e44 	movi	r2,57
    f210:	9011883a 	mov	r8,r18
    f214:	90816626 	beq	r18,r2,f7b0 <_dtoa_r+0x152c>
    f218:	05bff516 	blt	zero,r22,f1f0 <__alt_data_end+0xf000f1f0>
    f21c:	003ff506 	br	f1f4 <__alt_data_end+0xf000f1f4>
    f220:	00117800 	call	11780 <__multadd>
    f224:	1023883a 	mov	r17,r2
    f228:	1029883a 	mov	r20,r2
    f22c:	003fdf06 	br	f1ac <__alt_data_end+0xf000f1ac>
    f230:	e009883a 	mov	r4,fp
    f234:	00117580 	call	11758 <_Bfree>
    f238:	00800044 	movi	r2,1
    f23c:	003fbc06 	br	f130 <__alt_data_end+0xf000f130>
    f240:	a80b883a 	mov	r5,r21
    f244:	8009883a 	mov	r4,r16
    f248:	0011f780 	call	11f78 <__mcmp>
    f24c:	103edb0e 	bge	r2,zero,edbc <__alt_data_end+0xf000edbc>
    f250:	800b883a 	mov	r5,r16
    f254:	000f883a 	mov	r7,zero
    f258:	01800284 	movi	r6,10
    f25c:	e009883a 	mov	r4,fp
    f260:	00117800 	call	11780 <__multadd>
    f264:	1021883a 	mov	r16,r2
    f268:	d8800517 	ldw	r2,20(sp)
    f26c:	d8c00b17 	ldw	r3,44(sp)
    f270:	10bfffc4 	addi	r2,r2,-1
    f274:	d8800515 	stw	r2,20(sp)
    f278:	183f761e 	bne	r3,zero,f054 <__alt_data_end+0xf000f054>
    f27c:	d9000c17 	ldw	r4,48(sp)
    f280:	0101730e 	bge	zero,r4,f850 <_dtoa_r+0x15cc>
    f284:	d9000615 	stw	r4,24(sp)
    f288:	003ed006 	br	edcc <__alt_data_end+0xf000edcc>
    f28c:	00800084 	movi	r2,2
    f290:	3081861e 	bne	r6,r2,f8ac <_dtoa_r+0x1628>
    f294:	d8000b15 	stw	zero,44(sp)
    f298:	003f3c06 	br	ef8c <__alt_data_end+0xf000ef8c>
    f29c:	dc000917 	ldw	r16,36(sp)
    f2a0:	003e9206 	br	ecec <__alt_data_end+0xf000ecec>
    f2a4:	d9c00317 	ldw	r7,12(sp)
    f2a8:	00800084 	movi	r2,2
    f2ac:	11fec50e 	bge	r2,r7,edc4 <__alt_data_end+0xf000edc4>
    f2b0:	d9000617 	ldw	r4,24(sp)
    f2b4:	20013c1e 	bne	r4,zero,f7a8 <_dtoa_r+0x1524>
    f2b8:	a80b883a 	mov	r5,r21
    f2bc:	000f883a 	mov	r7,zero
    f2c0:	01800144 	movi	r6,5
    f2c4:	e009883a 	mov	r4,fp
    f2c8:	00117800 	call	11780 <__multadd>
    f2cc:	100b883a 	mov	r5,r2
    f2d0:	8009883a 	mov	r4,r16
    f2d4:	102b883a 	mov	r21,r2
    f2d8:	0011f780 	call	11f78 <__mcmp>
    f2dc:	dc000915 	stw	r16,36(sp)
    f2e0:	00bf410e 	bge	zero,r2,efe8 <__alt_data_end+0xf000efe8>
    f2e4:	d9c00717 	ldw	r7,28(sp)
    f2e8:	00800c44 	movi	r2,49
    f2ec:	38800005 	stb	r2,0(r7)
    f2f0:	d8800517 	ldw	r2,20(sp)
    f2f4:	3dc00044 	addi	r23,r7,1
    f2f8:	10800044 	addi	r2,r2,1
    f2fc:	d8800515 	stw	r2,20(sp)
    f300:	003f3d06 	br	eff8 <__alt_data_end+0xf000eff8>
    f304:	d9800517 	ldw	r6,20(sp)
    f308:	d9c00717 	ldw	r7,28(sp)
    f30c:	00800c44 	movi	r2,49
    f310:	31800044 	addi	r6,r6,1
    f314:	d9800515 	stw	r6,20(sp)
    f318:	38800005 	stb	r2,0(r7)
    f31c:	003edf06 	br	ee9c <__alt_data_end+0xf000ee9c>
    f320:	d8000b15 	stw	zero,44(sp)
    f324:	003c9f06 	br	e5a4 <__alt_data_end+0xf000e5a4>
    f328:	903e7e1e 	bne	r18,zero,ed24 <__alt_data_end+0xf000ed24>
    f32c:	00800434 	movhi	r2,16
    f330:	10bfffc4 	addi	r2,r2,-1
    f334:	9884703a 	and	r2,r19,r2
    f338:	1000ea1e 	bne	r2,zero,f6e4 <_dtoa_r+0x1460>
    f33c:	9cdffc2c 	andhi	r19,r19,32752
    f340:	9800e826 	beq	r19,zero,f6e4 <_dtoa_r+0x1460>
    f344:	d9c00817 	ldw	r7,32(sp)
    f348:	b5800044 	addi	r22,r22,1
    f34c:	04c00044 	movi	r19,1
    f350:	39c00044 	addi	r7,r7,1
    f354:	d9c00815 	stw	r7,32(sp)
    f358:	d8800d17 	ldw	r2,52(sp)
    f35c:	103e721e 	bne	r2,zero,ed28 <__alt_data_end+0xf000ed28>
    f360:	00800044 	movi	r2,1
    f364:	003e7906 	br	ed4c <__alt_data_end+0xf000ed4c>
    f368:	8009883a 	mov	r4,r16
    f36c:	0008f540 	call	8f54 <__floatsidf>
    f370:	d9800f17 	ldw	r6,60(sp)
    f374:	d9c01017 	ldw	r7,64(sp)
    f378:	1009883a 	mov	r4,r2
    f37c:	180b883a 	mov	r5,r3
    f380:	0007ec00 	call	7ec0 <__muldf3>
    f384:	000d883a 	mov	r6,zero
    f388:	01d00734 	movhi	r7,16412
    f38c:	1009883a 	mov	r4,r2
    f390:	180b883a 	mov	r5,r3
    f394:	0016d280 	call	16d28 <__adddf3>
    f398:	047f3034 	movhi	r17,64704
    f39c:	1021883a 	mov	r16,r2
    f3a0:	1c63883a 	add	r17,r3,r17
    f3a4:	d9000f17 	ldw	r4,60(sp)
    f3a8:	d9401017 	ldw	r5,64(sp)
    f3ac:	000d883a 	mov	r6,zero
    f3b0:	01d00534 	movhi	r7,16404
    f3b4:	00085d80 	call	85d8 <__subdf3>
    f3b8:	800d883a 	mov	r6,r16
    f3bc:	880f883a 	mov	r7,r17
    f3c0:	1009883a 	mov	r4,r2
    f3c4:	180b883a 	mov	r5,r3
    f3c8:	102b883a 	mov	r21,r2
    f3cc:	1829883a 	mov	r20,r3
    f3d0:	0007de40 	call	7de4 <__gedf2>
    f3d4:	00806c16 	blt	zero,r2,f588 <_dtoa_r+0x1304>
    f3d8:	89e0003c 	xorhi	r7,r17,32768
    f3dc:	800d883a 	mov	r6,r16
    f3e0:	a809883a 	mov	r4,r21
    f3e4:	a00b883a 	mov	r5,r20
    f3e8:	001765c0 	call	1765c <__ledf2>
    f3ec:	103d7e0e 	bge	r2,zero,e9e8 <__alt_data_end+0xf000e9e8>
    f3f0:	002b883a 	mov	r21,zero
    f3f4:	0023883a 	mov	r17,zero
    f3f8:	003efb06 	br	efe8 <__alt_data_end+0xf000efe8>
    f3fc:	d8800717 	ldw	r2,28(sp)
    f400:	003bd006 	br	e344 <__alt_data_end+0xf000e344>
    f404:	d9000a17 	ldw	r4,40(sp)
    f408:	d9800d17 	ldw	r6,52(sp)
    f40c:	dd400a15 	stw	r21,40(sp)
    f410:	a905c83a 	sub	r2,r21,r4
    f414:	308d883a 	add	r6,r6,r2
    f418:	d9800d15 	stw	r6,52(sp)
    f41c:	002b883a 	mov	r21,zero
    f420:	003e0606 	br	ec3c <__alt_data_end+0xf000ec3c>
    f424:	9023883a 	mov	r17,r18
    f428:	9829883a 	mov	r20,r19
    f42c:	04000084 	movi	r16,2
    f430:	003c9206 	br	e67c <__alt_data_end+0xf000e67c>
    f434:	04000044 	movi	r16,1
    f438:	dc000c15 	stw	r16,48(sp)
    f43c:	dc000615 	stw	r16,24(sp)
    f440:	dc002215 	stw	r16,136(sp)
    f444:	e0001115 	stw	zero,68(fp)
    f448:	000b883a 	mov	r5,zero
    f44c:	003c6906 	br	e5f4 <__alt_data_end+0xf000e5f4>
    f450:	3021883a 	mov	r16,r6
    f454:	003ffb06 	br	f444 <__alt_data_end+0xf000f444>
    f458:	1000021e 	bne	r2,zero,f464 <_dtoa_r+0x11e0>
    f45c:	4200004c 	andi	r8,r8,1
    f460:	403e7d1e 	bne	r8,zero,ee58 <__alt_data_end+0xf000ee58>
    f464:	01000c04 	movi	r4,48
    f468:	00000106 	br	f470 <_dtoa_r+0x11ec>
    f46c:	102f883a 	mov	r23,r2
    f470:	b8bfffc4 	addi	r2,r23,-1
    f474:	10c00007 	ldb	r3,0(r2)
    f478:	193ffc26 	beq	r3,r4,f46c <__alt_data_end+0xf000f46c>
    f47c:	003e8706 	br	ee9c <__alt_data_end+0xf000ee9c>
    f480:	d8800517 	ldw	r2,20(sp)
    f484:	00a3c83a 	sub	r17,zero,r2
    f488:	8800a426 	beq	r17,zero,f71c <_dtoa_r+0x1498>
    f48c:	888003cc 	andi	r2,r17,15
    f490:	100490fa 	slli	r2,r2,3
    f494:	00c20034 	movhi	r3,2048
    f498:	18c11d04 	addi	r3,r3,1140
    f49c:	1885883a 	add	r2,r3,r2
    f4a0:	11800017 	ldw	r6,0(r2)
    f4a4:	11c00117 	ldw	r7,4(r2)
    f4a8:	9009883a 	mov	r4,r18
    f4ac:	980b883a 	mov	r5,r19
    f4b0:	8823d13a 	srai	r17,r17,4
    f4b4:	0007ec00 	call	7ec0 <__muldf3>
    f4b8:	d8800f15 	stw	r2,60(sp)
    f4bc:	d8c01015 	stw	r3,64(sp)
    f4c0:	8800e826 	beq	r17,zero,f864 <_dtoa_r+0x15e0>
    f4c4:	05020034 	movhi	r20,2048
    f4c8:	a5011304 	addi	r20,r20,1100
    f4cc:	04000084 	movi	r16,2
    f4d0:	8980004c 	andi	r6,r17,1
    f4d4:	1009883a 	mov	r4,r2
    f4d8:	8823d07a 	srai	r17,r17,1
    f4dc:	180b883a 	mov	r5,r3
    f4e0:	30000426 	beq	r6,zero,f4f4 <_dtoa_r+0x1270>
    f4e4:	a1800017 	ldw	r6,0(r20)
    f4e8:	a1c00117 	ldw	r7,4(r20)
    f4ec:	84000044 	addi	r16,r16,1
    f4f0:	0007ec00 	call	7ec0 <__muldf3>
    f4f4:	a5000204 	addi	r20,r20,8
    f4f8:	883ff51e 	bne	r17,zero,f4d0 <__alt_data_end+0xf000f4d0>
    f4fc:	d8800f15 	stw	r2,60(sp)
    f500:	d8c01015 	stw	r3,64(sp)
    f504:	003c7606 	br	e6e0 <__alt_data_end+0xf000e6e0>
    f508:	00c00c04 	movi	r3,48
    f50c:	10c00005 	stb	r3,0(r2)
    f510:	d8c00517 	ldw	r3,20(sp)
    f514:	bd3fffc3 	ldbu	r20,-1(r23)
    f518:	18c00044 	addi	r3,r3,1
    f51c:	d8c00515 	stw	r3,20(sp)
    f520:	003db906 	br	ec08 <__alt_data_end+0xf000ec08>
    f524:	89400117 	ldw	r5,4(r17)
    f528:	e009883a 	mov	r4,fp
    f52c:	00116b00 	call	116b0 <_Balloc>
    f530:	89800417 	ldw	r6,16(r17)
    f534:	89400304 	addi	r5,r17,12
    f538:	11000304 	addi	r4,r2,12
    f53c:	31800084 	addi	r6,r6,2
    f540:	318d883a 	add	r6,r6,r6
    f544:	318d883a 	add	r6,r6,r6
    f548:	1027883a 	mov	r19,r2
    f54c:	000957c0 	call	957c <memcpy>
    f550:	01800044 	movi	r6,1
    f554:	980b883a 	mov	r5,r19
    f558:	e009883a 	mov	r4,fp
    f55c:	0011e300 	call	11e30 <__lshift>
    f560:	1029883a 	mov	r20,r2
    f564:	003ecc06 	br	f098 <__alt_data_end+0xf000f098>
    f568:	00800e44 	movi	r2,57
    f56c:	90809026 	beq	r18,r2,f7b0 <_dtoa_r+0x152c>
    f570:	92000044 	addi	r8,r18,1
    f574:	003f1f06 	br	f1f4 <__alt_data_end+0xf000f1f4>
    f578:	9011883a 	mov	r8,r18
    f57c:	8825883a 	mov	r18,r17
    f580:	a023883a 	mov	r17,r20
    f584:	003e2906 	br	ee2c <__alt_data_end+0xf000ee2c>
    f588:	002b883a 	mov	r21,zero
    f58c:	0023883a 	mov	r17,zero
    f590:	003f5406 	br	f2e4 <__alt_data_end+0xf000f2e4>
    f594:	61bfffc4 	addi	r6,r12,-1
    f598:	300490fa 	slli	r2,r6,3
    f59c:	00c20034 	movhi	r3,2048
    f5a0:	18c11d04 	addi	r3,r3,1140
    f5a4:	1885883a 	add	r2,r3,r2
    f5a8:	11000017 	ldw	r4,0(r2)
    f5ac:	11400117 	ldw	r5,4(r2)
    f5b0:	d8800717 	ldw	r2,28(sp)
    f5b4:	880f883a 	mov	r7,r17
    f5b8:	d9801215 	stw	r6,72(sp)
    f5bc:	800d883a 	mov	r6,r16
    f5c0:	db001615 	stw	r12,88(sp)
    f5c4:	15c00044 	addi	r23,r2,1
    f5c8:	0007ec00 	call	7ec0 <__muldf3>
    f5cc:	d9401017 	ldw	r5,64(sp)
    f5d0:	d9000f17 	ldw	r4,60(sp)
    f5d4:	d8c01515 	stw	r3,84(sp)
    f5d8:	d8801415 	stw	r2,80(sp)
    f5dc:	0008ed40 	call	8ed4 <__fixdfsi>
    f5e0:	1009883a 	mov	r4,r2
    f5e4:	1021883a 	mov	r16,r2
    f5e8:	0008f540 	call	8f54 <__floatsidf>
    f5ec:	d9000f17 	ldw	r4,60(sp)
    f5f0:	d9401017 	ldw	r5,64(sp)
    f5f4:	100d883a 	mov	r6,r2
    f5f8:	180f883a 	mov	r7,r3
    f5fc:	00085d80 	call	85d8 <__subdf3>
    f600:	1829883a 	mov	r20,r3
    f604:	d8c00717 	ldw	r3,28(sp)
    f608:	84000c04 	addi	r16,r16,48
    f60c:	1023883a 	mov	r17,r2
    f610:	1c000005 	stb	r16,0(r3)
    f614:	db001617 	ldw	r12,88(sp)
    f618:	00800044 	movi	r2,1
    f61c:	60802226 	beq	r12,r2,f6a8 <_dtoa_r+0x1424>
    f620:	d9c00717 	ldw	r7,28(sp)
    f624:	8805883a 	mov	r2,r17
    f628:	b82b883a 	mov	r21,r23
    f62c:	3b19883a 	add	r12,r7,r12
    f630:	6023883a 	mov	r17,r12
    f634:	a007883a 	mov	r3,r20
    f638:	dc800f15 	stw	r18,60(sp)
    f63c:	000d883a 	mov	r6,zero
    f640:	01d00934 	movhi	r7,16420
    f644:	1009883a 	mov	r4,r2
    f648:	180b883a 	mov	r5,r3
    f64c:	0007ec00 	call	7ec0 <__muldf3>
    f650:	180b883a 	mov	r5,r3
    f654:	1009883a 	mov	r4,r2
    f658:	1829883a 	mov	r20,r3
    f65c:	1025883a 	mov	r18,r2
    f660:	0008ed40 	call	8ed4 <__fixdfsi>
    f664:	1009883a 	mov	r4,r2
    f668:	1021883a 	mov	r16,r2
    f66c:	0008f540 	call	8f54 <__floatsidf>
    f670:	100d883a 	mov	r6,r2
    f674:	180f883a 	mov	r7,r3
    f678:	9009883a 	mov	r4,r18
    f67c:	a00b883a 	mov	r5,r20
    f680:	84000c04 	addi	r16,r16,48
    f684:	00085d80 	call	85d8 <__subdf3>
    f688:	ad400044 	addi	r21,r21,1
    f68c:	ac3fffc5 	stb	r16,-1(r21)
    f690:	ac7fea1e 	bne	r21,r17,f63c <__alt_data_end+0xf000f63c>
    f694:	1023883a 	mov	r17,r2
    f698:	d8801217 	ldw	r2,72(sp)
    f69c:	dc800f17 	ldw	r18,60(sp)
    f6a0:	1829883a 	mov	r20,r3
    f6a4:	b8af883a 	add	r23,r23,r2
    f6a8:	d9001417 	ldw	r4,80(sp)
    f6ac:	d9401517 	ldw	r5,84(sp)
    f6b0:	000d883a 	mov	r6,zero
    f6b4:	01cff834 	movhi	r7,16352
    f6b8:	0016d280 	call	16d28 <__adddf3>
    f6bc:	880d883a 	mov	r6,r17
    f6c0:	a00f883a 	mov	r7,r20
    f6c4:	1009883a 	mov	r4,r2
    f6c8:	180b883a 	mov	r5,r3
    f6cc:	001765c0 	call	1765c <__ledf2>
    f6d0:	10003e0e 	bge	r2,zero,f7cc <_dtoa_r+0x1548>
    f6d4:	d9001317 	ldw	r4,76(sp)
    f6d8:	bd3fffc3 	ldbu	r20,-1(r23)
    f6dc:	d9000515 	stw	r4,20(sp)
    f6e0:	003d3b06 	br	ebd0 <__alt_data_end+0xf000ebd0>
    f6e4:	0027883a 	mov	r19,zero
    f6e8:	003f1b06 	br	f358 <__alt_data_end+0xf000f358>
    f6ec:	d8800817 	ldw	r2,32(sp)
    f6f0:	11e9c83a 	sub	r20,r2,r7
    f6f4:	0005883a 	mov	r2,zero
    f6f8:	003d5406 	br	ec4c <__alt_data_end+0xf000ec4c>
    f6fc:	00800044 	movi	r2,1
    f700:	003dc706 	br	ee20 <__alt_data_end+0xf000ee20>
    f704:	d8c00217 	ldw	r3,8(sp)
    f708:	00800d84 	movi	r2,54
    f70c:	dd400a17 	ldw	r21,40(sp)
    f710:	10c5c83a 	sub	r2,r2,r3
    f714:	dd000817 	ldw	r20,32(sp)
    f718:	003d4c06 	br	ec4c <__alt_data_end+0xf000ec4c>
    f71c:	dc800f15 	stw	r18,60(sp)
    f720:	dcc01015 	stw	r19,64(sp)
    f724:	04000084 	movi	r16,2
    f728:	003bed06 	br	e6e0 <__alt_data_end+0xf000e6e0>
    f72c:	d9000617 	ldw	r4,24(sp)
    f730:	203f0d26 	beq	r4,zero,f368 <__alt_data_end+0xf000f368>
    f734:	d9800c17 	ldw	r6,48(sp)
    f738:	01bcab0e 	bge	zero,r6,e9e8 <__alt_data_end+0xf000e9e8>
    f73c:	d9401017 	ldw	r5,64(sp)
    f740:	d9000f17 	ldw	r4,60(sp)
    f744:	000d883a 	mov	r6,zero
    f748:	01d00934 	movhi	r7,16420
    f74c:	0007ec00 	call	7ec0 <__muldf3>
    f750:	81000044 	addi	r4,r16,1
    f754:	d8800f15 	stw	r2,60(sp)
    f758:	d8c01015 	stw	r3,64(sp)
    f75c:	0008f540 	call	8f54 <__floatsidf>
    f760:	d9800f17 	ldw	r6,60(sp)
    f764:	d9c01017 	ldw	r7,64(sp)
    f768:	1009883a 	mov	r4,r2
    f76c:	180b883a 	mov	r5,r3
    f770:	0007ec00 	call	7ec0 <__muldf3>
    f774:	01d00734 	movhi	r7,16412
    f778:	000d883a 	mov	r6,zero
    f77c:	1009883a 	mov	r4,r2
    f780:	180b883a 	mov	r5,r3
    f784:	0016d280 	call	16d28 <__adddf3>
    f788:	d9c00517 	ldw	r7,20(sp)
    f78c:	047f3034 	movhi	r17,64704
    f790:	1021883a 	mov	r16,r2
    f794:	39ffffc4 	addi	r7,r7,-1
    f798:	d9c01315 	stw	r7,76(sp)
    f79c:	1c63883a 	add	r17,r3,r17
    f7a0:	db000c17 	ldw	r12,48(sp)
    f7a4:	003bea06 	br	e750 <__alt_data_end+0xf000e750>
    f7a8:	dc000915 	stw	r16,36(sp)
    f7ac:	003e0e06 	br	efe8 <__alt_data_end+0xf000efe8>
    f7b0:	01000e44 	movi	r4,57
    f7b4:	8825883a 	mov	r18,r17
    f7b8:	9dc00044 	addi	r23,r19,1
    f7bc:	99000005 	stb	r4,0(r19)
    f7c0:	a023883a 	mov	r17,r20
    f7c4:	dc000915 	stw	r16,36(sp)
    f7c8:	003da406 	br	ee5c <__alt_data_end+0xf000ee5c>
    f7cc:	d9801417 	ldw	r6,80(sp)
    f7d0:	d9c01517 	ldw	r7,84(sp)
    f7d4:	0009883a 	mov	r4,zero
    f7d8:	014ff834 	movhi	r5,16352
    f7dc:	00085d80 	call	85d8 <__subdf3>
    f7e0:	880d883a 	mov	r6,r17
    f7e4:	a00f883a 	mov	r7,r20
    f7e8:	1009883a 	mov	r4,r2
    f7ec:	180b883a 	mov	r5,r3
    f7f0:	0007de40 	call	7de4 <__gedf2>
    f7f4:	00bc7c0e 	bge	zero,r2,e9e8 <__alt_data_end+0xf000e9e8>
    f7f8:	01000c04 	movi	r4,48
    f7fc:	00000106 	br	f804 <_dtoa_r+0x1580>
    f800:	102f883a 	mov	r23,r2
    f804:	b8bfffc4 	addi	r2,r23,-1
    f808:	10c00007 	ldb	r3,0(r2)
    f80c:	193ffc26 	beq	r3,r4,f800 <__alt_data_end+0xf000f800>
    f810:	d9801317 	ldw	r6,76(sp)
    f814:	d9800515 	stw	r6,20(sp)
    f818:	003c4406 	br	e92c <__alt_data_end+0xf000e92c>
    f81c:	d9801317 	ldw	r6,76(sp)
    f820:	d9800515 	stw	r6,20(sp)
    f824:	003cea06 	br	ebd0 <__alt_data_end+0xf000ebd0>
    f828:	dd800f17 	ldw	r22,60(sp)
    f82c:	dcc01017 	ldw	r19,64(sp)
    f830:	dc801217 	ldw	r18,72(sp)
    f834:	003c6c06 	br	e9e8 <__alt_data_end+0xf000e9e8>
    f838:	903e031e 	bne	r18,zero,f048 <__alt_data_end+0xf000f048>
    f83c:	003ebb06 	br	f32c <__alt_data_end+0xf000f32c>
    f840:	103e6c1e 	bne	r2,zero,f1f4 <__alt_data_end+0xf000f1f4>
    f844:	4080004c 	andi	r2,r8,1
    f848:	103e6a26 	beq	r2,zero,f1f4 <__alt_data_end+0xf000f1f4>
    f84c:	003e6606 	br	f1e8 <__alt_data_end+0xf000f1e8>
    f850:	d8c00317 	ldw	r3,12(sp)
    f854:	00800084 	movi	r2,2
    f858:	10c02916 	blt	r2,r3,f900 <_dtoa_r+0x167c>
    f85c:	d9000c17 	ldw	r4,48(sp)
    f860:	003e8806 	br	f284 <__alt_data_end+0xf000f284>
    f864:	04000084 	movi	r16,2
    f868:	003b9d06 	br	e6e0 <__alt_data_end+0xf000e6e0>
    f86c:	d9001317 	ldw	r4,76(sp)
    f870:	d9000515 	stw	r4,20(sp)
    f874:	003cd606 	br	ebd0 <__alt_data_end+0xf000ebd0>
    f878:	d8801317 	ldw	r2,76(sp)
    f87c:	d8800515 	stw	r2,20(sp)
    f880:	003c2a06 	br	e92c <__alt_data_end+0xf000e92c>
    f884:	d9800317 	ldw	r6,12(sp)
    f888:	00800084 	movi	r2,2
    f88c:	11801516 	blt	r2,r6,f8e4 <_dtoa_r+0x1660>
    f890:	d9c00c17 	ldw	r7,48(sp)
    f894:	d9c00615 	stw	r7,24(sp)
    f898:	003df706 	br	f078 <__alt_data_end+0xf000f078>
    f89c:	193d3926 	beq	r3,r4,ed84 <__alt_data_end+0xf000ed84>
    f8a0:	00c00f04 	movi	r3,60
    f8a4:	1885c83a 	sub	r2,r3,r2
    f8a8:	003ddf06 	br	f028 <__alt_data_end+0xf000f028>
    f8ac:	e009883a 	mov	r4,fp
    f8b0:	e0001115 	stw	zero,68(fp)
    f8b4:	000b883a 	mov	r5,zero
    f8b8:	00116b00 	call	116b0 <_Balloc>
    f8bc:	d8800715 	stw	r2,28(sp)
    f8c0:	d8c00717 	ldw	r3,28(sp)
    f8c4:	00bfffc4 	movi	r2,-1
    f8c8:	01000044 	movi	r4,1
    f8cc:	d8800c15 	stw	r2,48(sp)
    f8d0:	e0c01015 	stw	r3,64(fp)
    f8d4:	d9000b15 	stw	r4,44(sp)
    f8d8:	d8800615 	stw	r2,24(sp)
    f8dc:	d8002215 	stw	zero,136(sp)
    f8e0:	003c4106 	br	e9e8 <__alt_data_end+0xf000e9e8>
    f8e4:	d8c00c17 	ldw	r3,48(sp)
    f8e8:	d8c00615 	stw	r3,24(sp)
    f8ec:	003e7006 	br	f2b0 <__alt_data_end+0xf000f2b0>
    f8f0:	04400044 	movi	r17,1
    f8f4:	003b2006 	br	e578 <__alt_data_end+0xf000e578>
    f8f8:	000b883a 	mov	r5,zero
    f8fc:	003b3d06 	br	e5f4 <__alt_data_end+0xf000e5f4>
    f900:	d8800c17 	ldw	r2,48(sp)
    f904:	d8800615 	stw	r2,24(sp)
    f908:	003e6906 	br	f2b0 <__alt_data_end+0xf000f2b0>

0000f90c <__sflush_r>:
    f90c:	2880030b 	ldhu	r2,12(r5)
    f910:	defffb04 	addi	sp,sp,-20
    f914:	dcc00315 	stw	r19,12(sp)
    f918:	dc400115 	stw	r17,4(sp)
    f91c:	dfc00415 	stw	ra,16(sp)
    f920:	dc800215 	stw	r18,8(sp)
    f924:	dc000015 	stw	r16,0(sp)
    f928:	10c0020c 	andi	r3,r2,8
    f92c:	2823883a 	mov	r17,r5
    f930:	2027883a 	mov	r19,r4
    f934:	1800311e 	bne	r3,zero,f9fc <__sflush_r+0xf0>
    f938:	28c00117 	ldw	r3,4(r5)
    f93c:	10820014 	ori	r2,r2,2048
    f940:	2880030d 	sth	r2,12(r5)
    f944:	00c04b0e 	bge	zero,r3,fa74 <__sflush_r+0x168>
    f948:	8a000a17 	ldw	r8,40(r17)
    f94c:	40002326 	beq	r8,zero,f9dc <__sflush_r+0xd0>
    f950:	9c000017 	ldw	r16,0(r19)
    f954:	10c4000c 	andi	r3,r2,4096
    f958:	98000015 	stw	zero,0(r19)
    f95c:	18004826 	beq	r3,zero,fa80 <__sflush_r+0x174>
    f960:	89801417 	ldw	r6,80(r17)
    f964:	10c0010c 	andi	r3,r2,4
    f968:	18000626 	beq	r3,zero,f984 <__sflush_r+0x78>
    f96c:	88c00117 	ldw	r3,4(r17)
    f970:	88800c17 	ldw	r2,48(r17)
    f974:	30cdc83a 	sub	r6,r6,r3
    f978:	10000226 	beq	r2,zero,f984 <__sflush_r+0x78>
    f97c:	88800f17 	ldw	r2,60(r17)
    f980:	308dc83a 	sub	r6,r6,r2
    f984:	89400717 	ldw	r5,28(r17)
    f988:	000f883a 	mov	r7,zero
    f98c:	9809883a 	mov	r4,r19
    f990:	403ee83a 	callr	r8
    f994:	00ffffc4 	movi	r3,-1
    f998:	10c04426 	beq	r2,r3,faac <__sflush_r+0x1a0>
    f99c:	88c0030b 	ldhu	r3,12(r17)
    f9a0:	89000417 	ldw	r4,16(r17)
    f9a4:	88000115 	stw	zero,4(r17)
    f9a8:	197dffcc 	andi	r5,r3,63487
    f9ac:	8940030d 	sth	r5,12(r17)
    f9b0:	89000015 	stw	r4,0(r17)
    f9b4:	18c4000c 	andi	r3,r3,4096
    f9b8:	18002c1e 	bne	r3,zero,fa6c <__sflush_r+0x160>
    f9bc:	89400c17 	ldw	r5,48(r17)
    f9c0:	9c000015 	stw	r16,0(r19)
    f9c4:	28000526 	beq	r5,zero,f9dc <__sflush_r+0xd0>
    f9c8:	88801004 	addi	r2,r17,64
    f9cc:	28800226 	beq	r5,r2,f9d8 <__sflush_r+0xcc>
    f9d0:	9809883a 	mov	r4,r19
    f9d4:	00100780 	call	10078 <_free_r>
    f9d8:	88000c15 	stw	zero,48(r17)
    f9dc:	0005883a 	mov	r2,zero
    f9e0:	dfc00417 	ldw	ra,16(sp)
    f9e4:	dcc00317 	ldw	r19,12(sp)
    f9e8:	dc800217 	ldw	r18,8(sp)
    f9ec:	dc400117 	ldw	r17,4(sp)
    f9f0:	dc000017 	ldw	r16,0(sp)
    f9f4:	dec00504 	addi	sp,sp,20
    f9f8:	f800283a 	ret
    f9fc:	2c800417 	ldw	r18,16(r5)
    fa00:	903ff626 	beq	r18,zero,f9dc <__alt_data_end+0xf000f9dc>
    fa04:	2c000017 	ldw	r16,0(r5)
    fa08:	108000cc 	andi	r2,r2,3
    fa0c:	2c800015 	stw	r18,0(r5)
    fa10:	84a1c83a 	sub	r16,r16,r18
    fa14:	1000131e 	bne	r2,zero,fa64 <__sflush_r+0x158>
    fa18:	28800517 	ldw	r2,20(r5)
    fa1c:	88800215 	stw	r2,8(r17)
    fa20:	04000316 	blt	zero,r16,fa30 <__sflush_r+0x124>
    fa24:	003fed06 	br	f9dc <__alt_data_end+0xf000f9dc>
    fa28:	90a5883a 	add	r18,r18,r2
    fa2c:	043feb0e 	bge	zero,r16,f9dc <__alt_data_end+0xf000f9dc>
    fa30:	88800917 	ldw	r2,36(r17)
    fa34:	89400717 	ldw	r5,28(r17)
    fa38:	800f883a 	mov	r7,r16
    fa3c:	900d883a 	mov	r6,r18
    fa40:	9809883a 	mov	r4,r19
    fa44:	103ee83a 	callr	r2
    fa48:	80a1c83a 	sub	r16,r16,r2
    fa4c:	00bff616 	blt	zero,r2,fa28 <__alt_data_end+0xf000fa28>
    fa50:	88c0030b 	ldhu	r3,12(r17)
    fa54:	00bfffc4 	movi	r2,-1
    fa58:	18c01014 	ori	r3,r3,64
    fa5c:	88c0030d 	sth	r3,12(r17)
    fa60:	003fdf06 	br	f9e0 <__alt_data_end+0xf000f9e0>
    fa64:	0005883a 	mov	r2,zero
    fa68:	003fec06 	br	fa1c <__alt_data_end+0xf000fa1c>
    fa6c:	88801415 	stw	r2,80(r17)
    fa70:	003fd206 	br	f9bc <__alt_data_end+0xf000f9bc>
    fa74:	28c00f17 	ldw	r3,60(r5)
    fa78:	00ffb316 	blt	zero,r3,f948 <__alt_data_end+0xf000f948>
    fa7c:	003fd706 	br	f9dc <__alt_data_end+0xf000f9dc>
    fa80:	89400717 	ldw	r5,28(r17)
    fa84:	000d883a 	mov	r6,zero
    fa88:	01c00044 	movi	r7,1
    fa8c:	9809883a 	mov	r4,r19
    fa90:	403ee83a 	callr	r8
    fa94:	100d883a 	mov	r6,r2
    fa98:	00bfffc4 	movi	r2,-1
    fa9c:	30801426 	beq	r6,r2,faf0 <__sflush_r+0x1e4>
    faa0:	8880030b 	ldhu	r2,12(r17)
    faa4:	8a000a17 	ldw	r8,40(r17)
    faa8:	003fae06 	br	f964 <__alt_data_end+0xf000f964>
    faac:	98c00017 	ldw	r3,0(r19)
    fab0:	183fba26 	beq	r3,zero,f99c <__alt_data_end+0xf000f99c>
    fab4:	01000744 	movi	r4,29
    fab8:	19000626 	beq	r3,r4,fad4 <__sflush_r+0x1c8>
    fabc:	01000584 	movi	r4,22
    fac0:	19000426 	beq	r3,r4,fad4 <__sflush_r+0x1c8>
    fac4:	88c0030b 	ldhu	r3,12(r17)
    fac8:	18c01014 	ori	r3,r3,64
    facc:	88c0030d 	sth	r3,12(r17)
    fad0:	003fc306 	br	f9e0 <__alt_data_end+0xf000f9e0>
    fad4:	8880030b 	ldhu	r2,12(r17)
    fad8:	88c00417 	ldw	r3,16(r17)
    fadc:	88000115 	stw	zero,4(r17)
    fae0:	10bdffcc 	andi	r2,r2,63487
    fae4:	8880030d 	sth	r2,12(r17)
    fae8:	88c00015 	stw	r3,0(r17)
    faec:	003fb306 	br	f9bc <__alt_data_end+0xf000f9bc>
    faf0:	98800017 	ldw	r2,0(r19)
    faf4:	103fea26 	beq	r2,zero,faa0 <__alt_data_end+0xf000faa0>
    faf8:	00c00744 	movi	r3,29
    fafc:	10c00226 	beq	r2,r3,fb08 <__sflush_r+0x1fc>
    fb00:	00c00584 	movi	r3,22
    fb04:	10c0031e 	bne	r2,r3,fb14 <__sflush_r+0x208>
    fb08:	9c000015 	stw	r16,0(r19)
    fb0c:	0005883a 	mov	r2,zero
    fb10:	003fb306 	br	f9e0 <__alt_data_end+0xf000f9e0>
    fb14:	88c0030b 	ldhu	r3,12(r17)
    fb18:	3005883a 	mov	r2,r6
    fb1c:	18c01014 	ori	r3,r3,64
    fb20:	88c0030d 	sth	r3,12(r17)
    fb24:	003fae06 	br	f9e0 <__alt_data_end+0xf000f9e0>

0000fb28 <_fflush_r>:
    fb28:	defffd04 	addi	sp,sp,-12
    fb2c:	dc000115 	stw	r16,4(sp)
    fb30:	dfc00215 	stw	ra,8(sp)
    fb34:	2021883a 	mov	r16,r4
    fb38:	20000226 	beq	r4,zero,fb44 <_fflush_r+0x1c>
    fb3c:	20800e17 	ldw	r2,56(r4)
    fb40:	10000c26 	beq	r2,zero,fb74 <_fflush_r+0x4c>
    fb44:	2880030f 	ldh	r2,12(r5)
    fb48:	1000051e 	bne	r2,zero,fb60 <_fflush_r+0x38>
    fb4c:	0005883a 	mov	r2,zero
    fb50:	dfc00217 	ldw	ra,8(sp)
    fb54:	dc000117 	ldw	r16,4(sp)
    fb58:	dec00304 	addi	sp,sp,12
    fb5c:	f800283a 	ret
    fb60:	8009883a 	mov	r4,r16
    fb64:	dfc00217 	ldw	ra,8(sp)
    fb68:	dc000117 	ldw	r16,4(sp)
    fb6c:	dec00304 	addi	sp,sp,12
    fb70:	000f90c1 	jmpi	f90c <__sflush_r>
    fb74:	d9400015 	stw	r5,0(sp)
    fb78:	000ff040 	call	ff04 <__sinit>
    fb7c:	d9400017 	ldw	r5,0(sp)
    fb80:	003ff006 	br	fb44 <__alt_data_end+0xf000fb44>

0000fb84 <fflush>:
    fb84:	20000526 	beq	r4,zero,fb9c <fflush+0x18>
    fb88:	00820034 	movhi	r2,2048
    fb8c:	108b1004 	addi	r2,r2,11328
    fb90:	200b883a 	mov	r5,r4
    fb94:	11000017 	ldw	r4,0(r2)
    fb98:	000fb281 	jmpi	fb28 <_fflush_r>
    fb9c:	00820034 	movhi	r2,2048
    fba0:	108b0f04 	addi	r2,r2,11324
    fba4:	11000017 	ldw	r4,0(r2)
    fba8:	01400074 	movhi	r5,1
    fbac:	297eca04 	addi	r5,r5,-1240
    fbb0:	00109081 	jmpi	10908 <_fwalk_reent>

0000fbb4 <__fp_unlock>:
    fbb4:	0005883a 	mov	r2,zero
    fbb8:	f800283a 	ret

0000fbbc <_cleanup_r>:
    fbbc:	01400074 	movhi	r5,1
    fbc0:	2956af04 	addi	r5,r5,23228
    fbc4:	00109081 	jmpi	10908 <_fwalk_reent>

0000fbc8 <__sinit.part.1>:
    fbc8:	defff704 	addi	sp,sp,-36
    fbcc:	00c00074 	movhi	r3,1
    fbd0:	dfc00815 	stw	ra,32(sp)
    fbd4:	ddc00715 	stw	r23,28(sp)
    fbd8:	dd800615 	stw	r22,24(sp)
    fbdc:	dd400515 	stw	r21,20(sp)
    fbe0:	dd000415 	stw	r20,16(sp)
    fbe4:	dcc00315 	stw	r19,12(sp)
    fbe8:	dc800215 	stw	r18,8(sp)
    fbec:	dc400115 	stw	r17,4(sp)
    fbf0:	dc000015 	stw	r16,0(sp)
    fbf4:	18feef04 	addi	r3,r3,-1092
    fbf8:	24000117 	ldw	r16,4(r4)
    fbfc:	20c00f15 	stw	r3,60(r4)
    fc00:	2080bb04 	addi	r2,r4,748
    fc04:	00c000c4 	movi	r3,3
    fc08:	20c0b915 	stw	r3,740(r4)
    fc0c:	2080ba15 	stw	r2,744(r4)
    fc10:	2000b815 	stw	zero,736(r4)
    fc14:	05c00204 	movi	r23,8
    fc18:	00800104 	movi	r2,4
    fc1c:	2025883a 	mov	r18,r4
    fc20:	b80d883a 	mov	r6,r23
    fc24:	81001704 	addi	r4,r16,92
    fc28:	000b883a 	mov	r5,zero
    fc2c:	80000015 	stw	zero,0(r16)
    fc30:	80000115 	stw	zero,4(r16)
    fc34:	80000215 	stw	zero,8(r16)
    fc38:	8080030d 	sth	r2,12(r16)
    fc3c:	80001915 	stw	zero,100(r16)
    fc40:	8000038d 	sth	zero,14(r16)
    fc44:	80000415 	stw	zero,16(r16)
    fc48:	80000515 	stw	zero,20(r16)
    fc4c:	80000615 	stw	zero,24(r16)
    fc50:	00096c40 	call	96c4 <memset>
    fc54:	05800074 	movhi	r22,1
    fc58:	94400217 	ldw	r17,8(r18)
    fc5c:	05400074 	movhi	r21,1
    fc60:	05000074 	movhi	r20,1
    fc64:	04c00074 	movhi	r19,1
    fc68:	b58b3604 	addi	r22,r22,11480
    fc6c:	ad4b4d04 	addi	r21,r21,11572
    fc70:	a50b6c04 	addi	r20,r20,11696
    fc74:	9ccb8304 	addi	r19,r19,11788
    fc78:	85800815 	stw	r22,32(r16)
    fc7c:	85400915 	stw	r21,36(r16)
    fc80:	85000a15 	stw	r20,40(r16)
    fc84:	84c00b15 	stw	r19,44(r16)
    fc88:	84000715 	stw	r16,28(r16)
    fc8c:	00800284 	movi	r2,10
    fc90:	8880030d 	sth	r2,12(r17)
    fc94:	00800044 	movi	r2,1
    fc98:	b80d883a 	mov	r6,r23
    fc9c:	89001704 	addi	r4,r17,92
    fca0:	000b883a 	mov	r5,zero
    fca4:	88000015 	stw	zero,0(r17)
    fca8:	88000115 	stw	zero,4(r17)
    fcac:	88000215 	stw	zero,8(r17)
    fcb0:	88001915 	stw	zero,100(r17)
    fcb4:	8880038d 	sth	r2,14(r17)
    fcb8:	88000415 	stw	zero,16(r17)
    fcbc:	88000515 	stw	zero,20(r17)
    fcc0:	88000615 	stw	zero,24(r17)
    fcc4:	00096c40 	call	96c4 <memset>
    fcc8:	94000317 	ldw	r16,12(r18)
    fccc:	00800484 	movi	r2,18
    fcd0:	8c400715 	stw	r17,28(r17)
    fcd4:	8d800815 	stw	r22,32(r17)
    fcd8:	8d400915 	stw	r21,36(r17)
    fcdc:	8d000a15 	stw	r20,40(r17)
    fce0:	8cc00b15 	stw	r19,44(r17)
    fce4:	8080030d 	sth	r2,12(r16)
    fce8:	00800084 	movi	r2,2
    fcec:	80000015 	stw	zero,0(r16)
    fcf0:	80000115 	stw	zero,4(r16)
    fcf4:	80000215 	stw	zero,8(r16)
    fcf8:	80001915 	stw	zero,100(r16)
    fcfc:	8080038d 	sth	r2,14(r16)
    fd00:	80000415 	stw	zero,16(r16)
    fd04:	80000515 	stw	zero,20(r16)
    fd08:	80000615 	stw	zero,24(r16)
    fd0c:	b80d883a 	mov	r6,r23
    fd10:	000b883a 	mov	r5,zero
    fd14:	81001704 	addi	r4,r16,92
    fd18:	00096c40 	call	96c4 <memset>
    fd1c:	00800044 	movi	r2,1
    fd20:	84000715 	stw	r16,28(r16)
    fd24:	85800815 	stw	r22,32(r16)
    fd28:	85400915 	stw	r21,36(r16)
    fd2c:	85000a15 	stw	r20,40(r16)
    fd30:	84c00b15 	stw	r19,44(r16)
    fd34:	90800e15 	stw	r2,56(r18)
    fd38:	dfc00817 	ldw	ra,32(sp)
    fd3c:	ddc00717 	ldw	r23,28(sp)
    fd40:	dd800617 	ldw	r22,24(sp)
    fd44:	dd400517 	ldw	r21,20(sp)
    fd48:	dd000417 	ldw	r20,16(sp)
    fd4c:	dcc00317 	ldw	r19,12(sp)
    fd50:	dc800217 	ldw	r18,8(sp)
    fd54:	dc400117 	ldw	r17,4(sp)
    fd58:	dc000017 	ldw	r16,0(sp)
    fd5c:	dec00904 	addi	sp,sp,36
    fd60:	f800283a 	ret

0000fd64 <__fp_lock>:
    fd64:	0005883a 	mov	r2,zero
    fd68:	f800283a 	ret

0000fd6c <__sfmoreglue>:
    fd6c:	defffc04 	addi	sp,sp,-16
    fd70:	dc400115 	stw	r17,4(sp)
    fd74:	2c7fffc4 	addi	r17,r5,-1
    fd78:	8c401a24 	muli	r17,r17,104
    fd7c:	dc800215 	stw	r18,8(sp)
    fd80:	2825883a 	mov	r18,r5
    fd84:	89401d04 	addi	r5,r17,116
    fd88:	dc000015 	stw	r16,0(sp)
    fd8c:	dfc00315 	stw	ra,12(sp)
    fd90:	0010c640 	call	10c64 <_malloc_r>
    fd94:	1021883a 	mov	r16,r2
    fd98:	10000726 	beq	r2,zero,fdb8 <__sfmoreglue+0x4c>
    fd9c:	11000304 	addi	r4,r2,12
    fda0:	10000015 	stw	zero,0(r2)
    fda4:	14800115 	stw	r18,4(r2)
    fda8:	11000215 	stw	r4,8(r2)
    fdac:	89801a04 	addi	r6,r17,104
    fdb0:	000b883a 	mov	r5,zero
    fdb4:	00096c40 	call	96c4 <memset>
    fdb8:	8005883a 	mov	r2,r16
    fdbc:	dfc00317 	ldw	ra,12(sp)
    fdc0:	dc800217 	ldw	r18,8(sp)
    fdc4:	dc400117 	ldw	r17,4(sp)
    fdc8:	dc000017 	ldw	r16,0(sp)
    fdcc:	dec00404 	addi	sp,sp,16
    fdd0:	f800283a 	ret

0000fdd4 <__sfp>:
    fdd4:	defffb04 	addi	sp,sp,-20
    fdd8:	dc000015 	stw	r16,0(sp)
    fddc:	04020034 	movhi	r16,2048
    fde0:	840b0f04 	addi	r16,r16,11324
    fde4:	dcc00315 	stw	r19,12(sp)
    fde8:	2027883a 	mov	r19,r4
    fdec:	81000017 	ldw	r4,0(r16)
    fdf0:	dfc00415 	stw	ra,16(sp)
    fdf4:	dc800215 	stw	r18,8(sp)
    fdf8:	20800e17 	ldw	r2,56(r4)
    fdfc:	dc400115 	stw	r17,4(sp)
    fe00:	1000021e 	bne	r2,zero,fe0c <__sfp+0x38>
    fe04:	000fbc80 	call	fbc8 <__sinit.part.1>
    fe08:	81000017 	ldw	r4,0(r16)
    fe0c:	2480b804 	addi	r18,r4,736
    fe10:	047fffc4 	movi	r17,-1
    fe14:	91000117 	ldw	r4,4(r18)
    fe18:	94000217 	ldw	r16,8(r18)
    fe1c:	213fffc4 	addi	r4,r4,-1
    fe20:	20000a16 	blt	r4,zero,fe4c <__sfp+0x78>
    fe24:	8080030f 	ldh	r2,12(r16)
    fe28:	10000c26 	beq	r2,zero,fe5c <__sfp+0x88>
    fe2c:	80c01d04 	addi	r3,r16,116
    fe30:	00000206 	br	fe3c <__sfp+0x68>
    fe34:	18bfe60f 	ldh	r2,-104(r3)
    fe38:	10000826 	beq	r2,zero,fe5c <__sfp+0x88>
    fe3c:	213fffc4 	addi	r4,r4,-1
    fe40:	1c3ffd04 	addi	r16,r3,-12
    fe44:	18c01a04 	addi	r3,r3,104
    fe48:	247ffa1e 	bne	r4,r17,fe34 <__alt_data_end+0xf000fe34>
    fe4c:	90800017 	ldw	r2,0(r18)
    fe50:	10001d26 	beq	r2,zero,fec8 <__sfp+0xf4>
    fe54:	1025883a 	mov	r18,r2
    fe58:	003fee06 	br	fe14 <__alt_data_end+0xf000fe14>
    fe5c:	00bfffc4 	movi	r2,-1
    fe60:	8080038d 	sth	r2,14(r16)
    fe64:	00800044 	movi	r2,1
    fe68:	8080030d 	sth	r2,12(r16)
    fe6c:	80001915 	stw	zero,100(r16)
    fe70:	80000015 	stw	zero,0(r16)
    fe74:	80000215 	stw	zero,8(r16)
    fe78:	80000115 	stw	zero,4(r16)
    fe7c:	80000415 	stw	zero,16(r16)
    fe80:	80000515 	stw	zero,20(r16)
    fe84:	80000615 	stw	zero,24(r16)
    fe88:	01800204 	movi	r6,8
    fe8c:	000b883a 	mov	r5,zero
    fe90:	81001704 	addi	r4,r16,92
    fe94:	00096c40 	call	96c4 <memset>
    fe98:	8005883a 	mov	r2,r16
    fe9c:	80000c15 	stw	zero,48(r16)
    fea0:	80000d15 	stw	zero,52(r16)
    fea4:	80001115 	stw	zero,68(r16)
    fea8:	80001215 	stw	zero,72(r16)
    feac:	dfc00417 	ldw	ra,16(sp)
    feb0:	dcc00317 	ldw	r19,12(sp)
    feb4:	dc800217 	ldw	r18,8(sp)
    feb8:	dc400117 	ldw	r17,4(sp)
    febc:	dc000017 	ldw	r16,0(sp)
    fec0:	dec00504 	addi	sp,sp,20
    fec4:	f800283a 	ret
    fec8:	01400104 	movi	r5,4
    fecc:	9809883a 	mov	r4,r19
    fed0:	000fd6c0 	call	fd6c <__sfmoreglue>
    fed4:	90800015 	stw	r2,0(r18)
    fed8:	103fde1e 	bne	r2,zero,fe54 <__alt_data_end+0xf000fe54>
    fedc:	00800304 	movi	r2,12
    fee0:	98800015 	stw	r2,0(r19)
    fee4:	0005883a 	mov	r2,zero
    fee8:	003ff006 	br	feac <__alt_data_end+0xf000feac>

0000feec <_cleanup>:
    feec:	00820034 	movhi	r2,2048
    fef0:	108b0f04 	addi	r2,r2,11324
    fef4:	11000017 	ldw	r4,0(r2)
    fef8:	01400074 	movhi	r5,1
    fefc:	2956af04 	addi	r5,r5,23228
    ff00:	00109081 	jmpi	10908 <_fwalk_reent>

0000ff04 <__sinit>:
    ff04:	20800e17 	ldw	r2,56(r4)
    ff08:	10000126 	beq	r2,zero,ff10 <__sinit+0xc>
    ff0c:	f800283a 	ret
    ff10:	000fbc81 	jmpi	fbc8 <__sinit.part.1>

0000ff14 <__sfp_lock_acquire>:
    ff14:	f800283a 	ret

0000ff18 <__sfp_lock_release>:
    ff18:	f800283a 	ret

0000ff1c <__sinit_lock_acquire>:
    ff1c:	f800283a 	ret

0000ff20 <__sinit_lock_release>:
    ff20:	f800283a 	ret

0000ff24 <__fp_lock_all>:
    ff24:	00820034 	movhi	r2,2048
    ff28:	108b1004 	addi	r2,r2,11328
    ff2c:	11000017 	ldw	r4,0(r2)
    ff30:	01400074 	movhi	r5,1
    ff34:	297f5904 	addi	r5,r5,-668
    ff38:	00108441 	jmpi	10844 <_fwalk>

0000ff3c <__fp_unlock_all>:
    ff3c:	00820034 	movhi	r2,2048
    ff40:	108b1004 	addi	r2,r2,11328
    ff44:	11000017 	ldw	r4,0(r2)
    ff48:	01400074 	movhi	r5,1
    ff4c:	297eed04 	addi	r5,r5,-1100
    ff50:	00108441 	jmpi	10844 <_fwalk>

0000ff54 <_malloc_trim_r>:
    ff54:	defffb04 	addi	sp,sp,-20
    ff58:	dcc00315 	stw	r19,12(sp)
    ff5c:	04c20034 	movhi	r19,2048
    ff60:	dc800215 	stw	r18,8(sp)
    ff64:	dc400115 	stw	r17,4(sp)
    ff68:	dc000015 	stw	r16,0(sp)
    ff6c:	dfc00415 	stw	ra,16(sp)
    ff70:	2821883a 	mov	r16,r5
    ff74:	9cc3ef04 	addi	r19,r19,4028
    ff78:	2025883a 	mov	r18,r4
    ff7c:	0017c880 	call	17c88 <__malloc_lock>
    ff80:	98800217 	ldw	r2,8(r19)
    ff84:	14400117 	ldw	r17,4(r2)
    ff88:	00bfff04 	movi	r2,-4
    ff8c:	88a2703a 	and	r17,r17,r2
    ff90:	8c21c83a 	sub	r16,r17,r16
    ff94:	8403fbc4 	addi	r16,r16,4079
    ff98:	8020d33a 	srli	r16,r16,12
    ff9c:	0083ffc4 	movi	r2,4095
    ffa0:	843fffc4 	addi	r16,r16,-1
    ffa4:	8020933a 	slli	r16,r16,12
    ffa8:	1400060e 	bge	r2,r16,ffc4 <_malloc_trim_r+0x70>
    ffac:	000b883a 	mov	r5,zero
    ffb0:	9009883a 	mov	r4,r18
    ffb4:	0012c840 	call	12c84 <_sbrk_r>
    ffb8:	98c00217 	ldw	r3,8(r19)
    ffbc:	1c47883a 	add	r3,r3,r17
    ffc0:	10c00a26 	beq	r2,r3,ffec <_malloc_trim_r+0x98>
    ffc4:	9009883a 	mov	r4,r18
    ffc8:	0017cac0 	call	17cac <__malloc_unlock>
    ffcc:	0005883a 	mov	r2,zero
    ffd0:	dfc00417 	ldw	ra,16(sp)
    ffd4:	dcc00317 	ldw	r19,12(sp)
    ffd8:	dc800217 	ldw	r18,8(sp)
    ffdc:	dc400117 	ldw	r17,4(sp)
    ffe0:	dc000017 	ldw	r16,0(sp)
    ffe4:	dec00504 	addi	sp,sp,20
    ffe8:	f800283a 	ret
    ffec:	040bc83a 	sub	r5,zero,r16
    fff0:	9009883a 	mov	r4,r18
    fff4:	0012c840 	call	12c84 <_sbrk_r>
    fff8:	00ffffc4 	movi	r3,-1
    fffc:	10c00d26 	beq	r2,r3,10034 <_malloc_trim_r+0xe0>
   10000:	00c20234 	movhi	r3,2056
   10004:	18ffd904 	addi	r3,r3,-156
   10008:	18800017 	ldw	r2,0(r3)
   1000c:	99000217 	ldw	r4,8(r19)
   10010:	8c23c83a 	sub	r17,r17,r16
   10014:	8c400054 	ori	r17,r17,1
   10018:	1421c83a 	sub	r16,r2,r16
   1001c:	24400115 	stw	r17,4(r4)
   10020:	9009883a 	mov	r4,r18
   10024:	1c000015 	stw	r16,0(r3)
   10028:	0017cac0 	call	17cac <__malloc_unlock>
   1002c:	00800044 	movi	r2,1
   10030:	003fe706 	br	ffd0 <__alt_data_end+0xf000ffd0>
   10034:	000b883a 	mov	r5,zero
   10038:	9009883a 	mov	r4,r18
   1003c:	0012c840 	call	12c84 <_sbrk_r>
   10040:	99000217 	ldw	r4,8(r19)
   10044:	014003c4 	movi	r5,15
   10048:	1107c83a 	sub	r3,r2,r4
   1004c:	28ffdd0e 	bge	r5,r3,ffc4 <__alt_data_end+0xf000ffc4>
   10050:	01420034 	movhi	r5,2048
   10054:	294b1204 	addi	r5,r5,11336
   10058:	29400017 	ldw	r5,0(r5)
   1005c:	18c00054 	ori	r3,r3,1
   10060:	20c00115 	stw	r3,4(r4)
   10064:	00c20234 	movhi	r3,2056
   10068:	1145c83a 	sub	r2,r2,r5
   1006c:	18ffd904 	addi	r3,r3,-156
   10070:	18800015 	stw	r2,0(r3)
   10074:	003fd306 	br	ffc4 <__alt_data_end+0xf000ffc4>

00010078 <_free_r>:
   10078:	28004126 	beq	r5,zero,10180 <_free_r+0x108>
   1007c:	defffd04 	addi	sp,sp,-12
   10080:	dc400115 	stw	r17,4(sp)
   10084:	dc000015 	stw	r16,0(sp)
   10088:	2023883a 	mov	r17,r4
   1008c:	2821883a 	mov	r16,r5
   10090:	dfc00215 	stw	ra,8(sp)
   10094:	0017c880 	call	17c88 <__malloc_lock>
   10098:	81ffff17 	ldw	r7,-4(r16)
   1009c:	00bfff84 	movi	r2,-2
   100a0:	01020034 	movhi	r4,2048
   100a4:	81bffe04 	addi	r6,r16,-8
   100a8:	3884703a 	and	r2,r7,r2
   100ac:	2103ef04 	addi	r4,r4,4028
   100b0:	308b883a 	add	r5,r6,r2
   100b4:	2a400117 	ldw	r9,4(r5)
   100b8:	22000217 	ldw	r8,8(r4)
   100bc:	00ffff04 	movi	r3,-4
   100c0:	48c6703a 	and	r3,r9,r3
   100c4:	2a005726 	beq	r5,r8,10224 <_free_r+0x1ac>
   100c8:	28c00115 	stw	r3,4(r5)
   100cc:	39c0004c 	andi	r7,r7,1
   100d0:	3800091e 	bne	r7,zero,100f8 <_free_r+0x80>
   100d4:	823ffe17 	ldw	r8,-8(r16)
   100d8:	22400204 	addi	r9,r4,8
   100dc:	320dc83a 	sub	r6,r6,r8
   100e0:	31c00217 	ldw	r7,8(r6)
   100e4:	1205883a 	add	r2,r2,r8
   100e8:	3a406526 	beq	r7,r9,10280 <_free_r+0x208>
   100ec:	32000317 	ldw	r8,12(r6)
   100f0:	3a000315 	stw	r8,12(r7)
   100f4:	41c00215 	stw	r7,8(r8)
   100f8:	28cf883a 	add	r7,r5,r3
   100fc:	39c00117 	ldw	r7,4(r7)
   10100:	39c0004c 	andi	r7,r7,1
   10104:	38003a26 	beq	r7,zero,101f0 <_free_r+0x178>
   10108:	10c00054 	ori	r3,r2,1
   1010c:	30c00115 	stw	r3,4(r6)
   10110:	3087883a 	add	r3,r6,r2
   10114:	18800015 	stw	r2,0(r3)
   10118:	00c07fc4 	movi	r3,511
   1011c:	18801936 	bltu	r3,r2,10184 <_free_r+0x10c>
   10120:	1004d0fa 	srli	r2,r2,3
   10124:	01c00044 	movi	r7,1
   10128:	21400117 	ldw	r5,4(r4)
   1012c:	10c00044 	addi	r3,r2,1
   10130:	18c7883a 	add	r3,r3,r3
   10134:	1005d0ba 	srai	r2,r2,2
   10138:	18c7883a 	add	r3,r3,r3
   1013c:	18c7883a 	add	r3,r3,r3
   10140:	1907883a 	add	r3,r3,r4
   10144:	3884983a 	sll	r2,r7,r2
   10148:	19c00017 	ldw	r7,0(r3)
   1014c:	1a3ffe04 	addi	r8,r3,-8
   10150:	1144b03a 	or	r2,r2,r5
   10154:	32000315 	stw	r8,12(r6)
   10158:	31c00215 	stw	r7,8(r6)
   1015c:	20800115 	stw	r2,4(r4)
   10160:	19800015 	stw	r6,0(r3)
   10164:	39800315 	stw	r6,12(r7)
   10168:	8809883a 	mov	r4,r17
   1016c:	dfc00217 	ldw	ra,8(sp)
   10170:	dc400117 	ldw	r17,4(sp)
   10174:	dc000017 	ldw	r16,0(sp)
   10178:	dec00304 	addi	sp,sp,12
   1017c:	0017cac1 	jmpi	17cac <__malloc_unlock>
   10180:	f800283a 	ret
   10184:	100ad27a 	srli	r5,r2,9
   10188:	00c00104 	movi	r3,4
   1018c:	19404a36 	bltu	r3,r5,102b8 <_free_r+0x240>
   10190:	100ad1ba 	srli	r5,r2,6
   10194:	28c00e44 	addi	r3,r5,57
   10198:	18c7883a 	add	r3,r3,r3
   1019c:	29400e04 	addi	r5,r5,56
   101a0:	18c7883a 	add	r3,r3,r3
   101a4:	18c7883a 	add	r3,r3,r3
   101a8:	1909883a 	add	r4,r3,r4
   101ac:	20c00017 	ldw	r3,0(r4)
   101b0:	01c20034 	movhi	r7,2048
   101b4:	213ffe04 	addi	r4,r4,-8
   101b8:	39c3ef04 	addi	r7,r7,4028
   101bc:	20c04426 	beq	r4,r3,102d0 <_free_r+0x258>
   101c0:	01ffff04 	movi	r7,-4
   101c4:	19400117 	ldw	r5,4(r3)
   101c8:	29ca703a 	and	r5,r5,r7
   101cc:	1140022e 	bgeu	r2,r5,101d8 <_free_r+0x160>
   101d0:	18c00217 	ldw	r3,8(r3)
   101d4:	20fffb1e 	bne	r4,r3,101c4 <__alt_data_end+0xf00101c4>
   101d8:	19000317 	ldw	r4,12(r3)
   101dc:	31000315 	stw	r4,12(r6)
   101e0:	30c00215 	stw	r3,8(r6)
   101e4:	21800215 	stw	r6,8(r4)
   101e8:	19800315 	stw	r6,12(r3)
   101ec:	003fde06 	br	10168 <__alt_data_end+0xf0010168>
   101f0:	29c00217 	ldw	r7,8(r5)
   101f4:	10c5883a 	add	r2,r2,r3
   101f8:	00c20034 	movhi	r3,2048
   101fc:	18c3f104 	addi	r3,r3,4036
   10200:	38c03b26 	beq	r7,r3,102f0 <_free_r+0x278>
   10204:	2a000317 	ldw	r8,12(r5)
   10208:	11400054 	ori	r5,r2,1
   1020c:	3087883a 	add	r3,r6,r2
   10210:	3a000315 	stw	r8,12(r7)
   10214:	41c00215 	stw	r7,8(r8)
   10218:	31400115 	stw	r5,4(r6)
   1021c:	18800015 	stw	r2,0(r3)
   10220:	003fbd06 	br	10118 <__alt_data_end+0xf0010118>
   10224:	39c0004c 	andi	r7,r7,1
   10228:	10c5883a 	add	r2,r2,r3
   1022c:	3800071e 	bne	r7,zero,1024c <_free_r+0x1d4>
   10230:	81fffe17 	ldw	r7,-8(r16)
   10234:	31cdc83a 	sub	r6,r6,r7
   10238:	30c00317 	ldw	r3,12(r6)
   1023c:	31400217 	ldw	r5,8(r6)
   10240:	11c5883a 	add	r2,r2,r7
   10244:	28c00315 	stw	r3,12(r5)
   10248:	19400215 	stw	r5,8(r3)
   1024c:	10c00054 	ori	r3,r2,1
   10250:	30c00115 	stw	r3,4(r6)
   10254:	00c20034 	movhi	r3,2048
   10258:	18cb1304 	addi	r3,r3,11340
   1025c:	18c00017 	ldw	r3,0(r3)
   10260:	21800215 	stw	r6,8(r4)
   10264:	10ffc036 	bltu	r2,r3,10168 <__alt_data_end+0xf0010168>
   10268:	00820034 	movhi	r2,2048
   1026c:	108b5d04 	addi	r2,r2,11636
   10270:	11400017 	ldw	r5,0(r2)
   10274:	8809883a 	mov	r4,r17
   10278:	000ff540 	call	ff54 <_malloc_trim_r>
   1027c:	003fba06 	br	10168 <__alt_data_end+0xf0010168>
   10280:	28c9883a 	add	r4,r5,r3
   10284:	21000117 	ldw	r4,4(r4)
   10288:	2100004c 	andi	r4,r4,1
   1028c:	2000391e 	bne	r4,zero,10374 <_free_r+0x2fc>
   10290:	29c00217 	ldw	r7,8(r5)
   10294:	29000317 	ldw	r4,12(r5)
   10298:	1885883a 	add	r2,r3,r2
   1029c:	10c00054 	ori	r3,r2,1
   102a0:	39000315 	stw	r4,12(r7)
   102a4:	21c00215 	stw	r7,8(r4)
   102a8:	30c00115 	stw	r3,4(r6)
   102ac:	308d883a 	add	r6,r6,r2
   102b0:	30800015 	stw	r2,0(r6)
   102b4:	003fac06 	br	10168 <__alt_data_end+0xf0010168>
   102b8:	00c00504 	movi	r3,20
   102bc:	19401536 	bltu	r3,r5,10314 <_free_r+0x29c>
   102c0:	28c01704 	addi	r3,r5,92
   102c4:	18c7883a 	add	r3,r3,r3
   102c8:	294016c4 	addi	r5,r5,91
   102cc:	003fb406 	br	101a0 <__alt_data_end+0xf00101a0>
   102d0:	280bd0ba 	srai	r5,r5,2
   102d4:	00c00044 	movi	r3,1
   102d8:	38800117 	ldw	r2,4(r7)
   102dc:	194a983a 	sll	r5,r3,r5
   102e0:	2007883a 	mov	r3,r4
   102e4:	2884b03a 	or	r2,r5,r2
   102e8:	38800115 	stw	r2,4(r7)
   102ec:	003fbb06 	br	101dc <__alt_data_end+0xf00101dc>
   102f0:	21800515 	stw	r6,20(r4)
   102f4:	21800415 	stw	r6,16(r4)
   102f8:	10c00054 	ori	r3,r2,1
   102fc:	31c00315 	stw	r7,12(r6)
   10300:	31c00215 	stw	r7,8(r6)
   10304:	30c00115 	stw	r3,4(r6)
   10308:	308d883a 	add	r6,r6,r2
   1030c:	30800015 	stw	r2,0(r6)
   10310:	003f9506 	br	10168 <__alt_data_end+0xf0010168>
   10314:	00c01504 	movi	r3,84
   10318:	19400536 	bltu	r3,r5,10330 <_free_r+0x2b8>
   1031c:	100ad33a 	srli	r5,r2,12
   10320:	28c01bc4 	addi	r3,r5,111
   10324:	18c7883a 	add	r3,r3,r3
   10328:	29401b84 	addi	r5,r5,110
   1032c:	003f9c06 	br	101a0 <__alt_data_end+0xf00101a0>
   10330:	00c05504 	movi	r3,340
   10334:	19400536 	bltu	r3,r5,1034c <_free_r+0x2d4>
   10338:	100ad3fa 	srli	r5,r2,15
   1033c:	28c01e04 	addi	r3,r5,120
   10340:	18c7883a 	add	r3,r3,r3
   10344:	29401dc4 	addi	r5,r5,119
   10348:	003f9506 	br	101a0 <__alt_data_end+0xf00101a0>
   1034c:	00c15504 	movi	r3,1364
   10350:	19400536 	bltu	r3,r5,10368 <_free_r+0x2f0>
   10354:	100ad4ba 	srli	r5,r2,18
   10358:	28c01f44 	addi	r3,r5,125
   1035c:	18c7883a 	add	r3,r3,r3
   10360:	29401f04 	addi	r5,r5,124
   10364:	003f8e06 	br	101a0 <__alt_data_end+0xf00101a0>
   10368:	00c03f84 	movi	r3,254
   1036c:	01401f84 	movi	r5,126
   10370:	003f8b06 	br	101a0 <__alt_data_end+0xf00101a0>
   10374:	10c00054 	ori	r3,r2,1
   10378:	30c00115 	stw	r3,4(r6)
   1037c:	308d883a 	add	r6,r6,r2
   10380:	30800015 	stw	r2,0(r6)
   10384:	003f7806 	br	10168 <__alt_data_end+0xf0010168>

00010388 <__sfvwrite_r>:
   10388:	30800217 	ldw	r2,8(r6)
   1038c:	10006726 	beq	r2,zero,1052c <__sfvwrite_r+0x1a4>
   10390:	28c0030b 	ldhu	r3,12(r5)
   10394:	defff404 	addi	sp,sp,-48
   10398:	dd400715 	stw	r21,28(sp)
   1039c:	dd000615 	stw	r20,24(sp)
   103a0:	dc000215 	stw	r16,8(sp)
   103a4:	dfc00b15 	stw	ra,44(sp)
   103a8:	df000a15 	stw	fp,40(sp)
   103ac:	ddc00915 	stw	r23,36(sp)
   103b0:	dd800815 	stw	r22,32(sp)
   103b4:	dcc00515 	stw	r19,20(sp)
   103b8:	dc800415 	stw	r18,16(sp)
   103bc:	dc400315 	stw	r17,12(sp)
   103c0:	1880020c 	andi	r2,r3,8
   103c4:	2821883a 	mov	r16,r5
   103c8:	202b883a 	mov	r21,r4
   103cc:	3029883a 	mov	r20,r6
   103d0:	10002726 	beq	r2,zero,10470 <__sfvwrite_r+0xe8>
   103d4:	28800417 	ldw	r2,16(r5)
   103d8:	10002526 	beq	r2,zero,10470 <__sfvwrite_r+0xe8>
   103dc:	1880008c 	andi	r2,r3,2
   103e0:	a4400017 	ldw	r17,0(r20)
   103e4:	10002a26 	beq	r2,zero,10490 <__sfvwrite_r+0x108>
   103e8:	05a00034 	movhi	r22,32768
   103ec:	0027883a 	mov	r19,zero
   103f0:	0025883a 	mov	r18,zero
   103f4:	b5bf0004 	addi	r22,r22,-1024
   103f8:	980d883a 	mov	r6,r19
   103fc:	a809883a 	mov	r4,r21
   10400:	90004626 	beq	r18,zero,1051c <__sfvwrite_r+0x194>
   10404:	900f883a 	mov	r7,r18
   10408:	b480022e 	bgeu	r22,r18,10414 <__sfvwrite_r+0x8c>
   1040c:	01e00034 	movhi	r7,32768
   10410:	39ff0004 	addi	r7,r7,-1024
   10414:	80800917 	ldw	r2,36(r16)
   10418:	81400717 	ldw	r5,28(r16)
   1041c:	103ee83a 	callr	r2
   10420:	0080570e 	bge	zero,r2,10580 <__sfvwrite_r+0x1f8>
   10424:	a0c00217 	ldw	r3,8(r20)
   10428:	98a7883a 	add	r19,r19,r2
   1042c:	90a5c83a 	sub	r18,r18,r2
   10430:	1885c83a 	sub	r2,r3,r2
   10434:	a0800215 	stw	r2,8(r20)
   10438:	103fef1e 	bne	r2,zero,103f8 <__alt_data_end+0xf00103f8>
   1043c:	0005883a 	mov	r2,zero
   10440:	dfc00b17 	ldw	ra,44(sp)
   10444:	df000a17 	ldw	fp,40(sp)
   10448:	ddc00917 	ldw	r23,36(sp)
   1044c:	dd800817 	ldw	r22,32(sp)
   10450:	dd400717 	ldw	r21,28(sp)
   10454:	dd000617 	ldw	r20,24(sp)
   10458:	dcc00517 	ldw	r19,20(sp)
   1045c:	dc800417 	ldw	r18,16(sp)
   10460:	dc400317 	ldw	r17,12(sp)
   10464:	dc000217 	ldw	r16,8(sp)
   10468:	dec00c04 	addi	sp,sp,48
   1046c:	f800283a 	ret
   10470:	800b883a 	mov	r5,r16
   10474:	a809883a 	mov	r4,r21
   10478:	000df300 	call	df30 <__swsetup_r>
   1047c:	1000eb1e 	bne	r2,zero,1082c <__sfvwrite_r+0x4a4>
   10480:	80c0030b 	ldhu	r3,12(r16)
   10484:	a4400017 	ldw	r17,0(r20)
   10488:	1880008c 	andi	r2,r3,2
   1048c:	103fd61e 	bne	r2,zero,103e8 <__alt_data_end+0xf00103e8>
   10490:	1880004c 	andi	r2,r3,1
   10494:	10003f1e 	bne	r2,zero,10594 <__sfvwrite_r+0x20c>
   10498:	0039883a 	mov	fp,zero
   1049c:	0025883a 	mov	r18,zero
   104a0:	90001a26 	beq	r18,zero,1050c <__sfvwrite_r+0x184>
   104a4:	1880800c 	andi	r2,r3,512
   104a8:	84c00217 	ldw	r19,8(r16)
   104ac:	10002126 	beq	r2,zero,10534 <__sfvwrite_r+0x1ac>
   104b0:	982f883a 	mov	r23,r19
   104b4:	94c09336 	bltu	r18,r19,10704 <__sfvwrite_r+0x37c>
   104b8:	1881200c 	andi	r2,r3,1152
   104bc:	10009e1e 	bne	r2,zero,10738 <__sfvwrite_r+0x3b0>
   104c0:	81000017 	ldw	r4,0(r16)
   104c4:	b80d883a 	mov	r6,r23
   104c8:	e00b883a 	mov	r5,fp
   104cc:	00115540 	call	11554 <memmove>
   104d0:	80c00217 	ldw	r3,8(r16)
   104d4:	81000017 	ldw	r4,0(r16)
   104d8:	9005883a 	mov	r2,r18
   104dc:	1ce7c83a 	sub	r19,r3,r19
   104e0:	25cf883a 	add	r7,r4,r23
   104e4:	84c00215 	stw	r19,8(r16)
   104e8:	81c00015 	stw	r7,0(r16)
   104ec:	a0c00217 	ldw	r3,8(r20)
   104f0:	e0b9883a 	add	fp,fp,r2
   104f4:	90a5c83a 	sub	r18,r18,r2
   104f8:	18a7c83a 	sub	r19,r3,r2
   104fc:	a4c00215 	stw	r19,8(r20)
   10500:	983fce26 	beq	r19,zero,1043c <__alt_data_end+0xf001043c>
   10504:	80c0030b 	ldhu	r3,12(r16)
   10508:	903fe61e 	bne	r18,zero,104a4 <__alt_data_end+0xf00104a4>
   1050c:	8f000017 	ldw	fp,0(r17)
   10510:	8c800117 	ldw	r18,4(r17)
   10514:	8c400204 	addi	r17,r17,8
   10518:	003fe106 	br	104a0 <__alt_data_end+0xf00104a0>
   1051c:	8cc00017 	ldw	r19,0(r17)
   10520:	8c800117 	ldw	r18,4(r17)
   10524:	8c400204 	addi	r17,r17,8
   10528:	003fb306 	br	103f8 <__alt_data_end+0xf00103f8>
   1052c:	0005883a 	mov	r2,zero
   10530:	f800283a 	ret
   10534:	81000017 	ldw	r4,0(r16)
   10538:	80800417 	ldw	r2,16(r16)
   1053c:	11005736 	bltu	r2,r4,1069c <__sfvwrite_r+0x314>
   10540:	85c00517 	ldw	r23,20(r16)
   10544:	95c05536 	bltu	r18,r23,1069c <__sfvwrite_r+0x314>
   10548:	00a00034 	movhi	r2,32768
   1054c:	10bfffc4 	addi	r2,r2,-1
   10550:	9009883a 	mov	r4,r18
   10554:	1480012e 	bgeu	r2,r18,1055c <__sfvwrite_r+0x1d4>
   10558:	1009883a 	mov	r4,r2
   1055c:	b80b883a 	mov	r5,r23
   10560:	000934c0 	call	934c <__divsi3>
   10564:	15cf383a 	mul	r7,r2,r23
   10568:	81400717 	ldw	r5,28(r16)
   1056c:	80800917 	ldw	r2,36(r16)
   10570:	e00d883a 	mov	r6,fp
   10574:	a809883a 	mov	r4,r21
   10578:	103ee83a 	callr	r2
   1057c:	00bfdb16 	blt	zero,r2,104ec <__alt_data_end+0xf00104ec>
   10580:	8080030b 	ldhu	r2,12(r16)
   10584:	10801014 	ori	r2,r2,64
   10588:	8080030d 	sth	r2,12(r16)
   1058c:	00bfffc4 	movi	r2,-1
   10590:	003fab06 	br	10440 <__alt_data_end+0xf0010440>
   10594:	0027883a 	mov	r19,zero
   10598:	0011883a 	mov	r8,zero
   1059c:	0039883a 	mov	fp,zero
   105a0:	0025883a 	mov	r18,zero
   105a4:	90001f26 	beq	r18,zero,10624 <__sfvwrite_r+0x29c>
   105a8:	40005a26 	beq	r8,zero,10714 <__sfvwrite_r+0x38c>
   105ac:	982d883a 	mov	r22,r19
   105b0:	94c0012e 	bgeu	r18,r19,105b8 <__sfvwrite_r+0x230>
   105b4:	902d883a 	mov	r22,r18
   105b8:	81000017 	ldw	r4,0(r16)
   105bc:	80800417 	ldw	r2,16(r16)
   105c0:	b02f883a 	mov	r23,r22
   105c4:	81c00517 	ldw	r7,20(r16)
   105c8:	1100032e 	bgeu	r2,r4,105d8 <__sfvwrite_r+0x250>
   105cc:	80c00217 	ldw	r3,8(r16)
   105d0:	38c7883a 	add	r3,r7,r3
   105d4:	1d801816 	blt	r3,r22,10638 <__sfvwrite_r+0x2b0>
   105d8:	b1c03e16 	blt	r22,r7,106d4 <__sfvwrite_r+0x34c>
   105dc:	80800917 	ldw	r2,36(r16)
   105e0:	81400717 	ldw	r5,28(r16)
   105e4:	e00d883a 	mov	r6,fp
   105e8:	da000115 	stw	r8,4(sp)
   105ec:	a809883a 	mov	r4,r21
   105f0:	103ee83a 	callr	r2
   105f4:	102f883a 	mov	r23,r2
   105f8:	da000117 	ldw	r8,4(sp)
   105fc:	00bfe00e 	bge	zero,r2,10580 <__alt_data_end+0xf0010580>
   10600:	9de7c83a 	sub	r19,r19,r23
   10604:	98001f26 	beq	r19,zero,10684 <__sfvwrite_r+0x2fc>
   10608:	a0800217 	ldw	r2,8(r20)
   1060c:	e5f9883a 	add	fp,fp,r23
   10610:	95e5c83a 	sub	r18,r18,r23
   10614:	15efc83a 	sub	r23,r2,r23
   10618:	a5c00215 	stw	r23,8(r20)
   1061c:	b83f8726 	beq	r23,zero,1043c <__alt_data_end+0xf001043c>
   10620:	903fe11e 	bne	r18,zero,105a8 <__alt_data_end+0xf00105a8>
   10624:	8f000017 	ldw	fp,0(r17)
   10628:	8c800117 	ldw	r18,4(r17)
   1062c:	0011883a 	mov	r8,zero
   10630:	8c400204 	addi	r17,r17,8
   10634:	003fdb06 	br	105a4 <__alt_data_end+0xf00105a4>
   10638:	180d883a 	mov	r6,r3
   1063c:	e00b883a 	mov	r5,fp
   10640:	da000115 	stw	r8,4(sp)
   10644:	d8c00015 	stw	r3,0(sp)
   10648:	00115540 	call	11554 <memmove>
   1064c:	d8c00017 	ldw	r3,0(sp)
   10650:	80800017 	ldw	r2,0(r16)
   10654:	800b883a 	mov	r5,r16
   10658:	a809883a 	mov	r4,r21
   1065c:	10c5883a 	add	r2,r2,r3
   10660:	80800015 	stw	r2,0(r16)
   10664:	d8c00015 	stw	r3,0(sp)
   10668:	000fb280 	call	fb28 <_fflush_r>
   1066c:	d8c00017 	ldw	r3,0(sp)
   10670:	da000117 	ldw	r8,4(sp)
   10674:	103fc21e 	bne	r2,zero,10580 <__alt_data_end+0xf0010580>
   10678:	182f883a 	mov	r23,r3
   1067c:	9de7c83a 	sub	r19,r19,r23
   10680:	983fe11e 	bne	r19,zero,10608 <__alt_data_end+0xf0010608>
   10684:	800b883a 	mov	r5,r16
   10688:	a809883a 	mov	r4,r21
   1068c:	000fb280 	call	fb28 <_fflush_r>
   10690:	103fbb1e 	bne	r2,zero,10580 <__alt_data_end+0xf0010580>
   10694:	0011883a 	mov	r8,zero
   10698:	003fdb06 	br	10608 <__alt_data_end+0xf0010608>
   1069c:	94c0012e 	bgeu	r18,r19,106a4 <__sfvwrite_r+0x31c>
   106a0:	9027883a 	mov	r19,r18
   106a4:	980d883a 	mov	r6,r19
   106a8:	e00b883a 	mov	r5,fp
   106ac:	00115540 	call	11554 <memmove>
   106b0:	80800217 	ldw	r2,8(r16)
   106b4:	80c00017 	ldw	r3,0(r16)
   106b8:	14c5c83a 	sub	r2,r2,r19
   106bc:	1cc7883a 	add	r3,r3,r19
   106c0:	80800215 	stw	r2,8(r16)
   106c4:	80c00015 	stw	r3,0(r16)
   106c8:	10004326 	beq	r2,zero,107d8 <__sfvwrite_r+0x450>
   106cc:	9805883a 	mov	r2,r19
   106d0:	003f8606 	br	104ec <__alt_data_end+0xf00104ec>
   106d4:	b00d883a 	mov	r6,r22
   106d8:	e00b883a 	mov	r5,fp
   106dc:	da000115 	stw	r8,4(sp)
   106e0:	00115540 	call	11554 <memmove>
   106e4:	80800217 	ldw	r2,8(r16)
   106e8:	80c00017 	ldw	r3,0(r16)
   106ec:	da000117 	ldw	r8,4(sp)
   106f0:	1585c83a 	sub	r2,r2,r22
   106f4:	1dad883a 	add	r22,r3,r22
   106f8:	80800215 	stw	r2,8(r16)
   106fc:	85800015 	stw	r22,0(r16)
   10700:	003fbf06 	br	10600 <__alt_data_end+0xf0010600>
   10704:	81000017 	ldw	r4,0(r16)
   10708:	9027883a 	mov	r19,r18
   1070c:	902f883a 	mov	r23,r18
   10710:	003f6c06 	br	104c4 <__alt_data_end+0xf00104c4>
   10714:	900d883a 	mov	r6,r18
   10718:	01400284 	movi	r5,10
   1071c:	e009883a 	mov	r4,fp
   10720:	00114700 	call	11470 <memchr>
   10724:	10003e26 	beq	r2,zero,10820 <__sfvwrite_r+0x498>
   10728:	10800044 	addi	r2,r2,1
   1072c:	1727c83a 	sub	r19,r2,fp
   10730:	02000044 	movi	r8,1
   10734:	003f9d06 	br	105ac <__alt_data_end+0xf00105ac>
   10738:	80800517 	ldw	r2,20(r16)
   1073c:	81400417 	ldw	r5,16(r16)
   10740:	81c00017 	ldw	r7,0(r16)
   10744:	10a7883a 	add	r19,r2,r2
   10748:	9885883a 	add	r2,r19,r2
   1074c:	1026d7fa 	srli	r19,r2,31
   10750:	396dc83a 	sub	r22,r7,r5
   10754:	b1000044 	addi	r4,r22,1
   10758:	9885883a 	add	r2,r19,r2
   1075c:	1027d07a 	srai	r19,r2,1
   10760:	2485883a 	add	r2,r4,r18
   10764:	980d883a 	mov	r6,r19
   10768:	9880022e 	bgeu	r19,r2,10774 <__sfvwrite_r+0x3ec>
   1076c:	1027883a 	mov	r19,r2
   10770:	100d883a 	mov	r6,r2
   10774:	18c1000c 	andi	r3,r3,1024
   10778:	18001c26 	beq	r3,zero,107ec <__sfvwrite_r+0x464>
   1077c:	300b883a 	mov	r5,r6
   10780:	a809883a 	mov	r4,r21
   10784:	0010c640 	call	10c64 <_malloc_r>
   10788:	102f883a 	mov	r23,r2
   1078c:	10002926 	beq	r2,zero,10834 <__sfvwrite_r+0x4ac>
   10790:	81400417 	ldw	r5,16(r16)
   10794:	b00d883a 	mov	r6,r22
   10798:	1009883a 	mov	r4,r2
   1079c:	000957c0 	call	957c <memcpy>
   107a0:	8080030b 	ldhu	r2,12(r16)
   107a4:	00fedfc4 	movi	r3,-1153
   107a8:	10c4703a 	and	r2,r2,r3
   107ac:	10802014 	ori	r2,r2,128
   107b0:	8080030d 	sth	r2,12(r16)
   107b4:	bd89883a 	add	r4,r23,r22
   107b8:	9d8fc83a 	sub	r7,r19,r22
   107bc:	85c00415 	stw	r23,16(r16)
   107c0:	84c00515 	stw	r19,20(r16)
   107c4:	81000015 	stw	r4,0(r16)
   107c8:	9027883a 	mov	r19,r18
   107cc:	81c00215 	stw	r7,8(r16)
   107d0:	902f883a 	mov	r23,r18
   107d4:	003f3b06 	br	104c4 <__alt_data_end+0xf00104c4>
   107d8:	800b883a 	mov	r5,r16
   107dc:	a809883a 	mov	r4,r21
   107e0:	000fb280 	call	fb28 <_fflush_r>
   107e4:	103fb926 	beq	r2,zero,106cc <__alt_data_end+0xf00106cc>
   107e8:	003f6506 	br	10580 <__alt_data_end+0xf0010580>
   107ec:	a809883a 	mov	r4,r21
   107f0:	00126ac0 	call	126ac <_realloc_r>
   107f4:	102f883a 	mov	r23,r2
   107f8:	103fee1e 	bne	r2,zero,107b4 <__alt_data_end+0xf00107b4>
   107fc:	81400417 	ldw	r5,16(r16)
   10800:	a809883a 	mov	r4,r21
   10804:	00100780 	call	10078 <_free_r>
   10808:	8080030b 	ldhu	r2,12(r16)
   1080c:	00ffdfc4 	movi	r3,-129
   10810:	1884703a 	and	r2,r3,r2
   10814:	00c00304 	movi	r3,12
   10818:	a8c00015 	stw	r3,0(r21)
   1081c:	003f5906 	br	10584 <__alt_data_end+0xf0010584>
   10820:	94c00044 	addi	r19,r18,1
   10824:	02000044 	movi	r8,1
   10828:	003f6006 	br	105ac <__alt_data_end+0xf00105ac>
   1082c:	00bfffc4 	movi	r2,-1
   10830:	003f0306 	br	10440 <__alt_data_end+0xf0010440>
   10834:	00800304 	movi	r2,12
   10838:	a8800015 	stw	r2,0(r21)
   1083c:	8080030b 	ldhu	r2,12(r16)
   10840:	003f5006 	br	10584 <__alt_data_end+0xf0010584>

00010844 <_fwalk>:
   10844:	defff704 	addi	sp,sp,-36
   10848:	dd000415 	stw	r20,16(sp)
   1084c:	dfc00815 	stw	ra,32(sp)
   10850:	ddc00715 	stw	r23,28(sp)
   10854:	dd800615 	stw	r22,24(sp)
   10858:	dd400515 	stw	r21,20(sp)
   1085c:	dcc00315 	stw	r19,12(sp)
   10860:	dc800215 	stw	r18,8(sp)
   10864:	dc400115 	stw	r17,4(sp)
   10868:	dc000015 	stw	r16,0(sp)
   1086c:	2500b804 	addi	r20,r4,736
   10870:	a0002326 	beq	r20,zero,10900 <_fwalk+0xbc>
   10874:	282b883a 	mov	r21,r5
   10878:	002f883a 	mov	r23,zero
   1087c:	05800044 	movi	r22,1
   10880:	04ffffc4 	movi	r19,-1
   10884:	a4400117 	ldw	r17,4(r20)
   10888:	a4800217 	ldw	r18,8(r20)
   1088c:	8c7fffc4 	addi	r17,r17,-1
   10890:	88000d16 	blt	r17,zero,108c8 <_fwalk+0x84>
   10894:	94000304 	addi	r16,r18,12
   10898:	94800384 	addi	r18,r18,14
   1089c:	8080000b 	ldhu	r2,0(r16)
   108a0:	8c7fffc4 	addi	r17,r17,-1
   108a4:	813ffd04 	addi	r4,r16,-12
   108a8:	b080042e 	bgeu	r22,r2,108bc <_fwalk+0x78>
   108ac:	9080000f 	ldh	r2,0(r18)
   108b0:	14c00226 	beq	r2,r19,108bc <_fwalk+0x78>
   108b4:	a83ee83a 	callr	r21
   108b8:	b8aeb03a 	or	r23,r23,r2
   108bc:	84001a04 	addi	r16,r16,104
   108c0:	94801a04 	addi	r18,r18,104
   108c4:	8cfff51e 	bne	r17,r19,1089c <__alt_data_end+0xf001089c>
   108c8:	a5000017 	ldw	r20,0(r20)
   108cc:	a03fed1e 	bne	r20,zero,10884 <__alt_data_end+0xf0010884>
   108d0:	b805883a 	mov	r2,r23
   108d4:	dfc00817 	ldw	ra,32(sp)
   108d8:	ddc00717 	ldw	r23,28(sp)
   108dc:	dd800617 	ldw	r22,24(sp)
   108e0:	dd400517 	ldw	r21,20(sp)
   108e4:	dd000417 	ldw	r20,16(sp)
   108e8:	dcc00317 	ldw	r19,12(sp)
   108ec:	dc800217 	ldw	r18,8(sp)
   108f0:	dc400117 	ldw	r17,4(sp)
   108f4:	dc000017 	ldw	r16,0(sp)
   108f8:	dec00904 	addi	sp,sp,36
   108fc:	f800283a 	ret
   10900:	002f883a 	mov	r23,zero
   10904:	003ff206 	br	108d0 <__alt_data_end+0xf00108d0>

00010908 <_fwalk_reent>:
   10908:	defff704 	addi	sp,sp,-36
   1090c:	dd000415 	stw	r20,16(sp)
   10910:	dfc00815 	stw	ra,32(sp)
   10914:	ddc00715 	stw	r23,28(sp)
   10918:	dd800615 	stw	r22,24(sp)
   1091c:	dd400515 	stw	r21,20(sp)
   10920:	dcc00315 	stw	r19,12(sp)
   10924:	dc800215 	stw	r18,8(sp)
   10928:	dc400115 	stw	r17,4(sp)
   1092c:	dc000015 	stw	r16,0(sp)
   10930:	2500b804 	addi	r20,r4,736
   10934:	a0002326 	beq	r20,zero,109c4 <_fwalk_reent+0xbc>
   10938:	282b883a 	mov	r21,r5
   1093c:	2027883a 	mov	r19,r4
   10940:	002f883a 	mov	r23,zero
   10944:	05800044 	movi	r22,1
   10948:	04bfffc4 	movi	r18,-1
   1094c:	a4400117 	ldw	r17,4(r20)
   10950:	a4000217 	ldw	r16,8(r20)
   10954:	8c7fffc4 	addi	r17,r17,-1
   10958:	88000c16 	blt	r17,zero,1098c <_fwalk_reent+0x84>
   1095c:	84000304 	addi	r16,r16,12
   10960:	8080000b 	ldhu	r2,0(r16)
   10964:	8c7fffc4 	addi	r17,r17,-1
   10968:	817ffd04 	addi	r5,r16,-12
   1096c:	b080052e 	bgeu	r22,r2,10984 <_fwalk_reent+0x7c>
   10970:	8080008f 	ldh	r2,2(r16)
   10974:	9809883a 	mov	r4,r19
   10978:	14800226 	beq	r2,r18,10984 <_fwalk_reent+0x7c>
   1097c:	a83ee83a 	callr	r21
   10980:	b8aeb03a 	or	r23,r23,r2
   10984:	84001a04 	addi	r16,r16,104
   10988:	8cbff51e 	bne	r17,r18,10960 <__alt_data_end+0xf0010960>
   1098c:	a5000017 	ldw	r20,0(r20)
   10990:	a03fee1e 	bne	r20,zero,1094c <__alt_data_end+0xf001094c>
   10994:	b805883a 	mov	r2,r23
   10998:	dfc00817 	ldw	ra,32(sp)
   1099c:	ddc00717 	ldw	r23,28(sp)
   109a0:	dd800617 	ldw	r22,24(sp)
   109a4:	dd400517 	ldw	r21,20(sp)
   109a8:	dd000417 	ldw	r20,16(sp)
   109ac:	dcc00317 	ldw	r19,12(sp)
   109b0:	dc800217 	ldw	r18,8(sp)
   109b4:	dc400117 	ldw	r17,4(sp)
   109b8:	dc000017 	ldw	r16,0(sp)
   109bc:	dec00904 	addi	sp,sp,36
   109c0:	f800283a 	ret
   109c4:	002f883a 	mov	r23,zero
   109c8:	003ff206 	br	10994 <__alt_data_end+0xf0010994>

000109cc <_setlocale_r>:
   109cc:	30001b26 	beq	r6,zero,10a3c <_setlocale_r+0x70>
   109d0:	01420034 	movhi	r5,2048
   109d4:	defffe04 	addi	sp,sp,-8
   109d8:	29410304 	addi	r5,r5,1036
   109dc:	3009883a 	mov	r4,r6
   109e0:	dc000015 	stw	r16,0(sp)
   109e4:	dfc00115 	stw	ra,4(sp)
   109e8:	3021883a 	mov	r16,r6
   109ec:	0012e140 	call	12e14 <strcmp>
   109f0:	1000061e 	bne	r2,zero,10a0c <_setlocale_r+0x40>
   109f4:	00820034 	movhi	r2,2048
   109f8:	10810204 	addi	r2,r2,1032
   109fc:	dfc00117 	ldw	ra,4(sp)
   10a00:	dc000017 	ldw	r16,0(sp)
   10a04:	dec00204 	addi	sp,sp,8
   10a08:	f800283a 	ret
   10a0c:	01420034 	movhi	r5,2048
   10a10:	29410204 	addi	r5,r5,1032
   10a14:	8009883a 	mov	r4,r16
   10a18:	0012e140 	call	12e14 <strcmp>
   10a1c:	103ff526 	beq	r2,zero,109f4 <__alt_data_end+0xf00109f4>
   10a20:	01420034 	movhi	r5,2048
   10a24:	2940e504 	addi	r5,r5,916
   10a28:	8009883a 	mov	r4,r16
   10a2c:	0012e140 	call	12e14 <strcmp>
   10a30:	103ff026 	beq	r2,zero,109f4 <__alt_data_end+0xf00109f4>
   10a34:	0005883a 	mov	r2,zero
   10a38:	003ff006 	br	109fc <__alt_data_end+0xf00109fc>
   10a3c:	00820034 	movhi	r2,2048
   10a40:	10810204 	addi	r2,r2,1032
   10a44:	f800283a 	ret

00010a48 <__locale_charset>:
   10a48:	00820034 	movhi	r2,2048
   10a4c:	1083d904 	addi	r2,r2,3940
   10a50:	f800283a 	ret

00010a54 <__locale_mb_cur_max>:
   10a54:	00820034 	movhi	r2,2048
   10a58:	108b1104 	addi	r2,r2,11332
   10a5c:	10800017 	ldw	r2,0(r2)
   10a60:	f800283a 	ret

00010a64 <__locale_msgcharset>:
   10a64:	00820034 	movhi	r2,2048
   10a68:	1083d104 	addi	r2,r2,3908
   10a6c:	f800283a 	ret

00010a70 <__locale_cjk_lang>:
   10a70:	0005883a 	mov	r2,zero
   10a74:	f800283a 	ret

00010a78 <_localeconv_r>:
   10a78:	00820034 	movhi	r2,2048
   10a7c:	1083e104 	addi	r2,r2,3972
   10a80:	f800283a 	ret

00010a84 <setlocale>:
   10a84:	00820034 	movhi	r2,2048
   10a88:	108b1004 	addi	r2,r2,11328
   10a8c:	280d883a 	mov	r6,r5
   10a90:	200b883a 	mov	r5,r4
   10a94:	11000017 	ldw	r4,0(r2)
   10a98:	00109cc1 	jmpi	109cc <_setlocale_r>

00010a9c <localeconv>:
   10a9c:	00820034 	movhi	r2,2048
   10aa0:	1083e104 	addi	r2,r2,3972
   10aa4:	f800283a 	ret

00010aa8 <__smakebuf_r>:
   10aa8:	2880030b 	ldhu	r2,12(r5)
   10aac:	10c0008c 	andi	r3,r2,2
   10ab0:	1800411e 	bne	r3,zero,10bb8 <__smakebuf_r+0x110>
   10ab4:	deffec04 	addi	sp,sp,-80
   10ab8:	dc000f15 	stw	r16,60(sp)
   10abc:	2821883a 	mov	r16,r5
   10ac0:	2940038f 	ldh	r5,14(r5)
   10ac4:	dc401015 	stw	r17,64(sp)
   10ac8:	dfc01315 	stw	ra,76(sp)
   10acc:	dcc01215 	stw	r19,72(sp)
   10ad0:	dc801115 	stw	r18,68(sp)
   10ad4:	2023883a 	mov	r17,r4
   10ad8:	28001c16 	blt	r5,zero,10b4c <__smakebuf_r+0xa4>
   10adc:	d80d883a 	mov	r6,sp
   10ae0:	0015dc80 	call	15dc8 <_fstat_r>
   10ae4:	10001816 	blt	r2,zero,10b48 <__smakebuf_r+0xa0>
   10ae8:	d8800117 	ldw	r2,4(sp)
   10aec:	00e00014 	movui	r3,32768
   10af0:	10bc000c 	andi	r2,r2,61440
   10af4:	14c80020 	cmpeqi	r19,r2,8192
   10af8:	10c03726 	beq	r2,r3,10bd8 <__smakebuf_r+0x130>
   10afc:	80c0030b 	ldhu	r3,12(r16)
   10b00:	18c20014 	ori	r3,r3,2048
   10b04:	80c0030d 	sth	r3,12(r16)
   10b08:	00c80004 	movi	r3,8192
   10b0c:	10c0521e 	bne	r2,r3,10c58 <__smakebuf_r+0x1b0>
   10b10:	8140038f 	ldh	r5,14(r16)
   10b14:	8809883a 	mov	r4,r17
   10b18:	0015e240 	call	15e24 <_isatty_r>
   10b1c:	10004c26 	beq	r2,zero,10c50 <__smakebuf_r+0x1a8>
   10b20:	8080030b 	ldhu	r2,12(r16)
   10b24:	80c010c4 	addi	r3,r16,67
   10b28:	80c00015 	stw	r3,0(r16)
   10b2c:	10800054 	ori	r2,r2,1
   10b30:	8080030d 	sth	r2,12(r16)
   10b34:	00800044 	movi	r2,1
   10b38:	80c00415 	stw	r3,16(r16)
   10b3c:	80800515 	stw	r2,20(r16)
   10b40:	04810004 	movi	r18,1024
   10b44:	00000706 	br	10b64 <__smakebuf_r+0xbc>
   10b48:	8080030b 	ldhu	r2,12(r16)
   10b4c:	10c0200c 	andi	r3,r2,128
   10b50:	18001f1e 	bne	r3,zero,10bd0 <__smakebuf_r+0x128>
   10b54:	04810004 	movi	r18,1024
   10b58:	10820014 	ori	r2,r2,2048
   10b5c:	8080030d 	sth	r2,12(r16)
   10b60:	0027883a 	mov	r19,zero
   10b64:	900b883a 	mov	r5,r18
   10b68:	8809883a 	mov	r4,r17
   10b6c:	0010c640 	call	10c64 <_malloc_r>
   10b70:	10002c26 	beq	r2,zero,10c24 <__smakebuf_r+0x17c>
   10b74:	80c0030b 	ldhu	r3,12(r16)
   10b78:	01000074 	movhi	r4,1
   10b7c:	213eef04 	addi	r4,r4,-1092
   10b80:	89000f15 	stw	r4,60(r17)
   10b84:	18c02014 	ori	r3,r3,128
   10b88:	80c0030d 	sth	r3,12(r16)
   10b8c:	80800015 	stw	r2,0(r16)
   10b90:	80800415 	stw	r2,16(r16)
   10b94:	84800515 	stw	r18,20(r16)
   10b98:	98001a1e 	bne	r19,zero,10c04 <__smakebuf_r+0x15c>
   10b9c:	dfc01317 	ldw	ra,76(sp)
   10ba0:	dcc01217 	ldw	r19,72(sp)
   10ba4:	dc801117 	ldw	r18,68(sp)
   10ba8:	dc401017 	ldw	r17,64(sp)
   10bac:	dc000f17 	ldw	r16,60(sp)
   10bb0:	dec01404 	addi	sp,sp,80
   10bb4:	f800283a 	ret
   10bb8:	288010c4 	addi	r2,r5,67
   10bbc:	28800015 	stw	r2,0(r5)
   10bc0:	28800415 	stw	r2,16(r5)
   10bc4:	00800044 	movi	r2,1
   10bc8:	28800515 	stw	r2,20(r5)
   10bcc:	f800283a 	ret
   10bd0:	04801004 	movi	r18,64
   10bd4:	003fe006 	br	10b58 <__alt_data_end+0xf0010b58>
   10bd8:	81000a17 	ldw	r4,40(r16)
   10bdc:	00c00074 	movhi	r3,1
   10be0:	18cb6c04 	addi	r3,r3,11696
   10be4:	20ffc51e 	bne	r4,r3,10afc <__alt_data_end+0xf0010afc>
   10be8:	8080030b 	ldhu	r2,12(r16)
   10bec:	04810004 	movi	r18,1024
   10bf0:	84801315 	stw	r18,76(r16)
   10bf4:	1484b03a 	or	r2,r2,r18
   10bf8:	8080030d 	sth	r2,12(r16)
   10bfc:	0027883a 	mov	r19,zero
   10c00:	003fd806 	br	10b64 <__alt_data_end+0xf0010b64>
   10c04:	8140038f 	ldh	r5,14(r16)
   10c08:	8809883a 	mov	r4,r17
   10c0c:	0015e240 	call	15e24 <_isatty_r>
   10c10:	103fe226 	beq	r2,zero,10b9c <__alt_data_end+0xf0010b9c>
   10c14:	8080030b 	ldhu	r2,12(r16)
   10c18:	10800054 	ori	r2,r2,1
   10c1c:	8080030d 	sth	r2,12(r16)
   10c20:	003fde06 	br	10b9c <__alt_data_end+0xf0010b9c>
   10c24:	8080030b 	ldhu	r2,12(r16)
   10c28:	10c0800c 	andi	r3,r2,512
   10c2c:	183fdb1e 	bne	r3,zero,10b9c <__alt_data_end+0xf0010b9c>
   10c30:	10800094 	ori	r2,r2,2
   10c34:	80c010c4 	addi	r3,r16,67
   10c38:	8080030d 	sth	r2,12(r16)
   10c3c:	00800044 	movi	r2,1
   10c40:	80c00015 	stw	r3,0(r16)
   10c44:	80c00415 	stw	r3,16(r16)
   10c48:	80800515 	stw	r2,20(r16)
   10c4c:	003fd306 	br	10b9c <__alt_data_end+0xf0010b9c>
   10c50:	04810004 	movi	r18,1024
   10c54:	003fc306 	br	10b64 <__alt_data_end+0xf0010b64>
   10c58:	0027883a 	mov	r19,zero
   10c5c:	04810004 	movi	r18,1024
   10c60:	003fc006 	br	10b64 <__alt_data_end+0xf0010b64>

00010c64 <_malloc_r>:
   10c64:	defff504 	addi	sp,sp,-44
   10c68:	dc800315 	stw	r18,12(sp)
   10c6c:	dfc00a15 	stw	ra,40(sp)
   10c70:	df000915 	stw	fp,36(sp)
   10c74:	ddc00815 	stw	r23,32(sp)
   10c78:	dd800715 	stw	r22,28(sp)
   10c7c:	dd400615 	stw	r21,24(sp)
   10c80:	dd000515 	stw	r20,20(sp)
   10c84:	dcc00415 	stw	r19,16(sp)
   10c88:	dc400215 	stw	r17,8(sp)
   10c8c:	dc000115 	stw	r16,4(sp)
   10c90:	288002c4 	addi	r2,r5,11
   10c94:	00c00584 	movi	r3,22
   10c98:	2025883a 	mov	r18,r4
   10c9c:	18807f2e 	bgeu	r3,r2,10e9c <_malloc_r+0x238>
   10ca0:	047ffe04 	movi	r17,-8
   10ca4:	1462703a 	and	r17,r2,r17
   10ca8:	8800a316 	blt	r17,zero,10f38 <_malloc_r+0x2d4>
   10cac:	8940a236 	bltu	r17,r5,10f38 <_malloc_r+0x2d4>
   10cb0:	0017c880 	call	17c88 <__malloc_lock>
   10cb4:	00807dc4 	movi	r2,503
   10cb8:	1441e92e 	bgeu	r2,r17,11460 <_malloc_r+0x7fc>
   10cbc:	8804d27a 	srli	r2,r17,9
   10cc0:	1000a126 	beq	r2,zero,10f48 <_malloc_r+0x2e4>
   10cc4:	00c00104 	movi	r3,4
   10cc8:	18811e36 	bltu	r3,r2,11144 <_malloc_r+0x4e0>
   10ccc:	8804d1ba 	srli	r2,r17,6
   10cd0:	12000e44 	addi	r8,r2,57
   10cd4:	11c00e04 	addi	r7,r2,56
   10cd8:	4209883a 	add	r4,r8,r8
   10cdc:	04c20034 	movhi	r19,2048
   10ce0:	2109883a 	add	r4,r4,r4
   10ce4:	9cc3ef04 	addi	r19,r19,4028
   10ce8:	2109883a 	add	r4,r4,r4
   10cec:	9909883a 	add	r4,r19,r4
   10cf0:	24000117 	ldw	r16,4(r4)
   10cf4:	213ffe04 	addi	r4,r4,-8
   10cf8:	24009726 	beq	r4,r16,10f58 <_malloc_r+0x2f4>
   10cfc:	80800117 	ldw	r2,4(r16)
   10d00:	01bfff04 	movi	r6,-4
   10d04:	014003c4 	movi	r5,15
   10d08:	1184703a 	and	r2,r2,r6
   10d0c:	1447c83a 	sub	r3,r2,r17
   10d10:	28c00716 	blt	r5,r3,10d30 <_malloc_r+0xcc>
   10d14:	1800920e 	bge	r3,zero,10f60 <_malloc_r+0x2fc>
   10d18:	84000317 	ldw	r16,12(r16)
   10d1c:	24008e26 	beq	r4,r16,10f58 <_malloc_r+0x2f4>
   10d20:	80800117 	ldw	r2,4(r16)
   10d24:	1184703a 	and	r2,r2,r6
   10d28:	1447c83a 	sub	r3,r2,r17
   10d2c:	28fff90e 	bge	r5,r3,10d14 <__alt_data_end+0xf0010d14>
   10d30:	3809883a 	mov	r4,r7
   10d34:	01820034 	movhi	r6,2048
   10d38:	9c000417 	ldw	r16,16(r19)
   10d3c:	3183ef04 	addi	r6,r6,4028
   10d40:	32000204 	addi	r8,r6,8
   10d44:	82013426 	beq	r16,r8,11218 <_malloc_r+0x5b4>
   10d48:	80c00117 	ldw	r3,4(r16)
   10d4c:	00bfff04 	movi	r2,-4
   10d50:	188e703a 	and	r7,r3,r2
   10d54:	3c45c83a 	sub	r2,r7,r17
   10d58:	00c003c4 	movi	r3,15
   10d5c:	18811f16 	blt	r3,r2,111dc <_malloc_r+0x578>
   10d60:	32000515 	stw	r8,20(r6)
   10d64:	32000415 	stw	r8,16(r6)
   10d68:	10007f0e 	bge	r2,zero,10f68 <_malloc_r+0x304>
   10d6c:	00807fc4 	movi	r2,511
   10d70:	11c0fd36 	bltu	r2,r7,11168 <_malloc_r+0x504>
   10d74:	3806d0fa 	srli	r3,r7,3
   10d78:	01c00044 	movi	r7,1
   10d7c:	30800117 	ldw	r2,4(r6)
   10d80:	19400044 	addi	r5,r3,1
   10d84:	294b883a 	add	r5,r5,r5
   10d88:	1807d0ba 	srai	r3,r3,2
   10d8c:	294b883a 	add	r5,r5,r5
   10d90:	294b883a 	add	r5,r5,r5
   10d94:	298b883a 	add	r5,r5,r6
   10d98:	38c6983a 	sll	r3,r7,r3
   10d9c:	29c00017 	ldw	r7,0(r5)
   10da0:	2a7ffe04 	addi	r9,r5,-8
   10da4:	1886b03a 	or	r3,r3,r2
   10da8:	82400315 	stw	r9,12(r16)
   10dac:	81c00215 	stw	r7,8(r16)
   10db0:	30c00115 	stw	r3,4(r6)
   10db4:	2c000015 	stw	r16,0(r5)
   10db8:	3c000315 	stw	r16,12(r7)
   10dbc:	2005d0ba 	srai	r2,r4,2
   10dc0:	01400044 	movi	r5,1
   10dc4:	288a983a 	sll	r5,r5,r2
   10dc8:	19406f36 	bltu	r3,r5,10f88 <_malloc_r+0x324>
   10dcc:	28c4703a 	and	r2,r5,r3
   10dd0:	10000a1e 	bne	r2,zero,10dfc <_malloc_r+0x198>
   10dd4:	00bfff04 	movi	r2,-4
   10dd8:	294b883a 	add	r5,r5,r5
   10ddc:	2088703a 	and	r4,r4,r2
   10de0:	28c4703a 	and	r2,r5,r3
   10de4:	21000104 	addi	r4,r4,4
   10de8:	1000041e 	bne	r2,zero,10dfc <_malloc_r+0x198>
   10dec:	294b883a 	add	r5,r5,r5
   10df0:	28c4703a 	and	r2,r5,r3
   10df4:	21000104 	addi	r4,r4,4
   10df8:	103ffc26 	beq	r2,zero,10dec <__alt_data_end+0xf0010dec>
   10dfc:	02bfff04 	movi	r10,-4
   10e00:	024003c4 	movi	r9,15
   10e04:	21800044 	addi	r6,r4,1
   10e08:	318d883a 	add	r6,r6,r6
   10e0c:	318d883a 	add	r6,r6,r6
   10e10:	318d883a 	add	r6,r6,r6
   10e14:	998d883a 	add	r6,r19,r6
   10e18:	333ffe04 	addi	r12,r6,-8
   10e1c:	2017883a 	mov	r11,r4
   10e20:	31800104 	addi	r6,r6,4
   10e24:	34000017 	ldw	r16,0(r6)
   10e28:	31fffd04 	addi	r7,r6,-12
   10e2c:	81c0041e 	bne	r16,r7,10e40 <_malloc_r+0x1dc>
   10e30:	0000fb06 	br	11220 <_malloc_r+0x5bc>
   10e34:	1801030e 	bge	r3,zero,11244 <_malloc_r+0x5e0>
   10e38:	84000317 	ldw	r16,12(r16)
   10e3c:	81c0f826 	beq	r16,r7,11220 <_malloc_r+0x5bc>
   10e40:	80800117 	ldw	r2,4(r16)
   10e44:	1284703a 	and	r2,r2,r10
   10e48:	1447c83a 	sub	r3,r2,r17
   10e4c:	48fff90e 	bge	r9,r3,10e34 <__alt_data_end+0xf0010e34>
   10e50:	80800317 	ldw	r2,12(r16)
   10e54:	81000217 	ldw	r4,8(r16)
   10e58:	89400054 	ori	r5,r17,1
   10e5c:	81400115 	stw	r5,4(r16)
   10e60:	20800315 	stw	r2,12(r4)
   10e64:	11000215 	stw	r4,8(r2)
   10e68:	8463883a 	add	r17,r16,r17
   10e6c:	9c400515 	stw	r17,20(r19)
   10e70:	9c400415 	stw	r17,16(r19)
   10e74:	18800054 	ori	r2,r3,1
   10e78:	88800115 	stw	r2,4(r17)
   10e7c:	8a000315 	stw	r8,12(r17)
   10e80:	8a000215 	stw	r8,8(r17)
   10e84:	88e3883a 	add	r17,r17,r3
   10e88:	88c00015 	stw	r3,0(r17)
   10e8c:	9009883a 	mov	r4,r18
   10e90:	0017cac0 	call	17cac <__malloc_unlock>
   10e94:	80800204 	addi	r2,r16,8
   10e98:	00001b06 	br	10f08 <_malloc_r+0x2a4>
   10e9c:	04400404 	movi	r17,16
   10ea0:	89402536 	bltu	r17,r5,10f38 <_malloc_r+0x2d4>
   10ea4:	0017c880 	call	17c88 <__malloc_lock>
   10ea8:	00800184 	movi	r2,6
   10eac:	01000084 	movi	r4,2
   10eb0:	04c20034 	movhi	r19,2048
   10eb4:	1085883a 	add	r2,r2,r2
   10eb8:	9cc3ef04 	addi	r19,r19,4028
   10ebc:	1085883a 	add	r2,r2,r2
   10ec0:	9885883a 	add	r2,r19,r2
   10ec4:	14000117 	ldw	r16,4(r2)
   10ec8:	10fffe04 	addi	r3,r2,-8
   10ecc:	80c0d926 	beq	r16,r3,11234 <_malloc_r+0x5d0>
   10ed0:	80c00117 	ldw	r3,4(r16)
   10ed4:	81000317 	ldw	r4,12(r16)
   10ed8:	00bfff04 	movi	r2,-4
   10edc:	1884703a 	and	r2,r3,r2
   10ee0:	81400217 	ldw	r5,8(r16)
   10ee4:	8085883a 	add	r2,r16,r2
   10ee8:	10c00117 	ldw	r3,4(r2)
   10eec:	29000315 	stw	r4,12(r5)
   10ef0:	21400215 	stw	r5,8(r4)
   10ef4:	18c00054 	ori	r3,r3,1
   10ef8:	10c00115 	stw	r3,4(r2)
   10efc:	9009883a 	mov	r4,r18
   10f00:	0017cac0 	call	17cac <__malloc_unlock>
   10f04:	80800204 	addi	r2,r16,8
   10f08:	dfc00a17 	ldw	ra,40(sp)
   10f0c:	df000917 	ldw	fp,36(sp)
   10f10:	ddc00817 	ldw	r23,32(sp)
   10f14:	dd800717 	ldw	r22,28(sp)
   10f18:	dd400617 	ldw	r21,24(sp)
   10f1c:	dd000517 	ldw	r20,20(sp)
   10f20:	dcc00417 	ldw	r19,16(sp)
   10f24:	dc800317 	ldw	r18,12(sp)
   10f28:	dc400217 	ldw	r17,8(sp)
   10f2c:	dc000117 	ldw	r16,4(sp)
   10f30:	dec00b04 	addi	sp,sp,44
   10f34:	f800283a 	ret
   10f38:	00800304 	movi	r2,12
   10f3c:	90800015 	stw	r2,0(r18)
   10f40:	0005883a 	mov	r2,zero
   10f44:	003ff006 	br	10f08 <__alt_data_end+0xf0010f08>
   10f48:	01002004 	movi	r4,128
   10f4c:	02001004 	movi	r8,64
   10f50:	01c00fc4 	movi	r7,63
   10f54:	003f6106 	br	10cdc <__alt_data_end+0xf0010cdc>
   10f58:	4009883a 	mov	r4,r8
   10f5c:	003f7506 	br	10d34 <__alt_data_end+0xf0010d34>
   10f60:	81000317 	ldw	r4,12(r16)
   10f64:	003fde06 	br	10ee0 <__alt_data_end+0xf0010ee0>
   10f68:	81c5883a 	add	r2,r16,r7
   10f6c:	11400117 	ldw	r5,4(r2)
   10f70:	9009883a 	mov	r4,r18
   10f74:	29400054 	ori	r5,r5,1
   10f78:	11400115 	stw	r5,4(r2)
   10f7c:	0017cac0 	call	17cac <__malloc_unlock>
   10f80:	80800204 	addi	r2,r16,8
   10f84:	003fe006 	br	10f08 <__alt_data_end+0xf0010f08>
   10f88:	9c000217 	ldw	r16,8(r19)
   10f8c:	00bfff04 	movi	r2,-4
   10f90:	85800117 	ldw	r22,4(r16)
   10f94:	b0ac703a 	and	r22,r22,r2
   10f98:	b4400336 	bltu	r22,r17,10fa8 <_malloc_r+0x344>
   10f9c:	b445c83a 	sub	r2,r22,r17
   10fa0:	00c003c4 	movi	r3,15
   10fa4:	18805d16 	blt	r3,r2,1111c <_malloc_r+0x4b8>
   10fa8:	05c20034 	movhi	r23,2048
   10fac:	00820034 	movhi	r2,2048
   10fb0:	108b5d04 	addi	r2,r2,11636
   10fb4:	bdcb1204 	addi	r23,r23,11336
   10fb8:	15400017 	ldw	r21,0(r2)
   10fbc:	b8c00017 	ldw	r3,0(r23)
   10fc0:	00bfffc4 	movi	r2,-1
   10fc4:	858d883a 	add	r6,r16,r22
   10fc8:	8d6b883a 	add	r21,r17,r21
   10fcc:	1880ea26 	beq	r3,r2,11378 <_malloc_r+0x714>
   10fd0:	ad4403c4 	addi	r21,r21,4111
   10fd4:	00bc0004 	movi	r2,-4096
   10fd8:	a8aa703a 	and	r21,r21,r2
   10fdc:	a80b883a 	mov	r5,r21
   10fe0:	9009883a 	mov	r4,r18
   10fe4:	d9800015 	stw	r6,0(sp)
   10fe8:	0012c840 	call	12c84 <_sbrk_r>
   10fec:	1029883a 	mov	r20,r2
   10ff0:	00bfffc4 	movi	r2,-1
   10ff4:	d9800017 	ldw	r6,0(sp)
   10ff8:	a080e826 	beq	r20,r2,1139c <_malloc_r+0x738>
   10ffc:	a180a636 	bltu	r20,r6,11298 <_malloc_r+0x634>
   11000:	07020234 	movhi	fp,2056
   11004:	e73fd904 	addi	fp,fp,-156
   11008:	e0800017 	ldw	r2,0(fp)
   1100c:	a887883a 	add	r3,r21,r2
   11010:	e0c00015 	stw	r3,0(fp)
   11014:	3500e626 	beq	r6,r20,113b0 <_malloc_r+0x74c>
   11018:	b9000017 	ldw	r4,0(r23)
   1101c:	00bfffc4 	movi	r2,-1
   11020:	2080ee26 	beq	r4,r2,113dc <_malloc_r+0x778>
   11024:	a185c83a 	sub	r2,r20,r6
   11028:	10c5883a 	add	r2,r2,r3
   1102c:	e0800015 	stw	r2,0(fp)
   11030:	a0c001cc 	andi	r3,r20,7
   11034:	1800bc26 	beq	r3,zero,11328 <_malloc_r+0x6c4>
   11038:	a0e9c83a 	sub	r20,r20,r3
   1103c:	00840204 	movi	r2,4104
   11040:	a5000204 	addi	r20,r20,8
   11044:	10c7c83a 	sub	r3,r2,r3
   11048:	a545883a 	add	r2,r20,r21
   1104c:	1083ffcc 	andi	r2,r2,4095
   11050:	18abc83a 	sub	r21,r3,r2
   11054:	a80b883a 	mov	r5,r21
   11058:	9009883a 	mov	r4,r18
   1105c:	0012c840 	call	12c84 <_sbrk_r>
   11060:	00ffffc4 	movi	r3,-1
   11064:	10c0e126 	beq	r2,r3,113ec <_malloc_r+0x788>
   11068:	1505c83a 	sub	r2,r2,r20
   1106c:	1545883a 	add	r2,r2,r21
   11070:	10800054 	ori	r2,r2,1
   11074:	e0c00017 	ldw	r3,0(fp)
   11078:	9d000215 	stw	r20,8(r19)
   1107c:	a0800115 	stw	r2,4(r20)
   11080:	a8c7883a 	add	r3,r21,r3
   11084:	e0c00015 	stw	r3,0(fp)
   11088:	84c00e26 	beq	r16,r19,110c4 <_malloc_r+0x460>
   1108c:	018003c4 	movi	r6,15
   11090:	3580a72e 	bgeu	r6,r22,11330 <_malloc_r+0x6cc>
   11094:	81400117 	ldw	r5,4(r16)
   11098:	013ffe04 	movi	r4,-8
   1109c:	b0bffd04 	addi	r2,r22,-12
   110a0:	1104703a 	and	r2,r2,r4
   110a4:	2900004c 	andi	r4,r5,1
   110a8:	2088b03a 	or	r4,r4,r2
   110ac:	81000115 	stw	r4,4(r16)
   110b0:	01400144 	movi	r5,5
   110b4:	8089883a 	add	r4,r16,r2
   110b8:	21400115 	stw	r5,4(r4)
   110bc:	21400215 	stw	r5,8(r4)
   110c0:	3080cd36 	bltu	r6,r2,113f8 <_malloc_r+0x794>
   110c4:	00820034 	movhi	r2,2048
   110c8:	108b5c04 	addi	r2,r2,11632
   110cc:	11000017 	ldw	r4,0(r2)
   110d0:	20c0012e 	bgeu	r4,r3,110d8 <_malloc_r+0x474>
   110d4:	10c00015 	stw	r3,0(r2)
   110d8:	00820034 	movhi	r2,2048
   110dc:	108b5b04 	addi	r2,r2,11628
   110e0:	11000017 	ldw	r4,0(r2)
   110e4:	9c000217 	ldw	r16,8(r19)
   110e8:	20c0012e 	bgeu	r4,r3,110f0 <_malloc_r+0x48c>
   110ec:	10c00015 	stw	r3,0(r2)
   110f0:	80c00117 	ldw	r3,4(r16)
   110f4:	00bfff04 	movi	r2,-4
   110f8:	1886703a 	and	r3,r3,r2
   110fc:	1c45c83a 	sub	r2,r3,r17
   11100:	1c400236 	bltu	r3,r17,1110c <_malloc_r+0x4a8>
   11104:	00c003c4 	movi	r3,15
   11108:	18800416 	blt	r3,r2,1111c <_malloc_r+0x4b8>
   1110c:	9009883a 	mov	r4,r18
   11110:	0017cac0 	call	17cac <__malloc_unlock>
   11114:	0005883a 	mov	r2,zero
   11118:	003f7b06 	br	10f08 <__alt_data_end+0xf0010f08>
   1111c:	88c00054 	ori	r3,r17,1
   11120:	80c00115 	stw	r3,4(r16)
   11124:	8463883a 	add	r17,r16,r17
   11128:	10800054 	ori	r2,r2,1
   1112c:	9c400215 	stw	r17,8(r19)
   11130:	88800115 	stw	r2,4(r17)
   11134:	9009883a 	mov	r4,r18
   11138:	0017cac0 	call	17cac <__malloc_unlock>
   1113c:	80800204 	addi	r2,r16,8
   11140:	003f7106 	br	10f08 <__alt_data_end+0xf0010f08>
   11144:	00c00504 	movi	r3,20
   11148:	18804a2e 	bgeu	r3,r2,11274 <_malloc_r+0x610>
   1114c:	00c01504 	movi	r3,84
   11150:	18806e36 	bltu	r3,r2,1130c <_malloc_r+0x6a8>
   11154:	8804d33a 	srli	r2,r17,12
   11158:	12001bc4 	addi	r8,r2,111
   1115c:	11c01b84 	addi	r7,r2,110
   11160:	4209883a 	add	r4,r8,r8
   11164:	003edd06 	br	10cdc <__alt_data_end+0xf0010cdc>
   11168:	3804d27a 	srli	r2,r7,9
   1116c:	00c00104 	movi	r3,4
   11170:	1880442e 	bgeu	r3,r2,11284 <_malloc_r+0x620>
   11174:	00c00504 	movi	r3,20
   11178:	18808136 	bltu	r3,r2,11380 <_malloc_r+0x71c>
   1117c:	11401704 	addi	r5,r2,92
   11180:	10c016c4 	addi	r3,r2,91
   11184:	294b883a 	add	r5,r5,r5
   11188:	294b883a 	add	r5,r5,r5
   1118c:	294b883a 	add	r5,r5,r5
   11190:	994b883a 	add	r5,r19,r5
   11194:	28800017 	ldw	r2,0(r5)
   11198:	01820034 	movhi	r6,2048
   1119c:	297ffe04 	addi	r5,r5,-8
   111a0:	3183ef04 	addi	r6,r6,4028
   111a4:	28806526 	beq	r5,r2,1133c <_malloc_r+0x6d8>
   111a8:	01bfff04 	movi	r6,-4
   111ac:	10c00117 	ldw	r3,4(r2)
   111b0:	1986703a 	and	r3,r3,r6
   111b4:	38c0022e 	bgeu	r7,r3,111c0 <_malloc_r+0x55c>
   111b8:	10800217 	ldw	r2,8(r2)
   111bc:	28bffb1e 	bne	r5,r2,111ac <__alt_data_end+0xf00111ac>
   111c0:	11400317 	ldw	r5,12(r2)
   111c4:	98c00117 	ldw	r3,4(r19)
   111c8:	81400315 	stw	r5,12(r16)
   111cc:	80800215 	stw	r2,8(r16)
   111d0:	2c000215 	stw	r16,8(r5)
   111d4:	14000315 	stw	r16,12(r2)
   111d8:	003ef806 	br	10dbc <__alt_data_end+0xf0010dbc>
   111dc:	88c00054 	ori	r3,r17,1
   111e0:	80c00115 	stw	r3,4(r16)
   111e4:	8463883a 	add	r17,r16,r17
   111e8:	34400515 	stw	r17,20(r6)
   111ec:	34400415 	stw	r17,16(r6)
   111f0:	10c00054 	ori	r3,r2,1
   111f4:	8a000315 	stw	r8,12(r17)
   111f8:	8a000215 	stw	r8,8(r17)
   111fc:	88c00115 	stw	r3,4(r17)
   11200:	88a3883a 	add	r17,r17,r2
   11204:	88800015 	stw	r2,0(r17)
   11208:	9009883a 	mov	r4,r18
   1120c:	0017cac0 	call	17cac <__malloc_unlock>
   11210:	80800204 	addi	r2,r16,8
   11214:	003f3c06 	br	10f08 <__alt_data_end+0xf0010f08>
   11218:	30c00117 	ldw	r3,4(r6)
   1121c:	003ee706 	br	10dbc <__alt_data_end+0xf0010dbc>
   11220:	5ac00044 	addi	r11,r11,1
   11224:	588000cc 	andi	r2,r11,3
   11228:	31800204 	addi	r6,r6,8
   1122c:	103efd1e 	bne	r2,zero,10e24 <__alt_data_end+0xf0010e24>
   11230:	00002406 	br	112c4 <_malloc_r+0x660>
   11234:	14000317 	ldw	r16,12(r2)
   11238:	143f251e 	bne	r2,r16,10ed0 <__alt_data_end+0xf0010ed0>
   1123c:	21000084 	addi	r4,r4,2
   11240:	003ebc06 	br	10d34 <__alt_data_end+0xf0010d34>
   11244:	8085883a 	add	r2,r16,r2
   11248:	10c00117 	ldw	r3,4(r2)
   1124c:	81000317 	ldw	r4,12(r16)
   11250:	81400217 	ldw	r5,8(r16)
   11254:	18c00054 	ori	r3,r3,1
   11258:	10c00115 	stw	r3,4(r2)
   1125c:	29000315 	stw	r4,12(r5)
   11260:	21400215 	stw	r5,8(r4)
   11264:	9009883a 	mov	r4,r18
   11268:	0017cac0 	call	17cac <__malloc_unlock>
   1126c:	80800204 	addi	r2,r16,8
   11270:	003f2506 	br	10f08 <__alt_data_end+0xf0010f08>
   11274:	12001704 	addi	r8,r2,92
   11278:	11c016c4 	addi	r7,r2,91
   1127c:	4209883a 	add	r4,r8,r8
   11280:	003e9606 	br	10cdc <__alt_data_end+0xf0010cdc>
   11284:	3804d1ba 	srli	r2,r7,6
   11288:	11400e44 	addi	r5,r2,57
   1128c:	10c00e04 	addi	r3,r2,56
   11290:	294b883a 	add	r5,r5,r5
   11294:	003fbc06 	br	11188 <__alt_data_end+0xf0011188>
   11298:	84ff5926 	beq	r16,r19,11000 <__alt_data_end+0xf0011000>
   1129c:	00820034 	movhi	r2,2048
   112a0:	1083ef04 	addi	r2,r2,4028
   112a4:	14000217 	ldw	r16,8(r2)
   112a8:	00bfff04 	movi	r2,-4
   112ac:	80c00117 	ldw	r3,4(r16)
   112b0:	1886703a 	and	r3,r3,r2
   112b4:	003f9106 	br	110fc <__alt_data_end+0xf00110fc>
   112b8:	60800217 	ldw	r2,8(r12)
   112bc:	213fffc4 	addi	r4,r4,-1
   112c0:	1300651e 	bne	r2,r12,11458 <_malloc_r+0x7f4>
   112c4:	208000cc 	andi	r2,r4,3
   112c8:	633ffe04 	addi	r12,r12,-8
   112cc:	103ffa1e 	bne	r2,zero,112b8 <__alt_data_end+0xf00112b8>
   112d0:	98800117 	ldw	r2,4(r19)
   112d4:	0146303a 	nor	r3,zero,r5
   112d8:	1884703a 	and	r2,r3,r2
   112dc:	98800115 	stw	r2,4(r19)
   112e0:	294b883a 	add	r5,r5,r5
   112e4:	117f2836 	bltu	r2,r5,10f88 <__alt_data_end+0xf0010f88>
   112e8:	283f2726 	beq	r5,zero,10f88 <__alt_data_end+0xf0010f88>
   112ec:	2886703a 	and	r3,r5,r2
   112f0:	5809883a 	mov	r4,r11
   112f4:	183ec31e 	bne	r3,zero,10e04 <__alt_data_end+0xf0010e04>
   112f8:	294b883a 	add	r5,r5,r5
   112fc:	2886703a 	and	r3,r5,r2
   11300:	21000104 	addi	r4,r4,4
   11304:	183ffc26 	beq	r3,zero,112f8 <__alt_data_end+0xf00112f8>
   11308:	003ebe06 	br	10e04 <__alt_data_end+0xf0010e04>
   1130c:	00c05504 	movi	r3,340
   11310:	18801236 	bltu	r3,r2,1135c <_malloc_r+0x6f8>
   11314:	8804d3fa 	srli	r2,r17,15
   11318:	12001e04 	addi	r8,r2,120
   1131c:	11c01dc4 	addi	r7,r2,119
   11320:	4209883a 	add	r4,r8,r8
   11324:	003e6d06 	br	10cdc <__alt_data_end+0xf0010cdc>
   11328:	00c40004 	movi	r3,4096
   1132c:	003f4606 	br	11048 <__alt_data_end+0xf0011048>
   11330:	00800044 	movi	r2,1
   11334:	a0800115 	stw	r2,4(r20)
   11338:	003f7406 	br	1110c <__alt_data_end+0xf001110c>
   1133c:	1805d0ba 	srai	r2,r3,2
   11340:	01c00044 	movi	r7,1
   11344:	30c00117 	ldw	r3,4(r6)
   11348:	388e983a 	sll	r7,r7,r2
   1134c:	2805883a 	mov	r2,r5
   11350:	38c6b03a 	or	r3,r7,r3
   11354:	30c00115 	stw	r3,4(r6)
   11358:	003f9b06 	br	111c8 <__alt_data_end+0xf00111c8>
   1135c:	00c15504 	movi	r3,1364
   11360:	18801a36 	bltu	r3,r2,113cc <_malloc_r+0x768>
   11364:	8804d4ba 	srli	r2,r17,18
   11368:	12001f44 	addi	r8,r2,125
   1136c:	11c01f04 	addi	r7,r2,124
   11370:	4209883a 	add	r4,r8,r8
   11374:	003e5906 	br	10cdc <__alt_data_end+0xf0010cdc>
   11378:	ad400404 	addi	r21,r21,16
   1137c:	003f1706 	br	10fdc <__alt_data_end+0xf0010fdc>
   11380:	00c01504 	movi	r3,84
   11384:	18802336 	bltu	r3,r2,11414 <_malloc_r+0x7b0>
   11388:	3804d33a 	srli	r2,r7,12
   1138c:	11401bc4 	addi	r5,r2,111
   11390:	10c01b84 	addi	r3,r2,110
   11394:	294b883a 	add	r5,r5,r5
   11398:	003f7b06 	br	11188 <__alt_data_end+0xf0011188>
   1139c:	9c000217 	ldw	r16,8(r19)
   113a0:	00bfff04 	movi	r2,-4
   113a4:	80c00117 	ldw	r3,4(r16)
   113a8:	1886703a 	and	r3,r3,r2
   113ac:	003f5306 	br	110fc <__alt_data_end+0xf00110fc>
   113b0:	3083ffcc 	andi	r2,r6,4095
   113b4:	103f181e 	bne	r2,zero,11018 <__alt_data_end+0xf0011018>
   113b8:	99000217 	ldw	r4,8(r19)
   113bc:	b545883a 	add	r2,r22,r21
   113c0:	10800054 	ori	r2,r2,1
   113c4:	20800115 	stw	r2,4(r4)
   113c8:	003f3e06 	br	110c4 <__alt_data_end+0xf00110c4>
   113cc:	01003f84 	movi	r4,254
   113d0:	02001fc4 	movi	r8,127
   113d4:	01c01f84 	movi	r7,126
   113d8:	003e4006 	br	10cdc <__alt_data_end+0xf0010cdc>
   113dc:	00820034 	movhi	r2,2048
   113e0:	108b1204 	addi	r2,r2,11336
   113e4:	15000015 	stw	r20,0(r2)
   113e8:	003f1106 	br	11030 <__alt_data_end+0xf0011030>
   113ec:	00800044 	movi	r2,1
   113f0:	002b883a 	mov	r21,zero
   113f4:	003f1f06 	br	11074 <__alt_data_end+0xf0011074>
   113f8:	81400204 	addi	r5,r16,8
   113fc:	9009883a 	mov	r4,r18
   11400:	00100780 	call	10078 <_free_r>
   11404:	00820234 	movhi	r2,2056
   11408:	10bfd904 	addi	r2,r2,-156
   1140c:	10c00017 	ldw	r3,0(r2)
   11410:	003f2c06 	br	110c4 <__alt_data_end+0xf00110c4>
   11414:	00c05504 	movi	r3,340
   11418:	18800536 	bltu	r3,r2,11430 <_malloc_r+0x7cc>
   1141c:	3804d3fa 	srli	r2,r7,15
   11420:	11401e04 	addi	r5,r2,120
   11424:	10c01dc4 	addi	r3,r2,119
   11428:	294b883a 	add	r5,r5,r5
   1142c:	003f5606 	br	11188 <__alt_data_end+0xf0011188>
   11430:	00c15504 	movi	r3,1364
   11434:	18800536 	bltu	r3,r2,1144c <_malloc_r+0x7e8>
   11438:	3804d4ba 	srli	r2,r7,18
   1143c:	11401f44 	addi	r5,r2,125
   11440:	10c01f04 	addi	r3,r2,124
   11444:	294b883a 	add	r5,r5,r5
   11448:	003f4f06 	br	11188 <__alt_data_end+0xf0011188>
   1144c:	01403f84 	movi	r5,254
   11450:	00c01f84 	movi	r3,126
   11454:	003f4c06 	br	11188 <__alt_data_end+0xf0011188>
   11458:	98800117 	ldw	r2,4(r19)
   1145c:	003fa006 	br	112e0 <__alt_data_end+0xf00112e0>
   11460:	8808d0fa 	srli	r4,r17,3
   11464:	20800044 	addi	r2,r4,1
   11468:	1085883a 	add	r2,r2,r2
   1146c:	003e9006 	br	10eb0 <__alt_data_end+0xf0010eb0>

00011470 <memchr>:
   11470:	208000cc 	andi	r2,r4,3
   11474:	280f883a 	mov	r7,r5
   11478:	10003426 	beq	r2,zero,1154c <memchr+0xdc>
   1147c:	30bfffc4 	addi	r2,r6,-1
   11480:	30001a26 	beq	r6,zero,114ec <memchr+0x7c>
   11484:	20c00003 	ldbu	r3,0(r4)
   11488:	29803fcc 	andi	r6,r5,255
   1148c:	30c0051e 	bne	r6,r3,114a4 <memchr+0x34>
   11490:	00001806 	br	114f4 <memchr+0x84>
   11494:	10001526 	beq	r2,zero,114ec <memchr+0x7c>
   11498:	20c00003 	ldbu	r3,0(r4)
   1149c:	10bfffc4 	addi	r2,r2,-1
   114a0:	30c01426 	beq	r6,r3,114f4 <memchr+0x84>
   114a4:	21000044 	addi	r4,r4,1
   114a8:	20c000cc 	andi	r3,r4,3
   114ac:	183ff91e 	bne	r3,zero,11494 <__alt_data_end+0xf0011494>
   114b0:	020000c4 	movi	r8,3
   114b4:	40801136 	bltu	r8,r2,114fc <memchr+0x8c>
   114b8:	10000c26 	beq	r2,zero,114ec <memchr+0x7c>
   114bc:	20c00003 	ldbu	r3,0(r4)
   114c0:	29403fcc 	andi	r5,r5,255
   114c4:	28c00b26 	beq	r5,r3,114f4 <memchr+0x84>
   114c8:	20c00044 	addi	r3,r4,1
   114cc:	39803fcc 	andi	r6,r7,255
   114d0:	2089883a 	add	r4,r4,r2
   114d4:	00000306 	br	114e4 <memchr+0x74>
   114d8:	18c00044 	addi	r3,r3,1
   114dc:	197fffc3 	ldbu	r5,-1(r3)
   114e0:	31400526 	beq	r6,r5,114f8 <memchr+0x88>
   114e4:	1805883a 	mov	r2,r3
   114e8:	20fffb1e 	bne	r4,r3,114d8 <__alt_data_end+0xf00114d8>
   114ec:	0005883a 	mov	r2,zero
   114f0:	f800283a 	ret
   114f4:	2005883a 	mov	r2,r4
   114f8:	f800283a 	ret
   114fc:	28c03fcc 	andi	r3,r5,255
   11500:	1812923a 	slli	r9,r3,8
   11504:	02ffbff4 	movhi	r11,65279
   11508:	02a02074 	movhi	r10,32897
   1150c:	48d2b03a 	or	r9,r9,r3
   11510:	4806943a 	slli	r3,r9,16
   11514:	5affbfc4 	addi	r11,r11,-257
   11518:	52a02004 	addi	r10,r10,-32640
   1151c:	48d2b03a 	or	r9,r9,r3
   11520:	20c00017 	ldw	r3,0(r4)
   11524:	48c6f03a 	xor	r3,r9,r3
   11528:	1acd883a 	add	r6,r3,r11
   1152c:	00c6303a 	nor	r3,zero,r3
   11530:	30c6703a 	and	r3,r6,r3
   11534:	1a86703a 	and	r3,r3,r10
   11538:	183fe01e 	bne	r3,zero,114bc <__alt_data_end+0xf00114bc>
   1153c:	10bfff04 	addi	r2,r2,-4
   11540:	21000104 	addi	r4,r4,4
   11544:	40bff636 	bltu	r8,r2,11520 <__alt_data_end+0xf0011520>
   11548:	003fdb06 	br	114b8 <__alt_data_end+0xf00114b8>
   1154c:	3005883a 	mov	r2,r6
   11550:	003fd706 	br	114b0 <__alt_data_end+0xf00114b0>

00011554 <memmove>:
   11554:	2005883a 	mov	r2,r4
   11558:	29000b2e 	bgeu	r5,r4,11588 <memmove+0x34>
   1155c:	298f883a 	add	r7,r5,r6
   11560:	21c0092e 	bgeu	r4,r7,11588 <memmove+0x34>
   11564:	2187883a 	add	r3,r4,r6
   11568:	198bc83a 	sub	r5,r3,r6
   1156c:	30004826 	beq	r6,zero,11690 <memmove+0x13c>
   11570:	39ffffc4 	addi	r7,r7,-1
   11574:	39000003 	ldbu	r4,0(r7)
   11578:	18ffffc4 	addi	r3,r3,-1
   1157c:	19000005 	stb	r4,0(r3)
   11580:	28fffb1e 	bne	r5,r3,11570 <__alt_data_end+0xf0011570>
   11584:	f800283a 	ret
   11588:	00c003c4 	movi	r3,15
   1158c:	1980412e 	bgeu	r3,r6,11694 <memmove+0x140>
   11590:	2886b03a 	or	r3,r5,r2
   11594:	18c000cc 	andi	r3,r3,3
   11598:	1800401e 	bne	r3,zero,1169c <memmove+0x148>
   1159c:	33fffc04 	addi	r15,r6,-16
   115a0:	781ed13a 	srli	r15,r15,4
   115a4:	28c00104 	addi	r3,r5,4
   115a8:	13400104 	addi	r13,r2,4
   115ac:	781c913a 	slli	r14,r15,4
   115b0:	2b000204 	addi	r12,r5,8
   115b4:	12c00204 	addi	r11,r2,8
   115b8:	73800504 	addi	r14,r14,20
   115bc:	2a800304 	addi	r10,r5,12
   115c0:	12400304 	addi	r9,r2,12
   115c4:	2b9d883a 	add	r14,r5,r14
   115c8:	2811883a 	mov	r8,r5
   115cc:	100f883a 	mov	r7,r2
   115d0:	41000017 	ldw	r4,0(r8)
   115d4:	39c00404 	addi	r7,r7,16
   115d8:	18c00404 	addi	r3,r3,16
   115dc:	393ffc15 	stw	r4,-16(r7)
   115e0:	193ffc17 	ldw	r4,-16(r3)
   115e4:	6b400404 	addi	r13,r13,16
   115e8:	5ac00404 	addi	r11,r11,16
   115ec:	693ffc15 	stw	r4,-16(r13)
   115f0:	61000017 	ldw	r4,0(r12)
   115f4:	4a400404 	addi	r9,r9,16
   115f8:	42000404 	addi	r8,r8,16
   115fc:	593ffc15 	stw	r4,-16(r11)
   11600:	51000017 	ldw	r4,0(r10)
   11604:	63000404 	addi	r12,r12,16
   11608:	52800404 	addi	r10,r10,16
   1160c:	493ffc15 	stw	r4,-16(r9)
   11610:	1bbfef1e 	bne	r3,r14,115d0 <__alt_data_end+0xf00115d0>
   11614:	79000044 	addi	r4,r15,1
   11618:	2008913a 	slli	r4,r4,4
   1161c:	328003cc 	andi	r10,r6,15
   11620:	02c000c4 	movi	r11,3
   11624:	1107883a 	add	r3,r2,r4
   11628:	290b883a 	add	r5,r5,r4
   1162c:	5a801e2e 	bgeu	r11,r10,116a8 <memmove+0x154>
   11630:	1813883a 	mov	r9,r3
   11634:	2811883a 	mov	r8,r5
   11638:	500f883a 	mov	r7,r10
   1163c:	41000017 	ldw	r4,0(r8)
   11640:	4a400104 	addi	r9,r9,4
   11644:	39ffff04 	addi	r7,r7,-4
   11648:	493fff15 	stw	r4,-4(r9)
   1164c:	42000104 	addi	r8,r8,4
   11650:	59fffa36 	bltu	r11,r7,1163c <__alt_data_end+0xf001163c>
   11654:	513fff04 	addi	r4,r10,-4
   11658:	2008d0ba 	srli	r4,r4,2
   1165c:	318000cc 	andi	r6,r6,3
   11660:	21000044 	addi	r4,r4,1
   11664:	2109883a 	add	r4,r4,r4
   11668:	2109883a 	add	r4,r4,r4
   1166c:	1907883a 	add	r3,r3,r4
   11670:	290b883a 	add	r5,r5,r4
   11674:	30000b26 	beq	r6,zero,116a4 <memmove+0x150>
   11678:	198d883a 	add	r6,r3,r6
   1167c:	29c00003 	ldbu	r7,0(r5)
   11680:	18c00044 	addi	r3,r3,1
   11684:	29400044 	addi	r5,r5,1
   11688:	19ffffc5 	stb	r7,-1(r3)
   1168c:	19bffb1e 	bne	r3,r6,1167c <__alt_data_end+0xf001167c>
   11690:	f800283a 	ret
   11694:	1007883a 	mov	r3,r2
   11698:	003ff606 	br	11674 <__alt_data_end+0xf0011674>
   1169c:	1007883a 	mov	r3,r2
   116a0:	003ff506 	br	11678 <__alt_data_end+0xf0011678>
   116a4:	f800283a 	ret
   116a8:	500d883a 	mov	r6,r10
   116ac:	003ff106 	br	11674 <__alt_data_end+0xf0011674>

000116b0 <_Balloc>:
   116b0:	20801317 	ldw	r2,76(r4)
   116b4:	defffc04 	addi	sp,sp,-16
   116b8:	dc400115 	stw	r17,4(sp)
   116bc:	dc000015 	stw	r16,0(sp)
   116c0:	dfc00315 	stw	ra,12(sp)
   116c4:	dc800215 	stw	r18,8(sp)
   116c8:	2023883a 	mov	r17,r4
   116cc:	2821883a 	mov	r16,r5
   116d0:	10000f26 	beq	r2,zero,11710 <_Balloc+0x60>
   116d4:	8407883a 	add	r3,r16,r16
   116d8:	18c7883a 	add	r3,r3,r3
   116dc:	10c7883a 	add	r3,r2,r3
   116e0:	18800017 	ldw	r2,0(r3)
   116e4:	10001126 	beq	r2,zero,1172c <_Balloc+0x7c>
   116e8:	11000017 	ldw	r4,0(r2)
   116ec:	19000015 	stw	r4,0(r3)
   116f0:	10000415 	stw	zero,16(r2)
   116f4:	10000315 	stw	zero,12(r2)
   116f8:	dfc00317 	ldw	ra,12(sp)
   116fc:	dc800217 	ldw	r18,8(sp)
   11700:	dc400117 	ldw	r17,4(sp)
   11704:	dc000017 	ldw	r16,0(sp)
   11708:	dec00404 	addi	sp,sp,16
   1170c:	f800283a 	ret
   11710:	01800844 	movi	r6,33
   11714:	01400104 	movi	r5,4
   11718:	00159f80 	call	159f8 <_calloc_r>
   1171c:	88801315 	stw	r2,76(r17)
   11720:	103fec1e 	bne	r2,zero,116d4 <__alt_data_end+0xf00116d4>
   11724:	0005883a 	mov	r2,zero
   11728:	003ff306 	br	116f8 <__alt_data_end+0xf00116f8>
   1172c:	01400044 	movi	r5,1
   11730:	2c24983a 	sll	r18,r5,r16
   11734:	8809883a 	mov	r4,r17
   11738:	91800144 	addi	r6,r18,5
   1173c:	318d883a 	add	r6,r6,r6
   11740:	318d883a 	add	r6,r6,r6
   11744:	00159f80 	call	159f8 <_calloc_r>
   11748:	103ff626 	beq	r2,zero,11724 <__alt_data_end+0xf0011724>
   1174c:	14000115 	stw	r16,4(r2)
   11750:	14800215 	stw	r18,8(r2)
   11754:	003fe606 	br	116f0 <__alt_data_end+0xf00116f0>

00011758 <_Bfree>:
   11758:	28000826 	beq	r5,zero,1177c <_Bfree+0x24>
   1175c:	28c00117 	ldw	r3,4(r5)
   11760:	20801317 	ldw	r2,76(r4)
   11764:	18c7883a 	add	r3,r3,r3
   11768:	18c7883a 	add	r3,r3,r3
   1176c:	10c5883a 	add	r2,r2,r3
   11770:	10c00017 	ldw	r3,0(r2)
   11774:	28c00015 	stw	r3,0(r5)
   11778:	11400015 	stw	r5,0(r2)
   1177c:	f800283a 	ret

00011780 <__multadd>:
   11780:	defffa04 	addi	sp,sp,-24
   11784:	dc800315 	stw	r18,12(sp)
   11788:	dc400215 	stw	r17,8(sp)
   1178c:	dc000115 	stw	r16,4(sp)
   11790:	2823883a 	mov	r17,r5
   11794:	2c000417 	ldw	r16,16(r5)
   11798:	dfc00515 	stw	ra,20(sp)
   1179c:	dcc00415 	stw	r19,16(sp)
   117a0:	2025883a 	mov	r18,r4
   117a4:	29400504 	addi	r5,r5,20
   117a8:	0011883a 	mov	r8,zero
   117ac:	28c00017 	ldw	r3,0(r5)
   117b0:	29400104 	addi	r5,r5,4
   117b4:	42000044 	addi	r8,r8,1
   117b8:	18bfffcc 	andi	r2,r3,65535
   117bc:	1185383a 	mul	r2,r2,r6
   117c0:	1806d43a 	srli	r3,r3,16
   117c4:	11cf883a 	add	r7,r2,r7
   117c8:	3808d43a 	srli	r4,r7,16
   117cc:	1987383a 	mul	r3,r3,r6
   117d0:	38bfffcc 	andi	r2,r7,65535
   117d4:	1907883a 	add	r3,r3,r4
   117d8:	1808943a 	slli	r4,r3,16
   117dc:	180ed43a 	srli	r7,r3,16
   117e0:	2085883a 	add	r2,r4,r2
   117e4:	28bfff15 	stw	r2,-4(r5)
   117e8:	443ff016 	blt	r8,r16,117ac <__alt_data_end+0xf00117ac>
   117ec:	38000926 	beq	r7,zero,11814 <__multadd+0x94>
   117f0:	88800217 	ldw	r2,8(r17)
   117f4:	80800f0e 	bge	r16,r2,11834 <__multadd+0xb4>
   117f8:	80800144 	addi	r2,r16,5
   117fc:	1085883a 	add	r2,r2,r2
   11800:	1085883a 	add	r2,r2,r2
   11804:	8885883a 	add	r2,r17,r2
   11808:	11c00015 	stw	r7,0(r2)
   1180c:	84000044 	addi	r16,r16,1
   11810:	8c000415 	stw	r16,16(r17)
   11814:	8805883a 	mov	r2,r17
   11818:	dfc00517 	ldw	ra,20(sp)
   1181c:	dcc00417 	ldw	r19,16(sp)
   11820:	dc800317 	ldw	r18,12(sp)
   11824:	dc400217 	ldw	r17,8(sp)
   11828:	dc000117 	ldw	r16,4(sp)
   1182c:	dec00604 	addi	sp,sp,24
   11830:	f800283a 	ret
   11834:	89400117 	ldw	r5,4(r17)
   11838:	9009883a 	mov	r4,r18
   1183c:	d9c00015 	stw	r7,0(sp)
   11840:	29400044 	addi	r5,r5,1
   11844:	00116b00 	call	116b0 <_Balloc>
   11848:	89800417 	ldw	r6,16(r17)
   1184c:	89400304 	addi	r5,r17,12
   11850:	11000304 	addi	r4,r2,12
   11854:	31800084 	addi	r6,r6,2
   11858:	318d883a 	add	r6,r6,r6
   1185c:	318d883a 	add	r6,r6,r6
   11860:	1027883a 	mov	r19,r2
   11864:	000957c0 	call	957c <memcpy>
   11868:	d9c00017 	ldw	r7,0(sp)
   1186c:	88000a26 	beq	r17,zero,11898 <__multadd+0x118>
   11870:	88c00117 	ldw	r3,4(r17)
   11874:	90801317 	ldw	r2,76(r18)
   11878:	18c7883a 	add	r3,r3,r3
   1187c:	18c7883a 	add	r3,r3,r3
   11880:	10c5883a 	add	r2,r2,r3
   11884:	10c00017 	ldw	r3,0(r2)
   11888:	88c00015 	stw	r3,0(r17)
   1188c:	14400015 	stw	r17,0(r2)
   11890:	9823883a 	mov	r17,r19
   11894:	003fd806 	br	117f8 <__alt_data_end+0xf00117f8>
   11898:	9823883a 	mov	r17,r19
   1189c:	003fd606 	br	117f8 <__alt_data_end+0xf00117f8>

000118a0 <__s2b>:
   118a0:	defff904 	addi	sp,sp,-28
   118a4:	dc400115 	stw	r17,4(sp)
   118a8:	dc000015 	stw	r16,0(sp)
   118ac:	2023883a 	mov	r17,r4
   118b0:	2821883a 	mov	r16,r5
   118b4:	39000204 	addi	r4,r7,8
   118b8:	01400244 	movi	r5,9
   118bc:	dcc00315 	stw	r19,12(sp)
   118c0:	dc800215 	stw	r18,8(sp)
   118c4:	dfc00615 	stw	ra,24(sp)
   118c8:	dd400515 	stw	r21,20(sp)
   118cc:	dd000415 	stw	r20,16(sp)
   118d0:	3825883a 	mov	r18,r7
   118d4:	3027883a 	mov	r19,r6
   118d8:	000934c0 	call	934c <__divsi3>
   118dc:	00c00044 	movi	r3,1
   118e0:	000b883a 	mov	r5,zero
   118e4:	1880030e 	bge	r3,r2,118f4 <__s2b+0x54>
   118e8:	18c7883a 	add	r3,r3,r3
   118ec:	29400044 	addi	r5,r5,1
   118f0:	18bffd16 	blt	r3,r2,118e8 <__alt_data_end+0xf00118e8>
   118f4:	8809883a 	mov	r4,r17
   118f8:	00116b00 	call	116b0 <_Balloc>
   118fc:	d8c00717 	ldw	r3,28(sp)
   11900:	10c00515 	stw	r3,20(r2)
   11904:	00c00044 	movi	r3,1
   11908:	10c00415 	stw	r3,16(r2)
   1190c:	00c00244 	movi	r3,9
   11910:	1cc0210e 	bge	r3,r19,11998 <__s2b+0xf8>
   11914:	80eb883a 	add	r21,r16,r3
   11918:	a829883a 	mov	r20,r21
   1191c:	84e1883a 	add	r16,r16,r19
   11920:	a1c00007 	ldb	r7,0(r20)
   11924:	01800284 	movi	r6,10
   11928:	a5000044 	addi	r20,r20,1
   1192c:	100b883a 	mov	r5,r2
   11930:	39fff404 	addi	r7,r7,-48
   11934:	8809883a 	mov	r4,r17
   11938:	00117800 	call	11780 <__multadd>
   1193c:	a43ff81e 	bne	r20,r16,11920 <__alt_data_end+0xf0011920>
   11940:	ace1883a 	add	r16,r21,r19
   11944:	843ffe04 	addi	r16,r16,-8
   11948:	9c800a0e 	bge	r19,r18,11974 <__s2b+0xd4>
   1194c:	94e5c83a 	sub	r18,r18,r19
   11950:	84a5883a 	add	r18,r16,r18
   11954:	81c00007 	ldb	r7,0(r16)
   11958:	01800284 	movi	r6,10
   1195c:	84000044 	addi	r16,r16,1
   11960:	100b883a 	mov	r5,r2
   11964:	39fff404 	addi	r7,r7,-48
   11968:	8809883a 	mov	r4,r17
   1196c:	00117800 	call	11780 <__multadd>
   11970:	84bff81e 	bne	r16,r18,11954 <__alt_data_end+0xf0011954>
   11974:	dfc00617 	ldw	ra,24(sp)
   11978:	dd400517 	ldw	r21,20(sp)
   1197c:	dd000417 	ldw	r20,16(sp)
   11980:	dcc00317 	ldw	r19,12(sp)
   11984:	dc800217 	ldw	r18,8(sp)
   11988:	dc400117 	ldw	r17,4(sp)
   1198c:	dc000017 	ldw	r16,0(sp)
   11990:	dec00704 	addi	sp,sp,28
   11994:	f800283a 	ret
   11998:	84000284 	addi	r16,r16,10
   1199c:	1827883a 	mov	r19,r3
   119a0:	003fe906 	br	11948 <__alt_data_end+0xf0011948>

000119a4 <__hi0bits>:
   119a4:	20bfffec 	andhi	r2,r4,65535
   119a8:	1000141e 	bne	r2,zero,119fc <__hi0bits+0x58>
   119ac:	2008943a 	slli	r4,r4,16
   119b0:	00800404 	movi	r2,16
   119b4:	20ffc02c 	andhi	r3,r4,65280
   119b8:	1800021e 	bne	r3,zero,119c4 <__hi0bits+0x20>
   119bc:	2008923a 	slli	r4,r4,8
   119c0:	10800204 	addi	r2,r2,8
   119c4:	20fc002c 	andhi	r3,r4,61440
   119c8:	1800021e 	bne	r3,zero,119d4 <__hi0bits+0x30>
   119cc:	2008913a 	slli	r4,r4,4
   119d0:	10800104 	addi	r2,r2,4
   119d4:	20f0002c 	andhi	r3,r4,49152
   119d8:	1800031e 	bne	r3,zero,119e8 <__hi0bits+0x44>
   119dc:	2109883a 	add	r4,r4,r4
   119e0:	10800084 	addi	r2,r2,2
   119e4:	2109883a 	add	r4,r4,r4
   119e8:	20000316 	blt	r4,zero,119f8 <__hi0bits+0x54>
   119ec:	2110002c 	andhi	r4,r4,16384
   119f0:	2000041e 	bne	r4,zero,11a04 <__hi0bits+0x60>
   119f4:	00800804 	movi	r2,32
   119f8:	f800283a 	ret
   119fc:	0005883a 	mov	r2,zero
   11a00:	003fec06 	br	119b4 <__alt_data_end+0xf00119b4>
   11a04:	10800044 	addi	r2,r2,1
   11a08:	f800283a 	ret

00011a0c <__lo0bits>:
   11a0c:	20c00017 	ldw	r3,0(r4)
   11a10:	188001cc 	andi	r2,r3,7
   11a14:	10000826 	beq	r2,zero,11a38 <__lo0bits+0x2c>
   11a18:	1880004c 	andi	r2,r3,1
   11a1c:	1000211e 	bne	r2,zero,11aa4 <__lo0bits+0x98>
   11a20:	1880008c 	andi	r2,r3,2
   11a24:	1000211e 	bne	r2,zero,11aac <__lo0bits+0xa0>
   11a28:	1806d0ba 	srli	r3,r3,2
   11a2c:	00800084 	movi	r2,2
   11a30:	20c00015 	stw	r3,0(r4)
   11a34:	f800283a 	ret
   11a38:	18bfffcc 	andi	r2,r3,65535
   11a3c:	10001326 	beq	r2,zero,11a8c <__lo0bits+0x80>
   11a40:	0005883a 	mov	r2,zero
   11a44:	19403fcc 	andi	r5,r3,255
   11a48:	2800021e 	bne	r5,zero,11a54 <__lo0bits+0x48>
   11a4c:	1806d23a 	srli	r3,r3,8
   11a50:	10800204 	addi	r2,r2,8
   11a54:	194003cc 	andi	r5,r3,15
   11a58:	2800021e 	bne	r5,zero,11a64 <__lo0bits+0x58>
   11a5c:	1806d13a 	srli	r3,r3,4
   11a60:	10800104 	addi	r2,r2,4
   11a64:	194000cc 	andi	r5,r3,3
   11a68:	2800021e 	bne	r5,zero,11a74 <__lo0bits+0x68>
   11a6c:	1806d0ba 	srli	r3,r3,2
   11a70:	10800084 	addi	r2,r2,2
   11a74:	1940004c 	andi	r5,r3,1
   11a78:	2800081e 	bne	r5,zero,11a9c <__lo0bits+0x90>
   11a7c:	1806d07a 	srli	r3,r3,1
   11a80:	1800051e 	bne	r3,zero,11a98 <__lo0bits+0x8c>
   11a84:	00800804 	movi	r2,32
   11a88:	f800283a 	ret
   11a8c:	1806d43a 	srli	r3,r3,16
   11a90:	00800404 	movi	r2,16
   11a94:	003feb06 	br	11a44 <__alt_data_end+0xf0011a44>
   11a98:	10800044 	addi	r2,r2,1
   11a9c:	20c00015 	stw	r3,0(r4)
   11aa0:	f800283a 	ret
   11aa4:	0005883a 	mov	r2,zero
   11aa8:	f800283a 	ret
   11aac:	1806d07a 	srli	r3,r3,1
   11ab0:	00800044 	movi	r2,1
   11ab4:	20c00015 	stw	r3,0(r4)
   11ab8:	f800283a 	ret

00011abc <__i2b>:
   11abc:	defffd04 	addi	sp,sp,-12
   11ac0:	dc000015 	stw	r16,0(sp)
   11ac4:	04000044 	movi	r16,1
   11ac8:	dc400115 	stw	r17,4(sp)
   11acc:	2823883a 	mov	r17,r5
   11ad0:	800b883a 	mov	r5,r16
   11ad4:	dfc00215 	stw	ra,8(sp)
   11ad8:	00116b00 	call	116b0 <_Balloc>
   11adc:	14400515 	stw	r17,20(r2)
   11ae0:	14000415 	stw	r16,16(r2)
   11ae4:	dfc00217 	ldw	ra,8(sp)
   11ae8:	dc400117 	ldw	r17,4(sp)
   11aec:	dc000017 	ldw	r16,0(sp)
   11af0:	dec00304 	addi	sp,sp,12
   11af4:	f800283a 	ret

00011af8 <__multiply>:
   11af8:	defffa04 	addi	sp,sp,-24
   11afc:	dcc00315 	stw	r19,12(sp)
   11b00:	dc800215 	stw	r18,8(sp)
   11b04:	34c00417 	ldw	r19,16(r6)
   11b08:	2c800417 	ldw	r18,16(r5)
   11b0c:	dd000415 	stw	r20,16(sp)
   11b10:	dc400115 	stw	r17,4(sp)
   11b14:	dfc00515 	stw	ra,20(sp)
   11b18:	dc000015 	stw	r16,0(sp)
   11b1c:	2829883a 	mov	r20,r5
   11b20:	3023883a 	mov	r17,r6
   11b24:	94c0050e 	bge	r18,r19,11b3c <__multiply+0x44>
   11b28:	9007883a 	mov	r3,r18
   11b2c:	3029883a 	mov	r20,r6
   11b30:	9825883a 	mov	r18,r19
   11b34:	2823883a 	mov	r17,r5
   11b38:	1827883a 	mov	r19,r3
   11b3c:	a0800217 	ldw	r2,8(r20)
   11b40:	94e1883a 	add	r16,r18,r19
   11b44:	a1400117 	ldw	r5,4(r20)
   11b48:	1400010e 	bge	r2,r16,11b50 <__multiply+0x58>
   11b4c:	29400044 	addi	r5,r5,1
   11b50:	00116b00 	call	116b0 <_Balloc>
   11b54:	8415883a 	add	r10,r16,r16
   11b58:	12c00504 	addi	r11,r2,20
   11b5c:	5295883a 	add	r10,r10,r10
   11b60:	5a95883a 	add	r10,r11,r10
   11b64:	5807883a 	mov	r3,r11
   11b68:	5a80032e 	bgeu	r11,r10,11b78 <__multiply+0x80>
   11b6c:	18000015 	stw	zero,0(r3)
   11b70:	18c00104 	addi	r3,r3,4
   11b74:	1abffd36 	bltu	r3,r10,11b6c <__alt_data_end+0xf0011b6c>
   11b78:	9ce7883a 	add	r19,r19,r19
   11b7c:	94a5883a 	add	r18,r18,r18
   11b80:	89800504 	addi	r6,r17,20
   11b84:	9ce7883a 	add	r19,r19,r19
   11b88:	a3400504 	addi	r13,r20,20
   11b8c:	94a5883a 	add	r18,r18,r18
   11b90:	34d9883a 	add	r12,r6,r19
   11b94:	6c93883a 	add	r9,r13,r18
   11b98:	3300422e 	bgeu	r6,r12,11ca4 <__multiply+0x1ac>
   11b9c:	37c00017 	ldw	ra,0(r6)
   11ba0:	fbffffcc 	andi	r15,ra,65535
   11ba4:	78001b26 	beq	r15,zero,11c14 <__multiply+0x11c>
   11ba8:	5811883a 	mov	r8,r11
   11bac:	681d883a 	mov	r14,r13
   11bb0:	000f883a 	mov	r7,zero
   11bb4:	71000017 	ldw	r4,0(r14)
   11bb8:	40c00017 	ldw	r3,0(r8)
   11bbc:	73800104 	addi	r14,r14,4
   11bc0:	217fffcc 	andi	r5,r4,65535
   11bc4:	2bcb383a 	mul	r5,r5,r15
   11bc8:	2008d43a 	srli	r4,r4,16
   11bcc:	1c7fffcc 	andi	r17,r3,65535
   11bd0:	2c4b883a 	add	r5,r5,r17
   11bd4:	29cb883a 	add	r5,r5,r7
   11bd8:	23c9383a 	mul	r4,r4,r15
   11bdc:	1806d43a 	srli	r3,r3,16
   11be0:	280ed43a 	srli	r7,r5,16
   11be4:	297fffcc 	andi	r5,r5,65535
   11be8:	20c7883a 	add	r3,r4,r3
   11bec:	19c7883a 	add	r3,r3,r7
   11bf0:	1808943a 	slli	r4,r3,16
   11bf4:	4023883a 	mov	r17,r8
   11bf8:	180ed43a 	srli	r7,r3,16
   11bfc:	214ab03a 	or	r5,r4,r5
   11c00:	41400015 	stw	r5,0(r8)
   11c04:	42000104 	addi	r8,r8,4
   11c08:	727fea36 	bltu	r14,r9,11bb4 <__alt_data_end+0xf0011bb4>
   11c0c:	89c00115 	stw	r7,4(r17)
   11c10:	37c00017 	ldw	ra,0(r6)
   11c14:	f83ed43a 	srli	ra,ra,16
   11c18:	f8001f26 	beq	ra,zero,11c98 <__multiply+0x1a0>
   11c1c:	58c00017 	ldw	r3,0(r11)
   11c20:	681d883a 	mov	r14,r13
   11c24:	581f883a 	mov	r15,r11
   11c28:	1811883a 	mov	r8,r3
   11c2c:	5825883a 	mov	r18,r11
   11c30:	000f883a 	mov	r7,zero
   11c34:	00000106 	br	11c3c <__multiply+0x144>
   11c38:	8825883a 	mov	r18,r17
   11c3c:	7140000b 	ldhu	r5,0(r14)
   11c40:	4010d43a 	srli	r8,r8,16
   11c44:	193fffcc 	andi	r4,r3,65535
   11c48:	2fcb383a 	mul	r5,r5,ra
   11c4c:	7bc00104 	addi	r15,r15,4
   11c50:	73800104 	addi	r14,r14,4
   11c54:	2a0b883a 	add	r5,r5,r8
   11c58:	29cb883a 	add	r5,r5,r7
   11c5c:	2806943a 	slli	r3,r5,16
   11c60:	94400104 	addi	r17,r18,4
   11c64:	280ad43a 	srli	r5,r5,16
   11c68:	1908b03a 	or	r4,r3,r4
   11c6c:	793fff15 	stw	r4,-4(r15)
   11c70:	70ffff17 	ldw	r3,-4(r14)
   11c74:	8a000017 	ldw	r8,0(r17)
   11c78:	1806d43a 	srli	r3,r3,16
   11c7c:	413fffcc 	andi	r4,r8,65535
   11c80:	1fc7383a 	mul	r3,r3,ra
   11c84:	1907883a 	add	r3,r3,r4
   11c88:	1947883a 	add	r3,r3,r5
   11c8c:	180ed43a 	srli	r7,r3,16
   11c90:	727fe936 	bltu	r14,r9,11c38 <__alt_data_end+0xf0011c38>
   11c94:	90c00115 	stw	r3,4(r18)
   11c98:	31800104 	addi	r6,r6,4
   11c9c:	5ac00104 	addi	r11,r11,4
   11ca0:	333fbe36 	bltu	r6,r12,11b9c <__alt_data_end+0xf0011b9c>
   11ca4:	0400090e 	bge	zero,r16,11ccc <__multiply+0x1d4>
   11ca8:	50ffff17 	ldw	r3,-4(r10)
   11cac:	52bfff04 	addi	r10,r10,-4
   11cb0:	18000326 	beq	r3,zero,11cc0 <__multiply+0x1c8>
   11cb4:	00000506 	br	11ccc <__multiply+0x1d4>
   11cb8:	50c00017 	ldw	r3,0(r10)
   11cbc:	1800031e 	bne	r3,zero,11ccc <__multiply+0x1d4>
   11cc0:	843fffc4 	addi	r16,r16,-1
   11cc4:	52bfff04 	addi	r10,r10,-4
   11cc8:	803ffb1e 	bne	r16,zero,11cb8 <__alt_data_end+0xf0011cb8>
   11ccc:	14000415 	stw	r16,16(r2)
   11cd0:	dfc00517 	ldw	ra,20(sp)
   11cd4:	dd000417 	ldw	r20,16(sp)
   11cd8:	dcc00317 	ldw	r19,12(sp)
   11cdc:	dc800217 	ldw	r18,8(sp)
   11ce0:	dc400117 	ldw	r17,4(sp)
   11ce4:	dc000017 	ldw	r16,0(sp)
   11ce8:	dec00604 	addi	sp,sp,24
   11cec:	f800283a 	ret

00011cf0 <__pow5mult>:
   11cf0:	defffa04 	addi	sp,sp,-24
   11cf4:	dcc00315 	stw	r19,12(sp)
   11cf8:	dc000015 	stw	r16,0(sp)
   11cfc:	dfc00515 	stw	ra,20(sp)
   11d00:	dd000415 	stw	r20,16(sp)
   11d04:	dc800215 	stw	r18,8(sp)
   11d08:	dc400115 	stw	r17,4(sp)
   11d0c:	308000cc 	andi	r2,r6,3
   11d10:	3021883a 	mov	r16,r6
   11d14:	2027883a 	mov	r19,r4
   11d18:	10002f1e 	bne	r2,zero,11dd8 <__pow5mult+0xe8>
   11d1c:	2825883a 	mov	r18,r5
   11d20:	8021d0ba 	srai	r16,r16,2
   11d24:	80001a26 	beq	r16,zero,11d90 <__pow5mult+0xa0>
   11d28:	9c401217 	ldw	r17,72(r19)
   11d2c:	8800061e 	bne	r17,zero,11d48 <__pow5mult+0x58>
   11d30:	00003406 	br	11e04 <__pow5mult+0x114>
   11d34:	8021d07a 	srai	r16,r16,1
   11d38:	80001526 	beq	r16,zero,11d90 <__pow5mult+0xa0>
   11d3c:	88800017 	ldw	r2,0(r17)
   11d40:	10001c26 	beq	r2,zero,11db4 <__pow5mult+0xc4>
   11d44:	1023883a 	mov	r17,r2
   11d48:	8080004c 	andi	r2,r16,1
   11d4c:	103ff926 	beq	r2,zero,11d34 <__alt_data_end+0xf0011d34>
   11d50:	880d883a 	mov	r6,r17
   11d54:	900b883a 	mov	r5,r18
   11d58:	9809883a 	mov	r4,r19
   11d5c:	0011af80 	call	11af8 <__multiply>
   11d60:	90001b26 	beq	r18,zero,11dd0 <__pow5mult+0xe0>
   11d64:	91000117 	ldw	r4,4(r18)
   11d68:	98c01317 	ldw	r3,76(r19)
   11d6c:	8021d07a 	srai	r16,r16,1
   11d70:	2109883a 	add	r4,r4,r4
   11d74:	2109883a 	add	r4,r4,r4
   11d78:	1907883a 	add	r3,r3,r4
   11d7c:	19000017 	ldw	r4,0(r3)
   11d80:	91000015 	stw	r4,0(r18)
   11d84:	1c800015 	stw	r18,0(r3)
   11d88:	1025883a 	mov	r18,r2
   11d8c:	803feb1e 	bne	r16,zero,11d3c <__alt_data_end+0xf0011d3c>
   11d90:	9005883a 	mov	r2,r18
   11d94:	dfc00517 	ldw	ra,20(sp)
   11d98:	dd000417 	ldw	r20,16(sp)
   11d9c:	dcc00317 	ldw	r19,12(sp)
   11da0:	dc800217 	ldw	r18,8(sp)
   11da4:	dc400117 	ldw	r17,4(sp)
   11da8:	dc000017 	ldw	r16,0(sp)
   11dac:	dec00604 	addi	sp,sp,24
   11db0:	f800283a 	ret
   11db4:	880d883a 	mov	r6,r17
   11db8:	880b883a 	mov	r5,r17
   11dbc:	9809883a 	mov	r4,r19
   11dc0:	0011af80 	call	11af8 <__multiply>
   11dc4:	88800015 	stw	r2,0(r17)
   11dc8:	10000015 	stw	zero,0(r2)
   11dcc:	003fdd06 	br	11d44 <__alt_data_end+0xf0011d44>
   11dd0:	1025883a 	mov	r18,r2
   11dd4:	003fd706 	br	11d34 <__alt_data_end+0xf0011d34>
   11dd8:	10bfffc4 	addi	r2,r2,-1
   11ddc:	1085883a 	add	r2,r2,r2
   11de0:	00c20034 	movhi	r3,2048
   11de4:	18c10604 	addi	r3,r3,1048
   11de8:	1085883a 	add	r2,r2,r2
   11dec:	1885883a 	add	r2,r3,r2
   11df0:	11800017 	ldw	r6,0(r2)
   11df4:	000f883a 	mov	r7,zero
   11df8:	00117800 	call	11780 <__multadd>
   11dfc:	1025883a 	mov	r18,r2
   11e00:	003fc706 	br	11d20 <__alt_data_end+0xf0011d20>
   11e04:	05000044 	movi	r20,1
   11e08:	a00b883a 	mov	r5,r20
   11e0c:	9809883a 	mov	r4,r19
   11e10:	00116b00 	call	116b0 <_Balloc>
   11e14:	1023883a 	mov	r17,r2
   11e18:	00809c44 	movi	r2,625
   11e1c:	88800515 	stw	r2,20(r17)
   11e20:	8d000415 	stw	r20,16(r17)
   11e24:	9c401215 	stw	r17,72(r19)
   11e28:	88000015 	stw	zero,0(r17)
   11e2c:	003fc606 	br	11d48 <__alt_data_end+0xf0011d48>

00011e30 <__lshift>:
   11e30:	defff904 	addi	sp,sp,-28
   11e34:	dd400515 	stw	r21,20(sp)
   11e38:	dcc00315 	stw	r19,12(sp)
   11e3c:	302bd17a 	srai	r21,r6,5
   11e40:	2cc00417 	ldw	r19,16(r5)
   11e44:	28800217 	ldw	r2,8(r5)
   11e48:	dd000415 	stw	r20,16(sp)
   11e4c:	ace7883a 	add	r19,r21,r19
   11e50:	dc800215 	stw	r18,8(sp)
   11e54:	dc400115 	stw	r17,4(sp)
   11e58:	dc000015 	stw	r16,0(sp)
   11e5c:	dfc00615 	stw	ra,24(sp)
   11e60:	9c000044 	addi	r16,r19,1
   11e64:	2823883a 	mov	r17,r5
   11e68:	3029883a 	mov	r20,r6
   11e6c:	2025883a 	mov	r18,r4
   11e70:	29400117 	ldw	r5,4(r5)
   11e74:	1400030e 	bge	r2,r16,11e84 <__lshift+0x54>
   11e78:	1085883a 	add	r2,r2,r2
   11e7c:	29400044 	addi	r5,r5,1
   11e80:	143ffd16 	blt	r2,r16,11e78 <__alt_data_end+0xf0011e78>
   11e84:	9009883a 	mov	r4,r18
   11e88:	00116b00 	call	116b0 <_Balloc>
   11e8c:	10c00504 	addi	r3,r2,20
   11e90:	0540070e 	bge	zero,r21,11eb0 <__lshift+0x80>
   11e94:	ad6b883a 	add	r21,r21,r21
   11e98:	ad6b883a 	add	r21,r21,r21
   11e9c:	1809883a 	mov	r4,r3
   11ea0:	1d47883a 	add	r3,r3,r21
   11ea4:	20000015 	stw	zero,0(r4)
   11ea8:	21000104 	addi	r4,r4,4
   11eac:	193ffd1e 	bne	r3,r4,11ea4 <__alt_data_end+0xf0011ea4>
   11eb0:	8a000417 	ldw	r8,16(r17)
   11eb4:	89000504 	addi	r4,r17,20
   11eb8:	a18007cc 	andi	r6,r20,31
   11ebc:	4211883a 	add	r8,r8,r8
   11ec0:	4211883a 	add	r8,r8,r8
   11ec4:	2211883a 	add	r8,r4,r8
   11ec8:	30002326 	beq	r6,zero,11f58 <__lshift+0x128>
   11ecc:	02400804 	movi	r9,32
   11ed0:	4993c83a 	sub	r9,r9,r6
   11ed4:	000b883a 	mov	r5,zero
   11ed8:	21c00017 	ldw	r7,0(r4)
   11edc:	1815883a 	mov	r10,r3
   11ee0:	18c00104 	addi	r3,r3,4
   11ee4:	398e983a 	sll	r7,r7,r6
   11ee8:	21000104 	addi	r4,r4,4
   11eec:	394ab03a 	or	r5,r7,r5
   11ef0:	197fff15 	stw	r5,-4(r3)
   11ef4:	217fff17 	ldw	r5,-4(r4)
   11ef8:	2a4ad83a 	srl	r5,r5,r9
   11efc:	223ff636 	bltu	r4,r8,11ed8 <__alt_data_end+0xf0011ed8>
   11f00:	51400115 	stw	r5,4(r10)
   11f04:	28001a1e 	bne	r5,zero,11f70 <__lshift+0x140>
   11f08:	843fffc4 	addi	r16,r16,-1
   11f0c:	14000415 	stw	r16,16(r2)
   11f10:	88000826 	beq	r17,zero,11f34 <__lshift+0x104>
   11f14:	89000117 	ldw	r4,4(r17)
   11f18:	90c01317 	ldw	r3,76(r18)
   11f1c:	2109883a 	add	r4,r4,r4
   11f20:	2109883a 	add	r4,r4,r4
   11f24:	1907883a 	add	r3,r3,r4
   11f28:	19000017 	ldw	r4,0(r3)
   11f2c:	89000015 	stw	r4,0(r17)
   11f30:	1c400015 	stw	r17,0(r3)
   11f34:	dfc00617 	ldw	ra,24(sp)
   11f38:	dd400517 	ldw	r21,20(sp)
   11f3c:	dd000417 	ldw	r20,16(sp)
   11f40:	dcc00317 	ldw	r19,12(sp)
   11f44:	dc800217 	ldw	r18,8(sp)
   11f48:	dc400117 	ldw	r17,4(sp)
   11f4c:	dc000017 	ldw	r16,0(sp)
   11f50:	dec00704 	addi	sp,sp,28
   11f54:	f800283a 	ret
   11f58:	21400017 	ldw	r5,0(r4)
   11f5c:	18c00104 	addi	r3,r3,4
   11f60:	21000104 	addi	r4,r4,4
   11f64:	197fff15 	stw	r5,-4(r3)
   11f68:	223ffb36 	bltu	r4,r8,11f58 <__alt_data_end+0xf0011f58>
   11f6c:	003fe606 	br	11f08 <__alt_data_end+0xf0011f08>
   11f70:	9c000084 	addi	r16,r19,2
   11f74:	003fe406 	br	11f08 <__alt_data_end+0xf0011f08>

00011f78 <__mcmp>:
   11f78:	20800417 	ldw	r2,16(r4)
   11f7c:	28c00417 	ldw	r3,16(r5)
   11f80:	10c5c83a 	sub	r2,r2,r3
   11f84:	1000111e 	bne	r2,zero,11fcc <__mcmp+0x54>
   11f88:	18c7883a 	add	r3,r3,r3
   11f8c:	18c7883a 	add	r3,r3,r3
   11f90:	21000504 	addi	r4,r4,20
   11f94:	29400504 	addi	r5,r5,20
   11f98:	20c5883a 	add	r2,r4,r3
   11f9c:	28cb883a 	add	r5,r5,r3
   11fa0:	00000106 	br	11fa8 <__mcmp+0x30>
   11fa4:	20800a2e 	bgeu	r4,r2,11fd0 <__mcmp+0x58>
   11fa8:	10bfff04 	addi	r2,r2,-4
   11fac:	297fff04 	addi	r5,r5,-4
   11fb0:	11800017 	ldw	r6,0(r2)
   11fb4:	28c00017 	ldw	r3,0(r5)
   11fb8:	30fffa26 	beq	r6,r3,11fa4 <__alt_data_end+0xf0011fa4>
   11fbc:	30c00236 	bltu	r6,r3,11fc8 <__mcmp+0x50>
   11fc0:	00800044 	movi	r2,1
   11fc4:	f800283a 	ret
   11fc8:	00bfffc4 	movi	r2,-1
   11fcc:	f800283a 	ret
   11fd0:	0005883a 	mov	r2,zero
   11fd4:	f800283a 	ret

00011fd8 <__mdiff>:
   11fd8:	28c00417 	ldw	r3,16(r5)
   11fdc:	30800417 	ldw	r2,16(r6)
   11fe0:	defffa04 	addi	sp,sp,-24
   11fe4:	dcc00315 	stw	r19,12(sp)
   11fe8:	dc800215 	stw	r18,8(sp)
   11fec:	dfc00515 	stw	ra,20(sp)
   11ff0:	dd000415 	stw	r20,16(sp)
   11ff4:	dc400115 	stw	r17,4(sp)
   11ff8:	dc000015 	stw	r16,0(sp)
   11ffc:	1887c83a 	sub	r3,r3,r2
   12000:	2825883a 	mov	r18,r5
   12004:	3027883a 	mov	r19,r6
   12008:	1800141e 	bne	r3,zero,1205c <__mdiff+0x84>
   1200c:	1085883a 	add	r2,r2,r2
   12010:	1085883a 	add	r2,r2,r2
   12014:	2a000504 	addi	r8,r5,20
   12018:	34000504 	addi	r16,r6,20
   1201c:	4087883a 	add	r3,r8,r2
   12020:	8085883a 	add	r2,r16,r2
   12024:	00000106 	br	1202c <__mdiff+0x54>
   12028:	40c0592e 	bgeu	r8,r3,12190 <__mdiff+0x1b8>
   1202c:	18ffff04 	addi	r3,r3,-4
   12030:	10bfff04 	addi	r2,r2,-4
   12034:	19c00017 	ldw	r7,0(r3)
   12038:	11400017 	ldw	r5,0(r2)
   1203c:	397ffa26 	beq	r7,r5,12028 <__alt_data_end+0xf0012028>
   12040:	3940592e 	bgeu	r7,r5,121a8 <__mdiff+0x1d0>
   12044:	9005883a 	mov	r2,r18
   12048:	4023883a 	mov	r17,r8
   1204c:	9825883a 	mov	r18,r19
   12050:	05000044 	movi	r20,1
   12054:	1027883a 	mov	r19,r2
   12058:	00000406 	br	1206c <__mdiff+0x94>
   1205c:	18005616 	blt	r3,zero,121b8 <__mdiff+0x1e0>
   12060:	34400504 	addi	r17,r6,20
   12064:	2c000504 	addi	r16,r5,20
   12068:	0029883a 	mov	r20,zero
   1206c:	91400117 	ldw	r5,4(r18)
   12070:	00116b00 	call	116b0 <_Balloc>
   12074:	92400417 	ldw	r9,16(r18)
   12078:	9b000417 	ldw	r12,16(r19)
   1207c:	12c00504 	addi	r11,r2,20
   12080:	4a51883a 	add	r8,r9,r9
   12084:	6319883a 	add	r12,r12,r12
   12088:	4211883a 	add	r8,r8,r8
   1208c:	6319883a 	add	r12,r12,r12
   12090:	15000315 	stw	r20,12(r2)
   12094:	8211883a 	add	r8,r16,r8
   12098:	8b19883a 	add	r12,r17,r12
   1209c:	0007883a 	mov	r3,zero
   120a0:	81400017 	ldw	r5,0(r16)
   120a4:	89c00017 	ldw	r7,0(r17)
   120a8:	59800104 	addi	r6,r11,4
   120ac:	293fffcc 	andi	r4,r5,65535
   120b0:	20c7883a 	add	r3,r4,r3
   120b4:	393fffcc 	andi	r4,r7,65535
   120b8:	1909c83a 	sub	r4,r3,r4
   120bc:	280ad43a 	srli	r5,r5,16
   120c0:	380ed43a 	srli	r7,r7,16
   120c4:	2007d43a 	srai	r3,r4,16
   120c8:	213fffcc 	andi	r4,r4,65535
   120cc:	29cbc83a 	sub	r5,r5,r7
   120d0:	28c7883a 	add	r3,r5,r3
   120d4:	180a943a 	slli	r5,r3,16
   120d8:	8c400104 	addi	r17,r17,4
   120dc:	84000104 	addi	r16,r16,4
   120e0:	2908b03a 	or	r4,r5,r4
   120e4:	59000015 	stw	r4,0(r11)
   120e8:	1807d43a 	srai	r3,r3,16
   120ec:	3015883a 	mov	r10,r6
   120f0:	3017883a 	mov	r11,r6
   120f4:	8b3fea36 	bltu	r17,r12,120a0 <__alt_data_end+0xf00120a0>
   120f8:	8200162e 	bgeu	r16,r8,12154 <__mdiff+0x17c>
   120fc:	8017883a 	mov	r11,r16
   12100:	59400017 	ldw	r5,0(r11)
   12104:	31800104 	addi	r6,r6,4
   12108:	5ac00104 	addi	r11,r11,4
   1210c:	293fffcc 	andi	r4,r5,65535
   12110:	20c7883a 	add	r3,r4,r3
   12114:	280ed43a 	srli	r7,r5,16
   12118:	180bd43a 	srai	r5,r3,16
   1211c:	193fffcc 	andi	r4,r3,65535
   12120:	3947883a 	add	r3,r7,r5
   12124:	180a943a 	slli	r5,r3,16
   12128:	1807d43a 	srai	r3,r3,16
   1212c:	2908b03a 	or	r4,r5,r4
   12130:	313fff15 	stw	r4,-4(r6)
   12134:	5a3ff236 	bltu	r11,r8,12100 <__alt_data_end+0xf0012100>
   12138:	0406303a 	nor	r3,zero,r16
   1213c:	1a07883a 	add	r3,r3,r8
   12140:	1806d0ba 	srli	r3,r3,2
   12144:	18c00044 	addi	r3,r3,1
   12148:	18c7883a 	add	r3,r3,r3
   1214c:	18c7883a 	add	r3,r3,r3
   12150:	50d5883a 	add	r10,r10,r3
   12154:	50ffff04 	addi	r3,r10,-4
   12158:	2000041e 	bne	r4,zero,1216c <__mdiff+0x194>
   1215c:	18ffff04 	addi	r3,r3,-4
   12160:	19000017 	ldw	r4,0(r3)
   12164:	4a7fffc4 	addi	r9,r9,-1
   12168:	203ffc26 	beq	r4,zero,1215c <__alt_data_end+0xf001215c>
   1216c:	12400415 	stw	r9,16(r2)
   12170:	dfc00517 	ldw	ra,20(sp)
   12174:	dd000417 	ldw	r20,16(sp)
   12178:	dcc00317 	ldw	r19,12(sp)
   1217c:	dc800217 	ldw	r18,8(sp)
   12180:	dc400117 	ldw	r17,4(sp)
   12184:	dc000017 	ldw	r16,0(sp)
   12188:	dec00604 	addi	sp,sp,24
   1218c:	f800283a 	ret
   12190:	000b883a 	mov	r5,zero
   12194:	00116b00 	call	116b0 <_Balloc>
   12198:	00c00044 	movi	r3,1
   1219c:	10c00415 	stw	r3,16(r2)
   121a0:	10000515 	stw	zero,20(r2)
   121a4:	003ff206 	br	12170 <__alt_data_end+0xf0012170>
   121a8:	8023883a 	mov	r17,r16
   121ac:	0029883a 	mov	r20,zero
   121b0:	4021883a 	mov	r16,r8
   121b4:	003fad06 	br	1206c <__alt_data_end+0xf001206c>
   121b8:	9005883a 	mov	r2,r18
   121bc:	94400504 	addi	r17,r18,20
   121c0:	9c000504 	addi	r16,r19,20
   121c4:	9825883a 	mov	r18,r19
   121c8:	05000044 	movi	r20,1
   121cc:	1027883a 	mov	r19,r2
   121d0:	003fa606 	br	1206c <__alt_data_end+0xf001206c>

000121d4 <__ulp>:
   121d4:	295ffc2c 	andhi	r5,r5,32752
   121d8:	00bf3034 	movhi	r2,64704
   121dc:	2887883a 	add	r3,r5,r2
   121e0:	00c0020e 	bge	zero,r3,121ec <__ulp+0x18>
   121e4:	0005883a 	mov	r2,zero
   121e8:	f800283a 	ret
   121ec:	00c7c83a 	sub	r3,zero,r3
   121f0:	1807d53a 	srai	r3,r3,20
   121f4:	008004c4 	movi	r2,19
   121f8:	10c00b0e 	bge	r2,r3,12228 <__ulp+0x54>
   121fc:	18bffb04 	addi	r2,r3,-20
   12200:	01000784 	movi	r4,30
   12204:	0007883a 	mov	r3,zero
   12208:	20800516 	blt	r4,r2,12220 <__ulp+0x4c>
   1220c:	010007c4 	movi	r4,31
   12210:	2089c83a 	sub	r4,r4,r2
   12214:	00800044 	movi	r2,1
   12218:	1104983a 	sll	r2,r2,r4
   1221c:	f800283a 	ret
   12220:	00800044 	movi	r2,1
   12224:	f800283a 	ret
   12228:	01400234 	movhi	r5,8
   1222c:	28c7d83a 	sra	r3,r5,r3
   12230:	0005883a 	mov	r2,zero
   12234:	f800283a 	ret

00012238 <__b2d>:
   12238:	defffa04 	addi	sp,sp,-24
   1223c:	dc000015 	stw	r16,0(sp)
   12240:	24000417 	ldw	r16,16(r4)
   12244:	dc400115 	stw	r17,4(sp)
   12248:	24400504 	addi	r17,r4,20
   1224c:	8421883a 	add	r16,r16,r16
   12250:	8421883a 	add	r16,r16,r16
   12254:	8c21883a 	add	r16,r17,r16
   12258:	dc800215 	stw	r18,8(sp)
   1225c:	84bfff17 	ldw	r18,-4(r16)
   12260:	dd000415 	stw	r20,16(sp)
   12264:	dcc00315 	stw	r19,12(sp)
   12268:	9009883a 	mov	r4,r18
   1226c:	2829883a 	mov	r20,r5
   12270:	dfc00515 	stw	ra,20(sp)
   12274:	00119a40 	call	119a4 <__hi0bits>
   12278:	00c00804 	movi	r3,32
   1227c:	1889c83a 	sub	r4,r3,r2
   12280:	a1000015 	stw	r4,0(r20)
   12284:	01000284 	movi	r4,10
   12288:	84ffff04 	addi	r19,r16,-4
   1228c:	20801216 	blt	r4,r2,122d8 <__b2d+0xa0>
   12290:	018002c4 	movi	r6,11
   12294:	308dc83a 	sub	r6,r6,r2
   12298:	9186d83a 	srl	r3,r18,r6
   1229c:	18cffc34 	orhi	r3,r3,16368
   122a0:	8cc0212e 	bgeu	r17,r19,12328 <__b2d+0xf0>
   122a4:	813ffe17 	ldw	r4,-8(r16)
   122a8:	218cd83a 	srl	r6,r4,r6
   122ac:	10800544 	addi	r2,r2,21
   122b0:	9084983a 	sll	r2,r18,r2
   122b4:	1184b03a 	or	r2,r2,r6
   122b8:	dfc00517 	ldw	ra,20(sp)
   122bc:	dd000417 	ldw	r20,16(sp)
   122c0:	dcc00317 	ldw	r19,12(sp)
   122c4:	dc800217 	ldw	r18,8(sp)
   122c8:	dc400117 	ldw	r17,4(sp)
   122cc:	dc000017 	ldw	r16,0(sp)
   122d0:	dec00604 	addi	sp,sp,24
   122d4:	f800283a 	ret
   122d8:	8cc00f2e 	bgeu	r17,r19,12318 <__b2d+0xe0>
   122dc:	117ffd44 	addi	r5,r2,-11
   122e0:	80bffe17 	ldw	r2,-8(r16)
   122e4:	28000e26 	beq	r5,zero,12320 <__b2d+0xe8>
   122e8:	1949c83a 	sub	r4,r3,r5
   122ec:	9164983a 	sll	r18,r18,r5
   122f0:	1106d83a 	srl	r3,r2,r4
   122f4:	81bffe04 	addi	r6,r16,-8
   122f8:	948ffc34 	orhi	r18,r18,16368
   122fc:	90c6b03a 	or	r3,r18,r3
   12300:	89800e2e 	bgeu	r17,r6,1233c <__b2d+0x104>
   12304:	81bffd17 	ldw	r6,-12(r16)
   12308:	1144983a 	sll	r2,r2,r5
   1230c:	310ad83a 	srl	r5,r6,r4
   12310:	2884b03a 	or	r2,r5,r2
   12314:	003fe806 	br	122b8 <__alt_data_end+0xf00122b8>
   12318:	10bffd44 	addi	r2,r2,-11
   1231c:	1000041e 	bne	r2,zero,12330 <__b2d+0xf8>
   12320:	90cffc34 	orhi	r3,r18,16368
   12324:	003fe406 	br	122b8 <__alt_data_end+0xf00122b8>
   12328:	000d883a 	mov	r6,zero
   1232c:	003fdf06 	br	122ac <__alt_data_end+0xf00122ac>
   12330:	90a4983a 	sll	r18,r18,r2
   12334:	0005883a 	mov	r2,zero
   12338:	003ff906 	br	12320 <__alt_data_end+0xf0012320>
   1233c:	1144983a 	sll	r2,r2,r5
   12340:	003fdd06 	br	122b8 <__alt_data_end+0xf00122b8>

00012344 <__d2b>:
   12344:	defff804 	addi	sp,sp,-32
   12348:	dc000215 	stw	r16,8(sp)
   1234c:	3021883a 	mov	r16,r6
   12350:	dc400315 	stw	r17,12(sp)
   12354:	8022907a 	slli	r17,r16,1
   12358:	dd000615 	stw	r20,24(sp)
   1235c:	2829883a 	mov	r20,r5
   12360:	01400044 	movi	r5,1
   12364:	dcc00515 	stw	r19,20(sp)
   12368:	dc800415 	stw	r18,16(sp)
   1236c:	dfc00715 	stw	ra,28(sp)
   12370:	3825883a 	mov	r18,r7
   12374:	8822d57a 	srli	r17,r17,21
   12378:	00116b00 	call	116b0 <_Balloc>
   1237c:	1027883a 	mov	r19,r2
   12380:	00800434 	movhi	r2,16
   12384:	10bfffc4 	addi	r2,r2,-1
   12388:	808c703a 	and	r6,r16,r2
   1238c:	88000126 	beq	r17,zero,12394 <__d2b+0x50>
   12390:	31800434 	orhi	r6,r6,16
   12394:	d9800015 	stw	r6,0(sp)
   12398:	a0002426 	beq	r20,zero,1242c <__d2b+0xe8>
   1239c:	d9000104 	addi	r4,sp,4
   123a0:	dd000115 	stw	r20,4(sp)
   123a4:	0011a0c0 	call	11a0c <__lo0bits>
   123a8:	d8c00017 	ldw	r3,0(sp)
   123ac:	10002f1e 	bne	r2,zero,1246c <__d2b+0x128>
   123b0:	d9000117 	ldw	r4,4(sp)
   123b4:	99000515 	stw	r4,20(r19)
   123b8:	1821003a 	cmpeq	r16,r3,zero
   123bc:	01000084 	movi	r4,2
   123c0:	2421c83a 	sub	r16,r4,r16
   123c4:	98c00615 	stw	r3,24(r19)
   123c8:	9c000415 	stw	r16,16(r19)
   123cc:	88001f1e 	bne	r17,zero,1244c <__d2b+0x108>
   123d0:	10bef384 	addi	r2,r2,-1074
   123d4:	90800015 	stw	r2,0(r18)
   123d8:	00900034 	movhi	r2,16384
   123dc:	10bfffc4 	addi	r2,r2,-1
   123e0:	8085883a 	add	r2,r16,r2
   123e4:	1085883a 	add	r2,r2,r2
   123e8:	1085883a 	add	r2,r2,r2
   123ec:	9885883a 	add	r2,r19,r2
   123f0:	11000517 	ldw	r4,20(r2)
   123f4:	8020917a 	slli	r16,r16,5
   123f8:	00119a40 	call	119a4 <__hi0bits>
   123fc:	d8c00817 	ldw	r3,32(sp)
   12400:	8085c83a 	sub	r2,r16,r2
   12404:	18800015 	stw	r2,0(r3)
   12408:	9805883a 	mov	r2,r19
   1240c:	dfc00717 	ldw	ra,28(sp)
   12410:	dd000617 	ldw	r20,24(sp)
   12414:	dcc00517 	ldw	r19,20(sp)
   12418:	dc800417 	ldw	r18,16(sp)
   1241c:	dc400317 	ldw	r17,12(sp)
   12420:	dc000217 	ldw	r16,8(sp)
   12424:	dec00804 	addi	sp,sp,32
   12428:	f800283a 	ret
   1242c:	d809883a 	mov	r4,sp
   12430:	0011a0c0 	call	11a0c <__lo0bits>
   12434:	d8c00017 	ldw	r3,0(sp)
   12438:	04000044 	movi	r16,1
   1243c:	9c000415 	stw	r16,16(r19)
   12440:	98c00515 	stw	r3,20(r19)
   12444:	10800804 	addi	r2,r2,32
   12448:	883fe126 	beq	r17,zero,123d0 <__alt_data_end+0xf00123d0>
   1244c:	00c00d44 	movi	r3,53
   12450:	8c7ef344 	addi	r17,r17,-1075
   12454:	88a3883a 	add	r17,r17,r2
   12458:	1885c83a 	sub	r2,r3,r2
   1245c:	d8c00817 	ldw	r3,32(sp)
   12460:	94400015 	stw	r17,0(r18)
   12464:	18800015 	stw	r2,0(r3)
   12468:	003fe706 	br	12408 <__alt_data_end+0xf0012408>
   1246c:	01000804 	movi	r4,32
   12470:	2089c83a 	sub	r4,r4,r2
   12474:	1908983a 	sll	r4,r3,r4
   12478:	d9400117 	ldw	r5,4(sp)
   1247c:	1886d83a 	srl	r3,r3,r2
   12480:	2148b03a 	or	r4,r4,r5
   12484:	99000515 	stw	r4,20(r19)
   12488:	d8c00015 	stw	r3,0(sp)
   1248c:	003fca06 	br	123b8 <__alt_data_end+0xf00123b8>

00012490 <__ratio>:
   12490:	defff904 	addi	sp,sp,-28
   12494:	dc400315 	stw	r17,12(sp)
   12498:	2823883a 	mov	r17,r5
   1249c:	d9400104 	addi	r5,sp,4
   124a0:	dfc00615 	stw	ra,24(sp)
   124a4:	dcc00515 	stw	r19,20(sp)
   124a8:	dc800415 	stw	r18,16(sp)
   124ac:	2027883a 	mov	r19,r4
   124b0:	dc000215 	stw	r16,8(sp)
   124b4:	00122380 	call	12238 <__b2d>
   124b8:	d80b883a 	mov	r5,sp
   124bc:	8809883a 	mov	r4,r17
   124c0:	1025883a 	mov	r18,r2
   124c4:	1821883a 	mov	r16,r3
   124c8:	00122380 	call	12238 <__b2d>
   124cc:	8a000417 	ldw	r8,16(r17)
   124d0:	99000417 	ldw	r4,16(r19)
   124d4:	d9400117 	ldw	r5,4(sp)
   124d8:	2209c83a 	sub	r4,r4,r8
   124dc:	2010917a 	slli	r8,r4,5
   124e0:	d9000017 	ldw	r4,0(sp)
   124e4:	2909c83a 	sub	r4,r5,r4
   124e8:	4109883a 	add	r4,r8,r4
   124ec:	01000e0e 	bge	zero,r4,12528 <__ratio+0x98>
   124f0:	2008953a 	slli	r4,r4,20
   124f4:	2421883a 	add	r16,r4,r16
   124f8:	100d883a 	mov	r6,r2
   124fc:	180f883a 	mov	r7,r3
   12500:	9009883a 	mov	r4,r18
   12504:	800b883a 	mov	r5,r16
   12508:	00074fc0 	call	74fc <__divdf3>
   1250c:	dfc00617 	ldw	ra,24(sp)
   12510:	dcc00517 	ldw	r19,20(sp)
   12514:	dc800417 	ldw	r18,16(sp)
   12518:	dc400317 	ldw	r17,12(sp)
   1251c:	dc000217 	ldw	r16,8(sp)
   12520:	dec00704 	addi	sp,sp,28
   12524:	f800283a 	ret
   12528:	2008953a 	slli	r4,r4,20
   1252c:	1907c83a 	sub	r3,r3,r4
   12530:	003ff106 	br	124f8 <__alt_data_end+0xf00124f8>

00012534 <_mprec_log10>:
   12534:	defffe04 	addi	sp,sp,-8
   12538:	dc000015 	stw	r16,0(sp)
   1253c:	dfc00115 	stw	ra,4(sp)
   12540:	008005c4 	movi	r2,23
   12544:	2021883a 	mov	r16,r4
   12548:	11000d0e 	bge	r2,r4,12580 <_mprec_log10+0x4c>
   1254c:	0005883a 	mov	r2,zero
   12550:	00cffc34 	movhi	r3,16368
   12554:	843fffc4 	addi	r16,r16,-1
   12558:	000d883a 	mov	r6,zero
   1255c:	01d00934 	movhi	r7,16420
   12560:	1009883a 	mov	r4,r2
   12564:	180b883a 	mov	r5,r3
   12568:	0007ec00 	call	7ec0 <__muldf3>
   1256c:	803ff91e 	bne	r16,zero,12554 <__alt_data_end+0xf0012554>
   12570:	dfc00117 	ldw	ra,4(sp)
   12574:	dc000017 	ldw	r16,0(sp)
   12578:	dec00204 	addi	sp,sp,8
   1257c:	f800283a 	ret
   12580:	202090fa 	slli	r16,r4,3
   12584:	00820034 	movhi	r2,2048
   12588:	10811d04 	addi	r2,r2,1140
   1258c:	1421883a 	add	r16,r2,r16
   12590:	80800017 	ldw	r2,0(r16)
   12594:	80c00117 	ldw	r3,4(r16)
   12598:	dfc00117 	ldw	ra,4(sp)
   1259c:	dc000017 	ldw	r16,0(sp)
   125a0:	dec00204 	addi	sp,sp,8
   125a4:	f800283a 	ret

000125a8 <__copybits>:
   125a8:	297fffc4 	addi	r5,r5,-1
   125ac:	280fd17a 	srai	r7,r5,5
   125b0:	30c00417 	ldw	r3,16(r6)
   125b4:	30800504 	addi	r2,r6,20
   125b8:	39c00044 	addi	r7,r7,1
   125bc:	18c7883a 	add	r3,r3,r3
   125c0:	39cf883a 	add	r7,r7,r7
   125c4:	18c7883a 	add	r3,r3,r3
   125c8:	39cf883a 	add	r7,r7,r7
   125cc:	10c7883a 	add	r3,r2,r3
   125d0:	21cf883a 	add	r7,r4,r7
   125d4:	10c00d2e 	bgeu	r2,r3,1260c <__copybits+0x64>
   125d8:	200b883a 	mov	r5,r4
   125dc:	12000017 	ldw	r8,0(r2)
   125e0:	29400104 	addi	r5,r5,4
   125e4:	10800104 	addi	r2,r2,4
   125e8:	2a3fff15 	stw	r8,-4(r5)
   125ec:	10fffb36 	bltu	r2,r3,125dc <__alt_data_end+0xf00125dc>
   125f0:	1985c83a 	sub	r2,r3,r6
   125f4:	10bffac4 	addi	r2,r2,-21
   125f8:	1004d0ba 	srli	r2,r2,2
   125fc:	10800044 	addi	r2,r2,1
   12600:	1085883a 	add	r2,r2,r2
   12604:	1085883a 	add	r2,r2,r2
   12608:	2089883a 	add	r4,r4,r2
   1260c:	21c0032e 	bgeu	r4,r7,1261c <__copybits+0x74>
   12610:	20000015 	stw	zero,0(r4)
   12614:	21000104 	addi	r4,r4,4
   12618:	21fffd36 	bltu	r4,r7,12610 <__alt_data_end+0xf0012610>
   1261c:	f800283a 	ret

00012620 <__any_on>:
   12620:	20c00417 	ldw	r3,16(r4)
   12624:	2805d17a 	srai	r2,r5,5
   12628:	21000504 	addi	r4,r4,20
   1262c:	18800d0e 	bge	r3,r2,12664 <__any_on+0x44>
   12630:	18c7883a 	add	r3,r3,r3
   12634:	18c7883a 	add	r3,r3,r3
   12638:	20c7883a 	add	r3,r4,r3
   1263c:	20c0192e 	bgeu	r4,r3,126a4 <__any_on+0x84>
   12640:	18bfff17 	ldw	r2,-4(r3)
   12644:	18ffff04 	addi	r3,r3,-4
   12648:	1000041e 	bne	r2,zero,1265c <__any_on+0x3c>
   1264c:	20c0142e 	bgeu	r4,r3,126a0 <__any_on+0x80>
   12650:	18ffff04 	addi	r3,r3,-4
   12654:	19400017 	ldw	r5,0(r3)
   12658:	283ffc26 	beq	r5,zero,1264c <__alt_data_end+0xf001264c>
   1265c:	00800044 	movi	r2,1
   12660:	f800283a 	ret
   12664:	10c00a0e 	bge	r2,r3,12690 <__any_on+0x70>
   12668:	1085883a 	add	r2,r2,r2
   1266c:	1085883a 	add	r2,r2,r2
   12670:	294007cc 	andi	r5,r5,31
   12674:	2087883a 	add	r3,r4,r2
   12678:	283ff026 	beq	r5,zero,1263c <__alt_data_end+0xf001263c>
   1267c:	19800017 	ldw	r6,0(r3)
   12680:	3144d83a 	srl	r2,r6,r5
   12684:	114a983a 	sll	r5,r2,r5
   12688:	317ff41e 	bne	r6,r5,1265c <__alt_data_end+0xf001265c>
   1268c:	003feb06 	br	1263c <__alt_data_end+0xf001263c>
   12690:	1085883a 	add	r2,r2,r2
   12694:	1085883a 	add	r2,r2,r2
   12698:	2087883a 	add	r3,r4,r2
   1269c:	003fe706 	br	1263c <__alt_data_end+0xf001263c>
   126a0:	f800283a 	ret
   126a4:	0005883a 	mov	r2,zero
   126a8:	f800283a 	ret

000126ac <_realloc_r>:
   126ac:	defff604 	addi	sp,sp,-40
   126b0:	dc800215 	stw	r18,8(sp)
   126b4:	dfc00915 	stw	ra,36(sp)
   126b8:	df000815 	stw	fp,32(sp)
   126bc:	ddc00715 	stw	r23,28(sp)
   126c0:	dd800615 	stw	r22,24(sp)
   126c4:	dd400515 	stw	r21,20(sp)
   126c8:	dd000415 	stw	r20,16(sp)
   126cc:	dcc00315 	stw	r19,12(sp)
   126d0:	dc400115 	stw	r17,4(sp)
   126d4:	dc000015 	stw	r16,0(sp)
   126d8:	3025883a 	mov	r18,r6
   126dc:	2800b726 	beq	r5,zero,129bc <_realloc_r+0x310>
   126e0:	282b883a 	mov	r21,r5
   126e4:	2029883a 	mov	r20,r4
   126e8:	0017c880 	call	17c88 <__malloc_lock>
   126ec:	a8bfff17 	ldw	r2,-4(r21)
   126f0:	043fff04 	movi	r16,-4
   126f4:	90c002c4 	addi	r3,r18,11
   126f8:	01000584 	movi	r4,22
   126fc:	acfffe04 	addi	r19,r21,-8
   12700:	1420703a 	and	r16,r2,r16
   12704:	20c0332e 	bgeu	r4,r3,127d4 <_realloc_r+0x128>
   12708:	047ffe04 	movi	r17,-8
   1270c:	1c62703a 	and	r17,r3,r17
   12710:	8807883a 	mov	r3,r17
   12714:	88005816 	blt	r17,zero,12878 <_realloc_r+0x1cc>
   12718:	8c805736 	bltu	r17,r18,12878 <_realloc_r+0x1cc>
   1271c:	80c0300e 	bge	r16,r3,127e0 <_realloc_r+0x134>
   12720:	07020034 	movhi	fp,2048
   12724:	e703ef04 	addi	fp,fp,4028
   12728:	e1c00217 	ldw	r7,8(fp)
   1272c:	9c09883a 	add	r4,r19,r16
   12730:	22000117 	ldw	r8,4(r4)
   12734:	21c06326 	beq	r4,r7,128c4 <_realloc_r+0x218>
   12738:	017fff84 	movi	r5,-2
   1273c:	414a703a 	and	r5,r8,r5
   12740:	214b883a 	add	r5,r4,r5
   12744:	29800117 	ldw	r6,4(r5)
   12748:	3180004c 	andi	r6,r6,1
   1274c:	30003f26 	beq	r6,zero,1284c <_realloc_r+0x1a0>
   12750:	1080004c 	andi	r2,r2,1
   12754:	10008326 	beq	r2,zero,12964 <_realloc_r+0x2b8>
   12758:	900b883a 	mov	r5,r18
   1275c:	a009883a 	mov	r4,r20
   12760:	0010c640 	call	10c64 <_malloc_r>
   12764:	1025883a 	mov	r18,r2
   12768:	10011e26 	beq	r2,zero,12be4 <_realloc_r+0x538>
   1276c:	a93fff17 	ldw	r4,-4(r21)
   12770:	10fffe04 	addi	r3,r2,-8
   12774:	00bfff84 	movi	r2,-2
   12778:	2084703a 	and	r2,r4,r2
   1277c:	9885883a 	add	r2,r19,r2
   12780:	1880ee26 	beq	r3,r2,12b3c <_realloc_r+0x490>
   12784:	81bfff04 	addi	r6,r16,-4
   12788:	00800904 	movi	r2,36
   1278c:	1180b836 	bltu	r2,r6,12a70 <_realloc_r+0x3c4>
   12790:	00c004c4 	movi	r3,19
   12794:	19809636 	bltu	r3,r6,129f0 <_realloc_r+0x344>
   12798:	9005883a 	mov	r2,r18
   1279c:	a807883a 	mov	r3,r21
   127a0:	19000017 	ldw	r4,0(r3)
   127a4:	11000015 	stw	r4,0(r2)
   127a8:	19000117 	ldw	r4,4(r3)
   127ac:	11000115 	stw	r4,4(r2)
   127b0:	18c00217 	ldw	r3,8(r3)
   127b4:	10c00215 	stw	r3,8(r2)
   127b8:	a80b883a 	mov	r5,r21
   127bc:	a009883a 	mov	r4,r20
   127c0:	00100780 	call	10078 <_free_r>
   127c4:	a009883a 	mov	r4,r20
   127c8:	0017cac0 	call	17cac <__malloc_unlock>
   127cc:	9005883a 	mov	r2,r18
   127d0:	00001206 	br	1281c <_realloc_r+0x170>
   127d4:	00c00404 	movi	r3,16
   127d8:	1823883a 	mov	r17,r3
   127dc:	003fce06 	br	12718 <__alt_data_end+0xf0012718>
   127e0:	a825883a 	mov	r18,r21
   127e4:	8445c83a 	sub	r2,r16,r17
   127e8:	00c003c4 	movi	r3,15
   127ec:	18802636 	bltu	r3,r2,12888 <_realloc_r+0x1dc>
   127f0:	99800117 	ldw	r6,4(r19)
   127f4:	9c07883a 	add	r3,r19,r16
   127f8:	3180004c 	andi	r6,r6,1
   127fc:	3420b03a 	or	r16,r6,r16
   12800:	9c000115 	stw	r16,4(r19)
   12804:	18800117 	ldw	r2,4(r3)
   12808:	10800054 	ori	r2,r2,1
   1280c:	18800115 	stw	r2,4(r3)
   12810:	a009883a 	mov	r4,r20
   12814:	0017cac0 	call	17cac <__malloc_unlock>
   12818:	9005883a 	mov	r2,r18
   1281c:	dfc00917 	ldw	ra,36(sp)
   12820:	df000817 	ldw	fp,32(sp)
   12824:	ddc00717 	ldw	r23,28(sp)
   12828:	dd800617 	ldw	r22,24(sp)
   1282c:	dd400517 	ldw	r21,20(sp)
   12830:	dd000417 	ldw	r20,16(sp)
   12834:	dcc00317 	ldw	r19,12(sp)
   12838:	dc800217 	ldw	r18,8(sp)
   1283c:	dc400117 	ldw	r17,4(sp)
   12840:	dc000017 	ldw	r16,0(sp)
   12844:	dec00a04 	addi	sp,sp,40
   12848:	f800283a 	ret
   1284c:	017fff04 	movi	r5,-4
   12850:	414a703a 	and	r5,r8,r5
   12854:	814d883a 	add	r6,r16,r5
   12858:	30c01f16 	blt	r6,r3,128d8 <_realloc_r+0x22c>
   1285c:	20800317 	ldw	r2,12(r4)
   12860:	20c00217 	ldw	r3,8(r4)
   12864:	a825883a 	mov	r18,r21
   12868:	3021883a 	mov	r16,r6
   1286c:	18800315 	stw	r2,12(r3)
   12870:	10c00215 	stw	r3,8(r2)
   12874:	003fdb06 	br	127e4 <__alt_data_end+0xf00127e4>
   12878:	00800304 	movi	r2,12
   1287c:	a0800015 	stw	r2,0(r20)
   12880:	0005883a 	mov	r2,zero
   12884:	003fe506 	br	1281c <__alt_data_end+0xf001281c>
   12888:	98c00117 	ldw	r3,4(r19)
   1288c:	9c4b883a 	add	r5,r19,r17
   12890:	11000054 	ori	r4,r2,1
   12894:	18c0004c 	andi	r3,r3,1
   12898:	1c62b03a 	or	r17,r3,r17
   1289c:	9c400115 	stw	r17,4(r19)
   128a0:	29000115 	stw	r4,4(r5)
   128a4:	2885883a 	add	r2,r5,r2
   128a8:	10c00117 	ldw	r3,4(r2)
   128ac:	29400204 	addi	r5,r5,8
   128b0:	a009883a 	mov	r4,r20
   128b4:	18c00054 	ori	r3,r3,1
   128b8:	10c00115 	stw	r3,4(r2)
   128bc:	00100780 	call	10078 <_free_r>
   128c0:	003fd306 	br	12810 <__alt_data_end+0xf0012810>
   128c4:	017fff04 	movi	r5,-4
   128c8:	414a703a 	and	r5,r8,r5
   128cc:	89800404 	addi	r6,r17,16
   128d0:	8151883a 	add	r8,r16,r5
   128d4:	4180590e 	bge	r8,r6,12a3c <_realloc_r+0x390>
   128d8:	1080004c 	andi	r2,r2,1
   128dc:	103f9e1e 	bne	r2,zero,12758 <__alt_data_end+0xf0012758>
   128e0:	adbffe17 	ldw	r22,-8(r21)
   128e4:	00bfff04 	movi	r2,-4
   128e8:	9dadc83a 	sub	r22,r19,r22
   128ec:	b1800117 	ldw	r6,4(r22)
   128f0:	3084703a 	and	r2,r6,r2
   128f4:	20002026 	beq	r4,zero,12978 <_realloc_r+0x2cc>
   128f8:	80af883a 	add	r23,r16,r2
   128fc:	b96f883a 	add	r23,r23,r5
   12900:	21c05f26 	beq	r4,r7,12a80 <_realloc_r+0x3d4>
   12904:	b8c01c16 	blt	r23,r3,12978 <_realloc_r+0x2cc>
   12908:	20800317 	ldw	r2,12(r4)
   1290c:	20c00217 	ldw	r3,8(r4)
   12910:	81bfff04 	addi	r6,r16,-4
   12914:	01000904 	movi	r4,36
   12918:	18800315 	stw	r2,12(r3)
   1291c:	10c00215 	stw	r3,8(r2)
   12920:	b0c00217 	ldw	r3,8(r22)
   12924:	b0800317 	ldw	r2,12(r22)
   12928:	b4800204 	addi	r18,r22,8
   1292c:	18800315 	stw	r2,12(r3)
   12930:	10c00215 	stw	r3,8(r2)
   12934:	21801b36 	bltu	r4,r6,129a4 <_realloc_r+0x2f8>
   12938:	008004c4 	movi	r2,19
   1293c:	1180352e 	bgeu	r2,r6,12a14 <_realloc_r+0x368>
   12940:	a8800017 	ldw	r2,0(r21)
   12944:	b0800215 	stw	r2,8(r22)
   12948:	a8800117 	ldw	r2,4(r21)
   1294c:	b0800315 	stw	r2,12(r22)
   12950:	008006c4 	movi	r2,27
   12954:	11807f36 	bltu	r2,r6,12b54 <_realloc_r+0x4a8>
   12958:	b0800404 	addi	r2,r22,16
   1295c:	ad400204 	addi	r21,r21,8
   12960:	00002d06 	br	12a18 <_realloc_r+0x36c>
   12964:	adbffe17 	ldw	r22,-8(r21)
   12968:	00bfff04 	movi	r2,-4
   1296c:	9dadc83a 	sub	r22,r19,r22
   12970:	b1000117 	ldw	r4,4(r22)
   12974:	2084703a 	and	r2,r4,r2
   12978:	b03f7726 	beq	r22,zero,12758 <__alt_data_end+0xf0012758>
   1297c:	80af883a 	add	r23,r16,r2
   12980:	b8ff7516 	blt	r23,r3,12758 <__alt_data_end+0xf0012758>
   12984:	b0800317 	ldw	r2,12(r22)
   12988:	b0c00217 	ldw	r3,8(r22)
   1298c:	81bfff04 	addi	r6,r16,-4
   12990:	01000904 	movi	r4,36
   12994:	18800315 	stw	r2,12(r3)
   12998:	10c00215 	stw	r3,8(r2)
   1299c:	b4800204 	addi	r18,r22,8
   129a0:	21bfe52e 	bgeu	r4,r6,12938 <__alt_data_end+0xf0012938>
   129a4:	a80b883a 	mov	r5,r21
   129a8:	9009883a 	mov	r4,r18
   129ac:	00115540 	call	11554 <memmove>
   129b0:	b821883a 	mov	r16,r23
   129b4:	b027883a 	mov	r19,r22
   129b8:	003f8a06 	br	127e4 <__alt_data_end+0xf00127e4>
   129bc:	300b883a 	mov	r5,r6
   129c0:	dfc00917 	ldw	ra,36(sp)
   129c4:	df000817 	ldw	fp,32(sp)
   129c8:	ddc00717 	ldw	r23,28(sp)
   129cc:	dd800617 	ldw	r22,24(sp)
   129d0:	dd400517 	ldw	r21,20(sp)
   129d4:	dd000417 	ldw	r20,16(sp)
   129d8:	dcc00317 	ldw	r19,12(sp)
   129dc:	dc800217 	ldw	r18,8(sp)
   129e0:	dc400117 	ldw	r17,4(sp)
   129e4:	dc000017 	ldw	r16,0(sp)
   129e8:	dec00a04 	addi	sp,sp,40
   129ec:	0010c641 	jmpi	10c64 <_malloc_r>
   129f0:	a8c00017 	ldw	r3,0(r21)
   129f4:	90c00015 	stw	r3,0(r18)
   129f8:	a8c00117 	ldw	r3,4(r21)
   129fc:	90c00115 	stw	r3,4(r18)
   12a00:	00c006c4 	movi	r3,27
   12a04:	19804536 	bltu	r3,r6,12b1c <_realloc_r+0x470>
   12a08:	90800204 	addi	r2,r18,8
   12a0c:	a8c00204 	addi	r3,r21,8
   12a10:	003f6306 	br	127a0 <__alt_data_end+0xf00127a0>
   12a14:	9005883a 	mov	r2,r18
   12a18:	a8c00017 	ldw	r3,0(r21)
   12a1c:	b821883a 	mov	r16,r23
   12a20:	b027883a 	mov	r19,r22
   12a24:	10c00015 	stw	r3,0(r2)
   12a28:	a8c00117 	ldw	r3,4(r21)
   12a2c:	10c00115 	stw	r3,4(r2)
   12a30:	a8c00217 	ldw	r3,8(r21)
   12a34:	10c00215 	stw	r3,8(r2)
   12a38:	003f6a06 	br	127e4 <__alt_data_end+0xf00127e4>
   12a3c:	9c67883a 	add	r19,r19,r17
   12a40:	4445c83a 	sub	r2,r8,r17
   12a44:	e4c00215 	stw	r19,8(fp)
   12a48:	10800054 	ori	r2,r2,1
   12a4c:	98800115 	stw	r2,4(r19)
   12a50:	a8bfff17 	ldw	r2,-4(r21)
   12a54:	a009883a 	mov	r4,r20
   12a58:	1080004c 	andi	r2,r2,1
   12a5c:	1462b03a 	or	r17,r2,r17
   12a60:	ac7fff15 	stw	r17,-4(r21)
   12a64:	0017cac0 	call	17cac <__malloc_unlock>
   12a68:	a805883a 	mov	r2,r21
   12a6c:	003f6b06 	br	1281c <__alt_data_end+0xf001281c>
   12a70:	a80b883a 	mov	r5,r21
   12a74:	9009883a 	mov	r4,r18
   12a78:	00115540 	call	11554 <memmove>
   12a7c:	003f4e06 	br	127b8 <__alt_data_end+0xf00127b8>
   12a80:	89000404 	addi	r4,r17,16
   12a84:	b93fbc16 	blt	r23,r4,12978 <__alt_data_end+0xf0012978>
   12a88:	b0800317 	ldw	r2,12(r22)
   12a8c:	b0c00217 	ldw	r3,8(r22)
   12a90:	81bfff04 	addi	r6,r16,-4
   12a94:	01000904 	movi	r4,36
   12a98:	18800315 	stw	r2,12(r3)
   12a9c:	10c00215 	stw	r3,8(r2)
   12aa0:	b4800204 	addi	r18,r22,8
   12aa4:	21804336 	bltu	r4,r6,12bb4 <_realloc_r+0x508>
   12aa8:	008004c4 	movi	r2,19
   12aac:	11803f2e 	bgeu	r2,r6,12bac <_realloc_r+0x500>
   12ab0:	a8800017 	ldw	r2,0(r21)
   12ab4:	b0800215 	stw	r2,8(r22)
   12ab8:	a8800117 	ldw	r2,4(r21)
   12abc:	b0800315 	stw	r2,12(r22)
   12ac0:	008006c4 	movi	r2,27
   12ac4:	11803f36 	bltu	r2,r6,12bc4 <_realloc_r+0x518>
   12ac8:	b0800404 	addi	r2,r22,16
   12acc:	ad400204 	addi	r21,r21,8
   12ad0:	a8c00017 	ldw	r3,0(r21)
   12ad4:	10c00015 	stw	r3,0(r2)
   12ad8:	a8c00117 	ldw	r3,4(r21)
   12adc:	10c00115 	stw	r3,4(r2)
   12ae0:	a8c00217 	ldw	r3,8(r21)
   12ae4:	10c00215 	stw	r3,8(r2)
   12ae8:	b447883a 	add	r3,r22,r17
   12aec:	bc45c83a 	sub	r2,r23,r17
   12af0:	e0c00215 	stw	r3,8(fp)
   12af4:	10800054 	ori	r2,r2,1
   12af8:	18800115 	stw	r2,4(r3)
   12afc:	b0800117 	ldw	r2,4(r22)
   12b00:	a009883a 	mov	r4,r20
   12b04:	1080004c 	andi	r2,r2,1
   12b08:	1462b03a 	or	r17,r2,r17
   12b0c:	b4400115 	stw	r17,4(r22)
   12b10:	0017cac0 	call	17cac <__malloc_unlock>
   12b14:	9005883a 	mov	r2,r18
   12b18:	003f4006 	br	1281c <__alt_data_end+0xf001281c>
   12b1c:	a8c00217 	ldw	r3,8(r21)
   12b20:	90c00215 	stw	r3,8(r18)
   12b24:	a8c00317 	ldw	r3,12(r21)
   12b28:	90c00315 	stw	r3,12(r18)
   12b2c:	30801126 	beq	r6,r2,12b74 <_realloc_r+0x4c8>
   12b30:	90800404 	addi	r2,r18,16
   12b34:	a8c00404 	addi	r3,r21,16
   12b38:	003f1906 	br	127a0 <__alt_data_end+0xf00127a0>
   12b3c:	90ffff17 	ldw	r3,-4(r18)
   12b40:	00bfff04 	movi	r2,-4
   12b44:	a825883a 	mov	r18,r21
   12b48:	1884703a 	and	r2,r3,r2
   12b4c:	80a1883a 	add	r16,r16,r2
   12b50:	003f2406 	br	127e4 <__alt_data_end+0xf00127e4>
   12b54:	a8800217 	ldw	r2,8(r21)
   12b58:	b0800415 	stw	r2,16(r22)
   12b5c:	a8800317 	ldw	r2,12(r21)
   12b60:	b0800515 	stw	r2,20(r22)
   12b64:	31000a26 	beq	r6,r4,12b90 <_realloc_r+0x4e4>
   12b68:	b0800604 	addi	r2,r22,24
   12b6c:	ad400404 	addi	r21,r21,16
   12b70:	003fa906 	br	12a18 <__alt_data_end+0xf0012a18>
   12b74:	a9000417 	ldw	r4,16(r21)
   12b78:	90800604 	addi	r2,r18,24
   12b7c:	a8c00604 	addi	r3,r21,24
   12b80:	91000415 	stw	r4,16(r18)
   12b84:	a9000517 	ldw	r4,20(r21)
   12b88:	91000515 	stw	r4,20(r18)
   12b8c:	003f0406 	br	127a0 <__alt_data_end+0xf00127a0>
   12b90:	a8c00417 	ldw	r3,16(r21)
   12b94:	ad400604 	addi	r21,r21,24
   12b98:	b0800804 	addi	r2,r22,32
   12b9c:	b0c00615 	stw	r3,24(r22)
   12ba0:	a8ffff17 	ldw	r3,-4(r21)
   12ba4:	b0c00715 	stw	r3,28(r22)
   12ba8:	003f9b06 	br	12a18 <__alt_data_end+0xf0012a18>
   12bac:	9005883a 	mov	r2,r18
   12bb0:	003fc706 	br	12ad0 <__alt_data_end+0xf0012ad0>
   12bb4:	a80b883a 	mov	r5,r21
   12bb8:	9009883a 	mov	r4,r18
   12bbc:	00115540 	call	11554 <memmove>
   12bc0:	003fc906 	br	12ae8 <__alt_data_end+0xf0012ae8>
   12bc4:	a8800217 	ldw	r2,8(r21)
   12bc8:	b0800415 	stw	r2,16(r22)
   12bcc:	a8800317 	ldw	r2,12(r21)
   12bd0:	b0800515 	stw	r2,20(r22)
   12bd4:	31000726 	beq	r6,r4,12bf4 <_realloc_r+0x548>
   12bd8:	b0800604 	addi	r2,r22,24
   12bdc:	ad400404 	addi	r21,r21,16
   12be0:	003fbb06 	br	12ad0 <__alt_data_end+0xf0012ad0>
   12be4:	a009883a 	mov	r4,r20
   12be8:	0017cac0 	call	17cac <__malloc_unlock>
   12bec:	0005883a 	mov	r2,zero
   12bf0:	003f0a06 	br	1281c <__alt_data_end+0xf001281c>
   12bf4:	a8c00417 	ldw	r3,16(r21)
   12bf8:	ad400604 	addi	r21,r21,24
   12bfc:	b0800804 	addi	r2,r22,32
   12c00:	b0c00615 	stw	r3,24(r22)
   12c04:	a8ffff17 	ldw	r3,-4(r21)
   12c08:	b0c00715 	stw	r3,28(r22)
   12c0c:	003fb006 	br	12ad0 <__alt_data_end+0xf0012ad0>

00012c10 <__fpclassifyd>:
   12c10:	00a00034 	movhi	r2,32768
   12c14:	10bfffc4 	addi	r2,r2,-1
   12c18:	2884703a 	and	r2,r5,r2
   12c1c:	10000726 	beq	r2,zero,12c3c <__fpclassifyd+0x2c>
   12c20:	00fffc34 	movhi	r3,65520
   12c24:	019ff834 	movhi	r6,32736
   12c28:	28c7883a 	add	r3,r5,r3
   12c2c:	31bfffc4 	addi	r6,r6,-1
   12c30:	30c00536 	bltu	r6,r3,12c48 <__fpclassifyd+0x38>
   12c34:	00800104 	movi	r2,4
   12c38:	f800283a 	ret
   12c3c:	2000021e 	bne	r4,zero,12c48 <__fpclassifyd+0x38>
   12c40:	00800084 	movi	r2,2
   12c44:	f800283a 	ret
   12c48:	00dffc34 	movhi	r3,32752
   12c4c:	019ff834 	movhi	r6,32736
   12c50:	28cb883a 	add	r5,r5,r3
   12c54:	31bfffc4 	addi	r6,r6,-1
   12c58:	317ff62e 	bgeu	r6,r5,12c34 <__alt_data_end+0xf0012c34>
   12c5c:	01400434 	movhi	r5,16
   12c60:	297fffc4 	addi	r5,r5,-1
   12c64:	28800236 	bltu	r5,r2,12c70 <__fpclassifyd+0x60>
   12c68:	008000c4 	movi	r2,3
   12c6c:	f800283a 	ret
   12c70:	10c00226 	beq	r2,r3,12c7c <__fpclassifyd+0x6c>
   12c74:	0005883a 	mov	r2,zero
   12c78:	f800283a 	ret
   12c7c:	2005003a 	cmpeq	r2,r4,zero
   12c80:	f800283a 	ret

00012c84 <_sbrk_r>:
   12c84:	defffd04 	addi	sp,sp,-12
   12c88:	dc000015 	stw	r16,0(sp)
   12c8c:	04020034 	movhi	r16,2048
   12c90:	dc400115 	stw	r17,4(sp)
   12c94:	840b5e04 	addi	r16,r16,11640
   12c98:	2023883a 	mov	r17,r4
   12c9c:	2809883a 	mov	r4,r5
   12ca0:	dfc00215 	stw	ra,8(sp)
   12ca4:	80000015 	stw	zero,0(r16)
   12ca8:	0017e6c0 	call	17e6c <sbrk>
   12cac:	00ffffc4 	movi	r3,-1
   12cb0:	10c00526 	beq	r2,r3,12cc8 <_sbrk_r+0x44>
   12cb4:	dfc00217 	ldw	ra,8(sp)
   12cb8:	dc400117 	ldw	r17,4(sp)
   12cbc:	dc000017 	ldw	r16,0(sp)
   12cc0:	dec00304 	addi	sp,sp,12
   12cc4:	f800283a 	ret
   12cc8:	80c00017 	ldw	r3,0(r16)
   12ccc:	183ff926 	beq	r3,zero,12cb4 <__alt_data_end+0xf0012cb4>
   12cd0:	88c00015 	stw	r3,0(r17)
   12cd4:	003ff706 	br	12cb4 <__alt_data_end+0xf0012cb4>

00012cd8 <__sread>:
   12cd8:	defffe04 	addi	sp,sp,-8
   12cdc:	dc000015 	stw	r16,0(sp)
   12ce0:	2821883a 	mov	r16,r5
   12ce4:	2940038f 	ldh	r5,14(r5)
   12ce8:	dfc00115 	stw	ra,4(sp)
   12cec:	0015ed80 	call	15ed8 <_read_r>
   12cf0:	10000716 	blt	r2,zero,12d10 <__sread+0x38>
   12cf4:	80c01417 	ldw	r3,80(r16)
   12cf8:	1887883a 	add	r3,r3,r2
   12cfc:	80c01415 	stw	r3,80(r16)
   12d00:	dfc00117 	ldw	ra,4(sp)
   12d04:	dc000017 	ldw	r16,0(sp)
   12d08:	dec00204 	addi	sp,sp,8
   12d0c:	f800283a 	ret
   12d10:	80c0030b 	ldhu	r3,12(r16)
   12d14:	18fbffcc 	andi	r3,r3,61439
   12d18:	80c0030d 	sth	r3,12(r16)
   12d1c:	dfc00117 	ldw	ra,4(sp)
   12d20:	dc000017 	ldw	r16,0(sp)
   12d24:	dec00204 	addi	sp,sp,8
   12d28:	f800283a 	ret

00012d2c <__seofread>:
   12d2c:	0005883a 	mov	r2,zero
   12d30:	f800283a 	ret

00012d34 <__swrite>:
   12d34:	2880030b 	ldhu	r2,12(r5)
   12d38:	defffb04 	addi	sp,sp,-20
   12d3c:	dcc00315 	stw	r19,12(sp)
   12d40:	dc800215 	stw	r18,8(sp)
   12d44:	dc400115 	stw	r17,4(sp)
   12d48:	dc000015 	stw	r16,0(sp)
   12d4c:	dfc00415 	stw	ra,16(sp)
   12d50:	10c0400c 	andi	r3,r2,256
   12d54:	2821883a 	mov	r16,r5
   12d58:	2023883a 	mov	r17,r4
   12d5c:	3025883a 	mov	r18,r6
   12d60:	3827883a 	mov	r19,r7
   12d64:	18000526 	beq	r3,zero,12d7c <__swrite+0x48>
   12d68:	2940038f 	ldh	r5,14(r5)
   12d6c:	01c00084 	movi	r7,2
   12d70:	000d883a 	mov	r6,zero
   12d74:	0015e780 	call	15e78 <_lseek_r>
   12d78:	8080030b 	ldhu	r2,12(r16)
   12d7c:	8140038f 	ldh	r5,14(r16)
   12d80:	10bbffcc 	andi	r2,r2,61439
   12d84:	980f883a 	mov	r7,r19
   12d88:	900d883a 	mov	r6,r18
   12d8c:	8809883a 	mov	r4,r17
   12d90:	8080030d 	sth	r2,12(r16)
   12d94:	dfc00417 	ldw	ra,16(sp)
   12d98:	dcc00317 	ldw	r19,12(sp)
   12d9c:	dc800217 	ldw	r18,8(sp)
   12da0:	dc400117 	ldw	r17,4(sp)
   12da4:	dc000017 	ldw	r16,0(sp)
   12da8:	dec00504 	addi	sp,sp,20
   12dac:	00159441 	jmpi	15944 <_write_r>

00012db0 <__sseek>:
   12db0:	defffe04 	addi	sp,sp,-8
   12db4:	dc000015 	stw	r16,0(sp)
   12db8:	2821883a 	mov	r16,r5
   12dbc:	2940038f 	ldh	r5,14(r5)
   12dc0:	dfc00115 	stw	ra,4(sp)
   12dc4:	0015e780 	call	15e78 <_lseek_r>
   12dc8:	00ffffc4 	movi	r3,-1
   12dcc:	10c00826 	beq	r2,r3,12df0 <__sseek+0x40>
   12dd0:	80c0030b 	ldhu	r3,12(r16)
   12dd4:	80801415 	stw	r2,80(r16)
   12dd8:	18c40014 	ori	r3,r3,4096
   12ddc:	80c0030d 	sth	r3,12(r16)
   12de0:	dfc00117 	ldw	ra,4(sp)
   12de4:	dc000017 	ldw	r16,0(sp)
   12de8:	dec00204 	addi	sp,sp,8
   12dec:	f800283a 	ret
   12df0:	80c0030b 	ldhu	r3,12(r16)
   12df4:	18fbffcc 	andi	r3,r3,61439
   12df8:	80c0030d 	sth	r3,12(r16)
   12dfc:	dfc00117 	ldw	ra,4(sp)
   12e00:	dc000017 	ldw	r16,0(sp)
   12e04:	dec00204 	addi	sp,sp,8
   12e08:	f800283a 	ret

00012e0c <__sclose>:
   12e0c:	2940038f 	ldh	r5,14(r5)
   12e10:	00159a41 	jmpi	159a4 <_close_r>

00012e14 <strcmp>:
   12e14:	2144b03a 	or	r2,r4,r5
   12e18:	108000cc 	andi	r2,r2,3
   12e1c:	1000171e 	bne	r2,zero,12e7c <strcmp+0x68>
   12e20:	20800017 	ldw	r2,0(r4)
   12e24:	28c00017 	ldw	r3,0(r5)
   12e28:	10c0141e 	bne	r2,r3,12e7c <strcmp+0x68>
   12e2c:	027fbff4 	movhi	r9,65279
   12e30:	4a7fbfc4 	addi	r9,r9,-257
   12e34:	0086303a 	nor	r3,zero,r2
   12e38:	02202074 	movhi	r8,32897
   12e3c:	1245883a 	add	r2,r2,r9
   12e40:	42202004 	addi	r8,r8,-32640
   12e44:	10c4703a 	and	r2,r2,r3
   12e48:	1204703a 	and	r2,r2,r8
   12e4c:	10000226 	beq	r2,zero,12e58 <strcmp+0x44>
   12e50:	00002306 	br	12ee0 <strcmp+0xcc>
   12e54:	1000221e 	bne	r2,zero,12ee0 <strcmp+0xcc>
   12e58:	21000104 	addi	r4,r4,4
   12e5c:	20c00017 	ldw	r3,0(r4)
   12e60:	29400104 	addi	r5,r5,4
   12e64:	29800017 	ldw	r6,0(r5)
   12e68:	1a4f883a 	add	r7,r3,r9
   12e6c:	00c4303a 	nor	r2,zero,r3
   12e70:	3884703a 	and	r2,r7,r2
   12e74:	1204703a 	and	r2,r2,r8
   12e78:	19bff626 	beq	r3,r6,12e54 <__alt_data_end+0xf0012e54>
   12e7c:	20800003 	ldbu	r2,0(r4)
   12e80:	10c03fcc 	andi	r3,r2,255
   12e84:	18c0201c 	xori	r3,r3,128
   12e88:	18ffe004 	addi	r3,r3,-128
   12e8c:	18000c26 	beq	r3,zero,12ec0 <strcmp+0xac>
   12e90:	29800007 	ldb	r6,0(r5)
   12e94:	19800326 	beq	r3,r6,12ea4 <strcmp+0x90>
   12e98:	00001306 	br	12ee8 <strcmp+0xd4>
   12e9c:	29800007 	ldb	r6,0(r5)
   12ea0:	11800b1e 	bne	r2,r6,12ed0 <strcmp+0xbc>
   12ea4:	21000044 	addi	r4,r4,1
   12ea8:	20c00003 	ldbu	r3,0(r4)
   12eac:	29400044 	addi	r5,r5,1
   12eb0:	18803fcc 	andi	r2,r3,255
   12eb4:	1080201c 	xori	r2,r2,128
   12eb8:	10bfe004 	addi	r2,r2,-128
   12ebc:	103ff71e 	bne	r2,zero,12e9c <__alt_data_end+0xf0012e9c>
   12ec0:	0007883a 	mov	r3,zero
   12ec4:	28800003 	ldbu	r2,0(r5)
   12ec8:	1885c83a 	sub	r2,r3,r2
   12ecc:	f800283a 	ret
   12ed0:	28800003 	ldbu	r2,0(r5)
   12ed4:	18c03fcc 	andi	r3,r3,255
   12ed8:	1885c83a 	sub	r2,r3,r2
   12edc:	f800283a 	ret
   12ee0:	0005883a 	mov	r2,zero
   12ee4:	f800283a 	ret
   12ee8:	10c03fcc 	andi	r3,r2,255
   12eec:	003ff506 	br	12ec4 <__alt_data_end+0xf0012ec4>

00012ef0 <__ssprint_r>:
   12ef0:	30800217 	ldw	r2,8(r6)
   12ef4:	defff604 	addi	sp,sp,-40
   12ef8:	dc800215 	stw	r18,8(sp)
   12efc:	dfc00915 	stw	ra,36(sp)
   12f00:	df000815 	stw	fp,32(sp)
   12f04:	ddc00715 	stw	r23,28(sp)
   12f08:	dd800615 	stw	r22,24(sp)
   12f0c:	dd400515 	stw	r21,20(sp)
   12f10:	dd000415 	stw	r20,16(sp)
   12f14:	dcc00315 	stw	r19,12(sp)
   12f18:	dc400115 	stw	r17,4(sp)
   12f1c:	dc000015 	stw	r16,0(sp)
   12f20:	3025883a 	mov	r18,r6
   12f24:	10005826 	beq	r2,zero,13088 <__ssprint_r+0x198>
   12f28:	2027883a 	mov	r19,r4
   12f2c:	35c00017 	ldw	r23,0(r6)
   12f30:	29000017 	ldw	r4,0(r5)
   12f34:	28800217 	ldw	r2,8(r5)
   12f38:	2823883a 	mov	r17,r5
   12f3c:	0039883a 	mov	fp,zero
   12f40:	0021883a 	mov	r16,zero
   12f44:	80003926 	beq	r16,zero,1302c <__ssprint_r+0x13c>
   12f48:	102b883a 	mov	r21,r2
   12f4c:	102d883a 	mov	r22,r2
   12f50:	80803a36 	bltu	r16,r2,1303c <__ssprint_r+0x14c>
   12f54:	88c0030b 	ldhu	r3,12(r17)
   12f58:	1881200c 	andi	r2,r3,1152
   12f5c:	10002626 	beq	r2,zero,12ff8 <__ssprint_r+0x108>
   12f60:	88800517 	ldw	r2,20(r17)
   12f64:	89400417 	ldw	r5,16(r17)
   12f68:	81800044 	addi	r6,r16,1
   12f6c:	108f883a 	add	r7,r2,r2
   12f70:	3885883a 	add	r2,r7,r2
   12f74:	100ed7fa 	srli	r7,r2,31
   12f78:	216dc83a 	sub	r22,r4,r5
   12f7c:	3589883a 	add	r4,r6,r22
   12f80:	3885883a 	add	r2,r7,r2
   12f84:	102bd07a 	srai	r21,r2,1
   12f88:	a80d883a 	mov	r6,r21
   12f8c:	a900022e 	bgeu	r21,r4,12f98 <__ssprint_r+0xa8>
   12f90:	202b883a 	mov	r21,r4
   12f94:	200d883a 	mov	r6,r4
   12f98:	18c1000c 	andi	r3,r3,1024
   12f9c:	18002a26 	beq	r3,zero,13048 <__ssprint_r+0x158>
   12fa0:	300b883a 	mov	r5,r6
   12fa4:	9809883a 	mov	r4,r19
   12fa8:	0010c640 	call	10c64 <_malloc_r>
   12fac:	1029883a 	mov	r20,r2
   12fb0:	10002c26 	beq	r2,zero,13064 <__ssprint_r+0x174>
   12fb4:	89400417 	ldw	r5,16(r17)
   12fb8:	b00d883a 	mov	r6,r22
   12fbc:	1009883a 	mov	r4,r2
   12fc0:	000957c0 	call	957c <memcpy>
   12fc4:	8880030b 	ldhu	r2,12(r17)
   12fc8:	00fedfc4 	movi	r3,-1153
   12fcc:	10c4703a 	and	r2,r2,r3
   12fd0:	10802014 	ori	r2,r2,128
   12fd4:	8880030d 	sth	r2,12(r17)
   12fd8:	a589883a 	add	r4,r20,r22
   12fdc:	adadc83a 	sub	r22,r21,r22
   12fe0:	8d400515 	stw	r21,20(r17)
   12fe4:	8d800215 	stw	r22,8(r17)
   12fe8:	8d000415 	stw	r20,16(r17)
   12fec:	89000015 	stw	r4,0(r17)
   12ff0:	802b883a 	mov	r21,r16
   12ff4:	802d883a 	mov	r22,r16
   12ff8:	b00d883a 	mov	r6,r22
   12ffc:	e00b883a 	mov	r5,fp
   13000:	00115540 	call	11554 <memmove>
   13004:	88800217 	ldw	r2,8(r17)
   13008:	89000017 	ldw	r4,0(r17)
   1300c:	90c00217 	ldw	r3,8(r18)
   13010:	1545c83a 	sub	r2,r2,r21
   13014:	2589883a 	add	r4,r4,r22
   13018:	88800215 	stw	r2,8(r17)
   1301c:	89000015 	stw	r4,0(r17)
   13020:	1c21c83a 	sub	r16,r3,r16
   13024:	94000215 	stw	r16,8(r18)
   13028:	80001726 	beq	r16,zero,13088 <__ssprint_r+0x198>
   1302c:	bf000017 	ldw	fp,0(r23)
   13030:	bc000117 	ldw	r16,4(r23)
   13034:	bdc00204 	addi	r23,r23,8
   13038:	003fc206 	br	12f44 <__alt_data_end+0xf0012f44>
   1303c:	802b883a 	mov	r21,r16
   13040:	802d883a 	mov	r22,r16
   13044:	003fec06 	br	12ff8 <__alt_data_end+0xf0012ff8>
   13048:	9809883a 	mov	r4,r19
   1304c:	00126ac0 	call	126ac <_realloc_r>
   13050:	1029883a 	mov	r20,r2
   13054:	103fe01e 	bne	r2,zero,12fd8 <__alt_data_end+0xf0012fd8>
   13058:	89400417 	ldw	r5,16(r17)
   1305c:	9809883a 	mov	r4,r19
   13060:	00100780 	call	10078 <_free_r>
   13064:	88c0030b 	ldhu	r3,12(r17)
   13068:	00800304 	movi	r2,12
   1306c:	98800015 	stw	r2,0(r19)
   13070:	18c01014 	ori	r3,r3,64
   13074:	88c0030d 	sth	r3,12(r17)
   13078:	00bfffc4 	movi	r2,-1
   1307c:	90000215 	stw	zero,8(r18)
   13080:	90000115 	stw	zero,4(r18)
   13084:	00000206 	br	13090 <__ssprint_r+0x1a0>
   13088:	90000115 	stw	zero,4(r18)
   1308c:	0005883a 	mov	r2,zero
   13090:	dfc00917 	ldw	ra,36(sp)
   13094:	df000817 	ldw	fp,32(sp)
   13098:	ddc00717 	ldw	r23,28(sp)
   1309c:	dd800617 	ldw	r22,24(sp)
   130a0:	dd400517 	ldw	r21,20(sp)
   130a4:	dd000417 	ldw	r20,16(sp)
   130a8:	dcc00317 	ldw	r19,12(sp)
   130ac:	dc800217 	ldw	r18,8(sp)
   130b0:	dc400117 	ldw	r17,4(sp)
   130b4:	dc000017 	ldw	r16,0(sp)
   130b8:	dec00a04 	addi	sp,sp,40
   130bc:	f800283a 	ret

000130c0 <___svfiprintf_internal_r>:
   130c0:	2880030b 	ldhu	r2,12(r5)
   130c4:	deffc804 	addi	sp,sp,-224
   130c8:	dcc03115 	stw	r19,196(sp)
   130cc:	dfc03715 	stw	ra,220(sp)
   130d0:	df003615 	stw	fp,216(sp)
   130d4:	ddc03515 	stw	r23,212(sp)
   130d8:	dd803415 	stw	r22,208(sp)
   130dc:	dd403315 	stw	r21,204(sp)
   130e0:	dd003215 	stw	r20,200(sp)
   130e4:	dc803015 	stw	r18,192(sp)
   130e8:	dc402f15 	stw	r17,188(sp)
   130ec:	dc002e15 	stw	r16,184(sp)
   130f0:	d9402715 	stw	r5,156(sp)
   130f4:	d9002a15 	stw	r4,168(sp)
   130f8:	1080200c 	andi	r2,r2,128
   130fc:	d9c02315 	stw	r7,140(sp)
   13100:	3027883a 	mov	r19,r6
   13104:	10000226 	beq	r2,zero,13110 <___svfiprintf_internal_r+0x50>
   13108:	28800417 	ldw	r2,16(r5)
   1310c:	10041d26 	beq	r2,zero,14184 <___svfiprintf_internal_r+0x10c4>
   13110:	dac01a04 	addi	r11,sp,104
   13114:	dac01e15 	stw	r11,120(sp)
   13118:	d8801e17 	ldw	r2,120(sp)
   1311c:	dac019c4 	addi	r11,sp,103
   13120:	dd402a17 	ldw	r21,168(sp)
   13124:	ddc02717 	ldw	r23,156(sp)
   13128:	05820034 	movhi	r22,2048
   1312c:	05020034 	movhi	r20,2048
   13130:	dac01f15 	stw	r11,124(sp)
   13134:	12d7c83a 	sub	r11,r2,r11
   13138:	b5815304 	addi	r22,r22,1356
   1313c:	a5014f04 	addi	r20,r20,1340
   13140:	dec01a15 	stw	sp,104(sp)
   13144:	d8001c15 	stw	zero,112(sp)
   13148:	d8001b15 	stw	zero,108(sp)
   1314c:	d811883a 	mov	r8,sp
   13150:	d8002915 	stw	zero,164(sp)
   13154:	d8002515 	stw	zero,148(sp)
   13158:	dac02b15 	stw	r11,172(sp)
   1315c:	98800007 	ldb	r2,0(r19)
   13160:	1002dd26 	beq	r2,zero,13cd8 <___svfiprintf_internal_r+0xc18>
   13164:	00c00944 	movi	r3,37
   13168:	9823883a 	mov	r17,r19
   1316c:	10c0021e 	bne	r2,r3,13178 <___svfiprintf_internal_r+0xb8>
   13170:	00001406 	br	131c4 <___svfiprintf_internal_r+0x104>
   13174:	10c00326 	beq	r2,r3,13184 <___svfiprintf_internal_r+0xc4>
   13178:	8c400044 	addi	r17,r17,1
   1317c:	88800007 	ldb	r2,0(r17)
   13180:	103ffc1e 	bne	r2,zero,13174 <__alt_data_end+0xf0013174>
   13184:	8ce1c83a 	sub	r16,r17,r19
   13188:	80000e26 	beq	r16,zero,131c4 <___svfiprintf_internal_r+0x104>
   1318c:	d8c01c17 	ldw	r3,112(sp)
   13190:	d8801b17 	ldw	r2,108(sp)
   13194:	44c00015 	stw	r19,0(r8)
   13198:	1c07883a 	add	r3,r3,r16
   1319c:	10800044 	addi	r2,r2,1
   131a0:	d8c01c15 	stw	r3,112(sp)
   131a4:	44000115 	stw	r16,4(r8)
   131a8:	d8801b15 	stw	r2,108(sp)
   131ac:	00c001c4 	movi	r3,7
   131b0:	18831e16 	blt	r3,r2,13e2c <___svfiprintf_internal_r+0xd6c>
   131b4:	42000204 	addi	r8,r8,8
   131b8:	dac02517 	ldw	r11,148(sp)
   131bc:	5c17883a 	add	r11,r11,r16
   131c0:	dac02515 	stw	r11,148(sp)
   131c4:	88800007 	ldb	r2,0(r17)
   131c8:	1002c526 	beq	r2,zero,13ce0 <___svfiprintf_internal_r+0xc20>
   131cc:	88c00047 	ldb	r3,1(r17)
   131d0:	8cc00044 	addi	r19,r17,1
   131d4:	d8001d85 	stb	zero,118(sp)
   131d8:	0009883a 	mov	r4,zero
   131dc:	000f883a 	mov	r7,zero
   131e0:	043fffc4 	movi	r16,-1
   131e4:	d8002415 	stw	zero,144(sp)
   131e8:	0025883a 	mov	r18,zero
   131ec:	01401604 	movi	r5,88
   131f0:	01800244 	movi	r6,9
   131f4:	02800a84 	movi	r10,42
   131f8:	02401b04 	movi	r9,108
   131fc:	9cc00044 	addi	r19,r19,1
   13200:	18bff804 	addi	r2,r3,-32
   13204:	2881dd36 	bltu	r5,r2,1397c <___svfiprintf_internal_r+0x8bc>
   13208:	100490ba 	slli	r2,r2,2
   1320c:	02c00074 	movhi	r11,1
   13210:	5acc8804 	addi	r11,r11,12832
   13214:	12c5883a 	add	r2,r2,r11
   13218:	10800017 	ldw	r2,0(r2)
   1321c:	1000683a 	jmp	r2
   13220:	0001341c 	xori	zero,zero,1232
   13224:	0001397c 	xorhi	zero,zero,1253
   13228:	0001397c 	xorhi	zero,zero,1253
   1322c:	00013410 	cmplti	zero,zero,1232
   13230:	0001397c 	xorhi	zero,zero,1253
   13234:	0001397c 	xorhi	zero,zero,1253
   13238:	0001397c 	xorhi	zero,zero,1253
   1323c:	0001397c 	xorhi	zero,zero,1253
   13240:	0001397c 	xorhi	zero,zero,1253
   13244:	0001397c 	xorhi	zero,zero,1253
   13248:	00013384 	movi	zero,1230
   1324c:	00013560 	cmpeqi	zero,zero,1237
   13250:	0001397c 	xorhi	zero,zero,1253
   13254:	000133b0 	cmpltui	zero,zero,1230
   13258:	000139b0 	cmpltui	zero,zero,1254
   1325c:	0001397c 	xorhi	zero,zero,1253
   13260:	000139a4 	muli	zero,zero,1254
   13264:	00013944 	movi	zero,1253
   13268:	00013944 	movi	zero,1253
   1326c:	00013944 	movi	zero,1253
   13270:	00013944 	movi	zero,1253
   13274:	00013944 	movi	zero,1253
   13278:	00013944 	movi	zero,1253
   1327c:	00013944 	movi	zero,1253
   13280:	00013944 	movi	zero,1253
   13284:	00013944 	movi	zero,1253
   13288:	0001397c 	xorhi	zero,zero,1253
   1328c:	0001397c 	xorhi	zero,zero,1253
   13290:	0001397c 	xorhi	zero,zero,1253
   13294:	0001397c 	xorhi	zero,zero,1253
   13298:	0001397c 	xorhi	zero,zero,1253
   1329c:	0001397c 	xorhi	zero,zero,1253
   132a0:	0001397c 	xorhi	zero,zero,1253
   132a4:	0001397c 	xorhi	zero,zero,1253
   132a8:	0001397c 	xorhi	zero,zero,1253
   132ac:	0001397c 	xorhi	zero,zero,1253
   132b0:	000138e0 	cmpeqi	zero,zero,1251
   132b4:	0001397c 	xorhi	zero,zero,1253
   132b8:	0001397c 	xorhi	zero,zero,1253
   132bc:	0001397c 	xorhi	zero,zero,1253
   132c0:	0001397c 	xorhi	zero,zero,1253
   132c4:	0001397c 	xorhi	zero,zero,1253
   132c8:	0001397c 	xorhi	zero,zero,1253
   132cc:	0001397c 	xorhi	zero,zero,1253
   132d0:	0001397c 	xorhi	zero,zero,1253
   132d4:	0001397c 	xorhi	zero,zero,1253
   132d8:	0001397c 	xorhi	zero,zero,1253
   132dc:	00013a58 	cmpnei	zero,zero,1257
   132e0:	0001397c 	xorhi	zero,zero,1253
   132e4:	0001397c 	xorhi	zero,zero,1253
   132e8:	0001397c 	xorhi	zero,zero,1253
   132ec:	0001397c 	xorhi	zero,zero,1253
   132f0:	0001397c 	xorhi	zero,zero,1253
   132f4:	000139f0 	cmpltui	zero,zero,1255
   132f8:	0001397c 	xorhi	zero,zero,1253
   132fc:	0001397c 	xorhi	zero,zero,1253
   13300:	00013724 	muli	zero,zero,1244
   13304:	0001397c 	xorhi	zero,zero,1253
   13308:	0001397c 	xorhi	zero,zero,1253
   1330c:	0001397c 	xorhi	zero,zero,1253
   13310:	0001397c 	xorhi	zero,zero,1253
   13314:	0001397c 	xorhi	zero,zero,1253
   13318:	0001397c 	xorhi	zero,zero,1253
   1331c:	0001397c 	xorhi	zero,zero,1253
   13320:	0001397c 	xorhi	zero,zero,1253
   13324:	0001397c 	xorhi	zero,zero,1253
   13328:	0001397c 	xorhi	zero,zero,1253
   1332c:	00013614 	movui	zero,1240
   13330:	000137c0 	call	137c <prvInsertBlockIntoFreeList+0xac>
   13334:	0001397c 	xorhi	zero,zero,1253
   13338:	0001397c 	xorhi	zero,zero,1253
   1333c:	0001397c 	xorhi	zero,zero,1253
   13340:	000137b4 	movhi	zero,1246
   13344:	000137c0 	call	137c <prvInsertBlockIntoFreeList+0xac>
   13348:	0001397c 	xorhi	zero,zero,1253
   1334c:	0001397c 	xorhi	zero,zero,1253
   13350:	000137a4 	muli	zero,zero,1246
   13354:	0001397c 	xorhi	zero,zero,1253
   13358:	00013768 	cmpgeui	zero,zero,1245
   1335c:	00013570 	cmpltui	zero,zero,1237
   13360:	000133bc 	xorhi	zero,zero,1230
   13364:	000138d4 	movui	zero,1251
   13368:	0001397c 	xorhi	zero,zero,1253
   1336c:	00013888 	cmpgei	zero,zero,1250
   13370:	0001397c 	xorhi	zero,zero,1253
   13374:	000134e0 	cmpeqi	zero,zero,1235
   13378:	0001397c 	xorhi	zero,zero,1253
   1337c:	0001397c 	xorhi	zero,zero,1253
   13380:	0001343c 	xorhi	zero,zero,1232
   13384:	dac02317 	ldw	r11,140(sp)
   13388:	5ac00017 	ldw	r11,0(r11)
   1338c:	dac02415 	stw	r11,144(sp)
   13390:	dac02317 	ldw	r11,140(sp)
   13394:	58800104 	addi	r2,r11,4
   13398:	dac02417 	ldw	r11,144(sp)
   1339c:	5802e90e 	bge	r11,zero,13f44 <___svfiprintf_internal_r+0xe84>
   133a0:	dac02417 	ldw	r11,144(sp)
   133a4:	d8802315 	stw	r2,140(sp)
   133a8:	02d7c83a 	sub	r11,zero,r11
   133ac:	dac02415 	stw	r11,144(sp)
   133b0:	94800114 	ori	r18,r18,4
   133b4:	98c00007 	ldb	r3,0(r19)
   133b8:	003f9006 	br	131fc <__alt_data_end+0xf00131fc>
   133bc:	00800c04 	movi	r2,48
   133c0:	dac02317 	ldw	r11,140(sp)
   133c4:	d8801d05 	stb	r2,116(sp)
   133c8:	00801e04 	movi	r2,120
   133cc:	d8801d45 	stb	r2,117(sp)
   133d0:	d8001d85 	stb	zero,118(sp)
   133d4:	58c00104 	addi	r3,r11,4
   133d8:	5f000017 	ldw	fp,0(r11)
   133dc:	0013883a 	mov	r9,zero
   133e0:	90800094 	ori	r2,r18,2
   133e4:	80032b16 	blt	r16,zero,14094 <___svfiprintf_internal_r+0xfd4>
   133e8:	00bfdfc4 	movi	r2,-129
   133ec:	90a4703a 	and	r18,r18,r2
   133f0:	d8c02315 	stw	r3,140(sp)
   133f4:	94800094 	ori	r18,r18,2
   133f8:	e002dc26 	beq	fp,zero,13f6c <___svfiprintf_internal_r+0xeac>
   133fc:	01020034 	movhi	r4,2048
   13400:	2100e604 	addi	r4,r4,920
   13404:	0015883a 	mov	r10,zero
   13408:	d9002915 	stw	r4,164(sp)
   1340c:	00002306 	br	1349c <___svfiprintf_internal_r+0x3dc>
   13410:	94800054 	ori	r18,r18,1
   13414:	98c00007 	ldb	r3,0(r19)
   13418:	003f7806 	br	131fc <__alt_data_end+0xf00131fc>
   1341c:	38803fcc 	andi	r2,r7,255
   13420:	1080201c 	xori	r2,r2,128
   13424:	10bfe004 	addi	r2,r2,-128
   13428:	1002f31e 	bne	r2,zero,13ff8 <___svfiprintf_internal_r+0xf38>
   1342c:	01000044 	movi	r4,1
   13430:	01c00804 	movi	r7,32
   13434:	98c00007 	ldb	r3,0(r19)
   13438:	003f7006 	br	131fc <__alt_data_end+0xf00131fc>
   1343c:	21003fcc 	andi	r4,r4,255
   13440:	2003aa1e 	bne	r4,zero,142ec <___svfiprintf_internal_r+0x122c>
   13444:	00820034 	movhi	r2,2048
   13448:	1080e604 	addi	r2,r2,920
   1344c:	d8802915 	stw	r2,164(sp)
   13450:	9080080c 	andi	r2,r18,32
   13454:	1000ba26 	beq	r2,zero,13740 <___svfiprintf_internal_r+0x680>
   13458:	dac02317 	ldw	r11,140(sp)
   1345c:	5f000017 	ldw	fp,0(r11)
   13460:	5a400117 	ldw	r9,4(r11)
   13464:	5ac00204 	addi	r11,r11,8
   13468:	dac02315 	stw	r11,140(sp)
   1346c:	9080004c 	andi	r2,r18,1
   13470:	10029026 	beq	r2,zero,13eb4 <___svfiprintf_internal_r+0xdf4>
   13474:	e244b03a 	or	r2,fp,r9
   13478:	1002d41e 	bne	r2,zero,13fcc <___svfiprintf_internal_r+0xf0c>
   1347c:	d8001d85 	stb	zero,118(sp)
   13480:	80030b16 	blt	r16,zero,140b0 <___svfiprintf_internal_r+0xff0>
   13484:	00bfdfc4 	movi	r2,-129
   13488:	90a4703a 	and	r18,r18,r2
   1348c:	0015883a 	mov	r10,zero
   13490:	80002426 	beq	r16,zero,13524 <___svfiprintf_internal_r+0x464>
   13494:	0039883a 	mov	fp,zero
   13498:	0013883a 	mov	r9,zero
   1349c:	d9002917 	ldw	r4,164(sp)
   134a0:	dc401a04 	addi	r17,sp,104
   134a4:	e08003cc 	andi	r2,fp,15
   134a8:	4806973a 	slli	r3,r9,28
   134ac:	2085883a 	add	r2,r4,r2
   134b0:	e038d13a 	srli	fp,fp,4
   134b4:	10800003 	ldbu	r2,0(r2)
   134b8:	4812d13a 	srli	r9,r9,4
   134bc:	8c7fffc4 	addi	r17,r17,-1
   134c0:	1f38b03a 	or	fp,r3,fp
   134c4:	88800005 	stb	r2,0(r17)
   134c8:	e244b03a 	or	r2,fp,r9
   134cc:	103ff51e 	bne	r2,zero,134a4 <__alt_data_end+0xf00134a4>
   134d0:	dac01e17 	ldw	r11,120(sp)
   134d4:	5c57c83a 	sub	r11,r11,r17
   134d8:	dac02115 	stw	r11,132(sp)
   134dc:	00001406 	br	13530 <___svfiprintf_internal_r+0x470>
   134e0:	21003fcc 	andi	r4,r4,255
   134e4:	2003741e 	bne	r4,zero,142b8 <___svfiprintf_internal_r+0x11f8>
   134e8:	9080080c 	andi	r2,r18,32
   134ec:	10014526 	beq	r2,zero,13a04 <___svfiprintf_internal_r+0x944>
   134f0:	dac02317 	ldw	r11,140(sp)
   134f4:	d8001d85 	stb	zero,118(sp)
   134f8:	58c00204 	addi	r3,r11,8
   134fc:	5f000017 	ldw	fp,0(r11)
   13500:	5a400117 	ldw	r9,4(r11)
   13504:	8002d916 	blt	r16,zero,1406c <___svfiprintf_internal_r+0xfac>
   13508:	013fdfc4 	movi	r4,-129
   1350c:	e244b03a 	or	r2,fp,r9
   13510:	d8c02315 	stw	r3,140(sp)
   13514:	9124703a 	and	r18,r18,r4
   13518:	0015883a 	mov	r10,zero
   1351c:	1000b91e 	bne	r2,zero,13804 <___svfiprintf_internal_r+0x744>
   13520:	8002e61e 	bne	r16,zero,140bc <___svfiprintf_internal_r+0xffc>
   13524:	0021883a 	mov	r16,zero
   13528:	d8002115 	stw	zero,132(sp)
   1352c:	dc401a04 	addi	r17,sp,104
   13530:	d8c02117 	ldw	r3,132(sp)
   13534:	dc002015 	stw	r16,128(sp)
   13538:	80c0010e 	bge	r16,r3,13540 <___svfiprintf_internal_r+0x480>
   1353c:	d8c02015 	stw	r3,128(sp)
   13540:	52803fcc 	andi	r10,r10,255
   13544:	5280201c 	xori	r10,r10,128
   13548:	52bfe004 	addi	r10,r10,-128
   1354c:	50003c26 	beq	r10,zero,13640 <___svfiprintf_internal_r+0x580>
   13550:	dac02017 	ldw	r11,128(sp)
   13554:	5ac00044 	addi	r11,r11,1
   13558:	dac02015 	stw	r11,128(sp)
   1355c:	00003806 	br	13640 <___svfiprintf_internal_r+0x580>
   13560:	01000044 	movi	r4,1
   13564:	01c00ac4 	movi	r7,43
   13568:	98c00007 	ldb	r3,0(r19)
   1356c:	003f2306 	br	131fc <__alt_data_end+0xf00131fc>
   13570:	21003fcc 	andi	r4,r4,255
   13574:	2003481e 	bne	r4,zero,14298 <___svfiprintf_internal_r+0x11d8>
   13578:	9080080c 	andi	r2,r18,32
   1357c:	10013b26 	beq	r2,zero,13a6c <___svfiprintf_internal_r+0x9ac>
   13580:	dac02317 	ldw	r11,140(sp)
   13584:	d8001d85 	stb	zero,118(sp)
   13588:	58800204 	addi	r2,r11,8
   1358c:	5f000017 	ldw	fp,0(r11)
   13590:	5a400117 	ldw	r9,4(r11)
   13594:	8002a816 	blt	r16,zero,14038 <___svfiprintf_internal_r+0xf78>
   13598:	013fdfc4 	movi	r4,-129
   1359c:	e246b03a 	or	r3,fp,r9
   135a0:	d8802315 	stw	r2,140(sp)
   135a4:	9124703a 	and	r18,r18,r4
   135a8:	18013c26 	beq	r3,zero,13a9c <___svfiprintf_internal_r+0x9dc>
   135ac:	0015883a 	mov	r10,zero
   135b0:	dc401a04 	addi	r17,sp,104
   135b4:	e006d0fa 	srli	r3,fp,3
   135b8:	4808977a 	slli	r4,r9,29
   135bc:	4812d0fa 	srli	r9,r9,3
   135c0:	e70001cc 	andi	fp,fp,7
   135c4:	e0800c04 	addi	r2,fp,48
   135c8:	8c7fffc4 	addi	r17,r17,-1
   135cc:	20f8b03a 	or	fp,r4,r3
   135d0:	88800005 	stb	r2,0(r17)
   135d4:	e246b03a 	or	r3,fp,r9
   135d8:	183ff61e 	bne	r3,zero,135b4 <__alt_data_end+0xf00135b4>
   135dc:	90c0004c 	andi	r3,r18,1
   135e0:	1800a526 	beq	r3,zero,13878 <___svfiprintf_internal_r+0x7b8>
   135e4:	10803fcc 	andi	r2,r2,255
   135e8:	1080201c 	xori	r2,r2,128
   135ec:	10bfe004 	addi	r2,r2,-128
   135f0:	00c00c04 	movi	r3,48
   135f4:	10ffb626 	beq	r2,r3,134d0 <__alt_data_end+0xf00134d0>
   135f8:	88ffffc5 	stb	r3,-1(r17)
   135fc:	d8c01e17 	ldw	r3,120(sp)
   13600:	88bfffc4 	addi	r2,r17,-1
   13604:	1023883a 	mov	r17,r2
   13608:	1887c83a 	sub	r3,r3,r2
   1360c:	d8c02115 	stw	r3,132(sp)
   13610:	003fc706 	br	13530 <__alt_data_end+0xf0013530>
   13614:	dac02317 	ldw	r11,140(sp)
   13618:	00c00044 	movi	r3,1
   1361c:	d8c02015 	stw	r3,128(sp)
   13620:	58800017 	ldw	r2,0(r11)
   13624:	5ac00104 	addi	r11,r11,4
   13628:	d8001d85 	stb	zero,118(sp)
   1362c:	d8801005 	stb	r2,64(sp)
   13630:	dac02315 	stw	r11,140(sp)
   13634:	d8c02115 	stw	r3,132(sp)
   13638:	dc401004 	addi	r17,sp,64
   1363c:	0021883a 	mov	r16,zero
   13640:	90c0008c 	andi	r3,r18,2
   13644:	d8c02215 	stw	r3,136(sp)
   13648:	18000326 	beq	r3,zero,13658 <___svfiprintf_internal_r+0x598>
   1364c:	dac02017 	ldw	r11,128(sp)
   13650:	5ac00084 	addi	r11,r11,2
   13654:	dac02015 	stw	r11,128(sp)
   13658:	90c0210c 	andi	r3,r18,132
   1365c:	d8c02615 	stw	r3,152(sp)
   13660:	1801131e 	bne	r3,zero,13ab0 <___svfiprintf_internal_r+0x9f0>
   13664:	dac02417 	ldw	r11,144(sp)
   13668:	d8c02017 	ldw	r3,128(sp)
   1366c:	58f9c83a 	sub	fp,r11,r3
   13670:	07010f0e 	bge	zero,fp,13ab0 <___svfiprintf_internal_r+0x9f0>
   13674:	02400404 	movi	r9,16
   13678:	d8c01c17 	ldw	r3,112(sp)
   1367c:	d8801b17 	ldw	r2,108(sp)
   13680:	4f02d60e 	bge	r9,fp,141dc <___svfiprintf_internal_r+0x111c>
   13684:	01420034 	movhi	r5,2048
   13688:	29415304 	addi	r5,r5,1356
   1368c:	d9402815 	stw	r5,160(sp)
   13690:	028001c4 	movi	r10,7
   13694:	00000306 	br	136a4 <___svfiprintf_internal_r+0x5e4>
   13698:	e73ffc04 	addi	fp,fp,-16
   1369c:	42000204 	addi	r8,r8,8
   136a0:	4f00150e 	bge	r9,fp,136f8 <___svfiprintf_internal_r+0x638>
   136a4:	18c00404 	addi	r3,r3,16
   136a8:	10800044 	addi	r2,r2,1
   136ac:	45800015 	stw	r22,0(r8)
   136b0:	42400115 	stw	r9,4(r8)
   136b4:	d8c01c15 	stw	r3,112(sp)
   136b8:	d8801b15 	stw	r2,108(sp)
   136bc:	50bff60e 	bge	r10,r2,13698 <__alt_data_end+0xf0013698>
   136c0:	d9801a04 	addi	r6,sp,104
   136c4:	b80b883a 	mov	r5,r23
   136c8:	a809883a 	mov	r4,r21
   136cc:	da402c15 	stw	r9,176(sp)
   136d0:	da802d15 	stw	r10,180(sp)
   136d4:	0012ef00 	call	12ef0 <__ssprint_r>
   136d8:	da402c17 	ldw	r9,176(sp)
   136dc:	da802d17 	ldw	r10,180(sp)
   136e0:	1001851e 	bne	r2,zero,13cf8 <___svfiprintf_internal_r+0xc38>
   136e4:	e73ffc04 	addi	fp,fp,-16
   136e8:	d8c01c17 	ldw	r3,112(sp)
   136ec:	d8801b17 	ldw	r2,108(sp)
   136f0:	d811883a 	mov	r8,sp
   136f4:	4f3feb16 	blt	r9,fp,136a4 <__alt_data_end+0xf00136a4>
   136f8:	dac02817 	ldw	r11,160(sp)
   136fc:	e0c7883a 	add	r3,fp,r3
   13700:	10800044 	addi	r2,r2,1
   13704:	42c00015 	stw	r11,0(r8)
   13708:	47000115 	stw	fp,4(r8)
   1370c:	d8c01c15 	stw	r3,112(sp)
   13710:	d8801b15 	stw	r2,108(sp)
   13714:	010001c4 	movi	r4,7
   13718:	2081ee16 	blt	r4,r2,13ed4 <___svfiprintf_internal_r+0xe14>
   1371c:	42000204 	addi	r8,r8,8
   13720:	0000e506 	br	13ab8 <___svfiprintf_internal_r+0x9f8>
   13724:	21003fcc 	andi	r4,r4,255
   13728:	2002dd1e 	bne	r4,zero,142a0 <___svfiprintf_internal_r+0x11e0>
   1372c:	00820034 	movhi	r2,2048
   13730:	1080e104 	addi	r2,r2,900
   13734:	d8802915 	stw	r2,164(sp)
   13738:	9080080c 	andi	r2,r18,32
   1373c:	103f461e 	bne	r2,zero,13458 <__alt_data_end+0xf0013458>
   13740:	9080040c 	andi	r2,r18,16
   13744:	10022e1e 	bne	r2,zero,14000 <___svfiprintf_internal_r+0xf40>
   13748:	9080100c 	andi	r2,r18,64
   1374c:	dac02317 	ldw	r11,140(sp)
   13750:	10027326 	beq	r2,zero,14120 <___svfiprintf_internal_r+0x1060>
   13754:	5f00000b 	ldhu	fp,0(r11)
   13758:	5ac00104 	addi	r11,r11,4
   1375c:	0013883a 	mov	r9,zero
   13760:	dac02315 	stw	r11,140(sp)
   13764:	003f4106 	br	1346c <__alt_data_end+0xf001346c>
   13768:	21003fcc 	andi	r4,r4,255
   1376c:	2002e11e 	bne	r4,zero,142f4 <___svfiprintf_internal_r+0x1234>
   13770:	9080080c 	andi	r2,r18,32
   13774:	1002011e 	bne	r2,zero,13f7c <___svfiprintf_internal_r+0xebc>
   13778:	9080040c 	andi	r2,r18,16
   1377c:	10023e1e 	bne	r2,zero,14078 <___svfiprintf_internal_r+0xfb8>
   13780:	9480100c 	andi	r18,r18,64
   13784:	90023c26 	beq	r18,zero,14078 <___svfiprintf_internal_r+0xfb8>
   13788:	dac02317 	ldw	r11,140(sp)
   1378c:	58800017 	ldw	r2,0(r11)
   13790:	5ac00104 	addi	r11,r11,4
   13794:	dac02315 	stw	r11,140(sp)
   13798:	dac02517 	ldw	r11,148(sp)
   1379c:	12c0000d 	sth	r11,0(r2)
   137a0:	003e6e06 	br	1315c <__alt_data_end+0xf001315c>
   137a4:	98c00007 	ldb	r3,0(r19)
   137a8:	1a422926 	beq	r3,r9,14050 <___svfiprintf_internal_r+0xf90>
   137ac:	94800414 	ori	r18,r18,16
   137b0:	003e9206 	br	131fc <__alt_data_end+0xf00131fc>
   137b4:	94801014 	ori	r18,r18,64
   137b8:	98c00007 	ldb	r3,0(r19)
   137bc:	003e8f06 	br	131fc <__alt_data_end+0xf00131fc>
   137c0:	21003fcc 	andi	r4,r4,255
   137c4:	2002c71e 	bne	r4,zero,142e4 <___svfiprintf_internal_r+0x1224>
   137c8:	9080080c 	andi	r2,r18,32
   137cc:	10004926 	beq	r2,zero,138f4 <___svfiprintf_internal_r+0x834>
   137d0:	dac02317 	ldw	r11,140(sp)
   137d4:	58800117 	ldw	r2,4(r11)
   137d8:	5f000017 	ldw	fp,0(r11)
   137dc:	5ac00204 	addi	r11,r11,8
   137e0:	dac02315 	stw	r11,140(sp)
   137e4:	1013883a 	mov	r9,r2
   137e8:	10004b16 	blt	r2,zero,13918 <___svfiprintf_internal_r+0x858>
   137ec:	da801d83 	ldbu	r10,118(sp)
   137f0:	8001cb16 	blt	r16,zero,13f20 <___svfiprintf_internal_r+0xe60>
   137f4:	00ffdfc4 	movi	r3,-129
   137f8:	e244b03a 	or	r2,fp,r9
   137fc:	90e4703a 	and	r18,r18,r3
   13800:	103f4726 	beq	r2,zero,13520 <__alt_data_end+0xf0013520>
   13804:	48008c26 	beq	r9,zero,13a38 <___svfiprintf_internal_r+0x978>
   13808:	dc802015 	stw	r18,128(sp)
   1380c:	dc002115 	stw	r16,132(sp)
   13810:	dc401a04 	addi	r17,sp,104
   13814:	e021883a 	mov	r16,fp
   13818:	da002215 	stw	r8,136(sp)
   1381c:	5039883a 	mov	fp,r10
   13820:	4825883a 	mov	r18,r9
   13824:	8009883a 	mov	r4,r16
   13828:	900b883a 	mov	r5,r18
   1382c:	01800284 	movi	r6,10
   13830:	000f883a 	mov	r7,zero
   13834:	00167f00 	call	167f0 <__umoddi3>
   13838:	10800c04 	addi	r2,r2,48
   1383c:	8c7fffc4 	addi	r17,r17,-1
   13840:	8009883a 	mov	r4,r16
   13844:	900b883a 	mov	r5,r18
   13848:	88800005 	stb	r2,0(r17)
   1384c:	01800284 	movi	r6,10
   13850:	000f883a 	mov	r7,zero
   13854:	00162780 	call	16278 <__udivdi3>
   13858:	1021883a 	mov	r16,r2
   1385c:	10c4b03a 	or	r2,r2,r3
   13860:	1825883a 	mov	r18,r3
   13864:	103fef1e 	bne	r2,zero,13824 <__alt_data_end+0xf0013824>
   13868:	dc802017 	ldw	r18,128(sp)
   1386c:	dc002117 	ldw	r16,132(sp)
   13870:	da002217 	ldw	r8,136(sp)
   13874:	e015883a 	mov	r10,fp
   13878:	d8c01e17 	ldw	r3,120(sp)
   1387c:	1c47c83a 	sub	r3,r3,r17
   13880:	d8c02115 	stw	r3,132(sp)
   13884:	003f2a06 	br	13530 <__alt_data_end+0xf0013530>
   13888:	dac02317 	ldw	r11,140(sp)
   1388c:	d8001d85 	stb	zero,118(sp)
   13890:	5c400017 	ldw	r17,0(r11)
   13894:	5f000104 	addi	fp,r11,4
   13898:	88022f26 	beq	r17,zero,14158 <___svfiprintf_internal_r+0x1098>
   1389c:	80022516 	blt	r16,zero,14134 <___svfiprintf_internal_r+0x1074>
   138a0:	800d883a 	mov	r6,r16
   138a4:	000b883a 	mov	r5,zero
   138a8:	8809883a 	mov	r4,r17
   138ac:	da002c15 	stw	r8,176(sp)
   138b0:	00114700 	call	11470 <memchr>
   138b4:	da002c17 	ldw	r8,176(sp)
   138b8:	10026426 	beq	r2,zero,1424c <___svfiprintf_internal_r+0x118c>
   138bc:	1445c83a 	sub	r2,r2,r17
   138c0:	d8802115 	stw	r2,132(sp)
   138c4:	da801d83 	ldbu	r10,118(sp)
   138c8:	df002315 	stw	fp,140(sp)
   138cc:	0021883a 	mov	r16,zero
   138d0:	003f1706 	br	13530 <__alt_data_end+0xf0013530>
   138d4:	94800814 	ori	r18,r18,32
   138d8:	98c00007 	ldb	r3,0(r19)
   138dc:	003e4706 	br	131fc <__alt_data_end+0xf00131fc>
   138e0:	21003fcc 	andi	r4,r4,255
   138e4:	2002701e 	bne	r4,zero,142a8 <___svfiprintf_internal_r+0x11e8>
   138e8:	94800414 	ori	r18,r18,16
   138ec:	9080080c 	andi	r2,r18,32
   138f0:	103fb71e 	bne	r2,zero,137d0 <__alt_data_end+0xf00137d0>
   138f4:	9080040c 	andi	r2,r18,16
   138f8:	1001ab26 	beq	r2,zero,13fa8 <___svfiprintf_internal_r+0xee8>
   138fc:	dac02317 	ldw	r11,140(sp)
   13900:	5f000017 	ldw	fp,0(r11)
   13904:	5ac00104 	addi	r11,r11,4
   13908:	dac02315 	stw	r11,140(sp)
   1390c:	e013d7fa 	srai	r9,fp,31
   13910:	4805883a 	mov	r2,r9
   13914:	103fb50e 	bge	r2,zero,137ec <__alt_data_end+0xf00137ec>
   13918:	0739c83a 	sub	fp,zero,fp
   1391c:	02800b44 	movi	r10,45
   13920:	e004c03a 	cmpne	r2,fp,zero
   13924:	0253c83a 	sub	r9,zero,r9
   13928:	da801d85 	stb	r10,118(sp)
   1392c:	4893c83a 	sub	r9,r9,r2
   13930:	80023016 	blt	r16,zero,141f4 <___svfiprintf_internal_r+0x1134>
   13934:	00bfdfc4 	movi	r2,-129
   13938:	90a4703a 	and	r18,r18,r2
   1393c:	483fb21e 	bne	r9,zero,13808 <__alt_data_end+0xf0013808>
   13940:	00003d06 	br	13a38 <___svfiprintf_internal_r+0x978>
   13944:	9817883a 	mov	r11,r19
   13948:	d8002415 	stw	zero,144(sp)
   1394c:	18bff404 	addi	r2,r3,-48
   13950:	0019883a 	mov	r12,zero
   13954:	58c00007 	ldb	r3,0(r11)
   13958:	630002a4 	muli	r12,r12,10
   1395c:	9cc00044 	addi	r19,r19,1
   13960:	9817883a 	mov	r11,r19
   13964:	1319883a 	add	r12,r2,r12
   13968:	18bff404 	addi	r2,r3,-48
   1396c:	30bff92e 	bgeu	r6,r2,13954 <__alt_data_end+0xf0013954>
   13970:	db002415 	stw	r12,144(sp)
   13974:	18bff804 	addi	r2,r3,-32
   13978:	28be232e 	bgeu	r5,r2,13208 <__alt_data_end+0xf0013208>
   1397c:	21003fcc 	andi	r4,r4,255
   13980:	20024b1e 	bne	r4,zero,142b0 <___svfiprintf_internal_r+0x11f0>
   13984:	1800d626 	beq	r3,zero,13ce0 <___svfiprintf_internal_r+0xc20>
   13988:	02c00044 	movi	r11,1
   1398c:	dac02015 	stw	r11,128(sp)
   13990:	d8c01005 	stb	r3,64(sp)
   13994:	d8001d85 	stb	zero,118(sp)
   13998:	dac02115 	stw	r11,132(sp)
   1399c:	dc401004 	addi	r17,sp,64
   139a0:	003f2606 	br	1363c <__alt_data_end+0xf001363c>
   139a4:	94802014 	ori	r18,r18,128
   139a8:	98c00007 	ldb	r3,0(r19)
   139ac:	003e1306 	br	131fc <__alt_data_end+0xf00131fc>
   139b0:	98c00007 	ldb	r3,0(r19)
   139b4:	9ac00044 	addi	r11,r19,1
   139b8:	1a822b26 	beq	r3,r10,14268 <___svfiprintf_internal_r+0x11a8>
   139bc:	18bff404 	addi	r2,r3,-48
   139c0:	0021883a 	mov	r16,zero
   139c4:	30821e36 	bltu	r6,r2,14240 <___svfiprintf_internal_r+0x1180>
   139c8:	58c00007 	ldb	r3,0(r11)
   139cc:	840002a4 	muli	r16,r16,10
   139d0:	5cc00044 	addi	r19,r11,1
   139d4:	9817883a 	mov	r11,r19
   139d8:	80a1883a 	add	r16,r16,r2
   139dc:	18bff404 	addi	r2,r3,-48
   139e0:	30bff92e 	bgeu	r6,r2,139c8 <__alt_data_end+0xf00139c8>
   139e4:	803e060e 	bge	r16,zero,13200 <__alt_data_end+0xf0013200>
   139e8:	043fffc4 	movi	r16,-1
   139ec:	003e0406 	br	13200 <__alt_data_end+0xf0013200>
   139f0:	21003fcc 	andi	r4,r4,255
   139f4:	2002371e 	bne	r4,zero,142d4 <___svfiprintf_internal_r+0x1214>
   139f8:	94800414 	ori	r18,r18,16
   139fc:	9080080c 	andi	r2,r18,32
   13a00:	103ebb1e 	bne	r2,zero,134f0 <__alt_data_end+0xf00134f0>
   13a04:	9080040c 	andi	r2,r18,16
   13a08:	10013b26 	beq	r2,zero,13ef8 <___svfiprintf_internal_r+0xe38>
   13a0c:	dac02317 	ldw	r11,140(sp)
   13a10:	d8001d85 	stb	zero,118(sp)
   13a14:	0013883a 	mov	r9,zero
   13a18:	58800104 	addi	r2,r11,4
   13a1c:	5f000017 	ldw	fp,0(r11)
   13a20:	80013d16 	blt	r16,zero,13f18 <___svfiprintf_internal_r+0xe58>
   13a24:	00ffdfc4 	movi	r3,-129
   13a28:	d8802315 	stw	r2,140(sp)
   13a2c:	90e4703a 	and	r18,r18,r3
   13a30:	0015883a 	mov	r10,zero
   13a34:	e03eba26 	beq	fp,zero,13520 <__alt_data_end+0xf0013520>
   13a38:	00800244 	movi	r2,9
   13a3c:	173f7236 	bltu	r2,fp,13808 <__alt_data_end+0xf0013808>
   13a40:	dac02b17 	ldw	r11,172(sp)
   13a44:	e7000c04 	addi	fp,fp,48
   13a48:	df0019c5 	stb	fp,103(sp)
   13a4c:	dac02115 	stw	r11,132(sp)
   13a50:	dc4019c4 	addi	r17,sp,103
   13a54:	003eb606 	br	13530 <__alt_data_end+0xf0013530>
   13a58:	21003fcc 	andi	r4,r4,255
   13a5c:	20021f1e 	bne	r4,zero,142dc <___svfiprintf_internal_r+0x121c>
   13a60:	94800414 	ori	r18,r18,16
   13a64:	9080080c 	andi	r2,r18,32
   13a68:	103ec51e 	bne	r2,zero,13580 <__alt_data_end+0xf0013580>
   13a6c:	9080040c 	andi	r2,r18,16
   13a70:	10016926 	beq	r2,zero,14018 <___svfiprintf_internal_r+0xf58>
   13a74:	dac02317 	ldw	r11,140(sp)
   13a78:	d8001d85 	stb	zero,118(sp)
   13a7c:	0013883a 	mov	r9,zero
   13a80:	58800104 	addi	r2,r11,4
   13a84:	5f000017 	ldw	fp,0(r11)
   13a88:	80016b16 	blt	r16,zero,14038 <___svfiprintf_internal_r+0xf78>
   13a8c:	00ffdfc4 	movi	r3,-129
   13a90:	d8802315 	stw	r2,140(sp)
   13a94:	90e4703a 	and	r18,r18,r3
   13a98:	e03ec41e 	bne	fp,zero,135ac <__alt_data_end+0xf00135ac>
   13a9c:	0015883a 	mov	r10,zero
   13aa0:	8001c226 	beq	r16,zero,141ac <___svfiprintf_internal_r+0x10ec>
   13aa4:	0039883a 	mov	fp,zero
   13aa8:	0013883a 	mov	r9,zero
   13aac:	003ec006 	br	135b0 <__alt_data_end+0xf00135b0>
   13ab0:	d8c01c17 	ldw	r3,112(sp)
   13ab4:	d8801b17 	ldw	r2,108(sp)
   13ab8:	d9001d87 	ldb	r4,118(sp)
   13abc:	20000b26 	beq	r4,zero,13aec <___svfiprintf_internal_r+0xa2c>
   13ac0:	d9001d84 	addi	r4,sp,118
   13ac4:	18c00044 	addi	r3,r3,1
   13ac8:	10800044 	addi	r2,r2,1
   13acc:	41000015 	stw	r4,0(r8)
   13ad0:	01000044 	movi	r4,1
   13ad4:	41000115 	stw	r4,4(r8)
   13ad8:	d8c01c15 	stw	r3,112(sp)
   13adc:	d8801b15 	stw	r2,108(sp)
   13ae0:	010001c4 	movi	r4,7
   13ae4:	2080e116 	blt	r4,r2,13e6c <___svfiprintf_internal_r+0xdac>
   13ae8:	42000204 	addi	r8,r8,8
   13aec:	dac02217 	ldw	r11,136(sp)
   13af0:	58000b26 	beq	r11,zero,13b20 <___svfiprintf_internal_r+0xa60>
   13af4:	d9001d04 	addi	r4,sp,116
   13af8:	18c00084 	addi	r3,r3,2
   13afc:	10800044 	addi	r2,r2,1
   13b00:	41000015 	stw	r4,0(r8)
   13b04:	01000084 	movi	r4,2
   13b08:	41000115 	stw	r4,4(r8)
   13b0c:	d8c01c15 	stw	r3,112(sp)
   13b10:	d8801b15 	stw	r2,108(sp)
   13b14:	010001c4 	movi	r4,7
   13b18:	2080dd16 	blt	r4,r2,13e90 <___svfiprintf_internal_r+0xdd0>
   13b1c:	42000204 	addi	r8,r8,8
   13b20:	dac02617 	ldw	r11,152(sp)
   13b24:	01002004 	movi	r4,128
   13b28:	59008426 	beq	r11,r4,13d3c <___svfiprintf_internal_r+0xc7c>
   13b2c:	dac02117 	ldw	r11,132(sp)
   13b30:	82e1c83a 	sub	r16,r16,r11
   13b34:	0400270e 	bge	zero,r16,13bd4 <___svfiprintf_internal_r+0xb14>
   13b38:	01c00404 	movi	r7,16
   13b3c:	3c016a0e 	bge	r7,r16,140e8 <___svfiprintf_internal_r+0x1028>
   13b40:	01420034 	movhi	r5,2048
   13b44:	29414f04 	addi	r5,r5,1340
   13b48:	d9402215 	stw	r5,136(sp)
   13b4c:	070001c4 	movi	fp,7
   13b50:	00000306 	br	13b60 <___svfiprintf_internal_r+0xaa0>
   13b54:	843ffc04 	addi	r16,r16,-16
   13b58:	42000204 	addi	r8,r8,8
   13b5c:	3c00130e 	bge	r7,r16,13bac <___svfiprintf_internal_r+0xaec>
   13b60:	18c00404 	addi	r3,r3,16
   13b64:	10800044 	addi	r2,r2,1
   13b68:	45000015 	stw	r20,0(r8)
   13b6c:	41c00115 	stw	r7,4(r8)
   13b70:	d8c01c15 	stw	r3,112(sp)
   13b74:	d8801b15 	stw	r2,108(sp)
   13b78:	e0bff60e 	bge	fp,r2,13b54 <__alt_data_end+0xf0013b54>
   13b7c:	d9801a04 	addi	r6,sp,104
   13b80:	b80b883a 	mov	r5,r23
   13b84:	a809883a 	mov	r4,r21
   13b88:	d9c02c15 	stw	r7,176(sp)
   13b8c:	0012ef00 	call	12ef0 <__ssprint_r>
   13b90:	d9c02c17 	ldw	r7,176(sp)
   13b94:	1000581e 	bne	r2,zero,13cf8 <___svfiprintf_internal_r+0xc38>
   13b98:	843ffc04 	addi	r16,r16,-16
   13b9c:	d8c01c17 	ldw	r3,112(sp)
   13ba0:	d8801b17 	ldw	r2,108(sp)
   13ba4:	d811883a 	mov	r8,sp
   13ba8:	3c3fed16 	blt	r7,r16,13b60 <__alt_data_end+0xf0013b60>
   13bac:	dac02217 	ldw	r11,136(sp)
   13bb0:	1c07883a 	add	r3,r3,r16
   13bb4:	10800044 	addi	r2,r2,1
   13bb8:	42c00015 	stw	r11,0(r8)
   13bbc:	44000115 	stw	r16,4(r8)
   13bc0:	d8c01c15 	stw	r3,112(sp)
   13bc4:	d8801b15 	stw	r2,108(sp)
   13bc8:	010001c4 	movi	r4,7
   13bcc:	20809e16 	blt	r4,r2,13e48 <___svfiprintf_internal_r+0xd88>
   13bd0:	42000204 	addi	r8,r8,8
   13bd4:	dac02117 	ldw	r11,132(sp)
   13bd8:	10800044 	addi	r2,r2,1
   13bdc:	44400015 	stw	r17,0(r8)
   13be0:	58c7883a 	add	r3,r11,r3
   13be4:	42c00115 	stw	r11,4(r8)
   13be8:	d8c01c15 	stw	r3,112(sp)
   13bec:	d8801b15 	stw	r2,108(sp)
   13bf0:	010001c4 	movi	r4,7
   13bf4:	20807f16 	blt	r4,r2,13df4 <___svfiprintf_internal_r+0xd34>
   13bf8:	42000204 	addi	r8,r8,8
   13bfc:	9480010c 	andi	r18,r18,4
   13c00:	90002926 	beq	r18,zero,13ca8 <___svfiprintf_internal_r+0xbe8>
   13c04:	dac02417 	ldw	r11,144(sp)
   13c08:	d8802017 	ldw	r2,128(sp)
   13c0c:	58a1c83a 	sub	r16,r11,r2
   13c10:	0400250e 	bge	zero,r16,13ca8 <___svfiprintf_internal_r+0xbe8>
   13c14:	04400404 	movi	r17,16
   13c18:	d8801b17 	ldw	r2,108(sp)
   13c1c:	8c017c0e 	bge	r17,r16,14210 <___svfiprintf_internal_r+0x1150>
   13c20:	01420034 	movhi	r5,2048
   13c24:	29415304 	addi	r5,r5,1356
   13c28:	d9402815 	stw	r5,160(sp)
   13c2c:	048001c4 	movi	r18,7
   13c30:	00000306 	br	13c40 <___svfiprintf_internal_r+0xb80>
   13c34:	843ffc04 	addi	r16,r16,-16
   13c38:	42000204 	addi	r8,r8,8
   13c3c:	8c00110e 	bge	r17,r16,13c84 <___svfiprintf_internal_r+0xbc4>
   13c40:	18c00404 	addi	r3,r3,16
   13c44:	10800044 	addi	r2,r2,1
   13c48:	45800015 	stw	r22,0(r8)
   13c4c:	44400115 	stw	r17,4(r8)
   13c50:	d8c01c15 	stw	r3,112(sp)
   13c54:	d8801b15 	stw	r2,108(sp)
   13c58:	90bff60e 	bge	r18,r2,13c34 <__alt_data_end+0xf0013c34>
   13c5c:	d9801a04 	addi	r6,sp,104
   13c60:	b80b883a 	mov	r5,r23
   13c64:	a809883a 	mov	r4,r21
   13c68:	0012ef00 	call	12ef0 <__ssprint_r>
   13c6c:	1000221e 	bne	r2,zero,13cf8 <___svfiprintf_internal_r+0xc38>
   13c70:	843ffc04 	addi	r16,r16,-16
   13c74:	d8c01c17 	ldw	r3,112(sp)
   13c78:	d8801b17 	ldw	r2,108(sp)
   13c7c:	d811883a 	mov	r8,sp
   13c80:	8c3fef16 	blt	r17,r16,13c40 <__alt_data_end+0xf0013c40>
   13c84:	dac02817 	ldw	r11,160(sp)
   13c88:	1c07883a 	add	r3,r3,r16
   13c8c:	10800044 	addi	r2,r2,1
   13c90:	42c00015 	stw	r11,0(r8)
   13c94:	44000115 	stw	r16,4(r8)
   13c98:	d8c01c15 	stw	r3,112(sp)
   13c9c:	d8801b15 	stw	r2,108(sp)
   13ca0:	010001c4 	movi	r4,7
   13ca4:	2080aa16 	blt	r4,r2,13f50 <___svfiprintf_internal_r+0xe90>
   13ca8:	d8802417 	ldw	r2,144(sp)
   13cac:	dac02017 	ldw	r11,128(sp)
   13cb0:	12c0010e 	bge	r2,r11,13cb8 <___svfiprintf_internal_r+0xbf8>
   13cb4:	5805883a 	mov	r2,r11
   13cb8:	dac02517 	ldw	r11,148(sp)
   13cbc:	5897883a 	add	r11,r11,r2
   13cc0:	dac02515 	stw	r11,148(sp)
   13cc4:	1800531e 	bne	r3,zero,13e14 <___svfiprintf_internal_r+0xd54>
   13cc8:	98800007 	ldb	r2,0(r19)
   13ccc:	d8001b15 	stw	zero,108(sp)
   13cd0:	d811883a 	mov	r8,sp
   13cd4:	103d231e 	bne	r2,zero,13164 <__alt_data_end+0xf0013164>
   13cd8:	9823883a 	mov	r17,r19
   13cdc:	003d3906 	br	131c4 <__alt_data_end+0xf00131c4>
   13ce0:	d8801c17 	ldw	r2,112(sp)
   13ce4:	10000426 	beq	r2,zero,13cf8 <___svfiprintf_internal_r+0xc38>
   13ce8:	d9402717 	ldw	r5,156(sp)
   13cec:	d9002a17 	ldw	r4,168(sp)
   13cf0:	d9801a04 	addi	r6,sp,104
   13cf4:	0012ef00 	call	12ef0 <__ssprint_r>
   13cf8:	dac02717 	ldw	r11,156(sp)
   13cfc:	d8802517 	ldw	r2,148(sp)
   13d00:	58c0030b 	ldhu	r3,12(r11)
   13d04:	18c0100c 	andi	r3,r3,64
   13d08:	1801381e 	bne	r3,zero,141ec <___svfiprintf_internal_r+0x112c>
   13d0c:	dfc03717 	ldw	ra,220(sp)
   13d10:	df003617 	ldw	fp,216(sp)
   13d14:	ddc03517 	ldw	r23,212(sp)
   13d18:	dd803417 	ldw	r22,208(sp)
   13d1c:	dd403317 	ldw	r21,204(sp)
   13d20:	dd003217 	ldw	r20,200(sp)
   13d24:	dcc03117 	ldw	r19,196(sp)
   13d28:	dc803017 	ldw	r18,192(sp)
   13d2c:	dc402f17 	ldw	r17,188(sp)
   13d30:	dc002e17 	ldw	r16,184(sp)
   13d34:	dec03804 	addi	sp,sp,224
   13d38:	f800283a 	ret
   13d3c:	dac02417 	ldw	r11,144(sp)
   13d40:	d9002017 	ldw	r4,128(sp)
   13d44:	5939c83a 	sub	fp,r11,r4
   13d48:	073f780e 	bge	zero,fp,13b2c <__alt_data_end+0xf0013b2c>
   13d4c:	02400404 	movi	r9,16
   13d50:	4f01370e 	bge	r9,fp,14230 <___svfiprintf_internal_r+0x1170>
   13d54:	02c20034 	movhi	r11,2048
   13d58:	5ac14f04 	addi	r11,r11,1340
   13d5c:	dac02215 	stw	r11,136(sp)
   13d60:	028001c4 	movi	r10,7
   13d64:	00000306 	br	13d74 <___svfiprintf_internal_r+0xcb4>
   13d68:	e73ffc04 	addi	fp,fp,-16
   13d6c:	42000204 	addi	r8,r8,8
   13d70:	4f00150e 	bge	r9,fp,13dc8 <___svfiprintf_internal_r+0xd08>
   13d74:	18c00404 	addi	r3,r3,16
   13d78:	10800044 	addi	r2,r2,1
   13d7c:	45000015 	stw	r20,0(r8)
   13d80:	42400115 	stw	r9,4(r8)
   13d84:	d8c01c15 	stw	r3,112(sp)
   13d88:	d8801b15 	stw	r2,108(sp)
   13d8c:	50bff60e 	bge	r10,r2,13d68 <__alt_data_end+0xf0013d68>
   13d90:	d9801a04 	addi	r6,sp,104
   13d94:	b80b883a 	mov	r5,r23
   13d98:	a809883a 	mov	r4,r21
   13d9c:	da402c15 	stw	r9,176(sp)
   13da0:	da802d15 	stw	r10,180(sp)
   13da4:	0012ef00 	call	12ef0 <__ssprint_r>
   13da8:	da402c17 	ldw	r9,176(sp)
   13dac:	da802d17 	ldw	r10,180(sp)
   13db0:	103fd11e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13db4:	e73ffc04 	addi	fp,fp,-16
   13db8:	d8c01c17 	ldw	r3,112(sp)
   13dbc:	d8801b17 	ldw	r2,108(sp)
   13dc0:	d811883a 	mov	r8,sp
   13dc4:	4f3feb16 	blt	r9,fp,13d74 <__alt_data_end+0xf0013d74>
   13dc8:	dac02217 	ldw	r11,136(sp)
   13dcc:	1f07883a 	add	r3,r3,fp
   13dd0:	10800044 	addi	r2,r2,1
   13dd4:	42c00015 	stw	r11,0(r8)
   13dd8:	47000115 	stw	fp,4(r8)
   13ddc:	d8c01c15 	stw	r3,112(sp)
   13de0:	d8801b15 	stw	r2,108(sp)
   13de4:	010001c4 	movi	r4,7
   13de8:	2080b616 	blt	r4,r2,140c4 <___svfiprintf_internal_r+0x1004>
   13dec:	42000204 	addi	r8,r8,8
   13df0:	003f4e06 	br	13b2c <__alt_data_end+0xf0013b2c>
   13df4:	d9801a04 	addi	r6,sp,104
   13df8:	b80b883a 	mov	r5,r23
   13dfc:	a809883a 	mov	r4,r21
   13e00:	0012ef00 	call	12ef0 <__ssprint_r>
   13e04:	103fbc1e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13e08:	d8c01c17 	ldw	r3,112(sp)
   13e0c:	d811883a 	mov	r8,sp
   13e10:	003f7a06 	br	13bfc <__alt_data_end+0xf0013bfc>
   13e14:	d9801a04 	addi	r6,sp,104
   13e18:	b80b883a 	mov	r5,r23
   13e1c:	a809883a 	mov	r4,r21
   13e20:	0012ef00 	call	12ef0 <__ssprint_r>
   13e24:	103fa826 	beq	r2,zero,13cc8 <__alt_data_end+0xf0013cc8>
   13e28:	003fb306 	br	13cf8 <__alt_data_end+0xf0013cf8>
   13e2c:	d9801a04 	addi	r6,sp,104
   13e30:	b80b883a 	mov	r5,r23
   13e34:	a809883a 	mov	r4,r21
   13e38:	0012ef00 	call	12ef0 <__ssprint_r>
   13e3c:	103fae1e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13e40:	d811883a 	mov	r8,sp
   13e44:	003cdc06 	br	131b8 <__alt_data_end+0xf00131b8>
   13e48:	d9801a04 	addi	r6,sp,104
   13e4c:	b80b883a 	mov	r5,r23
   13e50:	a809883a 	mov	r4,r21
   13e54:	0012ef00 	call	12ef0 <__ssprint_r>
   13e58:	103fa71e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13e5c:	d8c01c17 	ldw	r3,112(sp)
   13e60:	d8801b17 	ldw	r2,108(sp)
   13e64:	d811883a 	mov	r8,sp
   13e68:	003f5a06 	br	13bd4 <__alt_data_end+0xf0013bd4>
   13e6c:	d9801a04 	addi	r6,sp,104
   13e70:	b80b883a 	mov	r5,r23
   13e74:	a809883a 	mov	r4,r21
   13e78:	0012ef00 	call	12ef0 <__ssprint_r>
   13e7c:	103f9e1e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13e80:	d8c01c17 	ldw	r3,112(sp)
   13e84:	d8801b17 	ldw	r2,108(sp)
   13e88:	d811883a 	mov	r8,sp
   13e8c:	003f1706 	br	13aec <__alt_data_end+0xf0013aec>
   13e90:	d9801a04 	addi	r6,sp,104
   13e94:	b80b883a 	mov	r5,r23
   13e98:	a809883a 	mov	r4,r21
   13e9c:	0012ef00 	call	12ef0 <__ssprint_r>
   13ea0:	103f951e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13ea4:	d8c01c17 	ldw	r3,112(sp)
   13ea8:	d8801b17 	ldw	r2,108(sp)
   13eac:	d811883a 	mov	r8,sp
   13eb0:	003f1b06 	br	13b20 <__alt_data_end+0xf0013b20>
   13eb4:	d8001d85 	stb	zero,118(sp)
   13eb8:	80007b16 	blt	r16,zero,140a8 <___svfiprintf_internal_r+0xfe8>
   13ebc:	00ffdfc4 	movi	r3,-129
   13ec0:	e244b03a 	or	r2,fp,r9
   13ec4:	90e4703a 	and	r18,r18,r3
   13ec8:	103d7026 	beq	r2,zero,1348c <__alt_data_end+0xf001348c>
   13ecc:	0015883a 	mov	r10,zero
   13ed0:	003d7206 	br	1349c <__alt_data_end+0xf001349c>
   13ed4:	d9801a04 	addi	r6,sp,104
   13ed8:	b80b883a 	mov	r5,r23
   13edc:	a809883a 	mov	r4,r21
   13ee0:	0012ef00 	call	12ef0 <__ssprint_r>
   13ee4:	103f841e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13ee8:	d8c01c17 	ldw	r3,112(sp)
   13eec:	d8801b17 	ldw	r2,108(sp)
   13ef0:	d811883a 	mov	r8,sp
   13ef4:	003ef006 	br	13ab8 <__alt_data_end+0xf0013ab8>
   13ef8:	9080100c 	andi	r2,r18,64
   13efc:	d8001d85 	stb	zero,118(sp)
   13f00:	dac02317 	ldw	r11,140(sp)
   13f04:	10008126 	beq	r2,zero,1410c <___svfiprintf_internal_r+0x104c>
   13f08:	58800104 	addi	r2,r11,4
   13f0c:	5f00000b 	ldhu	fp,0(r11)
   13f10:	0013883a 	mov	r9,zero
   13f14:	803ec30e 	bge	r16,zero,13a24 <__alt_data_end+0xf0013a24>
   13f18:	d8802315 	stw	r2,140(sp)
   13f1c:	0015883a 	mov	r10,zero
   13f20:	e244b03a 	or	r2,fp,r9
   13f24:	103e371e 	bne	r2,zero,13804 <__alt_data_end+0xf0013804>
   13f28:	00800044 	movi	r2,1
   13f2c:	10803fcc 	andi	r2,r2,255
   13f30:	00c00044 	movi	r3,1
   13f34:	10c06126 	beq	r2,r3,140bc <___svfiprintf_internal_r+0xffc>
   13f38:	00c00084 	movi	r3,2
   13f3c:	10fd5526 	beq	r2,r3,13494 <__alt_data_end+0xf0013494>
   13f40:	003ed806 	br	13aa4 <__alt_data_end+0xf0013aa4>
   13f44:	d8802315 	stw	r2,140(sp)
   13f48:	98c00007 	ldb	r3,0(r19)
   13f4c:	003cab06 	br	131fc <__alt_data_end+0xf00131fc>
   13f50:	d9801a04 	addi	r6,sp,104
   13f54:	b80b883a 	mov	r5,r23
   13f58:	a809883a 	mov	r4,r21
   13f5c:	0012ef00 	call	12ef0 <__ssprint_r>
   13f60:	103f651e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   13f64:	d8c01c17 	ldw	r3,112(sp)
   13f68:	003f4f06 	br	13ca8 <__alt_data_end+0xf0013ca8>
   13f6c:	00820034 	movhi	r2,2048
   13f70:	1080e604 	addi	r2,r2,920
   13f74:	d8802915 	stw	r2,164(sp)
   13f78:	003d4406 	br	1348c <__alt_data_end+0xf001348c>
   13f7c:	dac02317 	ldw	r11,140(sp)
   13f80:	58800017 	ldw	r2,0(r11)
   13f84:	dac02517 	ldw	r11,148(sp)
   13f88:	5807d7fa 	srai	r3,r11,31
   13f8c:	dac02317 	ldw	r11,140(sp)
   13f90:	10c00115 	stw	r3,4(r2)
   13f94:	5ac00104 	addi	r11,r11,4
   13f98:	dac02315 	stw	r11,140(sp)
   13f9c:	dac02517 	ldw	r11,148(sp)
   13fa0:	12c00015 	stw	r11,0(r2)
   13fa4:	003c6d06 	br	1315c <__alt_data_end+0xf001315c>
   13fa8:	9080100c 	andi	r2,r18,64
   13fac:	dac02317 	ldw	r11,140(sp)
   13fb0:	103e5326 	beq	r2,zero,13900 <__alt_data_end+0xf0013900>
   13fb4:	5f00000f 	ldh	fp,0(r11)
   13fb8:	5ac00104 	addi	r11,r11,4
   13fbc:	dac02315 	stw	r11,140(sp)
   13fc0:	e013d7fa 	srai	r9,fp,31
   13fc4:	4805883a 	mov	r2,r9
   13fc8:	003e0706 	br	137e8 <__alt_data_end+0xf00137e8>
   13fcc:	00800c04 	movi	r2,48
   13fd0:	d8801d05 	stb	r2,116(sp)
   13fd4:	d8c01d45 	stb	r3,117(sp)
   13fd8:	d8001d85 	stb	zero,118(sp)
   13fdc:	90800094 	ori	r2,r18,2
   13fe0:	80008f16 	blt	r16,zero,14220 <___svfiprintf_internal_r+0x1160>
   13fe4:	00bfdfc4 	movi	r2,-129
   13fe8:	90a4703a 	and	r18,r18,r2
   13fec:	94800094 	ori	r18,r18,2
   13ff0:	0015883a 	mov	r10,zero
   13ff4:	003d2906 	br	1349c <__alt_data_end+0xf001349c>
   13ff8:	98c00007 	ldb	r3,0(r19)
   13ffc:	003c7f06 	br	131fc <__alt_data_end+0xf00131fc>
   14000:	dac02317 	ldw	r11,140(sp)
   14004:	0013883a 	mov	r9,zero
   14008:	5f000017 	ldw	fp,0(r11)
   1400c:	5ac00104 	addi	r11,r11,4
   14010:	dac02315 	stw	r11,140(sp)
   14014:	003d1506 	br	1346c <__alt_data_end+0xf001346c>
   14018:	9080100c 	andi	r2,r18,64
   1401c:	d8001d85 	stb	zero,118(sp)
   14020:	dac02317 	ldw	r11,140(sp)
   14024:	10003426 	beq	r2,zero,140f8 <___svfiprintf_internal_r+0x1038>
   14028:	58800104 	addi	r2,r11,4
   1402c:	5f00000b 	ldhu	fp,0(r11)
   14030:	0013883a 	mov	r9,zero
   14034:	803e950e 	bge	r16,zero,13a8c <__alt_data_end+0xf0013a8c>
   14038:	e246b03a 	or	r3,fp,r9
   1403c:	d8802315 	stw	r2,140(sp)
   14040:	183d5a1e 	bne	r3,zero,135ac <__alt_data_end+0xf00135ac>
   14044:	0015883a 	mov	r10,zero
   14048:	0005883a 	mov	r2,zero
   1404c:	003fb706 	br	13f2c <__alt_data_end+0xf0013f2c>
   14050:	98c00043 	ldbu	r3,1(r19)
   14054:	94800814 	ori	r18,r18,32
   14058:	9cc00044 	addi	r19,r19,1
   1405c:	18c03fcc 	andi	r3,r3,255
   14060:	18c0201c 	xori	r3,r3,128
   14064:	18ffe004 	addi	r3,r3,-128
   14068:	003c6406 	br	131fc <__alt_data_end+0xf00131fc>
   1406c:	d8c02315 	stw	r3,140(sp)
   14070:	0015883a 	mov	r10,zero
   14074:	003faa06 	br	13f20 <__alt_data_end+0xf0013f20>
   14078:	dac02317 	ldw	r11,140(sp)
   1407c:	58800017 	ldw	r2,0(r11)
   14080:	5ac00104 	addi	r11,r11,4
   14084:	dac02315 	stw	r11,140(sp)
   14088:	dac02517 	ldw	r11,148(sp)
   1408c:	12c00015 	stw	r11,0(r2)
   14090:	003c3206 	br	1315c <__alt_data_end+0xf001315c>
   14094:	01020034 	movhi	r4,2048
   14098:	2100e604 	addi	r4,r4,920
   1409c:	d9002915 	stw	r4,164(sp)
   140a0:	d8c02315 	stw	r3,140(sp)
   140a4:	1025883a 	mov	r18,r2
   140a8:	e244b03a 	or	r2,fp,r9
   140ac:	103f871e 	bne	r2,zero,13ecc <__alt_data_end+0xf0013ecc>
   140b0:	0015883a 	mov	r10,zero
   140b4:	00800084 	movi	r2,2
   140b8:	003f9c06 	br	13f2c <__alt_data_end+0xf0013f2c>
   140bc:	0039883a 	mov	fp,zero
   140c0:	003e5f06 	br	13a40 <__alt_data_end+0xf0013a40>
   140c4:	d9801a04 	addi	r6,sp,104
   140c8:	b80b883a 	mov	r5,r23
   140cc:	a809883a 	mov	r4,r21
   140d0:	0012ef00 	call	12ef0 <__ssprint_r>
   140d4:	103f081e 	bne	r2,zero,13cf8 <__alt_data_end+0xf0013cf8>
   140d8:	d8c01c17 	ldw	r3,112(sp)
   140dc:	d8801b17 	ldw	r2,108(sp)
   140e0:	d811883a 	mov	r8,sp
   140e4:	003e9106 	br	13b2c <__alt_data_end+0xf0013b2c>
   140e8:	01020034 	movhi	r4,2048
   140ec:	21014f04 	addi	r4,r4,1340
   140f0:	d9002215 	stw	r4,136(sp)
   140f4:	003ead06 	br	13bac <__alt_data_end+0xf0013bac>
   140f8:	58800104 	addi	r2,r11,4
   140fc:	5f000017 	ldw	fp,0(r11)
   14100:	0013883a 	mov	r9,zero
   14104:	803e610e 	bge	r16,zero,13a8c <__alt_data_end+0xf0013a8c>
   14108:	003fcb06 	br	14038 <__alt_data_end+0xf0014038>
   1410c:	58800104 	addi	r2,r11,4
   14110:	5f000017 	ldw	fp,0(r11)
   14114:	0013883a 	mov	r9,zero
   14118:	803e420e 	bge	r16,zero,13a24 <__alt_data_end+0xf0013a24>
   1411c:	003f7e06 	br	13f18 <__alt_data_end+0xf0013f18>
   14120:	5f000017 	ldw	fp,0(r11)
   14124:	5ac00104 	addi	r11,r11,4
   14128:	0013883a 	mov	r9,zero
   1412c:	dac02315 	stw	r11,140(sp)
   14130:	003cce06 	br	1346c <__alt_data_end+0xf001346c>
   14134:	8809883a 	mov	r4,r17
   14138:	da002c15 	stw	r8,176(sp)
   1413c:	00099f00 	call	99f0 <strlen>
   14140:	d8802115 	stw	r2,132(sp)
   14144:	da801d83 	ldbu	r10,118(sp)
   14148:	df002315 	stw	fp,140(sp)
   1414c:	0021883a 	mov	r16,zero
   14150:	da002c17 	ldw	r8,176(sp)
   14154:	003cf606 	br	13530 <__alt_data_end+0xf0013530>
   14158:	00800184 	movi	r2,6
   1415c:	1400012e 	bgeu	r2,r16,14164 <___svfiprintf_internal_r+0x10a4>
   14160:	1021883a 	mov	r16,r2
   14164:	dc002115 	stw	r16,132(sp)
   14168:	8005883a 	mov	r2,r16
   1416c:	80003c16 	blt	r16,zero,14260 <___svfiprintf_internal_r+0x11a0>
   14170:	04420034 	movhi	r17,2048
   14174:	d8802015 	stw	r2,128(sp)
   14178:	df002315 	stw	fp,140(sp)
   1417c:	8c40eb04 	addi	r17,r17,940
   14180:	003d2e06 	br	1363c <__alt_data_end+0xf001363c>
   14184:	04001004 	movi	r16,64
   14188:	800b883a 	mov	r5,r16
   1418c:	0010c640 	call	10c64 <_malloc_r>
   14190:	dac02717 	ldw	r11,156(sp)
   14194:	58800015 	stw	r2,0(r11)
   14198:	58800415 	stw	r2,16(r11)
   1419c:	10004826 	beq	r2,zero,142c0 <___svfiprintf_internal_r+0x1200>
   141a0:	dac02717 	ldw	r11,156(sp)
   141a4:	5c000515 	stw	r16,20(r11)
   141a8:	003bd906 	br	13110 <__alt_data_end+0xf0013110>
   141ac:	9080004c 	andi	r2,r18,1
   141b0:	0015883a 	mov	r10,zero
   141b4:	10000626 	beq	r2,zero,141d0 <___svfiprintf_internal_r+0x1110>
   141b8:	dac02b17 	ldw	r11,172(sp)
   141bc:	00800c04 	movi	r2,48
   141c0:	d88019c5 	stb	r2,103(sp)
   141c4:	dac02115 	stw	r11,132(sp)
   141c8:	dc4019c4 	addi	r17,sp,103
   141cc:	003cd806 	br	13530 <__alt_data_end+0xf0013530>
   141d0:	d8002115 	stw	zero,132(sp)
   141d4:	dc401a04 	addi	r17,sp,104
   141d8:	003cd506 	br	13530 <__alt_data_end+0xf0013530>
   141dc:	01020034 	movhi	r4,2048
   141e0:	21015304 	addi	r4,r4,1356
   141e4:	d9002815 	stw	r4,160(sp)
   141e8:	003d4306 	br	136f8 <__alt_data_end+0xf00136f8>
   141ec:	00bfffc4 	movi	r2,-1
   141f0:	003ec606 	br	13d0c <__alt_data_end+0xf0013d0c>
   141f4:	00800044 	movi	r2,1
   141f8:	10803fcc 	andi	r2,r2,255
   141fc:	00c00044 	movi	r3,1
   14200:	10fd8026 	beq	r2,r3,13804 <__alt_data_end+0xf0013804>
   14204:	00c00084 	movi	r3,2
   14208:	10fca426 	beq	r2,r3,1349c <__alt_data_end+0xf001349c>
   1420c:	003ce806 	br	135b0 <__alt_data_end+0xf00135b0>
   14210:	01020034 	movhi	r4,2048
   14214:	21015304 	addi	r4,r4,1356
   14218:	d9002815 	stw	r4,160(sp)
   1421c:	003e9906 	br	13c84 <__alt_data_end+0xf0013c84>
   14220:	1025883a 	mov	r18,r2
   14224:	0015883a 	mov	r10,zero
   14228:	00800084 	movi	r2,2
   1422c:	003ff206 	br	141f8 <__alt_data_end+0xf00141f8>
   14230:	01420034 	movhi	r5,2048
   14234:	29414f04 	addi	r5,r5,1340
   14238:	d9402215 	stw	r5,136(sp)
   1423c:	003ee206 	br	13dc8 <__alt_data_end+0xf0013dc8>
   14240:	5827883a 	mov	r19,r11
   14244:	0021883a 	mov	r16,zero
   14248:	003bed06 	br	13200 <__alt_data_end+0xf0013200>
   1424c:	dc002115 	stw	r16,132(sp)
   14250:	da801d83 	ldbu	r10,118(sp)
   14254:	df002315 	stw	fp,140(sp)
   14258:	0021883a 	mov	r16,zero
   1425c:	003cb406 	br	13530 <__alt_data_end+0xf0013530>
   14260:	0005883a 	mov	r2,zero
   14264:	003fc206 	br	14170 <__alt_data_end+0xf0014170>
   14268:	d8802317 	ldw	r2,140(sp)
   1426c:	98c00043 	ldbu	r3,1(r19)
   14270:	5827883a 	mov	r19,r11
   14274:	14000017 	ldw	r16,0(r2)
   14278:	10800104 	addi	r2,r2,4
   1427c:	d8802315 	stw	r2,140(sp)
   14280:	803f760e 	bge	r16,zero,1405c <__alt_data_end+0xf001405c>
   14284:	18c03fcc 	andi	r3,r3,255
   14288:	18c0201c 	xori	r3,r3,128
   1428c:	043fffc4 	movi	r16,-1
   14290:	18ffe004 	addi	r3,r3,-128
   14294:	003bd906 	br	131fc <__alt_data_end+0xf00131fc>
   14298:	d9c01d85 	stb	r7,118(sp)
   1429c:	003cb606 	br	13578 <__alt_data_end+0xf0013578>
   142a0:	d9c01d85 	stb	r7,118(sp)
   142a4:	003d2106 	br	1372c <__alt_data_end+0xf001372c>
   142a8:	d9c01d85 	stb	r7,118(sp)
   142ac:	003d8e06 	br	138e8 <__alt_data_end+0xf00138e8>
   142b0:	d9c01d85 	stb	r7,118(sp)
   142b4:	003db306 	br	13984 <__alt_data_end+0xf0013984>
   142b8:	d9c01d85 	stb	r7,118(sp)
   142bc:	003c8a06 	br	134e8 <__alt_data_end+0xf00134e8>
   142c0:	dac02a17 	ldw	r11,168(sp)
   142c4:	00800304 	movi	r2,12
   142c8:	58800015 	stw	r2,0(r11)
   142cc:	00bfffc4 	movi	r2,-1
   142d0:	003e8e06 	br	13d0c <__alt_data_end+0xf0013d0c>
   142d4:	d9c01d85 	stb	r7,118(sp)
   142d8:	003dc706 	br	139f8 <__alt_data_end+0xf00139f8>
   142dc:	d9c01d85 	stb	r7,118(sp)
   142e0:	003ddf06 	br	13a60 <__alt_data_end+0xf0013a60>
   142e4:	d9c01d85 	stb	r7,118(sp)
   142e8:	003d3706 	br	137c8 <__alt_data_end+0xf00137c8>
   142ec:	d9c01d85 	stb	r7,118(sp)
   142f0:	003c5406 	br	13444 <__alt_data_end+0xf0013444>
   142f4:	d9c01d85 	stb	r7,118(sp)
   142f8:	003d1d06 	br	13770 <__alt_data_end+0xf0013770>

000142fc <__sprint_r.part.0>:
   142fc:	28801917 	ldw	r2,100(r5)
   14300:	defff604 	addi	sp,sp,-40
   14304:	dd400515 	stw	r21,20(sp)
   14308:	dfc00915 	stw	ra,36(sp)
   1430c:	df000815 	stw	fp,32(sp)
   14310:	ddc00715 	stw	r23,28(sp)
   14314:	dd800615 	stw	r22,24(sp)
   14318:	dd000415 	stw	r20,16(sp)
   1431c:	dcc00315 	stw	r19,12(sp)
   14320:	dc800215 	stw	r18,8(sp)
   14324:	dc400115 	stw	r17,4(sp)
   14328:	dc000015 	stw	r16,0(sp)
   1432c:	1088000c 	andi	r2,r2,8192
   14330:	302b883a 	mov	r21,r6
   14334:	10002e26 	beq	r2,zero,143f0 <__sprint_r.part.0+0xf4>
   14338:	30800217 	ldw	r2,8(r6)
   1433c:	35800017 	ldw	r22,0(r6)
   14340:	10002926 	beq	r2,zero,143e8 <__sprint_r.part.0+0xec>
   14344:	2827883a 	mov	r19,r5
   14348:	2029883a 	mov	r20,r4
   1434c:	b5c00104 	addi	r23,r22,4
   14350:	04bfffc4 	movi	r18,-1
   14354:	bc400017 	ldw	r17,0(r23)
   14358:	b4000017 	ldw	r16,0(r22)
   1435c:	0039883a 	mov	fp,zero
   14360:	8822d0ba 	srli	r17,r17,2
   14364:	8800031e 	bne	r17,zero,14374 <__sprint_r.part.0+0x78>
   14368:	00001806 	br	143cc <__sprint_r.part.0+0xd0>
   1436c:	84000104 	addi	r16,r16,4
   14370:	8f001526 	beq	r17,fp,143c8 <__sprint_r.part.0+0xcc>
   14374:	81400017 	ldw	r5,0(r16)
   14378:	980d883a 	mov	r6,r19
   1437c:	a009883a 	mov	r4,r20
   14380:	0015d240 	call	15d24 <_fputwc_r>
   14384:	e7000044 	addi	fp,fp,1
   14388:	14bff81e 	bne	r2,r18,1436c <__alt_data_end+0xf001436c>
   1438c:	9005883a 	mov	r2,r18
   14390:	a8000215 	stw	zero,8(r21)
   14394:	a8000115 	stw	zero,4(r21)
   14398:	dfc00917 	ldw	ra,36(sp)
   1439c:	df000817 	ldw	fp,32(sp)
   143a0:	ddc00717 	ldw	r23,28(sp)
   143a4:	dd800617 	ldw	r22,24(sp)
   143a8:	dd400517 	ldw	r21,20(sp)
   143ac:	dd000417 	ldw	r20,16(sp)
   143b0:	dcc00317 	ldw	r19,12(sp)
   143b4:	dc800217 	ldw	r18,8(sp)
   143b8:	dc400117 	ldw	r17,4(sp)
   143bc:	dc000017 	ldw	r16,0(sp)
   143c0:	dec00a04 	addi	sp,sp,40
   143c4:	f800283a 	ret
   143c8:	a8800217 	ldw	r2,8(r21)
   143cc:	8c63883a 	add	r17,r17,r17
   143d0:	8c63883a 	add	r17,r17,r17
   143d4:	1445c83a 	sub	r2,r2,r17
   143d8:	a8800215 	stw	r2,8(r21)
   143dc:	b5800204 	addi	r22,r22,8
   143e0:	bdc00204 	addi	r23,r23,8
   143e4:	103fdb1e 	bne	r2,zero,14354 <__alt_data_end+0xf0014354>
   143e8:	0005883a 	mov	r2,zero
   143ec:	003fe806 	br	14390 <__alt_data_end+0xf0014390>
   143f0:	00103880 	call	10388 <__sfvwrite_r>
   143f4:	003fe606 	br	14390 <__alt_data_end+0xf0014390>

000143f8 <__sprint_r>:
   143f8:	30c00217 	ldw	r3,8(r6)
   143fc:	18000126 	beq	r3,zero,14404 <__sprint_r+0xc>
   14400:	00142fc1 	jmpi	142fc <__sprint_r.part.0>
   14404:	30000115 	stw	zero,4(r6)
   14408:	0005883a 	mov	r2,zero
   1440c:	f800283a 	ret

00014410 <___vfiprintf_internal_r>:
   14410:	deffc904 	addi	sp,sp,-220
   14414:	df003515 	stw	fp,212(sp)
   14418:	dd003115 	stw	r20,196(sp)
   1441c:	dfc03615 	stw	ra,216(sp)
   14420:	ddc03415 	stw	r23,208(sp)
   14424:	dd803315 	stw	r22,204(sp)
   14428:	dd403215 	stw	r21,200(sp)
   1442c:	dcc03015 	stw	r19,192(sp)
   14430:	dc802f15 	stw	r18,188(sp)
   14434:	dc402e15 	stw	r17,184(sp)
   14438:	dc002d15 	stw	r16,180(sp)
   1443c:	d9002015 	stw	r4,128(sp)
   14440:	d9c02215 	stw	r7,136(sp)
   14444:	2829883a 	mov	r20,r5
   14448:	3039883a 	mov	fp,r6
   1444c:	20000226 	beq	r4,zero,14458 <___vfiprintf_internal_r+0x48>
   14450:	20800e17 	ldw	r2,56(r4)
   14454:	1000cf26 	beq	r2,zero,14794 <___vfiprintf_internal_r+0x384>
   14458:	a080030b 	ldhu	r2,12(r20)
   1445c:	10c8000c 	andi	r3,r2,8192
   14460:	1800061e 	bne	r3,zero,1447c <___vfiprintf_internal_r+0x6c>
   14464:	a1001917 	ldw	r4,100(r20)
   14468:	00f7ffc4 	movi	r3,-8193
   1446c:	10880014 	ori	r2,r2,8192
   14470:	20c6703a 	and	r3,r4,r3
   14474:	a080030d 	sth	r2,12(r20)
   14478:	a0c01915 	stw	r3,100(r20)
   1447c:	10c0020c 	andi	r3,r2,8
   14480:	1800a926 	beq	r3,zero,14728 <___vfiprintf_internal_r+0x318>
   14484:	a0c00417 	ldw	r3,16(r20)
   14488:	1800a726 	beq	r3,zero,14728 <___vfiprintf_internal_r+0x318>
   1448c:	1080068c 	andi	r2,r2,26
   14490:	00c00284 	movi	r3,10
   14494:	10c0ac26 	beq	r2,r3,14748 <___vfiprintf_internal_r+0x338>
   14498:	da801a04 	addi	r10,sp,104
   1449c:	da801e15 	stw	r10,120(sp)
   144a0:	d8801e17 	ldw	r2,120(sp)
   144a4:	da8019c4 	addi	r10,sp,103
   144a8:	05820034 	movhi	r22,2048
   144ac:	05c20034 	movhi	r23,2048
   144b0:	da801f15 	stw	r10,124(sp)
   144b4:	1295c83a 	sub	r10,r2,r10
   144b8:	b5815b04 	addi	r22,r22,1388
   144bc:	bdc15704 	addi	r23,r23,1372
   144c0:	dec01a15 	stw	sp,104(sp)
   144c4:	d8001c15 	stw	zero,112(sp)
   144c8:	d8001b15 	stw	zero,108(sp)
   144cc:	d8002615 	stw	zero,152(sp)
   144d0:	d8002315 	stw	zero,140(sp)
   144d4:	da802715 	stw	r10,156(sp)
   144d8:	d811883a 	mov	r8,sp
   144dc:	dd002115 	stw	r20,132(sp)
   144e0:	e021883a 	mov	r16,fp
   144e4:	80800007 	ldb	r2,0(r16)
   144e8:	1003ea26 	beq	r2,zero,15494 <___vfiprintf_internal_r+0x1084>
   144ec:	00c00944 	movi	r3,37
   144f0:	8025883a 	mov	r18,r16
   144f4:	10c0021e 	bne	r2,r3,14500 <___vfiprintf_internal_r+0xf0>
   144f8:	00001606 	br	14554 <___vfiprintf_internal_r+0x144>
   144fc:	10c00326 	beq	r2,r3,1450c <___vfiprintf_internal_r+0xfc>
   14500:	94800044 	addi	r18,r18,1
   14504:	90800007 	ldb	r2,0(r18)
   14508:	103ffc1e 	bne	r2,zero,144fc <__alt_data_end+0xf00144fc>
   1450c:	9423c83a 	sub	r17,r18,r16
   14510:	88001026 	beq	r17,zero,14554 <___vfiprintf_internal_r+0x144>
   14514:	d8c01c17 	ldw	r3,112(sp)
   14518:	d8801b17 	ldw	r2,108(sp)
   1451c:	44000015 	stw	r16,0(r8)
   14520:	88c7883a 	add	r3,r17,r3
   14524:	10800044 	addi	r2,r2,1
   14528:	44400115 	stw	r17,4(r8)
   1452c:	d8c01c15 	stw	r3,112(sp)
   14530:	d8801b15 	stw	r2,108(sp)
   14534:	010001c4 	movi	r4,7
   14538:	2080760e 	bge	r4,r2,14714 <___vfiprintf_internal_r+0x304>
   1453c:	1803821e 	bne	r3,zero,15348 <___vfiprintf_internal_r+0xf38>
   14540:	da802317 	ldw	r10,140(sp)
   14544:	d8001b15 	stw	zero,108(sp)
   14548:	d811883a 	mov	r8,sp
   1454c:	5455883a 	add	r10,r10,r17
   14550:	da802315 	stw	r10,140(sp)
   14554:	90800007 	ldb	r2,0(r18)
   14558:	10044626 	beq	r2,zero,15674 <___vfiprintf_internal_r+0x1264>
   1455c:	90c00047 	ldb	r3,1(r18)
   14560:	94000044 	addi	r16,r18,1
   14564:	d8001d85 	stb	zero,118(sp)
   14568:	0009883a 	mov	r4,zero
   1456c:	000f883a 	mov	r7,zero
   14570:	027fffc4 	movi	r9,-1
   14574:	0023883a 	mov	r17,zero
   14578:	0029883a 	mov	r20,zero
   1457c:	01401604 	movi	r5,88
   14580:	01800244 	movi	r6,9
   14584:	03400a84 	movi	r13,42
   14588:	03001b04 	movi	r12,108
   1458c:	84000044 	addi	r16,r16,1
   14590:	18bff804 	addi	r2,r3,-32
   14594:	28827336 	bltu	r5,r2,14f64 <___vfiprintf_internal_r+0xb54>
   14598:	100490ba 	slli	r2,r2,2
   1459c:	02800074 	movhi	r10,1
   145a0:	52916c04 	addi	r10,r10,17840
   145a4:	1285883a 	add	r2,r2,r10
   145a8:	10800017 	ldw	r2,0(r2)
   145ac:	1000683a 	jmp	r2
   145b0:	00014c98 	cmpnei	zero,zero,1330
   145b4:	00014f64 	muli	zero,zero,1341
   145b8:	00014f64 	muli	zero,zero,1341
   145bc:	00014cb8 	rdprs	zero,zero,1330
   145c0:	00014f64 	muli	zero,zero,1341
   145c4:	00014f64 	muli	zero,zero,1341
   145c8:	00014f64 	muli	zero,zero,1341
   145cc:	00014f64 	muli	zero,zero,1341
   145d0:	00014f64 	muli	zero,zero,1341
   145d4:	00014f64 	muli	zero,zero,1341
   145d8:	00014ea0 	cmpeqi	zero,zero,1338
   145dc:	00014ebc 	xorhi	zero,zero,1338
   145e0:	00014f64 	muli	zero,zero,1341
   145e4:	000147a4 	muli	zero,zero,1310
   145e8:	00014ecc 	andi	zero,zero,1339
   145ec:	00014f64 	muli	zero,zero,1341
   145f0:	00014cc4 	movi	zero,1331
   145f4:	00014cd0 	cmplti	zero,zero,1331
   145f8:	00014cd0 	cmplti	zero,zero,1331
   145fc:	00014cd0 	cmplti	zero,zero,1331
   14600:	00014cd0 	cmplti	zero,zero,1331
   14604:	00014cd0 	cmplti	zero,zero,1331
   14608:	00014cd0 	cmplti	zero,zero,1331
   1460c:	00014cd0 	cmplti	zero,zero,1331
   14610:	00014cd0 	cmplti	zero,zero,1331
   14614:	00014cd0 	cmplti	zero,zero,1331
   14618:	00014f64 	muli	zero,zero,1341
   1461c:	00014f64 	muli	zero,zero,1341
   14620:	00014f64 	muli	zero,zero,1341
   14624:	00014f64 	muli	zero,zero,1341
   14628:	00014f64 	muli	zero,zero,1341
   1462c:	00014f64 	muli	zero,zero,1341
   14630:	00014f64 	muli	zero,zero,1341
   14634:	00014f64 	muli	zero,zero,1341
   14638:	00014f64 	muli	zero,zero,1341
   1463c:	00014f64 	muli	zero,zero,1341
   14640:	00014cfc 	xorhi	zero,zero,1331
   14644:	00014f64 	muli	zero,zero,1341
   14648:	00014f64 	muli	zero,zero,1341
   1464c:	00014f64 	muli	zero,zero,1341
   14650:	00014f64 	muli	zero,zero,1341
   14654:	00014f64 	muli	zero,zero,1341
   14658:	00014f64 	muli	zero,zero,1341
   1465c:	00014f64 	muli	zero,zero,1341
   14660:	00014f64 	muli	zero,zero,1341
   14664:	00014f64 	muli	zero,zero,1341
   14668:	00014f64 	muli	zero,zero,1341
   1466c:	00014d34 	movhi	zero,1332
   14670:	00014f64 	muli	zero,zero,1341
   14674:	00014f64 	muli	zero,zero,1341
   14678:	00014f64 	muli	zero,zero,1341
   1467c:	00014f64 	muli	zero,zero,1341
   14680:	00014f64 	muli	zero,zero,1341
   14684:	00014d8c 	andi	zero,zero,1334
   14688:	00014f64 	muli	zero,zero,1341
   1468c:	00014f64 	muli	zero,zero,1341
   14690:	00014dfc 	xorhi	zero,zero,1335
   14694:	00014f64 	muli	zero,zero,1341
   14698:	00014f64 	muli	zero,zero,1341
   1469c:	00014f64 	muli	zero,zero,1341
   146a0:	00014f64 	muli	zero,zero,1341
   146a4:	00014f64 	muli	zero,zero,1341
   146a8:	00014f64 	muli	zero,zero,1341
   146ac:	00014f64 	muli	zero,zero,1341
   146b0:	00014f64 	muli	zero,zero,1341
   146b4:	00014f64 	muli	zero,zero,1341
   146b8:	00014f64 	muli	zero,zero,1341
   146bc:	00014ba8 	cmpgeui	zero,zero,1326
   146c0:	00014bd4 	movui	zero,1327
   146c4:	00014f64 	muli	zero,zero,1341
   146c8:	00014f64 	muli	zero,zero,1341
   146cc:	00014f64 	muli	zero,zero,1341
   146d0:	00014f0c 	andi	zero,zero,1340
   146d4:	00014bd4 	movui	zero,1327
   146d8:	00014f64 	muli	zero,zero,1341
   146dc:	00014f64 	muli	zero,zero,1341
   146e0:	00014a68 	cmpgeui	zero,zero,1321
   146e4:	00014f64 	muli	zero,zero,1341
   146e8:	00014a78 	rdprs	zero,zero,1321
   146ec:	00014ab4 	movhi	zero,1322
   146f0:	000147b0 	cmpltui	zero,zero,1310
   146f4:	00014a5c 	xori	zero,zero,1321
   146f8:	00014f64 	muli	zero,zero,1341
   146fc:	00014e38 	rdprs	zero,zero,1336
   14700:	00014f64 	muli	zero,zero,1341
   14704:	00014e90 	cmplti	zero,zero,1338
   14708:	00014f64 	muli	zero,zero,1341
   1470c:	00014f64 	muli	zero,zero,1341
   14710:	00014b54 	movui	zero,1325
   14714:	42000204 	addi	r8,r8,8
   14718:	da802317 	ldw	r10,140(sp)
   1471c:	5455883a 	add	r10,r10,r17
   14720:	da802315 	stw	r10,140(sp)
   14724:	003f8b06 	br	14554 <__alt_data_end+0xf0014554>
   14728:	d9002017 	ldw	r4,128(sp)
   1472c:	a00b883a 	mov	r5,r20
   14730:	000df300 	call	df30 <__swsetup_r>
   14734:	1003b11e 	bne	r2,zero,155fc <___vfiprintf_internal_r+0x11ec>
   14738:	a080030b 	ldhu	r2,12(r20)
   1473c:	00c00284 	movi	r3,10
   14740:	1080068c 	andi	r2,r2,26
   14744:	10ff541e 	bne	r2,r3,14498 <__alt_data_end+0xf0014498>
   14748:	a080038f 	ldh	r2,14(r20)
   1474c:	103f5216 	blt	r2,zero,14498 <__alt_data_end+0xf0014498>
   14750:	d9c02217 	ldw	r7,136(sp)
   14754:	d9002017 	ldw	r4,128(sp)
   14758:	e00d883a 	mov	r6,fp
   1475c:	a00b883a 	mov	r5,r20
   14760:	00158880 	call	15888 <__sbprintf>
   14764:	dfc03617 	ldw	ra,216(sp)
   14768:	df003517 	ldw	fp,212(sp)
   1476c:	ddc03417 	ldw	r23,208(sp)
   14770:	dd803317 	ldw	r22,204(sp)
   14774:	dd403217 	ldw	r21,200(sp)
   14778:	dd003117 	ldw	r20,196(sp)
   1477c:	dcc03017 	ldw	r19,192(sp)
   14780:	dc802f17 	ldw	r18,188(sp)
   14784:	dc402e17 	ldw	r17,184(sp)
   14788:	dc002d17 	ldw	r16,180(sp)
   1478c:	dec03704 	addi	sp,sp,220
   14790:	f800283a 	ret
   14794:	000ff040 	call	ff04 <__sinit>
   14798:	003f2f06 	br	14458 <__alt_data_end+0xf0014458>
   1479c:	0463c83a 	sub	r17,zero,r17
   147a0:	d8802215 	stw	r2,136(sp)
   147a4:	a5000114 	ori	r20,r20,4
   147a8:	80c00007 	ldb	r3,0(r16)
   147ac:	003f7706 	br	1458c <__alt_data_end+0xf001458c>
   147b0:	00800c04 	movi	r2,48
   147b4:	da802217 	ldw	r10,136(sp)
   147b8:	d8801d05 	stb	r2,116(sp)
   147bc:	00801e04 	movi	r2,120
   147c0:	d8801d45 	stb	r2,117(sp)
   147c4:	d8001d85 	stb	zero,118(sp)
   147c8:	50c00104 	addi	r3,r10,4
   147cc:	54800017 	ldw	r18,0(r10)
   147d0:	0027883a 	mov	r19,zero
   147d4:	a0800094 	ori	r2,r20,2
   147d8:	48030b16 	blt	r9,zero,15408 <___vfiprintf_internal_r+0xff8>
   147dc:	00bfdfc4 	movi	r2,-129
   147e0:	a096703a 	and	r11,r20,r2
   147e4:	d8c02215 	stw	r3,136(sp)
   147e8:	5d000094 	ori	r20,r11,2
   147ec:	90032b1e 	bne	r18,zero,1549c <___vfiprintf_internal_r+0x108c>
   147f0:	00820034 	movhi	r2,2048
   147f4:	1080e604 	addi	r2,r2,920
   147f8:	d8802615 	stw	r2,152(sp)
   147fc:	0039883a 	mov	fp,zero
   14800:	48017b1e 	bne	r9,zero,14df0 <___vfiprintf_internal_r+0x9e0>
   14804:	0013883a 	mov	r9,zero
   14808:	0027883a 	mov	r19,zero
   1480c:	dd401a04 	addi	r21,sp,104
   14810:	4825883a 	mov	r18,r9
   14814:	4cc0010e 	bge	r9,r19,1481c <___vfiprintf_internal_r+0x40c>
   14818:	9825883a 	mov	r18,r19
   1481c:	e7003fcc 	andi	fp,fp,255
   14820:	e700201c 	xori	fp,fp,128
   14824:	e73fe004 	addi	fp,fp,-128
   14828:	e0000126 	beq	fp,zero,14830 <___vfiprintf_internal_r+0x420>
   1482c:	94800044 	addi	r18,r18,1
   14830:	a380008c 	andi	r14,r20,2
   14834:	70000126 	beq	r14,zero,1483c <___vfiprintf_internal_r+0x42c>
   14838:	94800084 	addi	r18,r18,2
   1483c:	a700210c 	andi	fp,r20,132
   14840:	e001df1e 	bne	fp,zero,14fc0 <___vfiprintf_internal_r+0xbb0>
   14844:	8c87c83a 	sub	r3,r17,r18
   14848:	00c1dd0e 	bge	zero,r3,14fc0 <___vfiprintf_internal_r+0xbb0>
   1484c:	01c00404 	movi	r7,16
   14850:	d8801c17 	ldw	r2,112(sp)
   14854:	38c3ad0e 	bge	r7,r3,1570c <___vfiprintf_internal_r+0x12fc>
   14858:	02820034 	movhi	r10,2048
   1485c:	52815b04 	addi	r10,r10,1388
   14860:	dc002915 	stw	r16,164(sp)
   14864:	d9801b17 	ldw	r6,108(sp)
   14868:	da802415 	stw	r10,144(sp)
   1486c:	03c001c4 	movi	r15,7
   14870:	da402515 	stw	r9,148(sp)
   14874:	db802815 	stw	r14,160(sp)
   14878:	1821883a 	mov	r16,r3
   1487c:	00000506 	br	14894 <___vfiprintf_internal_r+0x484>
   14880:	31400084 	addi	r5,r6,2
   14884:	42000204 	addi	r8,r8,8
   14888:	200d883a 	mov	r6,r4
   1488c:	843ffc04 	addi	r16,r16,-16
   14890:	3c000d0e 	bge	r7,r16,148c8 <___vfiprintf_internal_r+0x4b8>
   14894:	10800404 	addi	r2,r2,16
   14898:	31000044 	addi	r4,r6,1
   1489c:	45800015 	stw	r22,0(r8)
   148a0:	41c00115 	stw	r7,4(r8)
   148a4:	d8801c15 	stw	r2,112(sp)
   148a8:	d9001b15 	stw	r4,108(sp)
   148ac:	793ff40e 	bge	r15,r4,14880 <__alt_data_end+0xf0014880>
   148b0:	1001b51e 	bne	r2,zero,14f88 <___vfiprintf_internal_r+0xb78>
   148b4:	843ffc04 	addi	r16,r16,-16
   148b8:	000d883a 	mov	r6,zero
   148bc:	01400044 	movi	r5,1
   148c0:	d811883a 	mov	r8,sp
   148c4:	3c3ff316 	blt	r7,r16,14894 <__alt_data_end+0xf0014894>
   148c8:	8007883a 	mov	r3,r16
   148cc:	da402517 	ldw	r9,148(sp)
   148d0:	db802817 	ldw	r14,160(sp)
   148d4:	dc002917 	ldw	r16,164(sp)
   148d8:	da802417 	ldw	r10,144(sp)
   148dc:	1885883a 	add	r2,r3,r2
   148e0:	40c00115 	stw	r3,4(r8)
   148e4:	42800015 	stw	r10,0(r8)
   148e8:	d8801c15 	stw	r2,112(sp)
   148ec:	d9401b15 	stw	r5,108(sp)
   148f0:	00c001c4 	movi	r3,7
   148f4:	19426016 	blt	r3,r5,15278 <___vfiprintf_internal_r+0xe68>
   148f8:	d8c01d87 	ldb	r3,118(sp)
   148fc:	42000204 	addi	r8,r8,8
   14900:	29000044 	addi	r4,r5,1
   14904:	1801b31e 	bne	r3,zero,14fd4 <___vfiprintf_internal_r+0xbc4>
   14908:	7001c026 	beq	r14,zero,1500c <___vfiprintf_internal_r+0xbfc>
   1490c:	d8c01d04 	addi	r3,sp,116
   14910:	10800084 	addi	r2,r2,2
   14914:	40c00015 	stw	r3,0(r8)
   14918:	00c00084 	movi	r3,2
   1491c:	40c00115 	stw	r3,4(r8)
   14920:	d8801c15 	stw	r2,112(sp)
   14924:	d9001b15 	stw	r4,108(sp)
   14928:	00c001c4 	movi	r3,7
   1492c:	1902650e 	bge	r3,r4,152c4 <___vfiprintf_internal_r+0xeb4>
   14930:	10029a1e 	bne	r2,zero,1539c <___vfiprintf_internal_r+0xf8c>
   14934:	00c02004 	movi	r3,128
   14938:	01000044 	movi	r4,1
   1493c:	000b883a 	mov	r5,zero
   14940:	d811883a 	mov	r8,sp
   14944:	e0c1b31e 	bne	fp,r3,15014 <___vfiprintf_internal_r+0xc04>
   14948:	8cb9c83a 	sub	fp,r17,r18
   1494c:	0701b10e 	bge	zero,fp,15014 <___vfiprintf_internal_r+0xc04>
   14950:	01c00404 	movi	r7,16
   14954:	3f03890e 	bge	r7,fp,1577c <___vfiprintf_internal_r+0x136c>
   14958:	00c20034 	movhi	r3,2048
   1495c:	18c15704 	addi	r3,r3,1372
   14960:	d8c02415 	stw	r3,144(sp)
   14964:	8007883a 	mov	r3,r16
   14968:	034001c4 	movi	r13,7
   1496c:	e021883a 	mov	r16,fp
   14970:	da402515 	stw	r9,148(sp)
   14974:	1839883a 	mov	fp,r3
   14978:	00000506 	br	14990 <___vfiprintf_internal_r+0x580>
   1497c:	29800084 	addi	r6,r5,2
   14980:	42000204 	addi	r8,r8,8
   14984:	180b883a 	mov	r5,r3
   14988:	843ffc04 	addi	r16,r16,-16
   1498c:	3c000d0e 	bge	r7,r16,149c4 <___vfiprintf_internal_r+0x5b4>
   14990:	10800404 	addi	r2,r2,16
   14994:	28c00044 	addi	r3,r5,1
   14998:	45c00015 	stw	r23,0(r8)
   1499c:	41c00115 	stw	r7,4(r8)
   149a0:	d8801c15 	stw	r2,112(sp)
   149a4:	d8c01b15 	stw	r3,108(sp)
   149a8:	68fff40e 	bge	r13,r3,1497c <__alt_data_end+0xf001497c>
   149ac:	1002241e 	bne	r2,zero,15240 <___vfiprintf_internal_r+0xe30>
   149b0:	843ffc04 	addi	r16,r16,-16
   149b4:	01800044 	movi	r6,1
   149b8:	000b883a 	mov	r5,zero
   149bc:	d811883a 	mov	r8,sp
   149c0:	3c3ff316 	blt	r7,r16,14990 <__alt_data_end+0xf0014990>
   149c4:	da402517 	ldw	r9,148(sp)
   149c8:	e007883a 	mov	r3,fp
   149cc:	8039883a 	mov	fp,r16
   149d0:	1821883a 	mov	r16,r3
   149d4:	d8c02417 	ldw	r3,144(sp)
   149d8:	1705883a 	add	r2,r2,fp
   149dc:	47000115 	stw	fp,4(r8)
   149e0:	40c00015 	stw	r3,0(r8)
   149e4:	d8801c15 	stw	r2,112(sp)
   149e8:	d9801b15 	stw	r6,108(sp)
   149ec:	00c001c4 	movi	r3,7
   149f0:	19827616 	blt	r3,r6,153cc <___vfiprintf_internal_r+0xfbc>
   149f4:	4cf9c83a 	sub	fp,r9,r19
   149f8:	42000204 	addi	r8,r8,8
   149fc:	31000044 	addi	r4,r6,1
   14a00:	300b883a 	mov	r5,r6
   14a04:	07018516 	blt	zero,fp,1501c <___vfiprintf_internal_r+0xc0c>
   14a08:	9885883a 	add	r2,r19,r2
   14a0c:	45400015 	stw	r21,0(r8)
   14a10:	44c00115 	stw	r19,4(r8)
   14a14:	d8801c15 	stw	r2,112(sp)
   14a18:	d9001b15 	stw	r4,108(sp)
   14a1c:	00c001c4 	movi	r3,7
   14a20:	1901dd0e 	bge	r3,r4,15198 <___vfiprintf_internal_r+0xd88>
   14a24:	1002401e 	bne	r2,zero,15328 <___vfiprintf_internal_r+0xf18>
   14a28:	d8001b15 	stw	zero,108(sp)
   14a2c:	a2c0010c 	andi	r11,r20,4
   14a30:	58000226 	beq	r11,zero,14a3c <___vfiprintf_internal_r+0x62c>
   14a34:	8ca7c83a 	sub	r19,r17,r18
   14a38:	04c2f216 	blt	zero,r19,15604 <___vfiprintf_internal_r+0x11f4>
   14a3c:	8c80010e 	bge	r17,r18,14a44 <___vfiprintf_internal_r+0x634>
   14a40:	9023883a 	mov	r17,r18
   14a44:	da802317 	ldw	r10,140(sp)
   14a48:	5455883a 	add	r10,r10,r17
   14a4c:	da802315 	stw	r10,140(sp)
   14a50:	d8001b15 	stw	zero,108(sp)
   14a54:	d811883a 	mov	r8,sp
   14a58:	003ea206 	br	144e4 <__alt_data_end+0xf00144e4>
   14a5c:	a5000814 	ori	r20,r20,32
   14a60:	80c00007 	ldb	r3,0(r16)
   14a64:	003ec906 	br	1458c <__alt_data_end+0xf001458c>
   14a68:	80c00007 	ldb	r3,0(r16)
   14a6c:	1b030926 	beq	r3,r12,15694 <___vfiprintf_internal_r+0x1284>
   14a70:	a5000414 	ori	r20,r20,16
   14a74:	003ec506 	br	1458c <__alt_data_end+0xf001458c>
   14a78:	21003fcc 	andi	r4,r4,255
   14a7c:	20035e1e 	bne	r4,zero,157f8 <___vfiprintf_internal_r+0x13e8>
   14a80:	a080080c 	andi	r2,r20,32
   14a84:	1002a526 	beq	r2,zero,1551c <___vfiprintf_internal_r+0x110c>
   14a88:	da802217 	ldw	r10,136(sp)
   14a8c:	50800017 	ldw	r2,0(r10)
   14a90:	da802317 	ldw	r10,140(sp)
   14a94:	5007d7fa 	srai	r3,r10,31
   14a98:	da802217 	ldw	r10,136(sp)
   14a9c:	10c00115 	stw	r3,4(r2)
   14aa0:	52800104 	addi	r10,r10,4
   14aa4:	da802215 	stw	r10,136(sp)
   14aa8:	da802317 	ldw	r10,140(sp)
   14aac:	12800015 	stw	r10,0(r2)
   14ab0:	003e8c06 	br	144e4 <__alt_data_end+0xf00144e4>
   14ab4:	21003fcc 	andi	r4,r4,255
   14ab8:	2003511e 	bne	r4,zero,15800 <___vfiprintf_internal_r+0x13f0>
   14abc:	a080080c 	andi	r2,r20,32
   14ac0:	1000a126 	beq	r2,zero,14d48 <___vfiprintf_internal_r+0x938>
   14ac4:	da802217 	ldw	r10,136(sp)
   14ac8:	d8001d85 	stb	zero,118(sp)
   14acc:	50800204 	addi	r2,r10,8
   14ad0:	54800017 	ldw	r18,0(r10)
   14ad4:	54c00117 	ldw	r19,4(r10)
   14ad8:	4802b416 	blt	r9,zero,155ac <___vfiprintf_internal_r+0x119c>
   14adc:	013fdfc4 	movi	r4,-129
   14ae0:	94c6b03a 	or	r3,r18,r19
   14ae4:	d8802215 	stw	r2,136(sp)
   14ae8:	a128703a 	and	r20,r20,r4
   14aec:	1800a226 	beq	r3,zero,14d78 <___vfiprintf_internal_r+0x968>
   14af0:	0039883a 	mov	fp,zero
   14af4:	dd401a04 	addi	r21,sp,104
   14af8:	9006d0fa 	srli	r3,r18,3
   14afc:	9808977a 	slli	r4,r19,29
   14b00:	9826d0fa 	srli	r19,r19,3
   14b04:	948001cc 	andi	r18,r18,7
   14b08:	90800c04 	addi	r2,r18,48
   14b0c:	ad7fffc4 	addi	r21,r21,-1
   14b10:	20e4b03a 	or	r18,r4,r3
   14b14:	a8800005 	stb	r2,0(r21)
   14b18:	94c6b03a 	or	r3,r18,r19
   14b1c:	183ff61e 	bne	r3,zero,14af8 <__alt_data_end+0xf0014af8>
   14b20:	a0c0004c 	andi	r3,r20,1
   14b24:	18005926 	beq	r3,zero,14c8c <___vfiprintf_internal_r+0x87c>
   14b28:	10803fcc 	andi	r2,r2,255
   14b2c:	1080201c 	xori	r2,r2,128
   14b30:	10bfe004 	addi	r2,r2,-128
   14b34:	00c00c04 	movi	r3,48
   14b38:	10c05426 	beq	r2,r3,14c8c <___vfiprintf_internal_r+0x87c>
   14b3c:	da801e17 	ldw	r10,120(sp)
   14b40:	a8bfffc4 	addi	r2,r21,-1
   14b44:	a8ffffc5 	stb	r3,-1(r21)
   14b48:	50a7c83a 	sub	r19,r10,r2
   14b4c:	102b883a 	mov	r21,r2
   14b50:	003f2f06 	br	14810 <__alt_data_end+0xf0014810>
   14b54:	21003fcc 	andi	r4,r4,255
   14b58:	2003421e 	bne	r4,zero,15864 <___vfiprintf_internal_r+0x1454>
   14b5c:	00820034 	movhi	r2,2048
   14b60:	1080e604 	addi	r2,r2,920
   14b64:	d8802615 	stw	r2,152(sp)
   14b68:	a080080c 	andi	r2,r20,32
   14b6c:	1000aa26 	beq	r2,zero,14e18 <___vfiprintf_internal_r+0xa08>
   14b70:	da802217 	ldw	r10,136(sp)
   14b74:	54800017 	ldw	r18,0(r10)
   14b78:	54c00117 	ldw	r19,4(r10)
   14b7c:	52800204 	addi	r10,r10,8
   14b80:	da802215 	stw	r10,136(sp)
   14b84:	a080004c 	andi	r2,r20,1
   14b88:	1001d226 	beq	r2,zero,152d4 <___vfiprintf_internal_r+0xec4>
   14b8c:	94c4b03a 	or	r2,r18,r19
   14b90:	1002351e 	bne	r2,zero,15468 <___vfiprintf_internal_r+0x1058>
   14b94:	d8001d85 	stb	zero,118(sp)
   14b98:	48022216 	blt	r9,zero,15424 <___vfiprintf_internal_r+0x1014>
   14b9c:	00bfdfc4 	movi	r2,-129
   14ba0:	a0a8703a 	and	r20,r20,r2
   14ba4:	003f1506 	br	147fc <__alt_data_end+0xf00147fc>
   14ba8:	da802217 	ldw	r10,136(sp)
   14bac:	04800044 	movi	r18,1
   14bb0:	d8001d85 	stb	zero,118(sp)
   14bb4:	50800017 	ldw	r2,0(r10)
   14bb8:	52800104 	addi	r10,r10,4
   14bbc:	da802215 	stw	r10,136(sp)
   14bc0:	d8801005 	stb	r2,64(sp)
   14bc4:	9027883a 	mov	r19,r18
   14bc8:	dd401004 	addi	r21,sp,64
   14bcc:	0013883a 	mov	r9,zero
   14bd0:	003f1706 	br	14830 <__alt_data_end+0xf0014830>
   14bd4:	21003fcc 	andi	r4,r4,255
   14bd8:	2003201e 	bne	r4,zero,1585c <___vfiprintf_internal_r+0x144c>
   14bdc:	a080080c 	andi	r2,r20,32
   14be0:	10004b26 	beq	r2,zero,14d10 <___vfiprintf_internal_r+0x900>
   14be4:	da802217 	ldw	r10,136(sp)
   14be8:	50800117 	ldw	r2,4(r10)
   14bec:	54800017 	ldw	r18,0(r10)
   14bf0:	52800204 	addi	r10,r10,8
   14bf4:	da802215 	stw	r10,136(sp)
   14bf8:	1027883a 	mov	r19,r2
   14bfc:	10022c16 	blt	r2,zero,154b0 <___vfiprintf_internal_r+0x10a0>
   14c00:	df001d83 	ldbu	fp,118(sp)
   14c04:	48007216 	blt	r9,zero,14dd0 <___vfiprintf_internal_r+0x9c0>
   14c08:	00ffdfc4 	movi	r3,-129
   14c0c:	94c4b03a 	or	r2,r18,r19
   14c10:	a0e8703a 	and	r20,r20,r3
   14c14:	1000cc26 	beq	r2,zero,14f48 <___vfiprintf_internal_r+0xb38>
   14c18:	98021026 	beq	r19,zero,1545c <___vfiprintf_internal_r+0x104c>
   14c1c:	dc402415 	stw	r17,144(sp)
   14c20:	dc002515 	stw	r16,148(sp)
   14c24:	9823883a 	mov	r17,r19
   14c28:	9021883a 	mov	r16,r18
   14c2c:	dd401a04 	addi	r21,sp,104
   14c30:	4825883a 	mov	r18,r9
   14c34:	4027883a 	mov	r19,r8
   14c38:	8009883a 	mov	r4,r16
   14c3c:	880b883a 	mov	r5,r17
   14c40:	01800284 	movi	r6,10
   14c44:	000f883a 	mov	r7,zero
   14c48:	00167f00 	call	167f0 <__umoddi3>
   14c4c:	10800c04 	addi	r2,r2,48
   14c50:	ad7fffc4 	addi	r21,r21,-1
   14c54:	8009883a 	mov	r4,r16
   14c58:	880b883a 	mov	r5,r17
   14c5c:	a8800005 	stb	r2,0(r21)
   14c60:	01800284 	movi	r6,10
   14c64:	000f883a 	mov	r7,zero
   14c68:	00162780 	call	16278 <__udivdi3>
   14c6c:	1021883a 	mov	r16,r2
   14c70:	10c4b03a 	or	r2,r2,r3
   14c74:	1823883a 	mov	r17,r3
   14c78:	103fef1e 	bne	r2,zero,14c38 <__alt_data_end+0xf0014c38>
   14c7c:	dc402417 	ldw	r17,144(sp)
   14c80:	dc002517 	ldw	r16,148(sp)
   14c84:	9013883a 	mov	r9,r18
   14c88:	9811883a 	mov	r8,r19
   14c8c:	da801e17 	ldw	r10,120(sp)
   14c90:	5567c83a 	sub	r19,r10,r21
   14c94:	003ede06 	br	14810 <__alt_data_end+0xf0014810>
   14c98:	38803fcc 	andi	r2,r7,255
   14c9c:	1080201c 	xori	r2,r2,128
   14ca0:	10bfe004 	addi	r2,r2,-128
   14ca4:	1002371e 	bne	r2,zero,15584 <___vfiprintf_internal_r+0x1174>
   14ca8:	01000044 	movi	r4,1
   14cac:	01c00804 	movi	r7,32
   14cb0:	80c00007 	ldb	r3,0(r16)
   14cb4:	003e3506 	br	1458c <__alt_data_end+0xf001458c>
   14cb8:	a5000054 	ori	r20,r20,1
   14cbc:	80c00007 	ldb	r3,0(r16)
   14cc0:	003e3206 	br	1458c <__alt_data_end+0xf001458c>
   14cc4:	a5002014 	ori	r20,r20,128
   14cc8:	80c00007 	ldb	r3,0(r16)
   14ccc:	003e2f06 	br	1458c <__alt_data_end+0xf001458c>
   14cd0:	8015883a 	mov	r10,r16
   14cd4:	0023883a 	mov	r17,zero
   14cd8:	18bff404 	addi	r2,r3,-48
   14cdc:	50c00007 	ldb	r3,0(r10)
   14ce0:	8c4002a4 	muli	r17,r17,10
   14ce4:	84000044 	addi	r16,r16,1
   14ce8:	8015883a 	mov	r10,r16
   14cec:	1463883a 	add	r17,r2,r17
   14cf0:	18bff404 	addi	r2,r3,-48
   14cf4:	30bff92e 	bgeu	r6,r2,14cdc <__alt_data_end+0xf0014cdc>
   14cf8:	003e2506 	br	14590 <__alt_data_end+0xf0014590>
   14cfc:	21003fcc 	andi	r4,r4,255
   14d00:	2002d41e 	bne	r4,zero,15854 <___vfiprintf_internal_r+0x1444>
   14d04:	a5000414 	ori	r20,r20,16
   14d08:	a080080c 	andi	r2,r20,32
   14d0c:	103fb51e 	bne	r2,zero,14be4 <__alt_data_end+0xf0014be4>
   14d10:	a080040c 	andi	r2,r20,16
   14d14:	1001f826 	beq	r2,zero,154f8 <___vfiprintf_internal_r+0x10e8>
   14d18:	da802217 	ldw	r10,136(sp)
   14d1c:	54800017 	ldw	r18,0(r10)
   14d20:	52800104 	addi	r10,r10,4
   14d24:	da802215 	stw	r10,136(sp)
   14d28:	9027d7fa 	srai	r19,r18,31
   14d2c:	9805883a 	mov	r2,r19
   14d30:	003fb206 	br	14bfc <__alt_data_end+0xf0014bfc>
   14d34:	21003fcc 	andi	r4,r4,255
   14d38:	2002c41e 	bne	r4,zero,1584c <___vfiprintf_internal_r+0x143c>
   14d3c:	a5000414 	ori	r20,r20,16
   14d40:	a080080c 	andi	r2,r20,32
   14d44:	103f5f1e 	bne	r2,zero,14ac4 <__alt_data_end+0xf0014ac4>
   14d48:	a080040c 	andi	r2,r20,16
   14d4c:	10020f26 	beq	r2,zero,1558c <___vfiprintf_internal_r+0x117c>
   14d50:	da802217 	ldw	r10,136(sp)
   14d54:	d8001d85 	stb	zero,118(sp)
   14d58:	0027883a 	mov	r19,zero
   14d5c:	50800104 	addi	r2,r10,4
   14d60:	54800017 	ldw	r18,0(r10)
   14d64:	48021116 	blt	r9,zero,155ac <___vfiprintf_internal_r+0x119c>
   14d68:	00ffdfc4 	movi	r3,-129
   14d6c:	d8802215 	stw	r2,136(sp)
   14d70:	a0e8703a 	and	r20,r20,r3
   14d74:	903f5e1e 	bne	r18,zero,14af0 <__alt_data_end+0xf0014af0>
   14d78:	0039883a 	mov	fp,zero
   14d7c:	4802a626 	beq	r9,zero,15818 <___vfiprintf_internal_r+0x1408>
   14d80:	0025883a 	mov	r18,zero
   14d84:	0027883a 	mov	r19,zero
   14d88:	003f5a06 	br	14af4 <__alt_data_end+0xf0014af4>
   14d8c:	21003fcc 	andi	r4,r4,255
   14d90:	20029f1e 	bne	r4,zero,15810 <___vfiprintf_internal_r+0x1400>
   14d94:	a5000414 	ori	r20,r20,16
   14d98:	a080080c 	andi	r2,r20,32
   14d9c:	10005e1e 	bne	r2,zero,14f18 <___vfiprintf_internal_r+0xb08>
   14da0:	a080040c 	andi	r2,r20,16
   14da4:	1001a21e 	bne	r2,zero,15430 <___vfiprintf_internal_r+0x1020>
   14da8:	a080100c 	andi	r2,r20,64
   14dac:	d8001d85 	stb	zero,118(sp)
   14db0:	da802217 	ldw	r10,136(sp)
   14db4:	1002231e 	bne	r2,zero,15644 <___vfiprintf_internal_r+0x1234>
   14db8:	50800104 	addi	r2,r10,4
   14dbc:	54800017 	ldw	r18,0(r10)
   14dc0:	0027883a 	mov	r19,zero
   14dc4:	4801a00e 	bge	r9,zero,15448 <___vfiprintf_internal_r+0x1038>
   14dc8:	d8802215 	stw	r2,136(sp)
   14dcc:	0039883a 	mov	fp,zero
   14dd0:	94c4b03a 	or	r2,r18,r19
   14dd4:	103f901e 	bne	r2,zero,14c18 <__alt_data_end+0xf0014c18>
   14dd8:	00800044 	movi	r2,1
   14ddc:	10803fcc 	andi	r2,r2,255
   14de0:	00c00044 	movi	r3,1
   14de4:	10c05926 	beq	r2,r3,14f4c <___vfiprintf_internal_r+0xb3c>
   14de8:	00c00084 	movi	r3,2
   14dec:	10ffe41e 	bne	r2,r3,14d80 <__alt_data_end+0xf0014d80>
   14df0:	0025883a 	mov	r18,zero
   14df4:	0027883a 	mov	r19,zero
   14df8:	00013d06 	br	152f0 <___vfiprintf_internal_r+0xee0>
   14dfc:	21003fcc 	andi	r4,r4,255
   14e00:	2002811e 	bne	r4,zero,15808 <___vfiprintf_internal_r+0x13f8>
   14e04:	00820034 	movhi	r2,2048
   14e08:	1080e104 	addi	r2,r2,900
   14e0c:	d8802615 	stw	r2,152(sp)
   14e10:	a080080c 	andi	r2,r20,32
   14e14:	103f561e 	bne	r2,zero,14b70 <__alt_data_end+0xf0014b70>
   14e18:	a080040c 	andi	r2,r20,16
   14e1c:	1001d126 	beq	r2,zero,15564 <___vfiprintf_internal_r+0x1154>
   14e20:	da802217 	ldw	r10,136(sp)
   14e24:	0027883a 	mov	r19,zero
   14e28:	54800017 	ldw	r18,0(r10)
   14e2c:	52800104 	addi	r10,r10,4
   14e30:	da802215 	stw	r10,136(sp)
   14e34:	003f5306 	br	14b84 <__alt_data_end+0xf0014b84>
   14e38:	da802217 	ldw	r10,136(sp)
   14e3c:	d8001d85 	stb	zero,118(sp)
   14e40:	55400017 	ldw	r21,0(r10)
   14e44:	50c00104 	addi	r3,r10,4
   14e48:	a8024226 	beq	r21,zero,15754 <___vfiprintf_internal_r+0x1344>
   14e4c:	48021816 	blt	r9,zero,156b0 <___vfiprintf_internal_r+0x12a0>
   14e50:	480d883a 	mov	r6,r9
   14e54:	000b883a 	mov	r5,zero
   14e58:	a809883a 	mov	r4,r21
   14e5c:	d8c02a15 	stw	r3,168(sp)
   14e60:	da002b15 	stw	r8,172(sp)
   14e64:	da402c15 	stw	r9,176(sp)
   14e68:	00114700 	call	11470 <memchr>
   14e6c:	d8c02a17 	ldw	r3,168(sp)
   14e70:	da002b17 	ldw	r8,172(sp)
   14e74:	da402c17 	ldw	r9,176(sp)
   14e78:	10024826 	beq	r2,zero,1579c <___vfiprintf_internal_r+0x138c>
   14e7c:	1567c83a 	sub	r19,r2,r21
   14e80:	df001d83 	ldbu	fp,118(sp)
   14e84:	d8c02215 	stw	r3,136(sp)
   14e88:	0013883a 	mov	r9,zero
   14e8c:	003e6006 	br	14810 <__alt_data_end+0xf0014810>
   14e90:	21003fcc 	andi	r4,r4,255
   14e94:	203fc026 	beq	r4,zero,14d98 <__alt_data_end+0xf0014d98>
   14e98:	d9c01d85 	stb	r7,118(sp)
   14e9c:	003fbe06 	br	14d98 <__alt_data_end+0xf0014d98>
   14ea0:	da802217 	ldw	r10,136(sp)
   14ea4:	54400017 	ldw	r17,0(r10)
   14ea8:	50800104 	addi	r2,r10,4
   14eac:	883e3b16 	blt	r17,zero,1479c <__alt_data_end+0xf001479c>
   14eb0:	d8802215 	stw	r2,136(sp)
   14eb4:	80c00007 	ldb	r3,0(r16)
   14eb8:	003db406 	br	1458c <__alt_data_end+0xf001458c>
   14ebc:	01000044 	movi	r4,1
   14ec0:	01c00ac4 	movi	r7,43
   14ec4:	80c00007 	ldb	r3,0(r16)
   14ec8:	003db006 	br	1458c <__alt_data_end+0xf001458c>
   14ecc:	80c00007 	ldb	r3,0(r16)
   14ed0:	82800044 	addi	r10,r16,1
   14ed4:	1b423c26 	beq	r3,r13,157c8 <___vfiprintf_internal_r+0x13b8>
   14ed8:	18bff404 	addi	r2,r3,-48
   14edc:	0013883a 	mov	r9,zero
   14ee0:	30822b36 	bltu	r6,r2,15790 <___vfiprintf_internal_r+0x1380>
   14ee4:	50c00007 	ldb	r3,0(r10)
   14ee8:	4a4002a4 	muli	r9,r9,10
   14eec:	54000044 	addi	r16,r10,1
   14ef0:	8015883a 	mov	r10,r16
   14ef4:	4893883a 	add	r9,r9,r2
   14ef8:	18bff404 	addi	r2,r3,-48
   14efc:	30bff92e 	bgeu	r6,r2,14ee4 <__alt_data_end+0xf0014ee4>
   14f00:	483da30e 	bge	r9,zero,14590 <__alt_data_end+0xf0014590>
   14f04:	027fffc4 	movi	r9,-1
   14f08:	003da106 	br	14590 <__alt_data_end+0xf0014590>
   14f0c:	a5001014 	ori	r20,r20,64
   14f10:	80c00007 	ldb	r3,0(r16)
   14f14:	003d9d06 	br	1458c <__alt_data_end+0xf001458c>
   14f18:	da802217 	ldw	r10,136(sp)
   14f1c:	d8001d85 	stb	zero,118(sp)
   14f20:	50c00204 	addi	r3,r10,8
   14f24:	54800017 	ldw	r18,0(r10)
   14f28:	54c00117 	ldw	r19,4(r10)
   14f2c:	4801ca16 	blt	r9,zero,15658 <___vfiprintf_internal_r+0x1248>
   14f30:	013fdfc4 	movi	r4,-129
   14f34:	94c4b03a 	or	r2,r18,r19
   14f38:	d8c02215 	stw	r3,136(sp)
   14f3c:	a128703a 	and	r20,r20,r4
   14f40:	0039883a 	mov	fp,zero
   14f44:	103f341e 	bne	r2,zero,14c18 <__alt_data_end+0xf0014c18>
   14f48:	483e2e26 	beq	r9,zero,14804 <__alt_data_end+0xf0014804>
   14f4c:	0025883a 	mov	r18,zero
   14f50:	94800c04 	addi	r18,r18,48
   14f54:	dc8019c5 	stb	r18,103(sp)
   14f58:	dcc02717 	ldw	r19,156(sp)
   14f5c:	dd4019c4 	addi	r21,sp,103
   14f60:	003e2b06 	br	14810 <__alt_data_end+0xf0014810>
   14f64:	21003fcc 	andi	r4,r4,255
   14f68:	2002361e 	bne	r4,zero,15844 <___vfiprintf_internal_r+0x1434>
   14f6c:	1801c126 	beq	r3,zero,15674 <___vfiprintf_internal_r+0x1264>
   14f70:	04800044 	movi	r18,1
   14f74:	d8c01005 	stb	r3,64(sp)
   14f78:	d8001d85 	stb	zero,118(sp)
   14f7c:	9027883a 	mov	r19,r18
   14f80:	dd401004 	addi	r21,sp,64
   14f84:	003f1106 	br	14bcc <__alt_data_end+0xf0014bcc>
   14f88:	d9402117 	ldw	r5,132(sp)
   14f8c:	d9002017 	ldw	r4,128(sp)
   14f90:	d9801a04 	addi	r6,sp,104
   14f94:	d9c02b15 	stw	r7,172(sp)
   14f98:	dbc02a15 	stw	r15,168(sp)
   14f9c:	00142fc0 	call	142fc <__sprint_r.part.0>
   14fa0:	d9c02b17 	ldw	r7,172(sp)
   14fa4:	dbc02a17 	ldw	r15,168(sp)
   14fa8:	10006d1e 	bne	r2,zero,15160 <___vfiprintf_internal_r+0xd50>
   14fac:	d9801b17 	ldw	r6,108(sp)
   14fb0:	d8801c17 	ldw	r2,112(sp)
   14fb4:	d811883a 	mov	r8,sp
   14fb8:	31400044 	addi	r5,r6,1
   14fbc:	003e3306 	br	1488c <__alt_data_end+0xf001488c>
   14fc0:	d9401b17 	ldw	r5,108(sp)
   14fc4:	d8801c17 	ldw	r2,112(sp)
   14fc8:	29000044 	addi	r4,r5,1
   14fcc:	d8c01d87 	ldb	r3,118(sp)
   14fd0:	183e4d26 	beq	r3,zero,14908 <__alt_data_end+0xf0014908>
   14fd4:	00c00044 	movi	r3,1
   14fd8:	d9401d84 	addi	r5,sp,118
   14fdc:	10c5883a 	add	r2,r2,r3
   14fe0:	41400015 	stw	r5,0(r8)
   14fe4:	40c00115 	stw	r3,4(r8)
   14fe8:	d8801c15 	stw	r2,112(sp)
   14fec:	d9001b15 	stw	r4,108(sp)
   14ff0:	014001c4 	movi	r5,7
   14ff4:	2900a90e 	bge	r5,r4,1529c <___vfiprintf_internal_r+0xe8c>
   14ff8:	1000da1e 	bne	r2,zero,15364 <___vfiprintf_internal_r+0xf54>
   14ffc:	7000ab1e 	bne	r14,zero,152ac <___vfiprintf_internal_r+0xe9c>
   15000:	000b883a 	mov	r5,zero
   15004:	1809883a 	mov	r4,r3
   15008:	d811883a 	mov	r8,sp
   1500c:	00c02004 	movi	r3,128
   15010:	e0fe4d26 	beq	fp,r3,14948 <__alt_data_end+0xf0014948>
   15014:	4cf9c83a 	sub	fp,r9,r19
   15018:	073e7b0e 	bge	zero,fp,14a08 <__alt_data_end+0xf0014a08>
   1501c:	01c00404 	movi	r7,16
   15020:	3f01900e 	bge	r7,fp,15664 <___vfiprintf_internal_r+0x1254>
   15024:	00c20034 	movhi	r3,2048
   15028:	18c15704 	addi	r3,r3,1372
   1502c:	d8c02415 	stw	r3,144(sp)
   15030:	034001c4 	movi	r13,7
   15034:	00000506 	br	1504c <___vfiprintf_internal_r+0xc3c>
   15038:	29000084 	addi	r4,r5,2
   1503c:	42000204 	addi	r8,r8,8
   15040:	180b883a 	mov	r5,r3
   15044:	e73ffc04 	addi	fp,fp,-16
   15048:	3f000d0e 	bge	r7,fp,15080 <___vfiprintf_internal_r+0xc70>
   1504c:	10800404 	addi	r2,r2,16
   15050:	28c00044 	addi	r3,r5,1
   15054:	45c00015 	stw	r23,0(r8)
   15058:	41c00115 	stw	r7,4(r8)
   1505c:	d8801c15 	stw	r2,112(sp)
   15060:	d8c01b15 	stw	r3,108(sp)
   15064:	68fff40e 	bge	r13,r3,15038 <__alt_data_end+0xf0015038>
   15068:	1000101e 	bne	r2,zero,150ac <___vfiprintf_internal_r+0xc9c>
   1506c:	e73ffc04 	addi	fp,fp,-16
   15070:	01000044 	movi	r4,1
   15074:	000b883a 	mov	r5,zero
   15078:	d811883a 	mov	r8,sp
   1507c:	3f3ff316 	blt	r7,fp,1504c <__alt_data_end+0xf001504c>
   15080:	da802417 	ldw	r10,144(sp)
   15084:	1705883a 	add	r2,r2,fp
   15088:	47000115 	stw	fp,4(r8)
   1508c:	42800015 	stw	r10,0(r8)
   15090:	d8801c15 	stw	r2,112(sp)
   15094:	d9001b15 	stw	r4,108(sp)
   15098:	00c001c4 	movi	r3,7
   1509c:	19003616 	blt	r3,r4,15178 <___vfiprintf_internal_r+0xd68>
   150a0:	42000204 	addi	r8,r8,8
   150a4:	21000044 	addi	r4,r4,1
   150a8:	003e5706 	br	14a08 <__alt_data_end+0xf0014a08>
   150ac:	d9402117 	ldw	r5,132(sp)
   150b0:	d9002017 	ldw	r4,128(sp)
   150b4:	d9801a04 	addi	r6,sp,104
   150b8:	d9c02b15 	stw	r7,172(sp)
   150bc:	db402a15 	stw	r13,168(sp)
   150c0:	00142fc0 	call	142fc <__sprint_r.part.0>
   150c4:	d9c02b17 	ldw	r7,172(sp)
   150c8:	db402a17 	ldw	r13,168(sp)
   150cc:	1000241e 	bne	r2,zero,15160 <___vfiprintf_internal_r+0xd50>
   150d0:	d9401b17 	ldw	r5,108(sp)
   150d4:	d8801c17 	ldw	r2,112(sp)
   150d8:	d811883a 	mov	r8,sp
   150dc:	29000044 	addi	r4,r5,1
   150e0:	003fd806 	br	15044 <__alt_data_end+0xf0015044>
   150e4:	d9401b17 	ldw	r5,108(sp)
   150e8:	00c20034 	movhi	r3,2048
   150ec:	18c15b04 	addi	r3,r3,1388
   150f0:	d8c02415 	stw	r3,144(sp)
   150f4:	29400044 	addi	r5,r5,1
   150f8:	d8c02417 	ldw	r3,144(sp)
   150fc:	14c5883a 	add	r2,r2,r19
   15100:	44c00115 	stw	r19,4(r8)
   15104:	40c00015 	stw	r3,0(r8)
   15108:	d8801c15 	stw	r2,112(sp)
   1510c:	d9401b15 	stw	r5,108(sp)
   15110:	00c001c4 	movi	r3,7
   15114:	1940070e 	bge	r3,r5,15134 <___vfiprintf_internal_r+0xd24>
   15118:	103e4826 	beq	r2,zero,14a3c <__alt_data_end+0xf0014a3c>
   1511c:	d9402117 	ldw	r5,132(sp)
   15120:	d9002017 	ldw	r4,128(sp)
   15124:	d9801a04 	addi	r6,sp,104
   15128:	00142fc0 	call	142fc <__sprint_r.part.0>
   1512c:	10000c1e 	bne	r2,zero,15160 <___vfiprintf_internal_r+0xd50>
   15130:	d8801c17 	ldw	r2,112(sp)
   15134:	8c80010e 	bge	r17,r18,1513c <___vfiprintf_internal_r+0xd2c>
   15138:	9023883a 	mov	r17,r18
   1513c:	da802317 	ldw	r10,140(sp)
   15140:	5455883a 	add	r10,r10,r17
   15144:	da802315 	stw	r10,140(sp)
   15148:	103e4126 	beq	r2,zero,14a50 <__alt_data_end+0xf0014a50>
   1514c:	d9402117 	ldw	r5,132(sp)
   15150:	d9002017 	ldw	r4,128(sp)
   15154:	d9801a04 	addi	r6,sp,104
   15158:	00142fc0 	call	142fc <__sprint_r.part.0>
   1515c:	103e3c26 	beq	r2,zero,14a50 <__alt_data_end+0xf0014a50>
   15160:	dd002117 	ldw	r20,132(sp)
   15164:	a080030b 	ldhu	r2,12(r20)
   15168:	1080100c 	andi	r2,r2,64
   1516c:	1001231e 	bne	r2,zero,155fc <___vfiprintf_internal_r+0x11ec>
   15170:	d8802317 	ldw	r2,140(sp)
   15174:	003d7b06 	br	14764 <__alt_data_end+0xf0014764>
   15178:	1000991e 	bne	r2,zero,153e0 <___vfiprintf_internal_r+0xfd0>
   1517c:	00c00044 	movi	r3,1
   15180:	9805883a 	mov	r2,r19
   15184:	dd400015 	stw	r21,0(sp)
   15188:	dcc00115 	stw	r19,4(sp)
   1518c:	dcc01c15 	stw	r19,112(sp)
   15190:	d8c01b15 	stw	r3,108(sp)
   15194:	d811883a 	mov	r8,sp
   15198:	42000204 	addi	r8,r8,8
   1519c:	a2c0010c 	andi	r11,r20,4
   151a0:	583fe426 	beq	r11,zero,15134 <__alt_data_end+0xf0015134>
   151a4:	8ca7c83a 	sub	r19,r17,r18
   151a8:	04ffe20e 	bge	zero,r19,15134 <__alt_data_end+0xf0015134>
   151ac:	01c00404 	movi	r7,16
   151b0:	3cffcc0e 	bge	r7,r19,150e4 <__alt_data_end+0xf00150e4>
   151b4:	02820034 	movhi	r10,2048
   151b8:	52815b04 	addi	r10,r10,1388
   151bc:	d9001b17 	ldw	r4,108(sp)
   151c0:	da802415 	stw	r10,144(sp)
   151c4:	382b883a 	mov	r21,r7
   151c8:	050001c4 	movi	r20,7
   151cc:	df002017 	ldw	fp,128(sp)
   151d0:	00000506 	br	151e8 <___vfiprintf_internal_r+0xdd8>
   151d4:	21400084 	addi	r5,r4,2
   151d8:	42000204 	addi	r8,r8,8
   151dc:	1809883a 	mov	r4,r3
   151e0:	9cfffc04 	addi	r19,r19,-16
   151e4:	acffc40e 	bge	r21,r19,150f8 <__alt_data_end+0xf00150f8>
   151e8:	10800404 	addi	r2,r2,16
   151ec:	20c00044 	addi	r3,r4,1
   151f0:	45800015 	stw	r22,0(r8)
   151f4:	45400115 	stw	r21,4(r8)
   151f8:	d8801c15 	stw	r2,112(sp)
   151fc:	d8c01b15 	stw	r3,108(sp)
   15200:	a0fff40e 	bge	r20,r3,151d4 <__alt_data_end+0xf00151d4>
   15204:	1000041e 	bne	r2,zero,15218 <___vfiprintf_internal_r+0xe08>
   15208:	01400044 	movi	r5,1
   1520c:	0009883a 	mov	r4,zero
   15210:	d811883a 	mov	r8,sp
   15214:	003ff206 	br	151e0 <__alt_data_end+0xf00151e0>
   15218:	d9402117 	ldw	r5,132(sp)
   1521c:	d9801a04 	addi	r6,sp,104
   15220:	e009883a 	mov	r4,fp
   15224:	00142fc0 	call	142fc <__sprint_r.part.0>
   15228:	103fcd1e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   1522c:	d9001b17 	ldw	r4,108(sp)
   15230:	d8801c17 	ldw	r2,112(sp)
   15234:	d811883a 	mov	r8,sp
   15238:	21400044 	addi	r5,r4,1
   1523c:	003fe806 	br	151e0 <__alt_data_end+0xf00151e0>
   15240:	d9402117 	ldw	r5,132(sp)
   15244:	d9002017 	ldw	r4,128(sp)
   15248:	d9801a04 	addi	r6,sp,104
   1524c:	d9c02b15 	stw	r7,172(sp)
   15250:	db402a15 	stw	r13,168(sp)
   15254:	00142fc0 	call	142fc <__sprint_r.part.0>
   15258:	d9c02b17 	ldw	r7,172(sp)
   1525c:	db402a17 	ldw	r13,168(sp)
   15260:	103fbf1e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   15264:	d9401b17 	ldw	r5,108(sp)
   15268:	d8801c17 	ldw	r2,112(sp)
   1526c:	d811883a 	mov	r8,sp
   15270:	29800044 	addi	r6,r5,1
   15274:	003dc406 	br	14988 <__alt_data_end+0xf0014988>
   15278:	1000d21e 	bne	r2,zero,155c4 <___vfiprintf_internal_r+0x11b4>
   1527c:	d8c01d87 	ldb	r3,118(sp)
   15280:	18009526 	beq	r3,zero,154d8 <___vfiprintf_internal_r+0x10c8>
   15284:	00800044 	movi	r2,1
   15288:	d8c01d84 	addi	r3,sp,118
   1528c:	1009883a 	mov	r4,r2
   15290:	d8c00015 	stw	r3,0(sp)
   15294:	d8800115 	stw	r2,4(sp)
   15298:	d811883a 	mov	r8,sp
   1529c:	200b883a 	mov	r5,r4
   152a0:	42000204 	addi	r8,r8,8
   152a4:	21000044 	addi	r4,r4,1
   152a8:	003d9706 	br	14908 <__alt_data_end+0xf0014908>
   152ac:	d9001d04 	addi	r4,sp,116
   152b0:	00800084 	movi	r2,2
   152b4:	d9000015 	stw	r4,0(sp)
   152b8:	d8800115 	stw	r2,4(sp)
   152bc:	1809883a 	mov	r4,r3
   152c0:	d811883a 	mov	r8,sp
   152c4:	200b883a 	mov	r5,r4
   152c8:	42000204 	addi	r8,r8,8
   152cc:	21000044 	addi	r4,r4,1
   152d0:	003f4e06 	br	1500c <__alt_data_end+0xf001500c>
   152d4:	d8001d85 	stb	zero,118(sp)
   152d8:	48005016 	blt	r9,zero,1541c <___vfiprintf_internal_r+0x100c>
   152dc:	00ffdfc4 	movi	r3,-129
   152e0:	94c4b03a 	or	r2,r18,r19
   152e4:	a0e8703a 	and	r20,r20,r3
   152e8:	103d4426 	beq	r2,zero,147fc <__alt_data_end+0xf00147fc>
   152ec:	0039883a 	mov	fp,zero
   152f0:	d9002617 	ldw	r4,152(sp)
   152f4:	dd401a04 	addi	r21,sp,104
   152f8:	908003cc 	andi	r2,r18,15
   152fc:	9806973a 	slli	r3,r19,28
   15300:	2085883a 	add	r2,r4,r2
   15304:	9024d13a 	srli	r18,r18,4
   15308:	10800003 	ldbu	r2,0(r2)
   1530c:	9826d13a 	srli	r19,r19,4
   15310:	ad7fffc4 	addi	r21,r21,-1
   15314:	1ca4b03a 	or	r18,r3,r18
   15318:	a8800005 	stb	r2,0(r21)
   1531c:	94c4b03a 	or	r2,r18,r19
   15320:	103ff51e 	bne	r2,zero,152f8 <__alt_data_end+0xf00152f8>
   15324:	003e5906 	br	14c8c <__alt_data_end+0xf0014c8c>
   15328:	d9402117 	ldw	r5,132(sp)
   1532c:	d9002017 	ldw	r4,128(sp)
   15330:	d9801a04 	addi	r6,sp,104
   15334:	00142fc0 	call	142fc <__sprint_r.part.0>
   15338:	103f891e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   1533c:	d8801c17 	ldw	r2,112(sp)
   15340:	d811883a 	mov	r8,sp
   15344:	003f9506 	br	1519c <__alt_data_end+0xf001519c>
   15348:	d9402117 	ldw	r5,132(sp)
   1534c:	d9002017 	ldw	r4,128(sp)
   15350:	d9801a04 	addi	r6,sp,104
   15354:	00142fc0 	call	142fc <__sprint_r.part.0>
   15358:	103f811e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   1535c:	d811883a 	mov	r8,sp
   15360:	003ced06 	br	14718 <__alt_data_end+0xf0014718>
   15364:	d9402117 	ldw	r5,132(sp)
   15368:	d9002017 	ldw	r4,128(sp)
   1536c:	d9801a04 	addi	r6,sp,104
   15370:	da402c15 	stw	r9,176(sp)
   15374:	db802a15 	stw	r14,168(sp)
   15378:	00142fc0 	call	142fc <__sprint_r.part.0>
   1537c:	da402c17 	ldw	r9,176(sp)
   15380:	db802a17 	ldw	r14,168(sp)
   15384:	103f761e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   15388:	d9401b17 	ldw	r5,108(sp)
   1538c:	d8801c17 	ldw	r2,112(sp)
   15390:	d811883a 	mov	r8,sp
   15394:	29000044 	addi	r4,r5,1
   15398:	003d5b06 	br	14908 <__alt_data_end+0xf0014908>
   1539c:	d9402117 	ldw	r5,132(sp)
   153a0:	d9002017 	ldw	r4,128(sp)
   153a4:	d9801a04 	addi	r6,sp,104
   153a8:	da402c15 	stw	r9,176(sp)
   153ac:	00142fc0 	call	142fc <__sprint_r.part.0>
   153b0:	da402c17 	ldw	r9,176(sp)
   153b4:	103f6a1e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   153b8:	d9401b17 	ldw	r5,108(sp)
   153bc:	d8801c17 	ldw	r2,112(sp)
   153c0:	d811883a 	mov	r8,sp
   153c4:	29000044 	addi	r4,r5,1
   153c8:	003f1006 	br	1500c <__alt_data_end+0xf001500c>
   153cc:	1000c31e 	bne	r2,zero,156dc <___vfiprintf_internal_r+0x12cc>
   153d0:	01000044 	movi	r4,1
   153d4:	000b883a 	mov	r5,zero
   153d8:	d811883a 	mov	r8,sp
   153dc:	003f0d06 	br	15014 <__alt_data_end+0xf0015014>
   153e0:	d9402117 	ldw	r5,132(sp)
   153e4:	d9002017 	ldw	r4,128(sp)
   153e8:	d9801a04 	addi	r6,sp,104
   153ec:	00142fc0 	call	142fc <__sprint_r.part.0>
   153f0:	103f5b1e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   153f4:	d9001b17 	ldw	r4,108(sp)
   153f8:	d8801c17 	ldw	r2,112(sp)
   153fc:	d811883a 	mov	r8,sp
   15400:	21000044 	addi	r4,r4,1
   15404:	003d8006 	br	14a08 <__alt_data_end+0xf0014a08>
   15408:	01020034 	movhi	r4,2048
   1540c:	2100e604 	addi	r4,r4,920
   15410:	d9002615 	stw	r4,152(sp)
   15414:	d8c02215 	stw	r3,136(sp)
   15418:	1029883a 	mov	r20,r2
   1541c:	94c4b03a 	or	r2,r18,r19
   15420:	103fb21e 	bne	r2,zero,152ec <__alt_data_end+0xf00152ec>
   15424:	0039883a 	mov	fp,zero
   15428:	00800084 	movi	r2,2
   1542c:	003e6b06 	br	14ddc <__alt_data_end+0xf0014ddc>
   15430:	da802217 	ldw	r10,136(sp)
   15434:	d8001d85 	stb	zero,118(sp)
   15438:	0027883a 	mov	r19,zero
   1543c:	50800104 	addi	r2,r10,4
   15440:	54800017 	ldw	r18,0(r10)
   15444:	483e6016 	blt	r9,zero,14dc8 <__alt_data_end+0xf0014dc8>
   15448:	00ffdfc4 	movi	r3,-129
   1544c:	d8802215 	stw	r2,136(sp)
   15450:	a0e8703a 	and	r20,r20,r3
   15454:	0039883a 	mov	fp,zero
   15458:	903ebb26 	beq	r18,zero,14f48 <__alt_data_end+0xf0014f48>
   1545c:	00800244 	movi	r2,9
   15460:	14bdee36 	bltu	r2,r18,14c1c <__alt_data_end+0xf0014c1c>
   15464:	003eba06 	br	14f50 <__alt_data_end+0xf0014f50>
   15468:	00800c04 	movi	r2,48
   1546c:	d8c01d45 	stb	r3,117(sp)
   15470:	d8801d05 	stb	r2,116(sp)
   15474:	d8001d85 	stb	zero,118(sp)
   15478:	a0c00094 	ori	r3,r20,2
   1547c:	4800a916 	blt	r9,zero,15724 <___vfiprintf_internal_r+0x1314>
   15480:	00bfdfc4 	movi	r2,-129
   15484:	a096703a 	and	r11,r20,r2
   15488:	5d000094 	ori	r20,r11,2
   1548c:	0039883a 	mov	fp,zero
   15490:	003f9706 	br	152f0 <__alt_data_end+0xf00152f0>
   15494:	8025883a 	mov	r18,r16
   15498:	003c2e06 	br	14554 <__alt_data_end+0xf0014554>
   1549c:	00820034 	movhi	r2,2048
   154a0:	1080e604 	addi	r2,r2,920
   154a4:	0039883a 	mov	fp,zero
   154a8:	d8802615 	stw	r2,152(sp)
   154ac:	003f9006 	br	152f0 <__alt_data_end+0xf00152f0>
   154b0:	04a5c83a 	sub	r18,zero,r18
   154b4:	07000b44 	movi	fp,45
   154b8:	9004c03a 	cmpne	r2,r18,zero
   154bc:	04e7c83a 	sub	r19,zero,r19
   154c0:	df001d85 	stb	fp,118(sp)
   154c4:	98a7c83a 	sub	r19,r19,r2
   154c8:	48009f16 	blt	r9,zero,15748 <___vfiprintf_internal_r+0x1338>
   154cc:	00bfdfc4 	movi	r2,-129
   154d0:	a0a8703a 	and	r20,r20,r2
   154d4:	003dd006 	br	14c18 <__alt_data_end+0xf0014c18>
   154d8:	70004c26 	beq	r14,zero,1560c <___vfiprintf_internal_r+0x11fc>
   154dc:	00800084 	movi	r2,2
   154e0:	d8c01d04 	addi	r3,sp,116
   154e4:	d8c00015 	stw	r3,0(sp)
   154e8:	d8800115 	stw	r2,4(sp)
   154ec:	01000044 	movi	r4,1
   154f0:	d811883a 	mov	r8,sp
   154f4:	003f7306 	br	152c4 <__alt_data_end+0xf00152c4>
   154f8:	a080100c 	andi	r2,r20,64
   154fc:	da802217 	ldw	r10,136(sp)
   15500:	103e0626 	beq	r2,zero,14d1c <__alt_data_end+0xf0014d1c>
   15504:	5480000f 	ldh	r18,0(r10)
   15508:	52800104 	addi	r10,r10,4
   1550c:	da802215 	stw	r10,136(sp)
   15510:	9027d7fa 	srai	r19,r18,31
   15514:	9805883a 	mov	r2,r19
   15518:	003db806 	br	14bfc <__alt_data_end+0xf0014bfc>
   1551c:	a080040c 	andi	r2,r20,16
   15520:	1000091e 	bne	r2,zero,15548 <___vfiprintf_internal_r+0x1138>
   15524:	a2c0100c 	andi	r11,r20,64
   15528:	58000726 	beq	r11,zero,15548 <___vfiprintf_internal_r+0x1138>
   1552c:	da802217 	ldw	r10,136(sp)
   15530:	50800017 	ldw	r2,0(r10)
   15534:	52800104 	addi	r10,r10,4
   15538:	da802215 	stw	r10,136(sp)
   1553c:	da802317 	ldw	r10,140(sp)
   15540:	1280000d 	sth	r10,0(r2)
   15544:	003be706 	br	144e4 <__alt_data_end+0xf00144e4>
   15548:	da802217 	ldw	r10,136(sp)
   1554c:	50800017 	ldw	r2,0(r10)
   15550:	52800104 	addi	r10,r10,4
   15554:	da802215 	stw	r10,136(sp)
   15558:	da802317 	ldw	r10,140(sp)
   1555c:	12800015 	stw	r10,0(r2)
   15560:	003be006 	br	144e4 <__alt_data_end+0xf00144e4>
   15564:	a080100c 	andi	r2,r20,64
   15568:	da802217 	ldw	r10,136(sp)
   1556c:	10003026 	beq	r2,zero,15630 <___vfiprintf_internal_r+0x1220>
   15570:	5480000b 	ldhu	r18,0(r10)
   15574:	52800104 	addi	r10,r10,4
   15578:	0027883a 	mov	r19,zero
   1557c:	da802215 	stw	r10,136(sp)
   15580:	003d8006 	br	14b84 <__alt_data_end+0xf0014b84>
   15584:	80c00007 	ldb	r3,0(r16)
   15588:	003c0006 	br	1458c <__alt_data_end+0xf001458c>
   1558c:	a080100c 	andi	r2,r20,64
   15590:	d8001d85 	stb	zero,118(sp)
   15594:	da802217 	ldw	r10,136(sp)
   15598:	1000201e 	bne	r2,zero,1561c <___vfiprintf_internal_r+0x120c>
   1559c:	50800104 	addi	r2,r10,4
   155a0:	54800017 	ldw	r18,0(r10)
   155a4:	0027883a 	mov	r19,zero
   155a8:	483def0e 	bge	r9,zero,14d68 <__alt_data_end+0xf0014d68>
   155ac:	94c6b03a 	or	r3,r18,r19
   155b0:	d8802215 	stw	r2,136(sp)
   155b4:	183d4e1e 	bne	r3,zero,14af0 <__alt_data_end+0xf0014af0>
   155b8:	0039883a 	mov	fp,zero
   155bc:	0005883a 	mov	r2,zero
   155c0:	003e0606 	br	14ddc <__alt_data_end+0xf0014ddc>
   155c4:	d9402117 	ldw	r5,132(sp)
   155c8:	d9002017 	ldw	r4,128(sp)
   155cc:	d9801a04 	addi	r6,sp,104
   155d0:	da402c15 	stw	r9,176(sp)
   155d4:	db802a15 	stw	r14,168(sp)
   155d8:	00142fc0 	call	142fc <__sprint_r.part.0>
   155dc:	da402c17 	ldw	r9,176(sp)
   155e0:	db802a17 	ldw	r14,168(sp)
   155e4:	103ede1e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   155e8:	d9401b17 	ldw	r5,108(sp)
   155ec:	d8801c17 	ldw	r2,112(sp)
   155f0:	d811883a 	mov	r8,sp
   155f4:	29000044 	addi	r4,r5,1
   155f8:	003e7406 	br	14fcc <__alt_data_end+0xf0014fcc>
   155fc:	00bfffc4 	movi	r2,-1
   15600:	003c5806 	br	14764 <__alt_data_end+0xf0014764>
   15604:	d811883a 	mov	r8,sp
   15608:	003ee806 	br	151ac <__alt_data_end+0xf00151ac>
   1560c:	000b883a 	mov	r5,zero
   15610:	01000044 	movi	r4,1
   15614:	d811883a 	mov	r8,sp
   15618:	003e7c06 	br	1500c <__alt_data_end+0xf001500c>
   1561c:	50800104 	addi	r2,r10,4
   15620:	5480000b 	ldhu	r18,0(r10)
   15624:	0027883a 	mov	r19,zero
   15628:	483dcf0e 	bge	r9,zero,14d68 <__alt_data_end+0xf0014d68>
   1562c:	003fdf06 	br	155ac <__alt_data_end+0xf00155ac>
   15630:	54800017 	ldw	r18,0(r10)
   15634:	52800104 	addi	r10,r10,4
   15638:	0027883a 	mov	r19,zero
   1563c:	da802215 	stw	r10,136(sp)
   15640:	003d5006 	br	14b84 <__alt_data_end+0xf0014b84>
   15644:	50800104 	addi	r2,r10,4
   15648:	5480000b 	ldhu	r18,0(r10)
   1564c:	0027883a 	mov	r19,zero
   15650:	483f7d0e 	bge	r9,zero,15448 <__alt_data_end+0xf0015448>
   15654:	003ddc06 	br	14dc8 <__alt_data_end+0xf0014dc8>
   15658:	d8c02215 	stw	r3,136(sp)
   1565c:	0039883a 	mov	fp,zero
   15660:	003ddb06 	br	14dd0 <__alt_data_end+0xf0014dd0>
   15664:	02820034 	movhi	r10,2048
   15668:	52815704 	addi	r10,r10,1372
   1566c:	da802415 	stw	r10,144(sp)
   15670:	003e8306 	br	15080 <__alt_data_end+0xf0015080>
   15674:	d8801c17 	ldw	r2,112(sp)
   15678:	dd002117 	ldw	r20,132(sp)
   1567c:	103eb926 	beq	r2,zero,15164 <__alt_data_end+0xf0015164>
   15680:	d9002017 	ldw	r4,128(sp)
   15684:	d9801a04 	addi	r6,sp,104
   15688:	a00b883a 	mov	r5,r20
   1568c:	00142fc0 	call	142fc <__sprint_r.part.0>
   15690:	003eb406 	br	15164 <__alt_data_end+0xf0015164>
   15694:	80c00043 	ldbu	r3,1(r16)
   15698:	a5000814 	ori	r20,r20,32
   1569c:	84000044 	addi	r16,r16,1
   156a0:	18c03fcc 	andi	r3,r3,255
   156a4:	18c0201c 	xori	r3,r3,128
   156a8:	18ffe004 	addi	r3,r3,-128
   156ac:	003bb706 	br	1458c <__alt_data_end+0xf001458c>
   156b0:	a809883a 	mov	r4,r21
   156b4:	d8c02a15 	stw	r3,168(sp)
   156b8:	da002b15 	stw	r8,172(sp)
   156bc:	00099f00 	call	99f0 <strlen>
   156c0:	d8c02a17 	ldw	r3,168(sp)
   156c4:	1027883a 	mov	r19,r2
   156c8:	df001d83 	ldbu	fp,118(sp)
   156cc:	d8c02215 	stw	r3,136(sp)
   156d0:	0013883a 	mov	r9,zero
   156d4:	da002b17 	ldw	r8,172(sp)
   156d8:	003c4d06 	br	14810 <__alt_data_end+0xf0014810>
   156dc:	d9402117 	ldw	r5,132(sp)
   156e0:	d9002017 	ldw	r4,128(sp)
   156e4:	d9801a04 	addi	r6,sp,104
   156e8:	da402c15 	stw	r9,176(sp)
   156ec:	00142fc0 	call	142fc <__sprint_r.part.0>
   156f0:	da402c17 	ldw	r9,176(sp)
   156f4:	103e9a1e 	bne	r2,zero,15160 <__alt_data_end+0xf0015160>
   156f8:	d9401b17 	ldw	r5,108(sp)
   156fc:	d8801c17 	ldw	r2,112(sp)
   15700:	d811883a 	mov	r8,sp
   15704:	29000044 	addi	r4,r5,1
   15708:	003e4206 	br	15014 <__alt_data_end+0xf0015014>
   1570c:	d9401b17 	ldw	r5,108(sp)
   15710:	01020034 	movhi	r4,2048
   15714:	21015b04 	addi	r4,r4,1388
   15718:	d9002415 	stw	r4,144(sp)
   1571c:	29400044 	addi	r5,r5,1
   15720:	003c6d06 	br	148d8 <__alt_data_end+0xf00148d8>
   15724:	0039883a 	mov	fp,zero
   15728:	00800084 	movi	r2,2
   1572c:	10803fcc 	andi	r2,r2,255
   15730:	01000044 	movi	r4,1
   15734:	11001e26 	beq	r2,r4,157b0 <___vfiprintf_internal_r+0x13a0>
   15738:	01000084 	movi	r4,2
   1573c:	11001e1e 	bne	r2,r4,157b8 <___vfiprintf_internal_r+0x13a8>
   15740:	1829883a 	mov	r20,r3
   15744:	003eea06 	br	152f0 <__alt_data_end+0xf00152f0>
   15748:	a007883a 	mov	r3,r20
   1574c:	00800044 	movi	r2,1
   15750:	003ff606 	br	1572c <__alt_data_end+0xf001572c>
   15754:	00800184 	movi	r2,6
   15758:	1240012e 	bgeu	r2,r9,15760 <___vfiprintf_internal_r+0x1350>
   1575c:	1013883a 	mov	r9,r2
   15760:	4827883a 	mov	r19,r9
   15764:	4825883a 	mov	r18,r9
   15768:	48001516 	blt	r9,zero,157c0 <___vfiprintf_internal_r+0x13b0>
   1576c:	05420034 	movhi	r21,2048
   15770:	d8c02215 	stw	r3,136(sp)
   15774:	ad40eb04 	addi	r21,r21,940
   15778:	003d1406 	br	14bcc <__alt_data_end+0xf0014bcc>
   1577c:	02820034 	movhi	r10,2048
   15780:	52815704 	addi	r10,r10,1372
   15784:	da802415 	stw	r10,144(sp)
   15788:	200d883a 	mov	r6,r4
   1578c:	003c9106 	br	149d4 <__alt_data_end+0xf00149d4>
   15790:	5021883a 	mov	r16,r10
   15794:	0013883a 	mov	r9,zero
   15798:	003b7d06 	br	14590 <__alt_data_end+0xf0014590>
   1579c:	4827883a 	mov	r19,r9
   157a0:	df001d83 	ldbu	fp,118(sp)
   157a4:	d8c02215 	stw	r3,136(sp)
   157a8:	0013883a 	mov	r9,zero
   157ac:	003c1806 	br	14810 <__alt_data_end+0xf0014810>
   157b0:	1829883a 	mov	r20,r3
   157b4:	003d1806 	br	14c18 <__alt_data_end+0xf0014c18>
   157b8:	1829883a 	mov	r20,r3
   157bc:	003ccd06 	br	14af4 <__alt_data_end+0xf0014af4>
   157c0:	0025883a 	mov	r18,zero
   157c4:	003fe906 	br	1576c <__alt_data_end+0xf001576c>
   157c8:	d8802217 	ldw	r2,136(sp)
   157cc:	80c00043 	ldbu	r3,1(r16)
   157d0:	5021883a 	mov	r16,r10
   157d4:	12400017 	ldw	r9,0(r2)
   157d8:	10800104 	addi	r2,r2,4
   157dc:	d8802215 	stw	r2,136(sp)
   157e0:	483faf0e 	bge	r9,zero,156a0 <__alt_data_end+0xf00156a0>
   157e4:	18c03fcc 	andi	r3,r3,255
   157e8:	18c0201c 	xori	r3,r3,128
   157ec:	027fffc4 	movi	r9,-1
   157f0:	18ffe004 	addi	r3,r3,-128
   157f4:	003b6506 	br	1458c <__alt_data_end+0xf001458c>
   157f8:	d9c01d85 	stb	r7,118(sp)
   157fc:	003ca006 	br	14a80 <__alt_data_end+0xf0014a80>
   15800:	d9c01d85 	stb	r7,118(sp)
   15804:	003cad06 	br	14abc <__alt_data_end+0xf0014abc>
   15808:	d9c01d85 	stb	r7,118(sp)
   1580c:	003d7d06 	br	14e04 <__alt_data_end+0xf0014e04>
   15810:	d9c01d85 	stb	r7,118(sp)
   15814:	003d5f06 	br	14d94 <__alt_data_end+0xf0014d94>
   15818:	a080004c 	andi	r2,r20,1
   1581c:	0039883a 	mov	fp,zero
   15820:	10000526 	beq	r2,zero,15838 <___vfiprintf_internal_r+0x1428>
   15824:	00800c04 	movi	r2,48
   15828:	d88019c5 	stb	r2,103(sp)
   1582c:	dcc02717 	ldw	r19,156(sp)
   15830:	dd4019c4 	addi	r21,sp,103
   15834:	003bf606 	br	14810 <__alt_data_end+0xf0014810>
   15838:	0027883a 	mov	r19,zero
   1583c:	dd401a04 	addi	r21,sp,104
   15840:	003bf306 	br	14810 <__alt_data_end+0xf0014810>
   15844:	d9c01d85 	stb	r7,118(sp)
   15848:	003dc806 	br	14f6c <__alt_data_end+0xf0014f6c>
   1584c:	d9c01d85 	stb	r7,118(sp)
   15850:	003d3a06 	br	14d3c <__alt_data_end+0xf0014d3c>
   15854:	d9c01d85 	stb	r7,118(sp)
   15858:	003d2a06 	br	14d04 <__alt_data_end+0xf0014d04>
   1585c:	d9c01d85 	stb	r7,118(sp)
   15860:	003cde06 	br	14bdc <__alt_data_end+0xf0014bdc>
   15864:	d9c01d85 	stb	r7,118(sp)
   15868:	003cbc06 	br	14b5c <__alt_data_end+0xf0014b5c>

0001586c <__vfiprintf_internal>:
   1586c:	00820034 	movhi	r2,2048
   15870:	108b1004 	addi	r2,r2,11328
   15874:	300f883a 	mov	r7,r6
   15878:	280d883a 	mov	r6,r5
   1587c:	200b883a 	mov	r5,r4
   15880:	11000017 	ldw	r4,0(r2)
   15884:	00144101 	jmpi	14410 <___vfiprintf_internal_r>

00015888 <__sbprintf>:
   15888:	2880030b 	ldhu	r2,12(r5)
   1588c:	2ac01917 	ldw	r11,100(r5)
   15890:	2a80038b 	ldhu	r10,14(r5)
   15894:	2a400717 	ldw	r9,28(r5)
   15898:	2a000917 	ldw	r8,36(r5)
   1589c:	defee204 	addi	sp,sp,-1144
   158a0:	00c10004 	movi	r3,1024
   158a4:	dc011a15 	stw	r16,1128(sp)
   158a8:	10bfff4c 	andi	r2,r2,65533
   158ac:	2821883a 	mov	r16,r5
   158b0:	d8cb883a 	add	r5,sp,r3
   158b4:	dc811c15 	stw	r18,1136(sp)
   158b8:	dc411b15 	stw	r17,1132(sp)
   158bc:	dfc11d15 	stw	ra,1140(sp)
   158c0:	2025883a 	mov	r18,r4
   158c4:	d881030d 	sth	r2,1036(sp)
   158c8:	dac11915 	stw	r11,1124(sp)
   158cc:	da81038d 	sth	r10,1038(sp)
   158d0:	da410715 	stw	r9,1052(sp)
   158d4:	da010915 	stw	r8,1060(sp)
   158d8:	dec10015 	stw	sp,1024(sp)
   158dc:	dec10415 	stw	sp,1040(sp)
   158e0:	d8c10215 	stw	r3,1032(sp)
   158e4:	d8c10515 	stw	r3,1044(sp)
   158e8:	d8010615 	stw	zero,1048(sp)
   158ec:	00144100 	call	14410 <___vfiprintf_internal_r>
   158f0:	1023883a 	mov	r17,r2
   158f4:	10000416 	blt	r2,zero,15908 <__sbprintf+0x80>
   158f8:	d9410004 	addi	r5,sp,1024
   158fc:	9009883a 	mov	r4,r18
   15900:	000fb280 	call	fb28 <_fflush_r>
   15904:	10000d1e 	bne	r2,zero,1593c <__sbprintf+0xb4>
   15908:	d881030b 	ldhu	r2,1036(sp)
   1590c:	1080100c 	andi	r2,r2,64
   15910:	10000326 	beq	r2,zero,15920 <__sbprintf+0x98>
   15914:	8080030b 	ldhu	r2,12(r16)
   15918:	10801014 	ori	r2,r2,64
   1591c:	8080030d 	sth	r2,12(r16)
   15920:	8805883a 	mov	r2,r17
   15924:	dfc11d17 	ldw	ra,1140(sp)
   15928:	dc811c17 	ldw	r18,1136(sp)
   1592c:	dc411b17 	ldw	r17,1132(sp)
   15930:	dc011a17 	ldw	r16,1128(sp)
   15934:	dec11e04 	addi	sp,sp,1144
   15938:	f800283a 	ret
   1593c:	047fffc4 	movi	r17,-1
   15940:	003ff106 	br	15908 <__alt_data_end+0xf0015908>

00015944 <_write_r>:
   15944:	defffd04 	addi	sp,sp,-12
   15948:	2805883a 	mov	r2,r5
   1594c:	dc000015 	stw	r16,0(sp)
   15950:	04020034 	movhi	r16,2048
   15954:	dc400115 	stw	r17,4(sp)
   15958:	300b883a 	mov	r5,r6
   1595c:	840b5e04 	addi	r16,r16,11640
   15960:	2023883a 	mov	r17,r4
   15964:	380d883a 	mov	r6,r7
   15968:	1009883a 	mov	r4,r2
   1596c:	dfc00215 	stw	ra,8(sp)
   15970:	80000015 	stw	zero,0(r16)
   15974:	0017f580 	call	17f58 <write>
   15978:	00ffffc4 	movi	r3,-1
   1597c:	10c00526 	beq	r2,r3,15994 <_write_r+0x50>
   15980:	dfc00217 	ldw	ra,8(sp)
   15984:	dc400117 	ldw	r17,4(sp)
   15988:	dc000017 	ldw	r16,0(sp)
   1598c:	dec00304 	addi	sp,sp,12
   15990:	f800283a 	ret
   15994:	80c00017 	ldw	r3,0(r16)
   15998:	183ff926 	beq	r3,zero,15980 <__alt_data_end+0xf0015980>
   1599c:	88c00015 	stw	r3,0(r17)
   159a0:	003ff706 	br	15980 <__alt_data_end+0xf0015980>

000159a4 <_close_r>:
   159a4:	defffd04 	addi	sp,sp,-12
   159a8:	dc000015 	stw	r16,0(sp)
   159ac:	04020034 	movhi	r16,2048
   159b0:	dc400115 	stw	r17,4(sp)
   159b4:	840b5e04 	addi	r16,r16,11640
   159b8:	2023883a 	mov	r17,r4
   159bc:	2809883a 	mov	r4,r5
   159c0:	dfc00215 	stw	ra,8(sp)
   159c4:	80000015 	stw	zero,0(r16)
   159c8:	00178340 	call	17834 <close>
   159cc:	00ffffc4 	movi	r3,-1
   159d0:	10c00526 	beq	r2,r3,159e8 <_close_r+0x44>
   159d4:	dfc00217 	ldw	ra,8(sp)
   159d8:	dc400117 	ldw	r17,4(sp)
   159dc:	dc000017 	ldw	r16,0(sp)
   159e0:	dec00304 	addi	sp,sp,12
   159e4:	f800283a 	ret
   159e8:	80c00017 	ldw	r3,0(r16)
   159ec:	183ff926 	beq	r3,zero,159d4 <__alt_data_end+0xf00159d4>
   159f0:	88c00015 	stw	r3,0(r17)
   159f4:	003ff706 	br	159d4 <__alt_data_end+0xf00159d4>

000159f8 <_calloc_r>:
   159f8:	298b383a 	mul	r5,r5,r6
   159fc:	defffe04 	addi	sp,sp,-8
   15a00:	dfc00115 	stw	ra,4(sp)
   15a04:	dc000015 	stw	r16,0(sp)
   15a08:	0010c640 	call	10c64 <_malloc_r>
   15a0c:	10002926 	beq	r2,zero,15ab4 <_calloc_r+0xbc>
   15a10:	11bfff17 	ldw	r6,-4(r2)
   15a14:	1021883a 	mov	r16,r2
   15a18:	00bfff04 	movi	r2,-4
   15a1c:	308c703a 	and	r6,r6,r2
   15a20:	00c00904 	movi	r3,36
   15a24:	308d883a 	add	r6,r6,r2
   15a28:	19801636 	bltu	r3,r6,15a84 <_calloc_r+0x8c>
   15a2c:	008004c4 	movi	r2,19
   15a30:	11800b2e 	bgeu	r2,r6,15a60 <_calloc_r+0x68>
   15a34:	80000015 	stw	zero,0(r16)
   15a38:	80000115 	stw	zero,4(r16)
   15a3c:	008006c4 	movi	r2,27
   15a40:	11801a2e 	bgeu	r2,r6,15aac <_calloc_r+0xb4>
   15a44:	80000215 	stw	zero,8(r16)
   15a48:	80000315 	stw	zero,12(r16)
   15a4c:	30c0151e 	bne	r6,r3,15aa4 <_calloc_r+0xac>
   15a50:	80000415 	stw	zero,16(r16)
   15a54:	80800604 	addi	r2,r16,24
   15a58:	80000515 	stw	zero,20(r16)
   15a5c:	00000106 	br	15a64 <_calloc_r+0x6c>
   15a60:	8005883a 	mov	r2,r16
   15a64:	10000015 	stw	zero,0(r2)
   15a68:	10000115 	stw	zero,4(r2)
   15a6c:	10000215 	stw	zero,8(r2)
   15a70:	8005883a 	mov	r2,r16
   15a74:	dfc00117 	ldw	ra,4(sp)
   15a78:	dc000017 	ldw	r16,0(sp)
   15a7c:	dec00204 	addi	sp,sp,8
   15a80:	f800283a 	ret
   15a84:	000b883a 	mov	r5,zero
   15a88:	8009883a 	mov	r4,r16
   15a8c:	00096c40 	call	96c4 <memset>
   15a90:	8005883a 	mov	r2,r16
   15a94:	dfc00117 	ldw	ra,4(sp)
   15a98:	dc000017 	ldw	r16,0(sp)
   15a9c:	dec00204 	addi	sp,sp,8
   15aa0:	f800283a 	ret
   15aa4:	80800404 	addi	r2,r16,16
   15aa8:	003fee06 	br	15a64 <__alt_data_end+0xf0015a64>
   15aac:	80800204 	addi	r2,r16,8
   15ab0:	003fec06 	br	15a64 <__alt_data_end+0xf0015a64>
   15ab4:	0005883a 	mov	r2,zero
   15ab8:	003fee06 	br	15a74 <__alt_data_end+0xf0015a74>

00015abc <_fclose_r>:
   15abc:	28003926 	beq	r5,zero,15ba4 <_fclose_r+0xe8>
   15ac0:	defffc04 	addi	sp,sp,-16
   15ac4:	dc400115 	stw	r17,4(sp)
   15ac8:	dc000015 	stw	r16,0(sp)
   15acc:	dfc00315 	stw	ra,12(sp)
   15ad0:	dc800215 	stw	r18,8(sp)
   15ad4:	2023883a 	mov	r17,r4
   15ad8:	2821883a 	mov	r16,r5
   15adc:	20000226 	beq	r4,zero,15ae8 <_fclose_r+0x2c>
   15ae0:	20800e17 	ldw	r2,56(r4)
   15ae4:	10002726 	beq	r2,zero,15b84 <_fclose_r+0xc8>
   15ae8:	8080030f 	ldh	r2,12(r16)
   15aec:	1000071e 	bne	r2,zero,15b0c <_fclose_r+0x50>
   15af0:	0005883a 	mov	r2,zero
   15af4:	dfc00317 	ldw	ra,12(sp)
   15af8:	dc800217 	ldw	r18,8(sp)
   15afc:	dc400117 	ldw	r17,4(sp)
   15b00:	dc000017 	ldw	r16,0(sp)
   15b04:	dec00404 	addi	sp,sp,16
   15b08:	f800283a 	ret
   15b0c:	800b883a 	mov	r5,r16
   15b10:	8809883a 	mov	r4,r17
   15b14:	000f90c0 	call	f90c <__sflush_r>
   15b18:	1025883a 	mov	r18,r2
   15b1c:	80800b17 	ldw	r2,44(r16)
   15b20:	10000426 	beq	r2,zero,15b34 <_fclose_r+0x78>
   15b24:	81400717 	ldw	r5,28(r16)
   15b28:	8809883a 	mov	r4,r17
   15b2c:	103ee83a 	callr	r2
   15b30:	10001616 	blt	r2,zero,15b8c <_fclose_r+0xd0>
   15b34:	8080030b 	ldhu	r2,12(r16)
   15b38:	1080200c 	andi	r2,r2,128
   15b3c:	1000151e 	bne	r2,zero,15b94 <_fclose_r+0xd8>
   15b40:	81400c17 	ldw	r5,48(r16)
   15b44:	28000526 	beq	r5,zero,15b5c <_fclose_r+0xa0>
   15b48:	80801004 	addi	r2,r16,64
   15b4c:	28800226 	beq	r5,r2,15b58 <_fclose_r+0x9c>
   15b50:	8809883a 	mov	r4,r17
   15b54:	00100780 	call	10078 <_free_r>
   15b58:	80000c15 	stw	zero,48(r16)
   15b5c:	81401117 	ldw	r5,68(r16)
   15b60:	28000326 	beq	r5,zero,15b70 <_fclose_r+0xb4>
   15b64:	8809883a 	mov	r4,r17
   15b68:	00100780 	call	10078 <_free_r>
   15b6c:	80001115 	stw	zero,68(r16)
   15b70:	000ff140 	call	ff14 <__sfp_lock_acquire>
   15b74:	8000030d 	sth	zero,12(r16)
   15b78:	000ff180 	call	ff18 <__sfp_lock_release>
   15b7c:	9005883a 	mov	r2,r18
   15b80:	003fdc06 	br	15af4 <__alt_data_end+0xf0015af4>
   15b84:	000ff040 	call	ff04 <__sinit>
   15b88:	003fd706 	br	15ae8 <__alt_data_end+0xf0015ae8>
   15b8c:	04bfffc4 	movi	r18,-1
   15b90:	003fe806 	br	15b34 <__alt_data_end+0xf0015b34>
   15b94:	81400417 	ldw	r5,16(r16)
   15b98:	8809883a 	mov	r4,r17
   15b9c:	00100780 	call	10078 <_free_r>
   15ba0:	003fe706 	br	15b40 <__alt_data_end+0xf0015b40>
   15ba4:	0005883a 	mov	r2,zero
   15ba8:	f800283a 	ret

00015bac <fclose>:
   15bac:	00820034 	movhi	r2,2048
   15bb0:	108b1004 	addi	r2,r2,11328
   15bb4:	200b883a 	mov	r5,r4
   15bb8:	11000017 	ldw	r4,0(r2)
   15bbc:	0015abc1 	jmpi	15abc <_fclose_r>

00015bc0 <__fputwc>:
   15bc0:	defff804 	addi	sp,sp,-32
   15bc4:	dcc00415 	stw	r19,16(sp)
   15bc8:	dc800315 	stw	r18,12(sp)
   15bcc:	dc000115 	stw	r16,4(sp)
   15bd0:	dfc00715 	stw	ra,28(sp)
   15bd4:	dd400615 	stw	r21,24(sp)
   15bd8:	dd000515 	stw	r20,20(sp)
   15bdc:	dc400215 	stw	r17,8(sp)
   15be0:	2027883a 	mov	r19,r4
   15be4:	2825883a 	mov	r18,r5
   15be8:	3021883a 	mov	r16,r6
   15bec:	0010a540 	call	10a54 <__locale_mb_cur_max>
   15bf0:	00c00044 	movi	r3,1
   15bf4:	10c03e26 	beq	r2,r3,15cf0 <__fputwc+0x130>
   15bf8:	81c01704 	addi	r7,r16,92
   15bfc:	900d883a 	mov	r6,r18
   15c00:	d80b883a 	mov	r5,sp
   15c04:	9809883a 	mov	r4,r19
   15c08:	00160900 	call	16090 <_wcrtomb_r>
   15c0c:	1029883a 	mov	r20,r2
   15c10:	00bfffc4 	movi	r2,-1
   15c14:	a0802026 	beq	r20,r2,15c98 <__fputwc+0xd8>
   15c18:	d9400003 	ldbu	r5,0(sp)
   15c1c:	a0001c26 	beq	r20,zero,15c90 <__fputwc+0xd0>
   15c20:	0023883a 	mov	r17,zero
   15c24:	05400284 	movi	r21,10
   15c28:	00000906 	br	15c50 <__fputwc+0x90>
   15c2c:	80800017 	ldw	r2,0(r16)
   15c30:	11400005 	stb	r5,0(r2)
   15c34:	80c00017 	ldw	r3,0(r16)
   15c38:	18c00044 	addi	r3,r3,1
   15c3c:	80c00015 	stw	r3,0(r16)
   15c40:	8c400044 	addi	r17,r17,1
   15c44:	dc45883a 	add	r2,sp,r17
   15c48:	8d00112e 	bgeu	r17,r20,15c90 <__fputwc+0xd0>
   15c4c:	11400003 	ldbu	r5,0(r2)
   15c50:	80c00217 	ldw	r3,8(r16)
   15c54:	18ffffc4 	addi	r3,r3,-1
   15c58:	80c00215 	stw	r3,8(r16)
   15c5c:	183ff30e 	bge	r3,zero,15c2c <__alt_data_end+0xf0015c2c>
   15c60:	80800617 	ldw	r2,24(r16)
   15c64:	18801916 	blt	r3,r2,15ccc <__fputwc+0x10c>
   15c68:	80800017 	ldw	r2,0(r16)
   15c6c:	11400005 	stb	r5,0(r2)
   15c70:	80800017 	ldw	r2,0(r16)
   15c74:	10c00003 	ldbu	r3,0(r2)
   15c78:	10800044 	addi	r2,r2,1
   15c7c:	1d402326 	beq	r3,r21,15d0c <__fputwc+0x14c>
   15c80:	80800015 	stw	r2,0(r16)
   15c84:	8c400044 	addi	r17,r17,1
   15c88:	dc45883a 	add	r2,sp,r17
   15c8c:	8d3fef36 	bltu	r17,r20,15c4c <__alt_data_end+0xf0015c4c>
   15c90:	9005883a 	mov	r2,r18
   15c94:	00000406 	br	15ca8 <__fputwc+0xe8>
   15c98:	80c0030b 	ldhu	r3,12(r16)
   15c9c:	a005883a 	mov	r2,r20
   15ca0:	18c01014 	ori	r3,r3,64
   15ca4:	80c0030d 	sth	r3,12(r16)
   15ca8:	dfc00717 	ldw	ra,28(sp)
   15cac:	dd400617 	ldw	r21,24(sp)
   15cb0:	dd000517 	ldw	r20,20(sp)
   15cb4:	dcc00417 	ldw	r19,16(sp)
   15cb8:	dc800317 	ldw	r18,12(sp)
   15cbc:	dc400217 	ldw	r17,8(sp)
   15cc0:	dc000117 	ldw	r16,4(sp)
   15cc4:	dec00804 	addi	sp,sp,32
   15cc8:	f800283a 	ret
   15ccc:	800d883a 	mov	r6,r16
   15cd0:	29403fcc 	andi	r5,r5,255
   15cd4:	9809883a 	mov	r4,r19
   15cd8:	0015f380 	call	15f38 <__swbuf_r>
   15cdc:	10bfffe0 	cmpeqi	r2,r2,-1
   15ce0:	10803fcc 	andi	r2,r2,255
   15ce4:	103fd626 	beq	r2,zero,15c40 <__alt_data_end+0xf0015c40>
   15ce8:	00bfffc4 	movi	r2,-1
   15cec:	003fee06 	br	15ca8 <__alt_data_end+0xf0015ca8>
   15cf0:	90ffffc4 	addi	r3,r18,-1
   15cf4:	01003f84 	movi	r4,254
   15cf8:	20ffbf36 	bltu	r4,r3,15bf8 <__alt_data_end+0xf0015bf8>
   15cfc:	900b883a 	mov	r5,r18
   15d00:	dc800005 	stb	r18,0(sp)
   15d04:	1029883a 	mov	r20,r2
   15d08:	003fc506 	br	15c20 <__alt_data_end+0xf0015c20>
   15d0c:	800d883a 	mov	r6,r16
   15d10:	a80b883a 	mov	r5,r21
   15d14:	9809883a 	mov	r4,r19
   15d18:	0015f380 	call	15f38 <__swbuf_r>
   15d1c:	10bfffe0 	cmpeqi	r2,r2,-1
   15d20:	003fef06 	br	15ce0 <__alt_data_end+0xf0015ce0>

00015d24 <_fputwc_r>:
   15d24:	3080030b 	ldhu	r2,12(r6)
   15d28:	10c8000c 	andi	r3,r2,8192
   15d2c:	1800051e 	bne	r3,zero,15d44 <_fputwc_r+0x20>
   15d30:	30c01917 	ldw	r3,100(r6)
   15d34:	10880014 	ori	r2,r2,8192
   15d38:	3080030d 	sth	r2,12(r6)
   15d3c:	18880014 	ori	r2,r3,8192
   15d40:	30801915 	stw	r2,100(r6)
   15d44:	0015bc01 	jmpi	15bc0 <__fputwc>

00015d48 <fputwc>:
   15d48:	00820034 	movhi	r2,2048
   15d4c:	defffc04 	addi	sp,sp,-16
   15d50:	108b1004 	addi	r2,r2,11328
   15d54:	dc000115 	stw	r16,4(sp)
   15d58:	14000017 	ldw	r16,0(r2)
   15d5c:	dc400215 	stw	r17,8(sp)
   15d60:	dfc00315 	stw	ra,12(sp)
   15d64:	2023883a 	mov	r17,r4
   15d68:	80000226 	beq	r16,zero,15d74 <fputwc+0x2c>
   15d6c:	80800e17 	ldw	r2,56(r16)
   15d70:	10001026 	beq	r2,zero,15db4 <fputwc+0x6c>
   15d74:	2880030b 	ldhu	r2,12(r5)
   15d78:	10c8000c 	andi	r3,r2,8192
   15d7c:	1800051e 	bne	r3,zero,15d94 <fputwc+0x4c>
   15d80:	28c01917 	ldw	r3,100(r5)
   15d84:	10880014 	ori	r2,r2,8192
   15d88:	2880030d 	sth	r2,12(r5)
   15d8c:	18880014 	ori	r2,r3,8192
   15d90:	28801915 	stw	r2,100(r5)
   15d94:	280d883a 	mov	r6,r5
   15d98:	8009883a 	mov	r4,r16
   15d9c:	880b883a 	mov	r5,r17
   15da0:	dfc00317 	ldw	ra,12(sp)
   15da4:	dc400217 	ldw	r17,8(sp)
   15da8:	dc000117 	ldw	r16,4(sp)
   15dac:	dec00404 	addi	sp,sp,16
   15db0:	0015bc01 	jmpi	15bc0 <__fputwc>
   15db4:	8009883a 	mov	r4,r16
   15db8:	d9400015 	stw	r5,0(sp)
   15dbc:	000ff040 	call	ff04 <__sinit>
   15dc0:	d9400017 	ldw	r5,0(sp)
   15dc4:	003feb06 	br	15d74 <__alt_data_end+0xf0015d74>

00015dc8 <_fstat_r>:
   15dc8:	defffd04 	addi	sp,sp,-12
   15dcc:	2805883a 	mov	r2,r5
   15dd0:	dc000015 	stw	r16,0(sp)
   15dd4:	04020034 	movhi	r16,2048
   15dd8:	dc400115 	stw	r17,4(sp)
   15ddc:	840b5e04 	addi	r16,r16,11640
   15de0:	2023883a 	mov	r17,r4
   15de4:	300b883a 	mov	r5,r6
   15de8:	1009883a 	mov	r4,r2
   15dec:	dfc00215 	stw	ra,8(sp)
   15df0:	80000015 	stw	zero,0(r16)
   15df4:	001796c0 	call	1796c <fstat>
   15df8:	00ffffc4 	movi	r3,-1
   15dfc:	10c00526 	beq	r2,r3,15e14 <_fstat_r+0x4c>
   15e00:	dfc00217 	ldw	ra,8(sp)
   15e04:	dc400117 	ldw	r17,4(sp)
   15e08:	dc000017 	ldw	r16,0(sp)
   15e0c:	dec00304 	addi	sp,sp,12
   15e10:	f800283a 	ret
   15e14:	80c00017 	ldw	r3,0(r16)
   15e18:	183ff926 	beq	r3,zero,15e00 <__alt_data_end+0xf0015e00>
   15e1c:	88c00015 	stw	r3,0(r17)
   15e20:	003ff706 	br	15e00 <__alt_data_end+0xf0015e00>

00015e24 <_isatty_r>:
   15e24:	defffd04 	addi	sp,sp,-12
   15e28:	dc000015 	stw	r16,0(sp)
   15e2c:	04020034 	movhi	r16,2048
   15e30:	dc400115 	stw	r17,4(sp)
   15e34:	840b5e04 	addi	r16,r16,11640
   15e38:	2023883a 	mov	r17,r4
   15e3c:	2809883a 	mov	r4,r5
   15e40:	dfc00215 	stw	ra,8(sp)
   15e44:	80000015 	stw	zero,0(r16)
   15e48:	0017a580 	call	17a58 <isatty>
   15e4c:	00ffffc4 	movi	r3,-1
   15e50:	10c00526 	beq	r2,r3,15e68 <_isatty_r+0x44>
   15e54:	dfc00217 	ldw	ra,8(sp)
   15e58:	dc400117 	ldw	r17,4(sp)
   15e5c:	dc000017 	ldw	r16,0(sp)
   15e60:	dec00304 	addi	sp,sp,12
   15e64:	f800283a 	ret
   15e68:	80c00017 	ldw	r3,0(r16)
   15e6c:	183ff926 	beq	r3,zero,15e54 <__alt_data_end+0xf0015e54>
   15e70:	88c00015 	stw	r3,0(r17)
   15e74:	003ff706 	br	15e54 <__alt_data_end+0xf0015e54>

00015e78 <_lseek_r>:
   15e78:	defffd04 	addi	sp,sp,-12
   15e7c:	2805883a 	mov	r2,r5
   15e80:	dc000015 	stw	r16,0(sp)
   15e84:	04020034 	movhi	r16,2048
   15e88:	dc400115 	stw	r17,4(sp)
   15e8c:	300b883a 	mov	r5,r6
   15e90:	840b5e04 	addi	r16,r16,11640
   15e94:	2023883a 	mov	r17,r4
   15e98:	380d883a 	mov	r6,r7
   15e9c:	1009883a 	mov	r4,r2
   15ea0:	dfc00215 	stw	ra,8(sp)
   15ea4:	80000015 	stw	zero,0(r16)
   15ea8:	0017b380 	call	17b38 <lseek>
   15eac:	00ffffc4 	movi	r3,-1
   15eb0:	10c00526 	beq	r2,r3,15ec8 <_lseek_r+0x50>
   15eb4:	dfc00217 	ldw	ra,8(sp)
   15eb8:	dc400117 	ldw	r17,4(sp)
   15ebc:	dc000017 	ldw	r16,0(sp)
   15ec0:	dec00304 	addi	sp,sp,12
   15ec4:	f800283a 	ret
   15ec8:	80c00017 	ldw	r3,0(r16)
   15ecc:	183ff926 	beq	r3,zero,15eb4 <__alt_data_end+0xf0015eb4>
   15ed0:	88c00015 	stw	r3,0(r17)
   15ed4:	003ff706 	br	15eb4 <__alt_data_end+0xf0015eb4>

00015ed8 <_read_r>:
   15ed8:	defffd04 	addi	sp,sp,-12
   15edc:	2805883a 	mov	r2,r5
   15ee0:	dc000015 	stw	r16,0(sp)
   15ee4:	04020034 	movhi	r16,2048
   15ee8:	dc400115 	stw	r17,4(sp)
   15eec:	300b883a 	mov	r5,r6
   15ef0:	840b5e04 	addi	r16,r16,11640
   15ef4:	2023883a 	mov	r17,r4
   15ef8:	380d883a 	mov	r6,r7
   15efc:	1009883a 	mov	r4,r2
   15f00:	dfc00215 	stw	ra,8(sp)
   15f04:	80000015 	stw	zero,0(r16)
   15f08:	0017d0c0 	call	17d0c <read>
   15f0c:	00ffffc4 	movi	r3,-1
   15f10:	10c00526 	beq	r2,r3,15f28 <_read_r+0x50>
   15f14:	dfc00217 	ldw	ra,8(sp)
   15f18:	dc400117 	ldw	r17,4(sp)
   15f1c:	dc000017 	ldw	r16,0(sp)
   15f20:	dec00304 	addi	sp,sp,12
   15f24:	f800283a 	ret
   15f28:	80c00017 	ldw	r3,0(r16)
   15f2c:	183ff926 	beq	r3,zero,15f14 <__alt_data_end+0xf0015f14>
   15f30:	88c00015 	stw	r3,0(r17)
   15f34:	003ff706 	br	15f14 <__alt_data_end+0xf0015f14>

00015f38 <__swbuf_r>:
   15f38:	defffb04 	addi	sp,sp,-20
   15f3c:	dcc00315 	stw	r19,12(sp)
   15f40:	dc800215 	stw	r18,8(sp)
   15f44:	dc000015 	stw	r16,0(sp)
   15f48:	dfc00415 	stw	ra,16(sp)
   15f4c:	dc400115 	stw	r17,4(sp)
   15f50:	2025883a 	mov	r18,r4
   15f54:	2827883a 	mov	r19,r5
   15f58:	3021883a 	mov	r16,r6
   15f5c:	20000226 	beq	r4,zero,15f68 <__swbuf_r+0x30>
   15f60:	20800e17 	ldw	r2,56(r4)
   15f64:	10004226 	beq	r2,zero,16070 <__swbuf_r+0x138>
   15f68:	80800617 	ldw	r2,24(r16)
   15f6c:	8100030b 	ldhu	r4,12(r16)
   15f70:	80800215 	stw	r2,8(r16)
   15f74:	2080020c 	andi	r2,r4,8
   15f78:	10003626 	beq	r2,zero,16054 <__swbuf_r+0x11c>
   15f7c:	80c00417 	ldw	r3,16(r16)
   15f80:	18003426 	beq	r3,zero,16054 <__swbuf_r+0x11c>
   15f84:	2088000c 	andi	r2,r4,8192
   15f88:	9c403fcc 	andi	r17,r19,255
   15f8c:	10001a26 	beq	r2,zero,15ff8 <__swbuf_r+0xc0>
   15f90:	80800017 	ldw	r2,0(r16)
   15f94:	81000517 	ldw	r4,20(r16)
   15f98:	10c7c83a 	sub	r3,r2,r3
   15f9c:	1900200e 	bge	r3,r4,16020 <__swbuf_r+0xe8>
   15fa0:	18c00044 	addi	r3,r3,1
   15fa4:	81000217 	ldw	r4,8(r16)
   15fa8:	11400044 	addi	r5,r2,1
   15fac:	81400015 	stw	r5,0(r16)
   15fb0:	213fffc4 	addi	r4,r4,-1
   15fb4:	81000215 	stw	r4,8(r16)
   15fb8:	14c00005 	stb	r19,0(r2)
   15fbc:	80800517 	ldw	r2,20(r16)
   15fc0:	10c01e26 	beq	r2,r3,1603c <__swbuf_r+0x104>
   15fc4:	8080030b 	ldhu	r2,12(r16)
   15fc8:	1080004c 	andi	r2,r2,1
   15fcc:	10000226 	beq	r2,zero,15fd8 <__swbuf_r+0xa0>
   15fd0:	00800284 	movi	r2,10
   15fd4:	88801926 	beq	r17,r2,1603c <__swbuf_r+0x104>
   15fd8:	8805883a 	mov	r2,r17
   15fdc:	dfc00417 	ldw	ra,16(sp)
   15fe0:	dcc00317 	ldw	r19,12(sp)
   15fe4:	dc800217 	ldw	r18,8(sp)
   15fe8:	dc400117 	ldw	r17,4(sp)
   15fec:	dc000017 	ldw	r16,0(sp)
   15ff0:	dec00504 	addi	sp,sp,20
   15ff4:	f800283a 	ret
   15ff8:	81401917 	ldw	r5,100(r16)
   15ffc:	00b7ffc4 	movi	r2,-8193
   16000:	21080014 	ori	r4,r4,8192
   16004:	2884703a 	and	r2,r5,r2
   16008:	80801915 	stw	r2,100(r16)
   1600c:	80800017 	ldw	r2,0(r16)
   16010:	8100030d 	sth	r4,12(r16)
   16014:	81000517 	ldw	r4,20(r16)
   16018:	10c7c83a 	sub	r3,r2,r3
   1601c:	193fe016 	blt	r3,r4,15fa0 <__alt_data_end+0xf0015fa0>
   16020:	800b883a 	mov	r5,r16
   16024:	9009883a 	mov	r4,r18
   16028:	000fb280 	call	fb28 <_fflush_r>
   1602c:	1000071e 	bne	r2,zero,1604c <__swbuf_r+0x114>
   16030:	80800017 	ldw	r2,0(r16)
   16034:	00c00044 	movi	r3,1
   16038:	003fda06 	br	15fa4 <__alt_data_end+0xf0015fa4>
   1603c:	800b883a 	mov	r5,r16
   16040:	9009883a 	mov	r4,r18
   16044:	000fb280 	call	fb28 <_fflush_r>
   16048:	103fe326 	beq	r2,zero,15fd8 <__alt_data_end+0xf0015fd8>
   1604c:	00bfffc4 	movi	r2,-1
   16050:	003fe206 	br	15fdc <__alt_data_end+0xf0015fdc>
   16054:	800b883a 	mov	r5,r16
   16058:	9009883a 	mov	r4,r18
   1605c:	000df300 	call	df30 <__swsetup_r>
   16060:	103ffa1e 	bne	r2,zero,1604c <__alt_data_end+0xf001604c>
   16064:	8100030b 	ldhu	r4,12(r16)
   16068:	80c00417 	ldw	r3,16(r16)
   1606c:	003fc506 	br	15f84 <__alt_data_end+0xf0015f84>
   16070:	000ff040 	call	ff04 <__sinit>
   16074:	003fbc06 	br	15f68 <__alt_data_end+0xf0015f68>

00016078 <__swbuf>:
   16078:	00820034 	movhi	r2,2048
   1607c:	108b1004 	addi	r2,r2,11328
   16080:	280d883a 	mov	r6,r5
   16084:	200b883a 	mov	r5,r4
   16088:	11000017 	ldw	r4,0(r2)
   1608c:	0015f381 	jmpi	15f38 <__swbuf_r>

00016090 <_wcrtomb_r>:
   16090:	defff604 	addi	sp,sp,-40
   16094:	00820034 	movhi	r2,2048
   16098:	dc800815 	stw	r18,32(sp)
   1609c:	dc400715 	stw	r17,28(sp)
   160a0:	dc000615 	stw	r16,24(sp)
   160a4:	108b1404 	addi	r2,r2,11344
   160a8:	dfc00915 	stw	ra,36(sp)
   160ac:	2021883a 	mov	r16,r4
   160b0:	3823883a 	mov	r17,r7
   160b4:	14800017 	ldw	r18,0(r2)
   160b8:	28001426 	beq	r5,zero,1610c <_wcrtomb_r+0x7c>
   160bc:	d9400415 	stw	r5,16(sp)
   160c0:	d9800515 	stw	r6,20(sp)
   160c4:	0010a480 	call	10a48 <__locale_charset>
   160c8:	d9800517 	ldw	r6,20(sp)
   160cc:	d9400417 	ldw	r5,16(sp)
   160d0:	100f883a 	mov	r7,r2
   160d4:	dc400015 	stw	r17,0(sp)
   160d8:	8009883a 	mov	r4,r16
   160dc:	903ee83a 	callr	r18
   160e0:	00ffffc4 	movi	r3,-1
   160e4:	10c0031e 	bne	r2,r3,160f4 <_wcrtomb_r+0x64>
   160e8:	88000015 	stw	zero,0(r17)
   160ec:	00c02284 	movi	r3,138
   160f0:	80c00015 	stw	r3,0(r16)
   160f4:	dfc00917 	ldw	ra,36(sp)
   160f8:	dc800817 	ldw	r18,32(sp)
   160fc:	dc400717 	ldw	r17,28(sp)
   16100:	dc000617 	ldw	r16,24(sp)
   16104:	dec00a04 	addi	sp,sp,40
   16108:	f800283a 	ret
   1610c:	0010a480 	call	10a48 <__locale_charset>
   16110:	100f883a 	mov	r7,r2
   16114:	dc400015 	stw	r17,0(sp)
   16118:	000d883a 	mov	r6,zero
   1611c:	d9400104 	addi	r5,sp,4
   16120:	8009883a 	mov	r4,r16
   16124:	903ee83a 	callr	r18
   16128:	003fed06 	br	160e0 <__alt_data_end+0xf00160e0>

0001612c <wcrtomb>:
   1612c:	defff604 	addi	sp,sp,-40
   16130:	00820034 	movhi	r2,2048
   16134:	dc800615 	stw	r18,24(sp)
   16138:	dc400515 	stw	r17,20(sp)
   1613c:	108b1004 	addi	r2,r2,11328
   16140:	dfc00915 	stw	ra,36(sp)
   16144:	dd000815 	stw	r20,32(sp)
   16148:	dcc00715 	stw	r19,28(sp)
   1614c:	dc000415 	stw	r16,16(sp)
   16150:	3025883a 	mov	r18,r6
   16154:	14400017 	ldw	r17,0(r2)
   16158:	20001926 	beq	r4,zero,161c0 <wcrtomb+0x94>
   1615c:	00820034 	movhi	r2,2048
   16160:	108b1404 	addi	r2,r2,11344
   16164:	15000017 	ldw	r20,0(r2)
   16168:	2021883a 	mov	r16,r4
   1616c:	2827883a 	mov	r19,r5
   16170:	0010a480 	call	10a48 <__locale_charset>
   16174:	100f883a 	mov	r7,r2
   16178:	dc800015 	stw	r18,0(sp)
   1617c:	980d883a 	mov	r6,r19
   16180:	800b883a 	mov	r5,r16
   16184:	8809883a 	mov	r4,r17
   16188:	a03ee83a 	callr	r20
   1618c:	00ffffc4 	movi	r3,-1
   16190:	10c0031e 	bne	r2,r3,161a0 <wcrtomb+0x74>
   16194:	90000015 	stw	zero,0(r18)
   16198:	00c02284 	movi	r3,138
   1619c:	88c00015 	stw	r3,0(r17)
   161a0:	dfc00917 	ldw	ra,36(sp)
   161a4:	dd000817 	ldw	r20,32(sp)
   161a8:	dcc00717 	ldw	r19,28(sp)
   161ac:	dc800617 	ldw	r18,24(sp)
   161b0:	dc400517 	ldw	r17,20(sp)
   161b4:	dc000417 	ldw	r16,16(sp)
   161b8:	dec00a04 	addi	sp,sp,40
   161bc:	f800283a 	ret
   161c0:	00820034 	movhi	r2,2048
   161c4:	108b1404 	addi	r2,r2,11344
   161c8:	14000017 	ldw	r16,0(r2)
   161cc:	0010a480 	call	10a48 <__locale_charset>
   161d0:	100f883a 	mov	r7,r2
   161d4:	dc800015 	stw	r18,0(sp)
   161d8:	000d883a 	mov	r6,zero
   161dc:	d9400104 	addi	r5,sp,4
   161e0:	8809883a 	mov	r4,r17
   161e4:	803ee83a 	callr	r16
   161e8:	003fe806 	br	1618c <__alt_data_end+0xf001618c>

000161ec <__ascii_wctomb>:
   161ec:	28000526 	beq	r5,zero,16204 <__ascii_wctomb+0x18>
   161f0:	00803fc4 	movi	r2,255
   161f4:	11800536 	bltu	r2,r6,1620c <__ascii_wctomb+0x20>
   161f8:	29800005 	stb	r6,0(r5)
   161fc:	00800044 	movi	r2,1
   16200:	f800283a 	ret
   16204:	0005883a 	mov	r2,zero
   16208:	f800283a 	ret
   1620c:	00802284 	movi	r2,138
   16210:	20800015 	stw	r2,0(r4)
   16214:	00bfffc4 	movi	r2,-1
   16218:	f800283a 	ret

0001621c <_wctomb_r>:
   1621c:	00820034 	movhi	r2,2048
   16220:	defff904 	addi	sp,sp,-28
   16224:	108b1404 	addi	r2,r2,11344
   16228:	dfc00615 	stw	ra,24(sp)
   1622c:	dc400515 	stw	r17,20(sp)
   16230:	dc000415 	stw	r16,16(sp)
   16234:	3823883a 	mov	r17,r7
   16238:	14000017 	ldw	r16,0(r2)
   1623c:	d9000115 	stw	r4,4(sp)
   16240:	d9400215 	stw	r5,8(sp)
   16244:	d9800315 	stw	r6,12(sp)
   16248:	0010a480 	call	10a48 <__locale_charset>
   1624c:	d9800317 	ldw	r6,12(sp)
   16250:	d9400217 	ldw	r5,8(sp)
   16254:	d9000117 	ldw	r4,4(sp)
   16258:	100f883a 	mov	r7,r2
   1625c:	dc400015 	stw	r17,0(sp)
   16260:	803ee83a 	callr	r16
   16264:	dfc00617 	ldw	ra,24(sp)
   16268:	dc400517 	ldw	r17,20(sp)
   1626c:	dc000417 	ldw	r16,16(sp)
   16270:	dec00704 	addi	sp,sp,28
   16274:	f800283a 	ret

00016278 <__udivdi3>:
   16278:	defff504 	addi	sp,sp,-44
   1627c:	dcc00415 	stw	r19,16(sp)
   16280:	dc000115 	stw	r16,4(sp)
   16284:	dfc00a15 	stw	ra,40(sp)
   16288:	df000915 	stw	fp,36(sp)
   1628c:	ddc00815 	stw	r23,32(sp)
   16290:	dd800715 	stw	r22,28(sp)
   16294:	dd400615 	stw	r21,24(sp)
   16298:	dd000515 	stw	r20,20(sp)
   1629c:	dc800315 	stw	r18,12(sp)
   162a0:	dc400215 	stw	r17,8(sp)
   162a4:	2027883a 	mov	r19,r4
   162a8:	2821883a 	mov	r16,r5
   162ac:	3800411e 	bne	r7,zero,163b4 <__udivdi3+0x13c>
   162b0:	3023883a 	mov	r17,r6
   162b4:	2025883a 	mov	r18,r4
   162b8:	2980522e 	bgeu	r5,r6,16404 <__udivdi3+0x18c>
   162bc:	00bfffd4 	movui	r2,65535
   162c0:	282d883a 	mov	r22,r5
   162c4:	1180a836 	bltu	r2,r6,16568 <__udivdi3+0x2f0>
   162c8:	00803fc4 	movi	r2,255
   162cc:	1185803a 	cmpltu	r2,r2,r6
   162d0:	100490fa 	slli	r2,r2,3
   162d4:	3086d83a 	srl	r3,r6,r2
   162d8:	01020034 	movhi	r4,2048
   162dc:	21009b44 	addi	r4,r4,621
   162e0:	20c7883a 	add	r3,r4,r3
   162e4:	18c00003 	ldbu	r3,0(r3)
   162e8:	1885883a 	add	r2,r3,r2
   162ec:	00c00804 	movi	r3,32
   162f0:	1887c83a 	sub	r3,r3,r2
   162f4:	18000526 	beq	r3,zero,1630c <__udivdi3+0x94>
   162f8:	80e0983a 	sll	r16,r16,r3
   162fc:	9884d83a 	srl	r2,r19,r2
   16300:	30e2983a 	sll	r17,r6,r3
   16304:	98e4983a 	sll	r18,r19,r3
   16308:	142cb03a 	or	r22,r2,r16
   1630c:	882ad43a 	srli	r21,r17,16
   16310:	b009883a 	mov	r4,r22
   16314:	8d3fffcc 	andi	r20,r17,65535
   16318:	a80b883a 	mov	r5,r21
   1631c:	00094a80 	call	94a8 <__umodsi3>
   16320:	b009883a 	mov	r4,r22
   16324:	a80b883a 	mov	r5,r21
   16328:	1027883a 	mov	r19,r2
   1632c:	00094440 	call	9444 <__udivsi3>
   16330:	102d883a 	mov	r22,r2
   16334:	9826943a 	slli	r19,r19,16
   16338:	9004d43a 	srli	r2,r18,16
   1633c:	a5a1383a 	mul	r16,r20,r22
   16340:	14c4b03a 	or	r2,r2,r19
   16344:	1400052e 	bgeu	r2,r16,1635c <__udivdi3+0xe4>
   16348:	1445883a 	add	r2,r2,r17
   1634c:	b0ffffc4 	addi	r3,r22,-1
   16350:	14400136 	bltu	r2,r17,16358 <__udivdi3+0xe0>
   16354:	14012336 	bltu	r2,r16,167e4 <__udivdi3+0x56c>
   16358:	182d883a 	mov	r22,r3
   1635c:	1421c83a 	sub	r16,r2,r16
   16360:	a80b883a 	mov	r5,r21
   16364:	8009883a 	mov	r4,r16
   16368:	00094a80 	call	94a8 <__umodsi3>
   1636c:	1027883a 	mov	r19,r2
   16370:	a80b883a 	mov	r5,r21
   16374:	8009883a 	mov	r4,r16
   16378:	00094440 	call	9444 <__udivsi3>
   1637c:	9826943a 	slli	r19,r19,16
   16380:	a0a9383a 	mul	r20,r20,r2
   16384:	94bfffcc 	andi	r18,r18,65535
   16388:	94e4b03a 	or	r18,r18,r19
   1638c:	9500052e 	bgeu	r18,r20,163a4 <__udivdi3+0x12c>
   16390:	8ca5883a 	add	r18,r17,r18
   16394:	10ffffc4 	addi	r3,r2,-1
   16398:	9440f136 	bltu	r18,r17,16760 <__udivdi3+0x4e8>
   1639c:	9500f02e 	bgeu	r18,r20,16760 <__udivdi3+0x4e8>
   163a0:	10bfff84 	addi	r2,r2,-2
   163a4:	b00c943a 	slli	r6,r22,16
   163a8:	0007883a 	mov	r3,zero
   163ac:	3084b03a 	or	r2,r6,r2
   163b0:	00005906 	br	16518 <__udivdi3+0x2a0>
   163b4:	29c05636 	bltu	r5,r7,16510 <__udivdi3+0x298>
   163b8:	00bfffd4 	movui	r2,65535
   163bc:	11c0622e 	bgeu	r2,r7,16548 <__udivdi3+0x2d0>
   163c0:	00804034 	movhi	r2,256
   163c4:	10bfffc4 	addi	r2,r2,-1
   163c8:	11c0ee36 	bltu	r2,r7,16784 <__udivdi3+0x50c>
   163cc:	00800404 	movi	r2,16
   163d0:	3886d83a 	srl	r3,r7,r2
   163d4:	01020034 	movhi	r4,2048
   163d8:	21009b44 	addi	r4,r4,621
   163dc:	20c7883a 	add	r3,r4,r3
   163e0:	18c00003 	ldbu	r3,0(r3)
   163e4:	05400804 	movi	r21,32
   163e8:	1885883a 	add	r2,r3,r2
   163ec:	a8abc83a 	sub	r21,r21,r2
   163f0:	a800621e 	bne	r21,zero,1657c <__udivdi3+0x304>
   163f4:	3c00e936 	bltu	r7,r16,1679c <__udivdi3+0x524>
   163f8:	9985403a 	cmpgeu	r2,r19,r6
   163fc:	0007883a 	mov	r3,zero
   16400:	00004506 	br	16518 <__udivdi3+0x2a0>
   16404:	3000041e 	bne	r6,zero,16418 <__udivdi3+0x1a0>
   16408:	000b883a 	mov	r5,zero
   1640c:	01000044 	movi	r4,1
   16410:	00094440 	call	9444 <__udivsi3>
   16414:	1023883a 	mov	r17,r2
   16418:	00bfffd4 	movui	r2,65535
   1641c:	14404e2e 	bgeu	r2,r17,16558 <__udivdi3+0x2e0>
   16420:	00804034 	movhi	r2,256
   16424:	10bfffc4 	addi	r2,r2,-1
   16428:	1440d836 	bltu	r2,r17,1678c <__udivdi3+0x514>
   1642c:	00800404 	movi	r2,16
   16430:	8886d83a 	srl	r3,r17,r2
   16434:	01020034 	movhi	r4,2048
   16438:	21009b44 	addi	r4,r4,621
   1643c:	20c7883a 	add	r3,r4,r3
   16440:	18c00003 	ldbu	r3,0(r3)
   16444:	1885883a 	add	r2,r3,r2
   16448:	00c00804 	movi	r3,32
   1644c:	1887c83a 	sub	r3,r3,r2
   16450:	18008f1e 	bne	r3,zero,16690 <__udivdi3+0x418>
   16454:	882ad43a 	srli	r21,r17,16
   16458:	8461c83a 	sub	r16,r16,r17
   1645c:	8d3fffcc 	andi	r20,r17,65535
   16460:	00c00044 	movi	r3,1
   16464:	8009883a 	mov	r4,r16
   16468:	a80b883a 	mov	r5,r21
   1646c:	d8c00015 	stw	r3,0(sp)
   16470:	00094a80 	call	94a8 <__umodsi3>
   16474:	8009883a 	mov	r4,r16
   16478:	a80b883a 	mov	r5,r21
   1647c:	1027883a 	mov	r19,r2
   16480:	00094440 	call	9444 <__udivsi3>
   16484:	9826943a 	slli	r19,r19,16
   16488:	9008d43a 	srli	r4,r18,16
   1648c:	1521383a 	mul	r16,r2,r20
   16490:	102d883a 	mov	r22,r2
   16494:	24c8b03a 	or	r4,r4,r19
   16498:	d8c00017 	ldw	r3,0(sp)
   1649c:	2400052e 	bgeu	r4,r16,164b4 <__udivdi3+0x23c>
   164a0:	2449883a 	add	r4,r4,r17
   164a4:	b0bfffc4 	addi	r2,r22,-1
   164a8:	24400136 	bltu	r4,r17,164b0 <__udivdi3+0x238>
   164ac:	2400ca36 	bltu	r4,r16,167d8 <__udivdi3+0x560>
   164b0:	102d883a 	mov	r22,r2
   164b4:	2421c83a 	sub	r16,r4,r16
   164b8:	a80b883a 	mov	r5,r21
   164bc:	8009883a 	mov	r4,r16
   164c0:	d8c00015 	stw	r3,0(sp)
   164c4:	00094a80 	call	94a8 <__umodsi3>
   164c8:	1027883a 	mov	r19,r2
   164cc:	a80b883a 	mov	r5,r21
   164d0:	8009883a 	mov	r4,r16
   164d4:	00094440 	call	9444 <__udivsi3>
   164d8:	9826943a 	slli	r19,r19,16
   164dc:	1529383a 	mul	r20,r2,r20
   164e0:	94bfffcc 	andi	r18,r18,65535
   164e4:	94e4b03a 	or	r18,r18,r19
   164e8:	d8c00017 	ldw	r3,0(sp)
   164ec:	9500052e 	bgeu	r18,r20,16504 <__udivdi3+0x28c>
   164f0:	8ca5883a 	add	r18,r17,r18
   164f4:	113fffc4 	addi	r4,r2,-1
   164f8:	94409736 	bltu	r18,r17,16758 <__udivdi3+0x4e0>
   164fc:	9500962e 	bgeu	r18,r20,16758 <__udivdi3+0x4e0>
   16500:	10bfff84 	addi	r2,r2,-2
   16504:	b00c943a 	slli	r6,r22,16
   16508:	3084b03a 	or	r2,r6,r2
   1650c:	00000206 	br	16518 <__udivdi3+0x2a0>
   16510:	0007883a 	mov	r3,zero
   16514:	0005883a 	mov	r2,zero
   16518:	dfc00a17 	ldw	ra,40(sp)
   1651c:	df000917 	ldw	fp,36(sp)
   16520:	ddc00817 	ldw	r23,32(sp)
   16524:	dd800717 	ldw	r22,28(sp)
   16528:	dd400617 	ldw	r21,24(sp)
   1652c:	dd000517 	ldw	r20,20(sp)
   16530:	dcc00417 	ldw	r19,16(sp)
   16534:	dc800317 	ldw	r18,12(sp)
   16538:	dc400217 	ldw	r17,8(sp)
   1653c:	dc000117 	ldw	r16,4(sp)
   16540:	dec00b04 	addi	sp,sp,44
   16544:	f800283a 	ret
   16548:	00803fc4 	movi	r2,255
   1654c:	11c5803a 	cmpltu	r2,r2,r7
   16550:	100490fa 	slli	r2,r2,3
   16554:	003f9e06 	br	163d0 <__alt_data_end+0xf00163d0>
   16558:	00803fc4 	movi	r2,255
   1655c:	1445803a 	cmpltu	r2,r2,r17
   16560:	100490fa 	slli	r2,r2,3
   16564:	003fb206 	br	16430 <__alt_data_end+0xf0016430>
   16568:	00804034 	movhi	r2,256
   1656c:	10bfffc4 	addi	r2,r2,-1
   16570:	11808836 	bltu	r2,r6,16794 <__udivdi3+0x51c>
   16574:	00800404 	movi	r2,16
   16578:	003f5606 	br	162d4 <__alt_data_end+0xf00162d4>
   1657c:	30aed83a 	srl	r23,r6,r2
   16580:	3d4e983a 	sll	r7,r7,r21
   16584:	80acd83a 	srl	r22,r16,r2
   16588:	9884d83a 	srl	r2,r19,r2
   1658c:	3deeb03a 	or	r23,r7,r23
   16590:	b824d43a 	srli	r18,r23,16
   16594:	8560983a 	sll	r16,r16,r21
   16598:	b009883a 	mov	r4,r22
   1659c:	900b883a 	mov	r5,r18
   165a0:	3568983a 	sll	r20,r6,r21
   165a4:	1420b03a 	or	r16,r2,r16
   165a8:	00094a80 	call	94a8 <__umodsi3>
   165ac:	b009883a 	mov	r4,r22
   165b0:	900b883a 	mov	r5,r18
   165b4:	1023883a 	mov	r17,r2
   165b8:	00094440 	call	9444 <__udivsi3>
   165bc:	8808943a 	slli	r4,r17,16
   165c0:	bf3fffcc 	andi	fp,r23,65535
   165c4:	8006d43a 	srli	r3,r16,16
   165c8:	e0a3383a 	mul	r17,fp,r2
   165cc:	100d883a 	mov	r6,r2
   165d0:	1906b03a 	or	r3,r3,r4
   165d4:	1c40042e 	bgeu	r3,r17,165e8 <__udivdi3+0x370>
   165d8:	1dc7883a 	add	r3,r3,r23
   165dc:	10bfffc4 	addi	r2,r2,-1
   165e0:	1dc0752e 	bgeu	r3,r23,167b8 <__udivdi3+0x540>
   165e4:	100d883a 	mov	r6,r2
   165e8:	1c63c83a 	sub	r17,r3,r17
   165ec:	900b883a 	mov	r5,r18
   165f0:	8809883a 	mov	r4,r17
   165f4:	d9800015 	stw	r6,0(sp)
   165f8:	00094a80 	call	94a8 <__umodsi3>
   165fc:	102d883a 	mov	r22,r2
   16600:	8809883a 	mov	r4,r17
   16604:	900b883a 	mov	r5,r18
   16608:	00094440 	call	9444 <__udivsi3>
   1660c:	b02c943a 	slli	r22,r22,16
   16610:	e089383a 	mul	r4,fp,r2
   16614:	843fffcc 	andi	r16,r16,65535
   16618:	85a0b03a 	or	r16,r16,r22
   1661c:	d9800017 	ldw	r6,0(sp)
   16620:	8100042e 	bgeu	r16,r4,16634 <__udivdi3+0x3bc>
   16624:	85e1883a 	add	r16,r16,r23
   16628:	10ffffc4 	addi	r3,r2,-1
   1662c:	85c05e2e 	bgeu	r16,r23,167a8 <__udivdi3+0x530>
   16630:	1805883a 	mov	r2,r3
   16634:	300c943a 	slli	r6,r6,16
   16638:	a17fffcc 	andi	r5,r20,65535
   1663c:	a028d43a 	srli	r20,r20,16
   16640:	3084b03a 	or	r2,r6,r2
   16644:	10ffffcc 	andi	r3,r2,65535
   16648:	100cd43a 	srli	r6,r2,16
   1664c:	194f383a 	mul	r7,r3,r5
   16650:	1d07383a 	mul	r3,r3,r20
   16654:	314b383a 	mul	r5,r6,r5
   16658:	3810d43a 	srli	r8,r7,16
   1665c:	8121c83a 	sub	r16,r16,r4
   16660:	1947883a 	add	r3,r3,r5
   16664:	40c7883a 	add	r3,r8,r3
   16668:	350d383a 	mul	r6,r6,r20
   1666c:	1940022e 	bgeu	r3,r5,16678 <__udivdi3+0x400>
   16670:	01000074 	movhi	r4,1
   16674:	310d883a 	add	r6,r6,r4
   16678:	1828d43a 	srli	r20,r3,16
   1667c:	a18d883a 	add	r6,r20,r6
   16680:	81803e36 	bltu	r16,r6,1677c <__udivdi3+0x504>
   16684:	81803826 	beq	r16,r6,16768 <__udivdi3+0x4f0>
   16688:	0007883a 	mov	r3,zero
   1668c:	003fa206 	br	16518 <__alt_data_end+0xf0016518>
   16690:	88e2983a 	sll	r17,r17,r3
   16694:	80a8d83a 	srl	r20,r16,r2
   16698:	80e0983a 	sll	r16,r16,r3
   1669c:	882ad43a 	srli	r21,r17,16
   166a0:	9884d83a 	srl	r2,r19,r2
   166a4:	a009883a 	mov	r4,r20
   166a8:	a80b883a 	mov	r5,r21
   166ac:	142eb03a 	or	r23,r2,r16
   166b0:	98e4983a 	sll	r18,r19,r3
   166b4:	00094a80 	call	94a8 <__umodsi3>
   166b8:	a009883a 	mov	r4,r20
   166bc:	a80b883a 	mov	r5,r21
   166c0:	1021883a 	mov	r16,r2
   166c4:	00094440 	call	9444 <__udivsi3>
   166c8:	1039883a 	mov	fp,r2
   166cc:	8d3fffcc 	andi	r20,r17,65535
   166d0:	8020943a 	slli	r16,r16,16
   166d4:	b804d43a 	srli	r2,r23,16
   166d8:	a72d383a 	mul	r22,r20,fp
   166dc:	1404b03a 	or	r2,r2,r16
   166e0:	1580062e 	bgeu	r2,r22,166fc <__udivdi3+0x484>
   166e4:	1445883a 	add	r2,r2,r17
   166e8:	e0ffffc4 	addi	r3,fp,-1
   166ec:	14403836 	bltu	r2,r17,167d0 <__udivdi3+0x558>
   166f0:	1580372e 	bgeu	r2,r22,167d0 <__udivdi3+0x558>
   166f4:	e73fff84 	addi	fp,fp,-2
   166f8:	1445883a 	add	r2,r2,r17
   166fc:	15adc83a 	sub	r22,r2,r22
   16700:	a80b883a 	mov	r5,r21
   16704:	b009883a 	mov	r4,r22
   16708:	00094a80 	call	94a8 <__umodsi3>
   1670c:	1027883a 	mov	r19,r2
   16710:	b009883a 	mov	r4,r22
   16714:	a80b883a 	mov	r5,r21
   16718:	00094440 	call	9444 <__udivsi3>
   1671c:	9826943a 	slli	r19,r19,16
   16720:	a0a1383a 	mul	r16,r20,r2
   16724:	b93fffcc 	andi	r4,r23,65535
   16728:	24c8b03a 	or	r4,r4,r19
   1672c:	2400062e 	bgeu	r4,r16,16748 <__udivdi3+0x4d0>
   16730:	2449883a 	add	r4,r4,r17
   16734:	10ffffc4 	addi	r3,r2,-1
   16738:	24402336 	bltu	r4,r17,167c8 <__udivdi3+0x550>
   1673c:	2400222e 	bgeu	r4,r16,167c8 <__udivdi3+0x550>
   16740:	10bfff84 	addi	r2,r2,-2
   16744:	2449883a 	add	r4,r4,r17
   16748:	e038943a 	slli	fp,fp,16
   1674c:	2421c83a 	sub	r16,r4,r16
   16750:	e086b03a 	or	r3,fp,r2
   16754:	003f4306 	br	16464 <__alt_data_end+0xf0016464>
   16758:	2005883a 	mov	r2,r4
   1675c:	003f6906 	br	16504 <__alt_data_end+0xf0016504>
   16760:	1805883a 	mov	r2,r3
   16764:	003f0f06 	br	163a4 <__alt_data_end+0xf00163a4>
   16768:	1806943a 	slli	r3,r3,16
   1676c:	9d66983a 	sll	r19,r19,r21
   16770:	39ffffcc 	andi	r7,r7,65535
   16774:	19c7883a 	add	r3,r3,r7
   16778:	98ffc32e 	bgeu	r19,r3,16688 <__alt_data_end+0xf0016688>
   1677c:	10bfffc4 	addi	r2,r2,-1
   16780:	003fc106 	br	16688 <__alt_data_end+0xf0016688>
   16784:	00800604 	movi	r2,24
   16788:	003f1106 	br	163d0 <__alt_data_end+0xf00163d0>
   1678c:	00800604 	movi	r2,24
   16790:	003f2706 	br	16430 <__alt_data_end+0xf0016430>
   16794:	00800604 	movi	r2,24
   16798:	003ece06 	br	162d4 <__alt_data_end+0xf00162d4>
   1679c:	0007883a 	mov	r3,zero
   167a0:	00800044 	movi	r2,1
   167a4:	003f5c06 	br	16518 <__alt_data_end+0xf0016518>
   167a8:	813fa12e 	bgeu	r16,r4,16630 <__alt_data_end+0xf0016630>
   167ac:	10bfff84 	addi	r2,r2,-2
   167b0:	85e1883a 	add	r16,r16,r23
   167b4:	003f9f06 	br	16634 <__alt_data_end+0xf0016634>
   167b8:	1c7f8a2e 	bgeu	r3,r17,165e4 <__alt_data_end+0xf00165e4>
   167bc:	31bfff84 	addi	r6,r6,-2
   167c0:	1dc7883a 	add	r3,r3,r23
   167c4:	003f8806 	br	165e8 <__alt_data_end+0xf00165e8>
   167c8:	1805883a 	mov	r2,r3
   167cc:	003fde06 	br	16748 <__alt_data_end+0xf0016748>
   167d0:	1839883a 	mov	fp,r3
   167d4:	003fc906 	br	166fc <__alt_data_end+0xf00166fc>
   167d8:	b5bfff84 	addi	r22,r22,-2
   167dc:	2449883a 	add	r4,r4,r17
   167e0:	003f3406 	br	164b4 <__alt_data_end+0xf00164b4>
   167e4:	b5bfff84 	addi	r22,r22,-2
   167e8:	1445883a 	add	r2,r2,r17
   167ec:	003edb06 	br	1635c <__alt_data_end+0xf001635c>

000167f0 <__umoddi3>:
   167f0:	defff404 	addi	sp,sp,-48
   167f4:	df000a15 	stw	fp,40(sp)
   167f8:	dc400315 	stw	r17,12(sp)
   167fc:	dc000215 	stw	r16,8(sp)
   16800:	dfc00b15 	stw	ra,44(sp)
   16804:	ddc00915 	stw	r23,36(sp)
   16808:	dd800815 	stw	r22,32(sp)
   1680c:	dd400715 	stw	r21,28(sp)
   16810:	dd000615 	stw	r20,24(sp)
   16814:	dcc00515 	stw	r19,20(sp)
   16818:	dc800415 	stw	r18,16(sp)
   1681c:	2021883a 	mov	r16,r4
   16820:	2823883a 	mov	r17,r5
   16824:	2839883a 	mov	fp,r5
   16828:	38003c1e 	bne	r7,zero,1691c <__umoddi3+0x12c>
   1682c:	3027883a 	mov	r19,r6
   16830:	2029883a 	mov	r20,r4
   16834:	2980512e 	bgeu	r5,r6,1697c <__umoddi3+0x18c>
   16838:	00bfffd4 	movui	r2,65535
   1683c:	11809a36 	bltu	r2,r6,16aa8 <__umoddi3+0x2b8>
   16840:	01003fc4 	movi	r4,255
   16844:	2189803a 	cmpltu	r4,r4,r6
   16848:	200890fa 	slli	r4,r4,3
   1684c:	3104d83a 	srl	r2,r6,r4
   16850:	00c20034 	movhi	r3,2048
   16854:	18c09b44 	addi	r3,r3,621
   16858:	1885883a 	add	r2,r3,r2
   1685c:	10c00003 	ldbu	r3,0(r2)
   16860:	00800804 	movi	r2,32
   16864:	1909883a 	add	r4,r3,r4
   16868:	1125c83a 	sub	r18,r2,r4
   1686c:	90000526 	beq	r18,zero,16884 <__umoddi3+0x94>
   16870:	8ca2983a 	sll	r17,r17,r18
   16874:	8108d83a 	srl	r4,r16,r4
   16878:	34a6983a 	sll	r19,r6,r18
   1687c:	84a8983a 	sll	r20,r16,r18
   16880:	2478b03a 	or	fp,r4,r17
   16884:	982ed43a 	srli	r23,r19,16
   16888:	e009883a 	mov	r4,fp
   1688c:	9dbfffcc 	andi	r22,r19,65535
   16890:	b80b883a 	mov	r5,r23
   16894:	00094a80 	call	94a8 <__umodsi3>
   16898:	e009883a 	mov	r4,fp
   1689c:	b80b883a 	mov	r5,r23
   168a0:	102b883a 	mov	r21,r2
   168a4:	00094440 	call	9444 <__udivsi3>
   168a8:	a806943a 	slli	r3,r21,16
   168ac:	a008d43a 	srli	r4,r20,16
   168b0:	b085383a 	mul	r2,r22,r2
   168b4:	20c8b03a 	or	r4,r4,r3
   168b8:	2080032e 	bgeu	r4,r2,168c8 <__umoddi3+0xd8>
   168bc:	24c9883a 	add	r4,r4,r19
   168c0:	24c00136 	bltu	r4,r19,168c8 <__umoddi3+0xd8>
   168c4:	20811036 	bltu	r4,r2,16d08 <__umoddi3+0x518>
   168c8:	20abc83a 	sub	r21,r4,r2
   168cc:	b80b883a 	mov	r5,r23
   168d0:	a809883a 	mov	r4,r21
   168d4:	00094a80 	call	94a8 <__umodsi3>
   168d8:	1023883a 	mov	r17,r2
   168dc:	b80b883a 	mov	r5,r23
   168e0:	a809883a 	mov	r4,r21
   168e4:	00094440 	call	9444 <__udivsi3>
   168e8:	8822943a 	slli	r17,r17,16
   168ec:	b085383a 	mul	r2,r22,r2
   168f0:	a0ffffcc 	andi	r3,r20,65535
   168f4:	1c46b03a 	or	r3,r3,r17
   168f8:	1880042e 	bgeu	r3,r2,1690c <__umoddi3+0x11c>
   168fc:	1cc7883a 	add	r3,r3,r19
   16900:	1cc00236 	bltu	r3,r19,1690c <__umoddi3+0x11c>
   16904:	1880012e 	bgeu	r3,r2,1690c <__umoddi3+0x11c>
   16908:	1cc7883a 	add	r3,r3,r19
   1690c:	1885c83a 	sub	r2,r3,r2
   16910:	1484d83a 	srl	r2,r2,r18
   16914:	0007883a 	mov	r3,zero
   16918:	00004f06 	br	16a58 <__umoddi3+0x268>
   1691c:	29c04c36 	bltu	r5,r7,16a50 <__umoddi3+0x260>
   16920:	00bfffd4 	movui	r2,65535
   16924:	11c0582e 	bgeu	r2,r7,16a88 <__umoddi3+0x298>
   16928:	00804034 	movhi	r2,256
   1692c:	10bfffc4 	addi	r2,r2,-1
   16930:	11c0e736 	bltu	r2,r7,16cd0 <__umoddi3+0x4e0>
   16934:	01000404 	movi	r4,16
   16938:	3904d83a 	srl	r2,r7,r4
   1693c:	00c20034 	movhi	r3,2048
   16940:	18c09b44 	addi	r3,r3,621
   16944:	1885883a 	add	r2,r3,r2
   16948:	14c00003 	ldbu	r19,0(r2)
   1694c:	00c00804 	movi	r3,32
   16950:	9927883a 	add	r19,r19,r4
   16954:	1ce9c83a 	sub	r20,r3,r19
   16958:	a000581e 	bne	r20,zero,16abc <__umoddi3+0x2cc>
   1695c:	3c400136 	bltu	r7,r17,16964 <__umoddi3+0x174>
   16960:	8180eb36 	bltu	r16,r6,16d10 <__umoddi3+0x520>
   16964:	8185c83a 	sub	r2,r16,r6
   16968:	89e3c83a 	sub	r17,r17,r7
   1696c:	8089803a 	cmpltu	r4,r16,r2
   16970:	8939c83a 	sub	fp,r17,r4
   16974:	e007883a 	mov	r3,fp
   16978:	00003706 	br	16a58 <__umoddi3+0x268>
   1697c:	3000041e 	bne	r6,zero,16990 <__umoddi3+0x1a0>
   16980:	000b883a 	mov	r5,zero
   16984:	01000044 	movi	r4,1
   16988:	00094440 	call	9444 <__udivsi3>
   1698c:	1027883a 	mov	r19,r2
   16990:	00bfffd4 	movui	r2,65535
   16994:	14c0402e 	bgeu	r2,r19,16a98 <__umoddi3+0x2a8>
   16998:	00804034 	movhi	r2,256
   1699c:	10bfffc4 	addi	r2,r2,-1
   169a0:	14c0cd36 	bltu	r2,r19,16cd8 <__umoddi3+0x4e8>
   169a4:	00800404 	movi	r2,16
   169a8:	9886d83a 	srl	r3,r19,r2
   169ac:	01020034 	movhi	r4,2048
   169b0:	21009b44 	addi	r4,r4,621
   169b4:	20c7883a 	add	r3,r4,r3
   169b8:	18c00003 	ldbu	r3,0(r3)
   169bc:	1887883a 	add	r3,r3,r2
   169c0:	00800804 	movi	r2,32
   169c4:	10e5c83a 	sub	r18,r2,r3
   169c8:	9000901e 	bne	r18,zero,16c0c <__umoddi3+0x41c>
   169cc:	982cd43a 	srli	r22,r19,16
   169d0:	8ce3c83a 	sub	r17,r17,r19
   169d4:	9d7fffcc 	andi	r21,r19,65535
   169d8:	b00b883a 	mov	r5,r22
   169dc:	8809883a 	mov	r4,r17
   169e0:	00094a80 	call	94a8 <__umodsi3>
   169e4:	8809883a 	mov	r4,r17
   169e8:	b00b883a 	mov	r5,r22
   169ec:	1021883a 	mov	r16,r2
   169f0:	00094440 	call	9444 <__udivsi3>
   169f4:	8006943a 	slli	r3,r16,16
   169f8:	a008d43a 	srli	r4,r20,16
   169fc:	1545383a 	mul	r2,r2,r21
   16a00:	20c8b03a 	or	r4,r4,r3
   16a04:	2080042e 	bgeu	r4,r2,16a18 <__umoddi3+0x228>
   16a08:	24c9883a 	add	r4,r4,r19
   16a0c:	24c00236 	bltu	r4,r19,16a18 <__umoddi3+0x228>
   16a10:	2080012e 	bgeu	r4,r2,16a18 <__umoddi3+0x228>
   16a14:	24c9883a 	add	r4,r4,r19
   16a18:	20a1c83a 	sub	r16,r4,r2
   16a1c:	b00b883a 	mov	r5,r22
   16a20:	8009883a 	mov	r4,r16
   16a24:	00094a80 	call	94a8 <__umodsi3>
   16a28:	1023883a 	mov	r17,r2
   16a2c:	b00b883a 	mov	r5,r22
   16a30:	8009883a 	mov	r4,r16
   16a34:	00094440 	call	9444 <__udivsi3>
   16a38:	8822943a 	slli	r17,r17,16
   16a3c:	1545383a 	mul	r2,r2,r21
   16a40:	a53fffcc 	andi	r20,r20,65535
   16a44:	a446b03a 	or	r3,r20,r17
   16a48:	18bfb02e 	bgeu	r3,r2,1690c <__alt_data_end+0xf001690c>
   16a4c:	003fab06 	br	168fc <__alt_data_end+0xf00168fc>
   16a50:	2005883a 	mov	r2,r4
   16a54:	2807883a 	mov	r3,r5
   16a58:	dfc00b17 	ldw	ra,44(sp)
   16a5c:	df000a17 	ldw	fp,40(sp)
   16a60:	ddc00917 	ldw	r23,36(sp)
   16a64:	dd800817 	ldw	r22,32(sp)
   16a68:	dd400717 	ldw	r21,28(sp)
   16a6c:	dd000617 	ldw	r20,24(sp)
   16a70:	dcc00517 	ldw	r19,20(sp)
   16a74:	dc800417 	ldw	r18,16(sp)
   16a78:	dc400317 	ldw	r17,12(sp)
   16a7c:	dc000217 	ldw	r16,8(sp)
   16a80:	dec00c04 	addi	sp,sp,48
   16a84:	f800283a 	ret
   16a88:	04c03fc4 	movi	r19,255
   16a8c:	99c9803a 	cmpltu	r4,r19,r7
   16a90:	200890fa 	slli	r4,r4,3
   16a94:	003fa806 	br	16938 <__alt_data_end+0xf0016938>
   16a98:	00803fc4 	movi	r2,255
   16a9c:	14c5803a 	cmpltu	r2,r2,r19
   16aa0:	100490fa 	slli	r2,r2,3
   16aa4:	003fc006 	br	169a8 <__alt_data_end+0xf00169a8>
   16aa8:	00804034 	movhi	r2,256
   16aac:	10bfffc4 	addi	r2,r2,-1
   16ab0:	11808b36 	bltu	r2,r6,16ce0 <__umoddi3+0x4f0>
   16ab4:	01000404 	movi	r4,16
   16ab8:	003f6406 	br	1684c <__alt_data_end+0xf001684c>
   16abc:	34c4d83a 	srl	r2,r6,r19
   16ac0:	3d0e983a 	sll	r7,r7,r20
   16ac4:	8cf8d83a 	srl	fp,r17,r19
   16ac8:	8d10983a 	sll	r8,r17,r20
   16acc:	38aab03a 	or	r21,r7,r2
   16ad0:	a82cd43a 	srli	r22,r21,16
   16ad4:	84e2d83a 	srl	r17,r16,r19
   16ad8:	e009883a 	mov	r4,fp
   16adc:	b00b883a 	mov	r5,r22
   16ae0:	8a22b03a 	or	r17,r17,r8
   16ae4:	3524983a 	sll	r18,r6,r20
   16ae8:	00094a80 	call	94a8 <__umodsi3>
   16aec:	e009883a 	mov	r4,fp
   16af0:	b00b883a 	mov	r5,r22
   16af4:	102f883a 	mov	r23,r2
   16af8:	00094440 	call	9444 <__udivsi3>
   16afc:	100d883a 	mov	r6,r2
   16b00:	b808943a 	slli	r4,r23,16
   16b04:	aa3fffcc 	andi	r8,r21,65535
   16b08:	8804d43a 	srli	r2,r17,16
   16b0c:	41af383a 	mul	r23,r8,r6
   16b10:	8520983a 	sll	r16,r16,r20
   16b14:	1104b03a 	or	r2,r2,r4
   16b18:	15c0042e 	bgeu	r2,r23,16b2c <__umoddi3+0x33c>
   16b1c:	1545883a 	add	r2,r2,r21
   16b20:	30ffffc4 	addi	r3,r6,-1
   16b24:	1540742e 	bgeu	r2,r21,16cf8 <__umoddi3+0x508>
   16b28:	180d883a 	mov	r6,r3
   16b2c:	15efc83a 	sub	r23,r2,r23
   16b30:	b00b883a 	mov	r5,r22
   16b34:	b809883a 	mov	r4,r23
   16b38:	d9800115 	stw	r6,4(sp)
   16b3c:	da000015 	stw	r8,0(sp)
   16b40:	00094a80 	call	94a8 <__umodsi3>
   16b44:	b00b883a 	mov	r5,r22
   16b48:	b809883a 	mov	r4,r23
   16b4c:	1039883a 	mov	fp,r2
   16b50:	00094440 	call	9444 <__udivsi3>
   16b54:	da000017 	ldw	r8,0(sp)
   16b58:	e038943a 	slli	fp,fp,16
   16b5c:	100b883a 	mov	r5,r2
   16b60:	4089383a 	mul	r4,r8,r2
   16b64:	8a3fffcc 	andi	r8,r17,65535
   16b68:	4710b03a 	or	r8,r8,fp
   16b6c:	d9800117 	ldw	r6,4(sp)
   16b70:	4100042e 	bgeu	r8,r4,16b84 <__umoddi3+0x394>
   16b74:	4551883a 	add	r8,r8,r21
   16b78:	10bfffc4 	addi	r2,r2,-1
   16b7c:	45405a2e 	bgeu	r8,r21,16ce8 <__umoddi3+0x4f8>
   16b80:	100b883a 	mov	r5,r2
   16b84:	300c943a 	slli	r6,r6,16
   16b88:	91ffffcc 	andi	r7,r18,65535
   16b8c:	9004d43a 	srli	r2,r18,16
   16b90:	314cb03a 	or	r6,r6,r5
   16b94:	317fffcc 	andi	r5,r6,65535
   16b98:	300cd43a 	srli	r6,r6,16
   16b9c:	29d3383a 	mul	r9,r5,r7
   16ba0:	288b383a 	mul	r5,r5,r2
   16ba4:	31cf383a 	mul	r7,r6,r7
   16ba8:	4806d43a 	srli	r3,r9,16
   16bac:	4111c83a 	sub	r8,r8,r4
   16bb0:	29cb883a 	add	r5,r5,r7
   16bb4:	194b883a 	add	r5,r3,r5
   16bb8:	3085383a 	mul	r2,r6,r2
   16bbc:	29c0022e 	bgeu	r5,r7,16bc8 <__umoddi3+0x3d8>
   16bc0:	00c00074 	movhi	r3,1
   16bc4:	10c5883a 	add	r2,r2,r3
   16bc8:	2808d43a 	srli	r4,r5,16
   16bcc:	280a943a 	slli	r5,r5,16
   16bd0:	4a7fffcc 	andi	r9,r9,65535
   16bd4:	2085883a 	add	r2,r4,r2
   16bd8:	2a4b883a 	add	r5,r5,r9
   16bdc:	40803636 	bltu	r8,r2,16cb8 <__umoddi3+0x4c8>
   16be0:	40804d26 	beq	r8,r2,16d18 <__umoddi3+0x528>
   16be4:	4089c83a 	sub	r4,r8,r2
   16be8:	280f883a 	mov	r7,r5
   16bec:	81cfc83a 	sub	r7,r16,r7
   16bf0:	81c7803a 	cmpltu	r3,r16,r7
   16bf4:	20c7c83a 	sub	r3,r4,r3
   16bf8:	1cc4983a 	sll	r2,r3,r19
   16bfc:	3d0ed83a 	srl	r7,r7,r20
   16c00:	1d06d83a 	srl	r3,r3,r20
   16c04:	11c4b03a 	or	r2,r2,r7
   16c08:	003f9306 	br	16a58 <__alt_data_end+0xf0016a58>
   16c0c:	9ca6983a 	sll	r19,r19,r18
   16c10:	88e8d83a 	srl	r20,r17,r3
   16c14:	80c4d83a 	srl	r2,r16,r3
   16c18:	982cd43a 	srli	r22,r19,16
   16c1c:	8ca2983a 	sll	r17,r17,r18
   16c20:	a009883a 	mov	r4,r20
   16c24:	b00b883a 	mov	r5,r22
   16c28:	1478b03a 	or	fp,r2,r17
   16c2c:	00094a80 	call	94a8 <__umodsi3>
   16c30:	a009883a 	mov	r4,r20
   16c34:	b00b883a 	mov	r5,r22
   16c38:	1023883a 	mov	r17,r2
   16c3c:	00094440 	call	9444 <__udivsi3>
   16c40:	9d7fffcc 	andi	r21,r19,65535
   16c44:	880a943a 	slli	r5,r17,16
   16c48:	e008d43a 	srli	r4,fp,16
   16c4c:	a885383a 	mul	r2,r21,r2
   16c50:	84a8983a 	sll	r20,r16,r18
   16c54:	2148b03a 	or	r4,r4,r5
   16c58:	2080042e 	bgeu	r4,r2,16c6c <__umoddi3+0x47c>
   16c5c:	24c9883a 	add	r4,r4,r19
   16c60:	24c00236 	bltu	r4,r19,16c6c <__umoddi3+0x47c>
   16c64:	2080012e 	bgeu	r4,r2,16c6c <__umoddi3+0x47c>
   16c68:	24c9883a 	add	r4,r4,r19
   16c6c:	20a3c83a 	sub	r17,r4,r2
   16c70:	b00b883a 	mov	r5,r22
   16c74:	8809883a 	mov	r4,r17
   16c78:	00094a80 	call	94a8 <__umodsi3>
   16c7c:	102f883a 	mov	r23,r2
   16c80:	8809883a 	mov	r4,r17
   16c84:	b00b883a 	mov	r5,r22
   16c88:	00094440 	call	9444 <__udivsi3>
   16c8c:	b82e943a 	slli	r23,r23,16
   16c90:	a885383a 	mul	r2,r21,r2
   16c94:	e13fffcc 	andi	r4,fp,65535
   16c98:	25c8b03a 	or	r4,r4,r23
   16c9c:	2080042e 	bgeu	r4,r2,16cb0 <__umoddi3+0x4c0>
   16ca0:	24c9883a 	add	r4,r4,r19
   16ca4:	24c00236 	bltu	r4,r19,16cb0 <__umoddi3+0x4c0>
   16ca8:	2080012e 	bgeu	r4,r2,16cb0 <__umoddi3+0x4c0>
   16cac:	24c9883a 	add	r4,r4,r19
   16cb0:	20a3c83a 	sub	r17,r4,r2
   16cb4:	003f4806 	br	169d8 <__alt_data_end+0xf00169d8>
   16cb8:	2c8fc83a 	sub	r7,r5,r18
   16cbc:	1545c83a 	sub	r2,r2,r21
   16cc0:	29cb803a 	cmpltu	r5,r5,r7
   16cc4:	1145c83a 	sub	r2,r2,r5
   16cc8:	4089c83a 	sub	r4,r8,r2
   16ccc:	003fc706 	br	16bec <__alt_data_end+0xf0016bec>
   16cd0:	01000604 	movi	r4,24
   16cd4:	003f1806 	br	16938 <__alt_data_end+0xf0016938>
   16cd8:	00800604 	movi	r2,24
   16cdc:	003f3206 	br	169a8 <__alt_data_end+0xf00169a8>
   16ce0:	01000604 	movi	r4,24
   16ce4:	003ed906 	br	1684c <__alt_data_end+0xf001684c>
   16ce8:	413fa52e 	bgeu	r8,r4,16b80 <__alt_data_end+0xf0016b80>
   16cec:	297fff84 	addi	r5,r5,-2
   16cf0:	4551883a 	add	r8,r8,r21
   16cf4:	003fa306 	br	16b84 <__alt_data_end+0xf0016b84>
   16cf8:	15ff8b2e 	bgeu	r2,r23,16b28 <__alt_data_end+0xf0016b28>
   16cfc:	31bfff84 	addi	r6,r6,-2
   16d00:	1545883a 	add	r2,r2,r21
   16d04:	003f8906 	br	16b2c <__alt_data_end+0xf0016b2c>
   16d08:	24c9883a 	add	r4,r4,r19
   16d0c:	003eee06 	br	168c8 <__alt_data_end+0xf00168c8>
   16d10:	8005883a 	mov	r2,r16
   16d14:	003f1706 	br	16974 <__alt_data_end+0xf0016974>
   16d18:	817fe736 	bltu	r16,r5,16cb8 <__alt_data_end+0xf0016cb8>
   16d1c:	280f883a 	mov	r7,r5
   16d20:	0009883a 	mov	r4,zero
   16d24:	003fb106 	br	16bec <__alt_data_end+0xf0016bec>

00016d28 <__adddf3>:
   16d28:	02c00434 	movhi	r11,16
   16d2c:	5affffc4 	addi	r11,r11,-1
   16d30:	2806d7fa 	srli	r3,r5,31
   16d34:	2ad4703a 	and	r10,r5,r11
   16d38:	3ad2703a 	and	r9,r7,r11
   16d3c:	3804d53a 	srli	r2,r7,20
   16d40:	3018d77a 	srli	r12,r6,29
   16d44:	280ad53a 	srli	r5,r5,20
   16d48:	501490fa 	slli	r10,r10,3
   16d4c:	2010d77a 	srli	r8,r4,29
   16d50:	481290fa 	slli	r9,r9,3
   16d54:	380ed7fa 	srli	r7,r7,31
   16d58:	defffb04 	addi	sp,sp,-20
   16d5c:	dc800215 	stw	r18,8(sp)
   16d60:	dc400115 	stw	r17,4(sp)
   16d64:	dc000015 	stw	r16,0(sp)
   16d68:	dfc00415 	stw	ra,16(sp)
   16d6c:	dcc00315 	stw	r19,12(sp)
   16d70:	1c803fcc 	andi	r18,r3,255
   16d74:	2c01ffcc 	andi	r16,r5,2047
   16d78:	5210b03a 	or	r8,r10,r8
   16d7c:	202290fa 	slli	r17,r4,3
   16d80:	1081ffcc 	andi	r2,r2,2047
   16d84:	4b12b03a 	or	r9,r9,r12
   16d88:	300c90fa 	slli	r6,r6,3
   16d8c:	91c07526 	beq	r18,r7,16f64 <__adddf3+0x23c>
   16d90:	8087c83a 	sub	r3,r16,r2
   16d94:	00c0ab0e 	bge	zero,r3,17044 <__adddf3+0x31c>
   16d98:	10002a1e 	bne	r2,zero,16e44 <__adddf3+0x11c>
   16d9c:	4984b03a 	or	r2,r9,r6
   16da0:	1000961e 	bne	r2,zero,16ffc <__adddf3+0x2d4>
   16da4:	888001cc 	andi	r2,r17,7
   16da8:	10000726 	beq	r2,zero,16dc8 <__adddf3+0xa0>
   16dac:	888003cc 	andi	r2,r17,15
   16db0:	00c00104 	movi	r3,4
   16db4:	10c00426 	beq	r2,r3,16dc8 <__adddf3+0xa0>
   16db8:	88c7883a 	add	r3,r17,r3
   16dbc:	1c63803a 	cmpltu	r17,r3,r17
   16dc0:	4451883a 	add	r8,r8,r17
   16dc4:	1823883a 	mov	r17,r3
   16dc8:	4080202c 	andhi	r2,r8,128
   16dcc:	10005926 	beq	r2,zero,16f34 <__adddf3+0x20c>
   16dd0:	84000044 	addi	r16,r16,1
   16dd4:	0081ffc4 	movi	r2,2047
   16dd8:	8080ba26 	beq	r16,r2,170c4 <__adddf3+0x39c>
   16ddc:	00bfe034 	movhi	r2,65408
   16de0:	10bfffc4 	addi	r2,r2,-1
   16de4:	4090703a 	and	r8,r8,r2
   16de8:	4004977a 	slli	r2,r8,29
   16dec:	4010927a 	slli	r8,r8,9
   16df0:	8822d0fa 	srli	r17,r17,3
   16df4:	8401ffcc 	andi	r16,r16,2047
   16df8:	4010d33a 	srli	r8,r8,12
   16dfc:	9007883a 	mov	r3,r18
   16e00:	1444b03a 	or	r2,r2,r17
   16e04:	8401ffcc 	andi	r16,r16,2047
   16e08:	8020953a 	slli	r16,r16,20
   16e0c:	18c03fcc 	andi	r3,r3,255
   16e10:	01000434 	movhi	r4,16
   16e14:	213fffc4 	addi	r4,r4,-1
   16e18:	180697fa 	slli	r3,r3,31
   16e1c:	4110703a 	and	r8,r8,r4
   16e20:	4410b03a 	or	r8,r8,r16
   16e24:	40c6b03a 	or	r3,r8,r3
   16e28:	dfc00417 	ldw	ra,16(sp)
   16e2c:	dcc00317 	ldw	r19,12(sp)
   16e30:	dc800217 	ldw	r18,8(sp)
   16e34:	dc400117 	ldw	r17,4(sp)
   16e38:	dc000017 	ldw	r16,0(sp)
   16e3c:	dec00504 	addi	sp,sp,20
   16e40:	f800283a 	ret
   16e44:	0081ffc4 	movi	r2,2047
   16e48:	80bfd626 	beq	r16,r2,16da4 <__alt_data_end+0xf0016da4>
   16e4c:	4a402034 	orhi	r9,r9,128
   16e50:	00800e04 	movi	r2,56
   16e54:	10c09f16 	blt	r2,r3,170d4 <__adddf3+0x3ac>
   16e58:	008007c4 	movi	r2,31
   16e5c:	10c0c216 	blt	r2,r3,17168 <__adddf3+0x440>
   16e60:	00800804 	movi	r2,32
   16e64:	10c5c83a 	sub	r2,r2,r3
   16e68:	488a983a 	sll	r5,r9,r2
   16e6c:	30c8d83a 	srl	r4,r6,r3
   16e70:	3084983a 	sll	r2,r6,r2
   16e74:	48c6d83a 	srl	r3,r9,r3
   16e78:	290cb03a 	or	r6,r5,r4
   16e7c:	1004c03a 	cmpne	r2,r2,zero
   16e80:	308cb03a 	or	r6,r6,r2
   16e84:	898dc83a 	sub	r6,r17,r6
   16e88:	89a3803a 	cmpltu	r17,r17,r6
   16e8c:	40d1c83a 	sub	r8,r8,r3
   16e90:	4451c83a 	sub	r8,r8,r17
   16e94:	3023883a 	mov	r17,r6
   16e98:	4080202c 	andhi	r2,r8,128
   16e9c:	10002326 	beq	r2,zero,16f2c <__adddf3+0x204>
   16ea0:	04c02034 	movhi	r19,128
   16ea4:	9cffffc4 	addi	r19,r19,-1
   16ea8:	44e6703a 	and	r19,r8,r19
   16eac:	98007626 	beq	r19,zero,17088 <__adddf3+0x360>
   16eb0:	9809883a 	mov	r4,r19
   16eb4:	00092e80 	call	92e8 <__clzsi2>
   16eb8:	10fffe04 	addi	r3,r2,-8
   16ebc:	010007c4 	movi	r4,31
   16ec0:	20c07716 	blt	r4,r3,170a0 <__adddf3+0x378>
   16ec4:	00800804 	movi	r2,32
   16ec8:	10c5c83a 	sub	r2,r2,r3
   16ecc:	8884d83a 	srl	r2,r17,r2
   16ed0:	98d0983a 	sll	r8,r19,r3
   16ed4:	88e2983a 	sll	r17,r17,r3
   16ed8:	1204b03a 	or	r2,r2,r8
   16edc:	1c007416 	blt	r3,r16,170b0 <__adddf3+0x388>
   16ee0:	1c21c83a 	sub	r16,r3,r16
   16ee4:	82000044 	addi	r8,r16,1
   16ee8:	00c007c4 	movi	r3,31
   16eec:	1a009116 	blt	r3,r8,17134 <__adddf3+0x40c>
   16ef0:	00c00804 	movi	r3,32
   16ef4:	1a07c83a 	sub	r3,r3,r8
   16ef8:	8a08d83a 	srl	r4,r17,r8
   16efc:	88e2983a 	sll	r17,r17,r3
   16f00:	10c6983a 	sll	r3,r2,r3
   16f04:	1210d83a 	srl	r8,r2,r8
   16f08:	8804c03a 	cmpne	r2,r17,zero
   16f0c:	1906b03a 	or	r3,r3,r4
   16f10:	18a2b03a 	or	r17,r3,r2
   16f14:	0021883a 	mov	r16,zero
   16f18:	003fa206 	br	16da4 <__alt_data_end+0xf0016da4>
   16f1c:	1890b03a 	or	r8,r3,r2
   16f20:	40017d26 	beq	r8,zero,17518 <__adddf3+0x7f0>
   16f24:	1011883a 	mov	r8,r2
   16f28:	1823883a 	mov	r17,r3
   16f2c:	888001cc 	andi	r2,r17,7
   16f30:	103f9e1e 	bne	r2,zero,16dac <__alt_data_end+0xf0016dac>
   16f34:	4004977a 	slli	r2,r8,29
   16f38:	8822d0fa 	srli	r17,r17,3
   16f3c:	4010d0fa 	srli	r8,r8,3
   16f40:	9007883a 	mov	r3,r18
   16f44:	1444b03a 	or	r2,r2,r17
   16f48:	0101ffc4 	movi	r4,2047
   16f4c:	81002426 	beq	r16,r4,16fe0 <__adddf3+0x2b8>
   16f50:	8120703a 	and	r16,r16,r4
   16f54:	01000434 	movhi	r4,16
   16f58:	213fffc4 	addi	r4,r4,-1
   16f5c:	4110703a 	and	r8,r8,r4
   16f60:	003fa806 	br	16e04 <__alt_data_end+0xf0016e04>
   16f64:	8089c83a 	sub	r4,r16,r2
   16f68:	01005e0e 	bge	zero,r4,170e4 <__adddf3+0x3bc>
   16f6c:	10002b26 	beq	r2,zero,1701c <__adddf3+0x2f4>
   16f70:	0081ffc4 	movi	r2,2047
   16f74:	80bf8b26 	beq	r16,r2,16da4 <__alt_data_end+0xf0016da4>
   16f78:	4a402034 	orhi	r9,r9,128
   16f7c:	00800e04 	movi	r2,56
   16f80:	1100a40e 	bge	r2,r4,17214 <__adddf3+0x4ec>
   16f84:	498cb03a 	or	r6,r9,r6
   16f88:	300ac03a 	cmpne	r5,r6,zero
   16f8c:	0013883a 	mov	r9,zero
   16f90:	2c4b883a 	add	r5,r5,r17
   16f94:	2c63803a 	cmpltu	r17,r5,r17
   16f98:	4a11883a 	add	r8,r9,r8
   16f9c:	8a11883a 	add	r8,r17,r8
   16fa0:	2823883a 	mov	r17,r5
   16fa4:	4080202c 	andhi	r2,r8,128
   16fa8:	103fe026 	beq	r2,zero,16f2c <__alt_data_end+0xf0016f2c>
   16fac:	84000044 	addi	r16,r16,1
   16fb0:	0081ffc4 	movi	r2,2047
   16fb4:	8080d226 	beq	r16,r2,17300 <__adddf3+0x5d8>
   16fb8:	00bfe034 	movhi	r2,65408
   16fbc:	10bfffc4 	addi	r2,r2,-1
   16fc0:	4090703a 	and	r8,r8,r2
   16fc4:	880ad07a 	srli	r5,r17,1
   16fc8:	400897fa 	slli	r4,r8,31
   16fcc:	88c0004c 	andi	r3,r17,1
   16fd0:	28e2b03a 	or	r17,r5,r3
   16fd4:	4010d07a 	srli	r8,r8,1
   16fd8:	2462b03a 	or	r17,r4,r17
   16fdc:	003f7106 	br	16da4 <__alt_data_end+0xf0016da4>
   16fe0:	4088b03a 	or	r4,r8,r2
   16fe4:	20014526 	beq	r4,zero,174fc <__adddf3+0x7d4>
   16fe8:	01000434 	movhi	r4,16
   16fec:	42000234 	orhi	r8,r8,8
   16ff0:	213fffc4 	addi	r4,r4,-1
   16ff4:	4110703a 	and	r8,r8,r4
   16ff8:	003f8206 	br	16e04 <__alt_data_end+0xf0016e04>
   16ffc:	18ffffc4 	addi	r3,r3,-1
   17000:	1800491e 	bne	r3,zero,17128 <__adddf3+0x400>
   17004:	898bc83a 	sub	r5,r17,r6
   17008:	8963803a 	cmpltu	r17,r17,r5
   1700c:	4251c83a 	sub	r8,r8,r9
   17010:	4451c83a 	sub	r8,r8,r17
   17014:	2823883a 	mov	r17,r5
   17018:	003f9f06 	br	16e98 <__alt_data_end+0xf0016e98>
   1701c:	4984b03a 	or	r2,r9,r6
   17020:	103f6026 	beq	r2,zero,16da4 <__alt_data_end+0xf0016da4>
   17024:	213fffc4 	addi	r4,r4,-1
   17028:	2000931e 	bne	r4,zero,17278 <__adddf3+0x550>
   1702c:	898d883a 	add	r6,r17,r6
   17030:	3463803a 	cmpltu	r17,r6,r17
   17034:	4251883a 	add	r8,r8,r9
   17038:	8a11883a 	add	r8,r17,r8
   1703c:	3023883a 	mov	r17,r6
   17040:	003fd806 	br	16fa4 <__alt_data_end+0xf0016fa4>
   17044:	1800541e 	bne	r3,zero,17198 <__adddf3+0x470>
   17048:	80800044 	addi	r2,r16,1
   1704c:	1081ffcc 	andi	r2,r2,2047
   17050:	00c00044 	movi	r3,1
   17054:	1880a00e 	bge	r3,r2,172d8 <__adddf3+0x5b0>
   17058:	8989c83a 	sub	r4,r17,r6
   1705c:	8905803a 	cmpltu	r2,r17,r4
   17060:	4267c83a 	sub	r19,r8,r9
   17064:	98a7c83a 	sub	r19,r19,r2
   17068:	9880202c 	andhi	r2,r19,128
   1706c:	10006326 	beq	r2,zero,171fc <__adddf3+0x4d4>
   17070:	3463c83a 	sub	r17,r6,r17
   17074:	4a07c83a 	sub	r3,r9,r8
   17078:	344d803a 	cmpltu	r6,r6,r17
   1707c:	19a7c83a 	sub	r19,r3,r6
   17080:	3825883a 	mov	r18,r7
   17084:	983f8a1e 	bne	r19,zero,16eb0 <__alt_data_end+0xf0016eb0>
   17088:	8809883a 	mov	r4,r17
   1708c:	00092e80 	call	92e8 <__clzsi2>
   17090:	10800804 	addi	r2,r2,32
   17094:	10fffe04 	addi	r3,r2,-8
   17098:	010007c4 	movi	r4,31
   1709c:	20ff890e 	bge	r4,r3,16ec4 <__alt_data_end+0xf0016ec4>
   170a0:	10bff604 	addi	r2,r2,-40
   170a4:	8884983a 	sll	r2,r17,r2
   170a8:	0023883a 	mov	r17,zero
   170ac:	1c3f8c0e 	bge	r3,r16,16ee0 <__alt_data_end+0xf0016ee0>
   170b0:	023fe034 	movhi	r8,65408
   170b4:	423fffc4 	addi	r8,r8,-1
   170b8:	80e1c83a 	sub	r16,r16,r3
   170bc:	1210703a 	and	r8,r2,r8
   170c0:	003f3806 	br	16da4 <__alt_data_end+0xf0016da4>
   170c4:	9007883a 	mov	r3,r18
   170c8:	0011883a 	mov	r8,zero
   170cc:	0005883a 	mov	r2,zero
   170d0:	003f4c06 	br	16e04 <__alt_data_end+0xf0016e04>
   170d4:	498cb03a 	or	r6,r9,r6
   170d8:	300cc03a 	cmpne	r6,r6,zero
   170dc:	0007883a 	mov	r3,zero
   170e0:	003f6806 	br	16e84 <__alt_data_end+0xf0016e84>
   170e4:	20009c1e 	bne	r4,zero,17358 <__adddf3+0x630>
   170e8:	80800044 	addi	r2,r16,1
   170ec:	1141ffcc 	andi	r5,r2,2047
   170f0:	01000044 	movi	r4,1
   170f4:	2140670e 	bge	r4,r5,17294 <__adddf3+0x56c>
   170f8:	0101ffc4 	movi	r4,2047
   170fc:	11007f26 	beq	r2,r4,172fc <__adddf3+0x5d4>
   17100:	898d883a 	add	r6,r17,r6
   17104:	4247883a 	add	r3,r8,r9
   17108:	3451803a 	cmpltu	r8,r6,r17
   1710c:	40d1883a 	add	r8,r8,r3
   17110:	402297fa 	slli	r17,r8,31
   17114:	300cd07a 	srli	r6,r6,1
   17118:	4010d07a 	srli	r8,r8,1
   1711c:	1021883a 	mov	r16,r2
   17120:	89a2b03a 	or	r17,r17,r6
   17124:	003f1f06 	br	16da4 <__alt_data_end+0xf0016da4>
   17128:	0081ffc4 	movi	r2,2047
   1712c:	80bf481e 	bne	r16,r2,16e50 <__alt_data_end+0xf0016e50>
   17130:	003f1c06 	br	16da4 <__alt_data_end+0xf0016da4>
   17134:	843ff844 	addi	r16,r16,-31
   17138:	01000804 	movi	r4,32
   1713c:	1406d83a 	srl	r3,r2,r16
   17140:	41005026 	beq	r8,r4,17284 <__adddf3+0x55c>
   17144:	01001004 	movi	r4,64
   17148:	2211c83a 	sub	r8,r4,r8
   1714c:	1204983a 	sll	r2,r2,r8
   17150:	88a2b03a 	or	r17,r17,r2
   17154:	8822c03a 	cmpne	r17,r17,zero
   17158:	1c62b03a 	or	r17,r3,r17
   1715c:	0011883a 	mov	r8,zero
   17160:	0021883a 	mov	r16,zero
   17164:	003f7106 	br	16f2c <__alt_data_end+0xf0016f2c>
   17168:	193ff804 	addi	r4,r3,-32
   1716c:	00800804 	movi	r2,32
   17170:	4908d83a 	srl	r4,r9,r4
   17174:	18804526 	beq	r3,r2,1728c <__adddf3+0x564>
   17178:	00801004 	movi	r2,64
   1717c:	10c5c83a 	sub	r2,r2,r3
   17180:	4886983a 	sll	r3,r9,r2
   17184:	198cb03a 	or	r6,r3,r6
   17188:	300cc03a 	cmpne	r6,r6,zero
   1718c:	218cb03a 	or	r6,r4,r6
   17190:	0007883a 	mov	r3,zero
   17194:	003f3b06 	br	16e84 <__alt_data_end+0xf0016e84>
   17198:	80002a26 	beq	r16,zero,17244 <__adddf3+0x51c>
   1719c:	0101ffc4 	movi	r4,2047
   171a0:	11006826 	beq	r2,r4,17344 <__adddf3+0x61c>
   171a4:	00c7c83a 	sub	r3,zero,r3
   171a8:	42002034 	orhi	r8,r8,128
   171ac:	01000e04 	movi	r4,56
   171b0:	20c07c16 	blt	r4,r3,173a4 <__adddf3+0x67c>
   171b4:	010007c4 	movi	r4,31
   171b8:	20c0da16 	blt	r4,r3,17524 <__adddf3+0x7fc>
   171bc:	01000804 	movi	r4,32
   171c0:	20c9c83a 	sub	r4,r4,r3
   171c4:	4114983a 	sll	r10,r8,r4
   171c8:	88cad83a 	srl	r5,r17,r3
   171cc:	8908983a 	sll	r4,r17,r4
   171d0:	40c6d83a 	srl	r3,r8,r3
   171d4:	5162b03a 	or	r17,r10,r5
   171d8:	2008c03a 	cmpne	r4,r4,zero
   171dc:	8922b03a 	or	r17,r17,r4
   171e0:	3463c83a 	sub	r17,r6,r17
   171e4:	48c7c83a 	sub	r3,r9,r3
   171e8:	344d803a 	cmpltu	r6,r6,r17
   171ec:	1991c83a 	sub	r8,r3,r6
   171f0:	1021883a 	mov	r16,r2
   171f4:	3825883a 	mov	r18,r7
   171f8:	003f2706 	br	16e98 <__alt_data_end+0xf0016e98>
   171fc:	24d0b03a 	or	r8,r4,r19
   17200:	40001b1e 	bne	r8,zero,17270 <__adddf3+0x548>
   17204:	0005883a 	mov	r2,zero
   17208:	0007883a 	mov	r3,zero
   1720c:	0021883a 	mov	r16,zero
   17210:	003f4d06 	br	16f48 <__alt_data_end+0xf0016f48>
   17214:	008007c4 	movi	r2,31
   17218:	11003c16 	blt	r2,r4,1730c <__adddf3+0x5e4>
   1721c:	00800804 	movi	r2,32
   17220:	1105c83a 	sub	r2,r2,r4
   17224:	488e983a 	sll	r7,r9,r2
   17228:	310ad83a 	srl	r5,r6,r4
   1722c:	3084983a 	sll	r2,r6,r2
   17230:	4912d83a 	srl	r9,r9,r4
   17234:	394ab03a 	or	r5,r7,r5
   17238:	1004c03a 	cmpne	r2,r2,zero
   1723c:	288ab03a 	or	r5,r5,r2
   17240:	003f5306 	br	16f90 <__alt_data_end+0xf0016f90>
   17244:	4448b03a 	or	r4,r8,r17
   17248:	20003e26 	beq	r4,zero,17344 <__adddf3+0x61c>
   1724c:	00c6303a 	nor	r3,zero,r3
   17250:	18003a1e 	bne	r3,zero,1733c <__adddf3+0x614>
   17254:	3463c83a 	sub	r17,r6,r17
   17258:	4a07c83a 	sub	r3,r9,r8
   1725c:	344d803a 	cmpltu	r6,r6,r17
   17260:	1991c83a 	sub	r8,r3,r6
   17264:	1021883a 	mov	r16,r2
   17268:	3825883a 	mov	r18,r7
   1726c:	003f0a06 	br	16e98 <__alt_data_end+0xf0016e98>
   17270:	2023883a 	mov	r17,r4
   17274:	003f0d06 	br	16eac <__alt_data_end+0xf0016eac>
   17278:	0081ffc4 	movi	r2,2047
   1727c:	80bf3f1e 	bne	r16,r2,16f7c <__alt_data_end+0xf0016f7c>
   17280:	003ec806 	br	16da4 <__alt_data_end+0xf0016da4>
   17284:	0005883a 	mov	r2,zero
   17288:	003fb106 	br	17150 <__alt_data_end+0xf0017150>
   1728c:	0007883a 	mov	r3,zero
   17290:	003fbc06 	br	17184 <__alt_data_end+0xf0017184>
   17294:	4444b03a 	or	r2,r8,r17
   17298:	8000871e 	bne	r16,zero,174b8 <__adddf3+0x790>
   1729c:	1000ba26 	beq	r2,zero,17588 <__adddf3+0x860>
   172a0:	4984b03a 	or	r2,r9,r6
   172a4:	103ebf26 	beq	r2,zero,16da4 <__alt_data_end+0xf0016da4>
   172a8:	8985883a 	add	r2,r17,r6
   172ac:	4247883a 	add	r3,r8,r9
   172b0:	1451803a 	cmpltu	r8,r2,r17
   172b4:	40d1883a 	add	r8,r8,r3
   172b8:	40c0202c 	andhi	r3,r8,128
   172bc:	1023883a 	mov	r17,r2
   172c0:	183f1a26 	beq	r3,zero,16f2c <__alt_data_end+0xf0016f2c>
   172c4:	00bfe034 	movhi	r2,65408
   172c8:	10bfffc4 	addi	r2,r2,-1
   172cc:	2021883a 	mov	r16,r4
   172d0:	4090703a 	and	r8,r8,r2
   172d4:	003eb306 	br	16da4 <__alt_data_end+0xf0016da4>
   172d8:	4444b03a 	or	r2,r8,r17
   172dc:	8000291e 	bne	r16,zero,17384 <__adddf3+0x65c>
   172e0:	10004b1e 	bne	r2,zero,17410 <__adddf3+0x6e8>
   172e4:	4990b03a 	or	r8,r9,r6
   172e8:	40008b26 	beq	r8,zero,17518 <__adddf3+0x7f0>
   172ec:	4811883a 	mov	r8,r9
   172f0:	3023883a 	mov	r17,r6
   172f4:	3825883a 	mov	r18,r7
   172f8:	003eaa06 	br	16da4 <__alt_data_end+0xf0016da4>
   172fc:	1021883a 	mov	r16,r2
   17300:	0011883a 	mov	r8,zero
   17304:	0005883a 	mov	r2,zero
   17308:	003f0f06 	br	16f48 <__alt_data_end+0xf0016f48>
   1730c:	217ff804 	addi	r5,r4,-32
   17310:	00800804 	movi	r2,32
   17314:	494ad83a 	srl	r5,r9,r5
   17318:	20807d26 	beq	r4,r2,17510 <__adddf3+0x7e8>
   1731c:	00801004 	movi	r2,64
   17320:	1109c83a 	sub	r4,r2,r4
   17324:	4912983a 	sll	r9,r9,r4
   17328:	498cb03a 	or	r6,r9,r6
   1732c:	300cc03a 	cmpne	r6,r6,zero
   17330:	298ab03a 	or	r5,r5,r6
   17334:	0013883a 	mov	r9,zero
   17338:	003f1506 	br	16f90 <__alt_data_end+0xf0016f90>
   1733c:	0101ffc4 	movi	r4,2047
   17340:	113f9a1e 	bne	r2,r4,171ac <__alt_data_end+0xf00171ac>
   17344:	4811883a 	mov	r8,r9
   17348:	3023883a 	mov	r17,r6
   1734c:	1021883a 	mov	r16,r2
   17350:	3825883a 	mov	r18,r7
   17354:	003e9306 	br	16da4 <__alt_data_end+0xf0016da4>
   17358:	8000161e 	bne	r16,zero,173b4 <__adddf3+0x68c>
   1735c:	444ab03a 	or	r5,r8,r17
   17360:	28005126 	beq	r5,zero,174a8 <__adddf3+0x780>
   17364:	0108303a 	nor	r4,zero,r4
   17368:	20004d1e 	bne	r4,zero,174a0 <__adddf3+0x778>
   1736c:	89a3883a 	add	r17,r17,r6
   17370:	4253883a 	add	r9,r8,r9
   17374:	898d803a 	cmpltu	r6,r17,r6
   17378:	3251883a 	add	r8,r6,r9
   1737c:	1021883a 	mov	r16,r2
   17380:	003f0806 	br	16fa4 <__alt_data_end+0xf0016fa4>
   17384:	1000301e 	bne	r2,zero,17448 <__adddf3+0x720>
   17388:	4984b03a 	or	r2,r9,r6
   1738c:	10007126 	beq	r2,zero,17554 <__adddf3+0x82c>
   17390:	4811883a 	mov	r8,r9
   17394:	3023883a 	mov	r17,r6
   17398:	3825883a 	mov	r18,r7
   1739c:	0401ffc4 	movi	r16,2047
   173a0:	003e8006 	br	16da4 <__alt_data_end+0xf0016da4>
   173a4:	4462b03a 	or	r17,r8,r17
   173a8:	8822c03a 	cmpne	r17,r17,zero
   173ac:	0007883a 	mov	r3,zero
   173b0:	003f8b06 	br	171e0 <__alt_data_end+0xf00171e0>
   173b4:	0141ffc4 	movi	r5,2047
   173b8:	11403b26 	beq	r2,r5,174a8 <__adddf3+0x780>
   173bc:	0109c83a 	sub	r4,zero,r4
   173c0:	42002034 	orhi	r8,r8,128
   173c4:	01400e04 	movi	r5,56
   173c8:	29006716 	blt	r5,r4,17568 <__adddf3+0x840>
   173cc:	014007c4 	movi	r5,31
   173d0:	29007016 	blt	r5,r4,17594 <__adddf3+0x86c>
   173d4:	01400804 	movi	r5,32
   173d8:	290bc83a 	sub	r5,r5,r4
   173dc:	4154983a 	sll	r10,r8,r5
   173e0:	890ed83a 	srl	r7,r17,r4
   173e4:	894a983a 	sll	r5,r17,r5
   173e8:	4108d83a 	srl	r4,r8,r4
   173ec:	51e2b03a 	or	r17,r10,r7
   173f0:	280ac03a 	cmpne	r5,r5,zero
   173f4:	8962b03a 	or	r17,r17,r5
   173f8:	89a3883a 	add	r17,r17,r6
   173fc:	2253883a 	add	r9,r4,r9
   17400:	898d803a 	cmpltu	r6,r17,r6
   17404:	3251883a 	add	r8,r6,r9
   17408:	1021883a 	mov	r16,r2
   1740c:	003ee506 	br	16fa4 <__alt_data_end+0xf0016fa4>
   17410:	4984b03a 	or	r2,r9,r6
   17414:	103e6326 	beq	r2,zero,16da4 <__alt_data_end+0xf0016da4>
   17418:	8987c83a 	sub	r3,r17,r6
   1741c:	88c9803a 	cmpltu	r4,r17,r3
   17420:	4245c83a 	sub	r2,r8,r9
   17424:	1105c83a 	sub	r2,r2,r4
   17428:	1100202c 	andhi	r4,r2,128
   1742c:	203ebb26 	beq	r4,zero,16f1c <__alt_data_end+0xf0016f1c>
   17430:	3463c83a 	sub	r17,r6,r17
   17434:	4a07c83a 	sub	r3,r9,r8
   17438:	344d803a 	cmpltu	r6,r6,r17
   1743c:	1991c83a 	sub	r8,r3,r6
   17440:	3825883a 	mov	r18,r7
   17444:	003e5706 	br	16da4 <__alt_data_end+0xf0016da4>
   17448:	4984b03a 	or	r2,r9,r6
   1744c:	10002e26 	beq	r2,zero,17508 <__adddf3+0x7e0>
   17450:	4004d0fa 	srli	r2,r8,3
   17454:	8822d0fa 	srli	r17,r17,3
   17458:	4010977a 	slli	r8,r8,29
   1745c:	10c0022c 	andhi	r3,r2,8
   17460:	4462b03a 	or	r17,r8,r17
   17464:	18000826 	beq	r3,zero,17488 <__adddf3+0x760>
   17468:	4808d0fa 	srli	r4,r9,3
   1746c:	20c0022c 	andhi	r3,r4,8
   17470:	1800051e 	bne	r3,zero,17488 <__adddf3+0x760>
   17474:	300cd0fa 	srli	r6,r6,3
   17478:	4806977a 	slli	r3,r9,29
   1747c:	2005883a 	mov	r2,r4
   17480:	3825883a 	mov	r18,r7
   17484:	19a2b03a 	or	r17,r3,r6
   17488:	8810d77a 	srli	r8,r17,29
   1748c:	100490fa 	slli	r2,r2,3
   17490:	882290fa 	slli	r17,r17,3
   17494:	0401ffc4 	movi	r16,2047
   17498:	4090b03a 	or	r8,r8,r2
   1749c:	003e4106 	br	16da4 <__alt_data_end+0xf0016da4>
   174a0:	0141ffc4 	movi	r5,2047
   174a4:	117fc71e 	bne	r2,r5,173c4 <__alt_data_end+0xf00173c4>
   174a8:	4811883a 	mov	r8,r9
   174ac:	3023883a 	mov	r17,r6
   174b0:	1021883a 	mov	r16,r2
   174b4:	003e3b06 	br	16da4 <__alt_data_end+0xf0016da4>
   174b8:	10002f26 	beq	r2,zero,17578 <__adddf3+0x850>
   174bc:	4984b03a 	or	r2,r9,r6
   174c0:	10001126 	beq	r2,zero,17508 <__adddf3+0x7e0>
   174c4:	4004d0fa 	srli	r2,r8,3
   174c8:	8822d0fa 	srli	r17,r17,3
   174cc:	4010977a 	slli	r8,r8,29
   174d0:	10c0022c 	andhi	r3,r2,8
   174d4:	4462b03a 	or	r17,r8,r17
   174d8:	183feb26 	beq	r3,zero,17488 <__alt_data_end+0xf0017488>
   174dc:	4808d0fa 	srli	r4,r9,3
   174e0:	20c0022c 	andhi	r3,r4,8
   174e4:	183fe81e 	bne	r3,zero,17488 <__alt_data_end+0xf0017488>
   174e8:	300cd0fa 	srli	r6,r6,3
   174ec:	4806977a 	slli	r3,r9,29
   174f0:	2005883a 	mov	r2,r4
   174f4:	19a2b03a 	or	r17,r3,r6
   174f8:	003fe306 	br	17488 <__alt_data_end+0xf0017488>
   174fc:	0011883a 	mov	r8,zero
   17500:	0005883a 	mov	r2,zero
   17504:	003e3f06 	br	16e04 <__alt_data_end+0xf0016e04>
   17508:	0401ffc4 	movi	r16,2047
   1750c:	003e2506 	br	16da4 <__alt_data_end+0xf0016da4>
   17510:	0013883a 	mov	r9,zero
   17514:	003f8406 	br	17328 <__alt_data_end+0xf0017328>
   17518:	0005883a 	mov	r2,zero
   1751c:	0007883a 	mov	r3,zero
   17520:	003e8906 	br	16f48 <__alt_data_end+0xf0016f48>
   17524:	197ff804 	addi	r5,r3,-32
   17528:	01000804 	movi	r4,32
   1752c:	414ad83a 	srl	r5,r8,r5
   17530:	19002426 	beq	r3,r4,175c4 <__adddf3+0x89c>
   17534:	01001004 	movi	r4,64
   17538:	20c7c83a 	sub	r3,r4,r3
   1753c:	40c6983a 	sll	r3,r8,r3
   17540:	1c46b03a 	or	r3,r3,r17
   17544:	1806c03a 	cmpne	r3,r3,zero
   17548:	28e2b03a 	or	r17,r5,r3
   1754c:	0007883a 	mov	r3,zero
   17550:	003f2306 	br	171e0 <__alt_data_end+0xf00171e0>
   17554:	0007883a 	mov	r3,zero
   17558:	5811883a 	mov	r8,r11
   1755c:	00bfffc4 	movi	r2,-1
   17560:	0401ffc4 	movi	r16,2047
   17564:	003e7806 	br	16f48 <__alt_data_end+0xf0016f48>
   17568:	4462b03a 	or	r17,r8,r17
   1756c:	8822c03a 	cmpne	r17,r17,zero
   17570:	0009883a 	mov	r4,zero
   17574:	003fa006 	br	173f8 <__alt_data_end+0xf00173f8>
   17578:	4811883a 	mov	r8,r9
   1757c:	3023883a 	mov	r17,r6
   17580:	0401ffc4 	movi	r16,2047
   17584:	003e0706 	br	16da4 <__alt_data_end+0xf0016da4>
   17588:	4811883a 	mov	r8,r9
   1758c:	3023883a 	mov	r17,r6
   17590:	003e0406 	br	16da4 <__alt_data_end+0xf0016da4>
   17594:	21fff804 	addi	r7,r4,-32
   17598:	01400804 	movi	r5,32
   1759c:	41ced83a 	srl	r7,r8,r7
   175a0:	21400a26 	beq	r4,r5,175cc <__adddf3+0x8a4>
   175a4:	01401004 	movi	r5,64
   175a8:	2909c83a 	sub	r4,r5,r4
   175ac:	4108983a 	sll	r4,r8,r4
   175b0:	2448b03a 	or	r4,r4,r17
   175b4:	2008c03a 	cmpne	r4,r4,zero
   175b8:	3922b03a 	or	r17,r7,r4
   175bc:	0009883a 	mov	r4,zero
   175c0:	003f8d06 	br	173f8 <__alt_data_end+0xf00173f8>
   175c4:	0007883a 	mov	r3,zero
   175c8:	003fdd06 	br	17540 <__alt_data_end+0xf0017540>
   175cc:	0009883a 	mov	r4,zero
   175d0:	003ff706 	br	175b0 <__alt_data_end+0xf00175b0>

000175d4 <__eqdf2>:
   175d4:	2804d53a 	srli	r2,r5,20
   175d8:	3806d53a 	srli	r3,r7,20
   175dc:	02000434 	movhi	r8,16
   175e0:	423fffc4 	addi	r8,r8,-1
   175e4:	1081ffcc 	andi	r2,r2,2047
   175e8:	0281ffc4 	movi	r10,2047
   175ec:	2a12703a 	and	r9,r5,r8
   175f0:	18c1ffcc 	andi	r3,r3,2047
   175f4:	3a10703a 	and	r8,r7,r8
   175f8:	280ad7fa 	srli	r5,r5,31
   175fc:	380ed7fa 	srli	r7,r7,31
   17600:	12801026 	beq	r2,r10,17644 <__eqdf2+0x70>
   17604:	0281ffc4 	movi	r10,2047
   17608:	1a800a26 	beq	r3,r10,17634 <__eqdf2+0x60>
   1760c:	10c00226 	beq	r2,r3,17618 <__eqdf2+0x44>
   17610:	00800044 	movi	r2,1
   17614:	f800283a 	ret
   17618:	4a3ffd1e 	bne	r9,r8,17610 <__alt_data_end+0xf0017610>
   1761c:	21bffc1e 	bne	r4,r6,17610 <__alt_data_end+0xf0017610>
   17620:	29c00c26 	beq	r5,r7,17654 <__eqdf2+0x80>
   17624:	103ffa1e 	bne	r2,zero,17610 <__alt_data_end+0xf0017610>
   17628:	2244b03a 	or	r2,r4,r9
   1762c:	1004c03a 	cmpne	r2,r2,zero
   17630:	f800283a 	ret
   17634:	3214b03a 	or	r10,r6,r8
   17638:	503ff426 	beq	r10,zero,1760c <__alt_data_end+0xf001760c>
   1763c:	00800044 	movi	r2,1
   17640:	f800283a 	ret
   17644:	2254b03a 	or	r10,r4,r9
   17648:	503fee26 	beq	r10,zero,17604 <__alt_data_end+0xf0017604>
   1764c:	00800044 	movi	r2,1
   17650:	f800283a 	ret
   17654:	0005883a 	mov	r2,zero
   17658:	f800283a 	ret

0001765c <__ledf2>:
   1765c:	2804d53a 	srli	r2,r5,20
   17660:	3810d53a 	srli	r8,r7,20
   17664:	00c00434 	movhi	r3,16
   17668:	18ffffc4 	addi	r3,r3,-1
   1766c:	1081ffcc 	andi	r2,r2,2047
   17670:	0241ffc4 	movi	r9,2047
   17674:	28d4703a 	and	r10,r5,r3
   17678:	4201ffcc 	andi	r8,r8,2047
   1767c:	38c6703a 	and	r3,r7,r3
   17680:	280ad7fa 	srli	r5,r5,31
   17684:	380ed7fa 	srli	r7,r7,31
   17688:	12401f26 	beq	r2,r9,17708 <__ledf2+0xac>
   1768c:	0241ffc4 	movi	r9,2047
   17690:	42401426 	beq	r8,r9,176e4 <__ledf2+0x88>
   17694:	1000091e 	bne	r2,zero,176bc <__ledf2+0x60>
   17698:	2296b03a 	or	r11,r4,r10
   1769c:	5813003a 	cmpeq	r9,r11,zero
   176a0:	29403fcc 	andi	r5,r5,255
   176a4:	40000a1e 	bne	r8,zero,176d0 <__ledf2+0x74>
   176a8:	30d8b03a 	or	r12,r6,r3
   176ac:	6000081e 	bne	r12,zero,176d0 <__ledf2+0x74>
   176b0:	0005883a 	mov	r2,zero
   176b4:	5800111e 	bne	r11,zero,176fc <__ledf2+0xa0>
   176b8:	f800283a 	ret
   176bc:	29403fcc 	andi	r5,r5,255
   176c0:	40000c1e 	bne	r8,zero,176f4 <__ledf2+0x98>
   176c4:	30d2b03a 	or	r9,r6,r3
   176c8:	48000c26 	beq	r9,zero,176fc <__ledf2+0xa0>
   176cc:	0013883a 	mov	r9,zero
   176d0:	39c03fcc 	andi	r7,r7,255
   176d4:	48000826 	beq	r9,zero,176f8 <__ledf2+0x9c>
   176d8:	38001126 	beq	r7,zero,17720 <__ledf2+0xc4>
   176dc:	00800044 	movi	r2,1
   176e0:	f800283a 	ret
   176e4:	30d2b03a 	or	r9,r6,r3
   176e8:	483fea26 	beq	r9,zero,17694 <__alt_data_end+0xf0017694>
   176ec:	00800084 	movi	r2,2
   176f0:	f800283a 	ret
   176f4:	39c03fcc 	andi	r7,r7,255
   176f8:	39400726 	beq	r7,r5,17718 <__ledf2+0xbc>
   176fc:	2800081e 	bne	r5,zero,17720 <__ledf2+0xc4>
   17700:	00800044 	movi	r2,1
   17704:	f800283a 	ret
   17708:	2292b03a 	or	r9,r4,r10
   1770c:	483fdf26 	beq	r9,zero,1768c <__alt_data_end+0xf001768c>
   17710:	00800084 	movi	r2,2
   17714:	f800283a 	ret
   17718:	4080030e 	bge	r8,r2,17728 <__ledf2+0xcc>
   1771c:	383fef26 	beq	r7,zero,176dc <__alt_data_end+0xf00176dc>
   17720:	00bfffc4 	movi	r2,-1
   17724:	f800283a 	ret
   17728:	123feb16 	blt	r2,r8,176d8 <__alt_data_end+0xf00176d8>
   1772c:	1abff336 	bltu	r3,r10,176fc <__alt_data_end+0xf00176fc>
   17730:	50c00326 	beq	r10,r3,17740 <__ledf2+0xe4>
   17734:	50c0042e 	bgeu	r10,r3,17748 <__ledf2+0xec>
   17738:	283fe81e 	bne	r5,zero,176dc <__alt_data_end+0xf00176dc>
   1773c:	003ff806 	br	17720 <__alt_data_end+0xf0017720>
   17740:	313fee36 	bltu	r6,r4,176fc <__alt_data_end+0xf00176fc>
   17744:	21bffc36 	bltu	r4,r6,17738 <__alt_data_end+0xf0017738>
   17748:	0005883a 	mov	r2,zero
   1774c:	f800283a 	ret

00017750 <__floatunsidf>:
   17750:	defffe04 	addi	sp,sp,-8
   17754:	dc000015 	stw	r16,0(sp)
   17758:	dfc00115 	stw	ra,4(sp)
   1775c:	2021883a 	mov	r16,r4
   17760:	20002226 	beq	r4,zero,177ec <__floatunsidf+0x9c>
   17764:	00092e80 	call	92e8 <__clzsi2>
   17768:	01010784 	movi	r4,1054
   1776c:	2089c83a 	sub	r4,r4,r2
   17770:	01810cc4 	movi	r6,1075
   17774:	310dc83a 	sub	r6,r6,r4
   17778:	00c007c4 	movi	r3,31
   1777c:	1980120e 	bge	r3,r6,177c8 <__floatunsidf+0x78>
   17780:	00c104c4 	movi	r3,1043
   17784:	1907c83a 	sub	r3,r3,r4
   17788:	80ca983a 	sll	r5,r16,r3
   1778c:	00800434 	movhi	r2,16
   17790:	10bfffc4 	addi	r2,r2,-1
   17794:	2101ffcc 	andi	r4,r4,2047
   17798:	0021883a 	mov	r16,zero
   1779c:	288a703a 	and	r5,r5,r2
   177a0:	2008953a 	slli	r4,r4,20
   177a4:	00c00434 	movhi	r3,16
   177a8:	18ffffc4 	addi	r3,r3,-1
   177ac:	28c6703a 	and	r3,r5,r3
   177b0:	8005883a 	mov	r2,r16
   177b4:	1906b03a 	or	r3,r3,r4
   177b8:	dfc00117 	ldw	ra,4(sp)
   177bc:	dc000017 	ldw	r16,0(sp)
   177c0:	dec00204 	addi	sp,sp,8
   177c4:	f800283a 	ret
   177c8:	00c002c4 	movi	r3,11
   177cc:	188bc83a 	sub	r5,r3,r2
   177d0:	814ad83a 	srl	r5,r16,r5
   177d4:	00c00434 	movhi	r3,16
   177d8:	18ffffc4 	addi	r3,r3,-1
   177dc:	81a0983a 	sll	r16,r16,r6
   177e0:	2101ffcc 	andi	r4,r4,2047
   177e4:	28ca703a 	and	r5,r5,r3
   177e8:	003fed06 	br	177a0 <__alt_data_end+0xf00177a0>
   177ec:	0009883a 	mov	r4,zero
   177f0:	000b883a 	mov	r5,zero
   177f4:	003fea06 	br	177a0 <__alt_data_end+0xf00177a0>

000177f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   177f8:	defffe04 	addi	sp,sp,-8
   177fc:	dfc00115 	stw	ra,4(sp)
   17800:	df000015 	stw	fp,0(sp)
   17804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17808:	d0a00f97 	ldw	r2,-32706(gp)
   1780c:	10000326 	beq	r2,zero,1781c <alt_get_errno+0x24>
   17810:	d0a00f97 	ldw	r2,-32706(gp)
   17814:	103ee83a 	callr	r2
   17818:	00000106 	br	17820 <alt_get_errno+0x28>
   1781c:	d0a05384 	addi	r2,gp,-32434
}
   17820:	e037883a 	mov	sp,fp
   17824:	dfc00117 	ldw	ra,4(sp)
   17828:	df000017 	ldw	fp,0(sp)
   1782c:	dec00204 	addi	sp,sp,8
   17830:	f800283a 	ret

00017834 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   17834:	defffb04 	addi	sp,sp,-20
   17838:	dfc00415 	stw	ra,16(sp)
   1783c:	df000315 	stw	fp,12(sp)
   17840:	df000304 	addi	fp,sp,12
   17844:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   17848:	e0bfff17 	ldw	r2,-4(fp)
   1784c:	10000616 	blt	r2,zero,17868 <close+0x34>
   17850:	e0bfff17 	ldw	r2,-4(fp)
   17854:	10c00324 	muli	r3,r2,12
   17858:	00820034 	movhi	r2,2048
   1785c:	1084fb04 	addi	r2,r2,5100
   17860:	1885883a 	add	r2,r3,r2
   17864:	00000106 	br	1786c <close+0x38>
   17868:	0005883a 	mov	r2,zero
   1786c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   17870:	e0bffd17 	ldw	r2,-12(fp)
   17874:	10001926 	beq	r2,zero,178dc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   17878:	e0bffd17 	ldw	r2,-12(fp)
   1787c:	10800017 	ldw	r2,0(r2)
   17880:	10800417 	ldw	r2,16(r2)
   17884:	10000626 	beq	r2,zero,178a0 <close+0x6c>
   17888:	e0bffd17 	ldw	r2,-12(fp)
   1788c:	10800017 	ldw	r2,0(r2)
   17890:	10800417 	ldw	r2,16(r2)
   17894:	e13ffd17 	ldw	r4,-12(fp)
   17898:	103ee83a 	callr	r2
   1789c:	00000106 	br	178a4 <close+0x70>
   178a0:	0005883a 	mov	r2,zero
   178a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   178a8:	e13fff17 	ldw	r4,-4(fp)
   178ac:	0017e080 	call	17e08 <alt_release_fd>
    if (rval < 0)
   178b0:	e0bffe17 	ldw	r2,-8(fp)
   178b4:	1000070e 	bge	r2,zero,178d4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   178b8:	00177f80 	call	177f8 <alt_get_errno>
   178bc:	1007883a 	mov	r3,r2
   178c0:	e0bffe17 	ldw	r2,-8(fp)
   178c4:	0085c83a 	sub	r2,zero,r2
   178c8:	18800015 	stw	r2,0(r3)
      return -1;
   178cc:	00bfffc4 	movi	r2,-1
   178d0:	00000706 	br	178f0 <close+0xbc>
    }
    return 0;
   178d4:	0005883a 	mov	r2,zero
   178d8:	00000506 	br	178f0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   178dc:	00177f80 	call	177f8 <alt_get_errno>
   178e0:	1007883a 	mov	r3,r2
   178e4:	00801444 	movi	r2,81
   178e8:	18800015 	stw	r2,0(r3)
    return -1;
   178ec:	00bfffc4 	movi	r2,-1
  }
}
   178f0:	e037883a 	mov	sp,fp
   178f4:	dfc00117 	ldw	ra,4(sp)
   178f8:	df000017 	ldw	fp,0(sp)
   178fc:	dec00204 	addi	sp,sp,8
   17900:	f800283a 	ret

00017904 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   17904:	defffc04 	addi	sp,sp,-16
   17908:	df000315 	stw	fp,12(sp)
   1790c:	df000304 	addi	fp,sp,12
   17910:	e13ffd15 	stw	r4,-12(fp)
   17914:	e17ffe15 	stw	r5,-8(fp)
   17918:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1791c:	e0bfff17 	ldw	r2,-4(fp)
}
   17920:	e037883a 	mov	sp,fp
   17924:	df000017 	ldw	fp,0(sp)
   17928:	dec00104 	addi	sp,sp,4
   1792c:	f800283a 	ret

00017930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17930:	defffe04 	addi	sp,sp,-8
   17934:	dfc00115 	stw	ra,4(sp)
   17938:	df000015 	stw	fp,0(sp)
   1793c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17940:	d0a00f97 	ldw	r2,-32706(gp)
   17944:	10000326 	beq	r2,zero,17954 <alt_get_errno+0x24>
   17948:	d0a00f97 	ldw	r2,-32706(gp)
   1794c:	103ee83a 	callr	r2
   17950:	00000106 	br	17958 <alt_get_errno+0x28>
   17954:	d0a05384 	addi	r2,gp,-32434
}
   17958:	e037883a 	mov	sp,fp
   1795c:	dfc00117 	ldw	ra,4(sp)
   17960:	df000017 	ldw	fp,0(sp)
   17964:	dec00204 	addi	sp,sp,8
   17968:	f800283a 	ret

0001796c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1796c:	defffb04 	addi	sp,sp,-20
   17970:	dfc00415 	stw	ra,16(sp)
   17974:	df000315 	stw	fp,12(sp)
   17978:	df000304 	addi	fp,sp,12
   1797c:	e13ffe15 	stw	r4,-8(fp)
   17980:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17984:	e0bffe17 	ldw	r2,-8(fp)
   17988:	10000616 	blt	r2,zero,179a4 <fstat+0x38>
   1798c:	e0bffe17 	ldw	r2,-8(fp)
   17990:	10c00324 	muli	r3,r2,12
   17994:	00820034 	movhi	r2,2048
   17998:	1084fb04 	addi	r2,r2,5100
   1799c:	1885883a 	add	r2,r3,r2
   179a0:	00000106 	br	179a8 <fstat+0x3c>
   179a4:	0005883a 	mov	r2,zero
   179a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   179ac:	e0bffd17 	ldw	r2,-12(fp)
   179b0:	10001026 	beq	r2,zero,179f4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   179b4:	e0bffd17 	ldw	r2,-12(fp)
   179b8:	10800017 	ldw	r2,0(r2)
   179bc:	10800817 	ldw	r2,32(r2)
   179c0:	10000726 	beq	r2,zero,179e0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   179c4:	e0bffd17 	ldw	r2,-12(fp)
   179c8:	10800017 	ldw	r2,0(r2)
   179cc:	10800817 	ldw	r2,32(r2)
   179d0:	e17fff17 	ldw	r5,-4(fp)
   179d4:	e13ffd17 	ldw	r4,-12(fp)
   179d8:	103ee83a 	callr	r2
   179dc:	00000a06 	br	17a08 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   179e0:	e0bfff17 	ldw	r2,-4(fp)
   179e4:	00c80004 	movi	r3,8192
   179e8:	10c00115 	stw	r3,4(r2)
      return 0;
   179ec:	0005883a 	mov	r2,zero
   179f0:	00000506 	br	17a08 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   179f4:	00179300 	call	17930 <alt_get_errno>
   179f8:	1007883a 	mov	r3,r2
   179fc:	00801444 	movi	r2,81
   17a00:	18800015 	stw	r2,0(r3)
    return -1;
   17a04:	00bfffc4 	movi	r2,-1
  }
}
   17a08:	e037883a 	mov	sp,fp
   17a0c:	dfc00117 	ldw	ra,4(sp)
   17a10:	df000017 	ldw	fp,0(sp)
   17a14:	dec00204 	addi	sp,sp,8
   17a18:	f800283a 	ret

00017a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17a1c:	defffe04 	addi	sp,sp,-8
   17a20:	dfc00115 	stw	ra,4(sp)
   17a24:	df000015 	stw	fp,0(sp)
   17a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17a2c:	d0a00f97 	ldw	r2,-32706(gp)
   17a30:	10000326 	beq	r2,zero,17a40 <alt_get_errno+0x24>
   17a34:	d0a00f97 	ldw	r2,-32706(gp)
   17a38:	103ee83a 	callr	r2
   17a3c:	00000106 	br	17a44 <alt_get_errno+0x28>
   17a40:	d0a05384 	addi	r2,gp,-32434
}
   17a44:	e037883a 	mov	sp,fp
   17a48:	dfc00117 	ldw	ra,4(sp)
   17a4c:	df000017 	ldw	fp,0(sp)
   17a50:	dec00204 	addi	sp,sp,8
   17a54:	f800283a 	ret

00017a58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   17a58:	deffed04 	addi	sp,sp,-76
   17a5c:	dfc01215 	stw	ra,72(sp)
   17a60:	df001115 	stw	fp,68(sp)
   17a64:	df001104 	addi	fp,sp,68
   17a68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17a6c:	e0bfff17 	ldw	r2,-4(fp)
   17a70:	10000616 	blt	r2,zero,17a8c <isatty+0x34>
   17a74:	e0bfff17 	ldw	r2,-4(fp)
   17a78:	10c00324 	muli	r3,r2,12
   17a7c:	00820034 	movhi	r2,2048
   17a80:	1084fb04 	addi	r2,r2,5100
   17a84:	1885883a 	add	r2,r3,r2
   17a88:	00000106 	br	17a90 <isatty+0x38>
   17a8c:	0005883a 	mov	r2,zero
   17a90:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   17a94:	e0bfef17 	ldw	r2,-68(fp)
   17a98:	10000e26 	beq	r2,zero,17ad4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   17a9c:	e0bfef17 	ldw	r2,-68(fp)
   17aa0:	10800017 	ldw	r2,0(r2)
   17aa4:	10800817 	ldw	r2,32(r2)
   17aa8:	1000021e 	bne	r2,zero,17ab4 <isatty+0x5c>
    {
      return 1;
   17aac:	00800044 	movi	r2,1
   17ab0:	00000d06 	br	17ae8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   17ab4:	e0bff004 	addi	r2,fp,-64
   17ab8:	100b883a 	mov	r5,r2
   17abc:	e13fff17 	ldw	r4,-4(fp)
   17ac0:	001796c0 	call	1796c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   17ac4:	e0bff117 	ldw	r2,-60(fp)
   17ac8:	10880020 	cmpeqi	r2,r2,8192
   17acc:	10803fcc 	andi	r2,r2,255
   17ad0:	00000506 	br	17ae8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17ad4:	0017a1c0 	call	17a1c <alt_get_errno>
   17ad8:	1007883a 	mov	r3,r2
   17adc:	00801444 	movi	r2,81
   17ae0:	18800015 	stw	r2,0(r3)
    return 0;
   17ae4:	0005883a 	mov	r2,zero
  }
}
   17ae8:	e037883a 	mov	sp,fp
   17aec:	dfc00117 	ldw	ra,4(sp)
   17af0:	df000017 	ldw	fp,0(sp)
   17af4:	dec00204 	addi	sp,sp,8
   17af8:	f800283a 	ret

00017afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17afc:	defffe04 	addi	sp,sp,-8
   17b00:	dfc00115 	stw	ra,4(sp)
   17b04:	df000015 	stw	fp,0(sp)
   17b08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17b0c:	d0a00f97 	ldw	r2,-32706(gp)
   17b10:	10000326 	beq	r2,zero,17b20 <alt_get_errno+0x24>
   17b14:	d0a00f97 	ldw	r2,-32706(gp)
   17b18:	103ee83a 	callr	r2
   17b1c:	00000106 	br	17b24 <alt_get_errno+0x28>
   17b20:	d0a05384 	addi	r2,gp,-32434
}
   17b24:	e037883a 	mov	sp,fp
   17b28:	dfc00117 	ldw	ra,4(sp)
   17b2c:	df000017 	ldw	fp,0(sp)
   17b30:	dec00204 	addi	sp,sp,8
   17b34:	f800283a 	ret

00017b38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   17b38:	defff904 	addi	sp,sp,-28
   17b3c:	dfc00615 	stw	ra,24(sp)
   17b40:	df000515 	stw	fp,20(sp)
   17b44:	df000504 	addi	fp,sp,20
   17b48:	e13ffd15 	stw	r4,-12(fp)
   17b4c:	e17ffe15 	stw	r5,-8(fp)
   17b50:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   17b54:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17b58:	e0bffd17 	ldw	r2,-12(fp)
   17b5c:	10000616 	blt	r2,zero,17b78 <lseek+0x40>
   17b60:	e0bffd17 	ldw	r2,-12(fp)
   17b64:	10c00324 	muli	r3,r2,12
   17b68:	00820034 	movhi	r2,2048
   17b6c:	1084fb04 	addi	r2,r2,5100
   17b70:	1885883a 	add	r2,r3,r2
   17b74:	00000106 	br	17b7c <lseek+0x44>
   17b78:	0005883a 	mov	r2,zero
   17b7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   17b80:	e0bffc17 	ldw	r2,-16(fp)
   17b84:	10001026 	beq	r2,zero,17bc8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   17b88:	e0bffc17 	ldw	r2,-16(fp)
   17b8c:	10800017 	ldw	r2,0(r2)
   17b90:	10800717 	ldw	r2,28(r2)
   17b94:	10000926 	beq	r2,zero,17bbc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   17b98:	e0bffc17 	ldw	r2,-16(fp)
   17b9c:	10800017 	ldw	r2,0(r2)
   17ba0:	10800717 	ldw	r2,28(r2)
   17ba4:	e1bfff17 	ldw	r6,-4(fp)
   17ba8:	e17ffe17 	ldw	r5,-8(fp)
   17bac:	e13ffc17 	ldw	r4,-16(fp)
   17bb0:	103ee83a 	callr	r2
   17bb4:	e0bffb15 	stw	r2,-20(fp)
   17bb8:	00000506 	br	17bd0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   17bbc:	00bfde84 	movi	r2,-134
   17bc0:	e0bffb15 	stw	r2,-20(fp)
   17bc4:	00000206 	br	17bd0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   17bc8:	00bfebc4 	movi	r2,-81
   17bcc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   17bd0:	e0bffb17 	ldw	r2,-20(fp)
   17bd4:	1000070e 	bge	r2,zero,17bf4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   17bd8:	0017afc0 	call	17afc <alt_get_errno>
   17bdc:	1007883a 	mov	r3,r2
   17be0:	e0bffb17 	ldw	r2,-20(fp)
   17be4:	0085c83a 	sub	r2,zero,r2
   17be8:	18800015 	stw	r2,0(r3)
    rc = -1;
   17bec:	00bfffc4 	movi	r2,-1
   17bf0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   17bf4:	e0bffb17 	ldw	r2,-20(fp)
}
   17bf8:	e037883a 	mov	sp,fp
   17bfc:	dfc00117 	ldw	ra,4(sp)
   17c00:	df000017 	ldw	fp,0(sp)
   17c04:	dec00204 	addi	sp,sp,8
   17c08:	f800283a 	ret

00017c0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   17c0c:	defffd04 	addi	sp,sp,-12
   17c10:	dfc00215 	stw	ra,8(sp)
   17c14:	df000115 	stw	fp,4(sp)
   17c18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   17c1c:	0009883a 	mov	r4,zero
   17c20:	00180840 	call	18084 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   17c24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   17c28:	00180bc0 	call	180bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   17c2c:	01820034 	movhi	r6,2048
   17c30:	31816204 	addi	r6,r6,1416
   17c34:	01420034 	movhi	r5,2048
   17c38:	29416204 	addi	r5,r5,1416
   17c3c:	01020034 	movhi	r4,2048
   17c40:	21016204 	addi	r4,r4,1416
   17c44:	001e7600 	call	1e760 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   17c48:	001e4900 	call	1e490 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   17c4c:	010000b4 	movhi	r4,2
   17c50:	21393c04 	addi	r4,r4,-6928
   17c54:	001f7b80 	call	1f7b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   17c58:	d0a05597 	ldw	r2,-32426(gp)
   17c5c:	d0e05697 	ldw	r3,-32422(gp)
   17c60:	d1205797 	ldw	r4,-32418(gp)
   17c64:	200d883a 	mov	r6,r4
   17c68:	180b883a 	mov	r5,r3
   17c6c:	1009883a 	mov	r4,r2
   17c70:	00052640 	call	5264 <main>
   17c74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   17c78:	01000044 	movi	r4,1
   17c7c:	00178340 	call	17834 <close>
  exit (result);
   17c80:	e13fff17 	ldw	r4,-4(fp)
   17c84:	001f7cc0 	call	1f7cc <exit>

00017c88 <__malloc_lock>:
   17c88:	defffe04 	addi	sp,sp,-8
   17c8c:	df000115 	stw	fp,4(sp)
   17c90:	df000104 	addi	fp,sp,4
   17c94:	e13fff15 	stw	r4,-4(fp)
   17c98:	0001883a 	nop
   17c9c:	e037883a 	mov	sp,fp
   17ca0:	df000017 	ldw	fp,0(sp)
   17ca4:	dec00104 	addi	sp,sp,4
   17ca8:	f800283a 	ret

00017cac <__malloc_unlock>:
   17cac:	defffe04 	addi	sp,sp,-8
   17cb0:	df000115 	stw	fp,4(sp)
   17cb4:	df000104 	addi	fp,sp,4
   17cb8:	e13fff15 	stw	r4,-4(fp)
   17cbc:	0001883a 	nop
   17cc0:	e037883a 	mov	sp,fp
   17cc4:	df000017 	ldw	fp,0(sp)
   17cc8:	dec00104 	addi	sp,sp,4
   17ccc:	f800283a 	ret

00017cd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17cd0:	defffe04 	addi	sp,sp,-8
   17cd4:	dfc00115 	stw	ra,4(sp)
   17cd8:	df000015 	stw	fp,0(sp)
   17cdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17ce0:	d0a00f97 	ldw	r2,-32706(gp)
   17ce4:	10000326 	beq	r2,zero,17cf4 <alt_get_errno+0x24>
   17ce8:	d0a00f97 	ldw	r2,-32706(gp)
   17cec:	103ee83a 	callr	r2
   17cf0:	00000106 	br	17cf8 <alt_get_errno+0x28>
   17cf4:	d0a05384 	addi	r2,gp,-32434
}
   17cf8:	e037883a 	mov	sp,fp
   17cfc:	dfc00117 	ldw	ra,4(sp)
   17d00:	df000017 	ldw	fp,0(sp)
   17d04:	dec00204 	addi	sp,sp,8
   17d08:	f800283a 	ret

00017d0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   17d0c:	defff904 	addi	sp,sp,-28
   17d10:	dfc00615 	stw	ra,24(sp)
   17d14:	df000515 	stw	fp,20(sp)
   17d18:	df000504 	addi	fp,sp,20
   17d1c:	e13ffd15 	stw	r4,-12(fp)
   17d20:	e17ffe15 	stw	r5,-8(fp)
   17d24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17d28:	e0bffd17 	ldw	r2,-12(fp)
   17d2c:	10000616 	blt	r2,zero,17d48 <read+0x3c>
   17d30:	e0bffd17 	ldw	r2,-12(fp)
   17d34:	10c00324 	muli	r3,r2,12
   17d38:	00820034 	movhi	r2,2048
   17d3c:	1084fb04 	addi	r2,r2,5100
   17d40:	1885883a 	add	r2,r3,r2
   17d44:	00000106 	br	17d4c <read+0x40>
   17d48:	0005883a 	mov	r2,zero
   17d4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   17d50:	e0bffb17 	ldw	r2,-20(fp)
   17d54:	10002226 	beq	r2,zero,17de0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   17d58:	e0bffb17 	ldw	r2,-20(fp)
   17d5c:	10800217 	ldw	r2,8(r2)
   17d60:	108000cc 	andi	r2,r2,3
   17d64:	10800060 	cmpeqi	r2,r2,1
   17d68:	1000181e 	bne	r2,zero,17dcc <read+0xc0>
        (fd->dev->read))
   17d6c:	e0bffb17 	ldw	r2,-20(fp)
   17d70:	10800017 	ldw	r2,0(r2)
   17d74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   17d78:	10001426 	beq	r2,zero,17dcc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   17d7c:	e0bffb17 	ldw	r2,-20(fp)
   17d80:	10800017 	ldw	r2,0(r2)
   17d84:	10800517 	ldw	r2,20(r2)
   17d88:	e0ffff17 	ldw	r3,-4(fp)
   17d8c:	180d883a 	mov	r6,r3
   17d90:	e17ffe17 	ldw	r5,-8(fp)
   17d94:	e13ffb17 	ldw	r4,-20(fp)
   17d98:	103ee83a 	callr	r2
   17d9c:	e0bffc15 	stw	r2,-16(fp)
   17da0:	e0bffc17 	ldw	r2,-16(fp)
   17da4:	1000070e 	bge	r2,zero,17dc4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   17da8:	0017cd00 	call	17cd0 <alt_get_errno>
   17dac:	1007883a 	mov	r3,r2
   17db0:	e0bffc17 	ldw	r2,-16(fp)
   17db4:	0085c83a 	sub	r2,zero,r2
   17db8:	18800015 	stw	r2,0(r3)
          return -1;
   17dbc:	00bfffc4 	movi	r2,-1
   17dc0:	00000c06 	br	17df4 <read+0xe8>
        }
        return rval;
   17dc4:	e0bffc17 	ldw	r2,-16(fp)
   17dc8:	00000a06 	br	17df4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   17dcc:	0017cd00 	call	17cd0 <alt_get_errno>
   17dd0:	1007883a 	mov	r3,r2
   17dd4:	00800344 	movi	r2,13
   17dd8:	18800015 	stw	r2,0(r3)
   17ddc:	00000406 	br	17df0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   17de0:	0017cd00 	call	17cd0 <alt_get_errno>
   17de4:	1007883a 	mov	r3,r2
   17de8:	00801444 	movi	r2,81
   17dec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   17df0:	00bfffc4 	movi	r2,-1
}
   17df4:	e037883a 	mov	sp,fp
   17df8:	dfc00117 	ldw	ra,4(sp)
   17dfc:	df000017 	ldw	fp,0(sp)
   17e00:	dec00204 	addi	sp,sp,8
   17e04:	f800283a 	ret

00017e08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   17e08:	defffe04 	addi	sp,sp,-8
   17e0c:	df000115 	stw	fp,4(sp)
   17e10:	df000104 	addi	fp,sp,4
   17e14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   17e18:	e0bfff17 	ldw	r2,-4(fp)
   17e1c:	108000d0 	cmplti	r2,r2,3
   17e20:	10000d1e 	bne	r2,zero,17e58 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   17e24:	00820034 	movhi	r2,2048
   17e28:	1084fb04 	addi	r2,r2,5100
   17e2c:	e0ffff17 	ldw	r3,-4(fp)
   17e30:	18c00324 	muli	r3,r3,12
   17e34:	10c5883a 	add	r2,r2,r3
   17e38:	10800204 	addi	r2,r2,8
   17e3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   17e40:	00820034 	movhi	r2,2048
   17e44:	1084fb04 	addi	r2,r2,5100
   17e48:	e0ffff17 	ldw	r3,-4(fp)
   17e4c:	18c00324 	muli	r3,r3,12
   17e50:	10c5883a 	add	r2,r2,r3
   17e54:	10000015 	stw	zero,0(r2)
  }
}
   17e58:	0001883a 	nop
   17e5c:	e037883a 	mov	sp,fp
   17e60:	df000017 	ldw	fp,0(sp)
   17e64:	dec00104 	addi	sp,sp,4
   17e68:	f800283a 	ret

00017e6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   17e6c:	defff904 	addi	sp,sp,-28
   17e70:	df000615 	stw	fp,24(sp)
   17e74:	df000604 	addi	fp,sp,24
   17e78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e7c:	0005303a 	rdctl	r2,status
   17e80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e84:	e0fffe17 	ldw	r3,-8(fp)
   17e88:	00bfff84 	movi	r2,-2
   17e8c:	1884703a 	and	r2,r3,r2
   17e90:	1001703a 	wrctl	status,r2
  
  return context;
   17e94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   17e98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   17e9c:	d0a01197 	ldw	r2,-32698(gp)
   17ea0:	10c000c4 	addi	r3,r2,3
   17ea4:	00bfff04 	movi	r2,-4
   17ea8:	1884703a 	and	r2,r3,r2
   17eac:	d0a01195 	stw	r2,-32698(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   17eb0:	d0e01197 	ldw	r3,-32698(gp)
   17eb4:	e0bfff17 	ldw	r2,-4(fp)
   17eb8:	1887883a 	add	r3,r3,r2
   17ebc:	00840034 	movhi	r2,4096
   17ec0:	10800004 	addi	r2,r2,0
   17ec4:	10c0062e 	bgeu	r2,r3,17ee0 <sbrk+0x74>
   17ec8:	e0bffb17 	ldw	r2,-20(fp)
   17ecc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ed0:	e0bffa17 	ldw	r2,-24(fp)
   17ed4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   17ed8:	00bfffc4 	movi	r2,-1
   17edc:	00000b06 	br	17f0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   17ee0:	d0a01197 	ldw	r2,-32698(gp)
   17ee4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   17ee8:	d0e01197 	ldw	r3,-32698(gp)
   17eec:	e0bfff17 	ldw	r2,-4(fp)
   17ef0:	1885883a 	add	r2,r3,r2
   17ef4:	d0a01195 	stw	r2,-32698(gp)
   17ef8:	e0bffb17 	ldw	r2,-20(fp)
   17efc:	e0bffc15 	stw	r2,-16(fp)
   17f00:	e0bffc17 	ldw	r2,-16(fp)
   17f04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   17f08:	e0bffd17 	ldw	r2,-12(fp)
} 
   17f0c:	e037883a 	mov	sp,fp
   17f10:	df000017 	ldw	fp,0(sp)
   17f14:	dec00104 	addi	sp,sp,4
   17f18:	f800283a 	ret

00017f1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17f1c:	defffe04 	addi	sp,sp,-8
   17f20:	dfc00115 	stw	ra,4(sp)
   17f24:	df000015 	stw	fp,0(sp)
   17f28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17f2c:	d0a00f97 	ldw	r2,-32706(gp)
   17f30:	10000326 	beq	r2,zero,17f40 <alt_get_errno+0x24>
   17f34:	d0a00f97 	ldw	r2,-32706(gp)
   17f38:	103ee83a 	callr	r2
   17f3c:	00000106 	br	17f44 <alt_get_errno+0x28>
   17f40:	d0a05384 	addi	r2,gp,-32434
}
   17f44:	e037883a 	mov	sp,fp
   17f48:	dfc00117 	ldw	ra,4(sp)
   17f4c:	df000017 	ldw	fp,0(sp)
   17f50:	dec00204 	addi	sp,sp,8
   17f54:	f800283a 	ret

00017f58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   17f58:	defff904 	addi	sp,sp,-28
   17f5c:	dfc00615 	stw	ra,24(sp)
   17f60:	df000515 	stw	fp,20(sp)
   17f64:	df000504 	addi	fp,sp,20
   17f68:	e13ffd15 	stw	r4,-12(fp)
   17f6c:	e17ffe15 	stw	r5,-8(fp)
   17f70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17f74:	e0bffd17 	ldw	r2,-12(fp)
   17f78:	10000616 	blt	r2,zero,17f94 <write+0x3c>
   17f7c:	e0bffd17 	ldw	r2,-12(fp)
   17f80:	10c00324 	muli	r3,r2,12
   17f84:	00820034 	movhi	r2,2048
   17f88:	1084fb04 	addi	r2,r2,5100
   17f8c:	1885883a 	add	r2,r3,r2
   17f90:	00000106 	br	17f98 <write+0x40>
   17f94:	0005883a 	mov	r2,zero
   17f98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   17f9c:	e0bffb17 	ldw	r2,-20(fp)
   17fa0:	10002126 	beq	r2,zero,18028 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   17fa4:	e0bffb17 	ldw	r2,-20(fp)
   17fa8:	10800217 	ldw	r2,8(r2)
   17fac:	108000cc 	andi	r2,r2,3
   17fb0:	10001826 	beq	r2,zero,18014 <write+0xbc>
   17fb4:	e0bffb17 	ldw	r2,-20(fp)
   17fb8:	10800017 	ldw	r2,0(r2)
   17fbc:	10800617 	ldw	r2,24(r2)
   17fc0:	10001426 	beq	r2,zero,18014 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   17fc4:	e0bffb17 	ldw	r2,-20(fp)
   17fc8:	10800017 	ldw	r2,0(r2)
   17fcc:	10800617 	ldw	r2,24(r2)
   17fd0:	e0ffff17 	ldw	r3,-4(fp)
   17fd4:	180d883a 	mov	r6,r3
   17fd8:	e17ffe17 	ldw	r5,-8(fp)
   17fdc:	e13ffb17 	ldw	r4,-20(fp)
   17fe0:	103ee83a 	callr	r2
   17fe4:	e0bffc15 	stw	r2,-16(fp)
   17fe8:	e0bffc17 	ldw	r2,-16(fp)
   17fec:	1000070e 	bge	r2,zero,1800c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   17ff0:	0017f1c0 	call	17f1c <alt_get_errno>
   17ff4:	1007883a 	mov	r3,r2
   17ff8:	e0bffc17 	ldw	r2,-16(fp)
   17ffc:	0085c83a 	sub	r2,zero,r2
   18000:	18800015 	stw	r2,0(r3)
        return -1;
   18004:	00bfffc4 	movi	r2,-1
   18008:	00000c06 	br	1803c <write+0xe4>
      }
      return rval;
   1800c:	e0bffc17 	ldw	r2,-16(fp)
   18010:	00000a06 	br	1803c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   18014:	0017f1c0 	call	17f1c <alt_get_errno>
   18018:	1007883a 	mov	r3,r2
   1801c:	00800344 	movi	r2,13
   18020:	18800015 	stw	r2,0(r3)
   18024:	00000406 	br	18038 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   18028:	0017f1c0 	call	17f1c <alt_get_errno>
   1802c:	1007883a 	mov	r3,r2
   18030:	00801444 	movi	r2,81
   18034:	18800015 	stw	r2,0(r3)
  }
  return -1;
   18038:	00bfffc4 	movi	r2,-1
}
   1803c:	e037883a 	mov	sp,fp
   18040:	dfc00117 	ldw	ra,4(sp)
   18044:	df000017 	ldw	fp,0(sp)
   18048:	dec00204 	addi	sp,sp,8
   1804c:	f800283a 	ret

00018050 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   18050:	defffd04 	addi	sp,sp,-12
   18054:	dfc00215 	stw	ra,8(sp)
   18058:	df000115 	stw	fp,4(sp)
   1805c:	df000104 	addi	fp,sp,4
   18060:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   18064:	d1600c84 	addi	r5,gp,-32718
   18068:	e13fff17 	ldw	r4,-4(fp)
   1806c:	001e3ec0 	call	1e3ec <alt_dev_llist_insert>
}
   18070:	e037883a 	mov	sp,fp
   18074:	dfc00117 	ldw	ra,4(sp)
   18078:	df000017 	ldw	fp,0(sp)
   1807c:	dec00204 	addi	sp,sp,8
   18080:	f800283a 	ret

00018084 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   18084:	defffd04 	addi	sp,sp,-12
   18088:	dfc00215 	stw	ra,8(sp)
   1808c:	df000115 	stw	fp,4(sp)
   18090:	df000104 	addi	fp,sp,4
   18094:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   18098:	001ec040 	call	1ec04 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1809c:	00800044 	movi	r2,1
   180a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   180a4:	0001883a 	nop
   180a8:	e037883a 	mov	sp,fp
   180ac:	dfc00117 	ldw	ra,4(sp)
   180b0:	df000017 	ldw	fp,0(sp)
   180b4:	dec00204 	addi	sp,sp,8
   180b8:	f800283a 	ret

000180bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   180bc:	defffd04 	addi	sp,sp,-12
   180c0:	dfc00215 	stw	ra,8(sp)
   180c4:	df000115 	stw	fp,4(sp)
   180c8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER1MS, timer1ms);
   180cc:	01c0fa04 	movi	r7,1000
   180d0:	000d883a 	mov	r6,zero
   180d4:	000b883a 	mov	r5,zero
   180d8:	01000134 	movhi	r4,4
   180dc:	210c1004 	addi	r4,r4,12352
   180e0:	001baa40 	call	1baa4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1US, timer1us);
    ALTERA_AVALON_CFI_FLASH_INIT ( FLASH_CONTROLLER, flash_controller);
   180e4:	01020034 	movhi	r4,2048
   180e8:	21055b04 	addi	r4,r4,5484
   180ec:	00184440 	call	18444 <alt_flash_cfi_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   180f0:	01800144 	movi	r6,5
   180f4:	000b883a 	mov	r5,zero
   180f8:	01020034 	movhi	r4,2048
   180fc:	21059c04 	addi	r4,r4,5744
   18100:	001a2540 	call	1a254 <altera_avalon_jtag_uart_init>
   18104:	01020034 	movhi	r4,2048
   18108:	21059204 	addi	r4,r4,5704
   1810c:	00180500 	call	18050 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( CHARACTER_LCD, character_lcd);
   18110:	01020034 	movhi	r4,2048
   18114:	2109b404 	addi	r4,r4,9936
   18118:	001b8980 	call	1b898 <altera_avalon_lcd_16207_init>
   1811c:	01020034 	movhi	r4,2048
   18120:	2109aa04 	addi	r4,r4,9896
   18124:	00180500 	call	18050 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
   18128:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   1812c:	018000c4 	movi	r6,3
   18130:	000b883a 	mov	r5,zero
   18134:	01020034 	movhi	r4,2048
   18138:	2109fc04 	addi	r4,r4,10224
   1813c:	001bc280 	call	1bc28 <altera_avalon_uart_init>
   18140:	01020034 	movhi	r4,2048
   18144:	2109f204 	addi	r4,r4,10184
   18148:	00180500 	call	18050 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2, ps2);
   1814c:	01020034 	movhi	r4,2048
   18150:	210a2304 	addi	r4,r4,10380
   18154:	001c5140 	call	1c514 <alt_up_ps2_init>
   18158:	01020034 	movhi	r4,2048
   1815c:	210a2304 	addi	r4,r4,10380
   18160:	00180500 	call	18050 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA, video_character_buffer_with_dma);
   18164:	00820034 	movhi	r2,2048
   18168:	108a3104 	addi	r2,r2,10436
   1816c:	10800a17 	ldw	r2,40(r2)
   18170:	10800104 	addi	r2,r2,4
   18174:	10800017 	ldw	r2,0(r2)
   18178:	10ffffcc 	andi	r3,r2,65535
   1817c:	00820034 	movhi	r2,2048
   18180:	108a3104 	addi	r2,r2,10436
   18184:	10c00c15 	stw	r3,48(r2)
   18188:	00820034 	movhi	r2,2048
   1818c:	108a3104 	addi	r2,r2,10436
   18190:	10800a17 	ldw	r2,40(r2)
   18194:	10800104 	addi	r2,r2,4
   18198:	10800017 	ldw	r2,0(r2)
   1819c:	1006d43a 	srli	r3,r2,16
   181a0:	00820034 	movhi	r2,2048
   181a4:	108a3104 	addi	r2,r2,10436
   181a8:	10c00d15 	stw	r3,52(r2)
   181ac:	00820034 	movhi	r2,2048
   181b0:	108a3104 	addi	r2,r2,10436
   181b4:	10800c17 	ldw	r2,48(r2)
   181b8:	10801068 	cmpgeui	r2,r2,65
   181bc:	1000081e 	bne	r2,zero,181e0 <alt_sys_init+0x124>
   181c0:	00820034 	movhi	r2,2048
   181c4:	108a3104 	addi	r2,r2,10436
   181c8:	00c00fc4 	movi	r3,63
   181cc:	10c00f15 	stw	r3,60(r2)
   181d0:	00820034 	movhi	r2,2048
   181d4:	108a3104 	addi	r2,r2,10436
   181d8:	00c00184 	movi	r3,6
   181dc:	10c01015 	stw	r3,64(r2)
   181e0:	00820034 	movhi	r2,2048
   181e4:	108a3104 	addi	r2,r2,10436
   181e8:	10800d17 	ldw	r2,52(r2)
   181ec:	10800868 	cmpgeui	r2,r2,33
   181f0:	1000041e 	bne	r2,zero,18204 <alt_sys_init+0x148>
   181f4:	00820034 	movhi	r2,2048
   181f8:	108a3104 	addi	r2,r2,10436
   181fc:	00c007c4 	movi	r3,31
   18200:	10c01115 	stw	r3,68(r2)
   18204:	01020034 	movhi	r4,2048
   18208:	210a3104 	addi	r4,r4,10436
   1820c:	001ca9c0 	call	1ca9c <alt_up_char_buffer_init>
   18210:	01020034 	movhi	r4,2048
   18214:	210a3104 	addi	r4,r4,10436
   18218:	00180500 	call	18050 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
   1821c:	00820034 	movhi	r2,2048
   18220:	108a4304 	addi	r2,r2,10508
   18224:	10800a17 	ldw	r2,40(r2)
   18228:	10800017 	ldw	r2,0(r2)
   1822c:	1007883a 	mov	r3,r2
   18230:	00820034 	movhi	r2,2048
   18234:	108a4304 	addi	r2,r2,10508
   18238:	10c00b15 	stw	r3,44(r2)
   1823c:	00820034 	movhi	r2,2048
   18240:	108a4304 	addi	r2,r2,10508
   18244:	10800a17 	ldw	r2,40(r2)
   18248:	10800104 	addi	r2,r2,4
   1824c:	10800017 	ldw	r2,0(r2)
   18250:	1007883a 	mov	r3,r2
   18254:	00820034 	movhi	r2,2048
   18258:	108a4304 	addi	r2,r2,10508
   1825c:	10c00c15 	stw	r3,48(r2)
   18260:	00820034 	movhi	r2,2048
   18264:	108a4304 	addi	r2,r2,10508
   18268:	10800a17 	ldw	r2,40(r2)
   1826c:	10800204 	addi	r2,r2,8
   18270:	10800017 	ldw	r2,0(r2)
   18274:	10ffffcc 	andi	r3,r2,65535
   18278:	00820034 	movhi	r2,2048
   1827c:	108a4304 	addi	r2,r2,10508
   18280:	10c00f15 	stw	r3,60(r2)
   18284:	00820034 	movhi	r2,2048
   18288:	108a4304 	addi	r2,r2,10508
   1828c:	10800a17 	ldw	r2,40(r2)
   18290:	10800204 	addi	r2,r2,8
   18294:	10800017 	ldw	r2,0(r2)
   18298:	1006d43a 	srli	r3,r2,16
   1829c:	00820034 	movhi	r2,2048
   182a0:	108a4304 	addi	r2,r2,10508
   182a4:	10c01015 	stw	r3,64(r2)
   182a8:	00820034 	movhi	r2,2048
   182ac:	108a4304 	addi	r2,r2,10508
   182b0:	10800a17 	ldw	r2,40(r2)
   182b4:	10800304 	addi	r2,r2,12
   182b8:	10800017 	ldw	r2,0(r2)
   182bc:	1005d07a 	srai	r2,r2,1
   182c0:	10c0004c 	andi	r3,r2,1
   182c4:	00820034 	movhi	r2,2048
   182c8:	108a4304 	addi	r2,r2,10508
   182cc:	10c00d15 	stw	r3,52(r2)
   182d0:	00820034 	movhi	r2,2048
   182d4:	108a4304 	addi	r2,r2,10508
   182d8:	10800a17 	ldw	r2,40(r2)
   182dc:	10800304 	addi	r2,r2,12
   182e0:	10800017 	ldw	r2,0(r2)
   182e4:	1005d13a 	srai	r2,r2,4
   182e8:	10c003cc 	andi	r3,r2,15
   182ec:	00820034 	movhi	r2,2048
   182f0:	108a4304 	addi	r2,r2,10508
   182f4:	10c00e15 	stw	r3,56(r2)
   182f8:	00820034 	movhi	r2,2048
   182fc:	108a4304 	addi	r2,r2,10508
   18300:	10800a17 	ldw	r2,40(r2)
   18304:	10800304 	addi	r2,r2,12
   18308:	10800017 	ldw	r2,0(r2)
   1830c:	1005d43a 	srai	r2,r2,16
   18310:	e0bfff05 	stb	r2,-4(fp)
   18314:	00820034 	movhi	r2,2048
   18318:	108a4304 	addi	r2,r2,10508
   1831c:	10800a17 	ldw	r2,40(r2)
   18320:	10800304 	addi	r2,r2,12
   18324:	10800017 	ldw	r2,0(r2)
   18328:	1004d63a 	srli	r2,r2,24
   1832c:	e0bfff45 	stb	r2,-3(fp)
   18330:	00820034 	movhi	r2,2048
   18334:	108a4304 	addi	r2,r2,10508
   18338:	10800e17 	ldw	r2,56(r2)
   1833c:	10800058 	cmpnei	r2,r2,1
   18340:	1000041e 	bne	r2,zero,18354 <alt_sys_init+0x298>
   18344:	00820034 	movhi	r2,2048
   18348:	108a4304 	addi	r2,r2,10508
   1834c:	10001115 	stw	zero,68(r2)
   18350:	00000e06 	br	1838c <alt_sys_init+0x2d0>
   18354:	00820034 	movhi	r2,2048
   18358:	108a4304 	addi	r2,r2,10508
   1835c:	10800e17 	ldw	r2,56(r2)
   18360:	10800098 	cmpnei	r2,r2,2
   18364:	1000051e 	bne	r2,zero,1837c <alt_sys_init+0x2c0>
   18368:	00820034 	movhi	r2,2048
   1836c:	108a4304 	addi	r2,r2,10508
   18370:	00c00044 	movi	r3,1
   18374:	10c01115 	stw	r3,68(r2)
   18378:	00000406 	br	1838c <alt_sys_init+0x2d0>
   1837c:	00820034 	movhi	r2,2048
   18380:	108a4304 	addi	r2,r2,10508
   18384:	00c00084 	movi	r3,2
   18388:	10c01115 	stw	r3,68(r2)
   1838c:	e0bfff03 	ldbu	r2,-4(fp)
   18390:	00c00804 	movi	r3,32
   18394:	1885c83a 	sub	r2,r3,r2
   18398:	00ffffc4 	movi	r3,-1
   1839c:	1886d83a 	srl	r3,r3,r2
   183a0:	00820034 	movhi	r2,2048
   183a4:	108a4304 	addi	r2,r2,10508
   183a8:	10c01215 	stw	r3,72(r2)
   183ac:	e0ffff03 	ldbu	r3,-4(fp)
   183b0:	00820034 	movhi	r2,2048
   183b4:	108a4304 	addi	r2,r2,10508
   183b8:	10801117 	ldw	r2,68(r2)
   183bc:	1887883a 	add	r3,r3,r2
   183c0:	00820034 	movhi	r2,2048
   183c4:	108a4304 	addi	r2,r2,10508
   183c8:	10c01315 	stw	r3,76(r2)
   183cc:	e0bfff43 	ldbu	r2,-3(fp)
   183d0:	00c00804 	movi	r3,32
   183d4:	1885c83a 	sub	r2,r3,r2
   183d8:	00ffffc4 	movi	r3,-1
   183dc:	1886d83a 	srl	r3,r3,r2
   183e0:	00820034 	movhi	r2,2048
   183e4:	108a4304 	addi	r2,r2,10508
   183e8:	10c01415 	stw	r3,80(r2)
   183ec:	01020034 	movhi	r4,2048
   183f0:	210a4304 	addi	r4,r4,10508
   183f4:	00180500 	call	18050 <alt_dev_reg>
}
   183f8:	0001883a 	nop
   183fc:	e037883a 	mov	sp,fp
   18400:	dfc00117 	ldw	ra,4(sp)
   18404:	df000017 	ldw	fp,0(sp)
   18408:	dec00204 	addi	sp,sp,8
   1840c:	f800283a 	ret

00018410 <alt_flash_device_register>:
   18410:	defffd04 	addi	sp,sp,-12
   18414:	dfc00215 	stw	ra,8(sp)
   18418:	df000115 	stw	fp,4(sp)
   1841c:	df000104 	addi	fp,sp,4
   18420:	e13fff15 	stw	r4,-4(fp)
   18424:	d1601384 	addi	r5,gp,-32690
   18428:	e13fff17 	ldw	r4,-4(fp)
   1842c:	001e3ec0 	call	1e3ec <alt_dev_llist_insert>
   18430:	e037883a 	mov	sp,fp
   18434:	dfc00117 	ldw	ra,4(sp)
   18438:	df000017 	ldw	fp,0(sp)
   1843c:	dec00204 	addi	sp,sp,8
   18440:	f800283a 	ret

00018444 <alt_flash_cfi_init>:
   18444:	defffc04 	addi	sp,sp,-16
   18448:	dfc00315 	stw	ra,12(sp)
   1844c:	df000215 	stw	fp,8(sp)
   18450:	df000204 	addi	fp,sp,8
   18454:	e13fff15 	stw	r4,-4(fp)
   18458:	e03ffe15 	stw	zero,-8(fp)
   1845c:	e13fff17 	ldw	r4,-4(fp)
   18460:	00198a80 	call	198a8 <alt_read_cfi_width>
   18464:	e0bffe15 	stw	r2,-8(fp)
   18468:	e0bffe17 	ldw	r2,-8(fp)
   1846c:	1000031e 	bne	r2,zero,1847c <alt_flash_cfi_init+0x38>
   18470:	e13fff17 	ldw	r4,-4(fp)
   18474:	00190000 	call	19000 <alt_set_flash_width_func>
   18478:	e0bffe15 	stw	r2,-8(fp)
   1847c:	e0bffe17 	ldw	r2,-8(fp)
   18480:	1000031e 	bne	r2,zero,18490 <alt_flash_cfi_init+0x4c>
   18484:	e13fff17 	ldw	r4,-4(fp)
   18488:	00192e00 	call	192e0 <alt_read_cfi_table>
   1848c:	e0bffe15 	stw	r2,-8(fp)
   18490:	e0bffe17 	ldw	r2,-8(fp)
   18494:	1000031e 	bne	r2,zero,184a4 <alt_flash_cfi_init+0x60>
   18498:	e13fff17 	ldw	r4,-4(fp)
   1849c:	00191c40 	call	191c4 <alt_set_flash_algorithm_func>
   184a0:	e0bffe15 	stw	r2,-8(fp)
   184a4:	e0bffe17 	ldw	r2,-8(fp)
   184a8:	1000041e 	bne	r2,zero,184bc <alt_flash_cfi_init+0x78>
   184ac:	e0bfff17 	ldw	r2,-4(fp)
   184b0:	1009883a 	mov	r4,r2
   184b4:	00184100 	call	18410 <alt_flash_device_register>
   184b8:	e0bffe15 	stw	r2,-8(fp)
   184bc:	e0bffe17 	ldw	r2,-8(fp)
   184c0:	e037883a 	mov	sp,fp
   184c4:	dfc00117 	ldw	ra,4(sp)
   184c8:	df000017 	ldw	fp,0(sp)
   184cc:	dec00204 	addi	sp,sp,8
   184d0:	f800283a 	ret

000184d4 <alt_flash_cfi_write>:
   184d4:	defff104 	addi	sp,sp,-60
   184d8:	dfc00e15 	stw	ra,56(sp)
   184dc:	df000d15 	stw	fp,52(sp)
   184e0:	df000d04 	addi	fp,sp,52
   184e4:	e13ffc15 	stw	r4,-16(fp)
   184e8:	e17ffd15 	stw	r5,-12(fp)
   184ec:	e1bffe15 	stw	r6,-8(fp)
   184f0:	e1ffff15 	stw	r7,-4(fp)
   184f4:	e03ff415 	stw	zero,-48(fp)
   184f8:	e0bfff17 	ldw	r2,-4(fp)
   184fc:	e0bff815 	stw	r2,-32(fp)
   18500:	e0bffd17 	ldw	r2,-12(fp)
   18504:	e0bff915 	stw	r2,-28(fp)
   18508:	e0bffc17 	ldw	r2,-16(fp)
   1850c:	e0bffa15 	stw	r2,-24(fp)
   18510:	e03ff515 	stw	zero,-44(fp)
   18514:	00008706 	br	18734 <alt_flash_cfi_write+0x260>
   18518:	e0fffa17 	ldw	r3,-24(fp)
   1851c:	e0bff517 	ldw	r2,-44(fp)
   18520:	1004913a 	slli	r2,r2,4
   18524:	1885883a 	add	r2,r3,r2
   18528:	10800d04 	addi	r2,r2,52
   1852c:	10800017 	ldw	r2,0(r2)
   18530:	e0fffd17 	ldw	r3,-12(fp)
   18534:	18807c16 	blt	r3,r2,18728 <alt_flash_cfi_write+0x254>
   18538:	e0fffa17 	ldw	r3,-24(fp)
   1853c:	e0bff517 	ldw	r2,-44(fp)
   18540:	1004913a 	slli	r2,r2,4
   18544:	1885883a 	add	r2,r3,r2
   18548:	10800d04 	addi	r2,r2,52
   1854c:	10c00017 	ldw	r3,0(r2)
   18550:	e13ffa17 	ldw	r4,-24(fp)
   18554:	e0bff517 	ldw	r2,-44(fp)
   18558:	1004913a 	slli	r2,r2,4
   1855c:	2085883a 	add	r2,r4,r2
   18560:	10800e04 	addi	r2,r2,56
   18564:	10800017 	ldw	r2,0(r2)
   18568:	1885883a 	add	r2,r3,r2
   1856c:	e0fffd17 	ldw	r3,-12(fp)
   18570:	18806d0e 	bge	r3,r2,18728 <alt_flash_cfi_write+0x254>
   18574:	e0fffa17 	ldw	r3,-24(fp)
   18578:	e0bff517 	ldw	r2,-44(fp)
   1857c:	1004913a 	slli	r2,r2,4
   18580:	1885883a 	add	r2,r3,r2
   18584:	10800d04 	addi	r2,r2,52
   18588:	10800017 	ldw	r2,0(r2)
   1858c:	e0bff715 	stw	r2,-36(fp)
   18590:	e03ff615 	stw	zero,-40(fp)
   18594:	00005c06 	br	18708 <alt_flash_cfi_write+0x234>
   18598:	e0fffd17 	ldw	r3,-12(fp)
   1859c:	e0bff717 	ldw	r2,-36(fp)
   185a0:	18804d16 	blt	r3,r2,186d8 <alt_flash_cfi_write+0x204>
   185a4:	e0fffa17 	ldw	r3,-24(fp)
   185a8:	e0bff517 	ldw	r2,-44(fp)
   185ac:	10800104 	addi	r2,r2,4
   185b0:	1004913a 	slli	r2,r2,4
   185b4:	1885883a 	add	r2,r3,r2
   185b8:	10c00017 	ldw	r3,0(r2)
   185bc:	e0bff717 	ldw	r2,-36(fp)
   185c0:	1885883a 	add	r2,r3,r2
   185c4:	e0fffd17 	ldw	r3,-12(fp)
   185c8:	1880430e 	bge	r3,r2,186d8 <alt_flash_cfi_write+0x204>
   185cc:	e0fffa17 	ldw	r3,-24(fp)
   185d0:	e0bff517 	ldw	r2,-44(fp)
   185d4:	10800104 	addi	r2,r2,4
   185d8:	1004913a 	slli	r2,r2,4
   185dc:	1885883a 	add	r2,r3,r2
   185e0:	10c00017 	ldw	r3,0(r2)
   185e4:	e0bff717 	ldw	r2,-36(fp)
   185e8:	1887883a 	add	r3,r3,r2
   185ec:	e0bffd17 	ldw	r2,-12(fp)
   185f0:	1885c83a 	sub	r2,r3,r2
   185f4:	e0bffb15 	stw	r2,-20(fp)
   185f8:	e0fffb17 	ldw	r3,-20(fp)
   185fc:	e0bfff17 	ldw	r2,-4(fp)
   18600:	1880010e 	bge	r3,r2,18608 <alt_flash_cfi_write+0x134>
   18604:	1805883a 	mov	r2,r3
   18608:	e0bffb15 	stw	r2,-20(fp)
   1860c:	e0bffa17 	ldw	r2,-24(fp)
   18610:	10c00a17 	ldw	r3,40(r2)
   18614:	e0bffd17 	ldw	r2,-12(fp)
   18618:	1885883a 	add	r2,r3,r2
   1861c:	e0fffb17 	ldw	r3,-20(fp)
   18620:	180d883a 	mov	r6,r3
   18624:	100b883a 	mov	r5,r2
   18628:	e13ffe17 	ldw	r4,-8(fp)
   1862c:	00095000 	call	9500 <memcmp>
   18630:	10001326 	beq	r2,zero,18680 <alt_flash_cfi_write+0x1ac>
   18634:	e0bffa17 	ldw	r2,-24(fp)
   18638:	10800817 	ldw	r2,32(r2)
   1863c:	e0fffa17 	ldw	r3,-24(fp)
   18640:	e17ff717 	ldw	r5,-36(fp)
   18644:	1809883a 	mov	r4,r3
   18648:	103ee83a 	callr	r2
   1864c:	e0bff415 	stw	r2,-48(fp)
   18650:	e0bff417 	ldw	r2,-48(fp)
   18654:	10000a1e 	bne	r2,zero,18680 <alt_flash_cfi_write+0x1ac>
   18658:	e0bffa17 	ldw	r2,-24(fp)
   1865c:	10800917 	ldw	r2,36(r2)
   18660:	e13ffa17 	ldw	r4,-24(fp)
   18664:	e0fffb17 	ldw	r3,-20(fp)
   18668:	d8c00015 	stw	r3,0(sp)
   1866c:	e1fffe17 	ldw	r7,-8(fp)
   18670:	e1bffd17 	ldw	r6,-12(fp)
   18674:	e17ff717 	ldw	r5,-36(fp)
   18678:	103ee83a 	callr	r2
   1867c:	e0bff415 	stw	r2,-48(fp)
   18680:	e0ffff17 	ldw	r3,-4(fp)
   18684:	e0bffb17 	ldw	r2,-20(fp)
   18688:	18802e26 	beq	r3,r2,18744 <alt_flash_cfi_write+0x270>
   1868c:	e0bff417 	ldw	r2,-48(fp)
   18690:	10002c1e 	bne	r2,zero,18744 <alt_flash_cfi_write+0x270>
   18694:	e0ffff17 	ldw	r3,-4(fp)
   18698:	e0bffb17 	ldw	r2,-20(fp)
   1869c:	1885c83a 	sub	r2,r3,r2
   186a0:	e0bfff15 	stw	r2,-4(fp)
   186a4:	e0fffa17 	ldw	r3,-24(fp)
   186a8:	e0bff517 	ldw	r2,-44(fp)
   186ac:	10800104 	addi	r2,r2,4
   186b0:	1004913a 	slli	r2,r2,4
   186b4:	1885883a 	add	r2,r3,r2
   186b8:	10c00017 	ldw	r3,0(r2)
   186bc:	e0bff717 	ldw	r2,-36(fp)
   186c0:	1885883a 	add	r2,r3,r2
   186c4:	e0bffd15 	stw	r2,-12(fp)
   186c8:	e0bffb17 	ldw	r2,-20(fp)
   186cc:	e0fffe17 	ldw	r3,-8(fp)
   186d0:	1885883a 	add	r2,r3,r2
   186d4:	e0bffe15 	stw	r2,-8(fp)
   186d8:	e0fffa17 	ldw	r3,-24(fp)
   186dc:	e0bff517 	ldw	r2,-44(fp)
   186e0:	10800104 	addi	r2,r2,4
   186e4:	1004913a 	slli	r2,r2,4
   186e8:	1885883a 	add	r2,r3,r2
   186ec:	10800017 	ldw	r2,0(r2)
   186f0:	e0fff717 	ldw	r3,-36(fp)
   186f4:	1885883a 	add	r2,r3,r2
   186f8:	e0bff715 	stw	r2,-36(fp)
   186fc:	e0bff617 	ldw	r2,-40(fp)
   18700:	10800044 	addi	r2,r2,1
   18704:	e0bff615 	stw	r2,-40(fp)
   18708:	e0fffa17 	ldw	r3,-24(fp)
   1870c:	e0bff517 	ldw	r2,-44(fp)
   18710:	1004913a 	slli	r2,r2,4
   18714:	1885883a 	add	r2,r3,r2
   18718:	10800f04 	addi	r2,r2,60
   1871c:	10800017 	ldw	r2,0(r2)
   18720:	e0fff617 	ldw	r3,-40(fp)
   18724:	18bf9c16 	blt	r3,r2,18598 <__alt_data_end+0xf0018598>
   18728:	e0bff517 	ldw	r2,-44(fp)
   1872c:	10800044 	addi	r2,r2,1
   18730:	e0bff515 	stw	r2,-44(fp)
   18734:	e0bffa17 	ldw	r2,-24(fp)
   18738:	10800c17 	ldw	r2,48(r2)
   1873c:	e0fff517 	ldw	r3,-44(fp)
   18740:	18bf7516 	blt	r3,r2,18518 <__alt_data_end+0xf0018518>
   18744:	e0bffa17 	ldw	r2,-24(fp)
   18748:	10c00a17 	ldw	r3,40(r2)
   1874c:	e0bff917 	ldw	r2,-28(fp)
   18750:	1885883a 	add	r2,r3,r2
   18754:	e0fff817 	ldw	r3,-32(fp)
   18758:	180b883a 	mov	r5,r3
   1875c:	1009883a 	mov	r4,r2
   18760:	001e3380 	call	1e338 <alt_dcache_flush>
   18764:	e0bff417 	ldw	r2,-48(fp)
   18768:	e037883a 	mov	sp,fp
   1876c:	dfc00117 	ldw	ra,4(sp)
   18770:	df000017 	ldw	fp,0(sp)
   18774:	dec00204 	addi	sp,sp,8
   18778:	f800283a 	ret

0001877c <alt_flash_cfi_get_info>:
   1877c:	defffa04 	addi	sp,sp,-24
   18780:	df000515 	stw	fp,20(sp)
   18784:	df000504 	addi	fp,sp,20
   18788:	e13ffd15 	stw	r4,-12(fp)
   1878c:	e17ffe15 	stw	r5,-8(fp)
   18790:	e1bfff15 	stw	r6,-4(fp)
   18794:	e03ffb15 	stw	zero,-20(fp)
   18798:	e0bffd17 	ldw	r2,-12(fp)
   1879c:	e0bffc15 	stw	r2,-16(fp)
   187a0:	e0bffc17 	ldw	r2,-16(fp)
   187a4:	10c00c17 	ldw	r3,48(r2)
   187a8:	e0bfff17 	ldw	r2,-4(fp)
   187ac:	10c00015 	stw	r3,0(r2)
   187b0:	e0bffc17 	ldw	r2,-16(fp)
   187b4:	10800c17 	ldw	r2,48(r2)
   187b8:	1000031e 	bne	r2,zero,187c8 <alt_flash_cfi_get_info+0x4c>
   187bc:	00bffec4 	movi	r2,-5
   187c0:	e0bffb15 	stw	r2,-20(fp)
   187c4:	00000b06 	br	187f4 <alt_flash_cfi_get_info+0x78>
   187c8:	e0bffc17 	ldw	r2,-16(fp)
   187cc:	10800c17 	ldw	r2,48(r2)
   187d0:	10800250 	cmplti	r2,r2,9
   187d4:	1000031e 	bne	r2,zero,187e4 <alt_flash_cfi_get_info+0x68>
   187d8:	00bffd04 	movi	r2,-12
   187dc:	e0bffb15 	stw	r2,-20(fp)
   187e0:	00000406 	br	187f4 <alt_flash_cfi_get_info+0x78>
   187e4:	e0bffc17 	ldw	r2,-16(fp)
   187e8:	10c00d04 	addi	r3,r2,52
   187ec:	e0bffe17 	ldw	r2,-8(fp)
   187f0:	10c00015 	stw	r3,0(r2)
   187f4:	e0bffb17 	ldw	r2,-20(fp)
   187f8:	e037883a 	mov	sp,fp
   187fc:	df000017 	ldw	fp,0(sp)
   18800:	dec00104 	addi	sp,sp,4
   18804:	f800283a 	ret

00018808 <alt_flash_cfi_read>:
   18808:	defff904 	addi	sp,sp,-28
   1880c:	dfc00615 	stw	ra,24(sp)
   18810:	df000515 	stw	fp,20(sp)
   18814:	df000504 	addi	fp,sp,20
   18818:	e13ffc15 	stw	r4,-16(fp)
   1881c:	e17ffd15 	stw	r5,-12(fp)
   18820:	e1bffe15 	stw	r6,-8(fp)
   18824:	e1ffff15 	stw	r7,-4(fp)
   18828:	e0bffc17 	ldw	r2,-16(fp)
   1882c:	e0bffb15 	stw	r2,-20(fp)
   18830:	e0bffb17 	ldw	r2,-20(fp)
   18834:	10c00a17 	ldw	r3,40(r2)
   18838:	e0bffd17 	ldw	r2,-12(fp)
   1883c:	1885883a 	add	r2,r3,r2
   18840:	e0ffff17 	ldw	r3,-4(fp)
   18844:	180d883a 	mov	r6,r3
   18848:	100b883a 	mov	r5,r2
   1884c:	e13ffe17 	ldw	r4,-8(fp)
   18850:	000957c0 	call	957c <memcpy>
   18854:	0005883a 	mov	r2,zero
   18858:	e037883a 	mov	sp,fp
   1885c:	dfc00117 	ldw	ra,4(sp)
   18860:	df000017 	ldw	fp,0(sp)
   18864:	dec00204 	addi	sp,sp,8
   18868:	f800283a 	ret

0001886c <alt_write_value_to_flash>:
   1886c:	defffa04 	addi	sp,sp,-24
   18870:	df000515 	stw	fp,20(sp)
   18874:	df000504 	addi	fp,sp,20
   18878:	e13ffd15 	stw	r4,-12(fp)
   1887c:	e17ffe15 	stw	r5,-8(fp)
   18880:	e1bfff15 	stw	r6,-4(fp)
   18884:	e0bffd17 	ldw	r2,-12(fp)
   18888:	10802f17 	ldw	r2,188(r2)
   1888c:	10800058 	cmpnei	r2,r2,1
   18890:	1000091e 	bne	r2,zero,188b8 <alt_write_value_to_flash+0x4c>
   18894:	e0bffd17 	ldw	r2,-12(fp)
   18898:	10c00a17 	ldw	r3,40(r2)
   1889c:	e0bffe17 	ldw	r2,-8(fp)
   188a0:	1885883a 	add	r2,r3,r2
   188a4:	e0ffff17 	ldw	r3,-4(fp)
   188a8:	18c00003 	ldbu	r3,0(r3)
   188ac:	18c03fcc 	andi	r3,r3,255
   188b0:	10c00025 	stbio	r3,0(r2)
   188b4:	00003f06 	br	189b4 <alt_write_value_to_flash+0x148>
   188b8:	e0bffd17 	ldw	r2,-12(fp)
   188bc:	10802f17 	ldw	r2,188(r2)
   188c0:	10800098 	cmpnei	r2,r2,2
   188c4:	1000141e 	bne	r2,zero,18918 <alt_write_value_to_flash+0xac>
   188c8:	e0bfff17 	ldw	r2,-4(fp)
   188cc:	10800003 	ldbu	r2,0(r2)
   188d0:	10803fcc 	andi	r2,r2,255
   188d4:	e0bffb0d 	sth	r2,-20(fp)
   188d8:	e0bfff17 	ldw	r2,-4(fp)
   188dc:	10800044 	addi	r2,r2,1
   188e0:	10800003 	ldbu	r2,0(r2)
   188e4:	10803fcc 	andi	r2,r2,255
   188e8:	1004923a 	slli	r2,r2,8
   188ec:	1007883a 	mov	r3,r2
   188f0:	e0bffb0b 	ldhu	r2,-20(fp)
   188f4:	1884b03a 	or	r2,r3,r2
   188f8:	e0bffb0d 	sth	r2,-20(fp)
   188fc:	e0bffd17 	ldw	r2,-12(fp)
   18900:	10c00a17 	ldw	r3,40(r2)
   18904:	e0bffe17 	ldw	r2,-8(fp)
   18908:	1885883a 	add	r2,r3,r2
   1890c:	e0fffb0b 	ldhu	r3,-20(fp)
   18910:	10c0002d 	sthio	r3,0(r2)
   18914:	00002706 	br	189b4 <alt_write_value_to_flash+0x148>
   18918:	e0bffd17 	ldw	r2,-12(fp)
   1891c:	10802f17 	ldw	r2,188(r2)
   18920:	10800118 	cmpnei	r2,r2,4
   18924:	1000231e 	bne	r2,zero,189b4 <alt_write_value_to_flash+0x148>
   18928:	e0bfff17 	ldw	r2,-4(fp)
   1892c:	10800003 	ldbu	r2,0(r2)
   18930:	10803fcc 	andi	r2,r2,255
   18934:	e0bffc15 	stw	r2,-16(fp)
   18938:	e0bfff17 	ldw	r2,-4(fp)
   1893c:	10800044 	addi	r2,r2,1
   18940:	10800003 	ldbu	r2,0(r2)
   18944:	10803fcc 	andi	r2,r2,255
   18948:	1004923a 	slli	r2,r2,8
   1894c:	e0fffc17 	ldw	r3,-16(fp)
   18950:	1884b03a 	or	r2,r3,r2
   18954:	e0bffc15 	stw	r2,-16(fp)
   18958:	e0bfff17 	ldw	r2,-4(fp)
   1895c:	10800084 	addi	r2,r2,2
   18960:	10800003 	ldbu	r2,0(r2)
   18964:	10803fcc 	andi	r2,r2,255
   18968:	1004943a 	slli	r2,r2,16
   1896c:	e0fffc17 	ldw	r3,-16(fp)
   18970:	1884b03a 	or	r2,r3,r2
   18974:	e0bffc15 	stw	r2,-16(fp)
   18978:	e0bfff17 	ldw	r2,-4(fp)
   1897c:	108000c4 	addi	r2,r2,3
   18980:	10800003 	ldbu	r2,0(r2)
   18984:	10803fcc 	andi	r2,r2,255
   18988:	1004963a 	slli	r2,r2,24
   1898c:	e0fffc17 	ldw	r3,-16(fp)
   18990:	1884b03a 	or	r2,r3,r2
   18994:	e0bffc15 	stw	r2,-16(fp)
   18998:	e0bffd17 	ldw	r2,-12(fp)
   1899c:	10c00a17 	ldw	r3,40(r2)
   189a0:	e0bffe17 	ldw	r2,-8(fp)
   189a4:	1885883a 	add	r2,r3,r2
   189a8:	e0fffc17 	ldw	r3,-16(fp)
   189ac:	10c00035 	stwio	r3,0(r2)
   189b0:	0001883a 	nop
   189b4:	0001883a 	nop
   189b8:	e037883a 	mov	sp,fp
   189bc:	df000017 	ldw	fp,0(sp)
   189c0:	dec00104 	addi	sp,sp,4
   189c4:	f800283a 	ret

000189c8 <alt_flash_program_block>:
   189c8:	defff304 	addi	sp,sp,-52
   189cc:	dfc00c15 	stw	ra,48(sp)
   189d0:	df000b15 	stw	fp,44(sp)
   189d4:	df000b04 	addi	fp,sp,44
   189d8:	e13ffc15 	stw	r4,-16(fp)
   189dc:	e17ffd15 	stw	r5,-12(fp)
   189e0:	e1bffe15 	stw	r6,-8(fp)
   189e4:	e1ffff15 	stw	r7,-4(fp)
   189e8:	e03ff515 	stw	zero,-44(fp)
   189ec:	e0bffc17 	ldw	r2,-16(fp)
   189f0:	10c00a17 	ldw	r3,40(r2)
   189f4:	e0bffd17 	ldw	r2,-12(fp)
   189f8:	1885883a 	add	r2,r3,r2
   189fc:	1007883a 	mov	r3,r2
   18a00:	e0bffc17 	ldw	r2,-16(fp)
   18a04:	10802f17 	ldw	r2,188(r2)
   18a08:	1889283a 	div	r4,r3,r2
   18a0c:	2085383a 	mul	r2,r4,r2
   18a10:	1885c83a 	sub	r2,r3,r2
   18a14:	e0bff815 	stw	r2,-32(fp)
   18a18:	e0bff817 	ldw	r2,-32(fp)
   18a1c:	10003b26 	beq	r2,zero,18b0c <alt_flash_program_block+0x144>
   18a20:	e0bffc17 	ldw	r2,-16(fp)
   18a24:	10c02f17 	ldw	r3,188(r2)
   18a28:	e0bff817 	ldw	r2,-32(fp)
   18a2c:	1885c83a 	sub	r2,r3,r2
   18a30:	e0bff915 	stw	r2,-28(fp)
   18a34:	e03ff615 	stw	zero,-40(fp)
   18a38:	00001206 	br	18a84 <alt_flash_program_block+0xbc>
   18a3c:	e0bffc17 	ldw	r2,-16(fp)
   18a40:	10800a17 	ldw	r2,40(r2)
   18a44:	e13ffd17 	ldw	r4,-12(fp)
   18a48:	e0fff817 	ldw	r3,-32(fp)
   18a4c:	20c9c83a 	sub	r4,r4,r3
   18a50:	e0fff617 	ldw	r3,-40(fp)
   18a54:	20c7883a 	add	r3,r4,r3
   18a58:	10c5883a 	add	r2,r2,r3
   18a5c:	10800023 	ldbuio	r2,0(r2)
   18a60:	10803fcc 	andi	r2,r2,255
   18a64:	1009883a 	mov	r4,r2
   18a68:	e0fffb04 	addi	r3,fp,-20
   18a6c:	e0bff617 	ldw	r2,-40(fp)
   18a70:	1885883a 	add	r2,r3,r2
   18a74:	11000005 	stb	r4,0(r2)
   18a78:	e0bff617 	ldw	r2,-40(fp)
   18a7c:	10800044 	addi	r2,r2,1
   18a80:	e0bff615 	stw	r2,-40(fp)
   18a84:	e0fff617 	ldw	r3,-40(fp)
   18a88:	e0bff817 	ldw	r2,-32(fp)
   18a8c:	18bfeb16 	blt	r3,r2,18a3c <__alt_data_end+0xf0018a3c>
   18a90:	e03ff615 	stw	zero,-40(fp)
   18a94:	00000d06 	br	18acc <alt_flash_program_block+0x104>
   18a98:	e0fff817 	ldw	r3,-32(fp)
   18a9c:	e0bff617 	ldw	r2,-40(fp)
   18aa0:	1885883a 	add	r2,r3,r2
   18aa4:	e0fff617 	ldw	r3,-40(fp)
   18aa8:	e13ffe17 	ldw	r4,-8(fp)
   18aac:	20c7883a 	add	r3,r4,r3
   18ab0:	18c00003 	ldbu	r3,0(r3)
   18ab4:	e13ffb04 	addi	r4,fp,-20
   18ab8:	2085883a 	add	r2,r4,r2
   18abc:	10c00005 	stb	r3,0(r2)
   18ac0:	e0bff617 	ldw	r2,-40(fp)
   18ac4:	10800044 	addi	r2,r2,1
   18ac8:	e0bff615 	stw	r2,-40(fp)
   18acc:	e0fff617 	ldw	r3,-40(fp)
   18ad0:	e0bff917 	ldw	r2,-28(fp)
   18ad4:	18bff016 	blt	r3,r2,18a98 <__alt_data_end+0xf0018a98>
   18ad8:	e0fffd17 	ldw	r3,-12(fp)
   18adc:	e0bff817 	ldw	r2,-32(fp)
   18ae0:	1887c83a 	sub	r3,r3,r2
   18ae4:	e13ffb04 	addi	r4,fp,-20
   18ae8:	e0800217 	ldw	r2,8(fp)
   18aec:	200d883a 	mov	r6,r4
   18af0:	180b883a 	mov	r5,r3
   18af4:	e13ffc17 	ldw	r4,-16(fp)
   18af8:	103ee83a 	callr	r2
   18afc:	e0bff515 	stw	r2,-44(fp)
   18b00:	e0bff917 	ldw	r2,-28(fp)
   18b04:	e0bff615 	stw	r2,-40(fp)
   18b08:	00000106 	br	18b10 <alt_flash_program_block+0x148>
   18b0c:	e03ff615 	stw	zero,-40(fp)
   18b10:	e0fffd17 	ldw	r3,-12(fp)
   18b14:	e0bfff17 	ldw	r2,-4(fp)
   18b18:	1885883a 	add	r2,r3,r2
   18b1c:	e0fffc17 	ldw	r3,-16(fp)
   18b20:	18c02f17 	ldw	r3,188(r3)
   18b24:	10c9283a 	div	r4,r2,r3
   18b28:	20c7383a 	mul	r3,r4,r3
   18b2c:	10c5c83a 	sub	r2,r2,r3
   18b30:	e0bffa15 	stw	r2,-24(fp)
   18b34:	00001106 	br	18b7c <alt_flash_program_block+0x1b4>
   18b38:	e0fffd17 	ldw	r3,-12(fp)
   18b3c:	e0bff617 	ldw	r2,-40(fp)
   18b40:	1889883a 	add	r4,r3,r2
   18b44:	e0bff617 	ldw	r2,-40(fp)
   18b48:	e0fffe17 	ldw	r3,-8(fp)
   18b4c:	1887883a 	add	r3,r3,r2
   18b50:	e0800217 	ldw	r2,8(fp)
   18b54:	180d883a 	mov	r6,r3
   18b58:	200b883a 	mov	r5,r4
   18b5c:	e13ffc17 	ldw	r4,-16(fp)
   18b60:	103ee83a 	callr	r2
   18b64:	e0bff515 	stw	r2,-44(fp)
   18b68:	e0bffc17 	ldw	r2,-16(fp)
   18b6c:	10802f17 	ldw	r2,188(r2)
   18b70:	e0fff617 	ldw	r3,-40(fp)
   18b74:	1885883a 	add	r2,r3,r2
   18b78:	e0bff615 	stw	r2,-40(fp)
   18b7c:	e0bff517 	ldw	r2,-44(fp)
   18b80:	1000051e 	bne	r2,zero,18b98 <alt_flash_program_block+0x1d0>
   18b84:	e0ffff17 	ldw	r3,-4(fp)
   18b88:	e0bffa17 	ldw	r2,-24(fp)
   18b8c:	1885c83a 	sub	r2,r3,r2
   18b90:	e0fff617 	ldw	r3,-40(fp)
   18b94:	18bfe816 	blt	r3,r2,18b38 <__alt_data_end+0xf0018b38>
   18b98:	e0bffa17 	ldw	r2,-24(fp)
   18b9c:	10003c26 	beq	r2,zero,18c90 <alt_flash_program_block+0x2c8>
   18ba0:	e0bff517 	ldw	r2,-44(fp)
   18ba4:	10003a1e 	bne	r2,zero,18c90 <alt_flash_program_block+0x2c8>
   18ba8:	e0bffc17 	ldw	r2,-16(fp)
   18bac:	10c02f17 	ldw	r3,188(r2)
   18bb0:	e0bffa17 	ldw	r2,-24(fp)
   18bb4:	1885c83a 	sub	r2,r3,r2
   18bb8:	e0bff815 	stw	r2,-32(fp)
   18bbc:	e03ff715 	stw	zero,-36(fp)
   18bc0:	00000d06 	br	18bf8 <alt_flash_program_block+0x230>
   18bc4:	e0fff617 	ldw	r3,-40(fp)
   18bc8:	e0bff717 	ldw	r2,-36(fp)
   18bcc:	1885883a 	add	r2,r3,r2
   18bd0:	e0fffe17 	ldw	r3,-8(fp)
   18bd4:	1885883a 	add	r2,r3,r2
   18bd8:	10c00003 	ldbu	r3,0(r2)
   18bdc:	e13ffb04 	addi	r4,fp,-20
   18be0:	e0bff717 	ldw	r2,-36(fp)
   18be4:	2085883a 	add	r2,r4,r2
   18be8:	10c00005 	stb	r3,0(r2)
   18bec:	e0bff717 	ldw	r2,-36(fp)
   18bf0:	10800044 	addi	r2,r2,1
   18bf4:	e0bff715 	stw	r2,-36(fp)
   18bf8:	e0fff717 	ldw	r3,-36(fp)
   18bfc:	e0bffa17 	ldw	r2,-24(fp)
   18c00:	18bff016 	blt	r3,r2,18bc4 <__alt_data_end+0xf0018bc4>
   18c04:	e03ff715 	stw	zero,-36(fp)
   18c08:	00001406 	br	18c5c <alt_flash_program_block+0x294>
   18c0c:	e0fffa17 	ldw	r3,-24(fp)
   18c10:	e0bff717 	ldw	r2,-36(fp)
   18c14:	1885883a 	add	r2,r3,r2
   18c18:	e0fffc17 	ldw	r3,-16(fp)
   18c1c:	18c00a17 	ldw	r3,40(r3)
   18c20:	e17ffd17 	ldw	r5,-12(fp)
   18c24:	e13fff17 	ldw	r4,-4(fp)
   18c28:	290b883a 	add	r5,r5,r4
   18c2c:	e13ff717 	ldw	r4,-36(fp)
   18c30:	2909883a 	add	r4,r5,r4
   18c34:	1907883a 	add	r3,r3,r4
   18c38:	18c00023 	ldbuio	r3,0(r3)
   18c3c:	18c03fcc 	andi	r3,r3,255
   18c40:	1809883a 	mov	r4,r3
   18c44:	e0fffb04 	addi	r3,fp,-20
   18c48:	1885883a 	add	r2,r3,r2
   18c4c:	11000005 	stb	r4,0(r2)
   18c50:	e0bff717 	ldw	r2,-36(fp)
   18c54:	10800044 	addi	r2,r2,1
   18c58:	e0bff715 	stw	r2,-36(fp)
   18c5c:	e0fff717 	ldw	r3,-36(fp)
   18c60:	e0bff817 	ldw	r2,-32(fp)
   18c64:	18bfe916 	blt	r3,r2,18c0c <__alt_data_end+0xf0018c0c>
   18c68:	e0fffd17 	ldw	r3,-12(fp)
   18c6c:	e0bff617 	ldw	r2,-40(fp)
   18c70:	1887883a 	add	r3,r3,r2
   18c74:	e13ffb04 	addi	r4,fp,-20
   18c78:	e0800217 	ldw	r2,8(fp)
   18c7c:	200d883a 	mov	r6,r4
   18c80:	180b883a 	mov	r5,r3
   18c84:	e13ffc17 	ldw	r4,-16(fp)
   18c88:	103ee83a 	callr	r2
   18c8c:	e0bff515 	stw	r2,-44(fp)
   18c90:	e0bff517 	ldw	r2,-44(fp)
   18c94:	e037883a 	mov	sp,fp
   18c98:	dfc00117 	ldw	ra,4(sp)
   18c9c:	df000017 	ldw	fp,0(sp)
   18ca0:	dec00204 	addi	sp,sp,8
   18ca4:	f800283a 	ret

00018ca8 <alt_read_query_entry_8bit>:
   18ca8:	defffd04 	addi	sp,sp,-12
   18cac:	df000215 	stw	fp,8(sp)
   18cb0:	df000204 	addi	fp,sp,8
   18cb4:	e13ffe15 	stw	r4,-8(fp)
   18cb8:	e17fff15 	stw	r5,-4(fp)
   18cbc:	e0bffe17 	ldw	r2,-8(fp)
   18cc0:	10c00a17 	ldw	r3,40(r2)
   18cc4:	e0bfff17 	ldw	r2,-4(fp)
   18cc8:	1885883a 	add	r2,r3,r2
   18ccc:	10800023 	ldbuio	r2,0(r2)
   18cd0:	10803fcc 	andi	r2,r2,255
   18cd4:	e037883a 	mov	sp,fp
   18cd8:	df000017 	ldw	fp,0(sp)
   18cdc:	dec00104 	addi	sp,sp,4
   18ce0:	f800283a 	ret

00018ce4 <alt_read_query_entry_16bit>:
   18ce4:	defffd04 	addi	sp,sp,-12
   18ce8:	df000215 	stw	fp,8(sp)
   18cec:	df000204 	addi	fp,sp,8
   18cf0:	e13ffe15 	stw	r4,-8(fp)
   18cf4:	e17fff15 	stw	r5,-4(fp)
   18cf8:	e0bffe17 	ldw	r2,-8(fp)
   18cfc:	10c00a17 	ldw	r3,40(r2)
   18d00:	e0bfff17 	ldw	r2,-4(fp)
   18d04:	1085883a 	add	r2,r2,r2
   18d08:	1885883a 	add	r2,r3,r2
   18d0c:	1080002b 	ldhuio	r2,0(r2)
   18d10:	10bfffcc 	andi	r2,r2,65535
   18d14:	e037883a 	mov	sp,fp
   18d18:	df000017 	ldw	fp,0(sp)
   18d1c:	dec00104 	addi	sp,sp,4
   18d20:	f800283a 	ret

00018d24 <alt_read_query_entry_32bit>:
   18d24:	defffd04 	addi	sp,sp,-12
   18d28:	df000215 	stw	fp,8(sp)
   18d2c:	df000204 	addi	fp,sp,8
   18d30:	e13ffe15 	stw	r4,-8(fp)
   18d34:	e17fff15 	stw	r5,-4(fp)
   18d38:	e0bffe17 	ldw	r2,-8(fp)
   18d3c:	10c00a17 	ldw	r3,40(r2)
   18d40:	e0bfff17 	ldw	r2,-4(fp)
   18d44:	1085883a 	add	r2,r2,r2
   18d48:	1085883a 	add	r2,r2,r2
   18d4c:	1885883a 	add	r2,r3,r2
   18d50:	10800037 	ldwio	r2,0(r2)
   18d54:	e037883a 	mov	sp,fp
   18d58:	df000017 	ldw	fp,0(sp)
   18d5c:	dec00104 	addi	sp,sp,4
   18d60:	f800283a 	ret

00018d64 <alt_write_flash_command_8bit_device_8bit_mode>:
   18d64:	defffc04 	addi	sp,sp,-16
   18d68:	df000315 	stw	fp,12(sp)
   18d6c:	df000304 	addi	fp,sp,12
   18d70:	e13ffd15 	stw	r4,-12(fp)
   18d74:	e17ffe15 	stw	r5,-8(fp)
   18d78:	3005883a 	mov	r2,r6
   18d7c:	e0bfff05 	stb	r2,-4(fp)
   18d80:	e0bffe17 	ldw	r2,-8(fp)
   18d84:	e0fffd17 	ldw	r3,-12(fp)
   18d88:	1885883a 	add	r2,r3,r2
   18d8c:	e0ffff03 	ldbu	r3,-4(fp)
   18d90:	10c00025 	stbio	r3,0(r2)
   18d94:	0001883a 	nop
   18d98:	e037883a 	mov	sp,fp
   18d9c:	df000017 	ldw	fp,0(sp)
   18da0:	dec00104 	addi	sp,sp,4
   18da4:	f800283a 	ret

00018da8 <alt_write_flash_command_16bit_device_8bit_mode>:
   18da8:	defffc04 	addi	sp,sp,-16
   18dac:	df000315 	stw	fp,12(sp)
   18db0:	df000304 	addi	fp,sp,12
   18db4:	e13ffd15 	stw	r4,-12(fp)
   18db8:	e17ffe15 	stw	r5,-8(fp)
   18dbc:	3005883a 	mov	r2,r6
   18dc0:	e0bfff05 	stb	r2,-4(fp)
   18dc4:	e0bffe17 	ldw	r2,-8(fp)
   18dc8:	1080004c 	andi	r2,r2,1
   18dcc:	10000826 	beq	r2,zero,18df0 <alt_write_flash_command_16bit_device_8bit_mode+0x48>
   18dd0:	e0bffe17 	ldw	r2,-8(fp)
   18dd4:	1085883a 	add	r2,r2,r2
   18dd8:	1007883a 	mov	r3,r2
   18ddc:	e0bffd17 	ldw	r2,-12(fp)
   18de0:	10c5883a 	add	r2,r2,r3
   18de4:	e0ffff03 	ldbu	r3,-4(fp)
   18de8:	10c00025 	stbio	r3,0(r2)
   18dec:	00000806 	br	18e10 <alt_write_flash_command_16bit_device_8bit_mode+0x68>
   18df0:	e0bffe17 	ldw	r2,-8(fp)
   18df4:	1085883a 	add	r2,r2,r2
   18df8:	10800044 	addi	r2,r2,1
   18dfc:	e0fffd17 	ldw	r3,-12(fp)
   18e00:	1885883a 	add	r2,r3,r2
   18e04:	e0ffff03 	ldbu	r3,-4(fp)
   18e08:	10c00025 	stbio	r3,0(r2)
   18e0c:	0001883a 	nop
   18e10:	e037883a 	mov	sp,fp
   18e14:	df000017 	ldw	fp,0(sp)
   18e18:	dec00104 	addi	sp,sp,4
   18e1c:	f800283a 	ret

00018e20 <alt_write_flash_command_32bit_device_8bit_mode>:
   18e20:	defffc04 	addi	sp,sp,-16
   18e24:	df000315 	stw	fp,12(sp)
   18e28:	df000304 	addi	fp,sp,12
   18e2c:	e13ffd15 	stw	r4,-12(fp)
   18e30:	e17ffe15 	stw	r5,-8(fp)
   18e34:	3005883a 	mov	r2,r6
   18e38:	e0bfff05 	stb	r2,-4(fp)
   18e3c:	e0bffe17 	ldw	r2,-8(fp)
   18e40:	1085883a 	add	r2,r2,r2
   18e44:	1085883a 	add	r2,r2,r2
   18e48:	1007883a 	mov	r3,r2
   18e4c:	e0bffd17 	ldw	r2,-12(fp)
   18e50:	10c5883a 	add	r2,r2,r3
   18e54:	e0ffff03 	ldbu	r3,-4(fp)
   18e58:	10c00025 	stbio	r3,0(r2)
   18e5c:	0001883a 	nop
   18e60:	e037883a 	mov	sp,fp
   18e64:	df000017 	ldw	fp,0(sp)
   18e68:	dec00104 	addi	sp,sp,4
   18e6c:	f800283a 	ret

00018e70 <alt_write_flash_command_16bit_device_16bit_mode>:
   18e70:	defffc04 	addi	sp,sp,-16
   18e74:	df000315 	stw	fp,12(sp)
   18e78:	df000304 	addi	fp,sp,12
   18e7c:	e13ffd15 	stw	r4,-12(fp)
   18e80:	e17ffe15 	stw	r5,-8(fp)
   18e84:	3005883a 	mov	r2,r6
   18e88:	e0bfff05 	stb	r2,-4(fp)
   18e8c:	e0bffe17 	ldw	r2,-8(fp)
   18e90:	1085883a 	add	r2,r2,r2
   18e94:	1007883a 	mov	r3,r2
   18e98:	e0bffd17 	ldw	r2,-12(fp)
   18e9c:	10c5883a 	add	r2,r2,r3
   18ea0:	e0ffff03 	ldbu	r3,-4(fp)
   18ea4:	10c0002d 	sthio	r3,0(r2)
   18ea8:	0001883a 	nop
   18eac:	e037883a 	mov	sp,fp
   18eb0:	df000017 	ldw	fp,0(sp)
   18eb4:	dec00104 	addi	sp,sp,4
   18eb8:	f800283a 	ret

00018ebc <alt_write_flash_command_32bit_device_16bit_mode>:
   18ebc:	defffc04 	addi	sp,sp,-16
   18ec0:	df000315 	stw	fp,12(sp)
   18ec4:	df000304 	addi	fp,sp,12
   18ec8:	e13ffd15 	stw	r4,-12(fp)
   18ecc:	e17ffe15 	stw	r5,-8(fp)
   18ed0:	3005883a 	mov	r2,r6
   18ed4:	e0bfff05 	stb	r2,-4(fp)
   18ed8:	e0bffe17 	ldw	r2,-8(fp)
   18edc:	1085883a 	add	r2,r2,r2
   18ee0:	1085883a 	add	r2,r2,r2
   18ee4:	1007883a 	mov	r3,r2
   18ee8:	e0bffd17 	ldw	r2,-12(fp)
   18eec:	10c5883a 	add	r2,r2,r3
   18ef0:	e0ffff03 	ldbu	r3,-4(fp)
   18ef4:	10c0002d 	sthio	r3,0(r2)
   18ef8:	0001883a 	nop
   18efc:	e037883a 	mov	sp,fp
   18f00:	df000017 	ldw	fp,0(sp)
   18f04:	dec00104 	addi	sp,sp,4
   18f08:	f800283a 	ret

00018f0c <alt_write_flash_command_32bit_device_32bit_mode>:
   18f0c:	defffc04 	addi	sp,sp,-16
   18f10:	df000315 	stw	fp,12(sp)
   18f14:	df000304 	addi	fp,sp,12
   18f18:	e13ffd15 	stw	r4,-12(fp)
   18f1c:	e17ffe15 	stw	r5,-8(fp)
   18f20:	3005883a 	mov	r2,r6
   18f24:	e0bfff05 	stb	r2,-4(fp)
   18f28:	e0bffe17 	ldw	r2,-8(fp)
   18f2c:	1085883a 	add	r2,r2,r2
   18f30:	1085883a 	add	r2,r2,r2
   18f34:	1007883a 	mov	r3,r2
   18f38:	e0bffd17 	ldw	r2,-12(fp)
   18f3c:	10c5883a 	add	r2,r2,r3
   18f40:	e0ffff03 	ldbu	r3,-4(fp)
   18f44:	10c00035 	stwio	r3,0(r2)
   18f48:	0001883a 	nop
   18f4c:	e037883a 	mov	sp,fp
   18f50:	df000017 	ldw	fp,0(sp)
   18f54:	dec00104 	addi	sp,sp,4
   18f58:	f800283a 	ret

00018f5c <alt_write_native_8bit>:
   18f5c:	defffd04 	addi	sp,sp,-12
   18f60:	df000215 	stw	fp,8(sp)
   18f64:	df000204 	addi	fp,sp,8
   18f68:	e13ffe15 	stw	r4,-8(fp)
   18f6c:	e17fff15 	stw	r5,-4(fp)
   18f70:	e0bfff17 	ldw	r2,-4(fp)
   18f74:	10c03fcc 	andi	r3,r2,255
   18f78:	e0bffe17 	ldw	r2,-8(fp)
   18f7c:	10c00025 	stbio	r3,0(r2)
   18f80:	0001883a 	nop
   18f84:	e037883a 	mov	sp,fp
   18f88:	df000017 	ldw	fp,0(sp)
   18f8c:	dec00104 	addi	sp,sp,4
   18f90:	f800283a 	ret

00018f94 <alt_write_native_16bit>:
   18f94:	defffd04 	addi	sp,sp,-12
   18f98:	df000215 	stw	fp,8(sp)
   18f9c:	df000204 	addi	fp,sp,8
   18fa0:	e13ffe15 	stw	r4,-8(fp)
   18fa4:	e17fff15 	stw	r5,-4(fp)
   18fa8:	e0bfff17 	ldw	r2,-4(fp)
   18fac:	10ffffcc 	andi	r3,r2,65535
   18fb0:	e0bffe17 	ldw	r2,-8(fp)
   18fb4:	10c0002d 	sthio	r3,0(r2)
   18fb8:	0001883a 	nop
   18fbc:	e037883a 	mov	sp,fp
   18fc0:	df000017 	ldw	fp,0(sp)
   18fc4:	dec00104 	addi	sp,sp,4
   18fc8:	f800283a 	ret

00018fcc <alt_write_native_32bit>:
   18fcc:	defffd04 	addi	sp,sp,-12
   18fd0:	df000215 	stw	fp,8(sp)
   18fd4:	df000204 	addi	fp,sp,8
   18fd8:	e13ffe15 	stw	r4,-8(fp)
   18fdc:	e17fff15 	stw	r5,-4(fp)
   18fe0:	e0ffff17 	ldw	r3,-4(fp)
   18fe4:	e0bffe17 	ldw	r2,-8(fp)
   18fe8:	10c00035 	stwio	r3,0(r2)
   18fec:	0001883a 	nop
   18ff0:	e037883a 	mov	sp,fp
   18ff4:	df000017 	ldw	fp,0(sp)
   18ff8:	dec00104 	addi	sp,sp,4
   18ffc:	f800283a 	ret

00019000 <alt_set_flash_width_func>:
   19000:	defffd04 	addi	sp,sp,-12
   19004:	df000215 	stw	fp,8(sp)
   19008:	df000204 	addi	fp,sp,8
   1900c:	e13fff15 	stw	r4,-4(fp)
   19010:	e03ffe15 	stw	zero,-8(fp)
   19014:	e0bfff17 	ldw	r2,-4(fp)
   19018:	10802f17 	ldw	r2,188(r2)
   1901c:	10c000a0 	cmpeqi	r3,r2,2
   19020:	1800231e 	bne	r3,zero,190b0 <alt_set_flash_width_func+0xb0>
   19024:	10c00120 	cmpeqi	r3,r2,4
   19028:	1800371e 	bne	r3,zero,19108 <alt_set_flash_width_func+0x108>
   1902c:	10800060 	cmpeqi	r2,r2,1
   19030:	10003e26 	beq	r2,zero,1912c <alt_set_flash_width_func+0x12c>
   19034:	e0ffff17 	ldw	r3,-4(fp)
   19038:	008000b4 	movhi	r2,2
   1903c:	10a3d704 	addi	r2,r2,-28836
   19040:	18803615 	stw	r2,216(r3)
   19044:	e0bfff17 	ldw	r2,-4(fp)
   19048:	10803017 	ldw	r2,192(r2)
   1904c:	10800058 	cmpnei	r2,r2,1
   19050:	1000051e 	bne	r2,zero,19068 <alt_set_flash_width_func+0x68>
   19054:	e0ffff17 	ldw	r3,-4(fp)
   19058:	008000b4 	movhi	r2,2
   1905c:	10a35904 	addi	r2,r2,-29340
   19060:	18803415 	stw	r2,208(r3)
   19064:	00003406 	br	19138 <alt_set_flash_width_func+0x138>
   19068:	e0bfff17 	ldw	r2,-4(fp)
   1906c:	10803017 	ldw	r2,192(r2)
   19070:	10800098 	cmpnei	r2,r2,2
   19074:	1000051e 	bne	r2,zero,1908c <alt_set_flash_width_func+0x8c>
   19078:	e0ffff17 	ldw	r3,-4(fp)
   1907c:	008000b4 	movhi	r2,2
   19080:	10a36a04 	addi	r2,r2,-29272
   19084:	18803415 	stw	r2,208(r3)
   19088:	00002b06 	br	19138 <alt_set_flash_width_func+0x138>
   1908c:	e0bfff17 	ldw	r2,-4(fp)
   19090:	10803017 	ldw	r2,192(r2)
   19094:	10800118 	cmpnei	r2,r2,4
   19098:	1000271e 	bne	r2,zero,19138 <alt_set_flash_width_func+0x138>
   1909c:	e0ffff17 	ldw	r3,-4(fp)
   190a0:	008000b4 	movhi	r2,2
   190a4:	10a38804 	addi	r2,r2,-29152
   190a8:	18803415 	stw	r2,208(r3)
   190ac:	00002206 	br	19138 <alt_set_flash_width_func+0x138>
   190b0:	e0ffff17 	ldw	r3,-4(fp)
   190b4:	008000b4 	movhi	r2,2
   190b8:	10a3e504 	addi	r2,r2,-28780
   190bc:	18803615 	stw	r2,216(r3)
   190c0:	e0bfff17 	ldw	r2,-4(fp)
   190c4:	10803017 	ldw	r2,192(r2)
   190c8:	10800098 	cmpnei	r2,r2,2
   190cc:	1000051e 	bne	r2,zero,190e4 <alt_set_flash_width_func+0xe4>
   190d0:	e0ffff17 	ldw	r3,-4(fp)
   190d4:	008000b4 	movhi	r2,2
   190d8:	10a39c04 	addi	r2,r2,-29072
   190dc:	18803415 	stw	r2,208(r3)
   190e0:	00001706 	br	19140 <alt_set_flash_width_func+0x140>
   190e4:	e0bfff17 	ldw	r2,-4(fp)
   190e8:	10803017 	ldw	r2,192(r2)
   190ec:	10800118 	cmpnei	r2,r2,4
   190f0:	1000131e 	bne	r2,zero,19140 <alt_set_flash_width_func+0x140>
   190f4:	e0ffff17 	ldw	r3,-4(fp)
   190f8:	008000b4 	movhi	r2,2
   190fc:	10a3af04 	addi	r2,r2,-28996
   19100:	18803415 	stw	r2,208(r3)
   19104:	00000e06 	br	19140 <alt_set_flash_width_func+0x140>
   19108:	e0ffff17 	ldw	r3,-4(fp)
   1910c:	008000b4 	movhi	r2,2
   19110:	10a3f304 	addi	r2,r2,-28724
   19114:	18803615 	stw	r2,216(r3)
   19118:	e0ffff17 	ldw	r3,-4(fp)
   1911c:	008000b4 	movhi	r2,2
   19120:	10a3c304 	addi	r2,r2,-28916
   19124:	18803415 	stw	r2,208(r3)
   19128:	00000606 	br	19144 <alt_set_flash_width_func+0x144>
   1912c:	00bffcc4 	movi	r2,-13
   19130:	e0bffe15 	stw	r2,-8(fp)
   19134:	00000306 	br	19144 <alt_set_flash_width_func+0x144>
   19138:	0001883a 	nop
   1913c:	00000106 	br	19144 <alt_set_flash_width_func+0x144>
   19140:	0001883a 	nop
   19144:	e0bffe17 	ldw	r2,-8(fp)
   19148:	1000191e 	bne	r2,zero,191b0 <alt_set_flash_width_func+0x1b0>
   1914c:	e0bfff17 	ldw	r2,-4(fp)
   19150:	10803017 	ldw	r2,192(r2)
   19154:	10c000a0 	cmpeqi	r3,r2,2
   19158:	1800091e 	bne	r3,zero,19180 <alt_set_flash_width_func+0x180>
   1915c:	10c00120 	cmpeqi	r3,r2,4
   19160:	18000c1e 	bne	r3,zero,19194 <alt_set_flash_width_func+0x194>
   19164:	10800060 	cmpeqi	r2,r2,1
   19168:	10000f26 	beq	r2,zero,191a8 <alt_set_flash_width_func+0x1a8>
   1916c:	e0ffff17 	ldw	r3,-4(fp)
   19170:	008000b4 	movhi	r2,2
   19174:	10a32a04 	addi	r2,r2,-29528
   19178:	18803515 	stw	r2,212(r3)
   1917c:	00000c06 	br	191b0 <alt_set_flash_width_func+0x1b0>
   19180:	e0ffff17 	ldw	r3,-4(fp)
   19184:	008000b4 	movhi	r2,2
   19188:	10a33904 	addi	r2,r2,-29468
   1918c:	18803515 	stw	r2,212(r3)
   19190:	00000706 	br	191b0 <alt_set_flash_width_func+0x1b0>
   19194:	e0ffff17 	ldw	r3,-4(fp)
   19198:	008000b4 	movhi	r2,2
   1919c:	10a34904 	addi	r2,r2,-29404
   191a0:	18803515 	stw	r2,212(r3)
   191a4:	00000206 	br	191b0 <alt_set_flash_width_func+0x1b0>
   191a8:	00bffcc4 	movi	r2,-13
   191ac:	e0bffe15 	stw	r2,-8(fp)
   191b0:	e0bffe17 	ldw	r2,-8(fp)
   191b4:	e037883a 	mov	sp,fp
   191b8:	df000017 	ldw	fp,0(sp)
   191bc:	dec00104 	addi	sp,sp,4
   191c0:	f800283a 	ret

000191c4 <alt_set_flash_algorithm_func>:
   191c4:	defffd04 	addi	sp,sp,-12
   191c8:	df000215 	stw	fp,8(sp)
   191cc:	df000204 	addi	fp,sp,8
   191d0:	e13fff15 	stw	r4,-4(fp)
   191d4:	e03ffe15 	stw	zero,-8(fp)
   191d8:	e0bfff17 	ldw	r2,-4(fp)
   191dc:	10802e17 	ldw	r2,184(r2)
   191e0:	10c000a0 	cmpeqi	r3,r2,2
   191e4:	1800051e 	bne	r3,zero,191fc <alt_set_flash_algorithm_func+0x38>
   191e8:	10c000e0 	cmpeqi	r3,r2,3
   191ec:	18000c1e 	bne	r3,zero,19220 <alt_set_flash_algorithm_func+0x5c>
   191f0:	10800060 	cmpeqi	r2,r2,1
   191f4:	10000a1e 	bne	r2,zero,19220 <alt_set_flash_algorithm_func+0x5c>
   191f8:	00001206 	br	19244 <alt_set_flash_algorithm_func+0x80>
   191fc:	e0ffff17 	ldw	r3,-4(fp)
   19200:	008000b4 	movhi	r2,2
   19204:	10bb2404 	addi	r2,r2,-4976
   19208:	18800815 	stw	r2,32(r3)
   1920c:	e0ffff17 	ldw	r3,-4(fp)
   19210:	008000b4 	movhi	r2,2
   19214:	10bb0a04 	addi	r2,r2,-5080
   19218:	18800915 	stw	r2,36(r3)
   1921c:	00000b06 	br	1924c <alt_set_flash_algorithm_func+0x88>
   19220:	e0ffff17 	ldw	r3,-4(fp)
   19224:	008000b4 	movhi	r2,2
   19228:	10bc4204 	addi	r2,r2,-3832
   1922c:	18800815 	stw	r2,32(r3)
   19230:	e0ffff17 	ldw	r3,-4(fp)
   19234:	008000b4 	movhi	r2,2
   19238:	10bc2204 	addi	r2,r2,-3960
   1923c:	18800915 	stw	r2,36(r3)
   19240:	00000206 	br	1924c <alt_set_flash_algorithm_func+0x88>
   19244:	00bffec4 	movi	r2,-5
   19248:	e0bffe15 	stw	r2,-8(fp)
   1924c:	e0bffe17 	ldw	r2,-8(fp)
   19250:	e037883a 	mov	sp,fp
   19254:	df000017 	ldw	fp,0(sp)
   19258:	dec00104 	addi	sp,sp,4
   1925c:	f800283a 	ret

00019260 <alt_read_16bit_query_entry>:
   19260:	defffb04 	addi	sp,sp,-20
   19264:	dfc00415 	stw	ra,16(sp)
   19268:	df000315 	stw	fp,12(sp)
   1926c:	df000304 	addi	fp,sp,12
   19270:	e13ffe15 	stw	r4,-8(fp)
   19274:	e17fff15 	stw	r5,-4(fp)
   19278:	e0bffe17 	ldw	r2,-8(fp)
   1927c:	10803517 	ldw	r2,212(r2)
   19280:	e17fff17 	ldw	r5,-4(fp)
   19284:	e13ffe17 	ldw	r4,-8(fp)
   19288:	103ee83a 	callr	r2
   1928c:	10803fcc 	andi	r2,r2,255
   19290:	e0bffd0d 	sth	r2,-12(fp)
   19294:	e0bffe17 	ldw	r2,-8(fp)
   19298:	10803517 	ldw	r2,212(r2)
   1929c:	e0ffff17 	ldw	r3,-4(fp)
   192a0:	18c00044 	addi	r3,r3,1
   192a4:	180b883a 	mov	r5,r3
   192a8:	e13ffe17 	ldw	r4,-8(fp)
   192ac:	103ee83a 	callr	r2
   192b0:	10803fcc 	andi	r2,r2,255
   192b4:	1004923a 	slli	r2,r2,8
   192b8:	1007883a 	mov	r3,r2
   192bc:	e0bffd0b 	ldhu	r2,-12(fp)
   192c0:	1884b03a 	or	r2,r3,r2
   192c4:	e0bffd0d 	sth	r2,-12(fp)
   192c8:	e0bffd0b 	ldhu	r2,-12(fp)
   192cc:	e037883a 	mov	sp,fp
   192d0:	dfc00117 	ldw	ra,4(sp)
   192d4:	df000017 	ldw	fp,0(sp)
   192d8:	dec00204 	addi	sp,sp,8
   192dc:	f800283a 	ret

000192e0 <alt_read_cfi_table>:
   192e0:	defff304 	addi	sp,sp,-52
   192e4:	dfc00c15 	stw	ra,48(sp)
   192e8:	df000b15 	stw	fp,44(sp)
   192ec:	df000b04 	addi	fp,sp,44
   192f0:	e13fff15 	stw	r4,-4(fp)
   192f4:	e03ff715 	stw	zero,-36(fp)
   192f8:	e03ff815 	stw	zero,-32(fp)
   192fc:	e03ff915 	stw	zero,-28(fp)
   19300:	e13fff17 	ldw	r4,-4(fp)
   19304:	001a0180 	call	1a018 <alt_check_primary_table>
   19308:	e0bff715 	stw	r2,-36(fp)
   1930c:	e0bff717 	ldw	r2,-36(fp)
   19310:	10015f1e 	bne	r2,zero,19890 <alt_read_cfi_table+0x5b0>
   19314:	e0bfff17 	ldw	r2,-4(fp)
   19318:	10803517 	ldw	r2,212(r2)
   1931c:	014004c4 	movi	r5,19
   19320:	e13fff17 	ldw	r4,-4(fp)
   19324:	103ee83a 	callr	r2
   19328:	10c03fcc 	andi	r3,r2,255
   1932c:	e0bfff17 	ldw	r2,-4(fp)
   19330:	10c02e15 	stw	r3,184(r2)
   19334:	e0bfff17 	ldw	r2,-4(fp)
   19338:	10803517 	ldw	r2,212(r2)
   1933c:	014007c4 	movi	r5,31
   19340:	e13fff17 	ldw	r4,-4(fp)
   19344:	103ee83a 	callr	r2
   19348:	10803fcc 	andi	r2,r2,255
   1934c:	e0bffa15 	stw	r2,-24(fp)
   19350:	e0bfff17 	ldw	r2,-4(fp)
   19354:	10803517 	ldw	r2,212(r2)
   19358:	014008c4 	movi	r5,35
   1935c:	e13fff17 	ldw	r4,-4(fp)
   19360:	103ee83a 	callr	r2
   19364:	10803fcc 	andi	r2,r2,255
   19368:	e0bffb15 	stw	r2,-20(fp)
   1936c:	e0bffa17 	ldw	r2,-24(fp)
   19370:	10000226 	beq	r2,zero,1937c <alt_read_cfi_table+0x9c>
   19374:	e0bffb17 	ldw	r2,-20(fp)
   19378:	1000041e 	bne	r2,zero,1938c <alt_read_cfi_table+0xac>
   1937c:	e0bfff17 	ldw	r2,-4(fp)
   19380:	00c0fa04 	movi	r3,1000
   19384:	10c03115 	stw	r3,196(r2)
   19388:	00000706 	br	193a8 <alt_read_cfi_table+0xc8>
   1938c:	00c00044 	movi	r3,1
   19390:	e0bffa17 	ldw	r2,-24(fp)
   19394:	1886983a 	sll	r3,r3,r2
   19398:	e0bffb17 	ldw	r2,-20(fp)
   1939c:	1886983a 	sll	r3,r3,r2
   193a0:	e0bfff17 	ldw	r2,-4(fp)
   193a4:	10c03115 	stw	r3,196(r2)
   193a8:	e0bfff17 	ldw	r2,-4(fp)
   193ac:	10803517 	ldw	r2,212(r2)
   193b0:	01400844 	movi	r5,33
   193b4:	e13fff17 	ldw	r4,-4(fp)
   193b8:	103ee83a 	callr	r2
   193bc:	10803fcc 	andi	r2,r2,255
   193c0:	e0bffa15 	stw	r2,-24(fp)
   193c4:	e0bfff17 	ldw	r2,-4(fp)
   193c8:	10803517 	ldw	r2,212(r2)
   193cc:	01400944 	movi	r5,37
   193d0:	e13fff17 	ldw	r4,-4(fp)
   193d4:	103ee83a 	callr	r2
   193d8:	10803fcc 	andi	r2,r2,255
   193dc:	e0bffb15 	stw	r2,-20(fp)
   193e0:	e0bffa17 	ldw	r2,-24(fp)
   193e4:	10000226 	beq	r2,zero,193f0 <alt_read_cfi_table+0x110>
   193e8:	e0bffb17 	ldw	r2,-20(fp)
   193ec:	1000051e 	bne	r2,zero,19404 <alt_read_cfi_table+0x124>
   193f0:	e0ffff17 	ldw	r3,-4(fp)
   193f4:	00804c74 	movhi	r2,305
   193f8:	108b4004 	addi	r2,r2,11520
   193fc:	18803215 	stw	r2,200(r3)
   19400:	00000806 	br	19424 <alt_read_cfi_table+0x144>
   19404:	00c00044 	movi	r3,1
   19408:	e0bffa17 	ldw	r2,-24(fp)
   1940c:	1886983a 	sll	r3,r3,r2
   19410:	e0bffb17 	ldw	r2,-20(fp)
   19414:	1884983a 	sll	r2,r3,r2
   19418:	10c0fa24 	muli	r3,r2,1000
   1941c:	e0bfff17 	ldw	r2,-4(fp)
   19420:	10c03215 	stw	r3,200(r2)
   19424:	e0bfff17 	ldw	r2,-4(fp)
   19428:	10803517 	ldw	r2,212(r2)
   1942c:	014009c4 	movi	r5,39
   19430:	e13fff17 	ldw	r4,-4(fp)
   19434:	103ee83a 	callr	r2
   19438:	10803fcc 	andi	r2,r2,255
   1943c:	00c00044 	movi	r3,1
   19440:	1884983a 	sll	r2,r3,r2
   19444:	e0bffc15 	stw	r2,-16(fp)
   19448:	e0bfff17 	ldw	r2,-4(fp)
   1944c:	10803517 	ldw	r2,212(r2)
   19450:	01400b04 	movi	r5,44
   19454:	e13fff17 	ldw	r4,-4(fp)
   19458:	103ee83a 	callr	r2
   1945c:	10c03fcc 	andi	r3,r2,255
   19460:	e0bfff17 	ldw	r2,-4(fp)
   19464:	10c00c15 	stw	r3,48(r2)
   19468:	e0bfff17 	ldw	r2,-4(fp)
   1946c:	10800c17 	ldw	r2,48(r2)
   19470:	10800250 	cmplti	r2,r2,9
   19474:	1000031e 	bne	r2,zero,19484 <alt_read_cfi_table+0x1a4>
   19478:	00bffd04 	movi	r2,-12
   1947c:	e0bff715 	stw	r2,-36(fp)
   19480:	00006006 	br	19604 <alt_read_cfi_table+0x324>
   19484:	e03ff515 	stw	zero,-44(fp)
   19488:	00005506 	br	195e0 <alt_read_cfi_table+0x300>
   1948c:	e0bff517 	ldw	r2,-44(fp)
   19490:	1085883a 	add	r2,r2,r2
   19494:	1085883a 	add	r2,r2,r2
   19498:	10800b44 	addi	r2,r2,45
   1949c:	100b883a 	mov	r5,r2
   194a0:	e13fff17 	ldw	r4,-4(fp)
   194a4:	00192600 	call	19260 <alt_read_16bit_query_entry>
   194a8:	10ffffcc 	andi	r3,r2,65535
   194ac:	e13fff17 	ldw	r4,-4(fp)
   194b0:	e0bff517 	ldw	r2,-44(fp)
   194b4:	1004913a 	slli	r2,r2,4
   194b8:	2085883a 	add	r2,r4,r2
   194bc:	10800f04 	addi	r2,r2,60
   194c0:	10c00015 	stw	r3,0(r2)
   194c4:	e0ffff17 	ldw	r3,-4(fp)
   194c8:	e0bff517 	ldw	r2,-44(fp)
   194cc:	1004913a 	slli	r2,r2,4
   194d0:	1885883a 	add	r2,r3,r2
   194d4:	10800f04 	addi	r2,r2,60
   194d8:	10800017 	ldw	r2,0(r2)
   194dc:	10c00044 	addi	r3,r2,1
   194e0:	e13fff17 	ldw	r4,-4(fp)
   194e4:	e0bff517 	ldw	r2,-44(fp)
   194e8:	1004913a 	slli	r2,r2,4
   194ec:	2085883a 	add	r2,r4,r2
   194f0:	10800f04 	addi	r2,r2,60
   194f4:	10c00015 	stw	r3,0(r2)
   194f8:	e0bff517 	ldw	r2,-44(fp)
   194fc:	1085883a 	add	r2,r2,r2
   19500:	1085883a 	add	r2,r2,r2
   19504:	10800bc4 	addi	r2,r2,47
   19508:	100b883a 	mov	r5,r2
   1950c:	e13fff17 	ldw	r4,-4(fp)
   19510:	00192600 	call	19260 <alt_read_16bit_query_entry>
   19514:	10ffffcc 	andi	r3,r2,65535
   19518:	e13fff17 	ldw	r4,-4(fp)
   1951c:	e0bff517 	ldw	r2,-44(fp)
   19520:	10800104 	addi	r2,r2,4
   19524:	1004913a 	slli	r2,r2,4
   19528:	2085883a 	add	r2,r4,r2
   1952c:	10c00015 	stw	r3,0(r2)
   19530:	e0ffff17 	ldw	r3,-4(fp)
   19534:	e0bff517 	ldw	r2,-44(fp)
   19538:	10800104 	addi	r2,r2,4
   1953c:	1004913a 	slli	r2,r2,4
   19540:	1885883a 	add	r2,r3,r2
   19544:	10800017 	ldw	r2,0(r2)
   19548:	1006923a 	slli	r3,r2,8
   1954c:	e13fff17 	ldw	r4,-4(fp)
   19550:	e0bff517 	ldw	r2,-44(fp)
   19554:	10800104 	addi	r2,r2,4
   19558:	1004913a 	slli	r2,r2,4
   1955c:	2085883a 	add	r2,r4,r2
   19560:	10c00015 	stw	r3,0(r2)
   19564:	e0ffff17 	ldw	r3,-4(fp)
   19568:	e0bff517 	ldw	r2,-44(fp)
   1956c:	1004913a 	slli	r2,r2,4
   19570:	1885883a 	add	r2,r3,r2
   19574:	10800f04 	addi	r2,r2,60
   19578:	10c00017 	ldw	r3,0(r2)
   1957c:	e13fff17 	ldw	r4,-4(fp)
   19580:	e0bff517 	ldw	r2,-44(fp)
   19584:	10800104 	addi	r2,r2,4
   19588:	1004913a 	slli	r2,r2,4
   1958c:	2085883a 	add	r2,r4,r2
   19590:	10800017 	ldw	r2,0(r2)
   19594:	1887383a 	mul	r3,r3,r2
   19598:	e13fff17 	ldw	r4,-4(fp)
   1959c:	e0bff517 	ldw	r2,-44(fp)
   195a0:	1004913a 	slli	r2,r2,4
   195a4:	2085883a 	add	r2,r4,r2
   195a8:	10800e04 	addi	r2,r2,56
   195ac:	10c00015 	stw	r3,0(r2)
   195b0:	e0ffff17 	ldw	r3,-4(fp)
   195b4:	e0bff517 	ldw	r2,-44(fp)
   195b8:	1004913a 	slli	r2,r2,4
   195bc:	1885883a 	add	r2,r3,r2
   195c0:	10800e04 	addi	r2,r2,56
   195c4:	10800017 	ldw	r2,0(r2)
   195c8:	e0fff817 	ldw	r3,-32(fp)
   195cc:	1885883a 	add	r2,r3,r2
   195d0:	e0bff815 	stw	r2,-32(fp)
   195d4:	e0bff517 	ldw	r2,-44(fp)
   195d8:	10800044 	addi	r2,r2,1
   195dc:	e0bff515 	stw	r2,-44(fp)
   195e0:	e0bfff17 	ldw	r2,-4(fp)
   195e4:	10800c17 	ldw	r2,48(r2)
   195e8:	e0fff517 	ldw	r3,-44(fp)
   195ec:	18bfa716 	blt	r3,r2,1948c <__alt_data_end+0xf001948c>
   195f0:	e0fff817 	ldw	r3,-32(fp)
   195f4:	e0bffc17 	ldw	r2,-16(fp)
   195f8:	18800226 	beq	r3,r2,19604 <alt_read_cfi_table+0x324>
   195fc:	00bffb44 	movi	r2,-19
   19600:	e0bff715 	stw	r2,-36(fp)
   19604:	e0bfff17 	ldw	r2,-4(fp)
   19608:	10803517 	ldw	r2,212(r2)
   1960c:	e0ffff17 	ldw	r3,-4(fp)
   19610:	18c03317 	ldw	r3,204(r3)
   19614:	18c003c4 	addi	r3,r3,15
   19618:	180b883a 	mov	r5,r3
   1961c:	e13fff17 	ldw	r4,-4(fp)
   19620:	103ee83a 	callr	r2
   19624:	e0bffd05 	stb	r2,-12(fp)
   19628:	e0bfff17 	ldw	r2,-4(fp)
   1962c:	10802e17 	ldw	r2,184(r2)
   19630:	10800098 	cmpnei	r2,r2,2
   19634:	1000601e 	bne	r2,zero,197b8 <alt_read_cfi_table+0x4d8>
   19638:	e0bffd03 	ldbu	r2,-12(fp)
   1963c:	108000d8 	cmpnei	r2,r2,3
   19640:	10005d1e 	bne	r2,zero,197b8 <alt_read_cfi_table+0x4d8>
   19644:	e0bfff17 	ldw	r2,-4(fp)
   19648:	10800c17 	ldw	r2,48(r2)
   1964c:	10bfffc4 	addi	r2,r2,-1
   19650:	e0bff515 	stw	r2,-44(fp)
   19654:	e03ff615 	stw	zero,-40(fp)
   19658:	00005406 	br	197ac <alt_read_cfi_table+0x4cc>
   1965c:	e0ffff17 	ldw	r3,-4(fp)
   19660:	e0bff517 	ldw	r2,-44(fp)
   19664:	1004913a 	slli	r2,r2,4
   19668:	1885883a 	add	r2,r3,r2
   1966c:	10800e04 	addi	r2,r2,56
   19670:	10800017 	ldw	r2,0(r2)
   19674:	e0bffe15 	stw	r2,-8(fp)
   19678:	e0ffff17 	ldw	r3,-4(fp)
   1967c:	e0bff617 	ldw	r2,-40(fp)
   19680:	1004913a 	slli	r2,r2,4
   19684:	1885883a 	add	r2,r3,r2
   19688:	10800e04 	addi	r2,r2,56
   1968c:	10c00017 	ldw	r3,0(r2)
   19690:	e13fff17 	ldw	r4,-4(fp)
   19694:	e0bff517 	ldw	r2,-44(fp)
   19698:	1004913a 	slli	r2,r2,4
   1969c:	2085883a 	add	r2,r4,r2
   196a0:	10800e04 	addi	r2,r2,56
   196a4:	10c00015 	stw	r3,0(r2)
   196a8:	e0ffff17 	ldw	r3,-4(fp)
   196ac:	e0bff617 	ldw	r2,-40(fp)
   196b0:	1004913a 	slli	r2,r2,4
   196b4:	1885883a 	add	r2,r3,r2
   196b8:	10800e04 	addi	r2,r2,56
   196bc:	e0fffe17 	ldw	r3,-8(fp)
   196c0:	10c00015 	stw	r3,0(r2)
   196c4:	e0ffff17 	ldw	r3,-4(fp)
   196c8:	e0bff517 	ldw	r2,-44(fp)
   196cc:	10800104 	addi	r2,r2,4
   196d0:	1004913a 	slli	r2,r2,4
   196d4:	1885883a 	add	r2,r3,r2
   196d8:	10800017 	ldw	r2,0(r2)
   196dc:	e0bffe15 	stw	r2,-8(fp)
   196e0:	e0ffff17 	ldw	r3,-4(fp)
   196e4:	e0bff617 	ldw	r2,-40(fp)
   196e8:	10800104 	addi	r2,r2,4
   196ec:	1004913a 	slli	r2,r2,4
   196f0:	1885883a 	add	r2,r3,r2
   196f4:	10c00017 	ldw	r3,0(r2)
   196f8:	e13fff17 	ldw	r4,-4(fp)
   196fc:	e0bff517 	ldw	r2,-44(fp)
   19700:	10800104 	addi	r2,r2,4
   19704:	1004913a 	slli	r2,r2,4
   19708:	2085883a 	add	r2,r4,r2
   1970c:	10c00015 	stw	r3,0(r2)
   19710:	e0ffff17 	ldw	r3,-4(fp)
   19714:	e0bff617 	ldw	r2,-40(fp)
   19718:	10800104 	addi	r2,r2,4
   1971c:	1004913a 	slli	r2,r2,4
   19720:	1885883a 	add	r2,r3,r2
   19724:	e0fffe17 	ldw	r3,-8(fp)
   19728:	10c00015 	stw	r3,0(r2)
   1972c:	e0ffff17 	ldw	r3,-4(fp)
   19730:	e0bff517 	ldw	r2,-44(fp)
   19734:	1004913a 	slli	r2,r2,4
   19738:	1885883a 	add	r2,r3,r2
   1973c:	10800f04 	addi	r2,r2,60
   19740:	10800017 	ldw	r2,0(r2)
   19744:	e0bffe15 	stw	r2,-8(fp)
   19748:	e0ffff17 	ldw	r3,-4(fp)
   1974c:	e0bff617 	ldw	r2,-40(fp)
   19750:	1004913a 	slli	r2,r2,4
   19754:	1885883a 	add	r2,r3,r2
   19758:	10800f04 	addi	r2,r2,60
   1975c:	10c00017 	ldw	r3,0(r2)
   19760:	e13fff17 	ldw	r4,-4(fp)
   19764:	e0bff517 	ldw	r2,-44(fp)
   19768:	1004913a 	slli	r2,r2,4
   1976c:	2085883a 	add	r2,r4,r2
   19770:	10800f04 	addi	r2,r2,60
   19774:	10c00015 	stw	r3,0(r2)
   19778:	e0ffff17 	ldw	r3,-4(fp)
   1977c:	e0bff617 	ldw	r2,-40(fp)
   19780:	1004913a 	slli	r2,r2,4
   19784:	1885883a 	add	r2,r3,r2
   19788:	10800f04 	addi	r2,r2,60
   1978c:	e0fffe17 	ldw	r3,-8(fp)
   19790:	10c00015 	stw	r3,0(r2)
   19794:	e0bff517 	ldw	r2,-44(fp)
   19798:	10bfffc4 	addi	r2,r2,-1
   1979c:	e0bff515 	stw	r2,-44(fp)
   197a0:	e0bff617 	ldw	r2,-40(fp)
   197a4:	10800044 	addi	r2,r2,1
   197a8:	e0bff615 	stw	r2,-40(fp)
   197ac:	e0bff617 	ldw	r2,-40(fp)
   197b0:	e0fff517 	ldw	r3,-44(fp)
   197b4:	18bfa90e 	bge	r3,r2,1965c <__alt_data_end+0xf001965c>
   197b8:	e03ff515 	stw	zero,-44(fp)
   197bc:	00001306 	br	1980c <alt_read_cfi_table+0x52c>
   197c0:	e0ffff17 	ldw	r3,-4(fp)
   197c4:	e0bff517 	ldw	r2,-44(fp)
   197c8:	1004913a 	slli	r2,r2,4
   197cc:	1885883a 	add	r2,r3,r2
   197d0:	10800d04 	addi	r2,r2,52
   197d4:	e0fff917 	ldw	r3,-28(fp)
   197d8:	10c00015 	stw	r3,0(r2)
   197dc:	e0ffff17 	ldw	r3,-4(fp)
   197e0:	e0bff517 	ldw	r2,-44(fp)
   197e4:	1004913a 	slli	r2,r2,4
   197e8:	1885883a 	add	r2,r3,r2
   197ec:	10800e04 	addi	r2,r2,56
   197f0:	10800017 	ldw	r2,0(r2)
   197f4:	e0fff917 	ldw	r3,-28(fp)
   197f8:	1885883a 	add	r2,r3,r2
   197fc:	e0bff915 	stw	r2,-28(fp)
   19800:	e0bff517 	ldw	r2,-44(fp)
   19804:	10800044 	addi	r2,r2,1
   19808:	e0bff515 	stw	r2,-44(fp)
   1980c:	e0bfff17 	ldw	r2,-4(fp)
   19810:	10800c17 	ldw	r2,48(r2)
   19814:	e0fff517 	ldw	r3,-44(fp)
   19818:	18bfe916 	blt	r3,r2,197c0 <__alt_data_end+0xf00197c0>
   1981c:	e0bfff17 	ldw	r2,-4(fp)
   19820:	10802e17 	ldw	r2,184(r2)
   19824:	10c000a0 	cmpeqi	r3,r2,2
   19828:	1800051e 	bne	r3,zero,19840 <alt_read_cfi_table+0x560>
   1982c:	10c000e0 	cmpeqi	r3,r2,3
   19830:	18000c1e 	bne	r3,zero,19864 <alt_read_cfi_table+0x584>
   19834:	10800060 	cmpeqi	r2,r2,1
   19838:	10000a1e 	bne	r2,zero,19864 <alt_read_cfi_table+0x584>
   1983c:	00001206 	br	19888 <alt_read_cfi_table+0x5a8>
   19840:	e0bfff17 	ldw	r2,-4(fp)
   19844:	10803417 	ldw	r2,208(r2)
   19848:	e0ffff17 	ldw	r3,-4(fp)
   1984c:	18c00a17 	ldw	r3,40(r3)
   19850:	01803c04 	movi	r6,240
   19854:	01401544 	movi	r5,85
   19858:	1809883a 	mov	r4,r3
   1985c:	103ee83a 	callr	r2
   19860:	00000b06 	br	19890 <alt_read_cfi_table+0x5b0>
   19864:	e0bfff17 	ldw	r2,-4(fp)
   19868:	10803417 	ldw	r2,208(r2)
   1986c:	e0ffff17 	ldw	r3,-4(fp)
   19870:	18c00a17 	ldw	r3,40(r3)
   19874:	01803fc4 	movi	r6,255
   19878:	01401544 	movi	r5,85
   1987c:	1809883a 	mov	r4,r3
   19880:	103ee83a 	callr	r2
   19884:	00000206 	br	19890 <alt_read_cfi_table+0x5b0>
   19888:	00bffec4 	movi	r2,-5
   1988c:	e0bff715 	stw	r2,-36(fp)
   19890:	e0bff717 	ldw	r2,-36(fp)
   19894:	e037883a 	mov	sp,fp
   19898:	dfc00117 	ldw	ra,4(sp)
   1989c:	df000017 	ldw	fp,0(sp)
   198a0:	dec00204 	addi	sp,sp,8
   198a4:	f800283a 	ret

000198a8 <alt_read_cfi_width>:
   198a8:	defff704 	addi	sp,sp,-36
   198ac:	dfc00815 	stw	ra,32(sp)
   198b0:	df000715 	stw	fp,28(sp)
   198b4:	df000704 	addi	fp,sp,28
   198b8:	e13fff15 	stw	r4,-4(fp)
   198bc:	e03ffa15 	stw	zero,-24(fp)
   198c0:	e0bfff17 	ldw	r2,-4(fp)
   198c4:	10800a17 	ldw	r2,40(r2)
   198c8:	01802604 	movi	r6,152
   198cc:	01401544 	movi	r5,85
   198d0:	1009883a 	mov	r4,r2
   198d4:	0018d640 	call	18d64 <alt_write_flash_command_8bit_device_8bit_mode>
   198d8:	e03ff915 	stw	zero,-28(fp)
   198dc:	00000f06 	br	1991c <alt_read_cfi_width+0x74>
   198e0:	e0bfff17 	ldw	r2,-4(fp)
   198e4:	10800a17 	ldw	r2,40(r2)
   198e8:	e0fff917 	ldw	r3,-28(fp)
   198ec:	18c00404 	addi	r3,r3,16
   198f0:	10c5883a 	add	r2,r2,r3
   198f4:	10800023 	ldbuio	r2,0(r2)
   198f8:	10803fcc 	andi	r2,r2,255
   198fc:	1009883a 	mov	r4,r2
   19900:	e0fffb84 	addi	r3,fp,-18
   19904:	e0bff917 	ldw	r2,-28(fp)
   19908:	1885883a 	add	r2,r3,r2
   1990c:	11000005 	stb	r4,0(r2)
   19910:	e0bff917 	ldw	r2,-28(fp)
   19914:	10800044 	addi	r2,r2,1
   19918:	e0bff915 	stw	r2,-28(fp)
   1991c:	e0bff917 	ldw	r2,-28(fp)
   19920:	108000d0 	cmplti	r2,r2,3
   19924:	103fee1e 	bne	r2,zero,198e0 <__alt_data_end+0xf00198e0>
   19928:	e0bffb83 	ldbu	r2,-18(fp)
   1992c:	10803fcc 	andi	r2,r2,255
   19930:	10801458 	cmpnei	r2,r2,81
   19934:	10001d1e 	bne	r2,zero,199ac <alt_read_cfi_width+0x104>
   19938:	e0bffbc3 	ldbu	r2,-17(fp)
   1993c:	10803fcc 	andi	r2,r2,255
   19940:	10801498 	cmpnei	r2,r2,82
   19944:	1000191e 	bne	r2,zero,199ac <alt_read_cfi_width+0x104>
   19948:	e0bffc03 	ldbu	r2,-16(fp)
   1994c:	10803fcc 	andi	r2,r2,255
   19950:	10801658 	cmpnei	r2,r2,89
   19954:	1000151e 	bne	r2,zero,199ac <alt_read_cfi_width+0x104>
   19958:	e0bfff17 	ldw	r2,-4(fp)
   1995c:	00c00044 	movi	r3,1
   19960:	10c02f15 	stw	r3,188(r2)
   19964:	e0bfff17 	ldw	r2,-4(fp)
   19968:	00c00044 	movi	r3,1
   1996c:	10c03015 	stw	r3,192(r2)
   19970:	e0bfff17 	ldw	r2,-4(fp)
   19974:	10800a17 	ldw	r2,40(r2)
   19978:	10800a04 	addi	r2,r2,40
   1997c:	1080002b 	ldhuio	r2,0(r2)
   19980:	10bfffcc 	andi	r2,r2,65535
   19984:	e0bffb0d 	sth	r2,-20(fp)
   19988:	e0bffb0b 	ldhu	r2,-20(fp)
   1998c:	10800044 	addi	r2,r2,1
   19990:	e0bffb0d 	sth	r2,-20(fp)
   19994:	e0bffb0b 	ldhu	r2,-20(fp)
   19998:	1080004c 	andi	r2,r2,1
   1999c:	1001981e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   199a0:	00bffb44 	movi	r2,-19
   199a4:	e0bffa15 	stw	r2,-24(fp)
   199a8:	00019506 	br	1a000 <alt_read_cfi_width+0x758>
   199ac:	e0bfff17 	ldw	r2,-4(fp)
   199b0:	10800a17 	ldw	r2,40(r2)
   199b4:	01802604 	movi	r6,152
   199b8:	01401544 	movi	r5,85
   199bc:	1009883a 	mov	r4,r2
   199c0:	0018da80 	call	18da8 <alt_write_flash_command_16bit_device_8bit_mode>
   199c4:	e03ff915 	stw	zero,-28(fp)
   199c8:	00000f06 	br	19a08 <alt_read_cfi_width+0x160>
   199cc:	e0bfff17 	ldw	r2,-4(fp)
   199d0:	10800a17 	ldw	r2,40(r2)
   199d4:	e0fff917 	ldw	r3,-28(fp)
   199d8:	18c00804 	addi	r3,r3,32
   199dc:	10c5883a 	add	r2,r2,r3
   199e0:	10800023 	ldbuio	r2,0(r2)
   199e4:	10803fcc 	andi	r2,r2,255
   199e8:	1009883a 	mov	r4,r2
   199ec:	e0fffb84 	addi	r3,fp,-18
   199f0:	e0bff917 	ldw	r2,-28(fp)
   199f4:	1885883a 	add	r2,r3,r2
   199f8:	11000005 	stb	r4,0(r2)
   199fc:	e0bff917 	ldw	r2,-28(fp)
   19a00:	10800044 	addi	r2,r2,1
   19a04:	e0bff915 	stw	r2,-28(fp)
   19a08:	e0bff917 	ldw	r2,-28(fp)
   19a0c:	10800190 	cmplti	r2,r2,6
   19a10:	103fee1e 	bne	r2,zero,199cc <__alt_data_end+0xf00199cc>
   19a14:	e0bffb83 	ldbu	r2,-18(fp)
   19a18:	10803fcc 	andi	r2,r2,255
   19a1c:	10801458 	cmpnei	r2,r2,81
   19a20:	1000291e 	bne	r2,zero,19ac8 <alt_read_cfi_width+0x220>
   19a24:	e0bffbc3 	ldbu	r2,-17(fp)
   19a28:	10803fcc 	andi	r2,r2,255
   19a2c:	10801458 	cmpnei	r2,r2,81
   19a30:	1000251e 	bne	r2,zero,19ac8 <alt_read_cfi_width+0x220>
   19a34:	e0bffc03 	ldbu	r2,-16(fp)
   19a38:	10803fcc 	andi	r2,r2,255
   19a3c:	10801498 	cmpnei	r2,r2,82
   19a40:	1000211e 	bne	r2,zero,19ac8 <alt_read_cfi_width+0x220>
   19a44:	e0bffc43 	ldbu	r2,-15(fp)
   19a48:	10803fcc 	andi	r2,r2,255
   19a4c:	10801498 	cmpnei	r2,r2,82
   19a50:	10001d1e 	bne	r2,zero,19ac8 <alt_read_cfi_width+0x220>
   19a54:	e0bffc83 	ldbu	r2,-14(fp)
   19a58:	10803fcc 	andi	r2,r2,255
   19a5c:	10801658 	cmpnei	r2,r2,89
   19a60:	1000191e 	bne	r2,zero,19ac8 <alt_read_cfi_width+0x220>
   19a64:	e0bffcc3 	ldbu	r2,-13(fp)
   19a68:	10803fcc 	andi	r2,r2,255
   19a6c:	10801658 	cmpnei	r2,r2,89
   19a70:	1000151e 	bne	r2,zero,19ac8 <alt_read_cfi_width+0x220>
   19a74:	e0bfff17 	ldw	r2,-4(fp)
   19a78:	00c00044 	movi	r3,1
   19a7c:	10c02f15 	stw	r3,188(r2)
   19a80:	e0bfff17 	ldw	r2,-4(fp)
   19a84:	00c00084 	movi	r3,2
   19a88:	10c03015 	stw	r3,192(r2)
   19a8c:	e0bfff17 	ldw	r2,-4(fp)
   19a90:	10800a17 	ldw	r2,40(r2)
   19a94:	10801404 	addi	r2,r2,80
   19a98:	1080002b 	ldhuio	r2,0(r2)
   19a9c:	10bfffcc 	andi	r2,r2,65535
   19aa0:	e0bffb0d 	sth	r2,-20(fp)
   19aa4:	e0bffb0b 	ldhu	r2,-20(fp)
   19aa8:	10800044 	addi	r2,r2,1
   19aac:	e0bffb0d 	sth	r2,-20(fp)
   19ab0:	e0bffb0b 	ldhu	r2,-20(fp)
   19ab4:	1080004c 	andi	r2,r2,1
   19ab8:	1001511e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19abc:	00bffb44 	movi	r2,-19
   19ac0:	e0bffa15 	stw	r2,-24(fp)
   19ac4:	00014e06 	br	1a000 <alt_read_cfi_width+0x758>
   19ac8:	e0bfff17 	ldw	r2,-4(fp)
   19acc:	10800a17 	ldw	r2,40(r2)
   19ad0:	01802604 	movi	r6,152
   19ad4:	01401544 	movi	r5,85
   19ad8:	1009883a 	mov	r4,r2
   19adc:	0018e700 	call	18e70 <alt_write_flash_command_16bit_device_16bit_mode>
   19ae0:	e03ff915 	stw	zero,-28(fp)
   19ae4:	00000f06 	br	19b24 <alt_read_cfi_width+0x27c>
   19ae8:	e0bfff17 	ldw	r2,-4(fp)
   19aec:	10800a17 	ldw	r2,40(r2)
   19af0:	e0fff917 	ldw	r3,-28(fp)
   19af4:	18c00804 	addi	r3,r3,32
   19af8:	10c5883a 	add	r2,r2,r3
   19afc:	10800023 	ldbuio	r2,0(r2)
   19b00:	10803fcc 	andi	r2,r2,255
   19b04:	1009883a 	mov	r4,r2
   19b08:	e0fffb84 	addi	r3,fp,-18
   19b0c:	e0bff917 	ldw	r2,-28(fp)
   19b10:	1885883a 	add	r2,r3,r2
   19b14:	11000005 	stb	r4,0(r2)
   19b18:	e0bff917 	ldw	r2,-28(fp)
   19b1c:	10800044 	addi	r2,r2,1
   19b20:	e0bff915 	stw	r2,-28(fp)
   19b24:	e0bff917 	ldw	r2,-28(fp)
   19b28:	10800190 	cmplti	r2,r2,6
   19b2c:	103fee1e 	bne	r2,zero,19ae8 <__alt_data_end+0xf0019ae8>
   19b30:	e0bffb83 	ldbu	r2,-18(fp)
   19b34:	10803fcc 	andi	r2,r2,255
   19b38:	10801458 	cmpnei	r2,r2,81
   19b3c:	1000261e 	bne	r2,zero,19bd8 <alt_read_cfi_width+0x330>
   19b40:	e0bffbc3 	ldbu	r2,-17(fp)
   19b44:	10803fcc 	andi	r2,r2,255
   19b48:	1000231e 	bne	r2,zero,19bd8 <alt_read_cfi_width+0x330>
   19b4c:	e0bffc03 	ldbu	r2,-16(fp)
   19b50:	10803fcc 	andi	r2,r2,255
   19b54:	10801498 	cmpnei	r2,r2,82
   19b58:	10001f1e 	bne	r2,zero,19bd8 <alt_read_cfi_width+0x330>
   19b5c:	e0bffc43 	ldbu	r2,-15(fp)
   19b60:	10803fcc 	andi	r2,r2,255
   19b64:	10001c1e 	bne	r2,zero,19bd8 <alt_read_cfi_width+0x330>
   19b68:	e0bffc83 	ldbu	r2,-14(fp)
   19b6c:	10803fcc 	andi	r2,r2,255
   19b70:	10801658 	cmpnei	r2,r2,89
   19b74:	1000181e 	bne	r2,zero,19bd8 <alt_read_cfi_width+0x330>
   19b78:	e0bffcc3 	ldbu	r2,-13(fp)
   19b7c:	10803fcc 	andi	r2,r2,255
   19b80:	1000151e 	bne	r2,zero,19bd8 <alt_read_cfi_width+0x330>
   19b84:	e0bfff17 	ldw	r2,-4(fp)
   19b88:	00c00084 	movi	r3,2
   19b8c:	10c02f15 	stw	r3,188(r2)
   19b90:	e0bfff17 	ldw	r2,-4(fp)
   19b94:	00c00084 	movi	r3,2
   19b98:	10c03015 	stw	r3,192(r2)
   19b9c:	e0bfff17 	ldw	r2,-4(fp)
   19ba0:	10800a17 	ldw	r2,40(r2)
   19ba4:	10801404 	addi	r2,r2,80
   19ba8:	1080002b 	ldhuio	r2,0(r2)
   19bac:	10bfffcc 	andi	r2,r2,65535
   19bb0:	e0bffb0d 	sth	r2,-20(fp)
   19bb4:	e0bffb0b 	ldhu	r2,-20(fp)
   19bb8:	10800044 	addi	r2,r2,1
   19bbc:	e0bffb0d 	sth	r2,-20(fp)
   19bc0:	e0bffb0b 	ldhu	r2,-20(fp)
   19bc4:	1080008c 	andi	r2,r2,2
   19bc8:	10010d1e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19bcc:	00bffb44 	movi	r2,-19
   19bd0:	e0bffa15 	stw	r2,-24(fp)
   19bd4:	00010a06 	br	1a000 <alt_read_cfi_width+0x758>
   19bd8:	e0bfff17 	ldw	r2,-4(fp)
   19bdc:	10800a17 	ldw	r2,40(r2)
   19be0:	01802604 	movi	r6,152
   19be4:	01401544 	movi	r5,85
   19be8:	1009883a 	mov	r4,r2
   19bec:	0018f0c0 	call	18f0c <alt_write_flash_command_32bit_device_32bit_mode>
   19bf0:	e03ff915 	stw	zero,-28(fp)
   19bf4:	00000f06 	br	19c34 <alt_read_cfi_width+0x38c>
   19bf8:	e0bfff17 	ldw	r2,-4(fp)
   19bfc:	10800a17 	ldw	r2,40(r2)
   19c00:	e0fff917 	ldw	r3,-28(fp)
   19c04:	18c01004 	addi	r3,r3,64
   19c08:	10c5883a 	add	r2,r2,r3
   19c0c:	10800023 	ldbuio	r2,0(r2)
   19c10:	10803fcc 	andi	r2,r2,255
   19c14:	1009883a 	mov	r4,r2
   19c18:	e0fffb84 	addi	r3,fp,-18
   19c1c:	e0bff917 	ldw	r2,-28(fp)
   19c20:	1885883a 	add	r2,r3,r2
   19c24:	11000005 	stb	r4,0(r2)
   19c28:	e0bff917 	ldw	r2,-28(fp)
   19c2c:	10800044 	addi	r2,r2,1
   19c30:	e0bff915 	stw	r2,-28(fp)
   19c34:	e0bff917 	ldw	r2,-28(fp)
   19c38:	10800310 	cmplti	r2,r2,12
   19c3c:	103fee1e 	bne	r2,zero,19bf8 <__alt_data_end+0xf0019bf8>
   19c40:	e0bffb83 	ldbu	r2,-18(fp)
   19c44:	10803fcc 	andi	r2,r2,255
   19c48:	10801458 	cmpnei	r2,r2,81
   19c4c:	1000371e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19c50:	e0bffbc3 	ldbu	r2,-17(fp)
   19c54:	10803fcc 	andi	r2,r2,255
   19c58:	1000341e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19c5c:	e0bffc03 	ldbu	r2,-16(fp)
   19c60:	10803fcc 	andi	r2,r2,255
   19c64:	1000311e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19c68:	e0bffc43 	ldbu	r2,-15(fp)
   19c6c:	10803fcc 	andi	r2,r2,255
   19c70:	10002e1e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19c74:	e0bffc83 	ldbu	r2,-14(fp)
   19c78:	10803fcc 	andi	r2,r2,255
   19c7c:	10801498 	cmpnei	r2,r2,82
   19c80:	10002a1e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19c84:	e0bffcc3 	ldbu	r2,-13(fp)
   19c88:	10803fcc 	andi	r2,r2,255
   19c8c:	1000271e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19c90:	e0bffd03 	ldbu	r2,-12(fp)
   19c94:	10803fcc 	andi	r2,r2,255
   19c98:	1000241e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19c9c:	e0bffd43 	ldbu	r2,-11(fp)
   19ca0:	10803fcc 	andi	r2,r2,255
   19ca4:	1000211e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19ca8:	e0bffd83 	ldbu	r2,-10(fp)
   19cac:	10803fcc 	andi	r2,r2,255
   19cb0:	10801658 	cmpnei	r2,r2,89
   19cb4:	10001d1e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19cb8:	e0bffdc3 	ldbu	r2,-9(fp)
   19cbc:	10803fcc 	andi	r2,r2,255
   19cc0:	10001a1e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19cc4:	e0bffe03 	ldbu	r2,-8(fp)
   19cc8:	10803fcc 	andi	r2,r2,255
   19ccc:	1000171e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19cd0:	e0bffe43 	ldbu	r2,-7(fp)
   19cd4:	10803fcc 	andi	r2,r2,255
   19cd8:	1000141e 	bne	r2,zero,19d2c <alt_read_cfi_width+0x484>
   19cdc:	e0bfff17 	ldw	r2,-4(fp)
   19ce0:	00c00104 	movi	r3,4
   19ce4:	10c02f15 	stw	r3,188(r2)
   19ce8:	e0bfff17 	ldw	r2,-4(fp)
   19cec:	00c00104 	movi	r3,4
   19cf0:	10c03015 	stw	r3,192(r2)
   19cf4:	e0bfff17 	ldw	r2,-4(fp)
   19cf8:	10800a17 	ldw	r2,40(r2)
   19cfc:	10802804 	addi	r2,r2,160
   19d00:	10800037 	ldwio	r2,0(r2)
   19d04:	e0bffb0d 	sth	r2,-20(fp)
   19d08:	e0bffb0b 	ldhu	r2,-20(fp)
   19d0c:	10800044 	addi	r2,r2,1
   19d10:	e0bffb0d 	sth	r2,-20(fp)
   19d14:	e0bffb0b 	ldhu	r2,-20(fp)
   19d18:	1080010c 	andi	r2,r2,4
   19d1c:	1000b81e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19d20:	00bffb44 	movi	r2,-19
   19d24:	e0bffa15 	stw	r2,-24(fp)
   19d28:	0000b506 	br	1a000 <alt_read_cfi_width+0x758>
   19d2c:	e0bfff17 	ldw	r2,-4(fp)
   19d30:	10800a17 	ldw	r2,40(r2)
   19d34:	01802604 	movi	r6,152
   19d38:	01401544 	movi	r5,85
   19d3c:	1009883a 	mov	r4,r2
   19d40:	0018ebc0 	call	18ebc <alt_write_flash_command_32bit_device_16bit_mode>
   19d44:	e03ff915 	stw	zero,-28(fp)
   19d48:	00000f06 	br	19d88 <alt_read_cfi_width+0x4e0>
   19d4c:	e0bfff17 	ldw	r2,-4(fp)
   19d50:	10800a17 	ldw	r2,40(r2)
   19d54:	e0fff917 	ldw	r3,-28(fp)
   19d58:	18c01004 	addi	r3,r3,64
   19d5c:	10c5883a 	add	r2,r2,r3
   19d60:	10800023 	ldbuio	r2,0(r2)
   19d64:	10803fcc 	andi	r2,r2,255
   19d68:	1009883a 	mov	r4,r2
   19d6c:	e0fffb84 	addi	r3,fp,-18
   19d70:	e0bff917 	ldw	r2,-28(fp)
   19d74:	1885883a 	add	r2,r3,r2
   19d78:	11000005 	stb	r4,0(r2)
   19d7c:	e0bff917 	ldw	r2,-28(fp)
   19d80:	10800044 	addi	r2,r2,1
   19d84:	e0bff915 	stw	r2,-28(fp)
   19d88:	e0bff917 	ldw	r2,-28(fp)
   19d8c:	10800310 	cmplti	r2,r2,12
   19d90:	103fee1e 	bne	r2,zero,19d4c <__alt_data_end+0xf0019d4c>
   19d94:	e0bffb83 	ldbu	r2,-18(fp)
   19d98:	10803fcc 	andi	r2,r2,255
   19d9c:	10801458 	cmpnei	r2,r2,81
   19da0:	10003a1e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19da4:	e0bffbc3 	ldbu	r2,-17(fp)
   19da8:	10803fcc 	andi	r2,r2,255
   19dac:	1000371e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19db0:	e0bffc03 	ldbu	r2,-16(fp)
   19db4:	10803fcc 	andi	r2,r2,255
   19db8:	10801458 	cmpnei	r2,r2,81
   19dbc:	1000331e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19dc0:	e0bffc43 	ldbu	r2,-15(fp)
   19dc4:	10803fcc 	andi	r2,r2,255
   19dc8:	1000301e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19dcc:	e0bffc83 	ldbu	r2,-14(fp)
   19dd0:	10803fcc 	andi	r2,r2,255
   19dd4:	10801498 	cmpnei	r2,r2,82
   19dd8:	10002c1e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19ddc:	e0bffcc3 	ldbu	r2,-13(fp)
   19de0:	10803fcc 	andi	r2,r2,255
   19de4:	1000291e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19de8:	e0bffd03 	ldbu	r2,-12(fp)
   19dec:	10803fcc 	andi	r2,r2,255
   19df0:	10801498 	cmpnei	r2,r2,82
   19df4:	1000251e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19df8:	e0bffd43 	ldbu	r2,-11(fp)
   19dfc:	10803fcc 	andi	r2,r2,255
   19e00:	1000221e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19e04:	e0bffd83 	ldbu	r2,-10(fp)
   19e08:	10803fcc 	andi	r2,r2,255
   19e0c:	10801658 	cmpnei	r2,r2,89
   19e10:	10001e1e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19e14:	e0bffdc3 	ldbu	r2,-9(fp)
   19e18:	10803fcc 	andi	r2,r2,255
   19e1c:	10001b1e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19e20:	e0bffe03 	ldbu	r2,-8(fp)
   19e24:	10803fcc 	andi	r2,r2,255
   19e28:	10801658 	cmpnei	r2,r2,89
   19e2c:	1000171e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19e30:	e0bffe43 	ldbu	r2,-7(fp)
   19e34:	10803fcc 	andi	r2,r2,255
   19e38:	1000141e 	bne	r2,zero,19e8c <alt_read_cfi_width+0x5e4>
   19e3c:	e0bfff17 	ldw	r2,-4(fp)
   19e40:	00c00084 	movi	r3,2
   19e44:	10c02f15 	stw	r3,188(r2)
   19e48:	e0bfff17 	ldw	r2,-4(fp)
   19e4c:	00c00104 	movi	r3,4
   19e50:	10c03015 	stw	r3,192(r2)
   19e54:	e0bfff17 	ldw	r2,-4(fp)
   19e58:	10800a17 	ldw	r2,40(r2)
   19e5c:	10802804 	addi	r2,r2,160
   19e60:	10800037 	ldwio	r2,0(r2)
   19e64:	e0bffb0d 	sth	r2,-20(fp)
   19e68:	e0bffb0b 	ldhu	r2,-20(fp)
   19e6c:	10800044 	addi	r2,r2,1
   19e70:	e0bffb0d 	sth	r2,-20(fp)
   19e74:	e0bffb0b 	ldhu	r2,-20(fp)
   19e78:	1080010c 	andi	r2,r2,4
   19e7c:	1000601e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19e80:	00bffb44 	movi	r2,-19
   19e84:	e0bffa15 	stw	r2,-24(fp)
   19e88:	00005d06 	br	1a000 <alt_read_cfi_width+0x758>
   19e8c:	e0bfff17 	ldw	r2,-4(fp)
   19e90:	10800a17 	ldw	r2,40(r2)
   19e94:	01802604 	movi	r6,152
   19e98:	01401544 	movi	r5,85
   19e9c:	1009883a 	mov	r4,r2
   19ea0:	0018e200 	call	18e20 <alt_write_flash_command_32bit_device_8bit_mode>
   19ea4:	e03ff915 	stw	zero,-28(fp)
   19ea8:	00000f06 	br	19ee8 <alt_read_cfi_width+0x640>
   19eac:	e0bfff17 	ldw	r2,-4(fp)
   19eb0:	10800a17 	ldw	r2,40(r2)
   19eb4:	e0fff917 	ldw	r3,-28(fp)
   19eb8:	18c01004 	addi	r3,r3,64
   19ebc:	10c5883a 	add	r2,r2,r3
   19ec0:	10800023 	ldbuio	r2,0(r2)
   19ec4:	10803fcc 	andi	r2,r2,255
   19ec8:	1009883a 	mov	r4,r2
   19ecc:	e0fffb84 	addi	r3,fp,-18
   19ed0:	e0bff917 	ldw	r2,-28(fp)
   19ed4:	1885883a 	add	r2,r3,r2
   19ed8:	11000005 	stb	r4,0(r2)
   19edc:	e0bff917 	ldw	r2,-28(fp)
   19ee0:	10800044 	addi	r2,r2,1
   19ee4:	e0bff915 	stw	r2,-28(fp)
   19ee8:	e0bff917 	ldw	r2,-28(fp)
   19eec:	10800310 	cmplti	r2,r2,12
   19ef0:	103fee1e 	bne	r2,zero,19eac <__alt_data_end+0xf0019eac>
   19ef4:	e0bffb83 	ldbu	r2,-18(fp)
   19ef8:	10803fcc 	andi	r2,r2,255
   19efc:	10801458 	cmpnei	r2,r2,81
   19f00:	10003f1e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f04:	e0bffbc3 	ldbu	r2,-17(fp)
   19f08:	10803fcc 	andi	r2,r2,255
   19f0c:	10801458 	cmpnei	r2,r2,81
   19f10:	10003b1e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f14:	e0bffc03 	ldbu	r2,-16(fp)
   19f18:	10803fcc 	andi	r2,r2,255
   19f1c:	10801458 	cmpnei	r2,r2,81
   19f20:	1000371e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f24:	e0bffc43 	ldbu	r2,-15(fp)
   19f28:	10803fcc 	andi	r2,r2,255
   19f2c:	10801458 	cmpnei	r2,r2,81
   19f30:	1000331e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f34:	e0bffc83 	ldbu	r2,-14(fp)
   19f38:	10803fcc 	andi	r2,r2,255
   19f3c:	10801498 	cmpnei	r2,r2,82
   19f40:	10002f1e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f44:	e0bffcc3 	ldbu	r2,-13(fp)
   19f48:	10803fcc 	andi	r2,r2,255
   19f4c:	10801498 	cmpnei	r2,r2,82
   19f50:	10002b1e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f54:	e0bffd03 	ldbu	r2,-12(fp)
   19f58:	10803fcc 	andi	r2,r2,255
   19f5c:	10801498 	cmpnei	r2,r2,82
   19f60:	1000271e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f64:	e0bffd43 	ldbu	r2,-11(fp)
   19f68:	10803fcc 	andi	r2,r2,255
   19f6c:	10801498 	cmpnei	r2,r2,82
   19f70:	1000231e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f74:	e0bffd83 	ldbu	r2,-10(fp)
   19f78:	10803fcc 	andi	r2,r2,255
   19f7c:	10801658 	cmpnei	r2,r2,89
   19f80:	10001f1e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f84:	e0bffdc3 	ldbu	r2,-9(fp)
   19f88:	10803fcc 	andi	r2,r2,255
   19f8c:	10801658 	cmpnei	r2,r2,89
   19f90:	10001b1e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19f94:	e0bffe03 	ldbu	r2,-8(fp)
   19f98:	10803fcc 	andi	r2,r2,255
   19f9c:	10801658 	cmpnei	r2,r2,89
   19fa0:	1000171e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19fa4:	e0bffe43 	ldbu	r2,-7(fp)
   19fa8:	10803fcc 	andi	r2,r2,255
   19fac:	10801658 	cmpnei	r2,r2,89
   19fb0:	1000131e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19fb4:	e0bfff17 	ldw	r2,-4(fp)
   19fb8:	00c00044 	movi	r3,1
   19fbc:	10c02f15 	stw	r3,188(r2)
   19fc0:	e0bfff17 	ldw	r2,-4(fp)
   19fc4:	00c00104 	movi	r3,4
   19fc8:	10c03015 	stw	r3,192(r2)
   19fcc:	e0bfff17 	ldw	r2,-4(fp)
   19fd0:	10800a17 	ldw	r2,40(r2)
   19fd4:	10802804 	addi	r2,r2,160
   19fd8:	10800037 	ldwio	r2,0(r2)
   19fdc:	e0bffb0d 	sth	r2,-20(fp)
   19fe0:	e0bffb0b 	ldhu	r2,-20(fp)
   19fe4:	10800044 	addi	r2,r2,1
   19fe8:	e0bffb0d 	sth	r2,-20(fp)
   19fec:	e0bffb0b 	ldhu	r2,-20(fp)
   19ff0:	1080010c 	andi	r2,r2,4
   19ff4:	1000021e 	bne	r2,zero,1a000 <alt_read_cfi_width+0x758>
   19ff8:	00bffb44 	movi	r2,-19
   19ffc:	e0bffa15 	stw	r2,-24(fp)
   1a000:	e0bffa17 	ldw	r2,-24(fp)
   1a004:	e037883a 	mov	sp,fp
   1a008:	dfc00117 	ldw	ra,4(sp)
   1a00c:	df000017 	ldw	fp,0(sp)
   1a010:	dec00204 	addi	sp,sp,8
   1a014:	f800283a 	ret

0001a018 <alt_check_primary_table>:
   1a018:	defffa04 	addi	sp,sp,-24
   1a01c:	dfc00515 	stw	ra,20(sp)
   1a020:	df000415 	stw	fp,16(sp)
   1a024:	df000404 	addi	fp,sp,16
   1a028:	e13fff15 	stw	r4,-4(fp)
   1a02c:	e03ffd15 	stw	zero,-12(fp)
   1a030:	01400544 	movi	r5,21
   1a034:	e13fff17 	ldw	r4,-4(fp)
   1a038:	00192600 	call	19260 <alt_read_16bit_query_entry>
   1a03c:	10ffffcc 	andi	r3,r2,65535
   1a040:	e0bfff17 	ldw	r2,-4(fp)
   1a044:	10c03315 	stw	r3,204(r2)
   1a048:	e03ffc15 	stw	zero,-16(fp)
   1a04c:	00001106 	br	1a094 <alt_check_primary_table+0x7c>
   1a050:	e0bfff17 	ldw	r2,-4(fp)
   1a054:	10803517 	ldw	r2,212(r2)
   1a058:	e0ffff17 	ldw	r3,-4(fp)
   1a05c:	19003317 	ldw	r4,204(r3)
   1a060:	e0fffc17 	ldw	r3,-16(fp)
   1a064:	20c7883a 	add	r3,r4,r3
   1a068:	180b883a 	mov	r5,r3
   1a06c:	e13fff17 	ldw	r4,-4(fp)
   1a070:	103ee83a 	callr	r2
   1a074:	1009883a 	mov	r4,r2
   1a078:	e0fffe04 	addi	r3,fp,-8
   1a07c:	e0bffc17 	ldw	r2,-16(fp)
   1a080:	1885883a 	add	r2,r3,r2
   1a084:	11000005 	stb	r4,0(r2)
   1a088:	e0bffc17 	ldw	r2,-16(fp)
   1a08c:	10800044 	addi	r2,r2,1
   1a090:	e0bffc15 	stw	r2,-16(fp)
   1a094:	e0bffc17 	ldw	r2,-16(fp)
   1a098:	108000d0 	cmplti	r2,r2,3
   1a09c:	103fec1e 	bne	r2,zero,1a050 <__alt_data_end+0xf001a050>
   1a0a0:	e0bffe03 	ldbu	r2,-8(fp)
   1a0a4:	10803fcc 	andi	r2,r2,255
   1a0a8:	10801418 	cmpnei	r2,r2,80
   1a0ac:	1000081e 	bne	r2,zero,1a0d0 <alt_check_primary_table+0xb8>
   1a0b0:	e0bffe43 	ldbu	r2,-7(fp)
   1a0b4:	10803fcc 	andi	r2,r2,255
   1a0b8:	10801498 	cmpnei	r2,r2,82
   1a0bc:	1000041e 	bne	r2,zero,1a0d0 <alt_check_primary_table+0xb8>
   1a0c0:	e0bffe83 	ldbu	r2,-6(fp)
   1a0c4:	10803fcc 	andi	r2,r2,255
   1a0c8:	10801260 	cmpeqi	r2,r2,73
   1a0cc:	1000021e 	bne	r2,zero,1a0d8 <alt_check_primary_table+0xc0>
   1a0d0:	00bffb44 	movi	r2,-19
   1a0d4:	e0bffd15 	stw	r2,-12(fp)
   1a0d8:	e0bffd17 	ldw	r2,-12(fp)
   1a0dc:	e037883a 	mov	sp,fp
   1a0e0:	dfc00117 	ldw	ra,4(sp)
   1a0e4:	df000017 	ldw	fp,0(sp)
   1a0e8:	dec00204 	addi	sp,sp,8
   1a0ec:	f800283a 	ret

0001a0f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a0f0:	defffa04 	addi	sp,sp,-24
   1a0f4:	dfc00515 	stw	ra,20(sp)
   1a0f8:	df000415 	stw	fp,16(sp)
   1a0fc:	df000404 	addi	fp,sp,16
   1a100:	e13ffd15 	stw	r4,-12(fp)
   1a104:	e17ffe15 	stw	r5,-8(fp)
   1a108:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a10c:	e0bffd17 	ldw	r2,-12(fp)
   1a110:	10800017 	ldw	r2,0(r2)
   1a114:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a118:	e0bffc17 	ldw	r2,-16(fp)
   1a11c:	10c00a04 	addi	r3,r2,40
   1a120:	e0bffd17 	ldw	r2,-12(fp)
   1a124:	10800217 	ldw	r2,8(r2)
   1a128:	100f883a 	mov	r7,r2
   1a12c:	e1bfff17 	ldw	r6,-4(fp)
   1a130:	e17ffe17 	ldw	r5,-8(fp)
   1a134:	1809883a 	mov	r4,r3
   1a138:	001a7100 	call	1a710 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a13c:	e037883a 	mov	sp,fp
   1a140:	dfc00117 	ldw	ra,4(sp)
   1a144:	df000017 	ldw	fp,0(sp)
   1a148:	dec00204 	addi	sp,sp,8
   1a14c:	f800283a 	ret

0001a150 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a150:	defffa04 	addi	sp,sp,-24
   1a154:	dfc00515 	stw	ra,20(sp)
   1a158:	df000415 	stw	fp,16(sp)
   1a15c:	df000404 	addi	fp,sp,16
   1a160:	e13ffd15 	stw	r4,-12(fp)
   1a164:	e17ffe15 	stw	r5,-8(fp)
   1a168:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a16c:	e0bffd17 	ldw	r2,-12(fp)
   1a170:	10800017 	ldw	r2,0(r2)
   1a174:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a178:	e0bffc17 	ldw	r2,-16(fp)
   1a17c:	10c00a04 	addi	r3,r2,40
   1a180:	e0bffd17 	ldw	r2,-12(fp)
   1a184:	10800217 	ldw	r2,8(r2)
   1a188:	100f883a 	mov	r7,r2
   1a18c:	e1bfff17 	ldw	r6,-4(fp)
   1a190:	e17ffe17 	ldw	r5,-8(fp)
   1a194:	1809883a 	mov	r4,r3
   1a198:	001a92c0 	call	1a92c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a19c:	e037883a 	mov	sp,fp
   1a1a0:	dfc00117 	ldw	ra,4(sp)
   1a1a4:	df000017 	ldw	fp,0(sp)
   1a1a8:	dec00204 	addi	sp,sp,8
   1a1ac:	f800283a 	ret

0001a1b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a1b0:	defffc04 	addi	sp,sp,-16
   1a1b4:	dfc00315 	stw	ra,12(sp)
   1a1b8:	df000215 	stw	fp,8(sp)
   1a1bc:	df000204 	addi	fp,sp,8
   1a1c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a1c4:	e0bfff17 	ldw	r2,-4(fp)
   1a1c8:	10800017 	ldw	r2,0(r2)
   1a1cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a1d0:	e0bffe17 	ldw	r2,-8(fp)
   1a1d4:	10c00a04 	addi	r3,r2,40
   1a1d8:	e0bfff17 	ldw	r2,-4(fp)
   1a1dc:	10800217 	ldw	r2,8(r2)
   1a1e0:	100b883a 	mov	r5,r2
   1a1e4:	1809883a 	mov	r4,r3
   1a1e8:	001a5b80 	call	1a5b8 <altera_avalon_jtag_uart_close>
}
   1a1ec:	e037883a 	mov	sp,fp
   1a1f0:	dfc00117 	ldw	ra,4(sp)
   1a1f4:	df000017 	ldw	fp,0(sp)
   1a1f8:	dec00204 	addi	sp,sp,8
   1a1fc:	f800283a 	ret

0001a200 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a200:	defffa04 	addi	sp,sp,-24
   1a204:	dfc00515 	stw	ra,20(sp)
   1a208:	df000415 	stw	fp,16(sp)
   1a20c:	df000404 	addi	fp,sp,16
   1a210:	e13ffd15 	stw	r4,-12(fp)
   1a214:	e17ffe15 	stw	r5,-8(fp)
   1a218:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a21c:	e0bffd17 	ldw	r2,-12(fp)
   1a220:	10800017 	ldw	r2,0(r2)
   1a224:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a228:	e0bffc17 	ldw	r2,-16(fp)
   1a22c:	10800a04 	addi	r2,r2,40
   1a230:	e1bfff17 	ldw	r6,-4(fp)
   1a234:	e17ffe17 	ldw	r5,-8(fp)
   1a238:	1009883a 	mov	r4,r2
   1a23c:	001a6200 	call	1a620 <altera_avalon_jtag_uart_ioctl>
}
   1a240:	e037883a 	mov	sp,fp
   1a244:	dfc00117 	ldw	ra,4(sp)
   1a248:	df000017 	ldw	fp,0(sp)
   1a24c:	dec00204 	addi	sp,sp,8
   1a250:	f800283a 	ret

0001a254 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1a254:	defffb04 	addi	sp,sp,-20
   1a258:	dfc00415 	stw	ra,16(sp)
   1a25c:	df000315 	stw	fp,12(sp)
   1a260:	df000304 	addi	fp,sp,12
   1a264:	e13ffd15 	stw	r4,-12(fp)
   1a268:	e17ffe15 	stw	r5,-8(fp)
   1a26c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a270:	e0bffd17 	ldw	r2,-12(fp)
   1a274:	00c00044 	movi	r3,1
   1a278:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1a27c:	e0bffd17 	ldw	r2,-12(fp)
   1a280:	10800017 	ldw	r2,0(r2)
   1a284:	10800104 	addi	r2,r2,4
   1a288:	1007883a 	mov	r3,r2
   1a28c:	e0bffd17 	ldw	r2,-12(fp)
   1a290:	10800817 	ldw	r2,32(r2)
   1a294:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1a298:	e0bfff17 	ldw	r2,-4(fp)
   1a29c:	018000b4 	movhi	r6,2
   1a2a0:	31a8c204 	addi	r6,r6,-23800
   1a2a4:	e17ffd17 	ldw	r5,-12(fp)
   1a2a8:	1009883a 	mov	r4,r2
   1a2ac:	00019200 	call	1920 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1a2b0:	e0bffd17 	ldw	r2,-12(fp)
   1a2b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1a2b8:	e0bffd17 	ldw	r2,-12(fp)
   1a2bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a2c0:	d0e05997 	ldw	r3,-32410(gp)
   1a2c4:	e1fffd17 	ldw	r7,-12(fp)
   1a2c8:	018000b4 	movhi	r6,2
   1a2cc:	31a94604 	addi	r6,r6,-23272
   1a2d0:	180b883a 	mov	r5,r3
   1a2d4:	1009883a 	mov	r4,r2
   1a2d8:	001e20c0 	call	1e20c <alt_alarm_start>
   1a2dc:	1000040e 	bge	r2,zero,1a2f0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1a2e0:	e0fffd17 	ldw	r3,-12(fp)
   1a2e4:	00a00034 	movhi	r2,32768
   1a2e8:	10bfffc4 	addi	r2,r2,-1
   1a2ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1a2f0:	0001883a 	nop
   1a2f4:	e037883a 	mov	sp,fp
   1a2f8:	dfc00117 	ldw	ra,4(sp)
   1a2fc:	df000017 	ldw	fp,0(sp)
   1a300:	dec00204 	addi	sp,sp,8
   1a304:	f800283a 	ret

0001a308 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1a308:	defff704 	addi	sp,sp,-36
   1a30c:	df000815 	stw	fp,32(sp)
   1a310:	df000804 	addi	fp,sp,32
   1a314:	e13ffe15 	stw	r4,-8(fp)
   1a318:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1a31c:	e0bffe17 	ldw	r2,-8(fp)
   1a320:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   1a324:	e0bffa17 	ldw	r2,-24(fp)
   1a328:	10800017 	ldw	r2,0(r2)
   1a32c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a330:	e0bffb17 	ldw	r2,-20(fp)
   1a334:	10800104 	addi	r2,r2,4
   1a338:	10800037 	ldwio	r2,0(r2)
   1a33c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1a340:	e0bffc17 	ldw	r2,-16(fp)
   1a344:	1080c00c 	andi	r2,r2,768
   1a348:	10006d26 	beq	r2,zero,1a500 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1a34c:	e0bffc17 	ldw	r2,-16(fp)
   1a350:	1080400c 	andi	r2,r2,256
   1a354:	10003526 	beq	r2,zero,1a42c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1a358:	00800074 	movhi	r2,1
   1a35c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a360:	e0bffa17 	ldw	r2,-24(fp)
   1a364:	10800a17 	ldw	r2,40(r2)
   1a368:	10800044 	addi	r2,r2,1
   1a36c:	1081ffcc 	andi	r2,r2,2047
   1a370:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   1a374:	e0bffa17 	ldw	r2,-24(fp)
   1a378:	10c00b17 	ldw	r3,44(r2)
   1a37c:	e0bffd17 	ldw	r2,-12(fp)
   1a380:	18801526 	beq	r3,r2,1a3d8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1a384:	e0bffb17 	ldw	r2,-20(fp)
   1a388:	10800037 	ldwio	r2,0(r2)
   1a38c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1a390:	e0bff817 	ldw	r2,-32(fp)
   1a394:	10a0000c 	andi	r2,r2,32768
   1a398:	10001126 	beq	r2,zero,1a3e0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1a39c:	e0bffa17 	ldw	r2,-24(fp)
   1a3a0:	10800a17 	ldw	r2,40(r2)
   1a3a4:	e0fff817 	ldw	r3,-32(fp)
   1a3a8:	1809883a 	mov	r4,r3
   1a3ac:	e0fffa17 	ldw	r3,-24(fp)
   1a3b0:	1885883a 	add	r2,r3,r2
   1a3b4:	10800e04 	addi	r2,r2,56
   1a3b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a3bc:	e0bffa17 	ldw	r2,-24(fp)
   1a3c0:	10800a17 	ldw	r2,40(r2)
   1a3c4:	10800044 	addi	r2,r2,1
   1a3c8:	10c1ffcc 	andi	r3,r2,2047
   1a3cc:	e0bffa17 	ldw	r2,-24(fp)
   1a3d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1a3d4:	003fe206 	br	1a360 <__alt_data_end+0xf001a360>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1a3d8:	0001883a 	nop
   1a3dc:	00000106 	br	1a3e4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1a3e0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1a3e4:	e0bff817 	ldw	r2,-32(fp)
   1a3e8:	10bfffec 	andhi	r2,r2,65535
   1a3ec:	10000f26 	beq	r2,zero,1a42c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a3f0:	e0bffa17 	ldw	r2,-24(fp)
   1a3f4:	10c00817 	ldw	r3,32(r2)
   1a3f8:	00bfff84 	movi	r2,-2
   1a3fc:	1886703a 	and	r3,r3,r2
   1a400:	e0bffa17 	ldw	r2,-24(fp)
   1a404:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1a408:	e0bffb17 	ldw	r2,-20(fp)
   1a40c:	10800104 	addi	r2,r2,4
   1a410:	1007883a 	mov	r3,r2
   1a414:	e0bffa17 	ldw	r2,-24(fp)
   1a418:	10800817 	ldw	r2,32(r2)
   1a41c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a420:	e0bffb17 	ldw	r2,-20(fp)
   1a424:	10800104 	addi	r2,r2,4
   1a428:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1a42c:	e0bffc17 	ldw	r2,-16(fp)
   1a430:	1080800c 	andi	r2,r2,512
   1a434:	103fbe26 	beq	r2,zero,1a330 <__alt_data_end+0xf001a330>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1a438:	e0bffc17 	ldw	r2,-16(fp)
   1a43c:	1004d43a 	srli	r2,r2,16
   1a440:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a444:	00001406 	br	1a498 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1a448:	e0bffb17 	ldw	r2,-20(fp)
   1a44c:	e0fffa17 	ldw	r3,-24(fp)
   1a450:	18c00d17 	ldw	r3,52(r3)
   1a454:	e13ffa17 	ldw	r4,-24(fp)
   1a458:	20c7883a 	add	r3,r4,r3
   1a45c:	18c20e04 	addi	r3,r3,2104
   1a460:	18c00003 	ldbu	r3,0(r3)
   1a464:	18c03fcc 	andi	r3,r3,255
   1a468:	18c0201c 	xori	r3,r3,128
   1a46c:	18ffe004 	addi	r3,r3,-128
   1a470:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a474:	e0bffa17 	ldw	r2,-24(fp)
   1a478:	10800d17 	ldw	r2,52(r2)
   1a47c:	10800044 	addi	r2,r2,1
   1a480:	10c1ffcc 	andi	r3,r2,2047
   1a484:	e0bffa17 	ldw	r2,-24(fp)
   1a488:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1a48c:	e0bff917 	ldw	r2,-28(fp)
   1a490:	10bfffc4 	addi	r2,r2,-1
   1a494:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a498:	e0bff917 	ldw	r2,-28(fp)
   1a49c:	10000526 	beq	r2,zero,1a4b4 <altera_avalon_jtag_uart_irq+0x1ac>
   1a4a0:	e0bffa17 	ldw	r2,-24(fp)
   1a4a4:	10c00d17 	ldw	r3,52(r2)
   1a4a8:	e0bffa17 	ldw	r2,-24(fp)
   1a4ac:	10800c17 	ldw	r2,48(r2)
   1a4b0:	18bfe51e 	bne	r3,r2,1a448 <__alt_data_end+0xf001a448>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1a4b4:	e0bff917 	ldw	r2,-28(fp)
   1a4b8:	103f9d26 	beq	r2,zero,1a330 <__alt_data_end+0xf001a330>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a4bc:	e0bffa17 	ldw	r2,-24(fp)
   1a4c0:	10c00817 	ldw	r3,32(r2)
   1a4c4:	00bfff44 	movi	r2,-3
   1a4c8:	1886703a 	and	r3,r3,r2
   1a4cc:	e0bffa17 	ldw	r2,-24(fp)
   1a4d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a4d4:	e0bffa17 	ldw	r2,-24(fp)
   1a4d8:	10800017 	ldw	r2,0(r2)
   1a4dc:	10800104 	addi	r2,r2,4
   1a4e0:	1007883a 	mov	r3,r2
   1a4e4:	e0bffa17 	ldw	r2,-24(fp)
   1a4e8:	10800817 	ldw	r2,32(r2)
   1a4ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a4f0:	e0bffb17 	ldw	r2,-20(fp)
   1a4f4:	10800104 	addi	r2,r2,4
   1a4f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1a4fc:	003f8c06 	br	1a330 <__alt_data_end+0xf001a330>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1a500:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1a504:	0001883a 	nop
   1a508:	e037883a 	mov	sp,fp
   1a50c:	df000017 	ldw	fp,0(sp)
   1a510:	dec00104 	addi	sp,sp,4
   1a514:	f800283a 	ret

0001a518 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1a518:	defff804 	addi	sp,sp,-32
   1a51c:	df000715 	stw	fp,28(sp)
   1a520:	df000704 	addi	fp,sp,28
   1a524:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1a528:	e0bffb17 	ldw	r2,-20(fp)
   1a52c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1a530:	e0bff917 	ldw	r2,-28(fp)
   1a534:	10800017 	ldw	r2,0(r2)
   1a538:	10800104 	addi	r2,r2,4
   1a53c:	10800037 	ldwio	r2,0(r2)
   1a540:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1a544:	e0bffa17 	ldw	r2,-24(fp)
   1a548:	1081000c 	andi	r2,r2,1024
   1a54c:	10000b26 	beq	r2,zero,1a57c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1a550:	e0bff917 	ldw	r2,-28(fp)
   1a554:	10800017 	ldw	r2,0(r2)
   1a558:	10800104 	addi	r2,r2,4
   1a55c:	1007883a 	mov	r3,r2
   1a560:	e0bff917 	ldw	r2,-28(fp)
   1a564:	10800817 	ldw	r2,32(r2)
   1a568:	10810014 	ori	r2,r2,1024
   1a56c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1a570:	e0bff917 	ldw	r2,-28(fp)
   1a574:	10000915 	stw	zero,36(r2)
   1a578:	00000a06 	br	1a5a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1a57c:	e0bff917 	ldw	r2,-28(fp)
   1a580:	10c00917 	ldw	r3,36(r2)
   1a584:	00a00034 	movhi	r2,32768
   1a588:	10bfff04 	addi	r2,r2,-4
   1a58c:	10c00536 	bltu	r2,r3,1a5a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1a590:	e0bff917 	ldw	r2,-28(fp)
   1a594:	10800917 	ldw	r2,36(r2)
   1a598:	10c00044 	addi	r3,r2,1
   1a59c:	e0bff917 	ldw	r2,-28(fp)
   1a5a0:	10c00915 	stw	r3,36(r2)
   1a5a4:	d0a05997 	ldw	r2,-32410(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1a5a8:	e037883a 	mov	sp,fp
   1a5ac:	df000017 	ldw	fp,0(sp)
   1a5b0:	dec00104 	addi	sp,sp,4
   1a5b4:	f800283a 	ret

0001a5b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1a5b8:	defffd04 	addi	sp,sp,-12
   1a5bc:	df000215 	stw	fp,8(sp)
   1a5c0:	df000204 	addi	fp,sp,8
   1a5c4:	e13ffe15 	stw	r4,-8(fp)
   1a5c8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a5cc:	00000506 	br	1a5e4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1a5d0:	e0bfff17 	ldw	r2,-4(fp)
   1a5d4:	1090000c 	andi	r2,r2,16384
   1a5d8:	10000226 	beq	r2,zero,1a5e4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1a5dc:	00bffd44 	movi	r2,-11
   1a5e0:	00000b06 	br	1a610 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a5e4:	e0bffe17 	ldw	r2,-8(fp)
   1a5e8:	10c00d17 	ldw	r3,52(r2)
   1a5ec:	e0bffe17 	ldw	r2,-8(fp)
   1a5f0:	10800c17 	ldw	r2,48(r2)
   1a5f4:	18800526 	beq	r3,r2,1a60c <altera_avalon_jtag_uart_close+0x54>
   1a5f8:	e0bffe17 	ldw	r2,-8(fp)
   1a5fc:	10c00917 	ldw	r3,36(r2)
   1a600:	e0bffe17 	ldw	r2,-8(fp)
   1a604:	10800117 	ldw	r2,4(r2)
   1a608:	18bff136 	bltu	r3,r2,1a5d0 <__alt_data_end+0xf001a5d0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1a60c:	0005883a 	mov	r2,zero
}
   1a610:	e037883a 	mov	sp,fp
   1a614:	df000017 	ldw	fp,0(sp)
   1a618:	dec00104 	addi	sp,sp,4
   1a61c:	f800283a 	ret

0001a620 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1a620:	defffa04 	addi	sp,sp,-24
   1a624:	df000515 	stw	fp,20(sp)
   1a628:	df000504 	addi	fp,sp,20
   1a62c:	e13ffd15 	stw	r4,-12(fp)
   1a630:	e17ffe15 	stw	r5,-8(fp)
   1a634:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1a638:	00bff9c4 	movi	r2,-25
   1a63c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1a640:	e0bffe17 	ldw	r2,-8(fp)
   1a644:	10da8060 	cmpeqi	r3,r2,27137
   1a648:	1800031e 	bne	r3,zero,1a658 <altera_avalon_jtag_uart_ioctl+0x38>
   1a64c:	109a80a0 	cmpeqi	r2,r2,27138
   1a650:	1000181e 	bne	r2,zero,1a6b4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1a654:	00002906 	br	1a6fc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1a658:	e0bffd17 	ldw	r2,-12(fp)
   1a65c:	10c00117 	ldw	r3,4(r2)
   1a660:	00a00034 	movhi	r2,32768
   1a664:	10bfffc4 	addi	r2,r2,-1
   1a668:	18802126 	beq	r3,r2,1a6f0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1a66c:	e0bfff17 	ldw	r2,-4(fp)
   1a670:	10800017 	ldw	r2,0(r2)
   1a674:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1a678:	e0bffc17 	ldw	r2,-16(fp)
   1a67c:	10800090 	cmplti	r2,r2,2
   1a680:	1000061e 	bne	r2,zero,1a69c <altera_avalon_jtag_uart_ioctl+0x7c>
   1a684:	e0fffc17 	ldw	r3,-16(fp)
   1a688:	00a00034 	movhi	r2,32768
   1a68c:	10bfffc4 	addi	r2,r2,-1
   1a690:	18800226 	beq	r3,r2,1a69c <altera_avalon_jtag_uart_ioctl+0x7c>
   1a694:	e0bffc17 	ldw	r2,-16(fp)
   1a698:	00000206 	br	1a6a4 <altera_avalon_jtag_uart_ioctl+0x84>
   1a69c:	00a00034 	movhi	r2,32768
   1a6a0:	10bfff84 	addi	r2,r2,-2
   1a6a4:	e0fffd17 	ldw	r3,-12(fp)
   1a6a8:	18800115 	stw	r2,4(r3)
      rc = 0;
   1a6ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a6b0:	00000f06 	br	1a6f0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1a6b4:	e0bffd17 	ldw	r2,-12(fp)
   1a6b8:	10c00117 	ldw	r3,4(r2)
   1a6bc:	00a00034 	movhi	r2,32768
   1a6c0:	10bfffc4 	addi	r2,r2,-1
   1a6c4:	18800c26 	beq	r3,r2,1a6f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1a6c8:	e0bffd17 	ldw	r2,-12(fp)
   1a6cc:	10c00917 	ldw	r3,36(r2)
   1a6d0:	e0bffd17 	ldw	r2,-12(fp)
   1a6d4:	10800117 	ldw	r2,4(r2)
   1a6d8:	1885803a 	cmpltu	r2,r3,r2
   1a6dc:	10c03fcc 	andi	r3,r2,255
   1a6e0:	e0bfff17 	ldw	r2,-4(fp)
   1a6e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1a6e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a6ec:	00000206 	br	1a6f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1a6f0:	0001883a 	nop
   1a6f4:	00000106 	br	1a6fc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1a6f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1a6fc:	e0bffb17 	ldw	r2,-20(fp)
}
   1a700:	e037883a 	mov	sp,fp
   1a704:	df000017 	ldw	fp,0(sp)
   1a708:	dec00104 	addi	sp,sp,4
   1a70c:	f800283a 	ret

0001a710 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1a710:	defff304 	addi	sp,sp,-52
   1a714:	dfc00c15 	stw	ra,48(sp)
   1a718:	df000b15 	stw	fp,44(sp)
   1a71c:	df000b04 	addi	fp,sp,44
   1a720:	e13ffc15 	stw	r4,-16(fp)
   1a724:	e17ffd15 	stw	r5,-12(fp)
   1a728:	e1bffe15 	stw	r6,-8(fp)
   1a72c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1a730:	e0bffd17 	ldw	r2,-12(fp)
   1a734:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1a738:	00004706 	br	1a858 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1a73c:	e0bffc17 	ldw	r2,-16(fp)
   1a740:	10800a17 	ldw	r2,40(r2)
   1a744:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1a748:	e0bffc17 	ldw	r2,-16(fp)
   1a74c:	10800b17 	ldw	r2,44(r2)
   1a750:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1a754:	e0fff717 	ldw	r3,-36(fp)
   1a758:	e0bff817 	ldw	r2,-32(fp)
   1a75c:	18800536 	bltu	r3,r2,1a774 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1a760:	e0fff717 	ldw	r3,-36(fp)
   1a764:	e0bff817 	ldw	r2,-32(fp)
   1a768:	1885c83a 	sub	r2,r3,r2
   1a76c:	e0bff615 	stw	r2,-40(fp)
   1a770:	00000406 	br	1a784 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1a774:	00c20004 	movi	r3,2048
   1a778:	e0bff817 	ldw	r2,-32(fp)
   1a77c:	1885c83a 	sub	r2,r3,r2
   1a780:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1a784:	e0bff617 	ldw	r2,-40(fp)
   1a788:	10001e26 	beq	r2,zero,1a804 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1a78c:	e0fffe17 	ldw	r3,-8(fp)
   1a790:	e0bff617 	ldw	r2,-40(fp)
   1a794:	1880022e 	bgeu	r3,r2,1a7a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1a798:	e0bffe17 	ldw	r2,-8(fp)
   1a79c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1a7a0:	e0bffc17 	ldw	r2,-16(fp)
   1a7a4:	10c00e04 	addi	r3,r2,56
   1a7a8:	e0bff817 	ldw	r2,-32(fp)
   1a7ac:	1885883a 	add	r2,r3,r2
   1a7b0:	e1bff617 	ldw	r6,-40(fp)
   1a7b4:	100b883a 	mov	r5,r2
   1a7b8:	e13ff517 	ldw	r4,-44(fp)
   1a7bc:	000957c0 	call	957c <memcpy>
      ptr   += n;
   1a7c0:	e0fff517 	ldw	r3,-44(fp)
   1a7c4:	e0bff617 	ldw	r2,-40(fp)
   1a7c8:	1885883a 	add	r2,r3,r2
   1a7cc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1a7d0:	e0fffe17 	ldw	r3,-8(fp)
   1a7d4:	e0bff617 	ldw	r2,-40(fp)
   1a7d8:	1885c83a 	sub	r2,r3,r2
   1a7dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a7e0:	e0fff817 	ldw	r3,-32(fp)
   1a7e4:	e0bff617 	ldw	r2,-40(fp)
   1a7e8:	1885883a 	add	r2,r3,r2
   1a7ec:	10c1ffcc 	andi	r3,r2,2047
   1a7f0:	e0bffc17 	ldw	r2,-16(fp)
   1a7f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1a7f8:	e0bffe17 	ldw	r2,-8(fp)
   1a7fc:	00bfcf16 	blt	zero,r2,1a73c <__alt_data_end+0xf001a73c>
   1a800:	00000106 	br	1a808 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1a804:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1a808:	e0fff517 	ldw	r3,-44(fp)
   1a80c:	e0bffd17 	ldw	r2,-12(fp)
   1a810:	1880141e 	bne	r3,r2,1a864 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1a814:	e0bfff17 	ldw	r2,-4(fp)
   1a818:	1090000c 	andi	r2,r2,16384
   1a81c:	1000131e 	bne	r2,zero,1a86c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1a820:	0001883a 	nop
   1a824:	e0bffc17 	ldw	r2,-16(fp)
   1a828:	10c00a17 	ldw	r3,40(r2)
   1a82c:	e0bff717 	ldw	r2,-36(fp)
   1a830:	1880051e 	bne	r3,r2,1a848 <altera_avalon_jtag_uart_read+0x138>
   1a834:	e0bffc17 	ldw	r2,-16(fp)
   1a838:	10c00917 	ldw	r3,36(r2)
   1a83c:	e0bffc17 	ldw	r2,-16(fp)
   1a840:	10800117 	ldw	r2,4(r2)
   1a844:	18bff736 	bltu	r3,r2,1a824 <__alt_data_end+0xf001a824>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1a848:	e0bffc17 	ldw	r2,-16(fp)
   1a84c:	10c00a17 	ldw	r3,40(r2)
   1a850:	e0bff717 	ldw	r2,-36(fp)
   1a854:	18800726 	beq	r3,r2,1a874 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1a858:	e0bffe17 	ldw	r2,-8(fp)
   1a85c:	00bfb716 	blt	zero,r2,1a73c <__alt_data_end+0xf001a73c>
   1a860:	00000506 	br	1a878 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1a864:	0001883a 	nop
   1a868:	00000306 	br	1a878 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1a86c:	0001883a 	nop
   1a870:	00000106 	br	1a878 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1a874:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1a878:	e0fff517 	ldw	r3,-44(fp)
   1a87c:	e0bffd17 	ldw	r2,-12(fp)
   1a880:	18801826 	beq	r3,r2,1a8e4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a884:	0005303a 	rdctl	r2,status
   1a888:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a88c:	e0fffb17 	ldw	r3,-20(fp)
   1a890:	00bfff84 	movi	r2,-2
   1a894:	1884703a 	and	r2,r3,r2
   1a898:	1001703a 	wrctl	status,r2
  
  return context;
   1a89c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1a8a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a8a4:	e0bffc17 	ldw	r2,-16(fp)
   1a8a8:	10800817 	ldw	r2,32(r2)
   1a8ac:	10c00054 	ori	r3,r2,1
   1a8b0:	e0bffc17 	ldw	r2,-16(fp)
   1a8b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a8b8:	e0bffc17 	ldw	r2,-16(fp)
   1a8bc:	10800017 	ldw	r2,0(r2)
   1a8c0:	10800104 	addi	r2,r2,4
   1a8c4:	1007883a 	mov	r3,r2
   1a8c8:	e0bffc17 	ldw	r2,-16(fp)
   1a8cc:	10800817 	ldw	r2,32(r2)
   1a8d0:	18800035 	stwio	r2,0(r3)
   1a8d4:	e0bffa17 	ldw	r2,-24(fp)
   1a8d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8dc:	e0bff917 	ldw	r2,-28(fp)
   1a8e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1a8e4:	e0fff517 	ldw	r3,-44(fp)
   1a8e8:	e0bffd17 	ldw	r2,-12(fp)
   1a8ec:	18800426 	beq	r3,r2,1a900 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1a8f0:	e0fff517 	ldw	r3,-44(fp)
   1a8f4:	e0bffd17 	ldw	r2,-12(fp)
   1a8f8:	1885c83a 	sub	r2,r3,r2
   1a8fc:	00000606 	br	1a918 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1a900:	e0bfff17 	ldw	r2,-4(fp)
   1a904:	1090000c 	andi	r2,r2,16384
   1a908:	10000226 	beq	r2,zero,1a914 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1a90c:	00bffd44 	movi	r2,-11
   1a910:	00000106 	br	1a918 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1a914:	00bffec4 	movi	r2,-5
}
   1a918:	e037883a 	mov	sp,fp
   1a91c:	dfc00117 	ldw	ra,4(sp)
   1a920:	df000017 	ldw	fp,0(sp)
   1a924:	dec00204 	addi	sp,sp,8
   1a928:	f800283a 	ret

0001a92c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1a92c:	defff304 	addi	sp,sp,-52
   1a930:	dfc00c15 	stw	ra,48(sp)
   1a934:	df000b15 	stw	fp,44(sp)
   1a938:	df000b04 	addi	fp,sp,44
   1a93c:	e13ffc15 	stw	r4,-16(fp)
   1a940:	e17ffd15 	stw	r5,-12(fp)
   1a944:	e1bffe15 	stw	r6,-8(fp)
   1a948:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1a94c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1a950:	e0bffd17 	ldw	r2,-12(fp)
   1a954:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1a958:	00003706 	br	1aa38 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1a95c:	e0bffc17 	ldw	r2,-16(fp)
   1a960:	10800c17 	ldw	r2,48(r2)
   1a964:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1a968:	e0bffc17 	ldw	r2,-16(fp)
   1a96c:	10800d17 	ldw	r2,52(r2)
   1a970:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1a974:	e0fff917 	ldw	r3,-28(fp)
   1a978:	e0bff517 	ldw	r2,-44(fp)
   1a97c:	1880062e 	bgeu	r3,r2,1a998 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1a980:	e0fff517 	ldw	r3,-44(fp)
   1a984:	e0bff917 	ldw	r2,-28(fp)
   1a988:	1885c83a 	sub	r2,r3,r2
   1a98c:	10bfffc4 	addi	r2,r2,-1
   1a990:	e0bff615 	stw	r2,-40(fp)
   1a994:	00000b06 	br	1a9c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1a998:	e0bff517 	ldw	r2,-44(fp)
   1a99c:	10000526 	beq	r2,zero,1a9b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1a9a0:	00c20004 	movi	r3,2048
   1a9a4:	e0bff917 	ldw	r2,-28(fp)
   1a9a8:	1885c83a 	sub	r2,r3,r2
   1a9ac:	e0bff615 	stw	r2,-40(fp)
   1a9b0:	00000406 	br	1a9c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1a9b4:	00c1ffc4 	movi	r3,2047
   1a9b8:	e0bff917 	ldw	r2,-28(fp)
   1a9bc:	1885c83a 	sub	r2,r3,r2
   1a9c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1a9c4:	e0bff617 	ldw	r2,-40(fp)
   1a9c8:	10001e26 	beq	r2,zero,1aa44 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1a9cc:	e0fffe17 	ldw	r3,-8(fp)
   1a9d0:	e0bff617 	ldw	r2,-40(fp)
   1a9d4:	1880022e 	bgeu	r3,r2,1a9e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1a9d8:	e0bffe17 	ldw	r2,-8(fp)
   1a9dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1a9e0:	e0bffc17 	ldw	r2,-16(fp)
   1a9e4:	10c20e04 	addi	r3,r2,2104
   1a9e8:	e0bff917 	ldw	r2,-28(fp)
   1a9ec:	1885883a 	add	r2,r3,r2
   1a9f0:	e1bff617 	ldw	r6,-40(fp)
   1a9f4:	e17ffd17 	ldw	r5,-12(fp)
   1a9f8:	1009883a 	mov	r4,r2
   1a9fc:	000957c0 	call	957c <memcpy>
      ptr   += n;
   1aa00:	e0fffd17 	ldw	r3,-12(fp)
   1aa04:	e0bff617 	ldw	r2,-40(fp)
   1aa08:	1885883a 	add	r2,r3,r2
   1aa0c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1aa10:	e0fffe17 	ldw	r3,-8(fp)
   1aa14:	e0bff617 	ldw	r2,-40(fp)
   1aa18:	1885c83a 	sub	r2,r3,r2
   1aa1c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aa20:	e0fff917 	ldw	r3,-28(fp)
   1aa24:	e0bff617 	ldw	r2,-40(fp)
   1aa28:	1885883a 	add	r2,r3,r2
   1aa2c:	10c1ffcc 	andi	r3,r2,2047
   1aa30:	e0bffc17 	ldw	r2,-16(fp)
   1aa34:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1aa38:	e0bffe17 	ldw	r2,-8(fp)
   1aa3c:	00bfc716 	blt	zero,r2,1a95c <__alt_data_end+0xf001a95c>
   1aa40:	00000106 	br	1aa48 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1aa44:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa48:	0005303a 	rdctl	r2,status
   1aa4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa50:	e0fffb17 	ldw	r3,-20(fp)
   1aa54:	00bfff84 	movi	r2,-2
   1aa58:	1884703a 	and	r2,r3,r2
   1aa5c:	1001703a 	wrctl	status,r2
  
  return context;
   1aa60:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1aa64:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1aa68:	e0bffc17 	ldw	r2,-16(fp)
   1aa6c:	10800817 	ldw	r2,32(r2)
   1aa70:	10c00094 	ori	r3,r2,2
   1aa74:	e0bffc17 	ldw	r2,-16(fp)
   1aa78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1aa7c:	e0bffc17 	ldw	r2,-16(fp)
   1aa80:	10800017 	ldw	r2,0(r2)
   1aa84:	10800104 	addi	r2,r2,4
   1aa88:	1007883a 	mov	r3,r2
   1aa8c:	e0bffc17 	ldw	r2,-16(fp)
   1aa90:	10800817 	ldw	r2,32(r2)
   1aa94:	18800035 	stwio	r2,0(r3)
   1aa98:	e0bffa17 	ldw	r2,-24(fp)
   1aa9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aaa0:	e0bff817 	ldw	r2,-32(fp)
   1aaa4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1aaa8:	e0bffe17 	ldw	r2,-8(fp)
   1aaac:	0080100e 	bge	zero,r2,1aaf0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1aab0:	e0bfff17 	ldw	r2,-4(fp)
   1aab4:	1090000c 	andi	r2,r2,16384
   1aab8:	1000101e 	bne	r2,zero,1aafc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1aabc:	0001883a 	nop
   1aac0:	e0bffc17 	ldw	r2,-16(fp)
   1aac4:	10c00d17 	ldw	r3,52(r2)
   1aac8:	e0bff517 	ldw	r2,-44(fp)
   1aacc:	1880051e 	bne	r3,r2,1aae4 <altera_avalon_jtag_uart_write+0x1b8>
   1aad0:	e0bffc17 	ldw	r2,-16(fp)
   1aad4:	10c00917 	ldw	r3,36(r2)
   1aad8:	e0bffc17 	ldw	r2,-16(fp)
   1aadc:	10800117 	ldw	r2,4(r2)
   1aae0:	18bff736 	bltu	r3,r2,1aac0 <__alt_data_end+0xf001aac0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1aae4:	e0bffc17 	ldw	r2,-16(fp)
   1aae8:	10800917 	ldw	r2,36(r2)
   1aaec:	1000051e 	bne	r2,zero,1ab04 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1aaf0:	e0bffe17 	ldw	r2,-8(fp)
   1aaf4:	00bfd016 	blt	zero,r2,1aa38 <__alt_data_end+0xf001aa38>
   1aaf8:	00000306 	br	1ab08 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1aafc:	0001883a 	nop
   1ab00:	00000106 	br	1ab08 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1ab04:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1ab08:	e0fffd17 	ldw	r3,-12(fp)
   1ab0c:	e0bff717 	ldw	r2,-36(fp)
   1ab10:	18800426 	beq	r3,r2,1ab24 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1ab14:	e0fffd17 	ldw	r3,-12(fp)
   1ab18:	e0bff717 	ldw	r2,-36(fp)
   1ab1c:	1885c83a 	sub	r2,r3,r2
   1ab20:	00000606 	br	1ab3c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1ab24:	e0bfff17 	ldw	r2,-4(fp)
   1ab28:	1090000c 	andi	r2,r2,16384
   1ab2c:	10000226 	beq	r2,zero,1ab38 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1ab30:	00bffd44 	movi	r2,-11
   1ab34:	00000106 	br	1ab3c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1ab38:	00bffec4 	movi	r2,-5
}
   1ab3c:	e037883a 	mov	sp,fp
   1ab40:	dfc00117 	ldw	ra,4(sp)
   1ab44:	df000017 	ldw	fp,0(sp)
   1ab48:	dec00204 	addi	sp,sp,8
   1ab4c:	f800283a 	ret

0001ab50 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   1ab50:	defffa04 	addi	sp,sp,-24
   1ab54:	dfc00515 	stw	ra,20(sp)
   1ab58:	df000415 	stw	fp,16(sp)
   1ab5c:	df000404 	addi	fp,sp,16
   1ab60:	e13ffe15 	stw	r4,-8(fp)
   1ab64:	2805883a 	mov	r2,r5
   1ab68:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   1ab6c:	e0bffe17 	ldw	r2,-8(fp)
   1ab70:	10800017 	ldw	r2,0(r2)
   1ab74:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   1ab78:	008003f4 	movhi	r2,15
   1ab7c:	10909004 	addi	r2,r2,16960
   1ab80:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   1ab84:	e0bffe17 	ldw	r2,-8(fp)
   1ab88:	10800803 	ldbu	r2,32(r2)
   1ab8c:	10803fcc 	andi	r2,r2,255
   1ab90:	1080201c 	xori	r2,r2,128
   1ab94:	10bfe004 	addi	r2,r2,-128
   1ab98:	1000151e 	bne	r2,zero,1abf0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1ab9c:	00000906 	br	1abc4 <lcd_write_command+0x74>
    if (--i == 0)
   1aba0:	e0bffc17 	ldw	r2,-16(fp)
   1aba4:	10bfffc4 	addi	r2,r2,-1
   1aba8:	e0bffc15 	stw	r2,-16(fp)
   1abac:	e0bffc17 	ldw	r2,-16(fp)
   1abb0:	1000041e 	bne	r2,zero,1abc4 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   1abb4:	e0bffe17 	ldw	r2,-8(fp)
   1abb8:	00c00044 	movi	r3,1
   1abbc:	10c00805 	stb	r3,32(r2)
      return;
   1abc0:	00000c06 	br	1abf4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1abc4:	e0bffd17 	ldw	r2,-12(fp)
   1abc8:	10800104 	addi	r2,r2,4
   1abcc:	10800037 	ldwio	r2,0(r2)
   1abd0:	1080200c 	andi	r2,r2,128
   1abd4:	103ff21e 	bne	r2,zero,1aba0 <__alt_data_end+0xf001aba0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   1abd8:	01001904 	movi	r4,100
   1abdc:	001ebd40 	call	1ebd4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   1abe0:	e0bffd17 	ldw	r2,-12(fp)
   1abe4:	e0ffff03 	ldbu	r3,-4(fp)
   1abe8:	10c00035 	stwio	r3,0(r2)
   1abec:	00000106 	br	1abf4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   1abf0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   1abf4:	e037883a 	mov	sp,fp
   1abf8:	dfc00117 	ldw	ra,4(sp)
   1abfc:	df000017 	ldw	fp,0(sp)
   1ac00:	dec00204 	addi	sp,sp,8
   1ac04:	f800283a 	ret

0001ac08 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   1ac08:	defffa04 	addi	sp,sp,-24
   1ac0c:	dfc00515 	stw	ra,20(sp)
   1ac10:	df000415 	stw	fp,16(sp)
   1ac14:	df000404 	addi	fp,sp,16
   1ac18:	e13ffe15 	stw	r4,-8(fp)
   1ac1c:	2805883a 	mov	r2,r5
   1ac20:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   1ac24:	e0bffe17 	ldw	r2,-8(fp)
   1ac28:	10800017 	ldw	r2,0(r2)
   1ac2c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   1ac30:	008003f4 	movhi	r2,15
   1ac34:	10909004 	addi	r2,r2,16960
   1ac38:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   1ac3c:	e0bffe17 	ldw	r2,-8(fp)
   1ac40:	10800803 	ldbu	r2,32(r2)
   1ac44:	10803fcc 	andi	r2,r2,255
   1ac48:	1080201c 	xori	r2,r2,128
   1ac4c:	10bfe004 	addi	r2,r2,-128
   1ac50:	10001d1e 	bne	r2,zero,1acc8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1ac54:	00000906 	br	1ac7c <lcd_write_data+0x74>
    if (--i == 0)
   1ac58:	e0bffc17 	ldw	r2,-16(fp)
   1ac5c:	10bfffc4 	addi	r2,r2,-1
   1ac60:	e0bffc15 	stw	r2,-16(fp)
   1ac64:	e0bffc17 	ldw	r2,-16(fp)
   1ac68:	1000041e 	bne	r2,zero,1ac7c <lcd_write_data+0x74>
    {
      sp->broken = 1;
   1ac6c:	e0bffe17 	ldw	r2,-8(fp)
   1ac70:	00c00044 	movi	r3,1
   1ac74:	10c00805 	stb	r3,32(r2)
      return;
   1ac78:	00001406 	br	1accc <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1ac7c:	e0bffd17 	ldw	r2,-12(fp)
   1ac80:	10800104 	addi	r2,r2,4
   1ac84:	10800037 	ldwio	r2,0(r2)
   1ac88:	1080200c 	andi	r2,r2,128
   1ac8c:	103ff21e 	bne	r2,zero,1ac58 <__alt_data_end+0xf001ac58>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   1ac90:	01001904 	movi	r4,100
   1ac94:	001ebd40 	call	1ebd4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   1ac98:	e0bffd17 	ldw	r2,-12(fp)
   1ac9c:	10800204 	addi	r2,r2,8
   1aca0:	1007883a 	mov	r3,r2
   1aca4:	e0bfff03 	ldbu	r2,-4(fp)
   1aca8:	18800035 	stwio	r2,0(r3)

  sp->address++;
   1acac:	e0bffe17 	ldw	r2,-8(fp)
   1acb0:	108008c3 	ldbu	r2,35(r2)
   1acb4:	10800044 	addi	r2,r2,1
   1acb8:	1007883a 	mov	r3,r2
   1acbc:	e0bffe17 	ldw	r2,-8(fp)
   1acc0:	10c008c5 	stb	r3,35(r2)
   1acc4:	00000106 	br	1accc <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   1acc8:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   1accc:	e037883a 	mov	sp,fp
   1acd0:	dfc00117 	ldw	ra,4(sp)
   1acd4:	df000017 	ldw	fp,0(sp)
   1acd8:	dec00204 	addi	sp,sp,8
   1acdc:	f800283a 	ret

0001ace0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   1ace0:	defffc04 	addi	sp,sp,-16
   1ace4:	dfc00315 	stw	ra,12(sp)
   1ace8:	df000215 	stw	fp,8(sp)
   1acec:	df000204 	addi	fp,sp,8
   1acf0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   1acf4:	01400044 	movi	r5,1
   1acf8:	e13fff17 	ldw	r4,-4(fp)
   1acfc:	001ab500 	call	1ab50 <lcd_write_command>

  sp->x = 0;
   1ad00:	e0bfff17 	ldw	r2,-4(fp)
   1ad04:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   1ad08:	e0bfff17 	ldw	r2,-4(fp)
   1ad0c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   1ad10:	e0bfff17 	ldw	r2,-4(fp)
   1ad14:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1ad18:	e03ffe15 	stw	zero,-8(fp)
   1ad1c:	00001b06 	br	1ad8c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   1ad20:	e0bffe17 	ldw	r2,-8(fp)
   1ad24:	108018e4 	muli	r2,r2,99
   1ad28:	10801004 	addi	r2,r2,64
   1ad2c:	e0ffff17 	ldw	r3,-4(fp)
   1ad30:	1885883a 	add	r2,r3,r2
   1ad34:	01801444 	movi	r6,81
   1ad38:	01400804 	movi	r5,32
   1ad3c:	1009883a 	mov	r4,r2
   1ad40:	00096c40 	call	96c4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   1ad44:	e0bffe17 	ldw	r2,-8(fp)
   1ad48:	108018e4 	muli	r2,r2,99
   1ad4c:	10800c04 	addi	r2,r2,48
   1ad50:	e0ffff17 	ldw	r3,-4(fp)
   1ad54:	1885883a 	add	r2,r3,r2
   1ad58:	01800404 	movi	r6,16
   1ad5c:	01400804 	movi	r5,32
   1ad60:	1009883a 	mov	r4,r2
   1ad64:	00096c40 	call	96c4 <memset>
    sp->line[y].width = 0;
   1ad68:	e0ffff17 	ldw	r3,-4(fp)
   1ad6c:	e0bffe17 	ldw	r2,-8(fp)
   1ad70:	108018e4 	muli	r2,r2,99
   1ad74:	1885883a 	add	r2,r3,r2
   1ad78:	10802444 	addi	r2,r2,145
   1ad7c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1ad80:	e0bffe17 	ldw	r2,-8(fp)
   1ad84:	10800044 	addi	r2,r2,1
   1ad88:	e0bffe15 	stw	r2,-8(fp)
   1ad8c:	e0bffe17 	ldw	r2,-8(fp)
   1ad90:	10800090 	cmplti	r2,r2,2
   1ad94:	103fe21e 	bne	r2,zero,1ad20 <__alt_data_end+0xf001ad20>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   1ad98:	0001883a 	nop
   1ad9c:	e037883a 	mov	sp,fp
   1ada0:	dfc00117 	ldw	ra,4(sp)
   1ada4:	df000017 	ldw	fp,0(sp)
   1ada8:	dec00204 	addi	sp,sp,8
   1adac:	f800283a 	ret

0001adb0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   1adb0:	defff704 	addi	sp,sp,-36
   1adb4:	dfc00815 	stw	ra,32(sp)
   1adb8:	df000715 	stw	fp,28(sp)
   1adbc:	df000704 	addi	fp,sp,28
   1adc0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   1adc4:	e0bfff17 	ldw	r2,-4(fp)
   1adc8:	10800943 	ldbu	r2,37(r2)
   1adcc:	10803fcc 	andi	r2,r2,255
   1add0:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1add4:	e03ff915 	stw	zero,-28(fp)
   1add8:	00006806 	br	1af7c <lcd_repaint_screen+0x1cc>
  {
    int width  = sp->line[y].width;
   1addc:	e0ffff17 	ldw	r3,-4(fp)
   1ade0:	e0bff917 	ldw	r2,-28(fp)
   1ade4:	108018e4 	muli	r2,r2,99
   1ade8:	1885883a 	add	r2,r3,r2
   1adec:	10802444 	addi	r2,r2,145
   1adf0:	10800003 	ldbu	r2,0(r2)
   1adf4:	10803fcc 	andi	r2,r2,255
   1adf8:	1080201c 	xori	r2,r2,128
   1adfc:	10bfe004 	addi	r2,r2,-128
   1ae00:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   1ae04:	e0ffff17 	ldw	r3,-4(fp)
   1ae08:	e0bff917 	ldw	r2,-28(fp)
   1ae0c:	108018e4 	muli	r2,r2,99
   1ae10:	1885883a 	add	r2,r3,r2
   1ae14:	10802484 	addi	r2,r2,146
   1ae18:	10800003 	ldbu	r2,0(r2)
   1ae1c:	10c03fcc 	andi	r3,r2,255
   1ae20:	e0bffc17 	ldw	r2,-16(fp)
   1ae24:	1885383a 	mul	r2,r3,r2
   1ae28:	1005d23a 	srai	r2,r2,8
   1ae2c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
   1ae30:	e0fffb17 	ldw	r3,-20(fp)
   1ae34:	e0bffd17 	ldw	r2,-12(fp)
   1ae38:	18800116 	blt	r3,r2,1ae40 <lcd_repaint_screen+0x90>
      offset = 0;
   1ae3c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   1ae40:	e03ffa15 	stw	zero,-24(fp)
   1ae44:	00004706 	br	1af64 <lcd_repaint_screen+0x1b4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   1ae48:	e0fffa17 	ldw	r3,-24(fp)
   1ae4c:	e0bffb17 	ldw	r2,-20(fp)
   1ae50:	1885883a 	add	r2,r3,r2
   1ae54:	e0fffd17 	ldw	r3,-12(fp)
   1ae58:	10c9283a 	div	r4,r2,r3
   1ae5c:	e0fffd17 	ldw	r3,-12(fp)
   1ae60:	20c7383a 	mul	r3,r4,r3
   1ae64:	10c5c83a 	sub	r2,r2,r3
   1ae68:	e13fff17 	ldw	r4,-4(fp)
   1ae6c:	e0fff917 	ldw	r3,-28(fp)
   1ae70:	18c018e4 	muli	r3,r3,99
   1ae74:	20c7883a 	add	r3,r4,r3
   1ae78:	1885883a 	add	r2,r3,r2
   1ae7c:	10801004 	addi	r2,r2,64
   1ae80:	10800003 	ldbu	r2,0(r2)
   1ae84:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   1ae88:	e0ffff17 	ldw	r3,-4(fp)
   1ae8c:	e0bff917 	ldw	r2,-28(fp)
   1ae90:	108018e4 	muli	r2,r2,99
   1ae94:	1887883a 	add	r3,r3,r2
   1ae98:	e0bffa17 	ldw	r2,-24(fp)
   1ae9c:	1885883a 	add	r2,r3,r2
   1aea0:	10800c04 	addi	r2,r2,48
   1aea4:	10800003 	ldbu	r2,0(r2)
   1aea8:	10c03fcc 	andi	r3,r2,255
   1aeac:	18c0201c 	xori	r3,r3,128
   1aeb0:	18ffe004 	addi	r3,r3,-128
   1aeb4:	e0bffe07 	ldb	r2,-8(fp)
   1aeb8:	18802726 	beq	r3,r2,1af58 <lcd_repaint_screen+0x1a8>
      {
        unsigned char address = x + colstart[y];
   1aebc:	e0fff917 	ldw	r3,-28(fp)
   1aec0:	d0a01284 	addi	r2,gp,-32694
   1aec4:	1885883a 	add	r2,r3,r2
   1aec8:	10800003 	ldbu	r2,0(r2)
   1aecc:	1007883a 	mov	r3,r2
   1aed0:	e0bffa17 	ldw	r2,-24(fp)
   1aed4:	1885883a 	add	r2,r3,r2
   1aed8:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
   1aedc:	e0fffe43 	ldbu	r3,-7(fp)
   1aee0:	e0bfff17 	ldw	r2,-4(fp)
   1aee4:	108008c3 	ldbu	r2,35(r2)
   1aee8:	10803fcc 	andi	r2,r2,255
   1aeec:	1080201c 	xori	r2,r2,128
   1aef0:	10bfe004 	addi	r2,r2,-128
   1aef4:	18800a26 	beq	r3,r2,1af20 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   1aef8:	e0fffe43 	ldbu	r3,-7(fp)
   1aefc:	00bfe004 	movi	r2,-128
   1af00:	1884b03a 	or	r2,r3,r2
   1af04:	10803fcc 	andi	r2,r2,255
   1af08:	100b883a 	mov	r5,r2
   1af0c:	e13fff17 	ldw	r4,-4(fp)
   1af10:	001ab500 	call	1ab50 <lcd_write_command>
          sp->address = address;
   1af14:	e0fffe43 	ldbu	r3,-7(fp)
   1af18:	e0bfff17 	ldw	r2,-4(fp)
   1af1c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   1af20:	e0bffe03 	ldbu	r2,-8(fp)
   1af24:	10803fcc 	andi	r2,r2,255
   1af28:	100b883a 	mov	r5,r2
   1af2c:	e13fff17 	ldw	r4,-4(fp)
   1af30:	001ac080 	call	1ac08 <lcd_write_data>
        sp->line[y].visible[x] = c;
   1af34:	e0ffff17 	ldw	r3,-4(fp)
   1af38:	e0bff917 	ldw	r2,-28(fp)
   1af3c:	108018e4 	muli	r2,r2,99
   1af40:	1887883a 	add	r3,r3,r2
   1af44:	e0bffa17 	ldw	r2,-24(fp)
   1af48:	1885883a 	add	r2,r3,r2
   1af4c:	10800c04 	addi	r2,r2,48
   1af50:	e0fffe03 	ldbu	r3,-8(fp)
   1af54:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   1af58:	e0bffa17 	ldw	r2,-24(fp)
   1af5c:	10800044 	addi	r2,r2,1
   1af60:	e0bffa15 	stw	r2,-24(fp)
   1af64:	e0bffa17 	ldw	r2,-24(fp)
   1af68:	10800410 	cmplti	r2,r2,16
   1af6c:	103fb61e 	bne	r2,zero,1ae48 <__alt_data_end+0xf001ae48>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1af70:	e0bff917 	ldw	r2,-28(fp)
   1af74:	10800044 	addi	r2,r2,1
   1af78:	e0bff915 	stw	r2,-28(fp)
   1af7c:	e0bff917 	ldw	r2,-28(fp)
   1af80:	10800090 	cmplti	r2,r2,2
   1af84:	103f951e 	bne	r2,zero,1addc <__alt_data_end+0xf001addc>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   1af88:	0001883a 	nop
   1af8c:	e037883a 	mov	sp,fp
   1af90:	dfc00117 	ldw	ra,4(sp)
   1af94:	df000017 	ldw	fp,0(sp)
   1af98:	dec00204 	addi	sp,sp,8
   1af9c:	f800283a 	ret

0001afa0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   1afa0:	defffc04 	addi	sp,sp,-16
   1afa4:	dfc00315 	stw	ra,12(sp)
   1afa8:	df000215 	stw	fp,8(sp)
   1afac:	df000204 	addi	fp,sp,8
   1afb0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1afb4:	e03ffe15 	stw	zero,-8(fp)
   1afb8:	00001d06 	br	1b030 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
   1afbc:	e0bffe17 	ldw	r2,-8(fp)
   1afc0:	00800f16 	blt	zero,r2,1b000 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   1afc4:	e0bffe17 	ldw	r2,-8(fp)
   1afc8:	108018e4 	muli	r2,r2,99
   1afcc:	10801004 	addi	r2,r2,64
   1afd0:	e0ffff17 	ldw	r3,-4(fp)
   1afd4:	1889883a 	add	r4,r3,r2
   1afd8:	e0bffe17 	ldw	r2,-8(fp)
   1afdc:	10800044 	addi	r2,r2,1
   1afe0:	108018e4 	muli	r2,r2,99
   1afe4:	10801004 	addi	r2,r2,64
   1afe8:	e0ffff17 	ldw	r3,-4(fp)
   1afec:	1885883a 	add	r2,r3,r2
   1aff0:	01801404 	movi	r6,80
   1aff4:	100b883a 	mov	r5,r2
   1aff8:	000957c0 	call	957c <memcpy>
   1affc:	00000906 	br	1b024 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   1b000:	e0bffe17 	ldw	r2,-8(fp)
   1b004:	108018e4 	muli	r2,r2,99
   1b008:	10801004 	addi	r2,r2,64
   1b00c:	e0ffff17 	ldw	r3,-4(fp)
   1b010:	1885883a 	add	r2,r3,r2
   1b014:	01801404 	movi	r6,80
   1b018:	01400804 	movi	r5,32
   1b01c:	1009883a 	mov	r4,r2
   1b020:	00096c40 	call	96c4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b024:	e0bffe17 	ldw	r2,-8(fp)
   1b028:	10800044 	addi	r2,r2,1
   1b02c:	e0bffe15 	stw	r2,-8(fp)
   1b030:	e0bffe17 	ldw	r2,-8(fp)
   1b034:	10800090 	cmplti	r2,r2,2
   1b038:	103fe01e 	bne	r2,zero,1afbc <__alt_data_end+0xf001afbc>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   1b03c:	e0bfff17 	ldw	r2,-4(fp)
   1b040:	10800883 	ldbu	r2,34(r2)
   1b044:	10bfffc4 	addi	r2,r2,-1
   1b048:	1007883a 	mov	r3,r2
   1b04c:	e0bfff17 	ldw	r2,-4(fp)
   1b050:	10c00885 	stb	r3,34(r2)
}
   1b054:	0001883a 	nop
   1b058:	e037883a 	mov	sp,fp
   1b05c:	dfc00117 	ldw	ra,4(sp)
   1b060:	df000017 	ldw	fp,0(sp)
   1b064:	dec00204 	addi	sp,sp,8
   1b068:	f800283a 	ret

0001b06c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   1b06c:	defff904 	addi	sp,sp,-28
   1b070:	dfc00615 	stw	ra,24(sp)
   1b074:	df000515 	stw	fp,20(sp)
   1b078:	df000504 	addi	fp,sp,20
   1b07c:	e13ffe15 	stw	r4,-8(fp)
   1b080:	2805883a 	mov	r2,r5
   1b084:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   1b088:	e03ffb15 	stw	zero,-20(fp)
   1b08c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   1b090:	e0bffe17 	ldw	r2,-8(fp)
   1b094:	10800a03 	ldbu	r2,40(r2)
   1b098:	10803fcc 	andi	r2,r2,255
   1b09c:	1080201c 	xori	r2,r2,128
   1b0a0:	10bfe004 	addi	r2,r2,-128
   1b0a4:	108016d8 	cmpnei	r2,r2,91
   1b0a8:	1000411e 	bne	r2,zero,1b1b0 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
   1b0ac:	e0bffe17 	ldw	r2,-8(fp)
   1b0b0:	10800a04 	addi	r2,r2,40
   1b0b4:	10800044 	addi	r2,r2,1
   1b0b8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   1b0bc:	00000c06 	br	1b0f0 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   1b0c0:	e0bffb17 	ldw	r2,-20(fp)
   1b0c4:	10c002a4 	muli	r3,r2,10
   1b0c8:	e0bffd17 	ldw	r2,-12(fp)
   1b0cc:	11000044 	addi	r4,r2,1
   1b0d0:	e13ffd15 	stw	r4,-12(fp)
   1b0d4:	10800003 	ldbu	r2,0(r2)
   1b0d8:	10803fcc 	andi	r2,r2,255
   1b0dc:	1080201c 	xori	r2,r2,128
   1b0e0:	10bfe004 	addi	r2,r2,-128
   1b0e4:	10bff404 	addi	r2,r2,-48
   1b0e8:	1885883a 	add	r2,r3,r2
   1b0ec:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   1b0f0:	d0e01797 	ldw	r3,-32674(gp)
   1b0f4:	e0bffd17 	ldw	r2,-12(fp)
   1b0f8:	10800003 	ldbu	r2,0(r2)
   1b0fc:	10803fcc 	andi	r2,r2,255
   1b100:	1080201c 	xori	r2,r2,128
   1b104:	10bfe004 	addi	r2,r2,-128
   1b108:	10800044 	addi	r2,r2,1
   1b10c:	1885883a 	add	r2,r3,r2
   1b110:	10800003 	ldbu	r2,0(r2)
   1b114:	10803fcc 	andi	r2,r2,255
   1b118:	1080010c 	andi	r2,r2,4
   1b11c:	103fe81e 	bne	r2,zero,1b0c0 <__alt_data_end+0xf001b0c0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   1b120:	e0bffd17 	ldw	r2,-12(fp)
   1b124:	10800003 	ldbu	r2,0(r2)
   1b128:	10803fcc 	andi	r2,r2,255
   1b12c:	1080201c 	xori	r2,r2,128
   1b130:	10bfe004 	addi	r2,r2,-128
   1b134:	10800ed8 	cmpnei	r2,r2,59
   1b138:	10001f1e 	bne	r2,zero,1b1b8 <lcd_handle_escape+0x14c>
    {
      ptr++;
   1b13c:	e0bffd17 	ldw	r2,-12(fp)
   1b140:	10800044 	addi	r2,r2,1
   1b144:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   1b148:	00000c06 	br	1b17c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   1b14c:	e0bffc17 	ldw	r2,-16(fp)
   1b150:	10c002a4 	muli	r3,r2,10
   1b154:	e0bffd17 	ldw	r2,-12(fp)
   1b158:	11000044 	addi	r4,r2,1
   1b15c:	e13ffd15 	stw	r4,-12(fp)
   1b160:	10800003 	ldbu	r2,0(r2)
   1b164:	10803fcc 	andi	r2,r2,255
   1b168:	1080201c 	xori	r2,r2,128
   1b16c:	10bfe004 	addi	r2,r2,-128
   1b170:	10bff404 	addi	r2,r2,-48
   1b174:	1885883a 	add	r2,r3,r2
   1b178:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   1b17c:	d0e01797 	ldw	r3,-32674(gp)
   1b180:	e0bffd17 	ldw	r2,-12(fp)
   1b184:	10800003 	ldbu	r2,0(r2)
   1b188:	10803fcc 	andi	r2,r2,255
   1b18c:	1080201c 	xori	r2,r2,128
   1b190:	10bfe004 	addi	r2,r2,-128
   1b194:	10800044 	addi	r2,r2,1
   1b198:	1885883a 	add	r2,r3,r2
   1b19c:	10800003 	ldbu	r2,0(r2)
   1b1a0:	10803fcc 	andi	r2,r2,255
   1b1a4:	1080010c 	andi	r2,r2,4
   1b1a8:	103fe81e 	bne	r2,zero,1b14c <__alt_data_end+0xf001b14c>
   1b1ac:	00000206 	br	1b1b8 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   1b1b0:	00bfffc4 	movi	r2,-1
   1b1b4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   1b1b8:	e0bfff07 	ldb	r2,-4(fp)
   1b1bc:	10c012a0 	cmpeqi	r3,r2,74
   1b1c0:	1800291e 	bne	r3,zero,1b268 <lcd_handle_escape+0x1fc>
   1b1c4:	10c012c8 	cmpgei	r3,r2,75
   1b1c8:	1800031e 	bne	r3,zero,1b1d8 <lcd_handle_escape+0x16c>
   1b1cc:	10801220 	cmpeqi	r2,r2,72
   1b1d0:	1000061e 	bne	r2,zero,1b1ec <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   1b1d4:	00004a06 	br	1b300 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
   1b1d8:	10c012e0 	cmpeqi	r3,r2,75
   1b1dc:	1800281e 	bne	r3,zero,1b280 <lcd_handle_escape+0x214>
   1b1e0:	108019a0 	cmpeqi	r2,r2,102
   1b1e4:	1000011e 	bne	r2,zero,1b1ec <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   1b1e8:	00004506 	br	1b300 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   1b1ec:	e0bffc17 	ldw	r2,-16(fp)
   1b1f0:	0080050e 	bge	zero,r2,1b208 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
   1b1f4:	e0bffc17 	ldw	r2,-16(fp)
   1b1f8:	10bfffc4 	addi	r2,r2,-1
   1b1fc:	1007883a 	mov	r3,r2
   1b200:	e0bffe17 	ldw	r2,-8(fp)
   1b204:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   1b208:	e0bffb17 	ldw	r2,-20(fp)
   1b20c:	0080370e 	bge	zero,r2,1b2ec <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
   1b210:	e0bffb17 	ldw	r2,-20(fp)
   1b214:	10bfffc4 	addi	r2,r2,-1
   1b218:	1007883a 	mov	r3,r2
   1b21c:	e0bffe17 	ldw	r2,-8(fp)
   1b220:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   1b224:	e0bffe17 	ldw	r2,-8(fp)
   1b228:	10800883 	ldbu	r2,34(r2)
   1b22c:	10803fcc 	andi	r2,r2,255
   1b230:	10800170 	cmpltui	r2,r2,5
   1b234:	1000061e 	bne	r2,zero,1b250 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
   1b238:	e0bffe17 	ldw	r2,-8(fp)
   1b23c:	00c00104 	movi	r3,4
   1b240:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   1b244:	00000206 	br	1b250 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
   1b248:	e13ffe17 	ldw	r4,-8(fp)
   1b24c:	001afa00 	call	1afa0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   1b250:	e0bffe17 	ldw	r2,-8(fp)
   1b254:	10800883 	ldbu	r2,34(r2)
   1b258:	10803fcc 	andi	r2,r2,255
   1b25c:	108000e8 	cmpgeui	r2,r2,3
   1b260:	103ff91e 	bne	r2,zero,1b248 <__alt_data_end+0xf001b248>
        lcd_scroll_up(sp);
    }
    break;
   1b264:	00002106 	br	1b2ec <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   1b268:	e0bffb17 	ldw	r2,-20(fp)
   1b26c:	10800098 	cmpnei	r2,r2,2
   1b270:	1000201e 	bne	r2,zero,1b2f4 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
   1b274:	e13ffe17 	ldw	r4,-8(fp)
   1b278:	001ace00 	call	1ace0 <lcd_clear_screen>
    break;
   1b27c:	00001d06 	br	1b2f4 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   1b280:	e0bffb17 	ldw	r2,-20(fp)
   1b284:	00801d16 	blt	zero,r2,1b2fc <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   1b288:	e0bffe17 	ldw	r2,-8(fp)
   1b28c:	10800843 	ldbu	r2,33(r2)
   1b290:	10803fcc 	andi	r2,r2,255
   1b294:	10801428 	cmpgeui	r2,r2,80
   1b298:	1000181e 	bne	r2,zero,1b2fc <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   1b29c:	e0bffe17 	ldw	r2,-8(fp)
   1b2a0:	10800883 	ldbu	r2,34(r2)
   1b2a4:	10803fcc 	andi	r2,r2,255
   1b2a8:	108018e4 	muli	r2,r2,99
   1b2ac:	10801004 	addi	r2,r2,64
   1b2b0:	e0fffe17 	ldw	r3,-8(fp)
   1b2b4:	1887883a 	add	r3,r3,r2
   1b2b8:	e0bffe17 	ldw	r2,-8(fp)
   1b2bc:	10800843 	ldbu	r2,33(r2)
   1b2c0:	10803fcc 	andi	r2,r2,255
   1b2c4:	1889883a 	add	r4,r3,r2
   1b2c8:	e0bffe17 	ldw	r2,-8(fp)
   1b2cc:	10800843 	ldbu	r2,33(r2)
   1b2d0:	10803fcc 	andi	r2,r2,255
   1b2d4:	00c01404 	movi	r3,80
   1b2d8:	1885c83a 	sub	r2,r3,r2
   1b2dc:	100d883a 	mov	r6,r2
   1b2e0:	01400804 	movi	r5,32
   1b2e4:	00096c40 	call	96c4 <memset>
    }
    break;
   1b2e8:	00000406 	br	1b2fc <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   1b2ec:	0001883a 	nop
   1b2f0:	00000306 	br	1b300 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   1b2f4:	0001883a 	nop
   1b2f8:	00000106 	br	1b300 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   1b2fc:	0001883a 	nop
  }
}
   1b300:	0001883a 	nop
   1b304:	e037883a 	mov	sp,fp
   1b308:	dfc00117 	ldw	ra,4(sp)
   1b30c:	df000017 	ldw	fp,0(sp)
   1b310:	dec00204 	addi	sp,sp,8
   1b314:	f800283a 	ret

0001b318 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   1b318:	defff304 	addi	sp,sp,-52
   1b31c:	dfc00c15 	stw	ra,48(sp)
   1b320:	df000b15 	stw	fp,44(sp)
   1b324:	df000b04 	addi	fp,sp,44
   1b328:	e13ffc15 	stw	r4,-16(fp)
   1b32c:	e17ffd15 	stw	r5,-12(fp)
   1b330:	e1bffe15 	stw	r6,-8(fp)
   1b334:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   1b338:	e0bffe17 	ldw	r2,-8(fp)
   1b33c:	e0fffd17 	ldw	r3,-12(fp)
   1b340:	1885883a 	add	r2,r3,r2
   1b344:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   1b348:	e0bffc17 	ldw	r2,-16(fp)
   1b34c:	00c00044 	movi	r3,1
   1b350:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   1b354:	00009906 	br	1b5bc <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
   1b358:	e0bffd17 	ldw	r2,-12(fp)
   1b35c:	10800003 	ldbu	r2,0(r2)
   1b360:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
   1b364:	e0bffc17 	ldw	r2,-16(fp)
   1b368:	10800903 	ldbu	r2,36(r2)
   1b36c:	10803fcc 	andi	r2,r2,255
   1b370:	1080201c 	xori	r2,r2,128
   1b374:	10bfe004 	addi	r2,r2,-128
   1b378:	10003716 	blt	r2,zero,1b458 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
   1b37c:	e0bffc17 	ldw	r2,-16(fp)
   1b380:	10800903 	ldbu	r2,36(r2)
   1b384:	10803fcc 	andi	r2,r2,255
   1b388:	1080201c 	xori	r2,r2,128
   1b38c:	10bfe004 	addi	r2,r2,-128
   1b390:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   1b394:	e0bffa17 	ldw	r2,-24(fp)
   1b398:	1000031e 	bne	r2,zero,1b3a8 <altera_avalon_lcd_16207_write+0x90>
   1b39c:	e0bff907 	ldb	r2,-28(fp)
   1b3a0:	108016d8 	cmpnei	r2,r2,91
   1b3a4:	10000d1e 	bne	r2,zero,1b3dc <altera_avalon_lcd_16207_write+0xc4>
   1b3a8:	e0bffa17 	ldw	r2,-24(fp)
   1b3ac:	10001826 	beq	r2,zero,1b410 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
   1b3b0:	d0e01797 	ldw	r3,-32674(gp)
   1b3b4:	e0bff907 	ldb	r2,-28(fp)
   1b3b8:	10800044 	addi	r2,r2,1
   1b3bc:	1885883a 	add	r2,r3,r2
   1b3c0:	10800003 	ldbu	r2,0(r2)
   1b3c4:	10803fcc 	andi	r2,r2,255
   1b3c8:	1080010c 	andi	r2,r2,4
   1b3cc:	1000101e 	bne	r2,zero,1b410 <altera_avalon_lcd_16207_write+0xf8>
   1b3d0:	e0bff907 	ldb	r2,-28(fp)
   1b3d4:	10800ee0 	cmpeqi	r2,r2,59
   1b3d8:	10000d1e 	bne	r2,zero,1b410 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
   1b3dc:	e0fffc17 	ldw	r3,-16(fp)
   1b3e0:	e0bffa17 	ldw	r2,-24(fp)
   1b3e4:	1885883a 	add	r2,r3,r2
   1b3e8:	10800a04 	addi	r2,r2,40
   1b3ec:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   1b3f0:	e0bff907 	ldb	r2,-28(fp)
   1b3f4:	100b883a 	mov	r5,r2
   1b3f8:	e13ffc17 	ldw	r4,-16(fp)
   1b3fc:	001b06c0 	call	1b06c <lcd_handle_escape>

        sp->esccount = -1;
   1b400:	e0bffc17 	ldw	r2,-16(fp)
   1b404:	00ffffc4 	movi	r3,-1
   1b408:	10c00905 	stb	r3,36(r2)
   1b40c:	00006806 	br	1b5b0 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   1b410:	e0bffc17 	ldw	r2,-16(fp)
   1b414:	10800903 	ldbu	r2,36(r2)
   1b418:	10803fcc 	andi	r2,r2,255
   1b41c:	108001e8 	cmpgeui	r2,r2,7
   1b420:	1000631e 	bne	r2,zero,1b5b0 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
   1b424:	e0fffc17 	ldw	r3,-16(fp)
   1b428:	e0bffa17 	ldw	r2,-24(fp)
   1b42c:	1885883a 	add	r2,r3,r2
   1b430:	10800a04 	addi	r2,r2,40
   1b434:	e0fff903 	ldbu	r3,-28(fp)
   1b438:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   1b43c:	e0bffc17 	ldw	r2,-16(fp)
   1b440:	10800903 	ldbu	r2,36(r2)
   1b444:	10800044 	addi	r2,r2,1
   1b448:	1007883a 	mov	r3,r2
   1b44c:	e0bffc17 	ldw	r2,-16(fp)
   1b450:	10c00905 	stb	r3,36(r2)
   1b454:	00005606 	br	1b5b0 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
   1b458:	e0bff907 	ldb	r2,-28(fp)
   1b45c:	108006d8 	cmpnei	r2,r2,27
   1b460:	1000031e 	bne	r2,zero,1b470 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
   1b464:	e0bffc17 	ldw	r2,-16(fp)
   1b468:	10000905 	stb	zero,36(r2)
   1b46c:	00005006 	br	1b5b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
   1b470:	e0bff907 	ldb	r2,-28(fp)
   1b474:	10800358 	cmpnei	r2,r2,13
   1b478:	1000031e 	bne	r2,zero,1b488 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
   1b47c:	e0bffc17 	ldw	r2,-16(fp)
   1b480:	10000845 	stb	zero,33(r2)
   1b484:	00004a06 	br	1b5b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
   1b488:	e0bff907 	ldb	r2,-28(fp)
   1b48c:	10800298 	cmpnei	r2,r2,10
   1b490:	1000101e 	bne	r2,zero,1b4d4 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
   1b494:	e0bffc17 	ldw	r2,-16(fp)
   1b498:	10000845 	stb	zero,33(r2)
      sp->y++;
   1b49c:	e0bffc17 	ldw	r2,-16(fp)
   1b4a0:	10800883 	ldbu	r2,34(r2)
   1b4a4:	10800044 	addi	r2,r2,1
   1b4a8:	1007883a 	mov	r3,r2
   1b4ac:	e0bffc17 	ldw	r2,-16(fp)
   1b4b0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   1b4b4:	e0bffc17 	ldw	r2,-16(fp)
   1b4b8:	10800883 	ldbu	r2,34(r2)
   1b4bc:	10803fcc 	andi	r2,r2,255
   1b4c0:	108000f0 	cmpltui	r2,r2,3
   1b4c4:	10003a1e 	bne	r2,zero,1b5b0 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
   1b4c8:	e13ffc17 	ldw	r4,-16(fp)
   1b4cc:	001afa00 	call	1afa0 <lcd_scroll_up>
   1b4d0:	00003706 	br	1b5b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
   1b4d4:	e0bff907 	ldb	r2,-28(fp)
   1b4d8:	10800218 	cmpnei	r2,r2,8
   1b4dc:	10000b1e 	bne	r2,zero,1b50c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
   1b4e0:	e0bffc17 	ldw	r2,-16(fp)
   1b4e4:	10800843 	ldbu	r2,33(r2)
   1b4e8:	10803fcc 	andi	r2,r2,255
   1b4ec:	10003026 	beq	r2,zero,1b5b0 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
   1b4f0:	e0bffc17 	ldw	r2,-16(fp)
   1b4f4:	10800843 	ldbu	r2,33(r2)
   1b4f8:	10bfffc4 	addi	r2,r2,-1
   1b4fc:	1007883a 	mov	r3,r2
   1b500:	e0bffc17 	ldw	r2,-16(fp)
   1b504:	10c00845 	stb	r3,33(r2)
   1b508:	00002906 	br	1b5b0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
   1b50c:	d0e01797 	ldw	r3,-32674(gp)
   1b510:	e0bff907 	ldb	r2,-28(fp)
   1b514:	10800044 	addi	r2,r2,1
   1b518:	1885883a 	add	r2,r3,r2
   1b51c:	10800003 	ldbu	r2,0(r2)
   1b520:	10803fcc 	andi	r2,r2,255
   1b524:	1080201c 	xori	r2,r2,128
   1b528:	10bfe004 	addi	r2,r2,-128
   1b52c:	108025cc 	andi	r2,r2,151
   1b530:	10001f26 	beq	r2,zero,1b5b0 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   1b534:	e0bffc17 	ldw	r2,-16(fp)
   1b538:	10800883 	ldbu	r2,34(r2)
   1b53c:	10803fcc 	andi	r2,r2,255
   1b540:	108000b0 	cmpltui	r2,r2,2
   1b544:	1000021e 	bne	r2,zero,1b550 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
   1b548:	e13ffc17 	ldw	r4,-16(fp)
   1b54c:	001afa00 	call	1afa0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   1b550:	e0bffc17 	ldw	r2,-16(fp)
   1b554:	10800843 	ldbu	r2,33(r2)
   1b558:	10803fcc 	andi	r2,r2,255
   1b55c:	10801428 	cmpgeui	r2,r2,80
   1b560:	10000d1e 	bne	r2,zero,1b598 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
   1b564:	e0bffc17 	ldw	r2,-16(fp)
   1b568:	10800883 	ldbu	r2,34(r2)
   1b56c:	10c03fcc 	andi	r3,r2,255
   1b570:	e0bffc17 	ldw	r2,-16(fp)
   1b574:	10800843 	ldbu	r2,33(r2)
   1b578:	10803fcc 	andi	r2,r2,255
   1b57c:	e13ffc17 	ldw	r4,-16(fp)
   1b580:	18c018e4 	muli	r3,r3,99
   1b584:	20c7883a 	add	r3,r4,r3
   1b588:	1885883a 	add	r2,r3,r2
   1b58c:	10801004 	addi	r2,r2,64
   1b590:	e0fff903 	ldbu	r3,-28(fp)
   1b594:	10c00005 	stb	r3,0(r2)

      sp->x++;
   1b598:	e0bffc17 	ldw	r2,-16(fp)
   1b59c:	10800843 	ldbu	r2,33(r2)
   1b5a0:	10800044 	addi	r2,r2,1
   1b5a4:	1007883a 	mov	r3,r2
   1b5a8:	e0bffc17 	ldw	r2,-16(fp)
   1b5ac:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   1b5b0:	e0bffd17 	ldw	r2,-12(fp)
   1b5b4:	10800044 	addi	r2,r2,1
   1b5b8:	e0bffd15 	stw	r2,-12(fp)
   1b5bc:	e0fffd17 	ldw	r3,-12(fp)
   1b5c0:	e0bff817 	ldw	r2,-32(fp)
   1b5c4:	18bf6436 	bltu	r3,r2,1b358 <__alt_data_end+0xf001b358>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   1b5c8:	00800404 	movi	r2,16
   1b5cc:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b5d0:	e03ff515 	stw	zero,-44(fp)
   1b5d4:	00003706 	br	1b6b4 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   1b5d8:	00801404 	movi	r2,80
   1b5dc:	e0bff715 	stw	r2,-36(fp)
   1b5e0:	00001106 	br	1b628 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
   1b5e4:	e0bff717 	ldw	r2,-36(fp)
   1b5e8:	10bfffc4 	addi	r2,r2,-1
   1b5ec:	e13ffc17 	ldw	r4,-16(fp)
   1b5f0:	e0fff517 	ldw	r3,-44(fp)
   1b5f4:	18c018e4 	muli	r3,r3,99
   1b5f8:	20c7883a 	add	r3,r4,r3
   1b5fc:	1885883a 	add	r2,r3,r2
   1b600:	10801004 	addi	r2,r2,64
   1b604:	10800003 	ldbu	r2,0(r2)
   1b608:	10803fcc 	andi	r2,r2,255
   1b60c:	1080201c 	xori	r2,r2,128
   1b610:	10bfe004 	addi	r2,r2,-128
   1b614:	10800820 	cmpeqi	r2,r2,32
   1b618:	10000626 	beq	r2,zero,1b634 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   1b61c:	e0bff717 	ldw	r2,-36(fp)
   1b620:	10bfffc4 	addi	r2,r2,-1
   1b624:	e0bff715 	stw	r2,-36(fp)
   1b628:	e0bff717 	ldw	r2,-36(fp)
   1b62c:	00bfed16 	blt	zero,r2,1b5e4 <__alt_data_end+0xf001b5e4>
   1b630:	00000106 	br	1b638 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
   1b634:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   1b638:	e0bff717 	ldw	r2,-36(fp)
   1b63c:	10800448 	cmpgei	r2,r2,17
   1b640:	1000031e 	bne	r2,zero,1b650 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
   1b644:	00800404 	movi	r2,16
   1b648:	e0bff715 	stw	r2,-36(fp)
   1b64c:	00000306 	br	1b65c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
   1b650:	e0bff717 	ldw	r2,-36(fp)
   1b654:	10800044 	addi	r2,r2,1
   1b658:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
   1b65c:	e0bff717 	ldw	r2,-36(fp)
   1b660:	1009883a 	mov	r4,r2
   1b664:	e0fffc17 	ldw	r3,-16(fp)
   1b668:	e0bff517 	ldw	r2,-44(fp)
   1b66c:	108018e4 	muli	r2,r2,99
   1b670:	1885883a 	add	r2,r3,r2
   1b674:	10802444 	addi	r2,r2,145
   1b678:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
   1b67c:	e0fff617 	ldw	r3,-40(fp)
   1b680:	e0bff717 	ldw	r2,-36(fp)
   1b684:	1880020e 	bge	r3,r2,1b690 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
   1b688:	e0bff717 	ldw	r2,-36(fp)
   1b68c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   1b690:	e0fffc17 	ldw	r3,-16(fp)
   1b694:	e0bff517 	ldw	r2,-44(fp)
   1b698:	108018e4 	muli	r2,r2,99
   1b69c:	1885883a 	add	r2,r3,r2
   1b6a0:	10802484 	addi	r2,r2,146
   1b6a4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b6a8:	e0bff517 	ldw	r2,-44(fp)
   1b6ac:	10800044 	addi	r2,r2,1
   1b6b0:	e0bff515 	stw	r2,-44(fp)
   1b6b4:	e0bff517 	ldw	r2,-44(fp)
   1b6b8:	10800090 	cmplti	r2,r2,2
   1b6bc:	103fc61e 	bne	r2,zero,1b5d8 <__alt_data_end+0xf001b5d8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   1b6c0:	e0bff617 	ldw	r2,-40(fp)
   1b6c4:	10800448 	cmpgei	r2,r2,17
   1b6c8:	1000031e 	bne	r2,zero,1b6d8 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
   1b6cc:	e0bffc17 	ldw	r2,-16(fp)
   1b6d0:	10000985 	stb	zero,38(r2)
   1b6d4:	00002d06 	br	1b78c <altera_avalon_lcd_16207_write+0x474>
  else
  {
    widthmax *= 2;
   1b6d8:	e0bff617 	ldw	r2,-40(fp)
   1b6dc:	1085883a 	add	r2,r2,r2
   1b6e0:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
   1b6e4:	e0bff617 	ldw	r2,-40(fp)
   1b6e8:	1007883a 	mov	r3,r2
   1b6ec:	e0bffc17 	ldw	r2,-16(fp)
   1b6f0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b6f4:	e03ff515 	stw	zero,-44(fp)
   1b6f8:	00002106 	br	1b780 <altera_avalon_lcd_16207_write+0x468>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   1b6fc:	e0fffc17 	ldw	r3,-16(fp)
   1b700:	e0bff517 	ldw	r2,-44(fp)
   1b704:	108018e4 	muli	r2,r2,99
   1b708:	1885883a 	add	r2,r3,r2
   1b70c:	10802444 	addi	r2,r2,145
   1b710:	10800003 	ldbu	r2,0(r2)
   1b714:	10803fcc 	andi	r2,r2,255
   1b718:	1080201c 	xori	r2,r2,128
   1b71c:	10bfe004 	addi	r2,r2,-128
   1b720:	10800450 	cmplti	r2,r2,17
   1b724:	1000131e 	bne	r2,zero,1b774 <altera_avalon_lcd_16207_write+0x45c>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   1b728:	e0fffc17 	ldw	r3,-16(fp)
   1b72c:	e0bff517 	ldw	r2,-44(fp)
   1b730:	108018e4 	muli	r2,r2,99
   1b734:	1885883a 	add	r2,r3,r2
   1b738:	10802444 	addi	r2,r2,145
   1b73c:	10800003 	ldbu	r2,0(r2)
   1b740:	10803fcc 	andi	r2,r2,255
   1b744:	1080201c 	xori	r2,r2,128
   1b748:	10bfe004 	addi	r2,r2,-128
   1b74c:	1006923a 	slli	r3,r2,8
   1b750:	e0bff617 	ldw	r2,-40(fp)
   1b754:	1885283a 	div	r2,r3,r2
   1b758:	1009883a 	mov	r4,r2
   1b75c:	e0fffc17 	ldw	r3,-16(fp)
   1b760:	e0bff517 	ldw	r2,-44(fp)
   1b764:	108018e4 	muli	r2,r2,99
   1b768:	1885883a 	add	r2,r3,r2
   1b76c:	10802484 	addi	r2,r2,146
   1b770:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b774:	e0bff517 	ldw	r2,-44(fp)
   1b778:	10800044 	addi	r2,r2,1
   1b77c:	e0bff515 	stw	r2,-44(fp)
   1b780:	e0bff517 	ldw	r2,-44(fp)
   1b784:	10800090 	cmplti	r2,r2,2
   1b788:	103fdc1e 	bne	r2,zero,1b6fc <__alt_data_end+0xf001b6fc>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   1b78c:	e0bffc17 	ldw	r2,-16(fp)
   1b790:	10800943 	ldbu	r2,37(r2)
   1b794:	10803fcc 	andi	r2,r2,255
   1b798:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
   1b79c:	e13ffc17 	ldw	r4,-16(fp)
   1b7a0:	001adb00 	call	1adb0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   1b7a4:	e0bffc17 	ldw	r2,-16(fp)
   1b7a8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   1b7ac:	e0bffc17 	ldw	r2,-16(fp)
   1b7b0:	10800943 	ldbu	r2,37(r2)
   1b7b4:	10c03fcc 	andi	r3,r2,255
   1b7b8:	e0bffb17 	ldw	r2,-20(fp)
   1b7bc:	18800426 	beq	r3,r2,1b7d0 <altera_avalon_lcd_16207_write+0x4b8>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   1b7c0:	e0bffc17 	ldw	r2,-16(fp)
   1b7c4:	00c00044 	movi	r3,1
   1b7c8:	10c009c5 	stb	r3,39(r2)
  }
   1b7cc:	003fef06 	br	1b78c <__alt_data_end+0xf001b78c>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   1b7d0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   1b7d4:	e0bffe17 	ldw	r2,-8(fp)
}
   1b7d8:	e037883a 	mov	sp,fp
   1b7dc:	dfc00117 	ldw	ra,4(sp)
   1b7e0:	df000017 	ldw	fp,0(sp)
   1b7e4:	dec00204 	addi	sp,sp,8
   1b7e8:	f800283a 	ret

0001b7ec <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   1b7ec:	defffc04 	addi	sp,sp,-16
   1b7f0:	dfc00315 	stw	ra,12(sp)
   1b7f4:	df000215 	stw	fp,8(sp)
   1b7f8:	df000204 	addi	fp,sp,8
   1b7fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   1b800:	e0bfff17 	ldw	r2,-4(fp)
   1b804:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   1b808:	e0bffe17 	ldw	r2,-8(fp)
   1b80c:	10800943 	ldbu	r2,37(r2)
   1b810:	10803fcc 	andi	r2,r2,255
   1b814:	10c00044 	addi	r3,r2,1
   1b818:	e0bffe17 	ldw	r2,-8(fp)
   1b81c:	10800983 	ldbu	r2,38(r2)
   1b820:	10803fcc 	andi	r2,r2,255
   1b824:	18800316 	blt	r3,r2,1b834 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   1b828:	e0bffe17 	ldw	r2,-8(fp)
   1b82c:	10000945 	stb	zero,37(r2)
   1b830:	00000606 	br	1b84c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   1b834:	e0bffe17 	ldw	r2,-8(fp)
   1b838:	10800943 	ldbu	r2,37(r2)
   1b83c:	10800044 	addi	r2,r2,1
   1b840:	1007883a 	mov	r3,r2
   1b844:	e0bffe17 	ldw	r2,-8(fp)
   1b848:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   1b84c:	e0bffe17 	ldw	r2,-8(fp)
   1b850:	10800983 	ldbu	r2,38(r2)
   1b854:	10803fcc 	andi	r2,r2,255
   1b858:	10000826 	beq	r2,zero,1b87c <alt_lcd_16207_timeout+0x90>
   1b85c:	e0bffe17 	ldw	r2,-8(fp)
   1b860:	108009c3 	ldbu	r2,39(r2)
   1b864:	10803fcc 	andi	r2,r2,255
   1b868:	1080201c 	xori	r2,r2,128
   1b86c:	10bfe004 	addi	r2,r2,-128
   1b870:	1000021e 	bne	r2,zero,1b87c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   1b874:	e13ffe17 	ldw	r4,-8(fp)
   1b878:	001adb00 	call	1adb0 <lcd_repaint_screen>

  return sp->period;
   1b87c:	e0bffe17 	ldw	r2,-8(fp)
   1b880:	10800717 	ldw	r2,28(r2)
}
   1b884:	e037883a 	mov	sp,fp
   1b888:	dfc00117 	ldw	ra,4(sp)
   1b88c:	df000017 	ldw	fp,0(sp)
   1b890:	dec00204 	addi	sp,sp,8
   1b894:	f800283a 	ret

0001b898 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   1b898:	defffc04 	addi	sp,sp,-16
   1b89c:	dfc00315 	stw	ra,12(sp)
   1b8a0:	df000215 	stw	fp,8(sp)
   1b8a4:	df000204 	addi	fp,sp,8
   1b8a8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   1b8ac:	e0bfff17 	ldw	r2,-4(fp)
   1b8b0:	10800017 	ldw	r2,0(r2)
   1b8b4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   1b8b8:	e0bfff17 	ldw	r2,-4(fp)
   1b8bc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   1b8c0:	010ea604 	movi	r4,15000
   1b8c4:	001ebd40 	call	1ebd4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1b8c8:	e0bffe17 	ldw	r2,-8(fp)
   1b8cc:	00c00c04 	movi	r3,48
   1b8d0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   1b8d4:	01040104 	movi	r4,4100
   1b8d8:	001ebd40 	call	1ebd4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1b8dc:	e0bffe17 	ldw	r2,-8(fp)
   1b8e0:	00c00c04 	movi	r3,48
   1b8e4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   1b8e8:	0100fa04 	movi	r4,1000
   1b8ec:	001ebd40 	call	1ebd4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1b8f0:	e0bffe17 	ldw	r2,-8(fp)
   1b8f4:	00c00c04 	movi	r3,48
   1b8f8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   1b8fc:	01400e04 	movi	r5,56
   1b900:	e13fff17 	ldw	r4,-4(fp)
   1b904:	001ab500 	call	1ab50 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   1b908:	01400204 	movi	r5,8
   1b90c:	e13fff17 	ldw	r4,-4(fp)
   1b910:	001ab500 	call	1ab50 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   1b914:	e13fff17 	ldw	r4,-4(fp)
   1b918:	001ace00 	call	1ace0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   1b91c:	01400184 	movi	r5,6
   1b920:	e13fff17 	ldw	r4,-4(fp)
   1b924:	001ab500 	call	1ab50 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   1b928:	01400304 	movi	r5,12
   1b92c:	e13fff17 	ldw	r4,-4(fp)
   1b930:	001ab500 	call	1ab50 <lcd_write_command>

  sp->esccount = -1;
   1b934:	e0bfff17 	ldw	r2,-4(fp)
   1b938:	00ffffc4 	movi	r3,-1
   1b93c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   1b940:	e0bfff17 	ldw	r2,-4(fp)
   1b944:	10800a04 	addi	r2,r2,40
   1b948:	01800204 	movi	r6,8
   1b94c:	000b883a 	mov	r5,zero
   1b950:	1009883a 	mov	r4,r2
   1b954:	00096c40 	call	96c4 <memset>

  sp->scrollpos = 0;
   1b958:	e0bfff17 	ldw	r2,-4(fp)
   1b95c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   1b960:	e0bfff17 	ldw	r2,-4(fp)
   1b964:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   1b968:	e0bfff17 	ldw	r2,-4(fp)
   1b96c:	100009c5 	stb	zero,39(r2)
   1b970:	d0e05997 	ldw	r3,-32410(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   1b974:	00800284 	movi	r2,10
   1b978:	1885203a 	divu	r2,r3,r2
   1b97c:	1007883a 	mov	r3,r2
   1b980:	e0bfff17 	ldw	r2,-4(fp)
   1b984:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   1b988:	e0bfff17 	ldw	r2,-4(fp)
   1b98c:	10c00104 	addi	r3,r2,4
   1b990:	e0bfff17 	ldw	r2,-4(fp)
   1b994:	10800717 	ldw	r2,28(r2)
   1b998:	e1ffff17 	ldw	r7,-4(fp)
   1b99c:	018000b4 	movhi	r6,2
   1b9a0:	31adfb04 	addi	r6,r6,-18452
   1b9a4:	100b883a 	mov	r5,r2
   1b9a8:	1809883a 	mov	r4,r3
   1b9ac:	001e20c0 	call	1e20c <alt_alarm_start>
}
   1b9b0:	0001883a 	nop
   1b9b4:	e037883a 	mov	sp,fp
   1b9b8:	dfc00117 	ldw	ra,4(sp)
   1b9bc:	df000017 	ldw	fp,0(sp)
   1b9c0:	dec00204 	addi	sp,sp,8
   1b9c4:	f800283a 	ret

0001b9c8 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1b9c8:	defffa04 	addi	sp,sp,-24
   1b9cc:	dfc00515 	stw	ra,20(sp)
   1b9d0:	df000415 	stw	fp,16(sp)
   1b9d4:	df000404 	addi	fp,sp,16
   1b9d8:	e13ffd15 	stw	r4,-12(fp)
   1b9dc:	e17ffe15 	stw	r5,-8(fp)
   1b9e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   1b9e4:	e0bffd17 	ldw	r2,-12(fp)
   1b9e8:	10800017 	ldw	r2,0(r2)
   1b9ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   1b9f0:	e0bffc17 	ldw	r2,-16(fp)
   1b9f4:	10c00a04 	addi	r3,r2,40
   1b9f8:	e0bffd17 	ldw	r2,-12(fp)
   1b9fc:	10800217 	ldw	r2,8(r2)
   1ba00:	100f883a 	mov	r7,r2
   1ba04:	e1bfff17 	ldw	r6,-4(fp)
   1ba08:	e17ffe17 	ldw	r5,-8(fp)
   1ba0c:	1809883a 	mov	r4,r3
   1ba10:	001b3180 	call	1b318 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   1ba14:	e037883a 	mov	sp,fp
   1ba18:	dfc00117 	ldw	ra,4(sp)
   1ba1c:	df000017 	ldw	fp,0(sp)
   1ba20:	dec00204 	addi	sp,sp,8
   1ba24:	f800283a 	ret

0001ba28 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1ba28:	defff904 	addi	sp,sp,-28
   1ba2c:	dfc00615 	stw	ra,24(sp)
   1ba30:	df000515 	stw	fp,20(sp)
   1ba34:	df000504 	addi	fp,sp,20
   1ba38:	e13ffe15 	stw	r4,-8(fp)
   1ba3c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1ba40:	0007883a 	mov	r3,zero
   1ba44:	e0bffe17 	ldw	r2,-8(fp)
   1ba48:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1ba4c:	e0bffe17 	ldw	r2,-8(fp)
   1ba50:	10800104 	addi	r2,r2,4
   1ba54:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba58:	0005303a 	rdctl	r2,status
   1ba5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba60:	e0fffc17 	ldw	r3,-16(fp)
   1ba64:	00bfff84 	movi	r2,-2
   1ba68:	1884703a 	and	r2,r3,r2
   1ba6c:	1001703a 	wrctl	status,r2
  
  return context;
   1ba70:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1ba74:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1ba78:	001eacc0 	call	1eacc <alt_tick>
   1ba7c:	e0bffb17 	ldw	r2,-20(fp)
   1ba80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba84:	e0bffd17 	ldw	r2,-12(fp)
   1ba88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1ba8c:	0001883a 	nop
   1ba90:	e037883a 	mov	sp,fp
   1ba94:	dfc00117 	ldw	ra,4(sp)
   1ba98:	df000017 	ldw	fp,0(sp)
   1ba9c:	dec00204 	addi	sp,sp,8
   1baa0:	f800283a 	ret

0001baa4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1baa4:	defff904 	addi	sp,sp,-28
   1baa8:	dfc00615 	stw	ra,24(sp)
   1baac:	df000515 	stw	fp,20(sp)
   1bab0:	df000504 	addi	fp,sp,20
   1bab4:	e13ffc15 	stw	r4,-16(fp)
   1bab8:	e17ffd15 	stw	r5,-12(fp)
   1babc:	e1bffe15 	stw	r6,-8(fp)
   1bac0:	e1ffff15 	stw	r7,-4(fp)
   1bac4:	e0bfff17 	ldw	r2,-4(fp)
   1bac8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1bacc:	d0a05997 	ldw	r2,-32410(gp)
   1bad0:	1000021e 	bne	r2,zero,1badc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1bad4:	e0bffb17 	ldw	r2,-20(fp)
   1bad8:	d0a05995 	stw	r2,-32410(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1badc:	e0bffc17 	ldw	r2,-16(fp)
   1bae0:	10800104 	addi	r2,r2,4
   1bae4:	00c001c4 	movi	r3,7
   1bae8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1baec:	018000b4 	movhi	r6,2
   1baf0:	31ae8a04 	addi	r6,r6,-17880
   1baf4:	e17ffc17 	ldw	r5,-16(fp)
   1baf8:	e13ffe17 	ldw	r4,-8(fp)
   1bafc:	00019200 	call	1920 <alt_irq_register>
#endif  
}
   1bb00:	0001883a 	nop
   1bb04:	e037883a 	mov	sp,fp
   1bb08:	dfc00117 	ldw	ra,4(sp)
   1bb0c:	df000017 	ldw	fp,0(sp)
   1bb10:	dec00204 	addi	sp,sp,8
   1bb14:	f800283a 	ret

0001bb18 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1bb18:	defffa04 	addi	sp,sp,-24
   1bb1c:	dfc00515 	stw	ra,20(sp)
   1bb20:	df000415 	stw	fp,16(sp)
   1bb24:	df000404 	addi	fp,sp,16
   1bb28:	e13ffd15 	stw	r4,-12(fp)
   1bb2c:	e17ffe15 	stw	r5,-8(fp)
   1bb30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1bb34:	e0bffd17 	ldw	r2,-12(fp)
   1bb38:	10800017 	ldw	r2,0(r2)
   1bb3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   1bb40:	e0bffc17 	ldw	r2,-16(fp)
   1bb44:	10c00a04 	addi	r3,r2,40
   1bb48:	e0bffd17 	ldw	r2,-12(fp)
   1bb4c:	10800217 	ldw	r2,8(r2)
   1bb50:	100f883a 	mov	r7,r2
   1bb54:	e1bfff17 	ldw	r6,-4(fp)
   1bb58:	e17ffe17 	ldw	r5,-8(fp)
   1bb5c:	1809883a 	mov	r4,r3
   1bb60:	001c0280 	call	1c028 <altera_avalon_uart_read>
      fd->fd_flags);
}
   1bb64:	e037883a 	mov	sp,fp
   1bb68:	dfc00117 	ldw	ra,4(sp)
   1bb6c:	df000017 	ldw	fp,0(sp)
   1bb70:	dec00204 	addi	sp,sp,8
   1bb74:	f800283a 	ret

0001bb78 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1bb78:	defffa04 	addi	sp,sp,-24
   1bb7c:	dfc00515 	stw	ra,20(sp)
   1bb80:	df000415 	stw	fp,16(sp)
   1bb84:	df000404 	addi	fp,sp,16
   1bb88:	e13ffd15 	stw	r4,-12(fp)
   1bb8c:	e17ffe15 	stw	r5,-8(fp)
   1bb90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1bb94:	e0bffd17 	ldw	r2,-12(fp)
   1bb98:	10800017 	ldw	r2,0(r2)
   1bb9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   1bba0:	e0bffc17 	ldw	r2,-16(fp)
   1bba4:	10c00a04 	addi	r3,r2,40
   1bba8:	e0bffd17 	ldw	r2,-12(fp)
   1bbac:	10800217 	ldw	r2,8(r2)
   1bbb0:	100f883a 	mov	r7,r2
   1bbb4:	e1bfff17 	ldw	r6,-4(fp)
   1bbb8:	e17ffe17 	ldw	r5,-8(fp)
   1bbbc:	1809883a 	mov	r4,r3
   1bbc0:	001c2400 	call	1c240 <altera_avalon_uart_write>
      fd->fd_flags);
}
   1bbc4:	e037883a 	mov	sp,fp
   1bbc8:	dfc00117 	ldw	ra,4(sp)
   1bbcc:	df000017 	ldw	fp,0(sp)
   1bbd0:	dec00204 	addi	sp,sp,8
   1bbd4:	f800283a 	ret

0001bbd8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   1bbd8:	defffc04 	addi	sp,sp,-16
   1bbdc:	dfc00315 	stw	ra,12(sp)
   1bbe0:	df000215 	stw	fp,8(sp)
   1bbe4:	df000204 	addi	fp,sp,8
   1bbe8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1bbec:	e0bfff17 	ldw	r2,-4(fp)
   1bbf0:	10800017 	ldw	r2,0(r2)
   1bbf4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   1bbf8:	e0bffe17 	ldw	r2,-8(fp)
   1bbfc:	10c00a04 	addi	r3,r2,40
   1bc00:	e0bfff17 	ldw	r2,-4(fp)
   1bc04:	10800217 	ldw	r2,8(r2)
   1bc08:	100b883a 	mov	r5,r2
   1bc0c:	1809883a 	mov	r4,r3
   1bc10:	001bf980 	call	1bf98 <altera_avalon_uart_close>
}
   1bc14:	e037883a 	mov	sp,fp
   1bc18:	dfc00117 	ldw	ra,4(sp)
   1bc1c:	df000017 	ldw	fp,0(sp)
   1bc20:	dec00204 	addi	sp,sp,8
   1bc24:	f800283a 	ret

0001bc28 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   1bc28:	defff904 	addi	sp,sp,-28
   1bc2c:	dfc00615 	stw	ra,24(sp)
   1bc30:	df000515 	stw	fp,20(sp)
   1bc34:	df000504 	addi	fp,sp,20
   1bc38:	e13ffd15 	stw	r4,-12(fp)
   1bc3c:	e17ffe15 	stw	r5,-8(fp)
   1bc40:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   1bc44:	e0bffd17 	ldw	r2,-12(fp)
   1bc48:	10800017 	ldw	r2,0(r2)
   1bc4c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1bc50:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1bc54:	1000041e 	bne	r2,zero,1bc68 <altera_avalon_uart_init+0x40>
   1bc58:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1bc5c:	1000021e 	bne	r2,zero,1bc68 <altera_avalon_uart_init+0x40>
   1bc60:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1bc64:	10000226 	beq	r2,zero,1bc70 <altera_avalon_uart_init+0x48>
   1bc68:	00800044 	movi	r2,1
   1bc6c:	00000106 	br	1bc74 <altera_avalon_uart_init+0x4c>
   1bc70:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1bc74:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   1bc78:	e0bffc17 	ldw	r2,-16(fp)
   1bc7c:	10000d1e 	bne	r2,zero,1bcb4 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   1bc80:	e0bffd17 	ldw	r2,-12(fp)
   1bc84:	00c32004 	movi	r3,3200
   1bc88:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   1bc8c:	e0bffb17 	ldw	r2,-20(fp)
   1bc90:	10800304 	addi	r2,r2,12
   1bc94:	e0fffd17 	ldw	r3,-12(fp)
   1bc98:	18c00117 	ldw	r3,4(r3)
   1bc9c:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
   1bca0:	018000b4 	movhi	r6,2
   1bca4:	31af3304 	addi	r6,r6,-17204
   1bca8:	e17ffd17 	ldw	r5,-12(fp)
   1bcac:	e13fff17 	ldw	r4,-4(fp)
   1bcb0:	00019200 	call	1920 <alt_irq_register>
#endif  
  }
}
   1bcb4:	0001883a 	nop
   1bcb8:	e037883a 	mov	sp,fp
   1bcbc:	dfc00117 	ldw	ra,4(sp)
   1bcc0:	df000017 	ldw	fp,0(sp)
   1bcc4:	dec00204 	addi	sp,sp,8
   1bcc8:	f800283a 	ret

0001bccc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   1bccc:	defff904 	addi	sp,sp,-28
   1bcd0:	dfc00615 	stw	ra,24(sp)
   1bcd4:	df000515 	stw	fp,20(sp)
   1bcd8:	df000504 	addi	fp,sp,20
   1bcdc:	e13ffe15 	stw	r4,-8(fp)
   1bce0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   1bce4:	e0bffe17 	ldw	r2,-8(fp)
   1bce8:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
   1bcec:	e0bffb17 	ldw	r2,-20(fp)
   1bcf0:	10800017 	ldw	r2,0(r2)
   1bcf4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   1bcf8:	e0bffc17 	ldw	r2,-16(fp)
   1bcfc:	10800204 	addi	r2,r2,8
   1bd00:	10800037 	ldwio	r2,0(r2)
   1bd04:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   1bd08:	e0bffc17 	ldw	r2,-16(fp)
   1bd0c:	10800204 	addi	r2,r2,8
   1bd10:	0007883a 	mov	r3,zero
   1bd14:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   1bd18:	e0bffc17 	ldw	r2,-16(fp)
   1bd1c:	10800204 	addi	r2,r2,8
   1bd20:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   1bd24:	e0bffd17 	ldw	r2,-12(fp)
   1bd28:	1080200c 	andi	r2,r2,128
   1bd2c:	10000326 	beq	r2,zero,1bd3c <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
   1bd30:	e17ffd17 	ldw	r5,-12(fp)
   1bd34:	e13ffb17 	ldw	r4,-20(fp)
   1bd38:	001bd6c0 	call	1bd6c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   1bd3c:	e0bffd17 	ldw	r2,-12(fp)
   1bd40:	1081100c 	andi	r2,r2,1088
   1bd44:	10000326 	beq	r2,zero,1bd54 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   1bd48:	e17ffd17 	ldw	r5,-12(fp)
   1bd4c:	e13ffb17 	ldw	r4,-20(fp)
   1bd50:	001be500 	call	1be50 <altera_avalon_uart_txirq>
  }
  

}
   1bd54:	0001883a 	nop
   1bd58:	e037883a 	mov	sp,fp
   1bd5c:	dfc00117 	ldw	ra,4(sp)
   1bd60:	df000017 	ldw	fp,0(sp)
   1bd64:	dec00204 	addi	sp,sp,8
   1bd68:	f800283a 	ret

0001bd6c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   1bd6c:	defffc04 	addi	sp,sp,-16
   1bd70:	df000315 	stw	fp,12(sp)
   1bd74:	df000304 	addi	fp,sp,12
   1bd78:	e13ffe15 	stw	r4,-8(fp)
   1bd7c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   1bd80:	e0bfff17 	ldw	r2,-4(fp)
   1bd84:	108000cc 	andi	r2,r2,3
   1bd88:	10002c1e 	bne	r2,zero,1be3c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   1bd8c:	e0bffe17 	ldw	r2,-8(fp)
   1bd90:	10800317 	ldw	r2,12(r2)
   1bd94:	e0bffe17 	ldw	r2,-8(fp)
   1bd98:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1bd9c:	e0bffe17 	ldw	r2,-8(fp)
   1bda0:	10800317 	ldw	r2,12(r2)
   1bda4:	10800044 	addi	r2,r2,1
   1bda8:	10800fcc 	andi	r2,r2,63
   1bdac:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   1bdb0:	e0bffe17 	ldw	r2,-8(fp)
   1bdb4:	10800317 	ldw	r2,12(r2)
   1bdb8:	e0fffe17 	ldw	r3,-8(fp)
   1bdbc:	18c00017 	ldw	r3,0(r3)
   1bdc0:	18c00037 	ldwio	r3,0(r3)
   1bdc4:	1809883a 	mov	r4,r3
   1bdc8:	e0fffe17 	ldw	r3,-8(fp)
   1bdcc:	1885883a 	add	r2,r3,r2
   1bdd0:	10800704 	addi	r2,r2,28
   1bdd4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   1bdd8:	e0bffe17 	ldw	r2,-8(fp)
   1bddc:	e0fffd17 	ldw	r3,-12(fp)
   1bde0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1bde4:	e0bffe17 	ldw	r2,-8(fp)
   1bde8:	10800317 	ldw	r2,12(r2)
   1bdec:	10800044 	addi	r2,r2,1
   1bdf0:	10800fcc 	andi	r2,r2,63
   1bdf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   1bdf8:	e0bffe17 	ldw	r2,-8(fp)
   1bdfc:	10c00217 	ldw	r3,8(r2)
   1be00:	e0bffd17 	ldw	r2,-12(fp)
   1be04:	18800e1e 	bne	r3,r2,1be40 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1be08:	e0bffe17 	ldw	r2,-8(fp)
   1be0c:	10c00117 	ldw	r3,4(r2)
   1be10:	00bfdfc4 	movi	r2,-129
   1be14:	1886703a 	and	r3,r3,r2
   1be18:	e0bffe17 	ldw	r2,-8(fp)
   1be1c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   1be20:	e0bffe17 	ldw	r2,-8(fp)
   1be24:	10800017 	ldw	r2,0(r2)
   1be28:	10800304 	addi	r2,r2,12
   1be2c:	e0fffe17 	ldw	r3,-8(fp)
   1be30:	18c00117 	ldw	r3,4(r3)
   1be34:	10c00035 	stwio	r3,0(r2)
   1be38:	00000106 	br	1be40 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   1be3c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   1be40:	e037883a 	mov	sp,fp
   1be44:	df000017 	ldw	fp,0(sp)
   1be48:	dec00104 	addi	sp,sp,4
   1be4c:	f800283a 	ret

0001be50 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   1be50:	defffb04 	addi	sp,sp,-20
   1be54:	df000415 	stw	fp,16(sp)
   1be58:	df000404 	addi	fp,sp,16
   1be5c:	e13ffc15 	stw	r4,-16(fp)
   1be60:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   1be64:	e0bffc17 	ldw	r2,-16(fp)
   1be68:	10c00417 	ldw	r3,16(r2)
   1be6c:	e0bffc17 	ldw	r2,-16(fp)
   1be70:	10800517 	ldw	r2,20(r2)
   1be74:	18803226 	beq	r3,r2,1bf40 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1be78:	e0bffc17 	ldw	r2,-16(fp)
   1be7c:	10800617 	ldw	r2,24(r2)
   1be80:	1080008c 	andi	r2,r2,2
   1be84:	10000326 	beq	r2,zero,1be94 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1be88:	e0bffd17 	ldw	r2,-12(fp)
   1be8c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1be90:	10001d26 	beq	r2,zero,1bf08 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   1be94:	e0bffc17 	ldw	r2,-16(fp)
   1be98:	10800417 	ldw	r2,16(r2)
   1be9c:	e0bffc17 	ldw	r2,-16(fp)
   1bea0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   1bea4:	e0bffc17 	ldw	r2,-16(fp)
   1bea8:	10800017 	ldw	r2,0(r2)
   1beac:	10800104 	addi	r2,r2,4
   1beb0:	e0fffc17 	ldw	r3,-16(fp)
   1beb4:	18c00417 	ldw	r3,16(r3)
   1beb8:	e13ffc17 	ldw	r4,-16(fp)
   1bebc:	20c7883a 	add	r3,r4,r3
   1bec0:	18c01704 	addi	r3,r3,92
   1bec4:	18c00003 	ldbu	r3,0(r3)
   1bec8:	18c03fcc 	andi	r3,r3,255
   1becc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   1bed0:	e0bffc17 	ldw	r2,-16(fp)
   1bed4:	10800417 	ldw	r2,16(r2)
   1bed8:	10800044 	addi	r2,r2,1
   1bedc:	e0fffc17 	ldw	r3,-16(fp)
   1bee0:	18800415 	stw	r2,16(r3)
   1bee4:	10c00fcc 	andi	r3,r2,63
   1bee8:	e0bffc17 	ldw	r2,-16(fp)
   1beec:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1bef0:	e0bffc17 	ldw	r2,-16(fp)
   1bef4:	10800117 	ldw	r2,4(r2)
   1bef8:	10c01014 	ori	r3,r2,64
   1befc:	e0bffc17 	ldw	r2,-16(fp)
   1bf00:	10c00115 	stw	r3,4(r2)
   1bf04:	00000e06 	br	1bf40 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   1bf08:	e0bffc17 	ldw	r2,-16(fp)
   1bf0c:	10800017 	ldw	r2,0(r2)
   1bf10:	10800204 	addi	r2,r2,8
   1bf14:	10800037 	ldwio	r2,0(r2)
   1bf18:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1bf1c:	e0bffd17 	ldw	r2,-12(fp)
   1bf20:	1082000c 	andi	r2,r2,2048
   1bf24:	1000061e 	bne	r2,zero,1bf40 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1bf28:	e0bffc17 	ldw	r2,-16(fp)
   1bf2c:	10c00117 	ldw	r3,4(r2)
   1bf30:	00bfefc4 	movi	r2,-65
   1bf34:	1886703a 	and	r3,r3,r2
   1bf38:	e0bffc17 	ldw	r2,-16(fp)
   1bf3c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   1bf40:	e0bffc17 	ldw	r2,-16(fp)
   1bf44:	10c00417 	ldw	r3,16(r2)
   1bf48:	e0bffc17 	ldw	r2,-16(fp)
   1bf4c:	10800517 	ldw	r2,20(r2)
   1bf50:	1880061e 	bne	r3,r2,1bf6c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1bf54:	e0bffc17 	ldw	r2,-16(fp)
   1bf58:	10c00117 	ldw	r3,4(r2)
   1bf5c:	00beefc4 	movi	r2,-1089
   1bf60:	1886703a 	and	r3,r3,r2
   1bf64:	e0bffc17 	ldw	r2,-16(fp)
   1bf68:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1bf6c:	e0bffc17 	ldw	r2,-16(fp)
   1bf70:	10800017 	ldw	r2,0(r2)
   1bf74:	10800304 	addi	r2,r2,12
   1bf78:	e0fffc17 	ldw	r3,-16(fp)
   1bf7c:	18c00117 	ldw	r3,4(r3)
   1bf80:	10c00035 	stwio	r3,0(r2)
}
   1bf84:	0001883a 	nop
   1bf88:	e037883a 	mov	sp,fp
   1bf8c:	df000017 	ldw	fp,0(sp)
   1bf90:	dec00104 	addi	sp,sp,4
   1bf94:	f800283a 	ret

0001bf98 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   1bf98:	defffd04 	addi	sp,sp,-12
   1bf9c:	df000215 	stw	fp,8(sp)
   1bfa0:	df000204 	addi	fp,sp,8
   1bfa4:	e13ffe15 	stw	r4,-8(fp)
   1bfa8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   1bfac:	00000506 	br	1bfc4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1bfb0:	e0bfff17 	ldw	r2,-4(fp)
   1bfb4:	1090000c 	andi	r2,r2,16384
   1bfb8:	10000226 	beq	r2,zero,1bfc4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1bfbc:	00bffd44 	movi	r2,-11
   1bfc0:	00000606 	br	1bfdc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   1bfc4:	e0bffe17 	ldw	r2,-8(fp)
   1bfc8:	10c00417 	ldw	r3,16(r2)
   1bfcc:	e0bffe17 	ldw	r2,-8(fp)
   1bfd0:	10800517 	ldw	r2,20(r2)
   1bfd4:	18bff61e 	bne	r3,r2,1bfb0 <__alt_data_end+0xf001bfb0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1bfd8:	0005883a 	mov	r2,zero
}
   1bfdc:	e037883a 	mov	sp,fp
   1bfe0:	df000017 	ldw	fp,0(sp)
   1bfe4:	dec00104 	addi	sp,sp,4
   1bfe8:	f800283a 	ret

0001bfec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bfec:	defffe04 	addi	sp,sp,-8
   1bff0:	dfc00115 	stw	ra,4(sp)
   1bff4:	df000015 	stw	fp,0(sp)
   1bff8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1bffc:	d0a00f97 	ldw	r2,-32706(gp)
   1c000:	10000326 	beq	r2,zero,1c010 <alt_get_errno+0x24>
   1c004:	d0a00f97 	ldw	r2,-32706(gp)
   1c008:	103ee83a 	callr	r2
   1c00c:	00000106 	br	1c014 <alt_get_errno+0x28>
   1c010:	d0a05384 	addi	r2,gp,-32434
}
   1c014:	e037883a 	mov	sp,fp
   1c018:	dfc00117 	ldw	ra,4(sp)
   1c01c:	df000017 	ldw	fp,0(sp)
   1c020:	dec00204 	addi	sp,sp,8
   1c024:	f800283a 	ret

0001c028 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   1c028:	defff204 	addi	sp,sp,-56
   1c02c:	dfc00d15 	stw	ra,52(sp)
   1c030:	df000c15 	stw	fp,48(sp)
   1c034:	df000c04 	addi	fp,sp,48
   1c038:	e13ffc15 	stw	r4,-16(fp)
   1c03c:	e17ffd15 	stw	r5,-12(fp)
   1c040:	e1bffe15 	stw	r6,-8(fp)
   1c044:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   1c048:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   1c04c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   1c050:	e0bfff17 	ldw	r2,-4(fp)
   1c054:	1090000c 	andi	r2,r2,16384
   1c058:	1005003a 	cmpeq	r2,r2,zero
   1c05c:	10803fcc 	andi	r2,r2,255
   1c060:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   1c064:	00001306 	br	1c0b4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   1c068:	e0bff517 	ldw	r2,-44(fp)
   1c06c:	10800044 	addi	r2,r2,1
   1c070:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   1c074:	e0bffd17 	ldw	r2,-12(fp)
   1c078:	10c00044 	addi	r3,r2,1
   1c07c:	e0fffd15 	stw	r3,-12(fp)
   1c080:	e0fffc17 	ldw	r3,-16(fp)
   1c084:	18c00217 	ldw	r3,8(r3)
   1c088:	e13ffc17 	ldw	r4,-16(fp)
   1c08c:	20c7883a 	add	r3,r4,r3
   1c090:	18c00704 	addi	r3,r3,28
   1c094:	18c00003 	ldbu	r3,0(r3)
   1c098:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   1c09c:	e0bffc17 	ldw	r2,-16(fp)
   1c0a0:	10800217 	ldw	r2,8(r2)
   1c0a4:	10800044 	addi	r2,r2,1
   1c0a8:	10c00fcc 	andi	r3,r2,63
   1c0ac:	e0bffc17 	ldw	r2,-16(fp)
   1c0b0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   1c0b4:	e0fff517 	ldw	r3,-44(fp)
   1c0b8:	e0bffe17 	ldw	r2,-8(fp)
   1c0bc:	1880050e 	bge	r3,r2,1c0d4 <altera_avalon_uart_read+0xac>
   1c0c0:	e0bffc17 	ldw	r2,-16(fp)
   1c0c4:	10c00217 	ldw	r3,8(r2)
   1c0c8:	e0bffc17 	ldw	r2,-16(fp)
   1c0cc:	10800317 	ldw	r2,12(r2)
   1c0d0:	18bfe51e 	bne	r3,r2,1c068 <__alt_data_end+0xf001c068>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   1c0d4:	e0bff517 	ldw	r2,-44(fp)
   1c0d8:	1000251e 	bne	r2,zero,1c170 <altera_avalon_uart_read+0x148>
   1c0dc:	e0bffc17 	ldw	r2,-16(fp)
   1c0e0:	10c00217 	ldw	r3,8(r2)
   1c0e4:	e0bffc17 	ldw	r2,-16(fp)
   1c0e8:	10800317 	ldw	r2,12(r2)
   1c0ec:	1880201e 	bne	r3,r2,1c170 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   1c0f0:	e0bff617 	ldw	r2,-40(fp)
   1c0f4:	1000071e 	bne	r2,zero,1c114 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   1c0f8:	001bfec0 	call	1bfec <alt_get_errno>
   1c0fc:	1007883a 	mov	r3,r2
   1c100:	008002c4 	movi	r2,11
   1c104:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   1c108:	00800044 	movi	r2,1
   1c10c:	e0bff405 	stb	r2,-48(fp)
        break;
   1c110:	00001b06 	br	1c180 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c114:	0005303a 	rdctl	r2,status
   1c118:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c11c:	e0fff917 	ldw	r3,-28(fp)
   1c120:	00bfff84 	movi	r2,-2
   1c124:	1884703a 	and	r2,r3,r2
   1c128:	1001703a 	wrctl	status,r2
  
  return context;
   1c12c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   1c130:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1c134:	e0bffc17 	ldw	r2,-16(fp)
   1c138:	10800117 	ldw	r2,4(r2)
   1c13c:	10c02014 	ori	r3,r2,128
   1c140:	e0bffc17 	ldw	r2,-16(fp)
   1c144:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1c148:	e0bffc17 	ldw	r2,-16(fp)
   1c14c:	10800017 	ldw	r2,0(r2)
   1c150:	10800304 	addi	r2,r2,12
   1c154:	e0fffc17 	ldw	r3,-16(fp)
   1c158:	18c00117 	ldw	r3,4(r3)
   1c15c:	10c00035 	stwio	r3,0(r2)
   1c160:	e0bff817 	ldw	r2,-32(fp)
   1c164:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c168:	e0bffa17 	ldw	r2,-24(fp)
   1c16c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   1c170:	e0bff517 	ldw	r2,-44(fp)
   1c174:	1000021e 	bne	r2,zero,1c180 <altera_avalon_uart_read+0x158>
   1c178:	e0bffe17 	ldw	r2,-8(fp)
   1c17c:	103fcd1e 	bne	r2,zero,1c0b4 <__alt_data_end+0xf001c0b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c180:	0005303a 	rdctl	r2,status
   1c184:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c188:	e0fffb17 	ldw	r3,-20(fp)
   1c18c:	00bfff84 	movi	r2,-2
   1c190:	1884703a 	and	r2,r3,r2
   1c194:	1001703a 	wrctl	status,r2
  
  return context;
   1c198:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   1c19c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1c1a0:	e0bffc17 	ldw	r2,-16(fp)
   1c1a4:	10800117 	ldw	r2,4(r2)
   1c1a8:	10c02014 	ori	r3,r2,128
   1c1ac:	e0bffc17 	ldw	r2,-16(fp)
   1c1b0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1c1b4:	e0bffc17 	ldw	r2,-16(fp)
   1c1b8:	10800017 	ldw	r2,0(r2)
   1c1bc:	10800304 	addi	r2,r2,12
   1c1c0:	e0fffc17 	ldw	r3,-16(fp)
   1c1c4:	18c00117 	ldw	r3,4(r3)
   1c1c8:	10c00035 	stwio	r3,0(r2)
   1c1cc:	e0bff817 	ldw	r2,-32(fp)
   1c1d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c1d4:	e0bff717 	ldw	r2,-36(fp)
   1c1d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   1c1dc:	e0bff403 	ldbu	r2,-48(fp)
   1c1e0:	10000226 	beq	r2,zero,1c1ec <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   1c1e4:	00bffd44 	movi	r2,-11
   1c1e8:	00000106 	br	1c1f0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   1c1ec:	e0bff517 	ldw	r2,-44(fp)
  }
}
   1c1f0:	e037883a 	mov	sp,fp
   1c1f4:	dfc00117 	ldw	ra,4(sp)
   1c1f8:	df000017 	ldw	fp,0(sp)
   1c1fc:	dec00204 	addi	sp,sp,8
   1c200:	f800283a 	ret

0001c204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c204:	defffe04 	addi	sp,sp,-8
   1c208:	dfc00115 	stw	ra,4(sp)
   1c20c:	df000015 	stw	fp,0(sp)
   1c210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1c214:	d0a00f97 	ldw	r2,-32706(gp)
   1c218:	10000326 	beq	r2,zero,1c228 <alt_get_errno+0x24>
   1c21c:	d0a00f97 	ldw	r2,-32706(gp)
   1c220:	103ee83a 	callr	r2
   1c224:	00000106 	br	1c22c <alt_get_errno+0x28>
   1c228:	d0a05384 	addi	r2,gp,-32434
}
   1c22c:	e037883a 	mov	sp,fp
   1c230:	dfc00117 	ldw	ra,4(sp)
   1c234:	df000017 	ldw	fp,0(sp)
   1c238:	dec00204 	addi	sp,sp,8
   1c23c:	f800283a 	ret

0001c240 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   1c240:	defff204 	addi	sp,sp,-56
   1c244:	dfc00d15 	stw	ra,52(sp)
   1c248:	df000c15 	stw	fp,48(sp)
   1c24c:	df000c04 	addi	fp,sp,48
   1c250:	e13ffc15 	stw	r4,-16(fp)
   1c254:	e17ffd15 	stw	r5,-12(fp)
   1c258:	e1bffe15 	stw	r6,-8(fp)
   1c25c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   1c260:	e0bffe17 	ldw	r2,-8(fp)
   1c264:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   1c268:	e0bfff17 	ldw	r2,-4(fp)
   1c26c:	1090000c 	andi	r2,r2,16384
   1c270:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1c274:	00003c06 	br	1c368 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1c278:	e0bffc17 	ldw	r2,-16(fp)
   1c27c:	10800517 	ldw	r2,20(r2)
   1c280:	10800044 	addi	r2,r2,1
   1c284:	10800fcc 	andi	r2,r2,63
   1c288:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   1c28c:	e0bffc17 	ldw	r2,-16(fp)
   1c290:	10c00417 	ldw	r3,16(r2)
   1c294:	e0bff717 	ldw	r2,-36(fp)
   1c298:	1880221e 	bne	r3,r2,1c324 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   1c29c:	e0bff517 	ldw	r2,-44(fp)
   1c2a0:	10000526 	beq	r2,zero,1c2b8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   1c2a4:	001c2040 	call	1c204 <alt_get_errno>
   1c2a8:	1007883a 	mov	r3,r2
   1c2ac:	008002c4 	movi	r2,11
   1c2b0:	18800015 	stw	r2,0(r3)
        break;
   1c2b4:	00002e06 	br	1c370 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c2b8:	0005303a 	rdctl	r2,status
   1c2bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c2c0:	e0fff917 	ldw	r3,-28(fp)
   1c2c4:	00bfff84 	movi	r2,-2
   1c2c8:	1884703a 	and	r2,r3,r2
   1c2cc:	1001703a 	wrctl	status,r2
  
  return context;
   1c2d0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   1c2d4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1c2d8:	e0bffc17 	ldw	r2,-16(fp)
   1c2dc:	10800117 	ldw	r2,4(r2)
   1c2e0:	10c11014 	ori	r3,r2,1088
   1c2e4:	e0bffc17 	ldw	r2,-16(fp)
   1c2e8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1c2ec:	e0bffc17 	ldw	r2,-16(fp)
   1c2f0:	10800017 	ldw	r2,0(r2)
   1c2f4:	10800304 	addi	r2,r2,12
   1c2f8:	e0fffc17 	ldw	r3,-16(fp)
   1c2fc:	18c00117 	ldw	r3,4(r3)
   1c300:	10c00035 	stwio	r3,0(r2)
   1c304:	e0bff817 	ldw	r2,-32(fp)
   1c308:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c30c:	e0bff617 	ldw	r2,-40(fp)
   1c310:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   1c314:	e0bffc17 	ldw	r2,-16(fp)
   1c318:	10c00417 	ldw	r3,16(r2)
   1c31c:	e0bff717 	ldw	r2,-36(fp)
   1c320:	18bffc26 	beq	r3,r2,1c314 <__alt_data_end+0xf001c314>
      }
    }

    count--;
   1c324:	e0bff417 	ldw	r2,-48(fp)
   1c328:	10bfffc4 	addi	r2,r2,-1
   1c32c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   1c330:	e0bffc17 	ldw	r2,-16(fp)
   1c334:	10c00517 	ldw	r3,20(r2)
   1c338:	e0bffd17 	ldw	r2,-12(fp)
   1c33c:	11000044 	addi	r4,r2,1
   1c340:	e13ffd15 	stw	r4,-12(fp)
   1c344:	10800003 	ldbu	r2,0(r2)
   1c348:	1009883a 	mov	r4,r2
   1c34c:	e0bffc17 	ldw	r2,-16(fp)
   1c350:	10c5883a 	add	r2,r2,r3
   1c354:	10801704 	addi	r2,r2,92
   1c358:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   1c35c:	e0bffc17 	ldw	r2,-16(fp)
   1c360:	e0fff717 	ldw	r3,-36(fp)
   1c364:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1c368:	e0bff417 	ldw	r2,-48(fp)
   1c36c:	103fc21e 	bne	r2,zero,1c278 <__alt_data_end+0xf001c278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c370:	0005303a 	rdctl	r2,status
   1c374:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c378:	e0fffb17 	ldw	r3,-20(fp)
   1c37c:	00bfff84 	movi	r2,-2
   1c380:	1884703a 	and	r2,r3,r2
   1c384:	1001703a 	wrctl	status,r2
  
  return context;
   1c388:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   1c38c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1c390:	e0bffc17 	ldw	r2,-16(fp)
   1c394:	10800117 	ldw	r2,4(r2)
   1c398:	10c11014 	ori	r3,r2,1088
   1c39c:	e0bffc17 	ldw	r2,-16(fp)
   1c3a0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1c3a4:	e0bffc17 	ldw	r2,-16(fp)
   1c3a8:	10800017 	ldw	r2,0(r2)
   1c3ac:	10800304 	addi	r2,r2,12
   1c3b0:	e0fffc17 	ldw	r3,-16(fp)
   1c3b4:	18c00117 	ldw	r3,4(r3)
   1c3b8:	10c00035 	stwio	r3,0(r2)
   1c3bc:	e0bff817 	ldw	r2,-32(fp)
   1c3c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c3c4:	e0bffa17 	ldw	r2,-24(fp)
   1c3c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   1c3cc:	e0fffe17 	ldw	r3,-8(fp)
   1c3d0:	e0bff417 	ldw	r2,-48(fp)
   1c3d4:	1885c83a 	sub	r2,r3,r2
}
   1c3d8:	e037883a 	mov	sp,fp
   1c3dc:	dfc00117 	ldw	ra,4(sp)
   1c3e0:	df000017 	ldw	fp,0(sp)
   1c3e4:	dec00204 	addi	sp,sp,8
   1c3e8:	f800283a 	ret

0001c3ec <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1c3ec:	defffd04 	addi	sp,sp,-12
   1c3f0:	df000215 	stw	fp,8(sp)
   1c3f4:	df000204 	addi	fp,sp,8
   1c3f8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1c3fc:	e0bfff17 	ldw	r2,-4(fp)
   1c400:	1080400c 	andi	r2,r2,256
   1c404:	1004d23a 	srli	r2,r2,8
   1c408:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1c40c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c410:	e037883a 	mov	sp,fp
   1c414:	df000017 	ldw	fp,0(sp)
   1c418:	dec00104 	addi	sp,sp,4
   1c41c:	f800283a 	ret

0001c420 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1c420:	defffd04 	addi	sp,sp,-12
   1c424:	df000215 	stw	fp,8(sp)
   1c428:	df000204 	addi	fp,sp,8
   1c42c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1c430:	e0bfff17 	ldw	r2,-4(fp)
   1c434:	1080004c 	andi	r2,r2,1
   1c438:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1c43c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c440:	e037883a 	mov	sp,fp
   1c444:	df000017 	ldw	fp,0(sp)
   1c448:	dec00104 	addi	sp,sp,4
   1c44c:	f800283a 	ret

0001c450 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1c450:	defffd04 	addi	sp,sp,-12
   1c454:	df000215 	stw	fp,8(sp)
   1c458:	df000204 	addi	fp,sp,8
   1c45c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1c460:	e0bfff17 	ldw	r2,-4(fp)
   1c464:	1081000c 	andi	r2,r2,1024
   1c468:	1004d2ba 	srli	r2,r2,10
   1c46c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1c470:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c474:	e037883a 	mov	sp,fp
   1c478:	df000017 	ldw	fp,0(sp)
   1c47c:	dec00104 	addi	sp,sp,4
   1c480:	f800283a 	ret

0001c484 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1c484:	defffd04 	addi	sp,sp,-12
   1c488:	df000215 	stw	fp,8(sp)
   1c48c:	df000204 	addi	fp,sp,8
   1c490:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1c494:	e0bfff17 	ldw	r2,-4(fp)
   1c498:	1004d43a 	srli	r2,r2,16
   1c49c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1c4a0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c4a4:	e037883a 	mov	sp,fp
   1c4a8:	df000017 	ldw	fp,0(sp)
   1c4ac:	dec00104 	addi	sp,sp,4
   1c4b0:	f800283a 	ret

0001c4b4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1c4b4:	defffd04 	addi	sp,sp,-12
   1c4b8:	df000215 	stw	fp,8(sp)
   1c4bc:	df000204 	addi	fp,sp,8
   1c4c0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1c4c4:	e0bfff17 	ldw	r2,-4(fp)
   1c4c8:	10a0000c 	andi	r2,r2,32768
   1c4cc:	1004d3fa 	srli	r2,r2,15
   1c4d0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1c4d4:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c4d8:	e037883a 	mov	sp,fp
   1c4dc:	df000017 	ldw	fp,0(sp)
   1c4e0:	dec00104 	addi	sp,sp,4
   1c4e4:	f800283a 	ret

0001c4e8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1c4e8:	defffd04 	addi	sp,sp,-12
   1c4ec:	df000215 	stw	fp,8(sp)
   1c4f0:	df000204 	addi	fp,sp,8
   1c4f4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1c4f8:	e0bfff17 	ldw	r2,-4(fp)
   1c4fc:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1c500:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c504:	e037883a 	mov	sp,fp
   1c508:	df000017 	ldw	fp,0(sp)
   1c50c:	dec00104 	addi	sp,sp,4
   1c510:	f800283a 	ret

0001c514 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1c514:	defffb04 	addi	sp,sp,-20
   1c518:	dfc00415 	stw	ra,16(sp)
   1c51c:	df000315 	stw	fp,12(sp)
   1c520:	df000304 	addi	fp,sp,12
   1c524:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1c528:	01403fc4 	movi	r5,255
   1c52c:	e13fff17 	ldw	r4,-4(fp)
   1c530:	001c7740 	call	1c774 <alt_up_ps2_write_data_byte_with_ack>
   1c534:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1c538:	e0bffd17 	ldw	r2,-12(fp)
   1c53c:	1000211e 	bne	r2,zero,1c5c4 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c540:	e0bffe04 	addi	r2,fp,-8
   1c544:	100b883a 	mov	r5,r2
   1c548:	e13fff17 	ldw	r4,-4(fp)
   1c54c:	001c7d80 	call	1c7d8 <alt_up_ps2_read_data_byte_timeout>
   1c550:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1c554:	e0bffd17 	ldw	r2,-12(fp)
   1c558:	10001a1e 	bne	r2,zero,1c5c4 <alt_up_ps2_init+0xb0>
   1c55c:	e0bffe03 	ldbu	r2,-8(fp)
   1c560:	10803fcc 	andi	r2,r2,255
   1c564:	10802a98 	cmpnei	r2,r2,170
   1c568:	1000161e 	bne	r2,zero,1c5c4 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c56c:	e0bffe04 	addi	r2,fp,-8
   1c570:	100b883a 	mov	r5,r2
   1c574:	e13fff17 	ldw	r4,-4(fp)
   1c578:	001c7d80 	call	1c7d8 <alt_up_ps2_read_data_byte_timeout>
   1c57c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1c580:	e0bffd17 	ldw	r2,-12(fp)
   1c584:	10bfe318 	cmpnei	r2,r2,-116
   1c588:	1000041e 	bne	r2,zero,1c59c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1c58c:	e0bfff17 	ldw	r2,-4(fp)
   1c590:	00c00044 	movi	r3,1
   1c594:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   1c598:	00000a06 	br	1c5c4 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1c59c:	e0bffd17 	ldw	r2,-12(fp)
   1c5a0:	1000081e 	bne	r2,zero,1c5c4 <alt_up_ps2_init+0xb0>
   1c5a4:	e0bffe03 	ldbu	r2,-8(fp)
   1c5a8:	10803fcc 	andi	r2,r2,255
   1c5ac:	1000051e 	bne	r2,zero,1c5c4 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1c5b0:	e0bfff17 	ldw	r2,-4(fp)
   1c5b4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1c5b8:	01403d04 	movi	r5,244
   1c5bc:	e13fff17 	ldw	r4,-4(fp)
   1c5c0:	001c6980 	call	1c698 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1c5c4:	0001883a 	nop
   1c5c8:	e037883a 	mov	sp,fp
   1c5cc:	dfc00117 	ldw	ra,4(sp)
   1c5d0:	df000017 	ldw	fp,0(sp)
   1c5d4:	dec00204 	addi	sp,sp,8
   1c5d8:	f800283a 	ret

0001c5dc <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c5dc:	defffd04 	addi	sp,sp,-12
   1c5e0:	df000215 	stw	fp,8(sp)
   1c5e4:	df000204 	addi	fp,sp,8
   1c5e8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c5ec:	e0bfff17 	ldw	r2,-4(fp)
   1c5f0:	10800a17 	ldw	r2,40(r2)
   1c5f4:	10800104 	addi	r2,r2,4
   1c5f8:	10800037 	ldwio	r2,0(r2)
   1c5fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c600:	e0bffe17 	ldw	r2,-8(fp)
   1c604:	10800054 	ori	r2,r2,1
   1c608:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c60c:	e0bfff17 	ldw	r2,-4(fp)
   1c610:	10800a17 	ldw	r2,40(r2)
   1c614:	10800104 	addi	r2,r2,4
   1c618:	1007883a 	mov	r3,r2
   1c61c:	e0bffe17 	ldw	r2,-8(fp)
   1c620:	18800035 	stwio	r2,0(r3)
}
   1c624:	0001883a 	nop
   1c628:	e037883a 	mov	sp,fp
   1c62c:	df000017 	ldw	fp,0(sp)
   1c630:	dec00104 	addi	sp,sp,4
   1c634:	f800283a 	ret

0001c638 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c638:	defffd04 	addi	sp,sp,-12
   1c63c:	df000215 	stw	fp,8(sp)
   1c640:	df000204 	addi	fp,sp,8
   1c644:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c648:	e0bfff17 	ldw	r2,-4(fp)
   1c64c:	10800a17 	ldw	r2,40(r2)
   1c650:	10800104 	addi	r2,r2,4
   1c654:	10800037 	ldwio	r2,0(r2)
   1c658:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c65c:	e0fffe17 	ldw	r3,-8(fp)
   1c660:	00bfff84 	movi	r2,-2
   1c664:	1884703a 	and	r2,r3,r2
   1c668:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c66c:	e0bfff17 	ldw	r2,-4(fp)
   1c670:	10800a17 	ldw	r2,40(r2)
   1c674:	10800104 	addi	r2,r2,4
   1c678:	1007883a 	mov	r3,r2
   1c67c:	e0bffe17 	ldw	r2,-8(fp)
   1c680:	18800035 	stwio	r2,0(r3)
}
   1c684:	0001883a 	nop
   1c688:	e037883a 	mov	sp,fp
   1c68c:	df000017 	ldw	fp,0(sp)
   1c690:	dec00104 	addi	sp,sp,4
   1c694:	f800283a 	ret

0001c698 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c698:	defffb04 	addi	sp,sp,-20
   1c69c:	dfc00415 	stw	ra,16(sp)
   1c6a0:	df000315 	stw	fp,12(sp)
   1c6a4:	df000304 	addi	fp,sp,12
   1c6a8:	e13ffe15 	stw	r4,-8(fp)
   1c6ac:	2805883a 	mov	r2,r5
   1c6b0:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1c6b4:	e0bffe17 	ldw	r2,-8(fp)
   1c6b8:	10800a17 	ldw	r2,40(r2)
   1c6bc:	1007883a 	mov	r3,r2
   1c6c0:	e0bfff03 	ldbu	r2,-4(fp)
   1c6c4:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1c6c8:	e0bffe17 	ldw	r2,-8(fp)
   1c6cc:	10800a17 	ldw	r2,40(r2)
   1c6d0:	10800104 	addi	r2,r2,4
   1c6d4:	10800037 	ldwio	r2,0(r2)
   1c6d8:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1c6dc:	e13ffd17 	ldw	r4,-12(fp)
   1c6e0:	001c4500 	call	1c450 <read_CE_bit>
   1c6e4:	10803fcc 	andi	r2,r2,255
   1c6e8:	10000226 	beq	r2,zero,1c6f4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1c6ec:	00bffec4 	movi	r2,-5
   1c6f0:	00000106 	br	1c6f8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1c6f4:	0005883a 	mov	r2,zero
}
   1c6f8:	e037883a 	mov	sp,fp
   1c6fc:	dfc00117 	ldw	ra,4(sp)
   1c700:	df000017 	ldw	fp,0(sp)
   1c704:	dec00204 	addi	sp,sp,8
   1c708:	f800283a 	ret

0001c70c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1c70c:	defffc04 	addi	sp,sp,-16
   1c710:	dfc00315 	stw	ra,12(sp)
   1c714:	df000215 	stw	fp,8(sp)
   1c718:	df000204 	addi	fp,sp,8
   1c71c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1c720:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1c724:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1c728:	e0bffe44 	addi	r2,fp,-7
   1c72c:	100b883a 	mov	r5,r2
   1c730:	e13fff17 	ldw	r4,-4(fp)
   1c734:	001c7d80 	call	1c7d8 <alt_up_ps2_read_data_byte_timeout>
   1c738:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1c73c:	e0bffe03 	ldbu	r2,-8(fp)
   1c740:	1000061e 	bne	r2,zero,1c75c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1c744:	e0bffe43 	ldbu	r2,-7(fp)
   1c748:	10803fcc 	andi	r2,r2,255
   1c74c:	10803e98 	cmpnei	r2,r2,250
   1c750:	103ff51e 	bne	r2,zero,1c728 <__alt_data_end+0xf001c728>
				return 0;
   1c754:	0005883a 	mov	r2,zero
   1c758:	00000106 	br	1c760 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1c75c:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1c760:	e037883a 	mov	sp,fp
   1c764:	dfc00117 	ldw	ra,4(sp)
   1c768:	df000017 	ldw	fp,0(sp)
   1c76c:	dec00204 	addi	sp,sp,8
   1c770:	f800283a 	ret

0001c774 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c774:	defffa04 	addi	sp,sp,-24
   1c778:	dfc00515 	stw	ra,20(sp)
   1c77c:	df000415 	stw	fp,16(sp)
   1c780:	df000404 	addi	fp,sp,16
   1c784:	e13ffe15 	stw	r4,-8(fp)
   1c788:	2805883a 	mov	r2,r5
   1c78c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1c790:	e0bfff03 	ldbu	r2,-4(fp)
   1c794:	100b883a 	mov	r5,r2
   1c798:	e13ffe17 	ldw	r4,-8(fp)
   1c79c:	001c6980 	call	1c698 <alt_up_ps2_write_data_byte>
   1c7a0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1c7a4:	e0bffc17 	ldw	r2,-16(fp)
   1c7a8:	10000226 	beq	r2,zero,1c7b4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1c7ac:	e0bffc17 	ldw	r2,-16(fp)
   1c7b0:	00000406 	br	1c7c4 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1c7b4:	e13ffe17 	ldw	r4,-8(fp)
   1c7b8:	001c70c0 	call	1c70c <alt_up_ps2_wait_for_ack>
   1c7bc:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1c7c0:	e0bffd17 	ldw	r2,-12(fp)
}
   1c7c4:	e037883a 	mov	sp,fp
   1c7c8:	dfc00117 	ldw	ra,4(sp)
   1c7cc:	df000017 	ldw	fp,0(sp)
   1c7d0:	dec00204 	addi	sp,sp,8
   1c7d4:	f800283a 	ret

0001c7d8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1c7d8:	defffa04 	addi	sp,sp,-24
   1c7dc:	dfc00515 	stw	ra,20(sp)
   1c7e0:	df000415 	stw	fp,16(sp)
   1c7e4:	df000404 	addi	fp,sp,16
   1c7e8:	e13ffe15 	stw	r4,-8(fp)
   1c7ec:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1c7f0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1c7f4:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1c7f8:	e0bffc17 	ldw	r2,-16(fp)
   1c7fc:	10800044 	addi	r2,r2,1
   1c800:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c804:	e0bffe17 	ldw	r2,-8(fp)
   1c808:	10800a17 	ldw	r2,40(r2)
   1c80c:	10800037 	ldwio	r2,0(r2)
   1c810:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1c814:	e13ffd17 	ldw	r4,-12(fp)
   1c818:	001c4b40 	call	1c4b4 <read_data_valid>
   1c81c:	10803fcc 	andi	r2,r2,255
   1c820:	10000726 	beq	r2,zero,1c840 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1c824:	e13ffd17 	ldw	r4,-12(fp)
   1c828:	001c4e80 	call	1c4e8 <read_data_byte>
   1c82c:	1007883a 	mov	r3,r2
   1c830:	e0bfff17 	ldw	r2,-4(fp)
   1c834:	10c00005 	stb	r3,0(r2)
			return 0;
   1c838:	0005883a 	mov	r2,zero
   1c83c:	00000806 	br	1c860 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1c840:	e0bffe17 	ldw	r2,-8(fp)
   1c844:	10800c17 	ldw	r2,48(r2)
   1c848:	103feb26 	beq	r2,zero,1c7f8 <__alt_data_end+0xf001c7f8>
   1c84c:	e0bffe17 	ldw	r2,-8(fp)
   1c850:	10c00c17 	ldw	r3,48(r2)
   1c854:	e0bffc17 	ldw	r2,-16(fp)
   1c858:	18bfe72e 	bgeu	r3,r2,1c7f8 <__alt_data_end+0xf001c7f8>
		{
			return -ETIMEDOUT;
   1c85c:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1c860:	e037883a 	mov	sp,fp
   1c864:	dfc00117 	ldw	ra,4(sp)
   1c868:	df000017 	ldw	fp,0(sp)
   1c86c:	dec00204 	addi	sp,sp,8
   1c870:	f800283a 	ret

0001c874 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1c874:	defffb04 	addi	sp,sp,-20
   1c878:	dfc00415 	stw	ra,16(sp)
   1c87c:	df000315 	stw	fp,12(sp)
   1c880:	df000304 	addi	fp,sp,12
   1c884:	e13ffe15 	stw	r4,-8(fp)
   1c888:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1c88c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c890:	e0bffe17 	ldw	r2,-8(fp)
   1c894:	10800a17 	ldw	r2,40(r2)
   1c898:	10800037 	ldwio	r2,0(r2)
   1c89c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1c8a0:	e13ffd17 	ldw	r4,-12(fp)
   1c8a4:	001c4b40 	call	1c4b4 <read_data_valid>
   1c8a8:	10803fcc 	andi	r2,r2,255
   1c8ac:	10000726 	beq	r2,zero,1c8cc <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1c8b0:	e13ffd17 	ldw	r4,-12(fp)
   1c8b4:	001c4e80 	call	1c4e8 <read_data_byte>
   1c8b8:	1007883a 	mov	r3,r2
   1c8bc:	e0bfff17 	ldw	r2,-4(fp)
   1c8c0:	10c00005 	stb	r3,0(r2)
		return 0;
   1c8c4:	0005883a 	mov	r2,zero
   1c8c8:	00000106 	br	1c8d0 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1c8cc:	00bfffc4 	movi	r2,-1
}
   1c8d0:	e037883a 	mov	sp,fp
   1c8d4:	dfc00117 	ldw	ra,4(sp)
   1c8d8:	df000017 	ldw	fp,0(sp)
   1c8dc:	dec00204 	addi	sp,sp,8
   1c8e0:	f800283a 	ret

0001c8e4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1c8e4:	defffb04 	addi	sp,sp,-20
   1c8e8:	dfc00415 	stw	ra,16(sp)
   1c8ec:	df000315 	stw	fp,12(sp)
   1c8f0:	df000304 	addi	fp,sp,12
   1c8f4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1c8f8:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1c8fc:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c900:	e0bfff17 	ldw	r2,-4(fp)
   1c904:	10800a17 	ldw	r2,40(r2)
   1c908:	10800037 	ldwio	r2,0(r2)
   1c90c:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1c910:	e13ffe17 	ldw	r4,-8(fp)
   1c914:	001c4840 	call	1c484 <read_num_bytes_available>
   1c918:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1c91c:	e0bffd0b 	ldhu	r2,-12(fp)
   1c920:	103ff71e 	bne	r2,zero,1c900 <__alt_data_end+0xf001c900>
}
   1c924:	0001883a 	nop
   1c928:	e037883a 	mov	sp,fp
   1c92c:	dfc00117 	ldw	ra,4(sp)
   1c930:	df000017 	ldw	fp,0(sp)
   1c934:	dec00204 	addi	sp,sp,8
   1c938:	f800283a 	ret

0001c93c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c93c:	defff804 	addi	sp,sp,-32
   1c940:	dfc00715 	stw	ra,28(sp)
   1c944:	df000615 	stw	fp,24(sp)
   1c948:	df000604 	addi	fp,sp,24
   1c94c:	e13ffd15 	stw	r4,-12(fp)
   1c950:	e17ffe15 	stw	r5,-8(fp)
   1c954:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1c958:	e0bffd17 	ldw	r2,-12(fp)
   1c95c:	10800017 	ldw	r2,0(r2)
   1c960:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1c964:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1c968:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1c96c:	e0fffc17 	ldw	r3,-16(fp)
   1c970:	e0bfff17 	ldw	r2,-4(fp)
   1c974:	18bffd16 	blt	r3,r2,1c96c <__alt_data_end+0xf001c96c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1c978:	e0bffe17 	ldw	r2,-8(fp)
   1c97c:	10c00044 	addi	r3,r2,1
   1c980:	e0fffe15 	stw	r3,-8(fp)
   1c984:	100b883a 	mov	r5,r2
   1c988:	e13ffa17 	ldw	r4,-24(fp)
   1c98c:	001c7d80 	call	1c7d8 <alt_up_ps2_read_data_byte_timeout>
   1c990:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1c994:	e0bffb17 	ldw	r2,-20(fp)
   1c998:	10000226 	beq	r2,zero,1c9a4 <alt_up_ps2_read_fd+0x68>
			return count;
   1c99c:	e0bffc17 	ldw	r2,-16(fp)
   1c9a0:	00000406 	br	1c9b4 <alt_up_ps2_read_fd+0x78>
		count++;
   1c9a4:	e0bffc17 	ldw	r2,-16(fp)
   1c9a8:	10800044 	addi	r2,r2,1
   1c9ac:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1c9b0:	e0bffc17 	ldw	r2,-16(fp)
}
   1c9b4:	e037883a 	mov	sp,fp
   1c9b8:	dfc00117 	ldw	ra,4(sp)
   1c9bc:	df000017 	ldw	fp,0(sp)
   1c9c0:	dec00204 	addi	sp,sp,8
   1c9c4:	f800283a 	ret

0001c9c8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1c9c8:	defff804 	addi	sp,sp,-32
   1c9cc:	dfc00715 	stw	ra,28(sp)
   1c9d0:	df000615 	stw	fp,24(sp)
   1c9d4:	df000604 	addi	fp,sp,24
   1c9d8:	e13ffd15 	stw	r4,-12(fp)
   1c9dc:	e17ffe15 	stw	r5,-8(fp)
   1c9e0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1c9e4:	e0bffd17 	ldw	r2,-12(fp)
   1c9e8:	10800017 	ldw	r2,0(r2)
   1c9ec:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1c9f0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1c9f4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1c9f8:	00001006 	br	1ca3c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1c9fc:	e0bffe17 	ldw	r2,-8(fp)
   1ca00:	10c00044 	addi	r3,r2,1
   1ca04:	e0fffe15 	stw	r3,-8(fp)
   1ca08:	10800003 	ldbu	r2,0(r2)
   1ca0c:	10803fcc 	andi	r2,r2,255
   1ca10:	100b883a 	mov	r5,r2
   1ca14:	e13ffb17 	ldw	r4,-20(fp)
   1ca18:	001c6980 	call	1c698 <alt_up_ps2_write_data_byte>
   1ca1c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1ca20:	e0bffc17 	ldw	r2,-16(fp)
   1ca24:	10000226 	beq	r2,zero,1ca30 <alt_up_ps2_write_fd+0x68>
			return count;
   1ca28:	e0bffa17 	ldw	r2,-24(fp)
   1ca2c:	00000706 	br	1ca4c <alt_up_ps2_write_fd+0x84>
		count++;
   1ca30:	e0bffa17 	ldw	r2,-24(fp)
   1ca34:	10800044 	addi	r2,r2,1
   1ca38:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1ca3c:	e0fffa17 	ldw	r3,-24(fp)
   1ca40:	e0bfff17 	ldw	r2,-4(fp)
   1ca44:	18bfed16 	blt	r3,r2,1c9fc <__alt_data_end+0xf001c9fc>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1ca48:	e0bffa17 	ldw	r2,-24(fp)
}
   1ca4c:	e037883a 	mov	sp,fp
   1ca50:	dfc00117 	ldw	ra,4(sp)
   1ca54:	df000017 	ldw	fp,0(sp)
   1ca58:	dec00204 	addi	sp,sp,8
   1ca5c:	f800283a 	ret

0001ca60 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1ca60:	defffc04 	addi	sp,sp,-16
   1ca64:	dfc00315 	stw	ra,12(sp)
   1ca68:	df000215 	stw	fp,8(sp)
   1ca6c:	df000204 	addi	fp,sp,8
   1ca70:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1ca74:	d1600c84 	addi	r5,gp,-32718
   1ca78:	e13fff17 	ldw	r4,-4(fp)
   1ca7c:	001e5500 	call	1e550 <alt_find_dev>
   1ca80:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ca84:	e0bffe17 	ldw	r2,-8(fp)
}
   1ca88:	e037883a 	mov	sp,fp
   1ca8c:	dfc00117 	ldw	ra,4(sp)
   1ca90:	df000017 	ldw	fp,0(sp)
   1ca94:	dec00204 	addi	sp,sp,8
   1ca98:	f800283a 	ret

0001ca9c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1ca9c:	defffc04 	addi	sp,sp,-16
   1caa0:	dfc00315 	stw	ra,12(sp)
   1caa4:	df000215 	stw	fp,8(sp)
   1caa8:	df000204 	addi	fp,sp,8
   1caac:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1cab0:	e0bfff17 	ldw	r2,-4(fp)
   1cab4:	10800217 	ldw	r2,8(r2)
   1cab8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1cabc:	00000b06 	br	1caec <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1cac0:	01420034 	movhi	r5,2048
   1cac4:	29419204 	addi	r5,r5,1608
   1cac8:	e13ffe17 	ldw	r4,-8(fp)
   1cacc:	0012e140 	call	12e14 <strcmp>
   1cad0:	1000031e 	bne	r2,zero,1cae0 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1cad4:	e0bffe17 	ldw	r2,-8(fp)
   1cad8:	10000005 	stb	zero,0(r2)
			break;
   1cadc:	00000906 	br	1cb04 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1cae0:	e0bffe17 	ldw	r2,-8(fp)
   1cae4:	10800044 	addi	r2,r2,1
   1cae8:	e0bffe15 	stw	r2,-8(fp)
   1caec:	e0bffe17 	ldw	r2,-8(fp)
   1caf0:	10800003 	ldbu	r2,0(r2)
   1caf4:	10803fcc 	andi	r2,r2,255
   1caf8:	1080201c 	xori	r2,r2,128
   1cafc:	10bfe004 	addi	r2,r2,-128
   1cb00:	103fef1e 	bne	r2,zero,1cac0 <__alt_data_end+0xf001cac0>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1cb04:	0001883a 	nop
}
   1cb08:	e037883a 	mov	sp,fp
   1cb0c:	dfc00117 	ldw	ra,4(sp)
   1cb10:	df000017 	ldw	fp,0(sp)
   1cb14:	dec00204 	addi	sp,sp,8
   1cb18:	f800283a 	ret

0001cb1c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1cb1c:	defffc04 	addi	sp,sp,-16
   1cb20:	dfc00315 	stw	ra,12(sp)
   1cb24:	df000215 	stw	fp,8(sp)
   1cb28:	df000204 	addi	fp,sp,8
   1cb2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1cb30:	d1600c84 	addi	r5,gp,-32718
   1cb34:	e13fff17 	ldw	r4,-4(fp)
   1cb38:	001e5500 	call	1e550 <alt_find_dev>
   1cb3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1cb40:	e0bffe17 	ldw	r2,-8(fp)
}
   1cb44:	e037883a 	mov	sp,fp
   1cb48:	dfc00117 	ldw	ra,4(sp)
   1cb4c:	df000017 	ldw	fp,0(sp)
   1cb50:	dec00204 	addi	sp,sp,8
   1cb54:	f800283a 	ret

0001cb58 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1cb58:	defffa04 	addi	sp,sp,-24
   1cb5c:	df000515 	stw	fp,20(sp)
   1cb60:	df000504 	addi	fp,sp,20
   1cb64:	e13ffc15 	stw	r4,-16(fp)
   1cb68:	2805883a 	mov	r2,r5
   1cb6c:	e1bffe15 	stw	r6,-8(fp)
   1cb70:	e1ffff15 	stw	r7,-4(fp)
   1cb74:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1cb78:	e0bffc17 	ldw	r2,-16(fp)
   1cb7c:	10800c17 	ldw	r2,48(r2)
   1cb80:	e0fffe17 	ldw	r3,-8(fp)
   1cb84:	1880042e 	bgeu	r3,r2,1cb98 <alt_up_char_buffer_draw+0x40>
   1cb88:	e0bffc17 	ldw	r2,-16(fp)
   1cb8c:	10800d17 	ldw	r2,52(r2)
   1cb90:	e0ffff17 	ldw	r3,-4(fp)
   1cb94:	18800236 	bltu	r3,r2,1cba0 <alt_up_char_buffer_draw+0x48>
		return -1;
   1cb98:	00bfffc4 	movi	r2,-1
   1cb9c:	00001d06 	br	1cc14 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1cba0:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1cba4:	e0bffc17 	ldw	r2,-16(fp)
   1cba8:	10c00f17 	ldw	r3,60(r2)
   1cbac:	e0bffe17 	ldw	r2,-8(fp)
   1cbb0:	1886703a 	and	r3,r3,r2
   1cbb4:	e0bffc17 	ldw	r2,-16(fp)
   1cbb8:	10800e17 	ldw	r2,56(r2)
   1cbbc:	1884983a 	sll	r2,r3,r2
   1cbc0:	e0fffb17 	ldw	r3,-20(fp)
   1cbc4:	1884b03a 	or	r2,r3,r2
   1cbc8:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1cbcc:	e0bffc17 	ldw	r2,-16(fp)
   1cbd0:	10c01117 	ldw	r3,68(r2)
   1cbd4:	e0bfff17 	ldw	r2,-4(fp)
   1cbd8:	1886703a 	and	r3,r3,r2
   1cbdc:	e0bffc17 	ldw	r2,-16(fp)
   1cbe0:	10801017 	ldw	r2,64(r2)
   1cbe4:	1884983a 	sll	r2,r3,r2
   1cbe8:	e0fffb17 	ldw	r3,-20(fp)
   1cbec:	1884b03a 	or	r2,r3,r2
   1cbf0:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1cbf4:	e0bffc17 	ldw	r2,-16(fp)
   1cbf8:	10c00b17 	ldw	r3,44(r2)
   1cbfc:	e0bffb17 	ldw	r2,-20(fp)
   1cc00:	1885883a 	add	r2,r3,r2
   1cc04:	1007883a 	mov	r3,r2
   1cc08:	e0bffd03 	ldbu	r2,-12(fp)
   1cc0c:	18800025 	stbio	r2,0(r3)

	return 0;
   1cc10:	0005883a 	mov	r2,zero
}
   1cc14:	e037883a 	mov	sp,fp
   1cc18:	df000017 	ldw	fp,0(sp)
   1cc1c:	dec00104 	addi	sp,sp,4
   1cc20:	f800283a 	ret

0001cc24 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1cc24:	defffa04 	addi	sp,sp,-24
   1cc28:	df000515 	stw	fp,20(sp)
   1cc2c:	df000504 	addi	fp,sp,20
   1cc30:	e13ffc15 	stw	r4,-16(fp)
   1cc34:	e17ffd15 	stw	r5,-12(fp)
   1cc38:	e1bffe15 	stw	r6,-8(fp)
   1cc3c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1cc40:	e0bffc17 	ldw	r2,-16(fp)
   1cc44:	10800c17 	ldw	r2,48(r2)
   1cc48:	e0fffe17 	ldw	r3,-8(fp)
   1cc4c:	1880042e 	bgeu	r3,r2,1cc60 <alt_up_char_buffer_string+0x3c>
   1cc50:	e0bffc17 	ldw	r2,-16(fp)
   1cc54:	10800d17 	ldw	r2,52(r2)
   1cc58:	e0ffff17 	ldw	r3,-4(fp)
   1cc5c:	18800236 	bltu	r3,r2,1cc68 <alt_up_char_buffer_string+0x44>
		return -1;
   1cc60:	00bfffc4 	movi	r2,-1
   1cc64:	00002a06 	br	1cd10 <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
   1cc68:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1cc6c:	e0bffc17 	ldw	r2,-16(fp)
   1cc70:	10801017 	ldw	r2,64(r2)
   1cc74:	e0ffff17 	ldw	r3,-4(fp)
   1cc78:	1886983a 	sll	r3,r3,r2
   1cc7c:	e0bffe17 	ldw	r2,-8(fp)
   1cc80:	1885883a 	add	r2,r3,r2
   1cc84:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1cc88:	00001a06 	br	1ccf4 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1cc8c:	e0bffc17 	ldw	r2,-16(fp)
   1cc90:	10c00b17 	ldw	r3,44(r2)
   1cc94:	e0bffb17 	ldw	r2,-20(fp)
   1cc98:	1885883a 	add	r2,r3,r2
   1cc9c:	1007883a 	mov	r3,r2
   1cca0:	e0bffd17 	ldw	r2,-12(fp)
   1cca4:	10800003 	ldbu	r2,0(r2)
   1cca8:	10803fcc 	andi	r2,r2,255
   1ccac:	1080201c 	xori	r2,r2,128
   1ccb0:	10bfe004 	addi	r2,r2,-128
   1ccb4:	18800025 	stbio	r2,0(r3)
		++ptr;
   1ccb8:	e0bffd17 	ldw	r2,-12(fp)
   1ccbc:	10800044 	addi	r2,r2,1
   1ccc0:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1ccc4:	e0bffe17 	ldw	r2,-8(fp)
   1ccc8:	10800044 	addi	r2,r2,1
   1cccc:	e0bffe15 	stw	r2,-8(fp)
   1ccd0:	e0bffc17 	ldw	r2,-16(fp)
   1ccd4:	10800c17 	ldw	r2,48(r2)
   1ccd8:	e0fffe17 	ldw	r3,-8(fp)
   1ccdc:	18800236 	bltu	r3,r2,1cce8 <alt_up_char_buffer_string+0xc4>
			return -1;
   1cce0:	00bfffc4 	movi	r2,-1
   1cce4:	00000a06 	br	1cd10 <alt_up_char_buffer_string+0xec>
		++offset;
   1cce8:	e0bffb17 	ldw	r2,-20(fp)
   1ccec:	10800044 	addi	r2,r2,1
   1ccf0:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1ccf4:	e0bffd17 	ldw	r2,-12(fp)
   1ccf8:	10800003 	ldbu	r2,0(r2)
   1ccfc:	10803fcc 	andi	r2,r2,255
   1cd00:	1080201c 	xori	r2,r2,128
   1cd04:	10bfe004 	addi	r2,r2,-128
   1cd08:	103fe01e 	bne	r2,zero,1cc8c <__alt_data_end+0xf001cc8c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1cd0c:	0005883a 	mov	r2,zero
}
   1cd10:	e037883a 	mov	sp,fp
   1cd14:	df000017 	ldw	fp,0(sp)
   1cd18:	dec00104 	addi	sp,sp,4
   1cd1c:	f800283a 	ret

0001cd20 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1cd20:	defffe04 	addi	sp,sp,-8
   1cd24:	df000115 	stw	fp,4(sp)
   1cd28:	df000104 	addi	fp,sp,4
   1cd2c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1cd30:	e0bfff17 	ldw	r2,-4(fp)
   1cd34:	10800a17 	ldw	r2,40(r2)
   1cd38:	10800084 	addi	r2,r2,2
   1cd3c:	1007883a 	mov	r3,r2
   1cd40:	00800044 	movi	r2,1
   1cd44:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1cd48:	0001883a 	nop
   1cd4c:	e0bfff17 	ldw	r2,-4(fp)
   1cd50:	10800a17 	ldw	r2,40(r2)
   1cd54:	10800084 	addi	r2,r2,2
   1cd58:	10800023 	ldbuio	r2,0(r2)
   1cd5c:	10803fcc 	andi	r2,r2,255
   1cd60:	1080004c 	andi	r2,r2,1
   1cd64:	103ff91e 	bne	r2,zero,1cd4c <__alt_data_end+0xf001cd4c>
	return 0;
   1cd68:	0005883a 	mov	r2,zero
}
   1cd6c:	e037883a 	mov	sp,fp
   1cd70:	df000017 	ldw	fp,0(sp)
   1cd74:	dec00104 	addi	sp,sp,4
   1cd78:	f800283a 	ret

0001cd7c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   1cd7c:	defffc04 	addi	sp,sp,-16
   1cd80:	dfc00315 	stw	ra,12(sp)
   1cd84:	df000215 	stw	fp,8(sp)
   1cd88:	df000204 	addi	fp,sp,8
   1cd8c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   1cd90:	d1600c84 	addi	r5,gp,-32718
   1cd94:	e13fff17 	ldw	r4,-4(fp)
   1cd98:	001e5500 	call	1e550 <alt_find_dev>
   1cd9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1cda0:	e0bffe17 	ldw	r2,-8(fp)
}
   1cda4:	e037883a 	mov	sp,fp
   1cda8:	dfc00117 	ldw	ra,4(sp)
   1cdac:	df000017 	ldw	fp,0(sp)
   1cdb0:	dec00204 	addi	sp,sp,8
   1cdb4:	f800283a 	ret

0001cdb8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   1cdb8:	defffa04 	addi	sp,sp,-24
   1cdbc:	df000515 	stw	fp,20(sp)
   1cdc0:	df000504 	addi	fp,sp,20
   1cdc4:	e13ffc15 	stw	r4,-16(fp)
   1cdc8:	e17ffd15 	stw	r5,-12(fp)
   1cdcc:	e1bffe15 	stw	r6,-8(fp)
   1cdd0:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   1cdd4:	e0bffc17 	ldw	r2,-16(fp)
   1cdd8:	10800f17 	ldw	r2,60(r2)
   1cddc:	e0fffe17 	ldw	r3,-8(fp)
   1cde0:	1880042e 	bgeu	r3,r2,1cdf4 <alt_up_pixel_buffer_dma_draw+0x3c>
   1cde4:	e0bffc17 	ldw	r2,-16(fp)
   1cde8:	10801017 	ldw	r2,64(r2)
   1cdec:	e0ffff17 	ldw	r3,-4(fp)
   1cdf0:	18800236 	bltu	r3,r2,1cdfc <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
   1cdf4:	00bfffc4 	movi	r2,-1
   1cdf8:	00005006 	br	1cf3c <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
   1cdfc:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1ce00:	e0bffc17 	ldw	r2,-16(fp)
   1ce04:	10800d17 	ldw	r2,52(r2)
   1ce08:	1000151e 	bne	r2,zero,1ce60 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   1ce0c:	e0bffc17 	ldw	r2,-16(fp)
   1ce10:	10c01217 	ldw	r3,72(r2)
   1ce14:	e0bffe17 	ldw	r2,-8(fp)
   1ce18:	1886703a 	and	r3,r3,r2
   1ce1c:	e0bffc17 	ldw	r2,-16(fp)
   1ce20:	10801117 	ldw	r2,68(r2)
   1ce24:	1884983a 	sll	r2,r3,r2
   1ce28:	e0fffb17 	ldw	r3,-20(fp)
   1ce2c:	1885883a 	add	r2,r3,r2
   1ce30:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   1ce34:	e0bffc17 	ldw	r2,-16(fp)
   1ce38:	10c01417 	ldw	r3,80(r2)
   1ce3c:	e0bfff17 	ldw	r2,-4(fp)
   1ce40:	1886703a 	and	r3,r3,r2
   1ce44:	e0bffc17 	ldw	r2,-16(fp)
   1ce48:	10801317 	ldw	r2,76(r2)
   1ce4c:	1884983a 	sll	r2,r3,r2
   1ce50:	e0fffb17 	ldw	r3,-20(fp)
   1ce54:	1885883a 	add	r2,r3,r2
   1ce58:	e0bffb15 	stw	r2,-20(fp)
   1ce5c:	00001706 	br	1cebc <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   1ce60:	e0bffc17 	ldw	r2,-16(fp)
   1ce64:	10c01217 	ldw	r3,72(r2)
   1ce68:	e0bffe17 	ldw	r2,-8(fp)
   1ce6c:	1886703a 	and	r3,r3,r2
   1ce70:	e0bffc17 	ldw	r2,-16(fp)
   1ce74:	10801117 	ldw	r2,68(r2)
   1ce78:	1884983a 	sll	r2,r3,r2
   1ce7c:	e0fffb17 	ldw	r3,-20(fp)
   1ce80:	1885883a 	add	r2,r3,r2
   1ce84:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   1ce88:	e0bffc17 	ldw	r2,-16(fp)
   1ce8c:	10c01417 	ldw	r3,80(r2)
   1ce90:	e0bfff17 	ldw	r2,-4(fp)
   1ce94:	1886703a 	and	r3,r3,r2
   1ce98:	e0bffc17 	ldw	r2,-16(fp)
   1ce9c:	10800f17 	ldw	r2,60(r2)
   1cea0:	1887383a 	mul	r3,r3,r2
   1cea4:	e0bffc17 	ldw	r2,-16(fp)
   1cea8:	10801117 	ldw	r2,68(r2)
   1ceac:	1884983a 	sll	r2,r3,r2
   1ceb0:	e0fffb17 	ldw	r3,-20(fp)
   1ceb4:	1885883a 	add	r2,r3,r2
   1ceb8:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1cebc:	e0bffc17 	ldw	r2,-16(fp)
   1cec0:	10800e17 	ldw	r2,56(r2)
   1cec4:	10800058 	cmpnei	r2,r2,1
   1cec8:	1000081e 	bne	r2,zero,1ceec <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   1cecc:	e0bffc17 	ldw	r2,-16(fp)
   1ced0:	10c00c17 	ldw	r3,48(r2)
   1ced4:	e0bffb17 	ldw	r2,-20(fp)
   1ced8:	1885883a 	add	r2,r3,r2
   1cedc:	1007883a 	mov	r3,r2
   1cee0:	e0bffd17 	ldw	r2,-12(fp)
   1cee4:	18800025 	stbio	r2,0(r3)
   1cee8:	00001306 	br	1cf38 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1ceec:	e0bffc17 	ldw	r2,-16(fp)
   1cef0:	10800e17 	ldw	r2,56(r2)
   1cef4:	10800098 	cmpnei	r2,r2,2
   1cef8:	1000081e 	bne	r2,zero,1cf1c <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   1cefc:	e0bffc17 	ldw	r2,-16(fp)
   1cf00:	10c00c17 	ldw	r3,48(r2)
   1cf04:	e0bffb17 	ldw	r2,-20(fp)
   1cf08:	1885883a 	add	r2,r3,r2
   1cf0c:	1007883a 	mov	r3,r2
   1cf10:	e0bffd17 	ldw	r2,-12(fp)
   1cf14:	1880002d 	sthio	r2,0(r3)
   1cf18:	00000706 	br	1cf38 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   1cf1c:	e0bffc17 	ldw	r2,-16(fp)
   1cf20:	10c00c17 	ldw	r3,48(r2)
   1cf24:	e0bffb17 	ldw	r2,-20(fp)
   1cf28:	1885883a 	add	r2,r3,r2
   1cf2c:	1007883a 	mov	r3,r2
   1cf30:	e0bffd17 	ldw	r2,-12(fp)
   1cf34:	18800035 	stwio	r2,0(r3)
	}

	return 0;
   1cf38:	0005883a 	mov	r2,zero
}
   1cf3c:	e037883a 	mov	sp,fp
   1cf40:	df000017 	ldw	fp,0(sp)
   1cf44:	dec00104 	addi	sp,sp,4
   1cf48:	f800283a 	ret

0001cf4c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   1cf4c:	defffd04 	addi	sp,sp,-12
   1cf50:	df000215 	stw	fp,8(sp)
   1cf54:	df000204 	addi	fp,sp,8
   1cf58:	e13ffe15 	stw	r4,-8(fp)
   1cf5c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   1cf60:	e0bffe17 	ldw	r2,-8(fp)
   1cf64:	10800a17 	ldw	r2,40(r2)
   1cf68:	10800104 	addi	r2,r2,4
   1cf6c:	1007883a 	mov	r3,r2
   1cf70:	e0bfff17 	ldw	r2,-4(fp)
   1cf74:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   1cf78:	e0bffe17 	ldw	r2,-8(fp)
   1cf7c:	10800a17 	ldw	r2,40(r2)
   1cf80:	10800104 	addi	r2,r2,4
   1cf84:	10800037 	ldwio	r2,0(r2)
   1cf88:	1007883a 	mov	r3,r2
   1cf8c:	e0bffe17 	ldw	r2,-8(fp)
   1cf90:	10c00c15 	stw	r3,48(r2)
	return 0;
   1cf94:	0005883a 	mov	r2,zero
}
   1cf98:	e037883a 	mov	sp,fp
   1cf9c:	df000017 	ldw	fp,0(sp)
   1cfa0:	dec00104 	addi	sp,sp,4
   1cfa4:	f800283a 	ret

0001cfa8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   1cfa8:	defffd04 	addi	sp,sp,-12
   1cfac:	df000215 	stw	fp,8(sp)
   1cfb0:	dc000115 	stw	r16,4(sp)
   1cfb4:	df000204 	addi	fp,sp,8
   1cfb8:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   1cfbc:	e0bffe17 	ldw	r2,-8(fp)
   1cfc0:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   1cfc4:	e0bffe17 	ldw	r2,-8(fp)
   1cfc8:	10800a17 	ldw	r2,40(r2)
   1cfcc:	1007883a 	mov	r3,r2
   1cfd0:	00800044 	movi	r2,1
   1cfd4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   1cfd8:	e0bffe17 	ldw	r2,-8(fp)
   1cfdc:	10c00b17 	ldw	r3,44(r2)
   1cfe0:	e0bffe17 	ldw	r2,-8(fp)
   1cfe4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   1cfe8:	e0bffe17 	ldw	r2,-8(fp)
   1cfec:	14000b15 	stw	r16,44(r2)
	return 0;
   1cff0:	0005883a 	mov	r2,zero
}
   1cff4:	e6ffff04 	addi	sp,fp,-4
   1cff8:	df000117 	ldw	fp,4(sp)
   1cffc:	dc000017 	ldw	r16,0(sp)
   1d000:	dec00204 	addi	sp,sp,8
   1d004:	f800283a 	ret

0001d008 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   1d008:	defffe04 	addi	sp,sp,-8
   1d00c:	df000115 	stw	fp,4(sp)
   1d010:	df000104 	addi	fp,sp,4
   1d014:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   1d018:	e0bfff17 	ldw	r2,-4(fp)
   1d01c:	10800a17 	ldw	r2,40(r2)
   1d020:	10800304 	addi	r2,r2,12
   1d024:	10800037 	ldwio	r2,0(r2)
   1d028:	1080004c 	andi	r2,r2,1
}
   1d02c:	e037883a 	mov	sp,fp
   1d030:	df000017 	ldw	fp,0(sp)
   1d034:	dec00104 	addi	sp,sp,4
   1d038:	f800283a 	ret

0001d03c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   1d03c:	defff704 	addi	sp,sp,-36
   1d040:	df000815 	stw	fp,32(sp)
   1d044:	dd400715 	stw	r21,28(sp)
   1d048:	dd000615 	stw	r20,24(sp)
   1d04c:	dcc00515 	stw	r19,20(sp)
   1d050:	dc800415 	stw	r18,16(sp)
   1d054:	dc400315 	stw	r17,12(sp)
   1d058:	dc000215 	stw	r16,8(sp)
   1d05c:	df000804 	addi	fp,sp,32
   1d060:	e13ff815 	stw	r4,-32(fp)
   1d064:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1d068:	e0bff917 	ldw	r2,-28(fp)
   1d06c:	10800058 	cmpnei	r2,r2,1
   1d070:	1000031e 	bne	r2,zero,1d080 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
   1d074:	e0bff817 	ldw	r2,-32(fp)
   1d078:	14400c17 	ldw	r17,48(r2)
   1d07c:	00000206 	br	1d088 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
   1d080:	e0bff817 	ldw	r2,-32(fp)
   1d084:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
   1d088:	e0bff817 	ldw	r2,-32(fp)
   1d08c:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d090:	e0bff817 	ldw	r2,-32(fp)
   1d094:	10800e17 	ldw	r2,56(r2)
   1d098:	10800098 	cmpnei	r2,r2,2
   1d09c:	1000031e 	bne	r2,zero,1d0ac <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
   1d0a0:	8405883a 	add	r2,r16,r16
   1d0a4:	1021883a 	mov	r16,r2
   1d0a8:	00000306 	br	1d0b8 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
   1d0ac:	8405883a 	add	r2,r16,r16
   1d0b0:	1085883a 	add	r2,r2,r2
   1d0b4:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   1d0b8:	e0bff817 	ldw	r2,-32(fp)
   1d0bc:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1d0c0:	e0bff817 	ldw	r2,-32(fp)
   1d0c4:	10800d17 	ldw	r2,52(r2)
   1d0c8:	1000111e 	bne	r2,zero,1d110 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1d0cc:	e0bff817 	ldw	r2,-32(fp)
   1d0d0:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
   1d0d4:	0029883a 	mov	r20,zero
   1d0d8:	00000b06 	br	1d108 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
   1d0dc:	0027883a 	mov	r19,zero
   1d0e0:	00000406 	br	1d0f4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
   1d0e4:	9c45883a 	add	r2,r19,r17
   1d0e8:	0007883a 	mov	r3,zero
   1d0ec:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   1d0f0:	9cc00104 	addi	r19,r19,4
   1d0f4:	9c3ffb36 	bltu	r19,r16,1d0e4 <__alt_data_end+0xf001d0e4>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   1d0f8:	00800044 	movi	r2,1
   1d0fc:	1544983a 	sll	r2,r2,r21
   1d100:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   1d104:	a5000044 	addi	r20,r20,1
   1d108:	a4bff436 	bltu	r20,r18,1d0dc <__alt_data_end+0xf001d0dc>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   1d10c:	00000a06 	br	1d138 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   1d110:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
   1d114:	0021883a 	mov	r16,zero
   1d118:	00000506 	br	1d130 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
   1d11c:	8005883a 	mov	r2,r16
   1d120:	1445883a 	add	r2,r2,r17
   1d124:	0007883a 	mov	r3,zero
   1d128:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   1d12c:	84000104 	addi	r16,r16,4
   1d130:	8005883a 	mov	r2,r16
   1d134:	14bff936 	bltu	r2,r18,1d11c <__alt_data_end+0xf001d11c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   1d138:	0001883a 	nop
   1d13c:	e6fffa04 	addi	sp,fp,-24
   1d140:	df000617 	ldw	fp,24(sp)
   1d144:	dd400517 	ldw	r21,20(sp)
   1d148:	dd000417 	ldw	r20,16(sp)
   1d14c:	dcc00317 	ldw	r19,12(sp)
   1d150:	dc800217 	ldw	r18,8(sp)
   1d154:	dc400117 	ldw	r17,4(sp)
   1d158:	dc000017 	ldw	r16,0(sp)
   1d15c:	dec00704 	addi	sp,sp,28
   1d160:	f800283a 	ret

0001d164 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   1d164:	defff304 	addi	sp,sp,-52
   1d168:	df000c15 	stw	fp,48(sp)
   1d16c:	ddc00b15 	stw	r23,44(sp)
   1d170:	dd800a15 	stw	r22,40(sp)
   1d174:	dd400915 	stw	r21,36(sp)
   1d178:	dd000815 	stw	r20,32(sp)
   1d17c:	dcc00715 	stw	r19,28(sp)
   1d180:	dc800615 	stw	r18,24(sp)
   1d184:	dc400515 	stw	r17,20(sp)
   1d188:	dc000415 	stw	r16,16(sp)
   1d18c:	df000c04 	addi	fp,sp,48
   1d190:	e13ff415 	stw	r4,-48(fp)
   1d194:	e17ff515 	stw	r5,-44(fp)
   1d198:	e1bff615 	stw	r6,-40(fp)
   1d19c:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1d1a0:	e0bff417 	ldw	r2,-48(fp)
   1d1a4:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1d1a8:	e0bff417 	ldw	r2,-48(fp)
   1d1ac:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   1d1b0:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
   1d1b4:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
   1d1b8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
   1d1bc:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
   1d1c0:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   1d1c4:	a580032e 	bgeu	r20,r22,1d1d4 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
   1d1c8:	b02b883a 	mov	r21,r22
		l_x = r_x;
   1d1cc:	a02d883a 	mov	r22,r20
		r_x = temp;
   1d1d0:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
   1d1d4:	9c40032e 	bgeu	r19,r17,1d1e4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
   1d1d8:	882b883a 	mov	r21,r17
		t_y = b_y;
   1d1dc:	9823883a 	mov	r17,r19
		b_y = temp;
   1d1e0:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   1d1e4:	b480892e 	bgeu	r22,r18,1d40c <alt_up_pixel_buffer_dma_draw_box+0x2a8>
   1d1e8:	8c00882e 	bgeu	r17,r16,1d40c <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1d1ec:	a4800136 	bltu	r20,r18,1d1f4 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
   1d1f0:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1d1f4:	9c000136 	bltu	r19,r16,1d1fc <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
   1d1f8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1d1fc:	e0800317 	ldw	r2,12(fp)
   1d200:	10800058 	cmpnei	r2,r2,1
   1d204:	1000031e 	bne	r2,zero,1d214 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
   1d208:	e0bff417 	ldw	r2,-48(fp)
   1d20c:	14000c17 	ldw	r16,48(r2)
   1d210:	00000206 	br	1d21c <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
   1d214:	e0bff417 	ldw	r2,-48(fp)
   1d218:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1d21c:	e0bff417 	ldw	r2,-48(fp)
   1d220:	10800d17 	ldw	r2,52(r2)
   1d224:	10003c1e 	bne	r2,zero,1d318 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1d228:	e0bff417 	ldw	r2,-48(fp)
   1d22c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   1d230:	8d44983a 	sll	r2,r17,r21
   1d234:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d238:	e0bff417 	ldw	r2,-48(fp)
   1d23c:	10800e17 	ldw	r2,56(r2)
   1d240:	10800058 	cmpnei	r2,r2,1
   1d244:	10000f1e 	bne	r2,zero,1d284 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
   1d248:	8825883a 	mov	r18,r17
   1d24c:	00000b06 	br	1d27c <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
   1d250:	b023883a 	mov	r17,r22
   1d254:	00000406 	br	1d268 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
   1d258:	8c05883a 	add	r2,r17,r16
   1d25c:	b807883a 	mov	r3,r23
   1d260:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1d264:	8c400044 	addi	r17,r17,1
   1d268:	a47ffb2e 	bgeu	r20,r17,1d258 <__alt_data_end+0xf001d258>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   1d26c:	00800044 	movi	r2,1
   1d270:	1544983a 	sll	r2,r2,r21
   1d274:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1d278:	94800044 	addi	r18,r18,1
   1d27c:	9cbff42e 	bgeu	r19,r18,1d250 <__alt_data_end+0xf001d250>
   1d280:	00006306 	br	1d410 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d284:	e0bff417 	ldw	r2,-48(fp)
   1d288:	10800e17 	ldw	r2,56(r2)
   1d28c:	10800098 	cmpnei	r2,r2,2
   1d290:	1000101e 	bne	r2,zero,1d2d4 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
   1d294:	8825883a 	mov	r18,r17
   1d298:	00000c06 	br	1d2cc <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
   1d29c:	b023883a 	mov	r17,r22
   1d2a0:	00000506 	br	1d2b8 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   1d2a4:	8c45883a 	add	r2,r17,r17
   1d2a8:	1405883a 	add	r2,r2,r16
   1d2ac:	b807883a 	mov	r3,r23
   1d2b0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1d2b4:	8c400044 	addi	r17,r17,1
   1d2b8:	a47ffa2e 	bgeu	r20,r17,1d2a4 <__alt_data_end+0xf001d2a4>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   1d2bc:	00800044 	movi	r2,1
   1d2c0:	1544983a 	sll	r2,r2,r21
   1d2c4:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1d2c8:	94800044 	addi	r18,r18,1
   1d2cc:	9cbff32e 	bgeu	r19,r18,1d29c <__alt_data_end+0xf001d29c>
   1d2d0:	00004f06 	br	1d410 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1d2d4:	8825883a 	mov	r18,r17
   1d2d8:	00000d06 	br	1d310 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
   1d2dc:	b023883a 	mov	r17,r22
   1d2e0:	00000606 	br	1d2fc <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1d2e4:	8c45883a 	add	r2,r17,r17
   1d2e8:	1085883a 	add	r2,r2,r2
   1d2ec:	1405883a 	add	r2,r2,r16
   1d2f0:	b807883a 	mov	r3,r23
   1d2f4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1d2f8:	8c400044 	addi	r17,r17,1
   1d2fc:	a47ff92e 	bgeu	r20,r17,1d2e4 <__alt_data_end+0xf001d2e4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   1d300:	00800044 	movi	r2,1
   1d304:	1544983a 	sll	r2,r2,r21
   1d308:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1d30c:	94800044 	addi	r18,r18,1
   1d310:	9cbff22e 	bgeu	r19,r18,1d2dc <__alt_data_end+0xf001d2dc>
   1d314:	00003e06 	br	1d410 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d318:	e0bff417 	ldw	r2,-48(fp)
   1d31c:	10800e17 	ldw	r2,56(r2)
   1d320:	10800058 	cmpnei	r2,r2,1
   1d324:	10000f1e 	bne	r2,zero,1d364 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
   1d328:	8c85383a 	mul	r2,r17,r18
   1d32c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d330:	882b883a 	mov	r21,r17
   1d334:	00000906 	br	1d35c <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
   1d338:	b023883a 	mov	r17,r22
   1d33c:	00000406 	br	1d350 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
   1d340:	8c05883a 	add	r2,r17,r16
   1d344:	b807883a 	mov	r3,r23
   1d348:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1d34c:	8c400044 	addi	r17,r17,1
   1d350:	a47ffb2e 	bgeu	r20,r17,1d340 <__alt_data_end+0xf001d340>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   1d354:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d358:	ad400044 	addi	r21,r21,1
   1d35c:	9d7ff62e 	bgeu	r19,r21,1d338 <__alt_data_end+0xf001d338>
   1d360:	00002b06 	br	1d410 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d364:	e0bff417 	ldw	r2,-48(fp)
   1d368:	10800e17 	ldw	r2,56(r2)
   1d36c:	10800098 	cmpnei	r2,r2,2
   1d370:	1000121e 	bne	r2,zero,1d3bc <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
   1d374:	9485883a 	add	r2,r18,r18
   1d378:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   1d37c:	8c85383a 	mul	r2,r17,r18
   1d380:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d384:	882b883a 	mov	r21,r17
   1d388:	00000a06 	br	1d3b4 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
   1d38c:	b023883a 	mov	r17,r22
   1d390:	00000506 	br	1d3a8 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   1d394:	8c45883a 	add	r2,r17,r17
   1d398:	1405883a 	add	r2,r2,r16
   1d39c:	b807883a 	mov	r3,r23
   1d3a0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1d3a4:	8c400044 	addi	r17,r17,1
   1d3a8:	a47ffa2e 	bgeu	r20,r17,1d394 <__alt_data_end+0xf001d394>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   1d3ac:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d3b0:	ad400044 	addi	r21,r21,1
   1d3b4:	9d7ff52e 	bgeu	r19,r21,1d38c <__alt_data_end+0xf001d38c>
   1d3b8:	00001506 	br	1d410 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1d3bc:	9485883a 	add	r2,r18,r18
   1d3c0:	1085883a 	add	r2,r2,r2
   1d3c4:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   1d3c8:	8c85383a 	mul	r2,r17,r18
   1d3cc:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d3d0:	882b883a 	mov	r21,r17
   1d3d4:	00000b06 	br	1d404 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
   1d3d8:	b023883a 	mov	r17,r22
   1d3dc:	00000606 	br	1d3f8 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1d3e0:	8c45883a 	add	r2,r17,r17
   1d3e4:	1085883a 	add	r2,r2,r2
   1d3e8:	1405883a 	add	r2,r2,r16
   1d3ec:	b807883a 	mov	r3,r23
   1d3f0:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1d3f4:	8c400044 	addi	r17,r17,1
   1d3f8:	a47ff92e 	bgeu	r20,r17,1d3e0 <__alt_data_end+0xf001d3e0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   1d3fc:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d400:	ad400044 	addi	r21,r21,1
   1d404:	9d7ff42e 	bgeu	r19,r21,1d3d8 <__alt_data_end+0xf001d3d8>
   1d408:	00000106 	br	1d410 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1d40c:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
   1d410:	e6fff804 	addi	sp,fp,-32
   1d414:	df000817 	ldw	fp,32(sp)
   1d418:	ddc00717 	ldw	r23,28(sp)
   1d41c:	dd800617 	ldw	r22,24(sp)
   1d420:	dd400517 	ldw	r21,20(sp)
   1d424:	dd000417 	ldw	r20,16(sp)
   1d428:	dcc00317 	ldw	r19,12(sp)
   1d42c:	dc800217 	ldw	r18,8(sp)
   1d430:	dc400117 	ldw	r17,4(sp)
   1d434:	dc000017 	ldw	r16,0(sp)
   1d438:	dec00904 	addi	sp,sp,36
   1d43c:	f800283a 	ret

0001d440 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   1d440:	defff404 	addi	sp,sp,-48
   1d444:	df000b15 	stw	fp,44(sp)
   1d448:	dd800a15 	stw	r22,40(sp)
   1d44c:	dd400915 	stw	r21,36(sp)
   1d450:	dd000815 	stw	r20,32(sp)
   1d454:	dcc00715 	stw	r19,28(sp)
   1d458:	dc800615 	stw	r18,24(sp)
   1d45c:	dc400515 	stw	r17,20(sp)
   1d460:	dc000415 	stw	r16,16(sp)
   1d464:	df000b04 	addi	fp,sp,44
   1d468:	e13ff515 	stw	r4,-44(fp)
   1d46c:	e17ff615 	stw	r5,-40(fp)
   1d470:	e1bff715 	stw	r6,-36(fp)
   1d474:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1d478:	e0bff517 	ldw	r2,-44(fp)
   1d47c:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1d480:	e0bff517 	ldw	r2,-44(fp)
   1d484:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   1d488:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
   1d48c:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
   1d490:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
   1d494:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   1d498:	9c40032e 	bgeu	r19,r17,1d4a8 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
   1d49c:	882d883a 	mov	r22,r17
		l_x = r_x;
   1d4a0:	9823883a 	mov	r17,r19
		r_x = temp;
   1d4a4:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   1d4a8:	8c805d2e 	bgeu	r17,r18,1d620 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
   1d4ac:	a4005c2e 	bgeu	r20,r16,1d620 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1d4b0:	9c800136 	bltu	r19,r18,1d4b8 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
   1d4b4:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1d4b8:	e0800217 	ldw	r2,8(fp)
   1d4bc:	10800058 	cmpnei	r2,r2,1
   1d4c0:	1000031e 	bne	r2,zero,1d4d0 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   1d4c4:	e0bff517 	ldw	r2,-44(fp)
   1d4c8:	14000c17 	ldw	r16,48(r2)
   1d4cc:	00000206 	br	1d4d8 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   1d4d0:	e0bff517 	ldw	r2,-44(fp)
   1d4d4:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1d4d8:	e0bff517 	ldw	r2,-44(fp)
   1d4dc:	10800d17 	ldw	r2,52(r2)
   1d4e0:	1000231e 	bne	r2,zero,1d570 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1d4e4:	e0bff517 	ldw	r2,-44(fp)
   1d4e8:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
   1d4ec:	a484983a 	sll	r2,r20,r18
   1d4f0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d4f4:	e0bff517 	ldw	r2,-44(fp)
   1d4f8:	10800e17 	ldw	r2,56(r2)
   1d4fc:	10800058 	cmpnei	r2,r2,1
   1d500:	1000071e 	bne	r2,zero,1d520 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
   1d504:	00000406 	br	1d518 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
   1d508:	8c05883a 	add	r2,r17,r16
   1d50c:	a807883a 	mov	r3,r21
   1d510:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   1d514:	8c400044 	addi	r17,r17,1
   1d518:	9c7ffb2e 	bgeu	r19,r17,1d508 <__alt_data_end+0xf001d508>
   1d51c:	00004106 	br	1d624 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d520:	e0bff517 	ldw	r2,-44(fp)
   1d524:	10800e17 	ldw	r2,56(r2)
   1d528:	10800098 	cmpnei	r2,r2,2
   1d52c:	10000e1e 	bne	r2,zero,1d568 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
   1d530:	00000506 	br	1d548 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   1d534:	8c45883a 	add	r2,r17,r17
   1d538:	1405883a 	add	r2,r2,r16
   1d53c:	a807883a 	mov	r3,r21
   1d540:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   1d544:	8c400044 	addi	r17,r17,1
   1d548:	9c7ffa2e 	bgeu	r19,r17,1d534 <__alt_data_end+0xf001d534>
   1d54c:	00003506 	br	1d624 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   1d550:	8c45883a 	add	r2,r17,r17
   1d554:	1085883a 	add	r2,r2,r2
   1d558:	1405883a 	add	r2,r2,r16
   1d55c:	a807883a 	mov	r3,r21
   1d560:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1d564:	8c400044 	addi	r17,r17,1
   1d568:	9c7ff92e 	bgeu	r19,r17,1d550 <__alt_data_end+0xf001d550>
   1d56c:	00002d06 	br	1d624 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d570:	e0bff517 	ldw	r2,-44(fp)
   1d574:	10800e17 	ldw	r2,56(r2)
   1d578:	10800058 	cmpnei	r2,r2,1
   1d57c:	1000091e 	bne	r2,zero,1d5a4 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
   1d580:	a485383a 	mul	r2,r20,r18
   1d584:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   1d588:	00000406 	br	1d59c <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   1d58c:	8c05883a 	add	r2,r17,r16
   1d590:	a807883a 	mov	r3,r21
   1d594:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   1d598:	8c400044 	addi	r17,r17,1
   1d59c:	9c7ffb2e 	bgeu	r19,r17,1d58c <__alt_data_end+0xf001d58c>
   1d5a0:	00002006 	br	1d624 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d5a4:	e0bff517 	ldw	r2,-44(fp)
   1d5a8:	10800e17 	ldw	r2,56(r2)
   1d5ac:	10800098 	cmpnei	r2,r2,2
   1d5b0:	10000c1e 	bne	r2,zero,1d5e4 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
   1d5b4:	9485883a 	add	r2,r18,r18
   1d5b8:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   1d5bc:	a485383a 	mul	r2,r20,r18
   1d5c0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   1d5c4:	00000506 	br	1d5dc <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   1d5c8:	8c45883a 	add	r2,r17,r17
   1d5cc:	1405883a 	add	r2,r2,r16
   1d5d0:	a807883a 	mov	r3,r21
   1d5d4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   1d5d8:	8c400044 	addi	r17,r17,1
   1d5dc:	9c7ffa2e 	bgeu	r19,r17,1d5c8 <__alt_data_end+0xf001d5c8>
   1d5e0:	00001006 	br	1d624 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1d5e4:	9485883a 	add	r2,r18,r18
   1d5e8:	1085883a 	add	r2,r2,r2
   1d5ec:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   1d5f0:	a485383a 	mul	r2,r20,r18
   1d5f4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   1d5f8:	00000606 	br	1d614 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   1d5fc:	8c45883a 	add	r2,r17,r17
   1d600:	1085883a 	add	r2,r2,r2
   1d604:	1405883a 	add	r2,r2,r16
   1d608:	a807883a 	mov	r3,r21
   1d60c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   1d610:	8c400044 	addi	r17,r17,1
   1d614:	9c7ff92e 	bgeu	r19,r17,1d5fc <__alt_data_end+0xf001d5fc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
   1d618:	84a1883a 	add	r16,r16,r18
   1d61c:	00000106 	br	1d624 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1d620:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   1d624:	e6fff904 	addi	sp,fp,-28
   1d628:	df000717 	ldw	fp,28(sp)
   1d62c:	dd800617 	ldw	r22,24(sp)
   1d630:	dd400517 	ldw	r21,20(sp)
   1d634:	dd000417 	ldw	r20,16(sp)
   1d638:	dcc00317 	ldw	r19,12(sp)
   1d63c:	dc800217 	ldw	r18,8(sp)
   1d640:	dc400117 	ldw	r17,4(sp)
   1d644:	dc000017 	ldw	r16,0(sp)
   1d648:	dec00804 	addi	sp,sp,32
   1d64c:	f800283a 	ret

0001d650 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   1d650:	defff404 	addi	sp,sp,-48
   1d654:	df000b15 	stw	fp,44(sp)
   1d658:	dd800a15 	stw	r22,40(sp)
   1d65c:	dd400915 	stw	r21,36(sp)
   1d660:	dd000815 	stw	r20,32(sp)
   1d664:	dcc00715 	stw	r19,28(sp)
   1d668:	dc800615 	stw	r18,24(sp)
   1d66c:	dc400515 	stw	r17,20(sp)
   1d670:	dc000415 	stw	r16,16(sp)
   1d674:	df000b04 	addi	fp,sp,44
   1d678:	e13ff515 	stw	r4,-44(fp)
   1d67c:	e17ff615 	stw	r5,-40(fp)
   1d680:	e1bff715 	stw	r6,-36(fp)
   1d684:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1d688:	e0bff517 	ldw	r2,-44(fp)
   1d68c:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1d690:	e0bff517 	ldw	r2,-44(fp)
   1d694:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
   1d698:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
   1d69c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
   1d6a0:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
   1d6a4:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   1d6a8:	9d00032e 	bgeu	r19,r20,1d6b8 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
   1d6ac:	a02b883a 	mov	r21,r20
		t_y = b_y;
   1d6b0:	9829883a 	mov	r20,r19
		b_y = temp;
   1d6b4:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   1d6b8:	94406c2e 	bgeu	r18,r17,1d86c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
   1d6bc:	a4006b2e 	bgeu	r20,r16,1d86c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1d6c0:	9c000136 	bltu	r19,r16,1d6c8 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
   1d6c4:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1d6c8:	e0800217 	ldw	r2,8(fp)
   1d6cc:	10800058 	cmpnei	r2,r2,1
   1d6d0:	1000031e 	bne	r2,zero,1d6e0 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   1d6d4:	e0bff517 	ldw	r2,-44(fp)
   1d6d8:	14000c17 	ldw	r16,48(r2)
   1d6dc:	00000206 	br	1d6e8 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   1d6e0:	e0bff517 	ldw	r2,-44(fp)
   1d6e4:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1d6e8:	e0bff517 	ldw	r2,-44(fp)
   1d6ec:	10800d17 	ldw	r2,52(r2)
   1d6f0:	1000301e 	bne	r2,zero,1d7b4 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1d6f4:	e0bff517 	ldw	r2,-44(fp)
   1d6f8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   1d6fc:	a544983a 	sll	r2,r20,r21
   1d700:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d704:	e0bff517 	ldw	r2,-44(fp)
   1d708:	10800e17 	ldw	r2,56(r2)
   1d70c:	10800058 	cmpnei	r2,r2,1
   1d710:	10000b1e 	bne	r2,zero,1d740 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
   1d714:	a023883a 	mov	r17,r20
   1d718:	00000706 	br	1d738 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1d71c:	9405883a 	add	r2,r18,r16
   1d720:	b007883a 	mov	r3,r22
   1d724:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   1d728:	00800044 	movi	r2,1
   1d72c:	1544983a 	sll	r2,r2,r21
   1d730:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1d734:	8c400044 	addi	r17,r17,1
   1d738:	9c7ff82e 	bgeu	r19,r17,1d71c <__alt_data_end+0xf001d71c>
   1d73c:	00004c06 	br	1d870 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d740:	e0bff517 	ldw	r2,-44(fp)
   1d744:	10800e17 	ldw	r2,56(r2)
   1d748:	10800098 	cmpnei	r2,r2,2
   1d74c:	10000c1e 	bne	r2,zero,1d780 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
   1d750:	a023883a 	mov	r17,r20
   1d754:	00000806 	br	1d778 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   1d758:	9485883a 	add	r2,r18,r18
   1d75c:	1405883a 	add	r2,r2,r16
   1d760:	b007883a 	mov	r3,r22
   1d764:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   1d768:	00800044 	movi	r2,1
   1d76c:	1544983a 	sll	r2,r2,r21
   1d770:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1d774:	8c400044 	addi	r17,r17,1
   1d778:	9c7ff72e 	bgeu	r19,r17,1d758 <__alt_data_end+0xf001d758>
   1d77c:	00003c06 	br	1d870 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1d780:	a023883a 	mov	r17,r20
   1d784:	00000906 	br	1d7ac <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   1d788:	9485883a 	add	r2,r18,r18
   1d78c:	1085883a 	add	r2,r2,r2
   1d790:	1405883a 	add	r2,r2,r16
   1d794:	b007883a 	mov	r3,r22
   1d798:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   1d79c:	00800044 	movi	r2,1
   1d7a0:	1544983a 	sll	r2,r2,r21
   1d7a4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1d7a8:	8c400044 	addi	r17,r17,1
   1d7ac:	9c7ff62e 	bgeu	r19,r17,1d788 <__alt_data_end+0xf001d788>
   1d7b0:	00002f06 	br	1d870 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d7b4:	e0bff517 	ldw	r2,-44(fp)
   1d7b8:	10800e17 	ldw	r2,56(r2)
   1d7bc:	10800058 	cmpnei	r2,r2,1
   1d7c0:	10000a1e 	bne	r2,zero,1d7ec <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
   1d7c4:	a445383a 	mul	r2,r20,r17
   1d7c8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d7cc:	00000506 	br	1d7e4 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1d7d0:	9405883a 	add	r2,r18,r16
   1d7d4:	b007883a 	mov	r3,r22
   1d7d8:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   1d7dc:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d7e0:	a5000044 	addi	r20,r20,1
   1d7e4:	9d3ffa2e 	bgeu	r19,r20,1d7d0 <__alt_data_end+0xf001d7d0>
   1d7e8:	00002106 	br	1d870 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d7ec:	e0bff517 	ldw	r2,-44(fp)
   1d7f0:	10800e17 	ldw	r2,56(r2)
   1d7f4:	10800098 	cmpnei	r2,r2,2
   1d7f8:	10000d1e 	bne	r2,zero,1d830 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
   1d7fc:	8c45883a 	add	r2,r17,r17
   1d800:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   1d804:	a445383a 	mul	r2,r20,r17
   1d808:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d80c:	00000606 	br	1d828 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   1d810:	9485883a 	add	r2,r18,r18
   1d814:	1405883a 	add	r2,r2,r16
   1d818:	b007883a 	mov	r3,r22
   1d81c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   1d820:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d824:	a5000044 	addi	r20,r20,1
   1d828:	9d3ff92e 	bgeu	r19,r20,1d810 <__alt_data_end+0xf001d810>
   1d82c:	00001006 	br	1d870 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1d830:	8c45883a 	add	r2,r17,r17
   1d834:	1085883a 	add	r2,r2,r2
   1d838:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   1d83c:	a445383a 	mul	r2,r20,r17
   1d840:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d844:	00000706 	br	1d864 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   1d848:	9485883a 	add	r2,r18,r18
   1d84c:	1085883a 	add	r2,r2,r2
   1d850:	1405883a 	add	r2,r2,r16
   1d854:	b007883a 	mov	r3,r22
   1d858:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   1d85c:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d860:	a5000044 	addi	r20,r20,1
   1d864:	9d3ff82e 	bgeu	r19,r20,1d848 <__alt_data_end+0xf001d848>
   1d868:	00000106 	br	1d870 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1d86c:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   1d870:	e6fff904 	addi	sp,fp,-28
   1d874:	df000717 	ldw	fp,28(sp)
   1d878:	dd800617 	ldw	r22,24(sp)
   1d87c:	dd400517 	ldw	r21,20(sp)
   1d880:	dd000417 	ldw	r20,16(sp)
   1d884:	dcc00317 	ldw	r19,12(sp)
   1d888:	dc800217 	ldw	r18,8(sp)
   1d88c:	dc400117 	ldw	r17,4(sp)
   1d890:	dc000017 	ldw	r16,0(sp)
   1d894:	dec00804 	addi	sp,sp,32
   1d898:	f800283a 	ret

0001d89c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   1d89c:	defff804 	addi	sp,sp,-32
   1d8a0:	dfc00715 	stw	ra,28(sp)
   1d8a4:	df000615 	stw	fp,24(sp)
   1d8a8:	df000604 	addi	fp,sp,24
   1d8ac:	e13ffc15 	stw	r4,-16(fp)
   1d8b0:	e17ffd15 	stw	r5,-12(fp)
   1d8b4:	e1bffe15 	stw	r6,-8(fp)
   1d8b8:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   1d8bc:	e0800417 	ldw	r2,16(fp)
   1d8c0:	d8800115 	stw	r2,4(sp)
   1d8c4:	e0800317 	ldw	r2,12(fp)
   1d8c8:	d8800015 	stw	r2,0(sp)
   1d8cc:	e1fffe17 	ldw	r7,-8(fp)
   1d8d0:	e1bfff17 	ldw	r6,-4(fp)
   1d8d4:	e17ffd17 	ldw	r5,-12(fp)
   1d8d8:	e13ffc17 	ldw	r4,-16(fp)
   1d8dc:	001d4400 	call	1d440 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   1d8e0:	e0800417 	ldw	r2,16(fp)
   1d8e4:	d8800115 	stw	r2,4(sp)
   1d8e8:	e0800317 	ldw	r2,12(fp)
   1d8ec:	d8800015 	stw	r2,0(sp)
   1d8f0:	e1c00217 	ldw	r7,8(fp)
   1d8f4:	e1bfff17 	ldw	r6,-4(fp)
   1d8f8:	e17ffd17 	ldw	r5,-12(fp)
   1d8fc:	e13ffc17 	ldw	r4,-16(fp)
   1d900:	001d4400 	call	1d440 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   1d904:	e0800417 	ldw	r2,16(fp)
   1d908:	d8800115 	stw	r2,4(sp)
   1d90c:	e0800317 	ldw	r2,12(fp)
   1d910:	d8800015 	stw	r2,0(sp)
   1d914:	e1c00217 	ldw	r7,8(fp)
   1d918:	e1bffe17 	ldw	r6,-8(fp)
   1d91c:	e17ffd17 	ldw	r5,-12(fp)
   1d920:	e13ffc17 	ldw	r4,-16(fp)
   1d924:	001d6500 	call	1d650 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   1d928:	e0800417 	ldw	r2,16(fp)
   1d92c:	d8800115 	stw	r2,4(sp)
   1d930:	e0800317 	ldw	r2,12(fp)
   1d934:	d8800015 	stw	r2,0(sp)
   1d938:	e1c00217 	ldw	r7,8(fp)
   1d93c:	e1bffe17 	ldw	r6,-8(fp)
   1d940:	e17fff17 	ldw	r5,-4(fp)
   1d944:	e13ffc17 	ldw	r4,-16(fp)
   1d948:	001d6500 	call	1d650 <alt_up_pixel_buffer_dma_draw_vline>
}
   1d94c:	0001883a 	nop
   1d950:	e037883a 	mov	sp,fp
   1d954:	dfc00117 	ldw	ra,4(sp)
   1d958:	df000017 	ldw	fp,0(sp)
   1d95c:	dec00204 	addi	sp,sp,8
   1d960:	f800283a 	ret

0001d964 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   1d964:	deffff04 	addi	sp,sp,-4
   1d968:	df000015 	stw	fp,0(sp)
   1d96c:	d839883a 	mov	fp,sp
   1d970:	2005883a 	mov	r2,r4
   1d974:	3007883a 	mov	r3,r6
   1d978:	3809883a 	mov	r4,r7
   1d97c:	e1800117 	ldw	r6,4(fp)
   1d980:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
   1d984:	3800051e 	bne	r7,zero,1d99c <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   1d988:	2909383a 	mul	r4,r5,r4
   1d98c:	20c7883a 	add	r3,r4,r3
   1d990:	1885883a 	add	r2,r3,r2
   1d994:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   1d998:	00000e06 	br	1d9d4 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
   1d99c:	39c00058 	cmpnei	r7,r7,1
   1d9a0:	3800061e 	bne	r7,zero,1d9bc <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   1d9a4:	2909383a 	mul	r4,r5,r4
   1d9a8:	20c7883a 	add	r3,r4,r3
   1d9ac:	18c7883a 	add	r3,r3,r3
   1d9b0:	1885883a 	add	r2,r3,r2
   1d9b4:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   1d9b8:	00000606 	br	1d9d4 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   1d9bc:	2909383a 	mul	r4,r5,r4
   1d9c0:	20c7883a 	add	r3,r4,r3
   1d9c4:	18c7883a 	add	r3,r3,r3
   1d9c8:	18c7883a 	add	r3,r3,r3
   1d9cc:	1885883a 	add	r2,r3,r2
   1d9d0:	11800035 	stwio	r6,0(r2)
}
   1d9d4:	0001883a 	nop
   1d9d8:	e037883a 	mov	sp,fp
   1d9dc:	df000017 	ldw	fp,0(sp)
   1d9e0:	dec00104 	addi	sp,sp,4
   1d9e4:	f800283a 	ret

0001d9e8 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   1d9e8:	deffeb04 	addi	sp,sp,-84
   1d9ec:	dfc01415 	stw	ra,80(sp)
   1d9f0:	df001315 	stw	fp,76(sp)
   1d9f4:	ddc01215 	stw	r23,72(sp)
   1d9f8:	dd801115 	stw	r22,68(sp)
   1d9fc:	dd401015 	stw	r21,64(sp)
   1da00:	dd000f15 	stw	r20,60(sp)
   1da04:	dcc00e15 	stw	r19,56(sp)
   1da08:	dc800d15 	stw	r18,52(sp)
   1da0c:	dc400c15 	stw	r17,48(sp)
   1da10:	dc000b15 	stw	r16,44(sp)
   1da14:	df001304 	addi	fp,sp,76
   1da18:	e13fef15 	stw	r4,-68(fp)
   1da1c:	e17ff015 	stw	r5,-64(fp)
   1da20:	e1bff115 	stw	r6,-60(fp)
   1da24:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
   1da28:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
   1da2c:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
   1da30:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
   1da34:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   1da38:	a4c5c83a 	sub	r2,r20,r19
   1da3c:	1000010e 	bge	r2,zero,1da44 <alt_up_pixel_buffer_dma_draw_line+0x5c>
   1da40:	0085c83a 	sub	r2,zero,r2
   1da44:	1007883a 	mov	r3,r2
   1da48:	9445c83a 	sub	r2,r18,r17
   1da4c:	1000010e 	bge	r2,zero,1da54 <alt_up_pixel_buffer_dma_draw_line+0x6c>
   1da50:	0085c83a 	sub	r2,zero,r2
   1da54:	10c4803a 	cmplt	r2,r2,r3
   1da58:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   1da5c:	e0bfef17 	ldw	r2,-68(fp)
   1da60:	10800e17 	ldw	r2,56(r2)
   1da64:	10800060 	cmpeqi	r2,r2,1
   1da68:	1000081e 	bne	r2,zero,1da8c <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   1da6c:	e0bfef17 	ldw	r2,-68(fp)
   1da70:	10800e17 	ldw	r2,56(r2)
   1da74:	10800098 	cmpnei	r2,r2,2
   1da78:	1000021e 	bne	r2,zero,1da84 <alt_up_pixel_buffer_dma_draw_line+0x9c>
   1da7c:	00800044 	movi	r2,1
   1da80:	00000306 	br	1da90 <alt_up_pixel_buffer_dma_draw_line+0xa8>
   1da84:	00800084 	movi	r2,2
   1da88:	00000106 	br	1da90 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   1da8c:	0005883a 	mov	r2,zero
   1da90:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
   1da94:	e0800317 	ldw	r2,12(fp)
   1da98:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   1da9c:	e0bfef17 	ldw	r2,-68(fp)
   1daa0:	10800d17 	ldw	r2,52(r2)
   1daa4:	1000071e 	bne	r2,zero,1dac4 <alt_up_pixel_buffer_dma_draw_line+0xdc>
   1daa8:	e0bfef17 	ldw	r2,-68(fp)
   1daac:	10801317 	ldw	r2,76(r2)
   1dab0:	e0fff417 	ldw	r3,-48(fp)
   1dab4:	10c5c83a 	sub	r2,r2,r3
   1dab8:	00c00044 	movi	r3,1
   1dabc:	1884983a 	sll	r2,r3,r2
   1dac0:	00000206 	br	1dacc <alt_up_pixel_buffer_dma_draw_line+0xe4>
   1dac4:	e0bfef17 	ldw	r2,-68(fp)
   1dac8:	10800f17 	ldw	r2,60(r2)
   1dacc:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
   1dad0:	e0800417 	ldw	r2,16(fp)
   1dad4:	10800058 	cmpnei	r2,r2,1
   1dad8:	1000031e 	bne	r2,zero,1dae8 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
   1dadc:	e0bfef17 	ldw	r2,-68(fp)
   1dae0:	15c00c17 	ldw	r23,48(r2)
   1dae4:	00000206 	br	1daf0 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   1dae8:	e0bfef17 	ldw	r2,-68(fp)
   1daec:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
   1daf0:	e0bff307 	ldb	r2,-52(fp)
   1daf4:	0080060e 	bge	zero,r2,1db10 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
   1daf8:	8821883a 	mov	r16,r17
		x_0 = y_0;
   1dafc:	9823883a 	mov	r17,r19
		y_0 = error;
   1db00:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
   1db04:	9021883a 	mov	r16,r18
		x_1 = y_1;
   1db08:	a025883a 	mov	r18,r20
		y_1 = error;
   1db0c:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
   1db10:	9440060e 	bge	r18,r17,1db2c <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
   1db14:	8821883a 	mov	r16,r17
		x_0 = x_1;
   1db18:	9023883a 	mov	r17,r18
		x_1 = error;
   1db1c:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
   1db20:	9821883a 	mov	r16,r19
		y_0 = y_1;
   1db24:	a027883a 	mov	r19,r20
		y_1 = error;
   1db28:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   1db2c:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
   1db30:	a4c5c83a 	sub	r2,r20,r19
   1db34:	1000010e 	bge	r2,zero,1db3c <alt_up_pixel_buffer_dma_draw_line+0x154>
   1db38:	0085c83a 	sub	r2,zero,r2
   1db3c:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
   1db40:	a804d7fa 	srli	r2,r21,31
   1db44:	1545883a 	add	r2,r2,r21
   1db48:	1005d07a 	srai	r2,r2,1
   1db4c:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
   1db50:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
   1db54:	9d00020e 	bge	r19,r20,1db60 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
   1db58:	04c00044 	movi	r19,1
   1db5c:	00000106 	br	1db64 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
   1db60:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   1db64:	e0bff307 	ldb	r2,-52(fp)
   1db68:	10800058 	cmpnei	r2,r2,1
   1db6c:	1000211e 	bne	r2,zero,1dbf4 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
   1db70:	00000f06 	br	1dbb0 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   1db74:	e0bff417 	ldw	r2,-48(fp)
   1db78:	d8800115 	stw	r2,4(sp)
   1db7c:	e0bff517 	ldw	r2,-44(fp)
   1db80:	d8800015 	stw	r2,0(sp)
   1db84:	880f883a 	mov	r7,r17
   1db88:	b00d883a 	mov	r6,r22
   1db8c:	e17ff617 	ldw	r5,-40(fp)
   1db90:	b809883a 	mov	r4,r23
   1db94:	001d9640 	call	1d964 <helper_plot_pixel>
			error = error + deltay;
   1db98:	e0bff717 	ldw	r2,-36(fp)
   1db9c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   1dba0:	0400020e 	bge	zero,r16,1dbac <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
   1dba4:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   1dba8:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   1dbac:	8c400044 	addi	r17,r17,1
   1dbb0:	947ff00e 	bge	r18,r17,1db74 <__alt_data_end+0xf001db74>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   1dbb4:	00001006 	br	1dbf8 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   1dbb8:	e0bff417 	ldw	r2,-48(fp)
   1dbbc:	d8800115 	stw	r2,4(sp)
   1dbc0:	e0bff517 	ldw	r2,-44(fp)
   1dbc4:	d8800015 	stw	r2,0(sp)
   1dbc8:	b00f883a 	mov	r7,r22
   1dbcc:	880d883a 	mov	r6,r17
   1dbd0:	e17ff617 	ldw	r5,-40(fp)
   1dbd4:	b809883a 	mov	r4,r23
   1dbd8:	001d9640 	call	1d964 <helper_plot_pixel>
			error = error + deltay;
   1dbdc:	e0bff717 	ldw	r2,-36(fp)
   1dbe0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   1dbe4:	0400020e 	bge	zero,r16,1dbf0 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
   1dbe8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   1dbec:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   1dbf0:	8c400044 	addi	r17,r17,1
   1dbf4:	947ff00e 	bge	r18,r17,1dbb8 <__alt_data_end+0xf001dbb8>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   1dbf8:	0001883a 	nop
   1dbfc:	e6fff804 	addi	sp,fp,-32
   1dc00:	dfc00917 	ldw	ra,36(sp)
   1dc04:	df000817 	ldw	fp,32(sp)
   1dc08:	ddc00717 	ldw	r23,28(sp)
   1dc0c:	dd800617 	ldw	r22,24(sp)
   1dc10:	dd400517 	ldw	r21,20(sp)
   1dc14:	dd000417 	ldw	r20,16(sp)
   1dc18:	dcc00317 	ldw	r19,12(sp)
   1dc1c:	dc800217 	ldw	r18,8(sp)
   1dc20:	dc400117 	ldw	r17,4(sp)
   1dc24:	dc000017 	ldw	r16,0(sp)
   1dc28:	dec00a04 	addi	sp,sp,40
   1dc2c:	f800283a 	ret

0001dc30 <get_multi_byte_make_code_index>:
	STATE_DONE 
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
   1dc30:	defffd04 	addi	sp,sp,-12
   1dc34:	df000215 	stw	fp,8(sp)
   1dc38:	df000204 	addi	fp,sp,8
   1dc3c:	2005883a 	mov	r2,r4
   1dc40:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1dc44:	e03ffe15 	stw	zero,-8(fp)
   1dc48:	00000d06 	br	1dc80 <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
   1dc4c:	00820034 	movhi	r2,2048
   1dc50:	108af104 	addi	r2,r2,11204
   1dc54:	e0fffe17 	ldw	r3,-8(fp)
   1dc58:	10c5883a 	add	r2,r2,r3
   1dc5c:	10800003 	ldbu	r2,0(r2)
   1dc60:	10c03fcc 	andi	r3,r2,255
   1dc64:	e0bfff03 	ldbu	r2,-4(fp)
   1dc68:	1880021e 	bne	r3,r2,1dc74 <get_multi_byte_make_code_index+0x44>
			return i;
   1dc6c:	e0bffe17 	ldw	r2,-8(fp)
   1dc70:	00000706 	br	1dc90 <get_multi_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1dc74:	e0bffe17 	ldw	r2,-8(fp)
   1dc78:	10800044 	addi	r2,r2,1
   1dc7c:	e0bffe15 	stw	r2,-8(fp)
   1dc80:	e0bffe17 	ldw	r2,-8(fp)
   1dc84:	108019b0 	cmpltui	r2,r2,102
   1dc88:	103ff01e 	bne	r2,zero,1dc4c <__alt_data_end+0xf001dc4c>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1dc8c:	00801984 	movi	r2,102
}
   1dc90:	e037883a 	mov	sp,fp
   1dc94:	df000017 	ldw	fp,0(sp)
   1dc98:	dec00104 	addi	sp,sp,4
   1dc9c:	f800283a 	ret

0001dca0 <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
   1dca0:	defffd04 	addi	sp,sp,-12
   1dca4:	df000215 	stw	fp,8(sp)
   1dca8:	df000204 	addi	fp,sp,8
   1dcac:	2005883a 	mov	r2,r4
   1dcb0:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1dcb4:	e03ffe15 	stw	zero,-8(fp)
   1dcb8:	00000d06 	br	1dcf0 <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
   1dcbc:	00820034 	movhi	r2,2048
   1dcc0:	108ad784 	addi	r2,r2,11102
   1dcc4:	e0fffe17 	ldw	r3,-8(fp)
   1dcc8:	10c5883a 	add	r2,r2,r3
   1dccc:	10800003 	ldbu	r2,0(r2)
   1dcd0:	10c03fcc 	andi	r3,r2,255
   1dcd4:	e0bfff03 	ldbu	r2,-4(fp)
   1dcd8:	1880021e 	bne	r3,r2,1dce4 <get_single_byte_make_code_index+0x44>
			return i;
   1dcdc:	e0bffe17 	ldw	r2,-8(fp)
   1dce0:	00000706 	br	1dd00 <get_single_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1dce4:	e0bffe17 	ldw	r2,-8(fp)
   1dce8:	10800044 	addi	r2,r2,1
   1dcec:	e0bffe15 	stw	r2,-8(fp)
   1dcf0:	e0bffe17 	ldw	r2,-8(fp)
   1dcf4:	108019b0 	cmpltui	r2,r2,102
   1dcf8:	103ff01e 	bne	r2,zero,1dcbc <__alt_data_end+0xf001dcbc>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1dcfc:	00801984 	movi	r2,102
}
   1dd00:	e037883a 	mov	sp,fp
   1dd04:	df000017 	ldw	fp,0(sp)
   1dd08:	dec00104 	addi	sp,sp,4
   1dd0c:	f800283a 	ret

0001dd10 <get_next_state>:
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte, 
		KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1dd10:	defff804 	addi	sp,sp,-32
   1dd14:	dfc00715 	stw	ra,28(sp)
   1dd18:	df000615 	stw	fp,24(sp)
   1dd1c:	df000604 	addi	fp,sp,24
   1dd20:	e13ffc15 	stw	r4,-16(fp)
   1dd24:	2805883a 	mov	r2,r5
   1dd28:	e1bffe15 	stw	r6,-8(fp)
   1dd2c:	e1ffff15 	stw	r7,-4(fp)
   1dd30:	e0bffd05 	stb	r2,-12(fp)
	DECODE_STATE next_state = STATE_INIT;
   1dd34:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
   1dd38:	00801984 	movi	r2,102
   1dd3c:	e0bffb15 	stw	r2,-20(fp)
	*ascii = 0;
   1dd40:	e0800217 	ldw	r2,8(fp)
   1dd44:	10000005 	stb	zero,0(r2)
	switch (state)
   1dd48:	e0bffc17 	ldw	r2,-16(fp)
   1dd4c:	10c00060 	cmpeqi	r3,r2,1
   1dd50:	1800391e 	bne	r3,zero,1de38 <get_next_state+0x128>
   1dd54:	0080052e 	bgeu	zero,r2,1dd6c <get_next_state+0x5c>
   1dd58:	10c000a0 	cmpeqi	r3,r2,2
   1dd5c:	18004b1e 	bne	r3,zero,1de8c <get_next_state+0x17c>
   1dd60:	108000e0 	cmpeqi	r2,r2,3
   1dd64:	10005e1e 	bne	r2,zero,1dee0 <get_next_state+0x1d0>
   1dd68:	00007206 	br	1df34 <get_next_state+0x224>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
   1dd6c:	e0bffd03 	ldbu	r2,-12(fp)
   1dd70:	10803818 	cmpnei	r2,r2,224
   1dd74:	1000031e 	bne	r2,zero,1dd84 <get_next_state+0x74>
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
   1dd78:	00800044 	movi	r2,1
   1dd7c:	e0bffa15 	stw	r2,-24(fp)
					*decode_mode = KB_BINARY_MAKE_CODE;
					*buf = byte;
				}
				next_state = STATE_DONE;
			}
			break;
   1dd80:	00007006 	br	1df44 <get_next_state+0x234>
			if ( byte == 0xE0 )
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
			}
			else if (byte == 0xF0)
   1dd84:	e0bffd03 	ldbu	r2,-12(fp)
   1dd88:	10803c18 	cmpnei	r2,r2,240
   1dd8c:	1000031e 	bne	r2,zero,1dd9c <get_next_state+0x8c>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
   1dd90:	00800084 	movi	r2,2
   1dd94:	e0bffa15 	stw	r2,-24(fp)
					*decode_mode = KB_BINARY_MAKE_CODE;
					*buf = byte;
				}
				next_state = STATE_DONE;
			}
			break;
   1dd98:	00006a06 	br	1df44 <get_next_state+0x234>
				next_state = STATE_BREAK_CODE;
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
   1dd9c:	e0bffd03 	ldbu	r2,-12(fp)
   1dda0:	1009883a 	mov	r4,r2
   1dda4:	001dca00 	call	1dca0 <get_single_byte_make_code_index>
   1dda8:	e0bffb15 	stw	r2,-20(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
   1ddac:	e0bffb17 	ldw	r2,-20(fp)
   1ddb0:	10800a30 	cmpltui	r2,r2,40
   1ddb4:	1000061e 	bne	r2,zero,1ddd0 <get_next_state+0xc0>
   1ddb8:	e0bffb17 	ldw	r2,-20(fp)
   1ddbc:	10801120 	cmpeqi	r2,r2,68
   1ddc0:	1000031e 	bne	r2,zero,1ddd0 <get_next_state+0xc0>
   1ddc4:	e0bffb17 	ldw	r2,-20(fp)
   1ddc8:	10801430 	cmpltui	r2,r2,80
   1ddcc:	1000111e 	bne	r2,zero,1de14 <get_next_state+0x104>
   1ddd0:	e0bffb17 	ldw	r2,-20(fp)
   1ddd4:	108019a0 	cmpeqi	r2,r2,102
   1ddd8:	10000e1e 	bne	r2,zero,1de14 <get_next_state+0x104>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
   1dddc:	e0bffe17 	ldw	r2,-8(fp)
   1dde0:	00c00044 	movi	r3,1
   1dde4:	10c00015 	stw	r3,0(r2)
					*ascii = ascii_codes[idx];
   1dde8:	00820034 	movhi	r2,2048
   1ddec:	108abe04 	addi	r2,r2,11000
   1ddf0:	e0fffb17 	ldw	r3,-20(fp)
   1ddf4:	10c5883a 	add	r2,r2,r3
   1ddf8:	10c00003 	ldbu	r3,0(r2)
   1ddfc:	e0800217 	ldw	r2,8(fp)
   1de00:	10c00005 	stb	r3,0(r2)
					*buf = byte;
   1de04:	e0bfff17 	ldw	r2,-4(fp)
   1de08:	e0fffd03 	ldbu	r3,-12(fp)
   1de0c:	10c00005 	stb	r3,0(r2)
   1de10:	00000606 	br	1de2c <get_next_state+0x11c>
				}
				else 
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
   1de14:	e0bffe17 	ldw	r2,-8(fp)
   1de18:	00c00084 	movi	r3,2
   1de1c:	10c00015 	stw	r3,0(r2)
					*buf = byte;
   1de20:	e0bfff17 	ldw	r2,-4(fp)
   1de24:	e0fffd03 	ldbu	r3,-12(fp)
   1de28:	10c00005 	stb	r3,0(r2)
				}
				next_state = STATE_DONE;
   1de2c:	00800104 	movi	r2,4
   1de30:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1de34:	00004306 	br	1df44 <get_next_state+0x234>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
   1de38:	e0bffd03 	ldbu	r2,-12(fp)
   1de3c:	10803c20 	cmpeqi	r2,r2,240
   1de40:	10000c1e 	bne	r2,zero,1de74 <get_next_state+0x164>
   1de44:	e0bffd03 	ldbu	r2,-12(fp)
   1de48:	10803820 	cmpeqi	r2,r2,224
   1de4c:	1000091e 	bne	r2,zero,1de74 <get_next_state+0x164>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
   1de50:	e0bffe17 	ldw	r2,-8(fp)
   1de54:	00c000c4 	movi	r3,3
   1de58:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1de5c:	e0bfff17 	ldw	r2,-4(fp)
   1de60:	e0fffd03 	ldbu	r3,-12(fp)
   1de64:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1de68:	00800104 	movi	r2,4
   1de6c:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
   1de70:	00003406 	br	1df44 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
   1de74:	e0bffe17 	ldw	r2,-8(fp)
   1de78:	00c00104 	movi	r3,4
   1de7c:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
   1de80:	008000c4 	movi	r2,3
   1de84:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1de88:	00002e06 	br	1df44 <get_next_state+0x234>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1de8c:	e0bffd03 	ldbu	r2,-12(fp)
   1de90:	10803c20 	cmpeqi	r2,r2,240
   1de94:	10000c1e 	bne	r2,zero,1dec8 <get_next_state+0x1b8>
   1de98:	e0bffd03 	ldbu	r2,-12(fp)
   1de9c:	10803820 	cmpeqi	r2,r2,224
   1dea0:	1000091e 	bne	r2,zero,1dec8 <get_next_state+0x1b8>
			{
				*decode_mode = KB_BREAK_CODE;
   1dea4:	e0bffe17 	ldw	r2,-8(fp)
   1dea8:	00c00104 	movi	r3,4
   1deac:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1deb0:	e0bfff17 	ldw	r2,-4(fp)
   1deb4:	e0fffd03 	ldbu	r3,-12(fp)
   1deb8:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1debc:	00800104 	movi	r2,4
   1dec0:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
   1dec4:	00001f06 	br	1df44 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
   1dec8:	00800084 	movi	r2,2
   1decc:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
   1ded0:	e0bffe17 	ldw	r2,-8(fp)
   1ded4:	00c00104 	movi	r3,4
   1ded8:	10c00015 	stw	r3,0(r2)
			}
			break;
   1dedc:	00001906 	br	1df44 <get_next_state+0x234>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1dee0:	e0bffd03 	ldbu	r2,-12(fp)
   1dee4:	10803c20 	cmpeqi	r2,r2,240
   1dee8:	10000c1e 	bne	r2,zero,1df1c <get_next_state+0x20c>
   1deec:	e0bffd03 	ldbu	r2,-12(fp)
   1def0:	10803820 	cmpeqi	r2,r2,224
   1def4:	1000091e 	bne	r2,zero,1df1c <get_next_state+0x20c>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
   1def8:	e0bffe17 	ldw	r2,-8(fp)
   1defc:	00c00144 	movi	r3,5
   1df00:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1df04:	e0bfff17 	ldw	r2,-4(fp)
   1df08:	e0fffd03 	ldbu	r3,-12(fp)
   1df0c:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1df10:	00800104 	movi	r2,4
   1df14:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
				*decode_mode = KB_LONG_BREAK_CODE;
			}
			break;
   1df18:	00000a06 	br	1df44 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
   1df1c:	008000c4 	movi	r2,3
   1df20:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
   1df24:	e0bffe17 	ldw	r2,-8(fp)
   1df28:	00c00144 	movi	r3,5
   1df2c:	10c00015 	stw	r3,0(r2)
			}
			break;
   1df30:	00000406 	br	1df44 <get_next_state+0x234>
		default:
			*decode_mode = KB_INVALID_CODE;
   1df34:	e0bffe17 	ldw	r2,-8(fp)
   1df38:	00c00184 	movi	r3,6
   1df3c:	10c00015 	stw	r3,0(r2)
			next_state = STATE_INIT;
   1df40:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
   1df44:	e0bffa17 	ldw	r2,-24(fp)
}
   1df48:	e037883a 	mov	sp,fp
   1df4c:	dfc00117 	ldw	ra,4(sp)
   1df50:	df000017 	ldw	fp,0(sp)
   1df54:	dec00204 	addi	sp,sp,8
   1df58:	f800283a 	ret

0001df5c <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1df5c:	defff704 	addi	sp,sp,-36
   1df60:	dfc00815 	stw	ra,32(sp)
   1df64:	df000715 	stw	fp,28(sp)
   1df68:	df000704 	addi	fp,sp,28
   1df6c:	e13ffc15 	stw	r4,-16(fp)
   1df70:	e17ffd15 	stw	r5,-12(fp)
   1df74:	e1bffe15 	stw	r6,-8(fp)
   1df78:	e1ffff15 	stw	r7,-4(fp)
	alt_u8 byte = 0;
   1df7c:	e03ffb05 	stb	zero,-20(fp)
	int status_read =0;
   1df80:	e03ffa15 	stw	zero,-24(fp)
	*decode_mode = KB_INVALID_CODE;
   1df84:	e0bffd17 	ldw	r2,-12(fp)
   1df88:	00c00184 	movi	r3,6
   1df8c:	10c00015 	stw	r3,0(r2)
	static DECODE_STATE state = STATE_INIT;
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
   1df90:	e0bffb04 	addi	r2,fp,-20
   1df94:	100b883a 	mov	r5,r2
   1df98:	e13ffc17 	ldw	r4,-16(fp)
   1df9c:	001c8740 	call	1c874 <alt_up_ps2_read_data_byte>
   1dfa0:	e0bffa15 	stw	r2,-24(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost 

		if (status_read != 0) {
   1dfa4:	e0bffa17 	ldw	r2,-24(fp)
   1dfa8:	10000626 	beq	r2,zero,1dfc4 <decode_scancode+0x68>
			if (state == STATE_INIT)
   1dfac:	d0a05897 	ldw	r2,-32414(gp)
   1dfb0:	1000021e 	bne	r2,zero,1dfbc <decode_scancode+0x60>
				return status_read;
   1dfb4:	e0bffa17 	ldw	r2,-24(fp)
   1dfb8:	00001206 	br	1e004 <decode_scancode+0xa8>
			else
				return -2;
   1dfbc:	00bfff84 	movi	r2,-2
   1dfc0:	00001006 	br	1e004 <decode_scancode+0xa8>
		}

		state = get_next_state(state, byte, decode_mode, buf, ascii);
   1dfc4:	d0e05897 	ldw	r3,-32414(gp)
   1dfc8:	e0bffb03 	ldbu	r2,-20(fp)
   1dfcc:	11003fcc 	andi	r4,r2,255
   1dfd0:	e0bfff17 	ldw	r2,-4(fp)
   1dfd4:	d8800015 	stw	r2,0(sp)
   1dfd8:	e1fffe17 	ldw	r7,-8(fp)
   1dfdc:	e1bffd17 	ldw	r6,-12(fp)
   1dfe0:	200b883a 	mov	r5,r4
   1dfe4:	1809883a 	mov	r4,r3
   1dfe8:	001dd100 	call	1dd10 <get_next_state>
   1dfec:	d0a05895 	stw	r2,-32414(gp)
	} while ( state != STATE_DONE );
   1dff0:	d0a05897 	ldw	r2,-32414(gp)
   1dff4:	10800118 	cmpnei	r2,r2,4
   1dff8:	103fe51e 	bne	r2,zero,1df90 <__alt_data_end+0xf001df90>

	state = STATE_INIT;
   1dffc:	d0205895 	stw	zero,-32414(gp)

	return 0;
   1e000:	0005883a 	mov	r2,zero
}
   1e004:	e037883a 	mov	sp,fp
   1e008:	dfc00117 	ldw	ra,4(sp)
   1e00c:	df000017 	ldw	fp,0(sp)
   1e010:	dec00204 	addi	sp,sp,8
   1e014:	f800283a 	ret

0001e018 <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
   1e018:	defffb04 	addi	sp,sp,-20
   1e01c:	dfc00415 	stw	ra,16(sp)
   1e020:	df000315 	stw	fp,12(sp)
   1e024:	df000304 	addi	fp,sp,12
   1e028:	e13ffe15 	stw	r4,-8(fp)
   1e02c:	2805883a 	mov	r2,r5
   1e030:	e0bfff05 	stb	r2,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0xF3);
   1e034:	01403cc4 	movi	r5,243
   1e038:	e13ffe17 	ldw	r4,-8(fp)
   1e03c:	001c7740 	call	1c774 <alt_up_ps2_write_data_byte_with_ack>
   1e040:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
   1e044:	e0bffd17 	ldw	r2,-12(fp)
   1e048:	1000061e 	bne	r2,zero,1e064 <set_keyboard_rate+0x4c>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
   1e04c:	e0bfff03 	ldbu	r2,-4(fp)
   1e050:	108007cc 	andi	r2,r2,31
   1e054:	100b883a 	mov	r5,r2
   1e058:	e13ffe17 	ldw	r4,-8(fp)
   1e05c:	001c7740 	call	1c774 <alt_up_ps2_write_data_byte_with_ack>
   1e060:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
   1e064:	e0bffd17 	ldw	r2,-12(fp)
}
   1e068:	e037883a 	mov	sp,fp
   1e06c:	dfc00117 	ldw	ra,4(sp)
   1e070:	df000017 	ldw	fp,0(sp)
   1e074:	dec00204 	addi	sp,sp,8
   1e078:	f800283a 	ret

0001e07c <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
   1e07c:	defffa04 	addi	sp,sp,-24
   1e080:	dfc00515 	stw	ra,20(sp)
   1e084:	df000415 	stw	fp,16(sp)
   1e088:	df000404 	addi	fp,sp,16
   1e08c:	e13ffd15 	stw	r4,-12(fp)
   1e090:	2805883a 	mov	r2,r5
   1e094:	e1bfff15 	stw	r6,-4(fp)
   1e098:	e0bffe05 	stb	r2,-8(fp)
	unsigned idx;
	switch (decode_mode)
   1e09c:	e0bffd17 	ldw	r2,-12(fp)
   1e0a0:	10c000a0 	cmpeqi	r3,r2,2
   1e0a4:	1800131e 	bne	r3,zero,1e0f4 <translate_make_code+0x78>
   1e0a8:	10c000e0 	cmpeqi	r3,r2,3
   1e0ac:	1800201e 	bne	r3,zero,1e130 <translate_make_code+0xb4>
   1e0b0:	10800060 	cmpeqi	r2,r2,1
   1e0b4:	10002d26 	beq	r2,zero,1e16c <translate_make_code+0xf0>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1e0b8:	e0bffe03 	ldbu	r2,-8(fp)
   1e0bc:	1009883a 	mov	r4,r2
   1e0c0:	001dca00 	call	1dca0 <get_single_byte_make_code_index>
   1e0c4:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1e0c8:	00820034 	movhi	r2,2048
   1e0cc:	108a5804 	addi	r2,r2,10592
   1e0d0:	e0fffc17 	ldw	r3,-16(fp)
   1e0d4:	18c7883a 	add	r3,r3,r3
   1e0d8:	18c7883a 	add	r3,r3,r3
   1e0dc:	10c5883a 	add	r2,r2,r3
   1e0e0:	10800017 	ldw	r2,0(r2)
   1e0e4:	100b883a 	mov	r5,r2
   1e0e8:	e13fff17 	ldw	r4,-4(fp)
   1e0ec:	001f8040 	call	1f804 <strcpy>
			break;
   1e0f0:	00002206 	br	1e17c <translate_make_code+0x100>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1e0f4:	e0bffe03 	ldbu	r2,-8(fp)
   1e0f8:	1009883a 	mov	r4,r2
   1e0fc:	001dca00 	call	1dca0 <get_single_byte_make_code_index>
   1e100:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1e104:	00820034 	movhi	r2,2048
   1e108:	108a5804 	addi	r2,r2,10592
   1e10c:	e0fffc17 	ldw	r3,-16(fp)
   1e110:	18c7883a 	add	r3,r3,r3
   1e114:	18c7883a 	add	r3,r3,r3
   1e118:	10c5883a 	add	r2,r2,r3
   1e11c:	10800017 	ldw	r2,0(r2)
   1e120:	100b883a 	mov	r5,r2
   1e124:	e13fff17 	ldw	r4,-4(fp)
   1e128:	001f8040 	call	1f804 <strcpy>
			break;
   1e12c:	00001306 	br	1e17c <translate_make_code+0x100>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
   1e130:	e0bffe03 	ldbu	r2,-8(fp)
   1e134:	1009883a 	mov	r4,r2
   1e138:	001dc300 	call	1dc30 <get_multi_byte_make_code_index>
   1e13c:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1e140:	00820034 	movhi	r2,2048
   1e144:	108a5804 	addi	r2,r2,10592
   1e148:	e0fffc17 	ldw	r3,-16(fp)
   1e14c:	18c7883a 	add	r3,r3,r3
   1e150:	18c7883a 	add	r3,r3,r3
   1e154:	10c5883a 	add	r2,r2,r3
   1e158:	10800017 	ldw	r2,0(r2)
   1e15c:	100b883a 	mov	r5,r2
   1e160:	e13fff17 	ldw	r4,-4(fp)
   1e164:	001f8040 	call	1f804 <strcpy>
			break;
   1e168:	00000406 	br	1e17c <translate_make_code+0x100>
		default:
			str = "";
   1e16c:	00820034 	movhi	r2,2048
   1e170:	10822704 	addi	r2,r2,2204
   1e174:	e0bfff15 	stw	r2,-4(fp)
			break;
   1e178:	0001883a 	nop
	}
}
   1e17c:	0001883a 	nop
   1e180:	e037883a 	mov	sp,fp
   1e184:	dfc00117 	ldw	ra,4(sp)
   1e188:	df000017 	ldw	fp,0(sp)
   1e18c:	dec00204 	addi	sp,sp,8
   1e190:	f800283a 	ret

0001e194 <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
   1e194:	defffb04 	addi	sp,sp,-20
   1e198:	dfc00415 	stw	ra,16(sp)
   1e19c:	df000315 	stw	fp,12(sp)
   1e1a0:	df000304 	addi	fp,sp,12
   1e1a4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff); 
   1e1a8:	01403fc4 	movi	r5,255
   1e1ac:	e13fff17 	ldw	r4,-4(fp)
   1e1b0:	001c7740 	call	1c774 <alt_up_ps2_write_data_byte_with_ack>
   1e1b4:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
   1e1b8:	e0bffd17 	ldw	r2,-12(fp)
   1e1bc:	10000d1e 	bne	r2,zero,1e1f4 <reset_keyboard+0x60>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
   1e1c0:	e0bffe04 	addi	r2,fp,-8
   1e1c4:	100b883a 	mov	r5,r2
   1e1c8:	e13fff17 	ldw	r4,-4(fp)
   1e1cc:	001c8740 	call	1c874 <alt_up_ps2_read_data_byte>
   1e1d0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1e1d4:	e0bffd17 	ldw	r2,-12(fp)
   1e1d8:	1000041e 	bne	r2,zero,1e1ec <reset_keyboard+0x58>
   1e1dc:	e0bffe03 	ldbu	r2,-8(fp)
   1e1e0:	10803fcc 	andi	r2,r2,255
   1e1e4:	10802a98 	cmpnei	r2,r2,170
   1e1e8:	10000226 	beq	r2,zero,1e1f4 <reset_keyboard+0x60>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
   1e1ec:	00bfffc4 	movi	r2,-1
   1e1f0:	e0bffd15 	stw	r2,-12(fp)
		}
	}	
	return status;
   1e1f4:	e0bffd17 	ldw	r2,-12(fp)
}
   1e1f8:	e037883a 	mov	sp,fp
   1e1fc:	dfc00117 	ldw	ra,4(sp)
   1e200:	df000017 	ldw	fp,0(sp)
   1e204:	dec00204 	addi	sp,sp,8
   1e208:	f800283a 	ret

0001e20c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1e20c:	defff504 	addi	sp,sp,-44
   1e210:	df000a15 	stw	fp,40(sp)
   1e214:	df000a04 	addi	fp,sp,40
   1e218:	e13ffc15 	stw	r4,-16(fp)
   1e21c:	e17ffd15 	stw	r5,-12(fp)
   1e220:	e1bffe15 	stw	r6,-8(fp)
   1e224:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1e228:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e22c:	d0a05997 	ldw	r2,-32410(gp)
  
  if (alt_ticks_per_second ())
   1e230:	10003c26 	beq	r2,zero,1e324 <alt_alarm_start+0x118>
  {
    if (alarm)
   1e234:	e0bffc17 	ldw	r2,-16(fp)
   1e238:	10003826 	beq	r2,zero,1e31c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1e23c:	e0bffc17 	ldw	r2,-16(fp)
   1e240:	e0fffe17 	ldw	r3,-8(fp)
   1e244:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1e248:	e0bffc17 	ldw	r2,-16(fp)
   1e24c:	e0ffff17 	ldw	r3,-4(fp)
   1e250:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e254:	0005303a 	rdctl	r2,status
   1e258:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e25c:	e0fff917 	ldw	r3,-28(fp)
   1e260:	00bfff84 	movi	r2,-2
   1e264:	1884703a 	and	r2,r3,r2
   1e268:	1001703a 	wrctl	status,r2
  
  return context;
   1e26c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1e270:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1e274:	d0a05a97 	ldw	r2,-32406(gp)
      
      current_nticks = alt_nticks();
   1e278:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1e27c:	e0fffd17 	ldw	r3,-12(fp)
   1e280:	e0bff617 	ldw	r2,-40(fp)
   1e284:	1885883a 	add	r2,r3,r2
   1e288:	10c00044 	addi	r3,r2,1
   1e28c:	e0bffc17 	ldw	r2,-16(fp)
   1e290:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1e294:	e0bffc17 	ldw	r2,-16(fp)
   1e298:	10c00217 	ldw	r3,8(r2)
   1e29c:	e0bff617 	ldw	r2,-40(fp)
   1e2a0:	1880042e 	bgeu	r3,r2,1e2b4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1e2a4:	e0bffc17 	ldw	r2,-16(fp)
   1e2a8:	00c00044 	movi	r3,1
   1e2ac:	10c00405 	stb	r3,16(r2)
   1e2b0:	00000206 	br	1e2bc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1e2b4:	e0bffc17 	ldw	r2,-16(fp)
   1e2b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1e2bc:	e0bffc17 	ldw	r2,-16(fp)
   1e2c0:	d0e01584 	addi	r3,gp,-32682
   1e2c4:	e0fffa15 	stw	r3,-24(fp)
   1e2c8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e2cc:	e0bffb17 	ldw	r2,-20(fp)
   1e2d0:	e0fffa17 	ldw	r3,-24(fp)
   1e2d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e2d8:	e0bffa17 	ldw	r2,-24(fp)
   1e2dc:	10c00017 	ldw	r3,0(r2)
   1e2e0:	e0bffb17 	ldw	r2,-20(fp)
   1e2e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e2e8:	e0bffa17 	ldw	r2,-24(fp)
   1e2ec:	10800017 	ldw	r2,0(r2)
   1e2f0:	e0fffb17 	ldw	r3,-20(fp)
   1e2f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e2f8:	e0bffa17 	ldw	r2,-24(fp)
   1e2fc:	e0fffb17 	ldw	r3,-20(fp)
   1e300:	10c00015 	stw	r3,0(r2)
   1e304:	e0bff817 	ldw	r2,-32(fp)
   1e308:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e30c:	e0bff717 	ldw	r2,-36(fp)
   1e310:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1e314:	0005883a 	mov	r2,zero
   1e318:	00000306 	br	1e328 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1e31c:	00bffa84 	movi	r2,-22
   1e320:	00000106 	br	1e328 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1e324:	00bfde84 	movi	r2,-134
  }
}
   1e328:	e037883a 	mov	sp,fp
   1e32c:	df000017 	ldw	fp,0(sp)
   1e330:	dec00104 	addi	sp,sp,4
   1e334:	f800283a 	ret

0001e338 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   1e338:	defffb04 	addi	sp,sp,-20
   1e33c:	df000415 	stw	fp,16(sp)
   1e340:	df000404 	addi	fp,sp,16
   1e344:	e13ffe15 	stw	r4,-8(fp)
   1e348:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
   1e34c:	e0fffe17 	ldw	r3,-8(fp)
   1e350:	e0bfff17 	ldw	r2,-4(fp)
   1e354:	1885883a 	add	r2,r3,r2
   1e358:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1e35c:	e0bffe17 	ldw	r2,-8(fp)
   1e360:	e0bffc15 	stw	r2,-16(fp)
   1e364:	00000506 	br	1e37c <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   1e368:	e0bffc17 	ldw	r2,-16(fp)
   1e36c:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1e370:	e0bffc17 	ldw	r2,-16(fp)
   1e374:	10800804 	addi	r2,r2,32
   1e378:	e0bffc15 	stw	r2,-16(fp)
   1e37c:	e0fffc17 	ldw	r3,-16(fp)
   1e380:	e0bffd17 	ldw	r2,-12(fp)
   1e384:	18bff836 	bltu	r3,r2,1e368 <__alt_data_end+0xf001e368>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   1e388:	e0bffe17 	ldw	r2,-8(fp)
   1e38c:	108007cc 	andi	r2,r2,31
   1e390:	10000226 	beq	r2,zero,1e39c <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   1e394:	e0bffc17 	ldw	r2,-16(fp)
   1e398:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1e39c:	0001883a 	nop
   1e3a0:	e037883a 	mov	sp,fp
   1e3a4:	df000017 	ldw	fp,0(sp)
   1e3a8:	dec00104 	addi	sp,sp,4
   1e3ac:	f800283a 	ret

0001e3b0 <alt_get_errno>:
   1e3b0:	defffe04 	addi	sp,sp,-8
   1e3b4:	dfc00115 	stw	ra,4(sp)
   1e3b8:	df000015 	stw	fp,0(sp)
   1e3bc:	d839883a 	mov	fp,sp
   1e3c0:	d0a00f97 	ldw	r2,-32706(gp)
   1e3c4:	10000326 	beq	r2,zero,1e3d4 <alt_get_errno+0x24>
   1e3c8:	d0a00f97 	ldw	r2,-32706(gp)
   1e3cc:	103ee83a 	callr	r2
   1e3d0:	00000106 	br	1e3d8 <alt_get_errno+0x28>
   1e3d4:	d0a05384 	addi	r2,gp,-32434
   1e3d8:	e037883a 	mov	sp,fp
   1e3dc:	dfc00117 	ldw	ra,4(sp)
   1e3e0:	df000017 	ldw	fp,0(sp)
   1e3e4:	dec00204 	addi	sp,sp,8
   1e3e8:	f800283a 	ret

0001e3ec <alt_dev_llist_insert>:
   1e3ec:	defffa04 	addi	sp,sp,-24
   1e3f0:	dfc00515 	stw	ra,20(sp)
   1e3f4:	df000415 	stw	fp,16(sp)
   1e3f8:	df000404 	addi	fp,sp,16
   1e3fc:	e13ffe15 	stw	r4,-8(fp)
   1e400:	e17fff15 	stw	r5,-4(fp)
   1e404:	e0bffe17 	ldw	r2,-8(fp)
   1e408:	10000326 	beq	r2,zero,1e418 <alt_dev_llist_insert+0x2c>
   1e40c:	e0bffe17 	ldw	r2,-8(fp)
   1e410:	10800217 	ldw	r2,8(r2)
   1e414:	1000061e 	bne	r2,zero,1e430 <alt_dev_llist_insert+0x44>
   1e418:	001e3b00 	call	1e3b0 <alt_get_errno>
   1e41c:	1007883a 	mov	r3,r2
   1e420:	00800584 	movi	r2,22
   1e424:	18800015 	stw	r2,0(r3)
   1e428:	00bffa84 	movi	r2,-22
   1e42c:	00001306 	br	1e47c <alt_dev_llist_insert+0x90>
   1e430:	e0bffe17 	ldw	r2,-8(fp)
   1e434:	e0ffff17 	ldw	r3,-4(fp)
   1e438:	e0fffc15 	stw	r3,-16(fp)
   1e43c:	e0bffd15 	stw	r2,-12(fp)
   1e440:	e0bffd17 	ldw	r2,-12(fp)
   1e444:	e0fffc17 	ldw	r3,-16(fp)
   1e448:	10c00115 	stw	r3,4(r2)
   1e44c:	e0bffc17 	ldw	r2,-16(fp)
   1e450:	10c00017 	ldw	r3,0(r2)
   1e454:	e0bffd17 	ldw	r2,-12(fp)
   1e458:	10c00015 	stw	r3,0(r2)
   1e45c:	e0bffc17 	ldw	r2,-16(fp)
   1e460:	10800017 	ldw	r2,0(r2)
   1e464:	e0fffd17 	ldw	r3,-12(fp)
   1e468:	10c00115 	stw	r3,4(r2)
   1e46c:	e0bffc17 	ldw	r2,-16(fp)
   1e470:	e0fffd17 	ldw	r3,-12(fp)
   1e474:	10c00015 	stw	r3,0(r2)
   1e478:	0005883a 	mov	r2,zero
   1e47c:	e037883a 	mov	sp,fp
   1e480:	dfc00117 	ldw	ra,4(sp)
   1e484:	df000017 	ldw	fp,0(sp)
   1e488:	dec00204 	addi	sp,sp,8
   1e48c:	f800283a 	ret

0001e490 <_do_ctors>:
   1e490:	defffd04 	addi	sp,sp,-12
   1e494:	dfc00215 	stw	ra,8(sp)
   1e498:	df000115 	stw	fp,4(sp)
   1e49c:	df000104 	addi	fp,sp,4
   1e4a0:	008000b4 	movhi	r2,2
   1e4a4:	10bed704 	addi	r2,r2,-1188
   1e4a8:	e0bfff15 	stw	r2,-4(fp)
   1e4ac:	00000606 	br	1e4c8 <_do_ctors+0x38>
   1e4b0:	e0bfff17 	ldw	r2,-4(fp)
   1e4b4:	10800017 	ldw	r2,0(r2)
   1e4b8:	103ee83a 	callr	r2
   1e4bc:	e0bfff17 	ldw	r2,-4(fp)
   1e4c0:	10bfff04 	addi	r2,r2,-4
   1e4c4:	e0bfff15 	stw	r2,-4(fp)
   1e4c8:	e0ffff17 	ldw	r3,-4(fp)
   1e4cc:	008000b4 	movhi	r2,2
   1e4d0:	10bed804 	addi	r2,r2,-1184
   1e4d4:	18bff62e 	bgeu	r3,r2,1e4b0 <__alt_data_end+0xf001e4b0>
   1e4d8:	0001883a 	nop
   1e4dc:	e037883a 	mov	sp,fp
   1e4e0:	dfc00117 	ldw	ra,4(sp)
   1e4e4:	df000017 	ldw	fp,0(sp)
   1e4e8:	dec00204 	addi	sp,sp,8
   1e4ec:	f800283a 	ret

0001e4f0 <_do_dtors>:
   1e4f0:	defffd04 	addi	sp,sp,-12
   1e4f4:	dfc00215 	stw	ra,8(sp)
   1e4f8:	df000115 	stw	fp,4(sp)
   1e4fc:	df000104 	addi	fp,sp,4
   1e500:	008000b4 	movhi	r2,2
   1e504:	10bed704 	addi	r2,r2,-1188
   1e508:	e0bfff15 	stw	r2,-4(fp)
   1e50c:	00000606 	br	1e528 <_do_dtors+0x38>
   1e510:	e0bfff17 	ldw	r2,-4(fp)
   1e514:	10800017 	ldw	r2,0(r2)
   1e518:	103ee83a 	callr	r2
   1e51c:	e0bfff17 	ldw	r2,-4(fp)
   1e520:	10bfff04 	addi	r2,r2,-4
   1e524:	e0bfff15 	stw	r2,-4(fp)
   1e528:	e0ffff17 	ldw	r3,-4(fp)
   1e52c:	008000b4 	movhi	r2,2
   1e530:	10bed804 	addi	r2,r2,-1184
   1e534:	18bff62e 	bgeu	r3,r2,1e510 <__alt_data_end+0xf001e510>
   1e538:	0001883a 	nop
   1e53c:	e037883a 	mov	sp,fp
   1e540:	dfc00117 	ldw	ra,4(sp)
   1e544:	df000017 	ldw	fp,0(sp)
   1e548:	dec00204 	addi	sp,sp,8
   1e54c:	f800283a 	ret

0001e550 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1e550:	defffa04 	addi	sp,sp,-24
   1e554:	dfc00515 	stw	ra,20(sp)
   1e558:	df000415 	stw	fp,16(sp)
   1e55c:	df000404 	addi	fp,sp,16
   1e560:	e13ffe15 	stw	r4,-8(fp)
   1e564:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1e568:	e0bfff17 	ldw	r2,-4(fp)
   1e56c:	10800017 	ldw	r2,0(r2)
   1e570:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1e574:	e13ffe17 	ldw	r4,-8(fp)
   1e578:	00099f00 	call	99f0 <strlen>
   1e57c:	10800044 	addi	r2,r2,1
   1e580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e584:	00000d06 	br	1e5bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1e588:	e0bffc17 	ldw	r2,-16(fp)
   1e58c:	10800217 	ldw	r2,8(r2)
   1e590:	e0fffd17 	ldw	r3,-12(fp)
   1e594:	180d883a 	mov	r6,r3
   1e598:	e17ffe17 	ldw	r5,-8(fp)
   1e59c:	1009883a 	mov	r4,r2
   1e5a0:	00095000 	call	9500 <memcmp>
   1e5a4:	1000021e 	bne	r2,zero,1e5b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1e5a8:	e0bffc17 	ldw	r2,-16(fp)
   1e5ac:	00000706 	br	1e5cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1e5b0:	e0bffc17 	ldw	r2,-16(fp)
   1e5b4:	10800017 	ldw	r2,0(r2)
   1e5b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e5bc:	e0fffc17 	ldw	r3,-16(fp)
   1e5c0:	e0bfff17 	ldw	r2,-4(fp)
   1e5c4:	18bff01e 	bne	r3,r2,1e588 <__alt_data_end+0xf001e588>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1e5c8:	0005883a 	mov	r2,zero
}
   1e5cc:	e037883a 	mov	sp,fp
   1e5d0:	dfc00117 	ldw	ra,4(sp)
   1e5d4:	df000017 	ldw	fp,0(sp)
   1e5d8:	dec00204 	addi	sp,sp,8
   1e5dc:	f800283a 	ret

0001e5e0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   1e5e0:	defffc04 	addi	sp,sp,-16
   1e5e4:	dfc00315 	stw	ra,12(sp)
   1e5e8:	df000215 	stw	fp,8(sp)
   1e5ec:	df000204 	addi	fp,sp,8
   1e5f0:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   1e5f4:	d1601384 	addi	r5,gp,-32690
   1e5f8:	e13fff17 	ldw	r4,-4(fp)
   1e5fc:	001e5500 	call	1e550 <alt_find_dev>
   1e600:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   1e604:	e0bffe17 	ldw	r2,-8(fp)
   1e608:	10000926 	beq	r2,zero,1e630 <alt_flash_open_dev+0x50>
   1e60c:	e0bffe17 	ldw	r2,-8(fp)
   1e610:	10800317 	ldw	r2,12(r2)
   1e614:	10000626 	beq	r2,zero,1e630 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   1e618:	e0bffe17 	ldw	r2,-8(fp)
   1e61c:	10800317 	ldw	r2,12(r2)
   1e620:	e17fff17 	ldw	r5,-4(fp)
   1e624:	e13ffe17 	ldw	r4,-8(fp)
   1e628:	103ee83a 	callr	r2
   1e62c:	00000106 	br	1e634 <alt_flash_open_dev+0x54>
  }

  return dev;
   1e630:	e0bffe17 	ldw	r2,-8(fp)
}
   1e634:	e037883a 	mov	sp,fp
   1e638:	dfc00117 	ldw	ra,4(sp)
   1e63c:	df000017 	ldw	fp,0(sp)
   1e640:	dec00204 	addi	sp,sp,8
   1e644:	f800283a 	ret

0001e648 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   1e648:	defffd04 	addi	sp,sp,-12
   1e64c:	dfc00215 	stw	ra,8(sp)
   1e650:	df000115 	stw	fp,4(sp)
   1e654:	df000104 	addi	fp,sp,4
   1e658:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   1e65c:	e0bfff17 	ldw	r2,-4(fp)
   1e660:	10000826 	beq	r2,zero,1e684 <alt_flash_close_dev+0x3c>
   1e664:	e0bfff17 	ldw	r2,-4(fp)
   1e668:	10800417 	ldw	r2,16(r2)
   1e66c:	10000526 	beq	r2,zero,1e684 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   1e670:	e0bfff17 	ldw	r2,-4(fp)
   1e674:	10800417 	ldw	r2,16(r2)
   1e678:	e13fff17 	ldw	r4,-4(fp)
   1e67c:	103ee83a 	callr	r2
  }
  return;
   1e680:	0001883a 	nop
   1e684:	0001883a 	nop
}
   1e688:	e037883a 	mov	sp,fp
   1e68c:	dfc00117 	ldw	ra,4(sp)
   1e690:	df000017 	ldw	fp,0(sp)
   1e694:	dec00204 	addi	sp,sp,8
   1e698:	f800283a 	ret

0001e69c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1e69c:	defff904 	addi	sp,sp,-28
   1e6a0:	dfc00615 	stw	ra,24(sp)
   1e6a4:	df000515 	stw	fp,20(sp)
   1e6a8:	df000504 	addi	fp,sp,20
   1e6ac:	e13ffc15 	stw	r4,-16(fp)
   1e6b0:	e17ffd15 	stw	r5,-12(fp)
   1e6b4:	e1bffe15 	stw	r6,-8(fp)
   1e6b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1e6bc:	e1bfff17 	ldw	r6,-4(fp)
   1e6c0:	e17ffe17 	ldw	r5,-8(fp)
   1e6c4:	e13ffd17 	ldw	r4,-12(fp)
   1e6c8:	001e8dc0 	call	1e8dc <open>
   1e6cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1e6d0:	e0bffb17 	ldw	r2,-20(fp)
   1e6d4:	10001c16 	blt	r2,zero,1e748 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1e6d8:	00820034 	movhi	r2,2048
   1e6dc:	1084fb04 	addi	r2,r2,5100
   1e6e0:	e0fffb17 	ldw	r3,-20(fp)
   1e6e4:	18c00324 	muli	r3,r3,12
   1e6e8:	10c5883a 	add	r2,r2,r3
   1e6ec:	10c00017 	ldw	r3,0(r2)
   1e6f0:	e0bffc17 	ldw	r2,-16(fp)
   1e6f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1e6f8:	00820034 	movhi	r2,2048
   1e6fc:	1084fb04 	addi	r2,r2,5100
   1e700:	e0fffb17 	ldw	r3,-20(fp)
   1e704:	18c00324 	muli	r3,r3,12
   1e708:	10c5883a 	add	r2,r2,r3
   1e70c:	10800104 	addi	r2,r2,4
   1e710:	10c00017 	ldw	r3,0(r2)
   1e714:	e0bffc17 	ldw	r2,-16(fp)
   1e718:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1e71c:	00820034 	movhi	r2,2048
   1e720:	1084fb04 	addi	r2,r2,5100
   1e724:	e0fffb17 	ldw	r3,-20(fp)
   1e728:	18c00324 	muli	r3,r3,12
   1e72c:	10c5883a 	add	r2,r2,r3
   1e730:	10800204 	addi	r2,r2,8
   1e734:	10c00017 	ldw	r3,0(r2)
   1e738:	e0bffc17 	ldw	r2,-16(fp)
   1e73c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1e740:	e13ffb17 	ldw	r4,-20(fp)
   1e744:	0017e080 	call	17e08 <alt_release_fd>
  }
} 
   1e748:	0001883a 	nop
   1e74c:	e037883a 	mov	sp,fp
   1e750:	dfc00117 	ldw	ra,4(sp)
   1e754:	df000017 	ldw	fp,0(sp)
   1e758:	dec00204 	addi	sp,sp,8
   1e75c:	f800283a 	ret

0001e760 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1e760:	defffb04 	addi	sp,sp,-20
   1e764:	dfc00415 	stw	ra,16(sp)
   1e768:	df000315 	stw	fp,12(sp)
   1e76c:	df000304 	addi	fp,sp,12
   1e770:	e13ffd15 	stw	r4,-12(fp)
   1e774:	e17ffe15 	stw	r5,-8(fp)
   1e778:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1e77c:	01c07fc4 	movi	r7,511
   1e780:	01800044 	movi	r6,1
   1e784:	e17ffd17 	ldw	r5,-12(fp)
   1e788:	01020034 	movhi	r4,2048
   1e78c:	2104fe04 	addi	r4,r4,5112
   1e790:	001e69c0 	call	1e69c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1e794:	01c07fc4 	movi	r7,511
   1e798:	000d883a 	mov	r6,zero
   1e79c:	e17ffe17 	ldw	r5,-8(fp)
   1e7a0:	01020034 	movhi	r4,2048
   1e7a4:	2104fb04 	addi	r4,r4,5100
   1e7a8:	001e69c0 	call	1e69c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1e7ac:	01c07fc4 	movi	r7,511
   1e7b0:	01800044 	movi	r6,1
   1e7b4:	e17fff17 	ldw	r5,-4(fp)
   1e7b8:	01020034 	movhi	r4,2048
   1e7bc:	21050104 	addi	r4,r4,5124
   1e7c0:	001e69c0 	call	1e69c <alt_open_fd>
}  
   1e7c4:	0001883a 	nop
   1e7c8:	e037883a 	mov	sp,fp
   1e7cc:	dfc00117 	ldw	ra,4(sp)
   1e7d0:	df000017 	ldw	fp,0(sp)
   1e7d4:	dec00204 	addi	sp,sp,8
   1e7d8:	f800283a 	ret

0001e7dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e7dc:	defffe04 	addi	sp,sp,-8
   1e7e0:	dfc00115 	stw	ra,4(sp)
   1e7e4:	df000015 	stw	fp,0(sp)
   1e7e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e7ec:	d0a00f97 	ldw	r2,-32706(gp)
   1e7f0:	10000326 	beq	r2,zero,1e800 <alt_get_errno+0x24>
   1e7f4:	d0a00f97 	ldw	r2,-32706(gp)
   1e7f8:	103ee83a 	callr	r2
   1e7fc:	00000106 	br	1e804 <alt_get_errno+0x28>
   1e800:	d0a05384 	addi	r2,gp,-32434
}
   1e804:	e037883a 	mov	sp,fp
   1e808:	dfc00117 	ldw	ra,4(sp)
   1e80c:	df000017 	ldw	fp,0(sp)
   1e810:	dec00204 	addi	sp,sp,8
   1e814:	f800283a 	ret

0001e818 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1e818:	defffd04 	addi	sp,sp,-12
   1e81c:	df000215 	stw	fp,8(sp)
   1e820:	df000204 	addi	fp,sp,8
   1e824:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1e828:	e0bfff17 	ldw	r2,-4(fp)
   1e82c:	10800217 	ldw	r2,8(r2)
   1e830:	10d00034 	orhi	r3,r2,16384
   1e834:	e0bfff17 	ldw	r2,-4(fp)
   1e838:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e83c:	e03ffe15 	stw	zero,-8(fp)
   1e840:	00001d06 	br	1e8b8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e844:	00820034 	movhi	r2,2048
   1e848:	1084fb04 	addi	r2,r2,5100
   1e84c:	e0fffe17 	ldw	r3,-8(fp)
   1e850:	18c00324 	muli	r3,r3,12
   1e854:	10c5883a 	add	r2,r2,r3
   1e858:	10c00017 	ldw	r3,0(r2)
   1e85c:	e0bfff17 	ldw	r2,-4(fp)
   1e860:	10800017 	ldw	r2,0(r2)
   1e864:	1880111e 	bne	r3,r2,1e8ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e868:	00820034 	movhi	r2,2048
   1e86c:	1084fb04 	addi	r2,r2,5100
   1e870:	e0fffe17 	ldw	r3,-8(fp)
   1e874:	18c00324 	muli	r3,r3,12
   1e878:	10c5883a 	add	r2,r2,r3
   1e87c:	10800204 	addi	r2,r2,8
   1e880:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e884:	1000090e 	bge	r2,zero,1e8ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1e888:	e0bffe17 	ldw	r2,-8(fp)
   1e88c:	10c00324 	muli	r3,r2,12
   1e890:	00820034 	movhi	r2,2048
   1e894:	1084fb04 	addi	r2,r2,5100
   1e898:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e89c:	e0bfff17 	ldw	r2,-4(fp)
   1e8a0:	18800226 	beq	r3,r2,1e8ac <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1e8a4:	00bffcc4 	movi	r2,-13
   1e8a8:	00000806 	br	1e8cc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e8ac:	e0bffe17 	ldw	r2,-8(fp)
   1e8b0:	10800044 	addi	r2,r2,1
   1e8b4:	e0bffe15 	stw	r2,-8(fp)
   1e8b8:	d0a00e97 	ldw	r2,-32710(gp)
   1e8bc:	1007883a 	mov	r3,r2
   1e8c0:	e0bffe17 	ldw	r2,-8(fp)
   1e8c4:	18bfdf2e 	bgeu	r3,r2,1e844 <__alt_data_end+0xf001e844>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1e8c8:	0005883a 	mov	r2,zero
}
   1e8cc:	e037883a 	mov	sp,fp
   1e8d0:	df000017 	ldw	fp,0(sp)
   1e8d4:	dec00104 	addi	sp,sp,4
   1e8d8:	f800283a 	ret

0001e8dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1e8dc:	defff604 	addi	sp,sp,-40
   1e8e0:	dfc00915 	stw	ra,36(sp)
   1e8e4:	df000815 	stw	fp,32(sp)
   1e8e8:	df000804 	addi	fp,sp,32
   1e8ec:	e13ffd15 	stw	r4,-12(fp)
   1e8f0:	e17ffe15 	stw	r5,-8(fp)
   1e8f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1e8f8:	00bfffc4 	movi	r2,-1
   1e8fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1e900:	00bffb44 	movi	r2,-19
   1e904:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1e908:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1e90c:	d1600c84 	addi	r5,gp,-32718
   1e910:	e13ffd17 	ldw	r4,-12(fp)
   1e914:	001e5500 	call	1e550 <alt_find_dev>
   1e918:	e0bff815 	stw	r2,-32(fp)
   1e91c:	e0bff817 	ldw	r2,-32(fp)
   1e920:	1000051e 	bne	r2,zero,1e938 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1e924:	e13ffd17 	ldw	r4,-12(fp)
   1e928:	001f60c0 	call	1f60c <alt_find_file>
   1e92c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1e930:	00800044 	movi	r2,1
   1e934:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1e938:	e0bff817 	ldw	r2,-32(fp)
   1e93c:	10002926 	beq	r2,zero,1e9e4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1e940:	e13ff817 	ldw	r4,-32(fp)
   1e944:	001f7140 	call	1f714 <alt_get_fd>
   1e948:	e0bff915 	stw	r2,-28(fp)
   1e94c:	e0bff917 	ldw	r2,-28(fp)
   1e950:	1000030e 	bge	r2,zero,1e960 <open+0x84>
    {
      status = index;
   1e954:	e0bff917 	ldw	r2,-28(fp)
   1e958:	e0bffa15 	stw	r2,-24(fp)
   1e95c:	00002306 	br	1e9ec <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1e960:	e0bff917 	ldw	r2,-28(fp)
   1e964:	10c00324 	muli	r3,r2,12
   1e968:	00820034 	movhi	r2,2048
   1e96c:	1084fb04 	addi	r2,r2,5100
   1e970:	1885883a 	add	r2,r3,r2
   1e974:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1e978:	e0fffe17 	ldw	r3,-8(fp)
   1e97c:	00900034 	movhi	r2,16384
   1e980:	10bfffc4 	addi	r2,r2,-1
   1e984:	1886703a 	and	r3,r3,r2
   1e988:	e0bffc17 	ldw	r2,-16(fp)
   1e98c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1e990:	e0bffb17 	ldw	r2,-20(fp)
   1e994:	1000051e 	bne	r2,zero,1e9ac <open+0xd0>
   1e998:	e13ffc17 	ldw	r4,-16(fp)
   1e99c:	001e8180 	call	1e818 <alt_file_locked>
   1e9a0:	e0bffa15 	stw	r2,-24(fp)
   1e9a4:	e0bffa17 	ldw	r2,-24(fp)
   1e9a8:	10001016 	blt	r2,zero,1e9ec <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1e9ac:	e0bff817 	ldw	r2,-32(fp)
   1e9b0:	10800317 	ldw	r2,12(r2)
   1e9b4:	10000826 	beq	r2,zero,1e9d8 <open+0xfc>
   1e9b8:	e0bff817 	ldw	r2,-32(fp)
   1e9bc:	10800317 	ldw	r2,12(r2)
   1e9c0:	e1ffff17 	ldw	r7,-4(fp)
   1e9c4:	e1bffe17 	ldw	r6,-8(fp)
   1e9c8:	e17ffd17 	ldw	r5,-12(fp)
   1e9cc:	e13ffc17 	ldw	r4,-16(fp)
   1e9d0:	103ee83a 	callr	r2
   1e9d4:	00000106 	br	1e9dc <open+0x100>
   1e9d8:	0005883a 	mov	r2,zero
   1e9dc:	e0bffa15 	stw	r2,-24(fp)
   1e9e0:	00000206 	br	1e9ec <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1e9e4:	00bffb44 	movi	r2,-19
   1e9e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1e9ec:	e0bffa17 	ldw	r2,-24(fp)
   1e9f0:	1000090e 	bge	r2,zero,1ea18 <open+0x13c>
  {
    alt_release_fd (index);  
   1e9f4:	e13ff917 	ldw	r4,-28(fp)
   1e9f8:	0017e080 	call	17e08 <alt_release_fd>
    ALT_ERRNO = -status;
   1e9fc:	001e7dc0 	call	1e7dc <alt_get_errno>
   1ea00:	1007883a 	mov	r3,r2
   1ea04:	e0bffa17 	ldw	r2,-24(fp)
   1ea08:	0085c83a 	sub	r2,zero,r2
   1ea0c:	18800015 	stw	r2,0(r3)
    return -1;
   1ea10:	00bfffc4 	movi	r2,-1
   1ea14:	00000106 	br	1ea1c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1ea18:	e0bff917 	ldw	r2,-28(fp)
}
   1ea1c:	e037883a 	mov	sp,fp
   1ea20:	dfc00117 	ldw	ra,4(sp)
   1ea24:	df000017 	ldw	fp,0(sp)
   1ea28:	dec00204 	addi	sp,sp,8
   1ea2c:	f800283a 	ret

0001ea30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1ea30:	defffa04 	addi	sp,sp,-24
   1ea34:	df000515 	stw	fp,20(sp)
   1ea38:	df000504 	addi	fp,sp,20
   1ea3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ea40:	0005303a 	rdctl	r2,status
   1ea44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ea48:	e0fffc17 	ldw	r3,-16(fp)
   1ea4c:	00bfff84 	movi	r2,-2
   1ea50:	1884703a 	and	r2,r3,r2
   1ea54:	1001703a 	wrctl	status,r2
  
  return context;
   1ea58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1ea5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1ea60:	e0bfff17 	ldw	r2,-4(fp)
   1ea64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ea68:	e0bffd17 	ldw	r2,-12(fp)
   1ea6c:	10800017 	ldw	r2,0(r2)
   1ea70:	e0fffd17 	ldw	r3,-12(fp)
   1ea74:	18c00117 	ldw	r3,4(r3)
   1ea78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1ea7c:	e0bffd17 	ldw	r2,-12(fp)
   1ea80:	10800117 	ldw	r2,4(r2)
   1ea84:	e0fffd17 	ldw	r3,-12(fp)
   1ea88:	18c00017 	ldw	r3,0(r3)
   1ea8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1ea90:	e0bffd17 	ldw	r2,-12(fp)
   1ea94:	e0fffd17 	ldw	r3,-12(fp)
   1ea98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1ea9c:	e0bffd17 	ldw	r2,-12(fp)
   1eaa0:	e0fffd17 	ldw	r3,-12(fp)
   1eaa4:	10c00015 	stw	r3,0(r2)
   1eaa8:	e0bffb17 	ldw	r2,-20(fp)
   1eaac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eab0:	e0bffe17 	ldw	r2,-8(fp)
   1eab4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1eab8:	0001883a 	nop
   1eabc:	e037883a 	mov	sp,fp
   1eac0:	df000017 	ldw	fp,0(sp)
   1eac4:	dec00104 	addi	sp,sp,4
   1eac8:	f800283a 	ret

0001eacc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1eacc:	defffb04 	addi	sp,sp,-20
   1ead0:	dfc00415 	stw	ra,16(sp)
   1ead4:	df000315 	stw	fp,12(sp)
   1ead8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1eadc:	d0a01597 	ldw	r2,-32682(gp)
   1eae0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1eae4:	d0a05a97 	ldw	r2,-32406(gp)
   1eae8:	10800044 	addi	r2,r2,1
   1eaec:	d0a05a95 	stw	r2,-32406(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1eaf0:	00002e06 	br	1ebac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1eaf4:	e0bffd17 	ldw	r2,-12(fp)
   1eaf8:	10800017 	ldw	r2,0(r2)
   1eafc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1eb00:	e0bffd17 	ldw	r2,-12(fp)
   1eb04:	10800403 	ldbu	r2,16(r2)
   1eb08:	10803fcc 	andi	r2,r2,255
   1eb0c:	10000426 	beq	r2,zero,1eb20 <alt_tick+0x54>
   1eb10:	d0a05a97 	ldw	r2,-32406(gp)
   1eb14:	1000021e 	bne	r2,zero,1eb20 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1eb18:	e0bffd17 	ldw	r2,-12(fp)
   1eb1c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1eb20:	e0bffd17 	ldw	r2,-12(fp)
   1eb24:	10800217 	ldw	r2,8(r2)
   1eb28:	d0e05a97 	ldw	r3,-32406(gp)
   1eb2c:	18801d36 	bltu	r3,r2,1eba4 <alt_tick+0xd8>
   1eb30:	e0bffd17 	ldw	r2,-12(fp)
   1eb34:	10800403 	ldbu	r2,16(r2)
   1eb38:	10803fcc 	andi	r2,r2,255
   1eb3c:	1000191e 	bne	r2,zero,1eba4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1eb40:	e0bffd17 	ldw	r2,-12(fp)
   1eb44:	10800317 	ldw	r2,12(r2)
   1eb48:	e0fffd17 	ldw	r3,-12(fp)
   1eb4c:	18c00517 	ldw	r3,20(r3)
   1eb50:	1809883a 	mov	r4,r3
   1eb54:	103ee83a 	callr	r2
   1eb58:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1eb5c:	e0bfff17 	ldw	r2,-4(fp)
   1eb60:	1000031e 	bne	r2,zero,1eb70 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1eb64:	e13ffd17 	ldw	r4,-12(fp)
   1eb68:	001ea300 	call	1ea30 <alt_alarm_stop>
   1eb6c:	00000d06 	br	1eba4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1eb70:	e0bffd17 	ldw	r2,-12(fp)
   1eb74:	10c00217 	ldw	r3,8(r2)
   1eb78:	e0bfff17 	ldw	r2,-4(fp)
   1eb7c:	1887883a 	add	r3,r3,r2
   1eb80:	e0bffd17 	ldw	r2,-12(fp)
   1eb84:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1eb88:	e0bffd17 	ldw	r2,-12(fp)
   1eb8c:	10c00217 	ldw	r3,8(r2)
   1eb90:	d0a05a97 	ldw	r2,-32406(gp)
   1eb94:	1880032e 	bgeu	r3,r2,1eba4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1eb98:	e0bffd17 	ldw	r2,-12(fp)
   1eb9c:	00c00044 	movi	r3,1
   1eba0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1eba4:	e0bffe17 	ldw	r2,-8(fp)
   1eba8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ebac:	e0fffd17 	ldw	r3,-12(fp)
   1ebb0:	d0a01584 	addi	r2,gp,-32682
   1ebb4:	18bfcf1e 	bne	r3,r2,1eaf4 <__alt_data_end+0xf001eaf4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1ebb8:	0001883a 	nop
}
   1ebbc:	0001883a 	nop
   1ebc0:	e037883a 	mov	sp,fp
   1ebc4:	dfc00117 	ldw	ra,4(sp)
   1ebc8:	df000017 	ldw	fp,0(sp)
   1ebcc:	dec00204 	addi	sp,sp,8
   1ebd0:	f800283a 	ret

0001ebd4 <usleep>:
   1ebd4:	defffd04 	addi	sp,sp,-12
   1ebd8:	dfc00215 	stw	ra,8(sp)
   1ebdc:	df000115 	stw	fp,4(sp)
   1ebe0:	df000104 	addi	fp,sp,4
   1ebe4:	e13fff15 	stw	r4,-4(fp)
   1ebe8:	e13fff17 	ldw	r4,-4(fp)
   1ebec:	001f4e40 	call	1f4e4 <alt_busy_sleep>
   1ebf0:	e037883a 	mov	sp,fp
   1ebf4:	dfc00117 	ldw	ra,4(sp)
   1ebf8:	df000017 	ldw	fp,0(sp)
   1ebfc:	dec00204 	addi	sp,sp,8
   1ec00:	f800283a 	ret

0001ec04 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1ec04:	deffff04 	addi	sp,sp,-4
   1ec08:	df000015 	stw	fp,0(sp)
   1ec0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1ec10:	000170fa 	wrctl	ienable,zero
}
   1ec14:	0001883a 	nop
   1ec18:	e037883a 	mov	sp,fp
   1ec1c:	df000017 	ldw	fp,0(sp)
   1ec20:	dec00104 	addi	sp,sp,4
   1ec24:	f800283a 	ret

0001ec28 <alt_program_amd>:
   1ec28:	defff704 	addi	sp,sp,-36
   1ec2c:	dfc00815 	stw	ra,32(sp)
   1ec30:	df000715 	stw	fp,28(sp)
   1ec34:	df000704 	addi	fp,sp,28
   1ec38:	e13ffc15 	stw	r4,-16(fp)
   1ec3c:	e17ffd15 	stw	r5,-12(fp)
   1ec40:	e1bffe15 	stw	r6,-8(fp)
   1ec44:	e1ffff15 	stw	r7,-4(fp)
   1ec48:	e03ffa15 	stw	zero,-24(fp)
   1ec4c:	e0bffc17 	ldw	r2,-16(fp)
   1ec50:	e0bffb15 	stw	r2,-20(fp)
   1ec54:	008000b4 	movhi	r2,2
   1ec58:	10bbef04 	addi	r2,r2,-4164
   1ec5c:	d8800015 	stw	r2,0(sp)
   1ec60:	e1c00217 	ldw	r7,8(fp)
   1ec64:	e1bfff17 	ldw	r6,-4(fp)
   1ec68:	e17ffe17 	ldw	r5,-8(fp)
   1ec6c:	e13ffb17 	ldw	r4,-20(fp)
   1ec70:	00189c80 	call	189c8 <alt_flash_program_block>
   1ec74:	e0bffa15 	stw	r2,-24(fp)
   1ec78:	e0bffa17 	ldw	r2,-24(fp)
   1ec7c:	e037883a 	mov	sp,fp
   1ec80:	dfc00117 	ldw	ra,4(sp)
   1ec84:	df000017 	ldw	fp,0(sp)
   1ec88:	dec00204 	addi	sp,sp,8
   1ec8c:	f800283a 	ret

0001ec90 <alt_erase_block_amd>:
   1ec90:	defff804 	addi	sp,sp,-32
   1ec94:	dfc00715 	stw	ra,28(sp)
   1ec98:	df000615 	stw	fp,24(sp)
   1ec9c:	df000604 	addi	fp,sp,24
   1eca0:	e13ffe15 	stw	r4,-8(fp)
   1eca4:	e17fff15 	stw	r5,-4(fp)
   1eca8:	e03ffa15 	stw	zero,-24(fp)
   1ecac:	e0bffe17 	ldw	r2,-8(fp)
   1ecb0:	e0bffc15 	stw	r2,-16(fp)
   1ecb4:	e0bffc17 	ldw	r2,-16(fp)
   1ecb8:	10803417 	ldw	r2,208(r2)
   1ecbc:	e0fffc17 	ldw	r3,-16(fp)
   1ecc0:	18c00a17 	ldw	r3,40(r3)
   1ecc4:	01802a84 	movi	r6,170
   1ecc8:	01415544 	movi	r5,1365
   1eccc:	1809883a 	mov	r4,r3
   1ecd0:	103ee83a 	callr	r2
   1ecd4:	e0bffc17 	ldw	r2,-16(fp)
   1ecd8:	10803417 	ldw	r2,208(r2)
   1ecdc:	e0fffc17 	ldw	r3,-16(fp)
   1ece0:	18c00a17 	ldw	r3,40(r3)
   1ece4:	01801544 	movi	r6,85
   1ece8:	0140aa84 	movi	r5,682
   1ecec:	1809883a 	mov	r4,r3
   1ecf0:	103ee83a 	callr	r2
   1ecf4:	e0bffc17 	ldw	r2,-16(fp)
   1ecf8:	10803417 	ldw	r2,208(r2)
   1ecfc:	e0fffc17 	ldw	r3,-16(fp)
   1ed00:	18c00a17 	ldw	r3,40(r3)
   1ed04:	01802004 	movi	r6,128
   1ed08:	01415544 	movi	r5,1365
   1ed0c:	1809883a 	mov	r4,r3
   1ed10:	103ee83a 	callr	r2
   1ed14:	e0bffc17 	ldw	r2,-16(fp)
   1ed18:	10803417 	ldw	r2,208(r2)
   1ed1c:	e0fffc17 	ldw	r3,-16(fp)
   1ed20:	18c00a17 	ldw	r3,40(r3)
   1ed24:	01802a84 	movi	r6,170
   1ed28:	01415544 	movi	r5,1365
   1ed2c:	1809883a 	mov	r4,r3
   1ed30:	103ee83a 	callr	r2
   1ed34:	e0bffc17 	ldw	r2,-16(fp)
   1ed38:	10803417 	ldw	r2,208(r2)
   1ed3c:	e0fffc17 	ldw	r3,-16(fp)
   1ed40:	18c00a17 	ldw	r3,40(r3)
   1ed44:	01801544 	movi	r6,85
   1ed48:	0140aa84 	movi	r5,682
   1ed4c:	1809883a 	mov	r4,r3
   1ed50:	103ee83a 	callr	r2
   1ed54:	e0bffc17 	ldw	r2,-16(fp)
   1ed58:	10803617 	ldw	r2,216(r2)
   1ed5c:	e0fffc17 	ldw	r3,-16(fp)
   1ed60:	19000a17 	ldw	r4,40(r3)
   1ed64:	e0ffff17 	ldw	r3,-4(fp)
   1ed68:	20c7883a 	add	r3,r4,r3
   1ed6c:	01400c04 	movi	r5,48
   1ed70:	1809883a 	mov	r4,r3
   1ed74:	103ee83a 	callr	r2
   1ed78:	0109c404 	movi	r4,10000
   1ed7c:	001ebd40 	call	1ebd4 <usleep>
   1ed80:	00800c84 	movi	r2,50
   1ed84:	e0bffb15 	stw	r2,-20(fp)
   1ed88:	e0bffc17 	ldw	r2,-16(fp)
   1ed8c:	10c00a17 	ldw	r3,40(r2)
   1ed90:	e0bfff17 	ldw	r2,-4(fp)
   1ed94:	1885883a 	add	r2,r3,r2
   1ed98:	10800023 	ldbuio	r2,0(r2)
   1ed9c:	10803fcc 	andi	r2,r2,255
   1eda0:	e0bffd05 	stb	r2,-12(fp)
   1eda4:	0100fa04 	movi	r4,1000
   1eda8:	001ebd40 	call	1ebd4 <usleep>
   1edac:	e0bffb17 	ldw	r2,-20(fp)
   1edb0:	10bfffc4 	addi	r2,r2,-1
   1edb4:	e0bffb15 	stw	r2,-20(fp)
   1edb8:	e0bffd03 	ldbu	r2,-12(fp)
   1edbc:	10803fcc 	andi	r2,r2,255
   1edc0:	1080020c 	andi	r2,r2,8
   1edc4:	1000021e 	bne	r2,zero,1edd0 <alt_erase_block_amd+0x140>
   1edc8:	e0bffb17 	ldw	r2,-20(fp)
   1edcc:	00bfee16 	blt	zero,r2,1ed88 <__alt_data_end+0xf001ed88>
   1edd0:	e0bffc17 	ldw	r2,-16(fp)
   1edd4:	10803217 	ldw	r2,200(r2)
   1edd8:	e0bffb15 	stw	r2,-20(fp)
   1eddc:	00001506 	br	1ee34 <alt_erase_block_amd+0x1a4>
   1ede0:	e0bffc17 	ldw	r2,-16(fp)
   1ede4:	10c00a17 	ldw	r3,40(r2)
   1ede8:	e0bfff17 	ldw	r2,-4(fp)
   1edec:	1885883a 	add	r2,r3,r2
   1edf0:	10800023 	ldbuio	r2,0(r2)
   1edf4:	10803fcc 	andi	r2,r2,255
   1edf8:	e0bffd05 	stb	r2,-12(fp)
   1edfc:	e0bffd03 	ldbu	r2,-12(fp)
   1ee00:	10803fcc 	andi	r2,r2,255
   1ee04:	1080201c 	xori	r2,r2,128
   1ee08:	10bfe004 	addi	r2,r2,-128
   1ee0c:	10000b16 	blt	r2,zero,1ee3c <alt_erase_block_amd+0x1ac>
   1ee10:	e0bffd03 	ldbu	r2,-12(fp)
   1ee14:	10803fcc 	andi	r2,r2,255
   1ee18:	1080080c 	andi	r2,r2,32
   1ee1c:	1000071e 	bne	r2,zero,1ee3c <alt_erase_block_amd+0x1ac>
   1ee20:	0100fa04 	movi	r4,1000
   1ee24:	001ebd40 	call	1ebd4 <usleep>
   1ee28:	e0bffb17 	ldw	r2,-20(fp)
   1ee2c:	10bf0604 	addi	r2,r2,-1000
   1ee30:	e0bffb15 	stw	r2,-20(fp)
   1ee34:	e0bffb17 	ldw	r2,-20(fp)
   1ee38:	00bfe916 	blt	zero,r2,1ede0 <__alt_data_end+0xf001ede0>
   1ee3c:	e0bffb17 	ldw	r2,-20(fp)
   1ee40:	00800316 	blt	zero,r2,1ee50 <alt_erase_block_amd+0x1c0>
   1ee44:	00bfe304 	movi	r2,-116
   1ee48:	e0bffa15 	stw	r2,-24(fp)
   1ee4c:	00000e06 	br	1ee88 <alt_erase_block_amd+0x1f8>
   1ee50:	e0bffc17 	ldw	r2,-16(fp)
   1ee54:	10c00a17 	ldw	r3,40(r2)
   1ee58:	e0bfff17 	ldw	r2,-4(fp)
   1ee5c:	1885883a 	add	r2,r3,r2
   1ee60:	10800023 	ldbuio	r2,0(r2)
   1ee64:	10803fcc 	andi	r2,r2,255
   1ee68:	e0bffd05 	stb	r2,-12(fp)
   1ee6c:	e0bffd03 	ldbu	r2,-12(fp)
   1ee70:	10803fcc 	andi	r2,r2,255
   1ee74:	1080201c 	xori	r2,r2,128
   1ee78:	10bfe004 	addi	r2,r2,-128
   1ee7c:	10000216 	blt	r2,zero,1ee88 <alt_erase_block_amd+0x1f8>
   1ee80:	00bffec4 	movi	r2,-5
   1ee84:	e0bffa15 	stw	r2,-24(fp)
   1ee88:	e0bffa17 	ldw	r2,-24(fp)
   1ee8c:	e037883a 	mov	sp,fp
   1ee90:	dfc00117 	ldw	ra,4(sp)
   1ee94:	df000017 	ldw	fp,0(sp)
   1ee98:	dec00204 	addi	sp,sp,8
   1ee9c:	f800283a 	ret

0001eea0 <alt_wait_for_command_to_complete_amd>:
   1eea0:	defff804 	addi	sp,sp,-32
   1eea4:	dfc00715 	stw	ra,28(sp)
   1eea8:	df000615 	stw	fp,24(sp)
   1eeac:	df000604 	addi	fp,sp,24
   1eeb0:	e13ffd15 	stw	r4,-12(fp)
   1eeb4:	e17ffe15 	stw	r5,-8(fp)
   1eeb8:	3005883a 	mov	r2,r6
   1eebc:	e0bfff05 	stb	r2,-4(fp)
   1eec0:	e0bffd17 	ldw	r2,-12(fp)
   1eec4:	10803117 	ldw	r2,196(r2)
   1eec8:	10801924 	muli	r2,r2,100
   1eecc:	e0bffa15 	stw	r2,-24(fp)
   1eed0:	e03ffb15 	stw	zero,-20(fp)
   1eed4:	e0bffd17 	ldw	r2,-12(fp)
   1eed8:	10c00a17 	ldw	r3,40(r2)
   1eedc:	e0bffe17 	ldw	r2,-8(fp)
   1eee0:	1885883a 	add	r2,r3,r2
   1eee4:	10800023 	ldbuio	r2,0(r2)
   1eee8:	10803fcc 	andi	r2,r2,255
   1eeec:	e0bffc05 	stb	r2,-16(fp)
   1eef0:	00001606 	br	1ef4c <alt_wait_for_command_to_complete_amd+0xac>
   1eef4:	e0bffc03 	ldbu	r2,-16(fp)
   1eef8:	10c03fcc 	andi	r3,r2,255
   1eefc:	e0bfff03 	ldbu	r2,-4(fp)
   1ef00:	1884f03a 	xor	r2,r3,r2
   1ef04:	1080200c 	andi	r2,r2,128
   1ef08:	10001226 	beq	r2,zero,1ef54 <alt_wait_for_command_to_complete_amd+0xb4>
   1ef0c:	e0bffc03 	ldbu	r2,-16(fp)
   1ef10:	10803fcc 	andi	r2,r2,255
   1ef14:	1080080c 	andi	r2,r2,32
   1ef18:	10000e1e 	bne	r2,zero,1ef54 <alt_wait_for_command_to_complete_amd+0xb4>
   1ef1c:	01000044 	movi	r4,1
   1ef20:	001ebd40 	call	1ebd4 <usleep>
   1ef24:	e0bffa17 	ldw	r2,-24(fp)
   1ef28:	10bfffc4 	addi	r2,r2,-1
   1ef2c:	e0bffa15 	stw	r2,-24(fp)
   1ef30:	e0bffd17 	ldw	r2,-12(fp)
   1ef34:	10c00a17 	ldw	r3,40(r2)
   1ef38:	e0bffe17 	ldw	r2,-8(fp)
   1ef3c:	1885883a 	add	r2,r3,r2
   1ef40:	10800023 	ldbuio	r2,0(r2)
   1ef44:	10803fcc 	andi	r2,r2,255
   1ef48:	e0bffc05 	stb	r2,-16(fp)
   1ef4c:	e0bffa17 	ldw	r2,-24(fp)
   1ef50:	00bfe816 	blt	zero,r2,1eef4 <__alt_data_end+0xf001eef4>
   1ef54:	e0bffa17 	ldw	r2,-24(fp)
   1ef58:	1000031e 	bne	r2,zero,1ef68 <alt_wait_for_command_to_complete_amd+0xc8>
   1ef5c:	00bfe304 	movi	r2,-116
   1ef60:	e0bffb15 	stw	r2,-20(fp)
   1ef64:	00000f06 	br	1efa4 <alt_wait_for_command_to_complete_amd+0x104>
   1ef68:	e0bffd17 	ldw	r2,-12(fp)
   1ef6c:	10c00a17 	ldw	r3,40(r2)
   1ef70:	e0bffe17 	ldw	r2,-8(fp)
   1ef74:	1885883a 	add	r2,r3,r2
   1ef78:	10800023 	ldbuio	r2,0(r2)
   1ef7c:	10803fcc 	andi	r2,r2,255
   1ef80:	e0bffc05 	stb	r2,-16(fp)
   1ef84:	e0bffc03 	ldbu	r2,-16(fp)
   1ef88:	10c03fcc 	andi	r3,r2,255
   1ef8c:	e0bfff03 	ldbu	r2,-4(fp)
   1ef90:	1884f03a 	xor	r2,r3,r2
   1ef94:	1080200c 	andi	r2,r2,128
   1ef98:	10000226 	beq	r2,zero,1efa4 <alt_wait_for_command_to_complete_amd+0x104>
   1ef9c:	00bffec4 	movi	r2,-5
   1efa0:	e0bffb15 	stw	r2,-20(fp)
   1efa4:	e0bffb17 	ldw	r2,-20(fp)
   1efa8:	e037883a 	mov	sp,fp
   1efac:	dfc00117 	ldw	ra,4(sp)
   1efb0:	df000017 	ldw	fp,0(sp)
   1efb4:	dec00204 	addi	sp,sp,8
   1efb8:	f800283a 	ret

0001efbc <alt_write_word_amd>:
   1efbc:	defff904 	addi	sp,sp,-28
   1efc0:	dfc00615 	stw	ra,24(sp)
   1efc4:	df000515 	stw	fp,20(sp)
   1efc8:	df000504 	addi	fp,sp,20
   1efcc:	e13ffd15 	stw	r4,-12(fp)
   1efd0:	e17ffe15 	stw	r5,-8(fp)
   1efd4:	e1bfff15 	stw	r6,-4(fp)
   1efd8:	e03ffb15 	stw	zero,-20(fp)
   1efdc:	e0bffd17 	ldw	r2,-12(fp)
   1efe0:	10803417 	ldw	r2,208(r2)
   1efe4:	e0fffd17 	ldw	r3,-12(fp)
   1efe8:	18c00a17 	ldw	r3,40(r3)
   1efec:	01802a84 	movi	r6,170
   1eff0:	01415544 	movi	r5,1365
   1eff4:	1809883a 	mov	r4,r3
   1eff8:	103ee83a 	callr	r2
   1effc:	e0bffd17 	ldw	r2,-12(fp)
   1f000:	10803417 	ldw	r2,208(r2)
   1f004:	e0fffd17 	ldw	r3,-12(fp)
   1f008:	18c00a17 	ldw	r3,40(r3)
   1f00c:	01801544 	movi	r6,85
   1f010:	0140aa84 	movi	r5,682
   1f014:	1809883a 	mov	r4,r3
   1f018:	103ee83a 	callr	r2
   1f01c:	e0bffd17 	ldw	r2,-12(fp)
   1f020:	10803417 	ldw	r2,208(r2)
   1f024:	e0fffd17 	ldw	r3,-12(fp)
   1f028:	18c00a17 	ldw	r3,40(r3)
   1f02c:	01802804 	movi	r6,160
   1f030:	01415544 	movi	r5,1365
   1f034:	1809883a 	mov	r4,r3
   1f038:	103ee83a 	callr	r2
   1f03c:	e0bfff17 	ldw	r2,-4(fp)
   1f040:	10800003 	ldbu	r2,0(r2)
   1f044:	e0bffc05 	stb	r2,-16(fp)
   1f048:	e1bfff17 	ldw	r6,-4(fp)
   1f04c:	e17ffe17 	ldw	r5,-8(fp)
   1f050:	e13ffd17 	ldw	r4,-12(fp)
   1f054:	001886c0 	call	1886c <alt_write_value_to_flash>
   1f058:	e0bffc03 	ldbu	r2,-16(fp)
   1f05c:	100d883a 	mov	r6,r2
   1f060:	e17ffe17 	ldw	r5,-8(fp)
   1f064:	e13ffd17 	ldw	r4,-12(fp)
   1f068:	001eea00 	call	1eea0 <alt_wait_for_command_to_complete_amd>
   1f06c:	e0bffb15 	stw	r2,-20(fp)
   1f070:	e0bffb17 	ldw	r2,-20(fp)
   1f074:	e037883a 	mov	sp,fp
   1f078:	dfc00117 	ldw	ra,4(sp)
   1f07c:	df000017 	ldw	fp,0(sp)
   1f080:	dec00204 	addi	sp,sp,8
   1f084:	f800283a 	ret

0001f088 <alt_program_intel>:
   1f088:	defff704 	addi	sp,sp,-36
   1f08c:	dfc00815 	stw	ra,32(sp)
   1f090:	df000715 	stw	fp,28(sp)
   1f094:	df000704 	addi	fp,sp,28
   1f098:	e13ffc15 	stw	r4,-16(fp)
   1f09c:	e17ffd15 	stw	r5,-12(fp)
   1f0a0:	e1bffe15 	stw	r6,-8(fp)
   1f0a4:	e1ffff15 	stw	r7,-4(fp)
   1f0a8:	e03ffa15 	stw	zero,-24(fp)
   1f0ac:	e0bffc17 	ldw	r2,-16(fp)
   1f0b0:	e0bffb15 	stw	r2,-20(fp)
   1f0b4:	e17ffd17 	ldw	r5,-12(fp)
   1f0b8:	e13ffb17 	ldw	r4,-20(fp)
   1f0bc:	001f2940 	call	1f294 <alt_unlock_block_intel>
   1f0c0:	e0bffa15 	stw	r2,-24(fp)
   1f0c4:	e0bffa17 	ldw	r2,-24(fp)
   1f0c8:	1000091e 	bne	r2,zero,1f0f0 <alt_program_intel+0x68>
   1f0cc:	008000b4 	movhi	r2,2
   1f0d0:	10bd0404 	addi	r2,r2,-3056
   1f0d4:	d8800015 	stw	r2,0(sp)
   1f0d8:	e1c00217 	ldw	r7,8(fp)
   1f0dc:	e1bfff17 	ldw	r6,-4(fp)
   1f0e0:	e17ffe17 	ldw	r5,-8(fp)
   1f0e4:	e13ffb17 	ldw	r4,-20(fp)
   1f0e8:	00189c80 	call	189c8 <alt_flash_program_block>
   1f0ec:	e0bffa15 	stw	r2,-24(fp)
   1f0f0:	e0bffa17 	ldw	r2,-24(fp)
   1f0f4:	e037883a 	mov	sp,fp
   1f0f8:	dfc00117 	ldw	ra,4(sp)
   1f0fc:	df000017 	ldw	fp,0(sp)
   1f100:	dec00204 	addi	sp,sp,8
   1f104:	f800283a 	ret

0001f108 <alt_erase_block_intel>:
   1f108:	defff804 	addi	sp,sp,-32
   1f10c:	dfc00715 	stw	ra,28(sp)
   1f110:	df000615 	stw	fp,24(sp)
   1f114:	df000604 	addi	fp,sp,24
   1f118:	e13ffe15 	stw	r4,-8(fp)
   1f11c:	e17fff15 	stw	r5,-4(fp)
   1f120:	e03ffa15 	stw	zero,-24(fp)
   1f124:	e0bffe17 	ldw	r2,-8(fp)
   1f128:	e0bffc15 	stw	r2,-16(fp)
   1f12c:	e0bffc17 	ldw	r2,-16(fp)
   1f130:	10803217 	ldw	r2,200(r2)
   1f134:	e0bffb15 	stw	r2,-20(fp)
   1f138:	e17fff17 	ldw	r5,-4(fp)
   1f13c:	e13ffc17 	ldw	r4,-16(fp)
   1f140:	001f2940 	call	1f294 <alt_unlock_block_intel>
   1f144:	e0bffa15 	stw	r2,-24(fp)
   1f148:	e0bffa17 	ldw	r2,-24(fp)
   1f14c:	10004b1e 	bne	r2,zero,1f27c <alt_erase_block_intel+0x174>
   1f150:	e0bffc17 	ldw	r2,-16(fp)
   1f154:	10803617 	ldw	r2,216(r2)
   1f158:	e0fffc17 	ldw	r3,-16(fp)
   1f15c:	19000a17 	ldw	r4,40(r3)
   1f160:	e0ffff17 	ldw	r3,-4(fp)
   1f164:	20c7883a 	add	r3,r4,r3
   1f168:	01401404 	movi	r5,80
   1f16c:	1809883a 	mov	r4,r3
   1f170:	103ee83a 	callr	r2
   1f174:	e0bffc17 	ldw	r2,-16(fp)
   1f178:	10803617 	ldw	r2,216(r2)
   1f17c:	e0fffc17 	ldw	r3,-16(fp)
   1f180:	19000a17 	ldw	r4,40(r3)
   1f184:	e0ffff17 	ldw	r3,-4(fp)
   1f188:	20c7883a 	add	r3,r4,r3
   1f18c:	01400804 	movi	r5,32
   1f190:	1809883a 	mov	r4,r3
   1f194:	103ee83a 	callr	r2
   1f198:	e0bffc17 	ldw	r2,-16(fp)
   1f19c:	10803617 	ldw	r2,216(r2)
   1f1a0:	e0fffc17 	ldw	r3,-16(fp)
   1f1a4:	19000a17 	ldw	r4,40(r3)
   1f1a8:	e0ffff17 	ldw	r3,-4(fp)
   1f1ac:	20c7883a 	add	r3,r4,r3
   1f1b0:	01403404 	movi	r5,208
   1f1b4:	1809883a 	mov	r4,r3
   1f1b8:	103ee83a 	callr	r2
   1f1bc:	e0bffc17 	ldw	r2,-16(fp)
   1f1c0:	10c00a17 	ldw	r3,40(r2)
   1f1c4:	e0bfff17 	ldw	r2,-4(fp)
   1f1c8:	1885883a 	add	r2,r3,r2
   1f1cc:	10800023 	ldbuio	r2,0(r2)
   1f1d0:	10803fcc 	andi	r2,r2,255
   1f1d4:	e0bffd05 	stb	r2,-12(fp)
   1f1d8:	e0bffd03 	ldbu	r2,-12(fp)
   1f1dc:	10803fcc 	andi	r2,r2,255
   1f1e0:	1080201c 	xori	r2,r2,128
   1f1e4:	10bfe004 	addi	r2,r2,-128
   1f1e8:	10000816 	blt	r2,zero,1f20c <alt_erase_block_intel+0x104>
   1f1ec:	0100fa04 	movi	r4,1000
   1f1f0:	001ebd40 	call	1ebd4 <usleep>
   1f1f4:	e0bffb17 	ldw	r2,-20(fp)
   1f1f8:	10bf0604 	addi	r2,r2,-1000
   1f1fc:	e0bffb15 	stw	r2,-20(fp)
   1f200:	e0bffb17 	ldw	r2,-20(fp)
   1f204:	00bfed16 	blt	zero,r2,1f1bc <__alt_data_end+0xf001f1bc>
   1f208:	00000106 	br	1f210 <alt_erase_block_intel+0x108>
   1f20c:	0001883a 	nop
   1f210:	e0bffb17 	ldw	r2,-20(fp)
   1f214:	00800316 	blt	zero,r2,1f224 <alt_erase_block_intel+0x11c>
   1f218:	00bfe304 	movi	r2,-116
   1f21c:	e0bffa15 	stw	r2,-24(fp)
   1f220:	00000d06 	br	1f258 <alt_erase_block_intel+0x150>
   1f224:	e0bffd03 	ldbu	r2,-12(fp)
   1f228:	10803fcc 	andi	r2,r2,255
   1f22c:	10801fcc 	andi	r2,r2,127
   1f230:	10000926 	beq	r2,zero,1f258 <alt_erase_block_intel+0x150>
   1f234:	00bffec4 	movi	r2,-5
   1f238:	e0bffa15 	stw	r2,-24(fp)
   1f23c:	e0bffc17 	ldw	r2,-16(fp)
   1f240:	10c00a17 	ldw	r3,40(r2)
   1f244:	e0bfff17 	ldw	r2,-4(fp)
   1f248:	1885883a 	add	r2,r3,r2
   1f24c:	10800023 	ldbuio	r2,0(r2)
   1f250:	10803fcc 	andi	r2,r2,255
   1f254:	e0bffd05 	stb	r2,-12(fp)
   1f258:	e0bffc17 	ldw	r2,-16(fp)
   1f25c:	10803617 	ldw	r2,216(r2)
   1f260:	e0fffc17 	ldw	r3,-16(fp)
   1f264:	19000a17 	ldw	r4,40(r3)
   1f268:	e0ffff17 	ldw	r3,-4(fp)
   1f26c:	20c7883a 	add	r3,r4,r3
   1f270:	01403fc4 	movi	r5,255
   1f274:	1809883a 	mov	r4,r3
   1f278:	103ee83a 	callr	r2
   1f27c:	e0bffa17 	ldw	r2,-24(fp)
   1f280:	e037883a 	mov	sp,fp
   1f284:	dfc00117 	ldw	ra,4(sp)
   1f288:	df000017 	ldw	fp,0(sp)
   1f28c:	dec00204 	addi	sp,sp,8
   1f290:	f800283a 	ret

0001f294 <alt_unlock_block_intel>:
   1f294:	defff904 	addi	sp,sp,-28
   1f298:	dfc00615 	stw	ra,24(sp)
   1f29c:	df000515 	stw	fp,20(sp)
   1f2a0:	df000504 	addi	fp,sp,20
   1f2a4:	e13ffe15 	stw	r4,-8(fp)
   1f2a8:	e17fff15 	stw	r5,-4(fp)
   1f2ac:	e03ffb15 	stw	zero,-20(fp)
   1f2b0:	e0bffe17 	ldw	r2,-8(fp)
   1f2b4:	10803117 	ldw	r2,196(r2)
   1f2b8:	10801924 	muli	r2,r2,100
   1f2bc:	e0bffc15 	stw	r2,-16(fp)
   1f2c0:	e0bffe17 	ldw	r2,-8(fp)
   1f2c4:	10803617 	ldw	r2,216(r2)
   1f2c8:	e0fffe17 	ldw	r3,-8(fp)
   1f2cc:	19000a17 	ldw	r4,40(r3)
   1f2d0:	e0ffff17 	ldw	r3,-4(fp)
   1f2d4:	20c7883a 	add	r3,r4,r3
   1f2d8:	01402404 	movi	r5,144
   1f2dc:	1809883a 	mov	r4,r3
   1f2e0:	103ee83a 	callr	r2
   1f2e4:	e0bffe17 	ldw	r2,-8(fp)
   1f2e8:	10c00a17 	ldw	r3,40(r2)
   1f2ec:	e0bfff17 	ldw	r2,-4(fp)
   1f2f0:	10800104 	addi	r2,r2,4
   1f2f4:	1885883a 	add	r2,r3,r2
   1f2f8:	10800023 	ldbuio	r2,0(r2)
   1f2fc:	10803fcc 	andi	r2,r2,255
   1f300:	e0bffd05 	stb	r2,-12(fp)
   1f304:	e0bffd03 	ldbu	r2,-12(fp)
   1f308:	1080004c 	andi	r2,r2,1
   1f30c:	10003126 	beq	r2,zero,1f3d4 <alt_unlock_block_intel+0x140>
   1f310:	e0bffe17 	ldw	r2,-8(fp)
   1f314:	10803617 	ldw	r2,216(r2)
   1f318:	e0fffe17 	ldw	r3,-8(fp)
   1f31c:	19000a17 	ldw	r4,40(r3)
   1f320:	e0ffff17 	ldw	r3,-4(fp)
   1f324:	20c7883a 	add	r3,r4,r3
   1f328:	01401804 	movi	r5,96
   1f32c:	1809883a 	mov	r4,r3
   1f330:	103ee83a 	callr	r2
   1f334:	e0bffe17 	ldw	r2,-8(fp)
   1f338:	10803617 	ldw	r2,216(r2)
   1f33c:	e0fffe17 	ldw	r3,-8(fp)
   1f340:	19000a17 	ldw	r4,40(r3)
   1f344:	e0ffff17 	ldw	r3,-4(fp)
   1f348:	20c7883a 	add	r3,r4,r3
   1f34c:	01403404 	movi	r5,208
   1f350:	1809883a 	mov	r4,r3
   1f354:	103ee83a 	callr	r2
   1f358:	e0bffe17 	ldw	r2,-8(fp)
   1f35c:	10c00a17 	ldw	r3,40(r2)
   1f360:	e0bfff17 	ldw	r2,-4(fp)
   1f364:	1885883a 	add	r2,r3,r2
   1f368:	10800023 	ldbuio	r2,0(r2)
   1f36c:	10803fcc 	andi	r2,r2,255
   1f370:	e0bffd45 	stb	r2,-11(fp)
   1f374:	e0bffd43 	ldbu	r2,-11(fp)
   1f378:	10803fcc 	andi	r2,r2,255
   1f37c:	1080201c 	xori	r2,r2,128
   1f380:	10bfe004 	addi	r2,r2,-128
   1f384:	10000816 	blt	r2,zero,1f3a8 <alt_unlock_block_intel+0x114>
   1f388:	e0bffc17 	ldw	r2,-16(fp)
   1f38c:	10bfffc4 	addi	r2,r2,-1
   1f390:	e0bffc15 	stw	r2,-16(fp)
   1f394:	01000044 	movi	r4,1
   1f398:	001ebd40 	call	1ebd4 <usleep>
   1f39c:	e0bffc17 	ldw	r2,-16(fp)
   1f3a0:	00bfed16 	blt	zero,r2,1f358 <__alt_data_end+0xf001f358>
   1f3a4:	00000106 	br	1f3ac <alt_unlock_block_intel+0x118>
   1f3a8:	0001883a 	nop
   1f3ac:	e0bffc17 	ldw	r2,-16(fp)
   1f3b0:	1000031e 	bne	r2,zero,1f3c0 <alt_unlock_block_intel+0x12c>
   1f3b4:	00bfe304 	movi	r2,-116
   1f3b8:	e0bffb15 	stw	r2,-20(fp)
   1f3bc:	00000506 	br	1f3d4 <alt_unlock_block_intel+0x140>
   1f3c0:	e0bffd43 	ldbu	r2,-11(fp)
   1f3c4:	10801fcc 	andi	r2,r2,127
   1f3c8:	10000226 	beq	r2,zero,1f3d4 <alt_unlock_block_intel+0x140>
   1f3cc:	00bffec4 	movi	r2,-5
   1f3d0:	e0bffb15 	stw	r2,-20(fp)
   1f3d4:	e0bffe17 	ldw	r2,-8(fp)
   1f3d8:	10803617 	ldw	r2,216(r2)
   1f3dc:	e0fffe17 	ldw	r3,-8(fp)
   1f3e0:	19000a17 	ldw	r4,40(r3)
   1f3e4:	e0ffff17 	ldw	r3,-4(fp)
   1f3e8:	20c7883a 	add	r3,r4,r3
   1f3ec:	01403fc4 	movi	r5,255
   1f3f0:	1809883a 	mov	r4,r3
   1f3f4:	103ee83a 	callr	r2
   1f3f8:	e0bffb17 	ldw	r2,-20(fp)
   1f3fc:	e037883a 	mov	sp,fp
   1f400:	dfc00117 	ldw	ra,4(sp)
   1f404:	df000017 	ldw	fp,0(sp)
   1f408:	dec00204 	addi	sp,sp,8
   1f40c:	f800283a 	ret

0001f410 <alt_write_word_intel>:
   1f410:	defff904 	addi	sp,sp,-28
   1f414:	dfc00615 	stw	ra,24(sp)
   1f418:	df000515 	stw	fp,20(sp)
   1f41c:	df000504 	addi	fp,sp,20
   1f420:	e13ffd15 	stw	r4,-12(fp)
   1f424:	e17ffe15 	stw	r5,-8(fp)
   1f428:	e1bfff15 	stw	r6,-4(fp)
   1f42c:	e03ffb15 	stw	zero,-20(fp)
   1f430:	e0bffd17 	ldw	r2,-12(fp)
   1f434:	10803617 	ldw	r2,216(r2)
   1f438:	e0fffd17 	ldw	r3,-12(fp)
   1f43c:	19000a17 	ldw	r4,40(r3)
   1f440:	e0fffe17 	ldw	r3,-8(fp)
   1f444:	20c7883a 	add	r3,r4,r3
   1f448:	01401004 	movi	r5,64
   1f44c:	1809883a 	mov	r4,r3
   1f450:	103ee83a 	callr	r2
   1f454:	e1bfff17 	ldw	r6,-4(fp)
   1f458:	e17ffe17 	ldw	r5,-8(fp)
   1f45c:	e13ffd17 	ldw	r4,-12(fp)
   1f460:	001886c0 	call	1886c <alt_write_value_to_flash>
   1f464:	e0bffd17 	ldw	r2,-12(fp)
   1f468:	10c00a17 	ldw	r3,40(r2)
   1f46c:	e0bffe17 	ldw	r2,-8(fp)
   1f470:	1885883a 	add	r2,r3,r2
   1f474:	10800023 	ldbuio	r2,0(r2)
   1f478:	10803fcc 	andi	r2,r2,255
   1f47c:	e0bffc05 	stb	r2,-16(fp)
   1f480:	e0bffc03 	ldbu	r2,-16(fp)
   1f484:	10803fcc 	andi	r2,r2,255
   1f488:	1080201c 	xori	r2,r2,128
   1f48c:	10bfe004 	addi	r2,r2,-128
   1f490:	103ff40e 	bge	r2,zero,1f464 <__alt_data_end+0xf001f464>
   1f494:	e0bffc03 	ldbu	r2,-16(fp)
   1f498:	10801fcc 	andi	r2,r2,127
   1f49c:	10000226 	beq	r2,zero,1f4a8 <alt_write_word_intel+0x98>
   1f4a0:	00bffec4 	movi	r2,-5
   1f4a4:	e0bffb15 	stw	r2,-20(fp)
   1f4a8:	e0bffd17 	ldw	r2,-12(fp)
   1f4ac:	10803617 	ldw	r2,216(r2)
   1f4b0:	e0fffd17 	ldw	r3,-12(fp)
   1f4b4:	19000a17 	ldw	r4,40(r3)
   1f4b8:	e0fffe17 	ldw	r3,-8(fp)
   1f4bc:	20c7883a 	add	r3,r4,r3
   1f4c0:	01403fc4 	movi	r5,255
   1f4c4:	1809883a 	mov	r4,r3
   1f4c8:	103ee83a 	callr	r2
   1f4cc:	e0bffb17 	ldw	r2,-20(fp)
   1f4d0:	e037883a 	mov	sp,fp
   1f4d4:	dfc00117 	ldw	ra,4(sp)
   1f4d8:	df000017 	ldw	fp,0(sp)
   1f4dc:	dec00204 	addi	sp,sp,8
   1f4e0:	f800283a 	ret

0001f4e4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1f4e4:	defffb04 	addi	sp,sp,-20
   1f4e8:	df000415 	stw	fp,16(sp)
   1f4ec:	df000404 	addi	fp,sp,16
   1f4f0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   1f4f4:	008000c4 	movi	r2,3
   1f4f8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1f4fc:	e0fffd17 	ldw	r3,-12(fp)
   1f500:	008003f4 	movhi	r2,15
   1f504:	10909004 	addi	r2,r2,16960
   1f508:	1887383a 	mul	r3,r3,r2
   1f50c:	00817db4 	movhi	r2,1526
   1f510:	10b84004 	addi	r2,r2,-7936
   1f514:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1f518:	00a00034 	movhi	r2,32768
   1f51c:	10bfffc4 	addi	r2,r2,-1
   1f520:	10c5203a 	divu	r2,r2,r3
   1f524:	e0ffff17 	ldw	r3,-4(fp)
   1f528:	1885203a 	divu	r2,r3,r2
   1f52c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1f530:	e0bffe17 	ldw	r2,-8(fp)
   1f534:	10002526 	beq	r2,zero,1f5cc <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
   1f538:	e03ffc15 	stw	zero,-16(fp)
   1f53c:	00001406 	br	1f590 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1f540:	00a00034 	movhi	r2,32768
   1f544:	10bfffc4 	addi	r2,r2,-1
   1f548:	10bfffc4 	addi	r2,r2,-1
   1f54c:	103ffe1e 	bne	r2,zero,1f548 <__alt_data_end+0xf001f548>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1f550:	e0fffd17 	ldw	r3,-12(fp)
   1f554:	008003f4 	movhi	r2,15
   1f558:	10909004 	addi	r2,r2,16960
   1f55c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1f560:	00817db4 	movhi	r2,1526
   1f564:	10b84004 	addi	r2,r2,-7936
   1f568:	10c7203a 	divu	r3,r2,r3
   1f56c:	00a00034 	movhi	r2,32768
   1f570:	10bfffc4 	addi	r2,r2,-1
   1f574:	10c5203a 	divu	r2,r2,r3
   1f578:	e0ffff17 	ldw	r3,-4(fp)
   1f57c:	1885c83a 	sub	r2,r3,r2
   1f580:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1f584:	e0bffc17 	ldw	r2,-16(fp)
   1f588:	10800044 	addi	r2,r2,1
   1f58c:	e0bffc15 	stw	r2,-16(fp)
   1f590:	e0fffc17 	ldw	r3,-16(fp)
   1f594:	e0bffe17 	ldw	r2,-8(fp)
   1f598:	18bfe916 	blt	r3,r2,1f540 <__alt_data_end+0xf001f540>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1f59c:	e0fffd17 	ldw	r3,-12(fp)
   1f5a0:	008003f4 	movhi	r2,15
   1f5a4:	10909004 	addi	r2,r2,16960
   1f5a8:	1887383a 	mul	r3,r3,r2
   1f5ac:	00817db4 	movhi	r2,1526
   1f5b0:	10b84004 	addi	r2,r2,-7936
   1f5b4:	10c7203a 	divu	r3,r2,r3
   1f5b8:	e0bfff17 	ldw	r2,-4(fp)
   1f5bc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1f5c0:	10bfffc4 	addi	r2,r2,-1
   1f5c4:	103ffe1e 	bne	r2,zero,1f5c0 <__alt_data_end+0xf001f5c0>
   1f5c8:	00000b06 	br	1f5f8 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1f5cc:	e0fffd17 	ldw	r3,-12(fp)
   1f5d0:	008003f4 	movhi	r2,15
   1f5d4:	10909004 	addi	r2,r2,16960
   1f5d8:	1887383a 	mul	r3,r3,r2
   1f5dc:	00817db4 	movhi	r2,1526
   1f5e0:	10b84004 	addi	r2,r2,-7936
   1f5e4:	10c7203a 	divu	r3,r2,r3
   1f5e8:	e0bfff17 	ldw	r2,-4(fp)
   1f5ec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1f5f0:	10bfffc4 	addi	r2,r2,-1
   1f5f4:	00bffe16 	blt	zero,r2,1f5f0 <__alt_data_end+0xf001f5f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1f5f8:	0005883a 	mov	r2,zero
}
   1f5fc:	e037883a 	mov	sp,fp
   1f600:	df000017 	ldw	fp,0(sp)
   1f604:	dec00104 	addi	sp,sp,4
   1f608:	f800283a 	ret

0001f60c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1f60c:	defffb04 	addi	sp,sp,-20
   1f610:	dfc00415 	stw	ra,16(sp)
   1f614:	df000315 	stw	fp,12(sp)
   1f618:	df000304 	addi	fp,sp,12
   1f61c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1f620:	d0a00a97 	ldw	r2,-32726(gp)
   1f624:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f628:	00003106 	br	1f6f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1f62c:	e0bffd17 	ldw	r2,-12(fp)
   1f630:	10800217 	ldw	r2,8(r2)
   1f634:	1009883a 	mov	r4,r2
   1f638:	00099f00 	call	99f0 <strlen>
   1f63c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1f640:	e0bffd17 	ldw	r2,-12(fp)
   1f644:	10c00217 	ldw	r3,8(r2)
   1f648:	e0bffe17 	ldw	r2,-8(fp)
   1f64c:	10bfffc4 	addi	r2,r2,-1
   1f650:	1885883a 	add	r2,r3,r2
   1f654:	10800003 	ldbu	r2,0(r2)
   1f658:	10803fcc 	andi	r2,r2,255
   1f65c:	1080201c 	xori	r2,r2,128
   1f660:	10bfe004 	addi	r2,r2,-128
   1f664:	10800bd8 	cmpnei	r2,r2,47
   1f668:	1000031e 	bne	r2,zero,1f678 <alt_find_file+0x6c>
    {
      len -= 1;
   1f66c:	e0bffe17 	ldw	r2,-8(fp)
   1f670:	10bfffc4 	addi	r2,r2,-1
   1f674:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f678:	e0bffe17 	ldw	r2,-8(fp)
   1f67c:	e0ffff17 	ldw	r3,-4(fp)
   1f680:	1885883a 	add	r2,r3,r2
   1f684:	10800003 	ldbu	r2,0(r2)
   1f688:	10803fcc 	andi	r2,r2,255
   1f68c:	1080201c 	xori	r2,r2,128
   1f690:	10bfe004 	addi	r2,r2,-128
   1f694:	10800be0 	cmpeqi	r2,r2,47
   1f698:	1000081e 	bne	r2,zero,1f6bc <alt_find_file+0xb0>
   1f69c:	e0bffe17 	ldw	r2,-8(fp)
   1f6a0:	e0ffff17 	ldw	r3,-4(fp)
   1f6a4:	1885883a 	add	r2,r3,r2
   1f6a8:	10800003 	ldbu	r2,0(r2)
   1f6ac:	10803fcc 	andi	r2,r2,255
   1f6b0:	1080201c 	xori	r2,r2,128
   1f6b4:	10bfe004 	addi	r2,r2,-128
   1f6b8:	10000a1e 	bne	r2,zero,1f6e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1f6bc:	e0bffd17 	ldw	r2,-12(fp)
   1f6c0:	10800217 	ldw	r2,8(r2)
   1f6c4:	e0fffe17 	ldw	r3,-8(fp)
   1f6c8:	180d883a 	mov	r6,r3
   1f6cc:	e17fff17 	ldw	r5,-4(fp)
   1f6d0:	1009883a 	mov	r4,r2
   1f6d4:	00095000 	call	9500 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f6d8:	1000021e 	bne	r2,zero,1f6e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1f6dc:	e0bffd17 	ldw	r2,-12(fp)
   1f6e0:	00000706 	br	1f700 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1f6e4:	e0bffd17 	ldw	r2,-12(fp)
   1f6e8:	10800017 	ldw	r2,0(r2)
   1f6ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f6f0:	e0fffd17 	ldw	r3,-12(fp)
   1f6f4:	d0a00a84 	addi	r2,gp,-32726
   1f6f8:	18bfcc1e 	bne	r3,r2,1f62c <__alt_data_end+0xf001f62c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1f6fc:	0005883a 	mov	r2,zero
}
   1f700:	e037883a 	mov	sp,fp
   1f704:	dfc00117 	ldw	ra,4(sp)
   1f708:	df000017 	ldw	fp,0(sp)
   1f70c:	dec00204 	addi	sp,sp,8
   1f710:	f800283a 	ret

0001f714 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1f714:	defffc04 	addi	sp,sp,-16
   1f718:	df000315 	stw	fp,12(sp)
   1f71c:	df000304 	addi	fp,sp,12
   1f720:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1f724:	00bffa04 	movi	r2,-24
   1f728:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f72c:	e03ffd15 	stw	zero,-12(fp)
   1f730:	00001906 	br	1f798 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   1f734:	00820034 	movhi	r2,2048
   1f738:	1084fb04 	addi	r2,r2,5100
   1f73c:	e0fffd17 	ldw	r3,-12(fp)
   1f740:	18c00324 	muli	r3,r3,12
   1f744:	10c5883a 	add	r2,r2,r3
   1f748:	10800017 	ldw	r2,0(r2)
   1f74c:	10000f1e 	bne	r2,zero,1f78c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   1f750:	00820034 	movhi	r2,2048
   1f754:	1084fb04 	addi	r2,r2,5100
   1f758:	e0fffd17 	ldw	r3,-12(fp)
   1f75c:	18c00324 	muli	r3,r3,12
   1f760:	10c5883a 	add	r2,r2,r3
   1f764:	e0ffff17 	ldw	r3,-4(fp)
   1f768:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1f76c:	d0e00e97 	ldw	r3,-32710(gp)
   1f770:	e0bffd17 	ldw	r2,-12(fp)
   1f774:	1880020e 	bge	r3,r2,1f780 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1f778:	e0bffd17 	ldw	r2,-12(fp)
   1f77c:	d0a00e95 	stw	r2,-32710(gp)
      }
      rc = i;
   1f780:	e0bffd17 	ldw	r2,-12(fp)
   1f784:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1f788:	00000606 	br	1f7a4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f78c:	e0bffd17 	ldw	r2,-12(fp)
   1f790:	10800044 	addi	r2,r2,1
   1f794:	e0bffd15 	stw	r2,-12(fp)
   1f798:	e0bffd17 	ldw	r2,-12(fp)
   1f79c:	10800810 	cmplti	r2,r2,32
   1f7a0:	103fe41e 	bne	r2,zero,1f734 <__alt_data_end+0xf001f734>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1f7a4:	e0bffe17 	ldw	r2,-8(fp)
}
   1f7a8:	e037883a 	mov	sp,fp
   1f7ac:	df000017 	ldw	fp,0(sp)
   1f7b0:	dec00104 	addi	sp,sp,4
   1f7b4:	f800283a 	ret

0001f7b8 <atexit>:
   1f7b8:	200b883a 	mov	r5,r4
   1f7bc:	000f883a 	mov	r7,zero
   1f7c0:	000d883a 	mov	r6,zero
   1f7c4:	0009883a 	mov	r4,zero
   1f7c8:	001f8941 	jmpi	1f894 <__register_exitproc>

0001f7cc <exit>:
   1f7cc:	defffe04 	addi	sp,sp,-8
   1f7d0:	000b883a 	mov	r5,zero
   1f7d4:	dc000015 	stw	r16,0(sp)
   1f7d8:	dfc00115 	stw	ra,4(sp)
   1f7dc:	2021883a 	mov	r16,r4
   1f7e0:	001f9ac0 	call	1f9ac <__call_exitprocs>
   1f7e4:	00820034 	movhi	r2,2048
   1f7e8:	108b0f04 	addi	r2,r2,11324
   1f7ec:	11000017 	ldw	r4,0(r2)
   1f7f0:	20800f17 	ldw	r2,60(r4)
   1f7f4:	10000126 	beq	r2,zero,1f7fc <exit+0x30>
   1f7f8:	103ee83a 	callr	r2
   1f7fc:	8009883a 	mov	r4,r16
   1f800:	001fb2c0 	call	1fb2c <_exit>

0001f804 <strcpy>:
   1f804:	2906b03a 	or	r3,r5,r4
   1f808:	18c000cc 	andi	r3,r3,3
   1f80c:	2005883a 	mov	r2,r4
   1f810:	1800161e 	bne	r3,zero,1f86c <strcpy+0x68>
   1f814:	29c00017 	ldw	r7,0(r5)
   1f818:	02ffbff4 	movhi	r11,65279
   1f81c:	5affbfc4 	addi	r11,r11,-257
   1f820:	02a02074 	movhi	r10,32897
   1f824:	01c6303a 	nor	r3,zero,r7
   1f828:	3ac9883a 	add	r4,r7,r11
   1f82c:	52a02004 	addi	r10,r10,-32640
   1f830:	20c6703a 	and	r3,r4,r3
   1f834:	1a86703a 	and	r3,r3,r10
   1f838:	18000c1e 	bne	r3,zero,1f86c <strcpy+0x68>
   1f83c:	1011883a 	mov	r8,r2
   1f840:	41c00015 	stw	r7,0(r8)
   1f844:	29400104 	addi	r5,r5,4
   1f848:	29c00017 	ldw	r7,0(r5)
   1f84c:	41800104 	addi	r6,r8,4
   1f850:	3011883a 	mov	r8,r6
   1f854:	3ad3883a 	add	r9,r7,r11
   1f858:	01c6303a 	nor	r3,zero,r7
   1f85c:	48c6703a 	and	r3,r9,r3
   1f860:	1a86703a 	and	r3,r3,r10
   1f864:	183ff626 	beq	r3,zero,1f840 <__alt_data_end+0xf001f840>
   1f868:	00000106 	br	1f870 <strcpy+0x6c>
   1f86c:	100d883a 	mov	r6,r2
   1f870:	28c00003 	ldbu	r3,0(r5)
   1f874:	31800044 	addi	r6,r6,1
   1f878:	29400044 	addi	r5,r5,1
   1f87c:	30ffffc5 	stb	r3,-1(r6)
   1f880:	18c03fcc 	andi	r3,r3,255
   1f884:	18c0201c 	xori	r3,r3,128
   1f888:	18ffe004 	addi	r3,r3,-128
   1f88c:	183ff81e 	bne	r3,zero,1f870 <__alt_data_end+0xf001f870>
   1f890:	f800283a 	ret

0001f894 <__register_exitproc>:
   1f894:	defffa04 	addi	sp,sp,-24
   1f898:	dc000315 	stw	r16,12(sp)
   1f89c:	04020034 	movhi	r16,2048
   1f8a0:	840b0f04 	addi	r16,r16,11324
   1f8a4:	80c00017 	ldw	r3,0(r16)
   1f8a8:	dc400415 	stw	r17,16(sp)
   1f8ac:	dfc00515 	stw	ra,20(sp)
   1f8b0:	18805217 	ldw	r2,328(r3)
   1f8b4:	2023883a 	mov	r17,r4
   1f8b8:	10003726 	beq	r2,zero,1f998 <__register_exitproc+0x104>
   1f8bc:	10c00117 	ldw	r3,4(r2)
   1f8c0:	010007c4 	movi	r4,31
   1f8c4:	20c00e16 	blt	r4,r3,1f900 <__register_exitproc+0x6c>
   1f8c8:	1a000044 	addi	r8,r3,1
   1f8cc:	8800221e 	bne	r17,zero,1f958 <__register_exitproc+0xc4>
   1f8d0:	18c00084 	addi	r3,r3,2
   1f8d4:	18c7883a 	add	r3,r3,r3
   1f8d8:	18c7883a 	add	r3,r3,r3
   1f8dc:	12000115 	stw	r8,4(r2)
   1f8e0:	10c7883a 	add	r3,r2,r3
   1f8e4:	19400015 	stw	r5,0(r3)
   1f8e8:	0005883a 	mov	r2,zero
   1f8ec:	dfc00517 	ldw	ra,20(sp)
   1f8f0:	dc400417 	ldw	r17,16(sp)
   1f8f4:	dc000317 	ldw	r16,12(sp)
   1f8f8:	dec00604 	addi	sp,sp,24
   1f8fc:	f800283a 	ret
   1f900:	00800034 	movhi	r2,0
   1f904:	10800004 	addi	r2,r2,0
   1f908:	10002626 	beq	r2,zero,1f9a4 <__register_exitproc+0x110>
   1f90c:	01006404 	movi	r4,400
   1f910:	d9400015 	stw	r5,0(sp)
   1f914:	d9800115 	stw	r6,4(sp)
   1f918:	d9c00215 	stw	r7,8(sp)
   1f91c:	00000000 	call	0 <__alt_mem_onchip_memory>
   1f920:	d9400017 	ldw	r5,0(sp)
   1f924:	d9800117 	ldw	r6,4(sp)
   1f928:	d9c00217 	ldw	r7,8(sp)
   1f92c:	10001d26 	beq	r2,zero,1f9a4 <__register_exitproc+0x110>
   1f930:	81000017 	ldw	r4,0(r16)
   1f934:	10000115 	stw	zero,4(r2)
   1f938:	02000044 	movi	r8,1
   1f93c:	22405217 	ldw	r9,328(r4)
   1f940:	0007883a 	mov	r3,zero
   1f944:	12400015 	stw	r9,0(r2)
   1f948:	20805215 	stw	r2,328(r4)
   1f94c:	10006215 	stw	zero,392(r2)
   1f950:	10006315 	stw	zero,396(r2)
   1f954:	883fde26 	beq	r17,zero,1f8d0 <__alt_data_end+0xf001f8d0>
   1f958:	18c9883a 	add	r4,r3,r3
   1f95c:	2109883a 	add	r4,r4,r4
   1f960:	1109883a 	add	r4,r2,r4
   1f964:	21802215 	stw	r6,136(r4)
   1f968:	01800044 	movi	r6,1
   1f96c:	12406217 	ldw	r9,392(r2)
   1f970:	30cc983a 	sll	r6,r6,r3
   1f974:	4992b03a 	or	r9,r9,r6
   1f978:	12406215 	stw	r9,392(r2)
   1f97c:	21c04215 	stw	r7,264(r4)
   1f980:	01000084 	movi	r4,2
   1f984:	893fd21e 	bne	r17,r4,1f8d0 <__alt_data_end+0xf001f8d0>
   1f988:	11006317 	ldw	r4,396(r2)
   1f98c:	218cb03a 	or	r6,r4,r6
   1f990:	11806315 	stw	r6,396(r2)
   1f994:	003fce06 	br	1f8d0 <__alt_data_end+0xf001f8d0>
   1f998:	18805304 	addi	r2,r3,332
   1f99c:	18805215 	stw	r2,328(r3)
   1f9a0:	003fc606 	br	1f8bc <__alt_data_end+0xf001f8bc>
   1f9a4:	00bfffc4 	movi	r2,-1
   1f9a8:	003fd006 	br	1f8ec <__alt_data_end+0xf001f8ec>

0001f9ac <__call_exitprocs>:
   1f9ac:	defff504 	addi	sp,sp,-44
   1f9b0:	df000915 	stw	fp,36(sp)
   1f9b4:	dd400615 	stw	r21,24(sp)
   1f9b8:	dc800315 	stw	r18,12(sp)
   1f9bc:	dfc00a15 	stw	ra,40(sp)
   1f9c0:	ddc00815 	stw	r23,32(sp)
   1f9c4:	dd800715 	stw	r22,28(sp)
   1f9c8:	dd000515 	stw	r20,20(sp)
   1f9cc:	dcc00415 	stw	r19,16(sp)
   1f9d0:	dc400215 	stw	r17,8(sp)
   1f9d4:	dc000115 	stw	r16,4(sp)
   1f9d8:	d9000015 	stw	r4,0(sp)
   1f9dc:	2839883a 	mov	fp,r5
   1f9e0:	04800044 	movi	r18,1
   1f9e4:	057fffc4 	movi	r21,-1
   1f9e8:	00820034 	movhi	r2,2048
   1f9ec:	108b0f04 	addi	r2,r2,11324
   1f9f0:	12000017 	ldw	r8,0(r2)
   1f9f4:	45005217 	ldw	r20,328(r8)
   1f9f8:	44c05204 	addi	r19,r8,328
   1f9fc:	a0001c26 	beq	r20,zero,1fa70 <__call_exitprocs+0xc4>
   1fa00:	a0800117 	ldw	r2,4(r20)
   1fa04:	15ffffc4 	addi	r23,r2,-1
   1fa08:	b8000d16 	blt	r23,zero,1fa40 <__call_exitprocs+0x94>
   1fa0c:	14000044 	addi	r16,r2,1
   1fa10:	8421883a 	add	r16,r16,r16
   1fa14:	8421883a 	add	r16,r16,r16
   1fa18:	84402004 	addi	r17,r16,128
   1fa1c:	a463883a 	add	r17,r20,r17
   1fa20:	a421883a 	add	r16,r20,r16
   1fa24:	e0001e26 	beq	fp,zero,1faa0 <__call_exitprocs+0xf4>
   1fa28:	80804017 	ldw	r2,256(r16)
   1fa2c:	e0801c26 	beq	fp,r2,1faa0 <__call_exitprocs+0xf4>
   1fa30:	bdffffc4 	addi	r23,r23,-1
   1fa34:	843fff04 	addi	r16,r16,-4
   1fa38:	8c7fff04 	addi	r17,r17,-4
   1fa3c:	bd7ff91e 	bne	r23,r21,1fa24 <__alt_data_end+0xf001fa24>
   1fa40:	00800034 	movhi	r2,0
   1fa44:	10800004 	addi	r2,r2,0
   1fa48:	10000926 	beq	r2,zero,1fa70 <__call_exitprocs+0xc4>
   1fa4c:	a0800117 	ldw	r2,4(r20)
   1fa50:	1000301e 	bne	r2,zero,1fb14 <__call_exitprocs+0x168>
   1fa54:	a0800017 	ldw	r2,0(r20)
   1fa58:	10003226 	beq	r2,zero,1fb24 <__call_exitprocs+0x178>
   1fa5c:	a009883a 	mov	r4,r20
   1fa60:	98800015 	stw	r2,0(r19)
   1fa64:	00000000 	call	0 <__alt_mem_onchip_memory>
   1fa68:	9d000017 	ldw	r20,0(r19)
   1fa6c:	a03fe41e 	bne	r20,zero,1fa00 <__alt_data_end+0xf001fa00>
   1fa70:	dfc00a17 	ldw	ra,40(sp)
   1fa74:	df000917 	ldw	fp,36(sp)
   1fa78:	ddc00817 	ldw	r23,32(sp)
   1fa7c:	dd800717 	ldw	r22,28(sp)
   1fa80:	dd400617 	ldw	r21,24(sp)
   1fa84:	dd000517 	ldw	r20,20(sp)
   1fa88:	dcc00417 	ldw	r19,16(sp)
   1fa8c:	dc800317 	ldw	r18,12(sp)
   1fa90:	dc400217 	ldw	r17,8(sp)
   1fa94:	dc000117 	ldw	r16,4(sp)
   1fa98:	dec00b04 	addi	sp,sp,44
   1fa9c:	f800283a 	ret
   1faa0:	a0800117 	ldw	r2,4(r20)
   1faa4:	80c00017 	ldw	r3,0(r16)
   1faa8:	10bfffc4 	addi	r2,r2,-1
   1faac:	15c01426 	beq	r2,r23,1fb00 <__call_exitprocs+0x154>
   1fab0:	80000015 	stw	zero,0(r16)
   1fab4:	183fde26 	beq	r3,zero,1fa30 <__alt_data_end+0xf001fa30>
   1fab8:	95c8983a 	sll	r4,r18,r23
   1fabc:	a0806217 	ldw	r2,392(r20)
   1fac0:	a5800117 	ldw	r22,4(r20)
   1fac4:	2084703a 	and	r2,r4,r2
   1fac8:	10000b26 	beq	r2,zero,1faf8 <__call_exitprocs+0x14c>
   1facc:	a0806317 	ldw	r2,396(r20)
   1fad0:	2088703a 	and	r4,r4,r2
   1fad4:	20000c1e 	bne	r4,zero,1fb08 <__call_exitprocs+0x15c>
   1fad8:	89400017 	ldw	r5,0(r17)
   1fadc:	d9000017 	ldw	r4,0(sp)
   1fae0:	183ee83a 	callr	r3
   1fae4:	a0800117 	ldw	r2,4(r20)
   1fae8:	15bfbf1e 	bne	r2,r22,1f9e8 <__alt_data_end+0xf001f9e8>
   1faec:	98800017 	ldw	r2,0(r19)
   1faf0:	153fcf26 	beq	r2,r20,1fa30 <__alt_data_end+0xf001fa30>
   1faf4:	003fbc06 	br	1f9e8 <__alt_data_end+0xf001f9e8>
   1faf8:	183ee83a 	callr	r3
   1fafc:	003ff906 	br	1fae4 <__alt_data_end+0xf001fae4>
   1fb00:	a5c00115 	stw	r23,4(r20)
   1fb04:	003feb06 	br	1fab4 <__alt_data_end+0xf001fab4>
   1fb08:	89000017 	ldw	r4,0(r17)
   1fb0c:	183ee83a 	callr	r3
   1fb10:	003ff406 	br	1fae4 <__alt_data_end+0xf001fae4>
   1fb14:	a0800017 	ldw	r2,0(r20)
   1fb18:	a027883a 	mov	r19,r20
   1fb1c:	1029883a 	mov	r20,r2
   1fb20:	003fb606 	br	1f9fc <__alt_data_end+0xf001f9fc>
   1fb24:	0005883a 	mov	r2,zero
   1fb28:	003ffb06 	br	1fb18 <__alt_data_end+0xf001fb18>

0001fb2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1fb2c:	defffd04 	addi	sp,sp,-12
   1fb30:	df000215 	stw	fp,8(sp)
   1fb34:	df000204 	addi	fp,sp,8
   1fb38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1fb3c:	0001883a 	nop
   1fb40:	e0bfff17 	ldw	r2,-4(fp)
   1fb44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1fb48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1fb4c:	10000226 	beq	r2,zero,1fb58 <_exit+0x2c>
    ALT_SIM_FAIL();
   1fb50:	002af070 	cmpltui	zero,zero,43969
   1fb54:	00000106 	br	1fb5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1fb58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1fb5c:	003fff06 	br	1fb5c <__alt_data_end+0xf001fb5c>
