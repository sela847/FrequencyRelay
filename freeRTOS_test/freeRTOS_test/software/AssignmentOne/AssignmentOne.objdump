
AssignmentOne.elf:     file format elf32-littlenios2
AssignmentOne.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000254

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001f6e4 memsz 0x0001f6e4 flags r-x
    LOAD off    0x00021000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00021000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00002c54 memsz 0x0008006c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01000000  01000000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000234  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f4b0  00000254  00000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ae8  08000000  08000000  00021000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000216c  08000ae8  08000ae8  00021ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0007d418  08002c54  08002c54  00023c54  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001f704  0001f704  00023c54  2**0
                  CONTENTS
  7 .flash_controller 00000000  01000020  01000020  00023c54  2**0
                  CONTENTS
  8 .sdram        00000000  0808006c  0808006c  00023c54  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00023c54  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001268  00000000  00000000  00023c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00031287  00000000  00000000  00024ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000c2cf  00000000  00000000  00056167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010d95  00000000  00000000  00062436  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000045b4  00000000  00000000  000731cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000660c  00000000  00000000  00077780  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001e1fd  00000000  00000000  0007dd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  0009bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001dc0  00000000  00000000  0009bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000a3fc1  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  000a3fc4  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000a3fc9  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000a3fca  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000a3fcb  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000a3fcf  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000a3fd3  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000a3fd7  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000a3fe0  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000a3fe9  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000005  00000000  00000000  000a3ff2  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000037  00000000  00000000  000a3ff7  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b3e3a  00000000  00000000  000a402e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000254 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000ae8 l    d  .rwdata	00000000 .rwdata
08002c54 l    d  .bss	00000000 .bss
0001f704 l    d  .onchip_memory	00000000 .onchip_memory
01000020 l    d  .flash_controller	00000000 .flash_controller
0808006c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AssignmentOne_bsp//obj/HAL/src/crt0.o
00000298 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/port_asm.o
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 croutine.c
08002d50 l     O .bss	00000028 pxReadyCoRoutineLists
08002d78 l     O .bss	00000014 xDelayedCoRoutineList1
08002d8c l     O .bss	00000014 xDelayedCoRoutineList2
08002c54 l     O .bss	00000004 pxDelayedCoRoutineList
08002c58 l     O .bss	00000004 pxOverflowDelayedCoRoutineList
08002da0 l     O .bss	00000014 xPendingReadyCoRoutineList
08002c60 l     O .bss	00000004 uxTopCoRoutineReadyPriority
08002c64 l     O .bss	00000004 xCoRoutineTickCount
08002c68 l     O .bss	00000004 xLastTickCount
08002c6c l     O .bss	00000004 xPassedTicks
000007bc l     F .text	000000a0 prvInitialiseCoRoutineLists
00000498 l     F .text	000000e0 prvCheckPendingReadyList
00000578 l     F .text	00000158 prvCheckDelayedList
00000000 l    df *ABS*	00000000 event_groups.c
00000f60 l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 heap.c
08002db4 l     O .bss	0007d000 xHeap
08002bf4 l     O .rwdata	00000002 heapSTRUCT_SIZE
08002bf8 l     O .rwdata	00000004 xTotalHeapSize
08002c70 l     O .bss	00000008 xStart
08002c78 l     O .bss	00000004 pxEnd
08002bfc l     O .rwdata	00000004 xFreeBytesRemaining
00001210 l     F .text	000000c0 prvHeapInit
000012d0 l     F .text	00000134 prvInsertBlockIntoFreeList
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
000016d4 l     F .text	0000002c prvReadGp
00001838 l     F .text	0000009c prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 queue.c
00002690 l     F .text	00000190 prvCopyDataToQueue
00002a40 l     F .text	00000058 prvIsQueueFull
000028bc l     F .text	000000f4 prvUnlockQueue
00002820 l     F .text	0000009c prvCopyDataFromQueue
000029b0 l     F .text	00000050 prvIsQueueEmpty
00000000 l    df *ABS*	00000000 tasks.c
0807fdb4 l     O .bss	000000f0 pxReadyTasksLists
0807fea4 l     O .bss	00000014 xDelayedTaskList1
0807feb8 l     O .bss	00000014 xDelayedTaskList2
08002c80 l     O .bss	00000004 pxDelayedTaskList
08002c84 l     O .bss	00000004 pxOverflowDelayedTaskList
0807fecc l     O .bss	00000014 xPendingReadyList
0807fee0 l     O .bss	00000014 xTasksWaitingTermination
08002c88 l     O .bss	00000004 uxTasksDeleted
08002c8c l     O .bss	00000004 uxCurrentNumberOfTasks
08002c90 l     O .bss	00000004 xTickCount
08002c94 l     O .bss	00000004 uxTopReadyPriority
08002c98 l     O .bss	00000004 xSchedulerRunning
08002c9c l     O .bss	00000004 uxPendedTicks
08002ca0 l     O .bss	00000004 xYieldPending
08002ca4 l     O .bss	00000004 xNumOfOverflows
08002ca8 l     O .bss	00000004 uxTaskNumber
08002c00 l     O .rwdata	00000004 xNextTaskUnblockTime
08002cac l     O .bss	00000004 uxSchedulerSuspended
00003bdc l     F .text	000000c4 prvAllocateTCBAndStack
000038b0 l     F .text	0000014c prvInitialiseTCBVariables
000039fc l     F .text	000000ac prvInitialiseTaskLists
00003da8 l     F .text	00000068 prvResetNextTaskUnblockTime
00003b50 l     F .text	0000008c prvAddCurrentTaskToDelayedList
00003894 l     F .text	0000001c prvIdleTask
08000039 l     O .rodata	00000014 ucExpectedStackBytes.2845
00003aa8 l     F .text	000000a8 prvCheckTasksWaitingTermination
00003d64 l     F .text	00000044 prvDeleteTCB
00003ca0 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
0807fef4 l     O .bss	00000014 xActiveTimerList1
0807ff08 l     O .bss	00000014 xActiveTimerList2
08002cb0 l     O .bss	00000004 pxCurrentTimerList
08002cb4 l     O .bss	00000004 pxOverflowTimerList
08002cb8 l     O .bss	00000004 xTimerQueue
00005008 l     F .text	0000007c prvCheckForValidListAndQueue
00004ae4 l     F .text	0000003c prvTimerTask
00004a2c l     F .text	000000b8 prvProcessExpiredTimer
00004c84 l     F .text	000000dc prvInsertTimerInActiveList
00004bc0 l     F .text	00000060 prvGetNextExpireTime
00004b20 l     F .text	000000a0 prvProcessTimerOrBlockTask
00004d60 l     F .text	00000198 prvProcessReceivedCommands
00004c20 l     F .text	00000064 prvSampleTimeNow
08002cbc l     O .bss	00000004 xLastTime.2766
00004ef8 l     F .text	00000110 prvSwitchTimerLists
00000000 l    df *ABS*	00000000 hello_world.c
08002cc4 l     O .bss	00000004 Q_freq_data
000054f4 l     F .text	0000003c Switch_Control_Task
00005530 l     F .text	00000068 Load_LED_Ctrl_Task
00005c5c l     F .text	00000164 Keyboard_Task
0000595c l     F .text	00000300 Stability_Monitor_Task
00005598 l     F .text	000003c4 Load_Management_Task
00005dc0 l     F .text	000007a4 VGA_Task
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800037e l     O .rodata	00000010 zeroes.4389
0800038e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0800039e l     O .rodata	00000010 zeroes.4404
0000da18 l     F .text	000000bc __sbprintf
080003ae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000dc28 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000f758 l     F .text	00000008 __fp_unlock
0000f76c l     F .text	0000019c __sinit.part.1
0000f908 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08000ae8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08000f2c l     O .rwdata	00000020 lc_ctype_charset
08000f0c l     O .rwdata	00000020 lc_message_charset
08000f4c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
080003e0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08000514 l     O .rodata	00000010 blanks.4332
08000504 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
00013ea0 l     F .text	000000fc __sprint_r.part.0
08000534 l     O .rodata	00000010 blanks.4348
08000524 l     O .rodata	00000010 zeroes.4349
0001542c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001739c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000174a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000174d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000175c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000176a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00017874 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08002c38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00017ac0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017bf4 l     F .text	00000034 alt_dev_reg
08001534 l     O .rwdata	000000dc flash_controller
08001610 l     O .rwdata	00001060 jtag_uart
08002670 l     O .rwdata	00000120 character_lcd
08002790 l     O .rwdata	000000c4 uart
08002854 l     O .rwdata	00000038 ps2
0800288c l     O .rwdata	00000048 video_character_buffer_with_dma
080028d4 l     O .rwdata	00000054 video_pixel_buffer_dma
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
00017fb4 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
00018e04 l     F .text	00000080 alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00019eac l     F .text	00000210 altera_avalon_jtag_uart_irq
0001a0bc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
08002c3c l     O .rwdata	00000004 colstart
0001a6f4 l     F .text	000000b8 lcd_write_command
0001a7ac l     F .text	000000d8 lcd_write_data
0001a884 l     F .text	000000d0 lcd_clear_screen
0001a954 l     F .text	000001f0 lcd_repaint_screen
0001ab44 l     F .text	000000cc lcd_scroll_up
0001ac10 l     F .text	000002ac lcd_handle_escape
0001b390 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b5cc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0001b870 l     F .text	000000a0 altera_avalon_uart_irq
0001b910 l     F .text	000000e4 altera_avalon_uart_rxirq
0001b9f4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0001bb90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0001bda8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
08002d44 l     O .bss	00000004 state.2101
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001df54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001e240 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0001e380 l     F .text	0000003c alt_get_errno
0001e3bc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0001eb60 l     F .text	000000cc alt_write_word_amd
0001ea44 l     F .text	0000011c alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
0001ee38 l     F .text	0000017c alt_unlock_block_intel
0001efb4 l     F .text	000000d4 alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
08000966 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000120d8 g     F .text	00000074 _mprec_log10
000121c4 g     F .text	0000008c __any_on
000159c8 g     F .text	00000054 _isatty_r
080003ec g     O .rodata	00000028 __mprec_tinytens
000177b0 g     F .text	0000007c alt_main
0001f3a8 g     F .text	00000090 strcpy
0001d1f4 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
000093fc g     F .text	000000c0 _puts_r
000188c8 g     F .text	00000040 alt_read_query_entry_32bit
0001c1dc g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0807ff6c g     O .bss	00000100 alt_irq
00015a1c g     F .text	00000060 _lseek_r
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
000034b4 g     F .text	00000080 vTaskPlaceOnUnorderedEventList
000011d0 g     F .text	00000020 xPortGetFreeHeapSize
00018078 g     F .text	000002a8 alt_flash_cfi_write
00000cb8 g     F .text	0000003c xEventGroupGetBitsFromISR
00017178 g     F .text	00000088 .hidden __eqdf2
0808006c g       *ABS*	00000000 __alt_heap_start
00004874 g     F .text	000000ac xTimerCreate
000093c0 g     F .text	0000003c printf
00015c34 g     F .text	0000009c _wcrtomb_r
0807ff44 g     O .bss	00000014 Prev_Five_Freq
00012954 g     F .text	0000005c __sseek
0000faa8 g     F .text	00000010 __sinit
00015adc g     F .text	00000140 __swbuf_r
0001c7c8 g     F .text	000000fc alt_up_char_buffer_string
0001bff4 g     F .text	00000034 read_CE_bit
00002ae0 g     F .text	00000098 vQueueWaitForMessageRestricted
00010570 g     F .text	0000007c _setlocale_r
0000f910 g     F .text	00000068 __sfmoreglue
00017850 g     F .text	00000024 __malloc_unlock
0001c37c g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
08002cc8 g     O .bss	00000004 Maintenance
0001c6fc g     F .text	000000cc alt_up_char_buffer_draw
00000938 g     F .text	0000017c xEventGroupSync
000110f8 g     F .text	0000015c memmove
0000085c g     F .text	00000088 xCoRoutineRemoveFromEventList
08002928 g     O .rwdata	00000198 key_table
000040a8 g     F .text	00000054 vTaskEnterCritical
0000fa90 g     F .text	00000018 _cleanup
08002ccc g     O .bss	00000004 Current_Switch_State
0807ff58 g     O .bss	00000014 Current_ROC_Freq
0000207c g     F .text	000000e0 xQueueGenericSendFromISR
08002cd0 g     O .bss	00000004 Init_Load
00011254 g     F .text	000000a8 _Balloc
00006f0c g     F .text	00000070 .hidden __fixsfsi
0001c95c g     F .text	00000194 alt_up_pixel_buffer_dma_draw
00007988 g     F .text	000000dc .hidden __gtdf2
00018a60 g     F .text	00000050 alt_write_flash_command_32bit_device_16bit_mode
0001c920 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	00000000 __reset
00001d4c g     F .text	00000090 xQueueGiveMutexRecursive
08002c7c g     O .bss	00000004 pxCurrentTCB
0001d7d4 g     F .text	00000070 get_multi_byte_make_code_index
0001596c g     F .text	0000005c _fstat_r
0001856c g     F .text	000002e0 alt_flash_program_block
08002cd4 g     O .bss	00000004 semaphore
08002d30 g     O .bss	00000004 errno
000128d0 g     F .text	00000008 __seofread
00012c64 g     F .text	0000123c ___svfiprintf_internal_r
0001dbbc g     F .text	00000064 set_keyboard_rate
08002d3c g     O .bss	00000004 alt_argv
000043ac g     F .text	00000188 xTaskNotify
0800abf2 g       *ABS*	00000000 _gp
0001e778 g     F .text	00000030 usleep
00006a28 g     F .text	000004e4 .hidden __subsf3
0001caf0 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00000ab4 g     F .text	0000019c xEventGroupWaitBits
0001dd38 g     F .text	00000078 reset_keyboard
080013b4 g     O .rwdata	00000180 alt_fd_list
000017e0 g     F .text	00000038 xPortStartScheduler
08002cd8 g     O .bss	00000004 Ld_Manage_State
00002f24 g     F .text	00000048 vTaskEndScheduler
0001e0f4 g     F .text	00000090 alt_find_dev
00009120 g     F .text	00000148 memcpy
00003448 g     F .text	0000006c vTaskPlaceOnEventList
00002b78 g     F .text	000001c4 xTaskGenericCreate
0001c8c4 g     F .text	0000005c alt_up_char_buffer_clear
0000f760 g     F .text	0000000c _cleanup_r
00008af8 g     F .text	000000dc .hidden __floatsidf
0001e304 g     F .text	0000007c alt_io_redirect
00017200 g     F .text	000000f4 .hidden __ltdf2
00002514 g     F .text	0000007c xQueuePeekFromISR
0001f704 g       *ABS*	00000000 __DTOR_END__
000094bc g     F .text	00000014 puts
00001150 g     F .text	00000080 vPortFree
000127b4 g     F .text	00000074 __fpclassifyd
0000029c g     F .text	00000144 xCoRoutineCreate
00012034 g     F .text	000000a4 __ratio
01000000 g       *ABS*	00000000 __alt_mem_flash_controller
00015410 g     F .text	0000001c __vfiprintf_internal
0001cbac g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0001a2b4 g     F .text	0000021c altera_avalon_jtag_uart_read
00009390 g     F .text	00000030 _printf_r
00008fe8 g     F .text	00000064 .hidden __udivsi3
000175fc g     F .text	000000a4 isatty
0800043c g     O .rodata	000000c8 __mprec_tens
00003d04 g     F .text	00000060 uxTaskGetStackHighWaterMark
0001cfe4 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
000105ec g     F .text	0000000c __locale_charset
00006564 g     F .text	000000c8 .hidden __lesf2
00001498 g     F .text	0000008c vListInsertEnd
08002d2c g     O .bss	00000004 __malloc_top_pad
000008e4 g     F .text	00000054 xEventGroupCreate
08002c0c g     O .rwdata	00000004 __mb_cur_max
0001061c g     F .text	0000000c _localeconv_r
00011660 g     F .text	0000003c __i2b
0000ff2c g     F .text	000004bc __sfvwrite_r
00012828 g     F .text	00000054 _sbrk_r
0001ec2c g     F .text	00000080 alt_program_intel
0001d508 g     F .text	00000084 helper_plot_pixel
00000ee8 g     F .text	0000003c vEventGroupSetBitsCallback
00015a7c g     F .text	00000060 _read_r
0000146c g     F .text	0000002c vListInitialiseItem
0001dedc g     F .text	00000078 alt_dcache_flush
08002c2c g     O .rwdata	00000004 alt_max_fd
0001884c g     F .text	0000003c alt_read_query_entry_8bit
000018d4 g     F .text	0000004c vPortSysTickHandler
00015660 g     F .text	000000f0 _fclose_r
0001c028 g     F .text	00000030 read_num_bytes_available
0001ecac g     F .text	0000018c alt_erase_block_intel
0000f728 g     F .text	00000030 fflush
08002ac0 g     O .rwdata	00000066 ascii_codes
08002d28 g     O .bss	00000004 __malloc_max_sbrked_mem
00001920 g     F .text	00000170 alt_irq_register
0001bf90 g     F .text	00000034 read_RI_bit
00008bd4 g     F .text	00000110 .hidden __extendsfdf2
000168cc g     F .text	000008ac .hidden __adddf3
00011ddc g     F .text	0000010c __b2d
0001cbe0 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
00016394 g     F .text	00000538 .hidden __umoddi3
000176dc g     F .text	000000d4 lseek
08002c04 g     O .rwdata	00000004 _global_impure_ptr
00000cf4 g     F .text	00000180 xEventGroupSetBits
00012250 g     F .text	00000564 _realloc_r
0808006c g       *ABS*	00000000 __bss_end
0001cd08 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
0001e670 g     F .text	00000108 alt_tick
00015e1c g     F .text	00000578 .hidden __udivdi3
000158c8 g     F .text	00000024 _fputwc_r
08000414 g     O .rodata	00000028 __mprec_bigtens
00011444 g     F .text	00000104 __s2b
000172f4 g     F .text	000000a8 .hidden __floatunsidf
00011b1c g     F .text	00000060 __mcmp
00000fd0 g     F .text	00000180 pvPortMalloc
0001b7cc g     F .text	000000a4 altera_avalon_uart_init
0001c08c g     F .text	0000002c read_data_byte
0000fac8 g     F .text	00000018 __fp_lock_all
08002cdc g     O .bss	00000004 LoadTimeExp
00002654 g     F .text	0000003c vQueueDelete
00001818 g     F .text	00000020 vPortEndScheduler
00001404 g     F .text	00000068 vListInitialise
0001e5d4 g     F .text	0000009c alt_alarm_stop
0001bfc4 g     F .text	00000030 read_RE_bit
08002d34 g     O .bss	00000004 alt_irq_active
0000017c g     F .exceptions	000000d8 alt_irq_handler
0800138c g     O .rwdata	00000028 alt_dev_null
000030dc g     F .text	00000028 xTaskGetTickCount
00001edc g     F .text	000001a0 xQueueGenericSend
00005104 g     F .text	0000003c MaintenanceStateButton
00018d68 g     F .text	0000009c alt_set_flash_algorithm_func
0001c23c g     F .text	00000074 alt_up_ps2_write_data_byte
00011548 g     F .text	00000068 __hi0bits
0001d440 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
00008a78 g     F .text	00000080 .hidden __fixdfsi
00003fac g     F .text	000000fc xTaskPriorityDisinherit
08002ce0 g     O .bss	00000004 Thresh_Val
00018908 g     F .text	00000044 alt_write_flash_command_8bit_device_8bit_mode
08002b8c g     O .rwdata	00000066 multi_byte_make_code
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
08002c24 g     O .rwdata	00000008 alt_dev_list
00017afc g     F .text	000000f8 write
08002ce4 g     O .bss	00000004 LoadTimer
0001d58c g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
000035a0 g     F .text	000000f4 xTaskRemoveFromEventList
00017510 g     F .text	000000b0 fstat
08002ce8 g     O .bss	00000004 threshold_mutex
00000c50 g     F .text	00000068 xEventGroupClearBits
00017200 g     F .text	000000f4 .hidden __ledf2
00019bbc g     F .text	000000d8 alt_check_primary_table
00011894 g     F .text	00000140 __pow5mult
00013fb4 g     F .text	0000145c ___vfiprintf_internal_r
08002d20 g     O .bss	00000004 __nlocale_changed
0000904c g     F .text	00000058 .hidden __umodsi3
000183ac g     F .text	00000064 alt_flash_cfi_read
00018b00 g     F .text	00000038 alt_write_native_8bit
0808006c g       *ABS*	00000000 end
0001c56c g     F .text	00000098 alt_up_ps2_write_fd
0001894c g     F .text	00000078 alt_write_flash_command_16bit_device_8bit_mode
0001aebc g     F .text	000004d4 altera_avalon_lcd_16207_write
00002d3c g     F .text	000000d0 vTaskDelete
0001c640 g     F .text	00000080 alt_up_char_buffer_init
0001bde4 g     F .text	000001ac altera_avalon_uart_write
00018e84 g     F .text	000005c8 alt_read_cfi_table
00019df8 g     F .text	000000b4 altera_avalon_jtag_uart_init
000041a0 g     F .text	00000038 pvTaskIncrementMutexHeldCount
0001f704 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0001b648 g     F .text	00000074 alt_avalon_timer_sc_init
08002cec g     O .bss	00000004 Prev_Stable
0001b71c g     F .text	00000060 altera_avalon_uart_write_fd
00008e8c g     F .text	00000064 .hidden __clzsi2
0001b77c g     F .text	00000050 altera_avalon_uart_close_fd
0001a4d0 g     F .text	00000224 altera_avalon_jtag_uart_write
00017fe8 g     F .text	00000090 alt_flash_cfi_init
0000fab8 g     F .text	00000004 __sfp_lock_acquire
00011014 g     F .text	000000e4 memchr
0000b804 g     F .text	000021f8 ___vfprintf_internal_r
000094d0 g     F .text	00000058 _sprintf_r
000037a8 g     F .text	000000c4 xTaskCheckForTimeOut
000006d0 g     F .text	000000ec vCoRoutineSchedule
0000fc1c g     F .text	00000310 _free_r
000105f8 g     F .text	00000010 __locale_mb_cur_max
08002c5c g     O .bss	00000004 pxCurrentCoRoutine
0001f550 g     F .text	00000180 __call_exitprocs
0001dc20 g     F .text	00000118 translate_make_code
08002d1c g     O .bss	00000004 __mlocale_changed
000041d8 g     F .text	000000cc ulTaskNotifyTake
08002c10 g     O .rwdata	00000004 __malloc_sbrk_base
00000254 g     F .text	00000048 _start
08002d48 g     O .bss	00000004 _alt_tick_rate
00002f6c g     F .text	0000002c vTaskSuspendAll
00003104 g     F .text	0000002c xTaskGetTickCountFromISR
000119d4 g     F .text	00000148 __lshift
08002d4c g     O .bss	00000004 _alt_nticks
000178b0 g     F .text	000000fc read
00017c60 g     F .text	00000354 alt_sys_init
00006f7c g     F .text	00000124 .hidden __floatsisf
00012a94 g     F .text	000001d0 __ssprint_r
000015fc g     F .text	00000098 uxListRemove
0001f438 g     F .text	00000118 __register_exitproc
0001c488 g     F .text	00000058 alt_up_ps2_clear_fifo
00018888 g     F .text	00000040 alt_read_query_entry_16bit
0001169c g     F .text	000001f8 __multiply
0001a15c g     F .text	00000068 altera_avalon_jtag_uart_close
00003e84 g     F .text	00000128 vTaskPriorityInherit
0807ff1c g     O .bss	00000028 __malloc_current_mallinfo
00018ba4 g     F .text	000001c4 alt_set_flash_width_func
00011ee8 g     F .text	0000014c __d2b
08002cf0 g     O .bss	00000004 freqSemaphore
00003314 g     F .text	00000134 vTaskSwitchContext
00004534 g     F .text	000001bc xTaskNotifyFromISR
0000522c g     F .text	0000004c freq_relay_isr
00019c94 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08002cf4 g     O .bss	00000004 StabilityQ
0001f2b8 g     F .text	000000a4 alt_get_fd
00003534 g     F .text	0000006c vTaskPlaceOnEventListRestricted
0001f088 g     F .text	00000128 alt_busy_sleep
00015548 g     F .text	00000054 _close_r
000042a4 g     F .text	00000108 xTaskNotifyWait
0001e834 g     F .text	00000210 alt_erase_block_amd
0001db00 g     F .text	000000bc decode_scancode
000090a4 g     F .text	0000007c memcmp
00019d54 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0808006c g       *ABS*	00000000 __alt_stack_base
00019da4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002cf8 g     O .bss	00000004 PRVGADraw
00004920 g     F .text	000000dc xTimerGenericCommand
0000dad4 g     F .text	00000154 __swsetup_r
0001944c g     F .text	00000770 alt_read_cfi_width
00001694 g     F .text	00000040 vApplicationStackOverflowHook
000070a0 g     F .text	000008e8 .hidden __divdf3
0000f978 g     F .text	00000118 __sfp
08002cfc g     O .bss	00000004 Current_Stable
0001214c g     F .text	00000078 __copybits
00003130 g     F .text	00000020 uxTaskGetNumberOfTasks
08002d00 g     O .bss	00000001 byte
08000f84 g     O .rwdata	00000408 __malloc_av_
0000fac4 g     F .text	00000004 __sinit_lock_release
00007a64 g     F .text	00000718 .hidden __muldf3
0001287c g     F .text	00000054 __sread
0001f1b0 g     F .text	00000108 alt_find_file
0001df90 g     F .text	000000a4 alt_dev_llist_insert
0001782c g     F .text	00000024 __malloc_lock
00017a10 g     F .text	000000b0 sbrk
0000962c g     F .text	000021d8 ___svfprintf_internal_r
00001ddc g     F .text	000000a8 xQueueTakeMutexRecursive
0000f6cc g     F .text	0000005c _fflush_r
00000e74 g     F .text	00000074 vEventGroupDelete
0001559c g     F .text	000000c4 _calloc_r
08002c40 g     O .rwdata	00000008 alt_flash_dev_list
00018a14 g     F .text	0000004c alt_write_flash_command_16bit_device_16bit_mode
08002c54 g       *ABS*	00000000 __bss_start
00009268 g     F .text	00000128 memset
00005278 g     F .text	0000027c main
0001d844 g     F .text	00000070 get_single_byte_make_code_index
08002d40 g     O .bss	00000004 alt_envp
08002d24 g     O .bss	00000004 __malloc_max_total_mem
0001cb4c g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
0001c6c0 g     F .text	0000003c alt_up_char_buffer_open_dev
00019cf4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00015c1c g     F .text	00000018 __swbuf
00006564 g     F .text	000000c8 .hidden __ltsf2
00001524 g     F .text	000000d8 vListInsert
0001b43c g     F .text	00000130 altera_avalon_lcd_16207_init
000129b0 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08002d04 g     O .bss	00000004 Freq_Val
00015750 g     F .text	00000014 fclose
00004808 g     F .text	0000006c xTimerCreateTimerTask
0001c418 g     F .text	00000070 alt_up_ps2_read_data_byte
00008ce4 g     F .text	000001a8 .hidden __truncdfsf2
0000de28 g     F .text	00001688 _dtoa_r
00010808 g     F .text	0000080c _malloc_r
00015d90 g     F .text	00000030 __ascii_wctomb
000049fc g     F .text	00000030 pcTimerGetTimerName
08002c30 g     O .rwdata	00000004 alt_errno
00018ab0 g     F .text	00000050 alt_write_flash_command_32bit_device_32bit_mode
000103e8 g     F .text	000000c4 _fwalk
0000243c g     F .text	000000d8 xQueueReceiveFromISR
00018410 g     F .text	0000015c alt_write_value_to_flash
00003e10 g     F .text	00000028 xTaskGetCurrentTaskHandle
0001c604 g     F .text	0000003c alt_up_ps2_open_dev
00018b38 g     F .text	00000038 alt_write_native_16bit
00008ef0 g     F .text	00000084 .hidden __divsi3
00001ba8 g     F .text	000000d8 xQueueGenericCreate
0000faf8 g     F .text	00000124 _malloc_trim_r
0001c180 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001f704 g       *ABS*	00000000 __CTOR_END__
0000662c g     F .text	000003fc .hidden __mulsf3
000129b8 g     F .text	000000dc strcmp
00001e84 g     F .text	00000058 xQueueCreateCountingSemaphore
0001f704 g       *ABS*	00000000 __DTOR_LIST__
00017178 g     F .text	00000088 .hidden __nedf2
00017c28 g     F .text	00000038 alt_irq_init
00003694 g     F .text	000000d8 xTaskRemoveFromUnorderedEventList
000179ac g     F .text	00000064 alt_release_fd
00002f98 g     F .text	00000144 xTaskResumeAll
000025d0 g     F .text	00000054 uxQueueSpacesAvailable
0001c058 g     F .text	00000034 read_data_valid
00009528 g     F .text	0000006c sprintf
08000237 g     O .rodata	00000100 .hidden __clz_tab
00002e84 g     F .text	000000a0 vTaskStartScheduler
08002d18 g     O .bss	00000004 _PathLocale
0001c318 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001f35c g     F .text	00000014 atexit
000154e8 g     F .text	00000060 _write_r
00010628 g     F .text	00000018 setlocale
00002a98 g     F .text	00000048 xQueueIsQueueFullFromISR
000050d4 g     F .text	00000030 pvTimerGetTimerID
08002d08 g     O .bss	00000004 switch_control_handle
000003e0 g     F .text	000000b8 vCoRoutineAddToDelayedList
08002c08 g     O .rwdata	00000004 _impure_ptr
08002d38 g     O .bss	00000004 alt_argc
0000f4b0 g     F .text	0000021c __sflush_r
0001e094 g     F .text	00000060 _do_dtors
00010614 g     F .text	00000008 __locale_cjk_lang
08002cc0 g     O .bss	00000001 use_ROC_Thresh
00011d78 g     F .text	00000064 __ulp
0000fae0 g     F .text	00000018 __fp_unlock_all
0000386c g     F .text	00000028 vTaskMissedYield
0001b56c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
08002d0c g     O .bss	00000004 Current_Freq
08002c1c g     O .rwdata	00000008 alt_fs_list
000189c4 g     F .text	00000050 alt_write_flash_command_32bit_device_8bit_mode
00002590 g     F .text	00000040 uxQueueMessagesWaiting
0000222c g     F .text	00000210 xQueueGenericReceive
08002d10 g     O .bss	00000004 Thresh_ROC
00003150 g     F .text	000001c4 xTaskIncrementTick
00010640 g     F .text	0000000c localeconv
00001a90 g     F .text	00000118 xQueueGenericReset
08002c54 g       *ABS*	00000000 _edata
0001b6bc g     F .text	00000060 altera_avalon_uart_read_fd
0808006c g       *ABS*	00000000 _end
0001e184 g     F .text	00000068 alt_flash_open_dev
00015764 g     F .text	00000164 __fputwc
0001a1c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000011f0 g     F .text	00000020 vPortInitialiseBlocks
00005084 g     F .text	00000050 xTimerIsTimerActive
000128d8 g     F .text	0000007c __swrite
08002c14 g     O .rwdata	00000004 __malloc_trim_threshold
0001e7a8 g     F .text	00000024 altera_nios2_qsys_irq_init
00010608 g     F .text	0000000c __locale_msgcharset
0001f370 g     F .text	00000038 exit
000104ac g     F .text	000000c4 _fwalk_reent
0001c0b8 g     F .text	000000c8 alt_up_ps2_init
00011b7c g     F .text	000001fc __mdiff
0001e1ec g     F .text	00000054 alt_flash_close_dev
00008f74 g     F .text	00000074 .hidden __modsi3
08002c50 g     O .rwdata	00000004 __ctype_ptr__
000051ec g     F .text	00000040 loadTimerISR
00002e0c g     F .text	00000078 vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0000fabc g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
00003e38 g     F .text	0000004c xTaskGetSchedulerState
08000865 g     O .rodata	00000101 _ctype_
0001bb3c g     F .text	00000054 altera_avalon_uart_close
0001f6d0 g     F .text	00000034 _exit
0001ddb0 g     F .text	0000012c alt_alarm_start
0001d8b4 g     F .text	0000024c get_next_state
0001064c g     F .text	000001bc __smakebuf_r
00018b70 g     F .text	00000034 alt_write_native_32bit
0001c2b0 g     F .text	00000068 alt_up_ps2_wait_for_ack
000040fc g     F .text	00000060 vTaskExitCritical
00009594 g     F .text	00000098 strlen
00001700 g     F .text	000000e0 pxPortInitialiseStack
0001e480 g     F .text	00000154 open
00005140 g     F .text	000000ac ps2_isr
00007988 g     F .text	000000dc .hidden __gedf2
00018320 g     F .text	0000008c alt_flash_cfi_get_info
08002c18 g     O .rwdata	00000004 __wctomb
00013f9c g     F .text	00000018 __sprint_r
0000376c g     F .text	0000003c vTaskSetTimeOutState
08002c34 g     O .rwdata	00000004 alt_priority_mask
08002d14 g     O .bss	00000004 LoadControlQ
0000d9fc g     F .text	0000001c __vfprintf_internal
0001bbcc g     F .text	000001dc altera_avalon_uart_read
00015dc0 g     F .text	0000005c _wctomb_r
00002624 g     F .text	00000030 uxQueueMessagesWaitingFromISR
00002a00 g     F .text	00000040 xQueueIsQueueEmptyFromISR
0001c4e0 g     F .text	0000008c alt_up_ps2_read_fd
0000817c g     F .text	000008fc .hidden __subdf3
08002b26 g     O .rwdata	00000066 single_byte_make_code
000115b0 g     F .text	000000b0 __lo0bits
08002c48 g     O .rwdata	00000008 alt_alarm_list
0001e034 g     F .text	00000060 _do_ctors
0000415c g     F .text	00000044 uxTaskResetEventItemValue
00015cd0 g     F .text	000000c0 wcrtomb
00001c80 g     F .text	000000cc xQueueCreateMutex
000173d8 g     F .text	000000d0 close
0001e7cc g     F .text	00000068 alt_program_amd
000046f0 g     F .text	00000118 vTaskNotifyGiveFromISR
00000f24 g     F .text	0000003c vEventGroupClearBitsCallback
0000215c g     F .text	000000d0 xQueueGiveFromISR
000158ec g     F .text	00000080 fputwc
0000fac0 g     F .text	00000004 __sinit_lock_acquire
00011324 g     F .text	00000120 __multadd
000112fc g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00000020 <save_context>:
  20:	ef7fff04 	addi	ea,ea,-4
  24:	deffe304 	addi	sp,sp,-116
  28:	dfc00015 	stw	ra,0(sp)
  2c:	d8400215 	stw	at,8(sp)
  30:	d8800315 	stw	r2,12(sp)
  34:	d8c00415 	stw	r3,16(sp)
  38:	d9000515 	stw	r4,20(sp)
  3c:	d9400615 	stw	r5,24(sp)
  40:	d9800715 	stw	r6,28(sp)
  44:	d9c00815 	stw	r7,32(sp)
  48:	da000915 	stw	r8,36(sp)
  4c:	da400a15 	stw	r9,40(sp)
  50:	da800b15 	stw	r10,44(sp)
  54:	dac00c15 	stw	r11,48(sp)
  58:	db000d15 	stw	r12,52(sp)
  5c:	db400e15 	stw	r13,56(sp)
  60:	db800f15 	stw	r14,60(sp)
  64:	dbc01015 	stw	r15,64(sp)
  68:	000b307a 	rdctl	r5,estatus
  6c:	d9401115 	stw	r5,68(sp)
  70:	df401215 	stw	ea,72(sp)
  74:	dc001315 	stw	r16,76(sp)
  78:	dc401415 	stw	r17,80(sp)
  7c:	dc801515 	stw	r18,84(sp)
  80:	dcc01615 	stw	r19,88(sp)
  84:	dd001715 	stw	r20,92(sp)
  88:	dd401815 	stw	r21,96(sp)
  8c:	dd801915 	stw	r22,100(sp)
  90:	ddc01a15 	stw	r23,104(sp)
  94:	de801b15 	stw	gp,108(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06020034 	movhi	et,2048
  a0:	c60b1f04 	addi	et,et,11388
  a4:	c6000017 	ldw	et,0(et)
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
  ac:	0009313a 	rdctl	r4,ipending
  b0:	000b307a 	rdctl	r5,estatus
  b4:	2880004c 	andi	r2,r5,1
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06020034 	movhi	et,2048
  c8:	c60b1f04 	addi	et,et,11388
  cc:	c6000017 	ldw	et,0(et)
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:
  d4:	dfc00017 	ldw	ra,0(sp)
  d8:	d8400217 	ldw	at,8(sp)
  dc:	d8800317 	ldw	r2,12(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
  e4:	d9000517 	ldw	r4,20(sp)
  e8:	d9400617 	ldw	r5,24(sp)
  ec:	d9800717 	ldw	r6,28(sp)
  f0:	d9c00817 	ldw	r7,32(sp)
  f4:	da000917 	ldw	r8,36(sp)
  f8:	da400a17 	ldw	r9,40(sp)
  fc:	da800b17 	ldw	r10,44(sp)
 100:	dac00c17 	ldw	r11,48(sp)
 104:	db000d17 	ldw	r12,52(sp)
 108:	db400e17 	ldw	r13,56(sp)
 10c:	db800f17 	ldw	r14,60(sp)
 110:	dbc01017 	ldw	r15,64(sp)
 114:	de001117 	ldw	et,68(sp)
 118:	c001707a 	wrctl	estatus,et
 11c:	df401217 	ldw	ea,72(sp)
 120:	dc001317 	ldw	r16,76(sp)
 124:	dc401417 	ldw	r17,80(sp)
 128:	dc801517 	ldw	r18,84(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
 130:	dd001717 	ldw	r20,92(sp)
 134:	dd401817 	ldw	r21,96(sp)
 138:	dd801917 	ldw	r22,100(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
 140:	de801b17 	ldw	gp,108(sp)
 144:	df001c17 	ldw	fp,112(sp)
 148:	dec01d04 	addi	sp,sp,116
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:
 150:	ee000017 	ldw	et,0(ea)
 154:	00400ef4 	movhi	at,59
 158:	085a0e94 	ori	at,at,26682
 15c:	c070c03a 	cmpne	et,et,at
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
 164:	003da03a 	break	0
 168:	003fda06 	br	d4 <__alt_data_end+0xf00000d4>

0000016c <call_scheduler>:
 16c:	ef400104 	addi	ea,ea,4
 170:	df401215 	stw	ea,72(sp)
 174:	00033140 	call	3314 <vTaskSwitchContext>
 178:	003fd206 	br	c4 <__alt_data_end+0xf00000c4>

0000017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 17c:	defff904 	addi	sp,sp,-28
 180:	dfc00615 	stw	ra,24(sp)
 184:	df000515 	stw	fp,20(sp)
 188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 18c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 190:	0005313a 	rdctl	r2,ipending
 194:	e0bffe15 	stw	r2,-8(fp)

  return active;
 198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 19c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1a4:	00800044 	movi	r2,1
 1a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1ac:	e0fffb17 	ldw	r3,-20(fp)
 1b0:	e0bffc17 	ldw	r2,-16(fp)
 1b4:	1884703a 	and	r2,r3,r2
 1b8:	10001526 	beq	r2,zero,210 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1bc:	00820234 	movhi	r2,2056
 1c0:	10bfdb04 	addi	r2,r2,-148
 1c4:	e0fffd17 	ldw	r3,-12(fp)
 1c8:	180690fa 	slli	r3,r3,3
 1cc:	10c5883a 	add	r2,r2,r3
 1d0:	10c00017 	ldw	r3,0(r2)
 1d4:	00820234 	movhi	r2,2056
 1d8:	10bfdb04 	addi	r2,r2,-148
 1dc:	e13ffd17 	ldw	r4,-12(fp)
 1e0:	200890fa 	slli	r4,r4,3
 1e4:	1105883a 	add	r2,r2,r4
 1e8:	10800104 	addi	r2,r2,4
 1ec:	10800017 	ldw	r2,0(r2)
 1f0:	e17ffd17 	ldw	r5,-12(fp)
 1f4:	1009883a 	mov	r4,r2
 1f8:	183ee83a 	callr	r3
#endif
        break;
 1fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200:	0005313a 	rdctl	r2,ipending
 204:	e0bfff15 	stw	r2,-4(fp)

  return active;
 208:	e0bfff17 	ldw	r2,-4(fp)
 20c:	00000706 	br	22c <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 210:	e0bffc17 	ldw	r2,-16(fp)
 214:	1085883a 	add	r2,r2,r2
 218:	e0bffc15 	stw	r2,-16(fp)
      i++;
 21c:	e0bffd17 	ldw	r2,-12(fp)
 220:	10800044 	addi	r2,r2,1
 224:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 228:	003fe006 	br	1ac <__alt_data_end+0xf00001ac>

    active = alt_irq_pending ();
 22c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 230:	e0bffb17 	ldw	r2,-20(fp)
 234:	103fda1e 	bne	r2,zero,1a0 <__alt_data_end+0xf00001a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 238:	0001883a 	nop
}
 23c:	0001883a 	nop
 240:	e037883a 	mov	sp,fp
 244:	dfc00117 	ldw	ra,4(sp)
 248:	df000017 	ldw	fp,0(sp)
 24c:	dec00204 	addi	sp,sp,8
 250:	f800283a 	ret

Disassembly of section .text:

00000254 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     254:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     258:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     25c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     260:	00bffd16 	blt	zero,r2,258 <__alt_data_end+0xf0000258>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     264:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
     268:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     26c:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
     270:	d6aafc94 	ori	gp,gp,44018
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     274:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
     278:	108b1514 	ori	r2,r2,11348

    movhi r3, %hi(__bss_end)
     27c:	00c20234 	movhi	r3,2056
    ori r3, r3, %lo(__bss_end)
     280:	18c01b14 	ori	r3,r3,108

    beq r2, r3, 1f
     284:	10c00326 	beq	r2,r3,294 <_start+0x40>

0:
    stw zero, (r2)
     288:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     28c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     290:	10fffd36 	bltu	r2,r3,288 <__alt_data_end+0xf0000288>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     294:	00177b00 	call	177b0 <alt_main>

00000298 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     298:	003fff06 	br	298 <__alt_data_end+0xf0000298>

0000029c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     29c:	defff904 	addi	sp,sp,-28
     2a0:	dfc00615 	stw	ra,24(sp)
     2a4:	df000515 	stw	fp,20(sp)
     2a8:	df000504 	addi	fp,sp,20
     2ac:	e13ffd15 	stw	r4,-12(fp)
     2b0:	e17ffe15 	stw	r5,-8(fp)
     2b4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     2b8:	01000e04 	movi	r4,56
     2bc:	0000fd00 	call	fd0 <pvPortMalloc>
     2c0:	e0bffc15 	stw	r2,-16(fp)
	if( pxCoRoutine )
     2c4:	e0bffc17 	ldw	r2,-16(fp)
     2c8:	10003d26 	beq	r2,zero,3c0 <xCoRoutineCreate+0x124>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     2cc:	d0a01a97 	ldw	r2,-32662(gp)
     2d0:	1000031e 	bne	r2,zero,2e0 <xCoRoutineCreate+0x44>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2d4:	e0bffc17 	ldw	r2,-16(fp)
     2d8:	d0a01a95 	stw	r2,-32662(gp)
			prvInitialiseCoRoutineLists();
     2dc:	00007bc0 	call	7bc <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	108000b0 	cmpltui	r2,r2,2
     2e8:	1000021e 	bne	r2,zero,2f4 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2ec:	00800044 	movi	r2,1
     2f0:	e0bffe15 	stw	r2,-8(fp)
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     2f4:	e0bffc17 	ldw	r2,-16(fp)
     2f8:	10000d0d 	sth	zero,52(r2)
		pxCoRoutine->uxPriority = uxPriority;
     2fc:	e0bffc17 	ldw	r2,-16(fp)
     300:	e0fffe17 	ldw	r3,-8(fp)
     304:	10c00b15 	stw	r3,44(r2)
		pxCoRoutine->uxIndex = uxIndex;
     308:	e0bffc17 	ldw	r2,-16(fp)
     30c:	e0ffff17 	ldw	r3,-4(fp)
     310:	10c00c15 	stw	r3,48(r2)
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     314:	e0bffc17 	ldw	r2,-16(fp)
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	10c00015 	stw	r3,0(r2)

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     320:	e0bffc17 	ldw	r2,-16(fp)
     324:	10800104 	addi	r2,r2,4
     328:	1009883a 	mov	r4,r2
     32c:	000146c0 	call	146c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     330:	e0bffc17 	ldw	r2,-16(fp)
     334:	10800604 	addi	r2,r2,24
     338:	1009883a 	mov	r4,r2
     33c:	000146c0 	call	146c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     340:	e0bffc17 	ldw	r2,-16(fp)
     344:	e0fffc17 	ldw	r3,-16(fp)
     348:	10c00415 	stw	r3,16(r2)
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	e0fffc17 	ldw	r3,-16(fp)
     354:	10c00915 	stw	r3,36(r2)

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     358:	00c00084 	movi	r3,2
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	1887c83a 	sub	r3,r3,r2
     364:	e0bffc17 	ldw	r2,-16(fp)
     368:	10c00615 	stw	r3,24(r2)

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     36c:	e0bffc17 	ldw	r2,-16(fp)
     370:	10800b17 	ldw	r2,44(r2)
     374:	d0e01b97 	ldw	r3,-32658(gp)
     378:	1880032e 	bgeu	r3,r2,388 <xCoRoutineCreate+0xec>
     37c:	e0bffc17 	ldw	r2,-16(fp)
     380:	10800b17 	ldw	r2,44(r2)
     384:	d0a01b95 	stw	r2,-32658(gp)
     388:	e0bffc17 	ldw	r2,-16(fp)
     38c:	10800b17 	ldw	r2,44(r2)
     390:	10c00524 	muli	r3,r2,20
     394:	00820034 	movhi	r2,2048
     398:	108b5404 	addi	r2,r2,11600
     39c:	1887883a 	add	r3,r3,r2
     3a0:	e0bffc17 	ldw	r2,-16(fp)
     3a4:	10800104 	addi	r2,r2,4
     3a8:	100b883a 	mov	r5,r2
     3ac:	1809883a 	mov	r4,r3
     3b0:	00014980 	call	1498 <vListInsertEnd>

		xReturn = pdPASS;
     3b4:	00800044 	movi	r2,1
     3b8:	e0bffb15 	stw	r2,-20(fp)
     3bc:	00000206 	br	3c8 <xCoRoutineCreate+0x12c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     3c0:	00bfffc4 	movi	r2,-1
     3c4:	e0bffb15 	stw	r2,-20(fp)
	}

	return xReturn;
     3c8:	e0bffb17 	ldw	r2,-20(fp)
}
     3cc:	e037883a 	mov	sp,fp
     3d0:	dfc00117 	ldw	ra,4(sp)
     3d4:	df000017 	ldw	fp,0(sp)
     3d8:	dec00204 	addi	sp,sp,8
     3dc:	f800283a 	ret

000003e0 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     3e0:	defffb04 	addi	sp,sp,-20
     3e4:	dfc00415 	stw	ra,16(sp)
     3e8:	df000315 	stw	fp,12(sp)
     3ec:	df000304 	addi	fp,sp,12
     3f0:	e13ffe15 	stw	r4,-8(fp)
     3f4:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     3f8:	d0e01c97 	ldw	r3,-32654(gp)
     3fc:	e0bffe17 	ldw	r2,-8(fp)
     400:	1885883a 	add	r2,r3,r2
     404:	e0bffd15 	stw	r2,-12(fp)

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     408:	d0a01a97 	ldw	r2,-32662(gp)
     40c:	10800104 	addi	r2,r2,4
     410:	1009883a 	mov	r4,r2
     414:	00015fc0 	call	15fc <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     418:	d0a01a97 	ldw	r2,-32662(gp)
     41c:	e0fffd17 	ldw	r3,-12(fp)
     420:	10c00115 	stw	r3,4(r2)

	if( xTimeToWake < xCoRoutineTickCount )
     424:	d0a01c97 	ldw	r2,-32654(gp)
     428:	e0fffd17 	ldw	r3,-12(fp)
     42c:	1880072e 	bgeu	r3,r2,44c <vCoRoutineAddToDelayedList+0x6c>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     430:	d0e01997 	ldw	r3,-32666(gp)
     434:	d0a01a97 	ldw	r2,-32662(gp)
     438:	10800104 	addi	r2,r2,4
     43c:	100b883a 	mov	r5,r2
     440:	1809883a 	mov	r4,r3
     444:	00015240 	call	1524 <vListInsert>
     448:	00000606 	br	464 <vCoRoutineAddToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     44c:	d0e01897 	ldw	r3,-32670(gp)
     450:	d0a01a97 	ldw	r2,-32662(gp)
     454:	10800104 	addi	r2,r2,4
     458:	100b883a 	mov	r5,r2
     45c:	1809883a 	mov	r4,r3
     460:	00015240 	call	1524 <vListInsert>
	}

	if( pxEventList )
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	10000526 	beq	r2,zero,480 <vCoRoutineAddToDelayedList+0xa0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     46c:	d0a01a97 	ldw	r2,-32662(gp)
     470:	10800604 	addi	r2,r2,24
     474:	100b883a 	mov	r5,r2
     478:	e13fff17 	ldw	r4,-4(fp)
     47c:	00015240 	call	1524 <vListInsert>
	}
}
     480:	0001883a 	nop
     484:	e037883a 	mov	sp,fp
     488:	dfc00117 	ldw	ra,4(sp)
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00204 	addi	sp,sp,8
     494:	f800283a 	ret

00000498 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     498:	defffb04 	addi	sp,sp,-20
     49c:	dfc00415 	stw	ra,16(sp)
     4a0:	df000315 	stw	fp,12(sp)
     4a4:	df000304 	addi	fp,sp,12
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     4a8:	00002906 	br	550 <prvCheckPendingReadyList+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     4ac:	0005303a 	rdctl	r2,status
     4b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     4b4:	e0fffe17 	ldw	r3,-8(fp)
     4b8:	00bfff84 	movi	r2,-2
     4bc:	1884703a 	and	r2,r3,r2
     4c0:	1001703a 	wrctl	status,r2
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     4c4:	00820034 	movhi	r2,2048
     4c8:	108b6804 	addi	r2,r2,11680
     4cc:	10800317 	ldw	r2,12(r2)
     4d0:	10800317 	ldw	r2,12(r2)
     4d4:	e0bffd15 	stw	r2,-12(fp)
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     4d8:	e0bffd17 	ldw	r2,-12(fp)
     4dc:	10800604 	addi	r2,r2,24
     4e0:	1009883a 	mov	r4,r2
     4e4:	00015fc0 	call	15fc <uxListRemove>
     4e8:	00800044 	movi	r2,1
     4ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     4f0:	e0bfff17 	ldw	r2,-4(fp)
     4f4:	1001703a 	wrctl	status,r2
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     4f8:	e0bffd17 	ldw	r2,-12(fp)
     4fc:	10800104 	addi	r2,r2,4
     500:	1009883a 	mov	r4,r2
     504:	00015fc0 	call	15fc <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     508:	e0bffd17 	ldw	r2,-12(fp)
     50c:	10800b17 	ldw	r2,44(r2)
     510:	d0e01b97 	ldw	r3,-32658(gp)
     514:	1880032e 	bgeu	r3,r2,524 <prvCheckPendingReadyList+0x8c>
     518:	e0bffd17 	ldw	r2,-12(fp)
     51c:	10800b17 	ldw	r2,44(r2)
     520:	d0a01b95 	stw	r2,-32658(gp)
     524:	e0bffd17 	ldw	r2,-12(fp)
     528:	10800b17 	ldw	r2,44(r2)
     52c:	10c00524 	muli	r3,r2,20
     530:	00820034 	movhi	r2,2048
     534:	108b5404 	addi	r2,r2,11600
     538:	1887883a 	add	r3,r3,r2
     53c:	e0bffd17 	ldw	r2,-12(fp)
     540:	10800104 	addi	r2,r2,4
     544:	100b883a 	mov	r5,r2
     548:	1809883a 	mov	r4,r3
     54c:	00014980 	call	1498 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     550:	00820034 	movhi	r2,2048
     554:	108b6804 	addi	r2,r2,11680
     558:	10800017 	ldw	r2,0(r2)
     55c:	103fd31e 	bne	r2,zero,4ac <__alt_data_end+0xf00004ac>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     560:	0001883a 	nop
     564:	e037883a 	mov	sp,fp
     568:	dfc00117 	ldw	ra,4(sp)
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00204 	addi	sp,sp,8
     574:	f800283a 	ret

00000578 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     578:	defffa04 	addi	sp,sp,-24
     57c:	dfc00515 	stw	ra,20(sp)
     580:	df000415 	stw	fp,16(sp)
     584:	df000404 	addi	fp,sp,16
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     588:	00030dc0 	call	30dc <xTaskGetTickCount>
     58c:	1007883a 	mov	r3,r2
     590:	d0a01d97 	ldw	r2,-32650(gp)
     594:	1885c83a 	sub	r2,r3,r2
     598:	d0a01e95 	stw	r2,-32646(gp)
	while( xPassedTicks )
     59c:	00004206 	br	6a8 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
     5a0:	d0a01c97 	ldw	r2,-32654(gp)
     5a4:	10800044 	addi	r2,r2,1
     5a8:	d0a01c95 	stw	r2,-32654(gp)
		xPassedTicks--;
     5ac:	d0a01e97 	ldw	r2,-32646(gp)
     5b0:	10bfffc4 	addi	r2,r2,-1
     5b4:	d0a01e95 	stw	r2,-32646(gp)

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     5b8:	d0a01c97 	ldw	r2,-32654(gp)
     5bc:	1000371e 	bne	r2,zero,69c <prvCheckDelayedList+0x124>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     5c0:	d0a01897 	ldw	r2,-32670(gp)
     5c4:	e0bffc15 	stw	r2,-16(fp)
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     5c8:	d0a01997 	ldw	r2,-32666(gp)
     5cc:	d0a01895 	stw	r2,-32670(gp)
			pxOverflowDelayedCoRoutineList = pxTemp;
     5d0:	e0bffc17 	ldw	r2,-16(fp)
     5d4:	d0a01995 	stw	r2,-32666(gp)
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5d8:	00003006 	br	69c <prvCheckDelayedList+0x124>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     5dc:	d0a01897 	ldw	r2,-32670(gp)
     5e0:	10800317 	ldw	r2,12(r2)
     5e4:	10800317 	ldw	r2,12(r2)
     5e8:	e0bffd15 	stw	r2,-12(fp)

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     5ec:	e0bffd17 	ldw	r2,-12(fp)
     5f0:	10800117 	ldw	r2,4(r2)
     5f4:	d0e01c97 	ldw	r3,-32654(gp)
     5f8:	1880012e 	bgeu	r3,r2,600 <prvCheckDelayedList+0x88>
			{
				/* Timeout not yet expired. */
				break;
     5fc:	00002a06 	br	6a8 <prvCheckDelayedList+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     600:	0005303a 	rdctl	r2,status
     604:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     608:	e0ffff17 	ldw	r3,-4(fp)
     60c:	00bfff84 	movi	r2,-2
     610:	1884703a 	and	r2,r3,r2
     614:	1001703a 	wrctl	status,r2
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     618:	e0bffd17 	ldw	r2,-12(fp)
     61c:	10800104 	addi	r2,r2,4
     620:	1009883a 	mov	r4,r2
     624:	00015fc0 	call	15fc <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     628:	e0bffd17 	ldw	r2,-12(fp)
     62c:	10800a17 	ldw	r2,40(r2)
     630:	10000426 	beq	r2,zero,644 <prvCheckDelayedList+0xcc>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     634:	e0bffd17 	ldw	r2,-12(fp)
     638:	10800604 	addi	r2,r2,24
     63c:	1009883a 	mov	r4,r2
     640:	00015fc0 	call	15fc <uxListRemove>
     644:	00800044 	movi	r2,1
     648:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     64c:	e0bffe17 	ldw	r2,-8(fp)
     650:	1001703a 	wrctl	status,r2
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
     654:	e0bffd17 	ldw	r2,-12(fp)
     658:	10800b17 	ldw	r2,44(r2)
     65c:	d0e01b97 	ldw	r3,-32658(gp)
     660:	1880032e 	bgeu	r3,r2,670 <prvCheckDelayedList+0xf8>
     664:	e0bffd17 	ldw	r2,-12(fp)
     668:	10800b17 	ldw	r2,44(r2)
     66c:	d0a01b95 	stw	r2,-32658(gp)
     670:	e0bffd17 	ldw	r2,-12(fp)
     674:	10800b17 	ldw	r2,44(r2)
     678:	10c00524 	muli	r3,r2,20
     67c:	00820034 	movhi	r2,2048
     680:	108b5404 	addi	r2,r2,11600
     684:	1887883a 	add	r3,r3,r2
     688:	e0bffd17 	ldw	r2,-12(fp)
     68c:	10800104 	addi	r2,r2,4
     690:	100b883a 	mov	r5,r2
     694:	1809883a 	mov	r4,r3
     698:	00014980 	call	1498 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     69c:	d0a01897 	ldw	r2,-32670(gp)
     6a0:	10800017 	ldw	r2,0(r2)
     6a4:	103fcd1e 	bne	r2,zero,5dc <__alt_data_end+0xf00005dc>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     6a8:	d0a01e97 	ldw	r2,-32646(gp)
     6ac:	103fbc1e 	bne	r2,zero,5a0 <__alt_data_end+0xf00005a0>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     6b0:	d0a01c97 	ldw	r2,-32654(gp)
     6b4:	d0a01d95 	stw	r2,-32650(gp)
}
     6b8:	0001883a 	nop
     6bc:	e037883a 	mov	sp,fp
     6c0:	dfc00117 	ldw	ra,4(sp)
     6c4:	df000017 	ldw	fp,0(sp)
     6c8:	dec00204 	addi	sp,sp,8
     6cc:	f800283a 	ret

000006d0 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     6d0:	defffd04 	addi	sp,sp,-12
     6d4:	dfc00215 	stw	ra,8(sp)
     6d8:	df000115 	stw	fp,4(sp)
     6dc:	df000104 	addi	fp,sp,4
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     6e0:	00004980 	call	498 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     6e4:	00005780 	call	578 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     6e8:	00000506 	br	700 <vCoRoutineSchedule+0x30>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     6ec:	d0a01b97 	ldw	r2,-32658(gp)
     6f0:	10002c26 	beq	r2,zero,7a4 <vCoRoutineSchedule+0xd4>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     6f4:	d0a01b97 	ldw	r2,-32658(gp)
     6f8:	10bfffc4 	addi	r2,r2,-1
     6fc:	d0a01b95 	stw	r2,-32658(gp)

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     700:	d0e01b97 	ldw	r3,-32658(gp)
     704:	00820034 	movhi	r2,2048
     708:	108b5404 	addi	r2,r2,11600
     70c:	18c00524 	muli	r3,r3,20
     710:	10c5883a 	add	r2,r2,r3
     714:	10800017 	ldw	r2,0(r2)
     718:	103ff426 	beq	r2,zero,6ec <__alt_data_end+0xf00006ec>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     71c:	d0a01b97 	ldw	r2,-32658(gp)
     720:	10c00524 	muli	r3,r2,20
     724:	00820034 	movhi	r2,2048
     728:	108b5404 	addi	r2,r2,11600
     72c:	1885883a 	add	r2,r3,r2
     730:	e0bfff15 	stw	r2,-4(fp)
     734:	e0bfff17 	ldw	r2,-4(fp)
     738:	10800117 	ldw	r2,4(r2)
     73c:	10c00117 	ldw	r3,4(r2)
     740:	e0bfff17 	ldw	r2,-4(fp)
     744:	10c00115 	stw	r3,4(r2)
     748:	e0bfff17 	ldw	r2,-4(fp)
     74c:	10c00117 	ldw	r3,4(r2)
     750:	e0bfff17 	ldw	r2,-4(fp)
     754:	10800204 	addi	r2,r2,8
     758:	1880051e 	bne	r3,r2,770 <vCoRoutineSchedule+0xa0>
     75c:	e0bfff17 	ldw	r2,-4(fp)
     760:	10800117 	ldw	r2,4(r2)
     764:	10c00117 	ldw	r3,4(r2)
     768:	e0bfff17 	ldw	r2,-4(fp)
     76c:	10c00115 	stw	r3,4(r2)
     770:	e0bfff17 	ldw	r2,-4(fp)
     774:	10800117 	ldw	r2,4(r2)
     778:	10800317 	ldw	r2,12(r2)
     77c:	d0a01a95 	stw	r2,-32662(gp)

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     780:	d0a01a97 	ldw	r2,-32662(gp)
     784:	10800017 	ldw	r2,0(r2)
     788:	d1201a97 	ldw	r4,-32662(gp)
     78c:	d0e01a97 	ldw	r3,-32662(gp)
     790:	18c00c17 	ldw	r3,48(r3)
     794:	180b883a 	mov	r5,r3
     798:	103ee83a 	callr	r2

	return;
     79c:	0001883a 	nop
     7a0:	00000106 	br	7a8 <vCoRoutineSchedule+0xd8>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
     7a4:	0001883a 	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
     7a8:	e037883a 	mov	sp,fp
     7ac:	dfc00117 	ldw	ra,4(sp)
     7b0:	df000017 	ldw	fp,0(sp)
     7b4:	dec00204 	addi	sp,sp,8
     7b8:	f800283a 	ret

000007bc <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     7bc:	defffd04 	addi	sp,sp,-12
     7c0:	dfc00215 	stw	ra,8(sp)
     7c4:	df000115 	stw	fp,4(sp)
     7c8:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7cc:	e03fff15 	stw	zero,-4(fp)
     7d0:	00000a06 	br	7fc <prvInitialiseCoRoutineLists+0x40>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     7d4:	e0bfff17 	ldw	r2,-4(fp)
     7d8:	10c00524 	muli	r3,r2,20
     7dc:	00820034 	movhi	r2,2048
     7e0:	108b5404 	addi	r2,r2,11600
     7e4:	1885883a 	add	r2,r3,r2
     7e8:	1009883a 	mov	r4,r2
     7ec:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     7f0:	e0bfff17 	ldw	r2,-4(fp)
     7f4:	10800044 	addi	r2,r2,1
     7f8:	e0bfff15 	stw	r2,-4(fp)
     7fc:	e0bfff17 	ldw	r2,-4(fp)
     800:	108000b0 	cmpltui	r2,r2,2
     804:	103ff31e 	bne	r2,zero,7d4 <__alt_data_end+0xf00007d4>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     808:	01020034 	movhi	r4,2048
     80c:	210b5e04 	addi	r4,r4,11640
     810:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     814:	01020034 	movhi	r4,2048
     818:	210b6304 	addi	r4,r4,11660
     81c:	00014040 	call	1404 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     820:	01020034 	movhi	r4,2048
     824:	210b6804 	addi	r4,r4,11680
     828:	00014040 	call	1404 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     82c:	00820034 	movhi	r2,2048
     830:	108b5e04 	addi	r2,r2,11640
     834:	d0a01895 	stw	r2,-32670(gp)
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     838:	00820034 	movhi	r2,2048
     83c:	108b6304 	addi	r2,r2,11660
     840:	d0a01995 	stw	r2,-32666(gp)
}
     844:	0001883a 	nop
     848:	e037883a 	mov	sp,fp
     84c:	dfc00117 	ldw	ra,4(sp)
     850:	df000017 	ldw	fp,0(sp)
     854:	dec00204 	addi	sp,sp,8
     858:	f800283a 	ret

0000085c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
     85c:	defffb04 	addi	sp,sp,-20
     860:	dfc00415 	stw	ra,16(sp)
     864:	df000315 	stw	fp,12(sp)
     868:	df000304 	addi	fp,sp,12
     86c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     870:	e0bfff17 	ldw	r2,-4(fp)
     874:	10800317 	ldw	r2,12(r2)
     878:	10800317 	ldw	r2,12(r2)
     87c:	e0bffe15 	stw	r2,-8(fp)
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     880:	e0bffe17 	ldw	r2,-8(fp)
     884:	10800604 	addi	r2,r2,24
     888:	1009883a 	mov	r4,r2
     88c:	00015fc0 	call	15fc <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     890:	e0bffe17 	ldw	r2,-8(fp)
     894:	10800604 	addi	r2,r2,24
     898:	100b883a 	mov	r5,r2
     89c:	01020034 	movhi	r4,2048
     8a0:	210b6804 	addi	r4,r4,11680
     8a4:	00014980 	call	1498 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     8a8:	e0bffe17 	ldw	r2,-8(fp)
     8ac:	10c00b17 	ldw	r3,44(r2)
     8b0:	d0a01a97 	ldw	r2,-32662(gp)
     8b4:	10800b17 	ldw	r2,44(r2)
     8b8:	18800336 	bltu	r3,r2,8c8 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
     8bc:	00800044 	movi	r2,1
     8c0:	e0bffd15 	stw	r2,-12(fp)
     8c4:	00000106 	br	8cc <xCoRoutineRemoveFromEventList+0x70>
	}
	else
	{
		xReturn = pdFALSE;
     8c8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
     8cc:	e0bffd17 	ldw	r2,-12(fp)
}
     8d0:	e037883a 	mov	sp,fp
     8d4:	dfc00117 	ldw	ra,4(sp)
     8d8:	df000017 	ldw	fp,0(sp)
     8dc:	dec00204 	addi	sp,sp,8
     8e0:	f800283a 	ret

000008e4 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     8e4:	defffd04 	addi	sp,sp,-12
     8e8:	dfc00215 	stw	ra,8(sp)
     8ec:	df000115 	stw	fp,4(sp)
     8f0:	df000104 	addi	fp,sp,4
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     8f4:	01000604 	movi	r4,24
     8f8:	0000fd00 	call	fd0 <pvPortMalloc>
     8fc:	e0bfff15 	stw	r2,-4(fp)
	if( pxEventBits != NULL )
     900:	e0bfff17 	ldw	r2,-4(fp)
     904:	10000626 	beq	r2,zero,920 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
     908:	e0bfff17 	ldw	r2,-4(fp)
     90c:	10000015 	stw	zero,0(r2)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     910:	e0bfff17 	ldw	r2,-4(fp)
     914:	10800104 	addi	r2,r2,4
     918:	1009883a 	mov	r4,r2
     91c:	00014040 	call	1404 <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
     920:	e0bfff17 	ldw	r2,-4(fp)
}
     924:	e037883a 	mov	sp,fp
     928:	dfc00117 	ldw	ra,4(sp)
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00204 	addi	sp,sp,8
     934:	f800283a 	ret

00000938 <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     938:	defff504 	addi	sp,sp,-44
     93c:	dfc00a15 	stw	ra,40(sp)
     940:	df000915 	stw	fp,36(sp)
     944:	df000904 	addi	fp,sp,36
     948:	e13ffc15 	stw	r4,-16(fp)
     94c:	e17ffd15 	stw	r5,-12(fp)
     950:	e1bffe15 	stw	r6,-8(fp)
     954:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     958:	e0bffc17 	ldw	r2,-16(fp)
     95c:	e0bff815 	stw	r2,-32(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     960:	e03ff915 	stw	zero,-28(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     964:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     968:	e0bff817 	ldw	r2,-32(fp)
     96c:	10800017 	ldw	r2,0(r2)
     970:	e0bffa15 	stw	r2,-24(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     974:	e17ffd17 	ldw	r5,-12(fp)
     978:	e13ffc17 	ldw	r4,-16(fp)
     97c:	0000cf40 	call	cf4 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     980:	e0fffa17 	ldw	r3,-24(fp)
     984:	e0bffd17 	ldw	r2,-12(fp)
     988:	1886b03a 	or	r3,r3,r2
     98c:	e0bffe17 	ldw	r2,-8(fp)
     990:	1886703a 	and	r3,r3,r2
     994:	e0bffe17 	ldw	r2,-8(fp)
     998:	18800d1e 	bne	r3,r2,9d0 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     99c:	e0fffa17 	ldw	r3,-24(fp)
     9a0:	e0bffd17 	ldw	r2,-12(fp)
     9a4:	1884b03a 	or	r2,r3,r2
     9a8:	e0bff715 	stw	r2,-36(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     9ac:	e0bff817 	ldw	r2,-32(fp)
     9b0:	10c00017 	ldw	r3,0(r2)
     9b4:	e0bffe17 	ldw	r2,-8(fp)
     9b8:	0084303a 	nor	r2,zero,r2
     9bc:	1886703a 	and	r3,r3,r2
     9c0:	e0bff817 	ldw	r2,-32(fp)
     9c4:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
     9c8:	e03fff15 	stw	zero,-4(fp)
     9cc:	00000f06 	br	a0c <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     9d0:	e0bfff17 	ldw	r2,-4(fp)
     9d4:	10000a26 	beq	r2,zero,a00 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     9d8:	e0bff817 	ldw	r2,-32(fp)
     9dc:	10c00104 	addi	r3,r2,4
     9e0:	e0bffe17 	ldw	r2,-8(fp)
     9e4:	10814034 	orhi	r2,r2,1280
     9e8:	e1bfff17 	ldw	r6,-4(fp)
     9ec:	100b883a 	mov	r5,r2
     9f0:	1809883a 	mov	r4,r3
     9f4:	00034b40 	call	34b4 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     9f8:	e03ff715 	stw	zero,-36(fp)
     9fc:	00000306 	br	a0c <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     a00:	e0bff817 	ldw	r2,-32(fp)
     a04:	10800017 	ldw	r2,0(r2)
     a08:	e0bff715 	stw	r2,-36(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     a0c:	0002f980 	call	2f98 <xTaskResumeAll>
     a10:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     a14:	e0bfff17 	ldw	r2,-4(fp)
     a18:	10002026 	beq	r2,zero,a9c <xEventGroupSync+0x164>
	{
		if( xAlreadyYielded == pdFALSE )
     a1c:	e0bffb17 	ldw	r2,-20(fp)
     a20:	1000011e 	bne	r2,zero,a28 <xEventGroupSync+0xf0>
		{
			portYIELD_WITHIN_API();
     a24:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     a28:	000415c0 	call	415c <uxTaskResetEventItemValue>
     a2c:	e0bff715 	stw	r2,-36(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     a30:	e0bff717 	ldw	r2,-36(fp)
     a34:	1080802c 	andhi	r2,r2,512
     a38:	1000131e 	bne	r2,zero,a88 <xEventGroupSync+0x150>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     a3c:	00040a80 	call	40a8 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
     a40:	e0bff817 	ldw	r2,-32(fp)
     a44:	10800017 	ldw	r2,0(r2)
     a48:	e0bff715 	stw	r2,-36(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     a4c:	e0fff717 	ldw	r3,-36(fp)
     a50:	e0bffe17 	ldw	r2,-8(fp)
     a54:	1886703a 	and	r3,r3,r2
     a58:	e0bffe17 	ldw	r2,-8(fp)
     a5c:	1880071e 	bne	r3,r2,a7c <xEventGroupSync+0x144>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a60:	e0bff817 	ldw	r2,-32(fp)
     a64:	10c00017 	ldw	r3,0(r2)
     a68:	e0bffe17 	ldw	r2,-8(fp)
     a6c:	0084303a 	nor	r2,zero,r2
     a70:	1886703a 	and	r3,r3,r2
     a74:	e0bff817 	ldw	r2,-32(fp)
     a78:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a7c:	00040fc0 	call	40fc <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
     a80:	00800044 	movi	r2,1
     a84:	e0bff915 	stw	r2,-28(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a88:	e0fff717 	ldw	r3,-36(fp)
     a8c:	00804034 	movhi	r2,256
     a90:	10bfffc4 	addi	r2,r2,-1
     a94:	1884703a 	and	r2,r3,r2
     a98:	e0bff715 	stw	r2,-36(fp)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a9c:	e0bff717 	ldw	r2,-36(fp)
}
     aa0:	e037883a 	mov	sp,fp
     aa4:	dfc00117 	ldw	ra,4(sp)
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00204 	addi	sp,sp,8
     ab0:	f800283a 	ret

00000ab4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     ab4:	defff304 	addi	sp,sp,-52
     ab8:	dfc00c15 	stw	ra,48(sp)
     abc:	df000b15 	stw	fp,44(sp)
     ac0:	df000b04 	addi	fp,sp,44
     ac4:	e13ffc15 	stw	r4,-16(fp)
     ac8:	e17ffd15 	stw	r5,-12(fp)
     acc:	e1bffe15 	stw	r6,-8(fp)
     ad0:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     ad4:	e0bffc17 	ldw	r2,-16(fp)
     ad8:	e0bff715 	stw	r2,-36(fp)
EventBits_t uxReturn, uxControlBits = 0;
     adc:	e03ff615 	stw	zero,-40(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     ae0:	e03ff815 	stw	zero,-32(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     ae4:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     ae8:	e0bff717 	ldw	r2,-36(fp)
     aec:	10800017 	ldw	r2,0(r2)
     af0:	e0bff915 	stw	r2,-28(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     af4:	e1bfff17 	ldw	r6,-4(fp)
     af8:	e17ffd17 	ldw	r5,-12(fp)
     afc:	e13ff917 	ldw	r4,-28(fp)
     b00:	0000f600 	call	f60 <prvTestWaitCondition>
     b04:	e0bffa15 	stw	r2,-24(fp)

		if( xWaitConditionMet != pdFALSE )
     b08:	e0bffa17 	ldw	r2,-24(fp)
     b0c:	10000d26 	beq	r2,zero,b44 <xEventGroupWaitBits+0x90>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     b10:	e0bff917 	ldw	r2,-28(fp)
     b14:	e0bff515 	stw	r2,-44(fp)
			xTicksToWait = ( TickType_t ) 0;
     b18:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     b1c:	e0bffe17 	ldw	r2,-8(fp)
     b20:	10002026 	beq	r2,zero,ba4 <xEventGroupWaitBits+0xf0>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     b24:	e0bff717 	ldw	r2,-36(fp)
     b28:	10c00017 	ldw	r3,0(r2)
     b2c:	e0bffd17 	ldw	r2,-12(fp)
     b30:	0084303a 	nor	r2,zero,r2
     b34:	1886703a 	and	r3,r3,r2
     b38:	e0bff717 	ldw	r2,-36(fp)
     b3c:	10c00015 	stw	r3,0(r2)
     b40:	00001806 	br	ba4 <xEventGroupWaitBits+0xf0>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     b44:	e0800217 	ldw	r2,8(fp)
     b48:	1000031e 	bne	r2,zero,b58 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     b4c:	e0bff917 	ldw	r2,-28(fp)
     b50:	e0bff515 	stw	r2,-44(fp)
     b54:	00001306 	br	ba4 <xEventGroupWaitBits+0xf0>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     b58:	e0bffe17 	ldw	r2,-8(fp)
     b5c:	10000326 	beq	r2,zero,b6c <xEventGroupWaitBits+0xb8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     b60:	e0bff617 	ldw	r2,-40(fp)
     b64:	10804034 	orhi	r2,r2,256
     b68:	e0bff615 	stw	r2,-40(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     b6c:	e0bfff17 	ldw	r2,-4(fp)
     b70:	10000326 	beq	r2,zero,b80 <xEventGroupWaitBits+0xcc>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     b74:	e0bff617 	ldw	r2,-40(fp)
     b78:	10810034 	orhi	r2,r2,1024
     b7c:	e0bff615 	stw	r2,-40(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     b80:	e0bff717 	ldw	r2,-36(fp)
     b84:	11000104 	addi	r4,r2,4
     b88:	e0fffd17 	ldw	r3,-12(fp)
     b8c:	e0bff617 	ldw	r2,-40(fp)
     b90:	1884b03a 	or	r2,r3,r2
     b94:	e1800217 	ldw	r6,8(fp)
     b98:	100b883a 	mov	r5,r2
     b9c:	00034b40 	call	34b4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     ba0:	e03ff515 	stw	zero,-44(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     ba4:	0002f980 	call	2f98 <xTaskResumeAll>
     ba8:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
     bac:	e0800217 	ldw	r2,8(fp)
     bb0:	10002126 	beq	r2,zero,c38 <xEventGroupWaitBits+0x184>
	{
		if( xAlreadyYielded == pdFALSE )
     bb4:	e0bffb17 	ldw	r2,-20(fp)
     bb8:	1000011e 	bne	r2,zero,bc0 <xEventGroupWaitBits+0x10c>
		{
			portYIELD_WITHIN_API();
     bbc:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     bc0:	000415c0 	call	415c <uxTaskResetEventItemValue>
     bc4:	e0bff515 	stw	r2,-44(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     bc8:	e0bff517 	ldw	r2,-44(fp)
     bcc:	1080802c 	andhi	r2,r2,512
     bd0:	1000141e 	bne	r2,zero,c24 <xEventGroupWaitBits+0x170>
		{
			taskENTER_CRITICAL();
     bd4:	00040a80 	call	40a8 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     bd8:	e0bff717 	ldw	r2,-36(fp)
     bdc:	10800017 	ldw	r2,0(r2)
     be0:	e0bff515 	stw	r2,-44(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     be4:	e1bfff17 	ldw	r6,-4(fp)
     be8:	e17ffd17 	ldw	r5,-12(fp)
     bec:	e13ff517 	ldw	r4,-44(fp)
     bf0:	0000f600 	call	f60 <prvTestWaitCondition>
     bf4:	10000926 	beq	r2,zero,c1c <xEventGroupWaitBits+0x168>
				{
					if( xClearOnExit != pdFALSE )
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	10000726 	beq	r2,zero,c1c <xEventGroupWaitBits+0x168>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     c00:	e0bff717 	ldw	r2,-36(fp)
     c04:	10c00017 	ldw	r3,0(r2)
     c08:	e0bffd17 	ldw	r2,-12(fp)
     c0c:	0084303a 	nor	r2,zero,r2
     c10:	1886703a 	and	r3,r3,r2
     c14:	e0bff717 	ldw	r2,-36(fp)
     c18:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     c1c:	00040fc0 	call	40fc <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     c20:	e03ff815 	stw	zero,-32(fp)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     c24:	e0fff517 	ldw	r3,-44(fp)
     c28:	00804034 	movhi	r2,256
     c2c:	10bfffc4 	addi	r2,r2,-1
     c30:	1884703a 	and	r2,r3,r2
     c34:	e0bff515 	stw	r2,-44(fp)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     c38:	e0bff517 	ldw	r2,-44(fp)
}
     c3c:	e037883a 	mov	sp,fp
     c40:	dfc00117 	ldw	ra,4(sp)
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00204 	addi	sp,sp,8
     c4c:	f800283a 	ret

00000c50 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     c50:	defffa04 	addi	sp,sp,-24
     c54:	dfc00515 	stw	ra,20(sp)
     c58:	df000415 	stw	fp,16(sp)
     c5c:	df000404 	addi	fp,sp,16
     c60:	e13ffe15 	stw	r4,-8(fp)
     c64:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     c68:	e0bffe17 	ldw	r2,-8(fp)
     c6c:	e0bffc15 	stw	r2,-16(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     c70:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     c74:	e0bffc17 	ldw	r2,-16(fp)
     c78:	10800017 	ldw	r2,0(r2)
     c7c:	e0bffd15 	stw	r2,-12(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     c80:	e0bffc17 	ldw	r2,-16(fp)
     c84:	10c00017 	ldw	r3,0(r2)
     c88:	e0bfff17 	ldw	r2,-4(fp)
     c8c:	0084303a 	nor	r2,zero,r2
     c90:	1886703a 	and	r3,r3,r2
     c94:	e0bffc17 	ldw	r2,-16(fp)
     c98:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
     c9c:	00040fc0 	call	40fc <vTaskExitCritical>

	return uxReturn;
     ca0:	e0bffd17 	ldw	r2,-12(fp)
}
     ca4:	e037883a 	mov	sp,fp
     ca8:	dfc00117 	ldw	ra,4(sp)
     cac:	df000017 	ldw	fp,0(sp)
     cb0:	dec00204 	addi	sp,sp,8
     cb4:	f800283a 	ret

00000cb8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     cb8:	defffb04 	addi	sp,sp,-20
     cbc:	df000415 	stw	fp,16(sp)
     cc0:	df000404 	addi	fp,sp,16
     cc4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     cc8:	e0bfff17 	ldw	r2,-4(fp)
     ccc:	e0bffc15 	stw	r2,-16(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     cd0:	e03ffd15 	stw	zero,-12(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
     cd4:	e0bffc17 	ldw	r2,-16(fp)
     cd8:	10800017 	ldw	r2,0(r2)
     cdc:	e0bffe15 	stw	r2,-8(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
     ce0:	e0bffe17 	ldw	r2,-8(fp)
}
     ce4:	e037883a 	mov	sp,fp
     ce8:	df000017 	ldw	fp,0(sp)
     cec:	dec00104 	addi	sp,sp,4
     cf0:	f800283a 	ret

00000cf4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     cf4:	defff304 	addi	sp,sp,-52
     cf8:	dfc00c15 	stw	ra,48(sp)
     cfc:	df000b15 	stw	fp,44(sp)
     d00:	df000b04 	addi	fp,sp,44
     d04:	e13ffe15 	stw	r4,-8(fp)
     d08:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     d0c:	e03ff615 	stw	zero,-40(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     d10:	e0bffe17 	ldw	r2,-8(fp)
     d14:	e0bff815 	stw	r2,-32(fp)
BaseType_t xMatchFound = pdFALSE;
     d18:	e03ff715 	stw	zero,-36(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
     d1c:	e0bff817 	ldw	r2,-32(fp)
     d20:	10800104 	addi	r2,r2,4
     d24:	e0bff915 	stw	r2,-28(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d28:	e0bff917 	ldw	r2,-28(fp)
     d2c:	10800204 	addi	r2,r2,8
     d30:	e0bffa15 	stw	r2,-24(fp)
	vTaskSuspendAll();
     d34:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     d38:	e0bff917 	ldw	r2,-28(fp)
     d3c:	10800317 	ldw	r2,12(r2)
     d40:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     d44:	e0bff817 	ldw	r2,-32(fp)
     d48:	10c00017 	ldw	r3,0(r2)
     d4c:	e0bfff17 	ldw	r2,-4(fp)
     d50:	1886b03a 	or	r3,r3,r2
     d54:	e0bff817 	ldw	r2,-32(fp)
     d58:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     d5c:	00003306 	br	e2c <xEventGroupSetBits+0x138>
		{
			pxNext = listGET_NEXT( pxListItem );
     d60:	e0bff517 	ldw	r2,-44(fp)
     d64:	10800117 	ldw	r2,4(r2)
     d68:	e0bffb15 	stw	r2,-20(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     d6c:	e0bff517 	ldw	r2,-44(fp)
     d70:	10800017 	ldw	r2,0(r2)
     d74:	e0bffc15 	stw	r2,-16(fp)
			xMatchFound = pdFALSE;
     d78:	e03ff715 	stw	zero,-36(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     d7c:	e0bffc17 	ldw	r2,-16(fp)
     d80:	10bfc02c 	andhi	r2,r2,65280
     d84:	e0bffd15 	stw	r2,-12(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     d88:	e0fffc17 	ldw	r3,-16(fp)
     d8c:	00804034 	movhi	r2,256
     d90:	10bfffc4 	addi	r2,r2,-1
     d94:	1884703a 	and	r2,r3,r2
     d98:	e0bffc15 	stw	r2,-16(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     d9c:	e0bffd17 	ldw	r2,-12(fp)
     da0:	1081002c 	andhi	r2,r2,1024
     da4:	1000081e 	bne	r2,zero,dc8 <xEventGroupSetBits+0xd4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     da8:	e0bff817 	ldw	r2,-32(fp)
     dac:	10c00017 	ldw	r3,0(r2)
     db0:	e0bffc17 	ldw	r2,-16(fp)
     db4:	1884703a 	and	r2,r3,r2
     db8:	10000b26 	beq	r2,zero,de8 <xEventGroupSetBits+0xf4>
				{
					xMatchFound = pdTRUE;
     dbc:	00800044 	movi	r2,1
     dc0:	e0bff715 	stw	r2,-36(fp)
     dc4:	00000806 	br	de8 <xEventGroupSetBits+0xf4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     dc8:	e0bff817 	ldw	r2,-32(fp)
     dcc:	10c00017 	ldw	r3,0(r2)
     dd0:	e0bffc17 	ldw	r2,-16(fp)
     dd4:	1886703a 	and	r3,r3,r2
     dd8:	e0bffc17 	ldw	r2,-16(fp)
     ddc:	1880021e 	bne	r3,r2,de8 <xEventGroupSetBits+0xf4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     de0:	00800044 	movi	r2,1
     de4:	e0bff715 	stw	r2,-36(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     de8:	e0bff717 	ldw	r2,-36(fp)
     dec:	10000d26 	beq	r2,zero,e24 <xEventGroupSetBits+0x130>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     df0:	e0bffd17 	ldw	r2,-12(fp)
     df4:	1080402c 	andhi	r2,r2,256
     df8:	10000426 	beq	r2,zero,e0c <xEventGroupSetBits+0x118>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     dfc:	e0fff617 	ldw	r3,-40(fp)
     e00:	e0bffc17 	ldw	r2,-16(fp)
     e04:	1884b03a 	or	r2,r3,r2
     e08:	e0bff615 	stw	r2,-40(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     e0c:	e0bff817 	ldw	r2,-32(fp)
     e10:	10800017 	ldw	r2,0(r2)
     e14:	10808034 	orhi	r2,r2,512
     e18:	100b883a 	mov	r5,r2
     e1c:	e13ff517 	ldw	r4,-44(fp)
     e20:	00036940 	call	3694 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     e24:	e0bffb17 	ldw	r2,-20(fp)
     e28:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     e2c:	e0fff517 	ldw	r3,-44(fp)
     e30:	e0bffa17 	ldw	r2,-24(fp)
     e34:	18bfca1e 	bne	r3,r2,d60 <__alt_data_end+0xf0000d60>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     e38:	e0bff817 	ldw	r2,-32(fp)
     e3c:	10c00017 	ldw	r3,0(r2)
     e40:	e0bff617 	ldw	r2,-40(fp)
     e44:	0084303a 	nor	r2,zero,r2
     e48:	1886703a 	and	r3,r3,r2
     e4c:	e0bff817 	ldw	r2,-32(fp)
     e50:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
     e54:	0002f980 	call	2f98 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     e58:	e0bff817 	ldw	r2,-32(fp)
     e5c:	10800017 	ldw	r2,0(r2)
}
     e60:	e037883a 	mov	sp,fp
     e64:	dfc00117 	ldw	ra,4(sp)
     e68:	df000017 	ldw	fp,0(sp)
     e6c:	dec00204 	addi	sp,sp,8
     e70:	f800283a 	ret

00000e74 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     e74:	defffb04 	addi	sp,sp,-20
     e78:	dfc00415 	stw	ra,16(sp)
     e7c:	df000315 	stw	fp,12(sp)
     e80:	df000304 	addi	fp,sp,12
     e84:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     e88:	e0bfff17 	ldw	r2,-4(fp)
     e8c:	e0bffd15 	stw	r2,-12(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
     e90:	e0bffd17 	ldw	r2,-12(fp)
     e94:	10800104 	addi	r2,r2,4
     e98:	e0bffe15 	stw	r2,-8(fp)

	vTaskSuspendAll();
     e9c:	0002f6c0 	call	2f6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     ea0:	00000506 	br	eb8 <vEventGroupDelete+0x44>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     ea4:	e0bffe17 	ldw	r2,-8(fp)
     ea8:	10800317 	ldw	r2,12(r2)
     eac:	01408034 	movhi	r5,512
     eb0:	1009883a 	mov	r4,r2
     eb4:	00036940 	call	3694 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     eb8:	e0bffe17 	ldw	r2,-8(fp)
     ebc:	10800017 	ldw	r2,0(r2)
     ec0:	103ff81e 	bne	r2,zero,ea4 <__alt_data_end+0xf0000ea4>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
     ec4:	e13ffd17 	ldw	r4,-12(fp)
     ec8:	00011500 	call	1150 <vPortFree>
	}
	( void ) xTaskResumeAll();
     ecc:	0002f980 	call	2f98 <xTaskResumeAll>
}
     ed0:	0001883a 	nop
     ed4:	e037883a 	mov	sp,fp
     ed8:	dfc00117 	ldw	ra,4(sp)
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00204 	addi	sp,sp,8
     ee4:	f800283a 	ret

00000ee8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     ee8:	defffc04 	addi	sp,sp,-16
     eec:	dfc00315 	stw	ra,12(sp)
     ef0:	df000215 	stw	fp,8(sp)
     ef4:	df000204 	addi	fp,sp,8
     ef8:	e13ffe15 	stw	r4,-8(fp)
     efc:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     f00:	e17fff17 	ldw	r5,-4(fp)
     f04:	e13ffe17 	ldw	r4,-8(fp)
     f08:	0000cf40 	call	cf4 <xEventGroupSetBits>
}
     f0c:	0001883a 	nop
     f10:	e037883a 	mov	sp,fp
     f14:	dfc00117 	ldw	ra,4(sp)
     f18:	df000017 	ldw	fp,0(sp)
     f1c:	dec00204 	addi	sp,sp,8
     f20:	f800283a 	ret

00000f24 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
     f24:	defffc04 	addi	sp,sp,-16
     f28:	dfc00315 	stw	ra,12(sp)
     f2c:	df000215 	stw	fp,8(sp)
     f30:	df000204 	addi	fp,sp,8
     f34:	e13ffe15 	stw	r4,-8(fp)
     f38:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     f3c:	e17fff17 	ldw	r5,-4(fp)
     f40:	e13ffe17 	ldw	r4,-8(fp)
     f44:	0000c500 	call	c50 <xEventGroupClearBits>
}
     f48:	0001883a 	nop
     f4c:	e037883a 	mov	sp,fp
     f50:	dfc00117 	ldw	ra,4(sp)
     f54:	df000017 	ldw	fp,0(sp)
     f58:	dec00204 	addi	sp,sp,8
     f5c:	f800283a 	ret

00000f60 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     f60:	defffb04 	addi	sp,sp,-20
     f64:	df000415 	stw	fp,16(sp)
     f68:	df000404 	addi	fp,sp,16
     f6c:	e13ffd15 	stw	r4,-12(fp)
     f70:	e17ffe15 	stw	r5,-8(fp)
     f74:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
     f78:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
     f7c:	e0bfff17 	ldw	r2,-4(fp)
     f80:	1000071e 	bne	r2,zero,fa0 <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     f84:	e0fffd17 	ldw	r3,-12(fp)
     f88:	e0bffe17 	ldw	r2,-8(fp)
     f8c:	1884703a 	and	r2,r3,r2
     f90:	10000a26 	beq	r2,zero,fbc <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
     f94:	00800044 	movi	r2,1
     f98:	e0bffc15 	stw	r2,-16(fp)
     f9c:	00000706 	br	fbc <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     fa0:	e0fffd17 	ldw	r3,-12(fp)
     fa4:	e0bffe17 	ldw	r2,-8(fp)
     fa8:	1886703a 	and	r3,r3,r2
     fac:	e0bffe17 	ldw	r2,-8(fp)
     fb0:	1880021e 	bne	r3,r2,fbc <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
     fb4:	00800044 	movi	r2,1
     fb8:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     fbc:	e0bffc17 	ldw	r2,-16(fp)
}
     fc0:	e037883a 	mov	sp,fp
     fc4:	df000017 	ldw	fp,0(sp)
     fc8:	dec00104 	addi	sp,sp,4
     fcc:	f800283a 	ret

00000fd0 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     fd0:	defff904 	addi	sp,sp,-28
     fd4:	dfc00615 	stw	ra,24(sp)
     fd8:	df000515 	stw	fp,20(sp)
     fdc:	df000504 	addi	fp,sp,20
     fe0:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
     fe4:	e03ffd15 	stw	zero,-12(fp)

        vTaskSuspendAll();
     fe8:	0002f6c0 	call	2f6c <vTaskSuspendAll>
        {
                /* If this is the first call to malloc then the heap will require
                initialisation to setup the list of free blocks. */
                if( pxEnd == NULL )
     fec:	d0a02197 	ldw	r2,-32634(gp)
     ff0:	1000011e 	bne	r2,zero,ff8 <pvPortMalloc+0x28>
                {
                        prvHeapInit();
     ff4:	00012100 	call	1210 <prvHeapInit>
                }

                /* The wanted size is increased so it can contain a xBlockLink
                structure in addition to the requested amount of bytes. */
                if( xWantedSize > 0 )
     ff8:	e0bfff17 	ldw	r2,-4(fp)
     ffc:	10000d26 	beq	r2,zero,1034 <pvPortMalloc+0x64>
                {
                        xWantedSize += heapSTRUCT_SIZE;
    1000:	00800304 	movi	r2,12
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	e0ffff17 	ldw	r3,-4(fp)
    100c:	1885883a 	add	r2,r3,r2
    1010:	e0bfff15 	stw	r2,-4(fp)

                        /* Ensure that blocks are always aligned to the required number of
                        bytes. */
                        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1014:	e0bfff17 	ldw	r2,-4(fp)
    1018:	108000cc 	andi	r2,r2,3
    101c:	10000526 	beq	r2,zero,1034 <pvPortMalloc+0x64>
                        {
                                /* Byte alignment required. */
                                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1020:	e0ffff17 	ldw	r3,-4(fp)
    1024:	00bfff04 	movi	r2,-4
    1028:	1884703a 	and	r2,r3,r2
    102c:	10800104 	addi	r2,r2,4
    1030:	e0bfff15 	stw	r2,-4(fp)
                        }
                }

                if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
    1034:	e0bfff17 	ldw	r2,-4(fp)
    1038:	10003e26 	beq	r2,zero,1134 <pvPortMalloc+0x164>
    103c:	00800234 	movhi	r2,8
    1040:	10b40004 	addi	r2,r2,-12288
    1044:	e0ffff17 	ldw	r3,-4(fp)
    1048:	18803a2e 	bgeu	r3,r2,1134 <pvPortMalloc+0x164>
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
    104c:	d0a01f84 	addi	r2,gp,-32642
    1050:	e0bffc15 	stw	r2,-16(fp)
                        pxBlock = xStart.pxNextFreeBlock;
    1054:	d0a01f97 	ldw	r2,-32642(gp)
    1058:	e0bffb15 	stw	r2,-20(fp)
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    105c:	00000506 	br	1074 <pvPortMalloc+0xa4>
                        {
                                pxPreviousBlock = pxBlock;
    1060:	e0bffb17 	ldw	r2,-20(fp)
    1064:	e0bffc15 	stw	r2,-16(fp)
                                pxBlock = pxBlock->pxNextFreeBlock;
    1068:	e0bffb17 	ldw	r2,-20(fp)
    106c:	10800017 	ldw	r2,0(r2)
    1070:	e0bffb15 	stw	r2,-20(fp)
                {
                        /* Traverse the list from the start     (lowest address) block until one
                        of adequate size is found. */
                        pxPreviousBlock = &xStart;
                        pxBlock = xStart.pxNextFreeBlock;
                        while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1074:	e0bffb17 	ldw	r2,-20(fp)
    1078:	10c00117 	ldw	r3,4(r2)
    107c:	e0bfff17 	ldw	r2,-4(fp)
    1080:	1880032e 	bgeu	r3,r2,1090 <pvPortMalloc+0xc0>
    1084:	e0bffb17 	ldw	r2,-20(fp)
    1088:	10800017 	ldw	r2,0(r2)
    108c:	103ff41e 	bne	r2,zero,1060 <__alt_data_end+0xf0001060>
                                pxBlock = pxBlock->pxNextFreeBlock;
                        }

                        /* If the end marker was reached then a block of adequate size was
                        not found. */
                        if( pxBlock != pxEnd )
    1090:	d0a02197 	ldw	r2,-32634(gp)
    1094:	e0fffb17 	ldw	r3,-20(fp)
    1098:	18802626 	beq	r3,r2,1134 <pvPortMalloc+0x164>
                        {
                                /* Return the memory space - jumping over the xBlockLink structure
                                at its start. */
                                pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    109c:	e0bffc17 	ldw	r2,-16(fp)
    10a0:	10c00017 	ldw	r3,0(r2)
    10a4:	00800304 	movi	r2,12
    10a8:	10bfffcc 	andi	r2,r2,65535
    10ac:	1885883a 	add	r2,r3,r2
    10b0:	e0bffd15 	stw	r2,-12(fp)

                                /* This block is being returned for use so must be taken out of
                                the     list of free blocks. */
                                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    10b4:	e0bffb17 	ldw	r2,-20(fp)
    10b8:	10c00017 	ldw	r3,0(r2)
    10bc:	e0bffc17 	ldw	r2,-16(fp)
    10c0:	10c00015 	stw	r3,0(r2)

                                /* If the block is larger than required it can be split into two. */
                                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    10c4:	e0bffb17 	ldw	r2,-20(fp)
    10c8:	10c00117 	ldw	r3,4(r2)
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	1887c83a 	sub	r3,r3,r2
    10d4:	00800304 	movi	r2,12
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	10c00f2e 	bgeu	r2,r3,1120 <pvPortMalloc+0x150>
                                {
                                        /* This block is to be split into two.  Create a new block
                                        following the number of bytes requested. The void cast is
                                        used to prevent byte alignment warnings from the compiler. */
                                        pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    10e4:	e0fffb17 	ldw	r3,-20(fp)
    10e8:	e0bfff17 	ldw	r2,-4(fp)
    10ec:	1885883a 	add	r2,r3,r2
    10f0:	e0bffe15 	stw	r2,-8(fp)

                                        /* Calculate the sizes of two blocks split from the single
                                        block. */
                                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    10f4:	e0bffb17 	ldw	r2,-20(fp)
    10f8:	10c00117 	ldw	r3,4(r2)
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	1887c83a 	sub	r3,r3,r2
    1104:	e0bffe17 	ldw	r2,-8(fp)
    1108:	10c00115 	stw	r3,4(r2)
                                        pxBlock->xBlockSize = xWantedSize;
    110c:	e0bffb17 	ldw	r2,-20(fp)
    1110:	e0ffff17 	ldw	r3,-4(fp)
    1114:	10c00115 	stw	r3,4(r2)

                                        /* Insert the new block into the list of free blocks. */
                                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1118:	e13ffe17 	ldw	r4,-8(fp)
    111c:	00012d00 	call	12d0 <prvInsertBlockIntoFreeList>
                                }

                                xFreeBytesRemaining -= pxBlock->xBlockSize;
    1120:	d0e00297 	ldw	r3,-32758(gp)
    1124:	e0bffb17 	ldw	r2,-20(fp)
    1128:	10800117 	ldw	r2,4(r2)
    112c:	1885c83a 	sub	r2,r3,r2
    1130:	d0a00295 	stw	r2,-32758(gp)
                        }
                }
        }
        xTaskResumeAll();
    1134:	0002f980 	call	2f98 <xTaskResumeAll>
                        vApplicationMallocFailedHook();
                }
        }
        #endif

        return pvReturn;
    1138:	e0bffd17 	ldw	r2,-12(fp)
}
    113c:	e037883a 	mov	sp,fp
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1150:	defffb04 	addi	sp,sp,-20
    1154:	dfc00415 	stw	ra,16(sp)
    1158:	df000315 	stw	fp,12(sp)
    115c:	df000304 	addi	fp,sp,12
    1160:	e13fff15 	stw	r4,-4(fp)
unsigned char *puc = ( unsigned char * ) pv;
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	e0bffd15 	stw	r2,-12(fp)
xBlockLink *pxLink;

        if( pv != NULL )
    116c:	e0bfff17 	ldw	r2,-4(fp)
    1170:	10001126 	beq	r2,zero,11b8 <vPortFree+0x68>
        {
                /* The memory being freed will have an xBlockLink structure immediately
                before it. */
                puc -= heapSTRUCT_SIZE;
    1174:	00800304 	movi	r2,12
    1178:	10bfffcc 	andi	r2,r2,65535
    117c:	0085c83a 	sub	r2,zero,r2
    1180:	e0fffd17 	ldw	r3,-12(fp)
    1184:	1885883a 	add	r2,r3,r2
    1188:	e0bffd15 	stw	r2,-12(fp)

                /* This casting is to keep the compiler from issuing warnings. */
                pxLink = ( void * ) puc;
    118c:	e0bffd17 	ldw	r2,-12(fp)
    1190:	e0bffe15 	stw	r2,-8(fp)

                vTaskSuspendAll();
    1194:	0002f6c0 	call	2f6c <vTaskSuspendAll>
                {
                        /* Add this block to the list of free blocks. */
                        xFreeBytesRemaining += pxLink->xBlockSize;
    1198:	e0bffe17 	ldw	r2,-8(fp)
    119c:	10c00117 	ldw	r3,4(r2)
    11a0:	d0a00297 	ldw	r2,-32758(gp)
    11a4:	1885883a 	add	r2,r3,r2
    11a8:	d0a00295 	stw	r2,-32758(gp)
                        prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    11ac:	e13ffe17 	ldw	r4,-8(fp)
    11b0:	00012d00 	call	12d0 <prvInsertBlockIntoFreeList>
                }
                xTaskResumeAll();
    11b4:	0002f980 	call	2f98 <xTaskResumeAll>
        }
}
    11b8:	0001883a 	nop
    11bc:	e037883a 	mov	sp,fp
    11c0:	dfc00117 	ldw	ra,4(sp)
    11c4:	df000017 	ldw	fp,0(sp)
    11c8:	dec00204 	addi	sp,sp,8
    11cc:	f800283a 	ret

000011d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11d0:	deffff04 	addi	sp,sp,-4
    11d4:	df000015 	stw	fp,0(sp)
    11d8:	d839883a 	mov	fp,sp
        return xFreeBytesRemaining;
    11dc:	d0a00297 	ldw	r2,-32758(gp)
}
    11e0:	e037883a 	mov	sp,fp
    11e4:	df000017 	ldw	fp,0(sp)
    11e8:	dec00104 	addi	sp,sp,4
    11ec:	f800283a 	ret

000011f0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    11f0:	deffff04 	addi	sp,sp,-4
    11f4:	df000015 	stw	fp,0(sp)
    11f8:	d839883a 	mov	fp,sp
        /* This just exists to keep the linker quiet. */
}
    11fc:	0001883a 	nop
    1200:	e037883a 	mov	sp,fp
    1204:	df000017 	ldw	fp,0(sp)
    1208:	dec00104 	addi	sp,sp,4
    120c:	f800283a 	ret

00001210 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    1210:	defffd04 	addi	sp,sp,-12
    1214:	df000215 	stw	fp,8(sp)
    1218:	df000204 	addi	fp,sp,8
        /* Ensure the start of the heap is aligned. */
        configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

        /* xStart is used to hold a pointer to the first item in the list of free
        blocks.  The void cast is used to prevent compiler warnings. */
        xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
    121c:	00820034 	movhi	r2,2048
    1220:	108b6d04 	addi	r2,r2,11700
    1224:	d0a01f95 	stw	r2,-32642(gp)
        xStart.xBlockSize = ( size_t ) 0;
    1228:	d0202095 	stw	zero,-32638(gp)

        /* pxEnd is used to mark the end of the list of free blocks and is inserted
        at the end of the heap space. */
        pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
    122c:	00c00234 	movhi	r3,8
    1230:	18f40004 	addi	r3,r3,-12288
    1234:	00820034 	movhi	r2,2048
    1238:	108b6d04 	addi	r2,r2,11700
    123c:	1885883a 	add	r2,r3,r2
    1240:	e0bffe15 	stw	r2,-8(fp)
        pucHeapEnd -= heapSTRUCT_SIZE;
    1244:	00800304 	movi	r2,12
    1248:	10bfffcc 	andi	r2,r2,65535
    124c:	0085c83a 	sub	r2,zero,r2
    1250:	e0fffe17 	ldw	r3,-8(fp)
    1254:	1885883a 	add	r2,r3,r2
    1258:	e0bffe15 	stw	r2,-8(fp)
        pxEnd = ( void * ) pucHeapEnd;
    125c:	e0bffe17 	ldw	r2,-8(fp)
    1260:	d0a02195 	stw	r2,-32634(gp)
        configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
        pxEnd->xBlockSize = 0;
    1264:	d0a02197 	ldw	r2,-32634(gp)
    1268:	10000115 	stw	zero,4(r2)
        pxEnd->pxNextFreeBlock = NULL;
    126c:	d0a02197 	ldw	r2,-32634(gp)
    1270:	10000015 	stw	zero,0(r2)

        /* To start with there is a single free block that is sized to take up the
        entire heap space, minus the space taken by pxEnd. */
        pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
    1274:	00820034 	movhi	r2,2048
    1278:	108b6d04 	addi	r2,r2,11700
    127c:	e0bfff15 	stw	r2,-4(fp)
        pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
    1280:	00800234 	movhi	r2,8
    1284:	10b40004 	addi	r2,r2,-12288
    1288:	00c00304 	movi	r3,12
    128c:	18ffffcc 	andi	r3,r3,65535
    1290:	10c7c83a 	sub	r3,r2,r3
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	10c00115 	stw	r3,4(r2)
        pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    129c:	d0e02197 	ldw	r3,-32634(gp)
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10c00015 	stw	r3,0(r2)

        /* The heap now contains pxEnd. */
        xFreeBytesRemaining -= heapSTRUCT_SIZE;
    12a8:	d0e00297 	ldw	r3,-32758(gp)
    12ac:	00800304 	movi	r2,12
    12b0:	10bfffcc 	andi	r2,r2,65535
    12b4:	1885c83a 	sub	r2,r3,r2
    12b8:	d0a00295 	stw	r2,-32758(gp)
}
    12bc:	0001883a 	nop
    12c0:	e037883a 	mov	sp,fp
    12c4:	df000017 	ldw	fp,0(sp)
    12c8:	dec00104 	addi	sp,sp,4
    12cc:	f800283a 	ret

000012d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
    12d0:	defffc04 	addi	sp,sp,-16
    12d4:	df000315 	stw	fp,12(sp)
    12d8:	df000304 	addi	fp,sp,12
    12dc:	e13fff15 	stw	r4,-4(fp)
xBlockLink *pxIterator;
unsigned char *puc;

        /* Iterate through the list until a block is found that has a higher address
        than the block being inserted. */
        for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12e0:	d0a01f84 	addi	r2,gp,-32642
    12e4:	e0bffd15 	stw	r2,-12(fp)
    12e8:	00000306 	br	12f8 <prvInsertBlockIntoFreeList+0x28>
    12ec:	e0bffd17 	ldw	r2,-12(fp)
    12f0:	10800017 	ldw	r2,0(r2)
    12f4:	e0bffd15 	stw	r2,-12(fp)
    12f8:	e0bffd17 	ldw	r2,-12(fp)
    12fc:	10c00017 	ldw	r3,0(r2)
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	18bff936 	bltu	r3,r2,12ec <__alt_data_end+0xf00012ec>
                /* Nothing to do here, just iterate to the right position. */
        }

        /* Do the block being inserted, and the block it is being inserted after
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxIterator;
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	e0bffe15 	stw	r2,-8(fp)
        if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
    1310:	e0bffd17 	ldw	r2,-12(fp)
    1314:	10800117 	ldw	r2,4(r2)
    1318:	e0fffe17 	ldw	r3,-8(fp)
    131c:	1887883a 	add	r3,r3,r2
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	1880091e 	bne	r3,r2,134c <prvInsertBlockIntoFreeList+0x7c>
        {
                pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1328:	e0bffd17 	ldw	r2,-12(fp)
    132c:	10c00117 	ldw	r3,4(r2)
    1330:	e0bfff17 	ldw	r2,-4(fp)
    1334:	10800117 	ldw	r2,4(r2)
    1338:	1887883a 	add	r3,r3,r2
    133c:	e0bffd17 	ldw	r2,-12(fp)
    1340:	10c00115 	stw	r3,4(r2)
                pxBlockToInsert = pxIterator;
    1344:	e0bffd17 	ldw	r2,-12(fp)
    1348:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Do the block being inserted, and the block it is being inserted before
        make a contiguous block of memory? */
        puc = ( unsigned char * ) pxBlockToInsert;
    134c:	e0bfff17 	ldw	r2,-4(fp)
    1350:	e0bffe15 	stw	r2,-8(fp)
        if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
    1354:	e0bfff17 	ldw	r2,-4(fp)
    1358:	10800117 	ldw	r2,4(r2)
    135c:	e0fffe17 	ldw	r3,-8(fp)
    1360:	1887883a 	add	r3,r3,r2
    1364:	e0bffd17 	ldw	r2,-12(fp)
    1368:	10800017 	ldw	r2,0(r2)
    136c:	1880161e 	bne	r3,r2,13c8 <prvInsertBlockIntoFreeList+0xf8>
        {
                if( pxIterator->pxNextFreeBlock != pxEnd )
    1370:	e0bffd17 	ldw	r2,-12(fp)
    1374:	10c00017 	ldw	r3,0(r2)
    1378:	d0a02197 	ldw	r2,-32634(gp)
    137c:	18800e26 	beq	r3,r2,13b8 <prvInsertBlockIntoFreeList+0xe8>
                {
                        /* Form one big block from the two blocks. */
                        pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1380:	e0bfff17 	ldw	r2,-4(fp)
    1384:	10c00117 	ldw	r3,4(r2)
    1388:	e0bffd17 	ldw	r2,-12(fp)
    138c:	10800017 	ldw	r2,0(r2)
    1390:	10800117 	ldw	r2,4(r2)
    1394:	1887883a 	add	r3,r3,r2
    1398:	e0bfff17 	ldw	r2,-4(fp)
    139c:	10c00115 	stw	r3,4(r2)
                        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    13a0:	e0bffd17 	ldw	r2,-12(fp)
    13a4:	10800017 	ldw	r2,0(r2)
    13a8:	10c00017 	ldw	r3,0(r2)
    13ac:	e0bfff17 	ldw	r2,-4(fp)
    13b0:	10c00015 	stw	r3,0(r2)
    13b4:	00000806 	br	13d8 <prvInsertBlockIntoFreeList+0x108>
                }
                else
                {
                        pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13b8:	d0e02197 	ldw	r3,-32634(gp)
    13bc:	e0bfff17 	ldw	r2,-4(fp)
    13c0:	10c00015 	stw	r3,0(r2)
    13c4:	00000406 	br	13d8 <prvInsertBlockIntoFreeList+0x108>
                }
        }
        else
        {
                pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13c8:	e0bffd17 	ldw	r2,-12(fp)
    13cc:	10c00017 	ldw	r3,0(r2)
    13d0:	e0bfff17 	ldw	r2,-4(fp)
    13d4:	10c00015 	stw	r3,0(r2)

        /* If the block being inserted plugged a gab, so was merged with the block
        before and the block after, then it's pxNextFreeBlock pointer will have
        already been set, and should not be set here as that would make it point
        to itself. */
        if( pxIterator != pxBlockToInsert )
    13d8:	e0fffd17 	ldw	r3,-12(fp)
    13dc:	e0bfff17 	ldw	r2,-4(fp)
    13e0:	18800326 	beq	r3,r2,13f0 <prvInsertBlockIntoFreeList+0x120>
        {
                pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13e4:	e0bffd17 	ldw	r2,-12(fp)
    13e8:	e0ffff17 	ldw	r3,-4(fp)
    13ec:	10c00015 	stw	r3,0(r2)
        }
}
    13f0:	0001883a 	nop
    13f4:	e037883a 	mov	sp,fp
    13f8:	df000017 	ldw	fp,0(sp)
    13fc:	dec00104 	addi	sp,sp,4
    1400:	f800283a 	ret

00001404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1404:	defffe04 	addi	sp,sp,-8
    1408:	df000115 	stw	fp,4(sp)
    140c:	df000104 	addi	fp,sp,4
    1410:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1414:	e0bfff17 	ldw	r2,-4(fp)
    1418:	10c00204 	addi	r3,r2,8
    141c:	e0bfff17 	ldw	r2,-4(fp)
    1420:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1424:	e0bfff17 	ldw	r2,-4(fp)
    1428:	00ffffc4 	movi	r3,-1
    142c:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1430:	e0bfff17 	ldw	r2,-4(fp)
    1434:	10c00204 	addi	r3,r2,8
    1438:	e0bfff17 	ldw	r2,-4(fp)
    143c:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1440:	e0bfff17 	ldw	r2,-4(fp)
    1444:	10c00204 	addi	r3,r2,8
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1450:	e0bfff17 	ldw	r2,-4(fp)
    1454:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1458:	0001883a 	nop
    145c:	e037883a 	mov	sp,fp
    1460:	df000017 	ldw	fp,0(sp)
    1464:	dec00104 	addi	sp,sp,4
    1468:	f800283a 	ret

0000146c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    146c:	defffe04 	addi	sp,sp,-8
    1470:	df000115 	stw	fp,4(sp)
    1474:	df000104 	addi	fp,sp,4
    1478:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    147c:	e0bfff17 	ldw	r2,-4(fp)
    1480:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1484:	0001883a 	nop
    1488:	e037883a 	mov	sp,fp
    148c:	df000017 	ldw	fp,0(sp)
    1490:	dec00104 	addi	sp,sp,4
    1494:	f800283a 	ret

00001498 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1498:	defffc04 	addi	sp,sp,-16
    149c:	df000315 	stw	fp,12(sp)
    14a0:	df000304 	addi	fp,sp,12
    14a4:	e13ffe15 	stw	r4,-8(fp)
    14a8:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	10800117 	ldw	r2,4(r2)
    14b4:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14b8:	e0bfff17 	ldw	r2,-4(fp)
    14bc:	e0fffd17 	ldw	r3,-12(fp)
    14c0:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c4:	e0bffd17 	ldw	r2,-12(fp)
    14c8:	10c00217 	ldw	r3,8(r2)
    14cc:	e0bfff17 	ldw	r2,-4(fp)
    14d0:	10c00215 	stw	r3,8(r2)
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14d4:	e0bffd17 	ldw	r2,-12(fp)
    14d8:	10800217 	ldw	r2,8(r2)
    14dc:	e0ffff17 	ldw	r3,-4(fp)
    14e0:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
    14e4:	e0bffd17 	ldw	r2,-12(fp)
    14e8:	e0ffff17 	ldw	r3,-4(fp)
    14ec:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14f0:	e0bfff17 	ldw	r2,-4(fp)
    14f4:	e0fffe17 	ldw	r3,-8(fp)
    14f8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	10800017 	ldw	r2,0(r2)
    1504:	10c00044 	addi	r3,r2,1
    1508:	e0bffe17 	ldw	r2,-8(fp)
    150c:	10c00015 	stw	r3,0(r2)
}
    1510:	0001883a 	nop
    1514:	e037883a 	mov	sp,fp
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00104 	addi	sp,sp,4
    1520:	f800283a 	ret

00001524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1524:	defffb04 	addi	sp,sp,-20
    1528:	df000415 	stw	fp,16(sp)
    152c:	df000404 	addi	fp,sp,16
    1530:	e13ffe15 	stw	r4,-8(fp)
    1534:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	10800017 	ldw	r2,0(r2)
    1540:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1544:	e0bffd17 	ldw	r2,-12(fp)
    1548:	10bfffd8 	cmpnei	r2,r2,-1
    154c:	1000041e 	bne	r2,zero,1560 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	10800417 	ldw	r2,16(r2)
    1558:	e0bffc15 	stw	r2,-16(fp)
    155c:	00000c06 	br	1590 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1560:	e0bffe17 	ldw	r2,-8(fp)
    1564:	10800204 	addi	r2,r2,8
    1568:	e0bffc15 	stw	r2,-16(fp)
    156c:	00000306 	br	157c <vListInsert+0x58>
    1570:	e0bffc17 	ldw	r2,-16(fp)
    1574:	10800117 	ldw	r2,4(r2)
    1578:	e0bffc15 	stw	r2,-16(fp)
    157c:	e0bffc17 	ldw	r2,-16(fp)
    1580:	10800117 	ldw	r2,4(r2)
    1584:	10800017 	ldw	r2,0(r2)
    1588:	e0fffd17 	ldw	r3,-12(fp)
    158c:	18bff82e 	bgeu	r3,r2,1570 <__alt_data_end+0xf0001570>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1590:	e0bffc17 	ldw	r2,-16(fp)
    1594:	10c00117 	ldw	r3,4(r2)
    1598:	e0bfff17 	ldw	r2,-4(fp)
    159c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10800117 	ldw	r2,4(r2)
    15a8:	e0ffff17 	ldw	r3,-4(fp)
    15ac:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
    15b0:	e0bfff17 	ldw	r2,-4(fp)
    15b4:	e0fffc17 	ldw	r3,-16(fp)
    15b8:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
    15bc:	e0bffc17 	ldw	r2,-16(fp)
    15c0:	e0ffff17 	ldw	r3,-4(fp)
    15c4:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	e0fffe17 	ldw	r3,-8(fp)
    15d0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	10800017 	ldw	r2,0(r2)
    15dc:	10c00044 	addi	r3,r2,1
    15e0:	e0bffe17 	ldw	r2,-8(fp)
    15e4:	10c00015 	stw	r3,0(r2)
}
    15e8:	0001883a 	nop
    15ec:	e037883a 	mov	sp,fp
    15f0:	df000017 	ldw	fp,0(sp)
    15f4:	dec00104 	addi	sp,sp,4
    15f8:	f800283a 	ret

000015fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15fc:	defffd04 	addi	sp,sp,-12
    1600:	df000215 	stw	fp,8(sp)
    1604:	df000204 	addi	fp,sp,8
    1608:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    160c:	e0bfff17 	ldw	r2,-4(fp)
    1610:	10800417 	ldw	r2,16(r2)
    1614:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1618:	e0bfff17 	ldw	r2,-4(fp)
    161c:	10800117 	ldw	r2,4(r2)
    1620:	e0ffff17 	ldw	r3,-4(fp)
    1624:	18c00217 	ldw	r3,8(r3)
    1628:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    162c:	e0bfff17 	ldw	r2,-4(fp)
    1630:	10800217 	ldw	r2,8(r2)
    1634:	e0ffff17 	ldw	r3,-4(fp)
    1638:	18c00117 	ldw	r3,4(r3)
    163c:	10c00115 	stw	r3,4(r2)

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1640:	e0bffe17 	ldw	r2,-8(fp)
    1644:	10c00117 	ldw	r3,4(r2)
    1648:	e0bfff17 	ldw	r2,-4(fp)
    164c:	1880041e 	bne	r3,r2,1660 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1650:	e0bfff17 	ldw	r2,-4(fp)
    1654:	10c00217 	ldw	r3,8(r2)
    1658:	e0bffe17 	ldw	r2,-8(fp)
    165c:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1660:	e0bfff17 	ldw	r2,-4(fp)
    1664:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
    1668:	e0bffe17 	ldw	r2,-8(fp)
    166c:	10800017 	ldw	r2,0(r2)
    1670:	10ffffc4 	addi	r3,r2,-1
    1674:	e0bffe17 	ldw	r2,-8(fp)
    1678:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
    167c:	e0bffe17 	ldw	r2,-8(fp)
    1680:	10800017 	ldw	r2,0(r2)
}
    1684:	e037883a 	mov	sp,fp
    1688:	df000017 	ldw	fp,0(sp)
    168c:	dec00104 	addi	sp,sp,4
    1690:	f800283a 	ret

00001694 <vApplicationStackOverflowHook>:
#define configTICK_RATE_HZ 1000
#define configCPU_CLOCK_HZ TIMER1MS_FREQ
#define SYS_CLK_IRQ TIMER1MS_IRQ
//stack overflow hook
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName )
{
    1694:	defffc04 	addi	sp,sp,-16
    1698:	dfc00315 	stw	ra,12(sp)
    169c:	df000215 	stw	fp,8(sp)
    16a0:	df000204 	addi	fp,sp,8
    16a4:	e13ffe15 	stw	r4,-8(fp)
    16a8:	e17fff15 	stw	r5,-4(fp)
	printf("[free_rtos] Application stack overflow at task: %s\n", pcTaskName);
    16ac:	e17fff17 	ldw	r5,-4(fp)
    16b0:	01020034 	movhi	r4,2048
    16b4:	21000004 	addi	r4,r4,0
    16b8:	00093c00 	call	93c0 <printf>
}
    16bc:	0001883a 	nop
    16c0:	e037883a 	mov	sp,fp
    16c4:	dfc00117 	ldw	ra,4(sp)
    16c8:	df000017 	ldw	fp,0(sp)
    16cc:	dec00204 	addi	sp,sp,8
    16d0:	f800283a 	ret

000016d4 <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
    16d4:	defffe04 	addi	sp,sp,-8
    16d8:	df000115 	stw	fp,4(sp)
    16dc:	df000104 	addi	fp,sp,4
    16e0:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
    16e4:	e0bfff17 	ldw	r2,-4(fp)
    16e8:	16800015 	stw	gp,0(r2)
}
    16ec:	0001883a 	nop
    16f0:	e037883a 	mov	sp,fp
    16f4:	df000017 	ldw	fp,0(sp)
    16f8:	dec00104 	addi	sp,sp,4
    16fc:	f800283a 	ret

00001700 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
    1700:	defff904 	addi	sp,sp,-28
    1704:	dfc00615 	stw	ra,24(sp)
    1708:	df000515 	stw	fp,20(sp)
    170c:	df000504 	addi	fp,sp,20
    1710:	e13ffd15 	stw	r4,-12(fp)
    1714:	e17ffe15 	stw	r5,-8(fp)
    1718:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
    171c:	e0bffd17 	ldw	r2,-12(fp)
    1720:	10bfff04 	addi	r2,r2,-4
    1724:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
    1728:	e0bffc04 	addi	r2,fp,-16
    172c:	1009883a 	mov	r4,r2
    1730:	00016d40 	call	16d4 <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    1734:	e0fffd17 	ldw	r3,-12(fp)
    1738:	00b7abb4 	movhi	r2,57006
    173c:	10afbbc4 	addi	r2,r2,-16657
    1740:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
    1744:	e0bffd17 	ldw	r2,-12(fp)
    1748:	10bfff04 	addi	r2,r2,-4
    174c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
    1750:	e0fffb17 	ldw	r3,-20(fp)
    1754:	e0bffd17 	ldw	r2,-12(fp)
    1758:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    175c:	e0bffd17 	ldw	r2,-12(fp)
    1760:	10bfff04 	addi	r2,r2,-4
    1764:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
    1768:	e0fffc17 	ldw	r3,-16(fp)
    176c:	e0bffd17 	ldw	r2,-12(fp)
    1770:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
    1774:	e0bffd17 	ldw	r2,-12(fp)
    1778:	10bff704 	addi	r2,r2,-36
    177c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
    1780:	e0fffe17 	ldw	r3,-8(fp)
    1784:	e0bffd17 	ldw	r2,-12(fp)
    1788:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
    178c:	e0bffd17 	ldw	r2,-12(fp)
    1790:	10bfff04 	addi	r2,r2,-4
    1794:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
    1798:	e0bffd17 	ldw	r2,-12(fp)
    179c:	00c00044 	movi	r3,1
    17a0:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
    17a4:	e0bffd17 	ldw	r2,-12(fp)
    17a8:	10bff404 	addi	r2,r2,-48
    17ac:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
    17b0:	e0ffff17 	ldw	r3,-4(fp)
    17b4:	e0bffd17 	ldw	r2,-12(fp)
    17b8:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
    17bc:	e0bffd17 	ldw	r2,-12(fp)
    17c0:	10bffb04 	addi	r2,r2,-20
    17c4:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
    17c8:	e0bffd17 	ldw	r2,-12(fp)
}
    17cc:	e037883a 	mov	sp,fp
    17d0:	dfc00117 	ldw	ra,4(sp)
    17d4:	df000017 	ldw	fp,0(sp)
    17d8:	dec00204 	addi	sp,sp,8
    17dc:	f800283a 	ret

000017e0 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
    17e0:	defffe04 	addi	sp,sp,-8
    17e4:	dfc00115 	stw	ra,4(sp)
    17e8:	df000015 	stw	fp,0(sp)
    17ec:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    17f0:	00018380 	call	1838 <prvSetupTimerInterrupt>
    17f4:	00800034 	movhi	r2,0
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
    17f8:	10803104 	addi	r2,r2,196
    17fc:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
    1800:	0005883a 	mov	r2,zero
}
    1804:	e037883a 	mov	sp,fp
    1808:	dfc00117 	ldw	ra,4(sp)
    180c:	df000017 	ldw	fp,0(sp)
    1810:	dec00204 	addi	sp,sp,8
    1814:	f800283a 	ret

00001818 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1818:	deffff04 	addi	sp,sp,-4
    181c:	df000015 	stw	fp,0(sp)
    1820:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
    1824:	0001883a 	nop
    1828:	e037883a 	mov	sp,fp
    182c:	df000017 	ldw	fp,0(sp)
    1830:	dec00104 	addi	sp,sp,4
    1834:	f800283a 	ret

00001838 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1838:	defffe04 	addi	sp,sp,-8
    183c:	dfc00115 	stw	ra,4(sp)
    1840:	df000015 	stw	fp,0(sp)
    1844:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
    1848:	01800034 	movhi	r6,0
    184c:	31863504 	addi	r6,r6,6356
    1850:	000b883a 	mov	r5,zero
    1854:	0009883a 	mov	r4,zero
    1858:	00019200 	call	1920 <alt_irq_register>
    185c:	10bffa98 	cmpnei	r2,r2,-22
    1860:	1000021e 	bne	r2,zero,186c <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
    1864:	003da03a 	break	0
    1868:	00001006 	br	18ac <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
    186c:	00c00204 	movi	r3,8
    1870:	00800134 	movhi	r2,4
    1874:	108c1104 	addi	r2,r2,12356
    1878:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
    187c:	00e1a814 	movui	r3,34464
    1880:	00800134 	movhi	r2,4
    1884:	108c1204 	addi	r2,r2,12360
    1888:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
    188c:	00c00044 	movi	r3,1
    1890:	00800134 	movhi	r2,4
    1894:	108c1304 	addi	r2,r2,12364
    1898:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );	
    189c:	00c001c4 	movi	r3,7
    18a0:	00800134 	movhi	r2,4
    18a4:	108c1104 	addi	r2,r2,12356
    18a8:	10c00035 	stwio	r3,0(r2)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18ac:	00ffff84 	movi	r3,-2
    18b0:	00800134 	movhi	r2,4
    18b4:	108c1004 	addi	r2,r2,12352
    18b8:	10c00035 	stwio	r3,0(r2)
}
    18bc:	0001883a 	nop
    18c0:	e037883a 	mov	sp,fp
    18c4:	dfc00117 	ldw	ra,4(sp)
    18c8:	df000017 	ldw	fp,0(sp)
    18cc:	dec00204 	addi	sp,sp,8
    18d0:	f800283a 	ret

000018d4 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
    18d4:	defffc04 	addi	sp,sp,-16
    18d8:	dfc00315 	stw	ra,12(sp)
    18dc:	df000215 	stw	fp,8(sp)
    18e0:	df000204 	addi	fp,sp,8
    18e4:	e13ffe15 	stw	r4,-8(fp)
    18e8:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
    18ec:	00031500 	call	3150 <xTaskIncrementTick>
    18f0:	10000126 	beq	r2,zero,18f8 <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
    18f4:	00033140 	call	3314 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
    18f8:	00ffff84 	movi	r3,-2
    18fc:	00800134 	movhi	r2,4
    1900:	108c1004 	addi	r2,r2,12352
    1904:	10c00035 	stwio	r3,0(r2)
}
    1908:	0001883a 	nop
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
    1920:	defff104 	addi	sp,sp,-60
    1924:	df000e15 	stw	fp,56(sp)
    1928:	df000e04 	addi	fp,sp,56
    192c:	e13ffd15 	stw	r4,-12(fp)
    1930:	e17ffe15 	stw	r5,-8(fp)
    1934:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;  
    1938:	00bffa84 	movi	r2,-22
    193c:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
    1940:	e0bffd17 	ldw	r2,-12(fp)
    1944:	10800828 	cmpgeui	r2,r2,32
    1948:	10004c1e 	bne	r2,zero,1a7c <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    194c:	0005303a 	rdctl	r2,status
    1950:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1954:	e0fff617 	ldw	r3,-40(fp)
    1958:	00bfff84 	movi	r2,-2
    195c:	1884703a 	and	r2,r3,r2
    1960:	1001703a 	wrctl	status,r2
  
  return context;
    1964:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all ();
    1968:	e0bff415 	stw	r2,-48(fp)
	
		alt_irq[id].handler = handler;
    196c:	00820234 	movhi	r2,2056
    1970:	10bfdb04 	addi	r2,r2,-148
    1974:	e0fffd17 	ldw	r3,-12(fp)
    1978:	180690fa 	slli	r3,r3,3
    197c:	10c5883a 	add	r2,r2,r3
    1980:	e0ffff17 	ldw	r3,-4(fp)
    1984:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
    1988:	00820234 	movhi	r2,2056
    198c:	10bfdb04 	addi	r2,r2,-148
    1990:	e0fffd17 	ldw	r3,-12(fp)
    1994:	180690fa 	slli	r3,r3,3
    1998:	10c5883a 	add	r2,r2,r3
    199c:	10800104 	addi	r2,r2,4
    19a0:	e0fffe17 	ldw	r3,-8(fp)
    19a4:	10c00015 	stw	r3,0(r2)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	10001926 	beq	r2,zero,1a14 <alt_irq_register+0xf4>
    19b0:	e0bffd17 	ldw	r2,-12(fp)
    19b4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19b8:	0005303a 	rdctl	r2,status
    19bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19c0:	e0fff717 	ldw	r3,-36(fp)
    19c4:	00bfff84 	movi	r2,-2
    19c8:	1884703a 	and	r2,r3,r2
    19cc:	1001703a 	wrctl	status,r2
  
  return context;
    19d0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    19d4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    19d8:	00c00044 	movi	r3,1
    19dc:	e0bff317 	ldw	r2,-52(fp)
    19e0:	1884983a 	sll	r2,r3,r2
    19e4:	1007883a 	mov	r3,r2
    19e8:	d0a05097 	ldw	r2,-32446(gp)
    19ec:	1884b03a 	or	r2,r3,r2
    19f0:	d0a05095 	stw	r2,-32446(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    19f4:	d0a05097 	ldw	r2,-32446(gp)
    19f8:	100170fa 	wrctl	ienable,r2
    19fc:	e0bff817 	ldw	r2,-32(fp)
    1a00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a04:	e0bff917 	ldw	r2,-28(fp)
    1a08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a0c:	0005883a 	mov	r2,zero
    1a10:	00001906 	br	1a78 <alt_irq_register+0x158>
    1a14:	e0bffd17 	ldw	r2,-12(fp)
    1a18:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a1c:	0005303a 	rdctl	r2,status
    1a20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a24:	e0fffa17 	ldw	r3,-24(fp)
    1a28:	00bfff84 	movi	r2,-2
    1a2c:	1884703a 	and	r2,r3,r2
    1a30:	1001703a 	wrctl	status,r2
  
  return context;
    1a34:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a38:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    1a3c:	00c00044 	movi	r3,1
    1a40:	e0bff517 	ldw	r2,-44(fp)
    1a44:	1884983a 	sll	r2,r3,r2
    1a48:	0084303a 	nor	r2,zero,r2
    1a4c:	1007883a 	mov	r3,r2
    1a50:	d0a05097 	ldw	r2,-32446(gp)
    1a54:	1884703a 	and	r2,r3,r2
    1a58:	d0a05095 	stw	r2,-32446(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a5c:	d0a05097 	ldw	r2,-32446(gp)
    1a60:	100170fa 	wrctl	ienable,r2
    1a64:	e0bffb17 	ldw	r2,-20(fp)
    1a68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a6c:	e0bffc17 	ldw	r2,-16(fp)
    1a70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a74:	0005883a 	mov	r2,zero
    1a78:	e0bff215 	stw	r2,-56(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
    1a7c:	e0bff217 	ldw	r2,-56(fp)
}
    1a80:	e037883a 	mov	sp,fp
    1a84:	df000017 	ldw	fp,0(sp)
    1a88:	dec00104 	addi	sp,sp,4
    1a8c:	f800283a 	ret

00001a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1a90:	defffb04 	addi	sp,sp,-20
    1a94:	dfc00415 	stw	ra,16(sp)
    1a98:	df000315 	stw	fp,12(sp)
    1a9c:	df000304 	addi	fp,sp,12
    1aa0:	e13ffe15 	stw	r4,-8(fp)
    1aa4:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1ab0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ab4:	e0bffd17 	ldw	r2,-12(fp)
    1ab8:	10c00017 	ldw	r3,0(r2)
    1abc:	e0bffd17 	ldw	r2,-12(fp)
    1ac0:	11000f17 	ldw	r4,60(r2)
    1ac4:	e0bffd17 	ldw	r2,-12(fp)
    1ac8:	10801017 	ldw	r2,64(r2)
    1acc:	2085383a 	mul	r2,r4,r2
    1ad0:	1887883a 	add	r3,r3,r2
    1ad4:	e0bffd17 	ldw	r2,-12(fp)
    1ad8:	10c00115 	stw	r3,4(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1adc:	e0bffd17 	ldw	r2,-12(fp)
    1ae0:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1ae4:	e0bffd17 	ldw	r2,-12(fp)
    1ae8:	10c00017 	ldw	r3,0(r2)
    1aec:	e0bffd17 	ldw	r2,-12(fp)
    1af0:	10c00215 	stw	r3,8(r2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1af4:	e0bffd17 	ldw	r2,-12(fp)
    1af8:	10c00017 	ldw	r3,0(r2)
    1afc:	e0bffd17 	ldw	r2,-12(fp)
    1b00:	10800f17 	ldw	r2,60(r2)
    1b04:	113fffc4 	addi	r4,r2,-1
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	10801017 	ldw	r2,64(r2)
    1b10:	2085383a 	mul	r2,r4,r2
    1b14:	1887883a 	add	r3,r3,r2
    1b18:	e0bffd17 	ldw	r2,-12(fp)
    1b1c:	10c00315 	stw	r3,12(r2)
		pxQueue->xRxLock = queueUNLOCKED;
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	00ffffc4 	movi	r3,-1
    1b28:	10c01115 	stw	r3,68(r2)
		pxQueue->xTxLock = queueUNLOCKED;
    1b2c:	e0bffd17 	ldw	r2,-12(fp)
    1b30:	00ffffc4 	movi	r3,-1
    1b34:	10c01215 	stw	r3,72(r2)

		if( xNewQueue == pdFALSE )
    1b38:	e0bfff17 	ldw	r2,-4(fp)
    1b3c:	10000b1e 	bne	r2,zero,1b6c <xQueueGenericReset+0xdc>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b40:	e0bffd17 	ldw	r2,-12(fp)
    1b44:	10800417 	ldw	r2,16(r2)
    1b48:	10001026 	beq	r2,zero,1b8c <xQueueGenericReset+0xfc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	10800404 	addi	r2,r2,16
    1b54:	1009883a 	mov	r4,r2
    1b58:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    1b5c:	10800058 	cmpnei	r2,r2,1
    1b60:	10000a1e 	bne	r2,zero,1b8c <xQueueGenericReset+0xfc>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1b64:	003b683a 	trap	0
    1b68:	00000806 	br	1b8c <xQueueGenericReset+0xfc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1b6c:	e0bffd17 	ldw	r2,-12(fp)
    1b70:	10800404 	addi	r2,r2,16
    1b74:	1009883a 	mov	r4,r2
    1b78:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1b7c:	e0bffd17 	ldw	r2,-12(fp)
    1b80:	10800904 	addi	r2,r2,36
    1b84:	1009883a 	mov	r4,r2
    1b88:	00014040 	call	1404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1b8c:	00040fc0 	call	40fc <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1b90:	00800044 	movi	r2,1
}
    1b94:	e037883a 	mov	sp,fp
    1b98:	dfc00117 	ldw	ra,4(sp)
    1b9c:	df000017 	ldw	fp,0(sp)
    1ba0:	dec00204 	addi	sp,sp,8
    1ba4:	f800283a 	ret

00001ba8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1ba8:	defff704 	addi	sp,sp,-36
    1bac:	dfc00815 	stw	ra,32(sp)
    1bb0:	df000715 	stw	fp,28(sp)
    1bb4:	df000704 	addi	fp,sp,28
    1bb8:	e13ffd15 	stw	r4,-12(fp)
    1bbc:	e17ffe15 	stw	r5,-8(fp)
    1bc0:	3005883a 	mov	r2,r6
    1bc4:	e0bfff05 	stb	r2,-4(fp)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    1bc8:	e03ffa15 	stw	zero,-24(fp)
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
    1bcc:	e0bffe17 	ldw	r2,-8(fp)
    1bd0:	1000021e 	bne	r2,zero,1bdc <xQueueGenericCreate+0x34>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
    1bd4:	e03ff915 	stw	zero,-28(fp)
    1bd8:	00000506 	br	1bf0 <xQueueGenericCreate+0x48>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1bdc:	e0fffd17 	ldw	r3,-12(fp)
    1be0:	e0bffe17 	ldw	r2,-8(fp)
    1be4:	1885383a 	mul	r2,r3,r2
    1be8:	10800044 	addi	r2,r2,1
    1bec:	e0bff915 	stw	r2,-28(fp)
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1bf0:	e0bff917 	ldw	r2,-28(fp)
    1bf4:	10801304 	addi	r2,r2,76
    1bf8:	1009883a 	mov	r4,r2
    1bfc:	0000fd00 	call	fd0 <pvPortMalloc>
    1c00:	e0bffb15 	stw	r2,-20(fp)

	if( pcAllocatedBuffer != NULL )
    1c04:	e0bffb17 	ldw	r2,-20(fp)
    1c08:	10001726 	beq	r2,zero,1c68 <xQueueGenericCreate+0xc0>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be to small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
    1c0c:	e0bffb17 	ldw	r2,-20(fp)
    1c10:	e0bffc15 	stw	r2,-16(fp)

		if( uxItemSize == ( UBaseType_t ) 0 )
    1c14:	e0bffe17 	ldw	r2,-8(fp)
    1c18:	1000041e 	bne	r2,zero,1c2c <xQueueGenericCreate+0x84>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1c1c:	e0bffc17 	ldw	r2,-16(fp)
    1c20:	e0fffc17 	ldw	r3,-16(fp)
    1c24:	10c00015 	stw	r3,0(r2)
    1c28:	00000406 	br	1c3c <xQueueGenericCreate+0x94>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
    1c2c:	e0bffb17 	ldw	r2,-20(fp)
    1c30:	10c01304 	addi	r3,r2,76
    1c34:	e0bffc17 	ldw	r2,-16(fp)
    1c38:	10c00015 	stw	r3,0(r2)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
    1c3c:	e0bffc17 	ldw	r2,-16(fp)
    1c40:	e0fffd17 	ldw	r3,-12(fp)
    1c44:	10c00f15 	stw	r3,60(r2)
		pxNewQueue->uxItemSize = uxItemSize;
    1c48:	e0bffc17 	ldw	r2,-16(fp)
    1c4c:	e0fffe17 	ldw	r3,-8(fp)
    1c50:	10c01015 	stw	r3,64(r2)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1c54:	01400044 	movi	r5,1
    1c58:	e13ffc17 	ldw	r4,-16(fp)
    1c5c:	0001a900 	call	1a90 <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
    1c60:	e0bffc17 	ldw	r2,-16(fp)
    1c64:	e0bffa15 	stw	r2,-24(fp)
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
    1c68:	e0bffa17 	ldw	r2,-24(fp)
}
    1c6c:	e037883a 	mov	sp,fp
    1c70:	dfc00117 	ldw	ra,4(sp)
    1c74:	df000017 	ldw	fp,0(sp)
    1c78:	dec00204 	addi	sp,sp,8
    1c7c:	f800283a 	ret

00001c80 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1c80:	defffc04 	addi	sp,sp,-16
    1c84:	dfc00315 	stw	ra,12(sp)
    1c88:	df000215 	stw	fp,8(sp)
    1c8c:	df000204 	addi	fp,sp,8
    1c90:	2005883a 	mov	r2,r4
    1c94:	e0bfff05 	stb	r2,-4(fp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1c98:	01001304 	movi	r4,76
    1c9c:	0000fd00 	call	fd0 <pvPortMalloc>
    1ca0:	e0bffe15 	stw	r2,-8(fp)
		if( pxNewQueue != NULL )
    1ca4:	e0bffe17 	ldw	r2,-8(fp)
    1ca8:	10002226 	beq	r2,zero,1d34 <xQueueCreateMutex+0xb4>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1cac:	e0bffe17 	ldw	r2,-8(fp)
    1cb0:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1cb4:	e0bffe17 	ldw	r2,-8(fp)
    1cb8:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1cbc:	e0bffe17 	ldw	r2,-8(fp)
    1cc0:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
    1cc4:	e0bffe17 	ldw	r2,-8(fp)
    1cc8:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1ccc:	e0bffe17 	ldw	r2,-8(fp)
    1cd0:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1cd4:	e0bffe17 	ldw	r2,-8(fp)
    1cd8:	00c00044 	movi	r3,1
    1cdc:	10c00f15 	stw	r3,60(r2)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	10001015 	stw	zero,64(r2)
			pxNewQueue->xRxLock = queueUNLOCKED;
    1ce8:	e0bffe17 	ldw	r2,-8(fp)
    1cec:	00ffffc4 	movi	r3,-1
    1cf0:	10c01115 	stw	r3,68(r2)
			pxNewQueue->xTxLock = queueUNLOCKED;
    1cf4:	e0bffe17 	ldw	r2,-8(fp)
    1cf8:	00ffffc4 	movi	r3,-1
    1cfc:	10c01215 	stw	r3,72(r2)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10800404 	addi	r2,r2,16
    1d08:	1009883a 	mov	r4,r2
    1d0c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1d10:	e0bffe17 	ldw	r2,-8(fp)
    1d14:	10800904 	addi	r2,r2,36
    1d18:	1009883a 	mov	r4,r2
    1d1c:	00014040 	call	1404 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1d20:	000f883a 	mov	r7,zero
    1d24:	000d883a 	mov	r6,zero
    1d28:	000b883a 	mov	r5,zero
    1d2c:	e13ffe17 	ldw	r4,-8(fp)
    1d30:	0001edc0 	call	1edc <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    1d34:	e0bffe17 	ldw	r2,-8(fp)
	}
    1d38:	e037883a 	mov	sp,fp
    1d3c:	dfc00117 	ldw	ra,4(sp)
    1d40:	df000017 	ldw	fp,0(sp)
    1d44:	dec00204 	addi	sp,sp,8
    1d48:	f800283a 	ret

00001d4c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
    1d4c:	defffa04 	addi	sp,sp,-24
    1d50:	dfc00515 	stw	ra,20(sp)
    1d54:	df000415 	stw	fp,16(sp)
    1d58:	dc000315 	stw	r16,12(sp)
    1d5c:	df000404 	addi	fp,sp,16
    1d60:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1d64:	e0bffe17 	ldw	r2,-8(fp)
    1d68:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	14000117 	ldw	r16,4(r2)
    1d74:	0003e100 	call	3e10 <xTaskGetCurrentTaskHandle>
    1d78:	8080101e 	bne	r16,r2,1dbc <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
    1d7c:	e0bffd17 	ldw	r2,-12(fp)
    1d80:	10800317 	ldw	r2,12(r2)
    1d84:	10ffffc4 	addi	r3,r2,-1
    1d88:	e0bffd17 	ldw	r2,-12(fp)
    1d8c:	10c00315 	stw	r3,12(r2)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	10800317 	ldw	r2,12(r2)
    1d98:	1000051e 	bne	r2,zero,1db0 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    1d9c:	000f883a 	mov	r7,zero
    1da0:	000d883a 	mov	r6,zero
    1da4:	000b883a 	mov	r5,zero
    1da8:	e13ffd17 	ldw	r4,-12(fp)
    1dac:	0001edc0 	call	1edc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    1db0:	00800044 	movi	r2,1
    1db4:	e0bffc15 	stw	r2,-16(fp)
    1db8:	00000106 	br	1dc0 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
    1dbc:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    1dc0:	e0bffc17 	ldw	r2,-16(fp)
	}
    1dc4:	e6ffff04 	addi	sp,fp,-4
    1dc8:	dfc00217 	ldw	ra,8(sp)
    1dcc:	df000117 	ldw	fp,4(sp)
    1dd0:	dc000017 	ldw	r16,0(sp)
    1dd4:	dec00304 	addi	sp,sp,12
    1dd8:	f800283a 	ret

00001ddc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    1ddc:	defff904 	addi	sp,sp,-28
    1de0:	dfc00615 	stw	ra,24(sp)
    1de4:	df000515 	stw	fp,20(sp)
    1de8:	dc000415 	stw	r16,16(sp)
    1dec:	df000504 	addi	fp,sp,20
    1df0:	e13ffd15 	stw	r4,-12(fp)
    1df4:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    1df8:	e0bffd17 	ldw	r2,-12(fp)
    1dfc:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1e00:	e0bffc17 	ldw	r2,-16(fp)
    1e04:	14000117 	ldw	r16,4(r2)
    1e08:	0003e100 	call	3e10 <xTaskGetCurrentTaskHandle>
    1e0c:	8080081e 	bne	r16,r2,1e30 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    1e10:	e0bffc17 	ldw	r2,-16(fp)
    1e14:	10800317 	ldw	r2,12(r2)
    1e18:	10c00044 	addi	r3,r2,1
    1e1c:	e0bffc17 	ldw	r2,-16(fp)
    1e20:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
    1e24:	00800044 	movi	r2,1
    1e28:	e0bffb15 	stw	r2,-20(fp)
    1e2c:	00000e06 	br	1e68 <xQueueTakeMutexRecursive+0x8c>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    1e30:	000f883a 	mov	r7,zero
    1e34:	e1bffe17 	ldw	r6,-8(fp)
    1e38:	000b883a 	mov	r5,zero
    1e3c:	e13ffc17 	ldw	r4,-16(fp)
    1e40:	000222c0 	call	222c <xQueueGenericReceive>
    1e44:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
    1e48:	e0bffb17 	ldw	r2,-20(fp)
    1e4c:	10800058 	cmpnei	r2,r2,1
    1e50:	1000051e 	bne	r2,zero,1e68 <xQueueTakeMutexRecursive+0x8c>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    1e54:	e0bffc17 	ldw	r2,-16(fp)
    1e58:	10800317 	ldw	r2,12(r2)
    1e5c:	10c00044 	addi	r3,r2,1
    1e60:	e0bffc17 	ldw	r2,-16(fp)
    1e64:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    1e68:	e0bffb17 	ldw	r2,-20(fp)
	}
    1e6c:	e6ffff04 	addi	sp,fp,-4
    1e70:	dfc00217 	ldw	ra,8(sp)
    1e74:	df000117 	ldw	fp,4(sp)
    1e78:	dc000017 	ldw	r16,0(sp)
    1e7c:	dec00304 	addi	sp,sp,12
    1e80:	f800283a 	ret

00001e84 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    1e84:	defffb04 	addi	sp,sp,-20
    1e88:	dfc00415 	stw	ra,16(sp)
    1e8c:	df000315 	stw	fp,12(sp)
    1e90:	df000304 	addi	fp,sp,12
    1e94:	e13ffe15 	stw	r4,-8(fp)
    1e98:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    1e9c:	01800084 	movi	r6,2
    1ea0:	000b883a 	mov	r5,zero
    1ea4:	e13ffe17 	ldw	r4,-8(fp)
    1ea8:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    1eac:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
    1eb0:	e0bffd17 	ldw	r2,-12(fp)
    1eb4:	10000326 	beq	r2,zero,1ec4 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    1eb8:	e0bffd17 	ldw	r2,-12(fp)
    1ebc:	e0ffff17 	ldw	r3,-4(fp)
    1ec0:	10c00e15 	stw	r3,56(r2)
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
    1ec4:	e0bffd17 	ldw	r2,-12(fp)
	}
    1ec8:	e037883a 	mov	sp,fp
    1ecc:	dfc00117 	ldw	ra,4(sp)
    1ed0:	df000017 	ldw	fp,0(sp)
    1ed4:	dec00204 	addi	sp,sp,8
    1ed8:	f800283a 	ret

00001edc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1edc:	defff504 	addi	sp,sp,-44
    1ee0:	dfc00a15 	stw	ra,40(sp)
    1ee4:	df000915 	stw	fp,36(sp)
    1ee8:	df000904 	addi	fp,sp,36
    1eec:	e13ffc15 	stw	r4,-16(fp)
    1ef0:	e17ffd15 	stw	r5,-12(fp)
    1ef4:	e1bffe15 	stw	r6,-8(fp)
    1ef8:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1efc:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1f00:	e0bffc17 	ldw	r2,-16(fp)
    1f04:	e0bff815 	stw	r2,-32(fp)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f08:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f0c:	e0bff817 	ldw	r2,-32(fp)
    1f10:	10c00e17 	ldw	r3,56(r2)
    1f14:	e0bff817 	ldw	r2,-32(fp)
    1f18:	10800f17 	ldw	r2,60(r2)
    1f1c:	18800336 	bltu	r3,r2,1f2c <xQueueGenericSend+0x50>
    1f20:	e0bfff17 	ldw	r2,-4(fp)
    1f24:	10800098 	cmpnei	r2,r2,2
    1f28:	1000161e 	bne	r2,zero,1f84 <xQueueGenericSend+0xa8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f2c:	e1bfff17 	ldw	r6,-4(fp)
    1f30:	e17ffd17 	ldw	r5,-12(fp)
    1f34:	e13ff817 	ldw	r4,-32(fp)
    1f38:	00026900 	call	2690 <prvCopyDataToQueue>
    1f3c:	e0bff915 	stw	r2,-28(fp)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f40:	e0bff817 	ldw	r2,-32(fp)
    1f44:	10800917 	ldw	r2,36(r2)
    1f48:	10000826 	beq	r2,zero,1f6c <xQueueGenericSend+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1f4c:	e0bff817 	ldw	r2,-32(fp)
    1f50:	10800904 	addi	r2,r2,36
    1f54:	1009883a 	mov	r4,r2
    1f58:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    1f5c:	10800058 	cmpnei	r2,r2,1
    1f60:	1000051e 	bne	r2,zero,1f78 <xQueueGenericSend+0x9c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1f64:	003b683a 	trap	0
    1f68:	00000306 	br	1f78 <xQueueGenericSend+0x9c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1f6c:	e0bff917 	ldw	r2,-28(fp)
    1f70:	10000126 	beq	r2,zero,1f78 <xQueueGenericSend+0x9c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1f74:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1f78:	00040fc0 	call	40fc <vTaskExitCritical>
				return pdPASS;
    1f7c:	00800044 	movi	r2,1
    1f80:	00003906 	br	2068 <xQueueGenericSend+0x18c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1f84:	e0bffe17 	ldw	r2,-8(fp)
    1f88:	1000031e 	bne	r2,zero,1f98 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1f8c:	00040fc0 	call	40fc <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1f90:	0005883a 	mov	r2,zero
    1f94:	00003406 	br	2068 <xQueueGenericSend+0x18c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1f98:	e0bff717 	ldw	r2,-36(fp)
    1f9c:	1000051e 	bne	r2,zero,1fb4 <xQueueGenericSend+0xd8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1fa0:	e0bffa04 	addi	r2,fp,-24
    1fa4:	1009883a 	mov	r4,r2
    1fa8:	000376c0 	call	376c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1fac:	00800044 	movi	r2,1
    1fb0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1fb4:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1fb8:	0002f6c0 	call	2f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1fbc:	00040a80 	call	40a8 <vTaskEnterCritical>
    1fc0:	e0bff817 	ldw	r2,-32(fp)
    1fc4:	10801117 	ldw	r2,68(r2)
    1fc8:	10bfffd8 	cmpnei	r2,r2,-1
    1fcc:	1000021e 	bne	r2,zero,1fd8 <xQueueGenericSend+0xfc>
    1fd0:	e0bff817 	ldw	r2,-32(fp)
    1fd4:	10001115 	stw	zero,68(r2)
    1fd8:	e0bff817 	ldw	r2,-32(fp)
    1fdc:	10801217 	ldw	r2,72(r2)
    1fe0:	10bfffd8 	cmpnei	r2,r2,-1
    1fe4:	1000021e 	bne	r2,zero,1ff0 <xQueueGenericSend+0x114>
    1fe8:	e0bff817 	ldw	r2,-32(fp)
    1fec:	10001215 	stw	zero,72(r2)
    1ff0:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ff4:	e0fffe04 	addi	r3,fp,-8
    1ff8:	e0bffa04 	addi	r2,fp,-24
    1ffc:	180b883a 	mov	r5,r3
    2000:	1009883a 	mov	r4,r2
    2004:	00037a80 	call	37a8 <xTaskCheckForTimeOut>
    2008:	1000131e 	bne	r2,zero,2058 <xQueueGenericSend+0x17c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    200c:	e13ff817 	ldw	r4,-32(fp)
    2010:	0002a400 	call	2a40 <prvIsQueueFull>
    2014:	10000c26 	beq	r2,zero,2048 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2018:	e0bff817 	ldw	r2,-32(fp)
    201c:	10800404 	addi	r2,r2,16
    2020:	e0fffe17 	ldw	r3,-8(fp)
    2024:	180b883a 	mov	r5,r3
    2028:	1009883a 	mov	r4,r2
    202c:	00034480 	call	3448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2030:	e13ff817 	ldw	r4,-32(fp)
    2034:	00028bc0 	call	28bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2038:	0002f980 	call	2f98 <xTaskResumeAll>
    203c:	103fb21e 	bne	r2,zero,1f08 <__alt_data_end+0xf0001f08>
				{
					portYIELD_WITHIN_API();
    2040:	003b683a 	trap	0
    2044:	003fb006 	br	1f08 <__alt_data_end+0xf0001f08>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2048:	e13ff817 	ldw	r4,-32(fp)
    204c:	00028bc0 	call	28bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2050:	0002f980 	call	2f98 <xTaskResumeAll>
    2054:	003fac06 	br	1f08 <__alt_data_end+0xf0001f08>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2058:	e13ff817 	ldw	r4,-32(fp)
    205c:	00028bc0 	call	28bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2060:	0002f980 	call	2f98 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2064:	0005883a 	mov	r2,zero
		}
	}
}
    2068:	e037883a 	mov	sp,fp
    206c:	dfc00117 	ldw	ra,4(sp)
    2070:	df000017 	ldw	fp,0(sp)
    2074:	dec00204 	addi	sp,sp,8
    2078:	f800283a 	ret

0000207c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    207c:	defff704 	addi	sp,sp,-36
    2080:	dfc00815 	stw	ra,32(sp)
    2084:	df000715 	stw	fp,28(sp)
    2088:	df000704 	addi	fp,sp,28
    208c:	e13ffc15 	stw	r4,-16(fp)
    2090:	e17ffd15 	stw	r5,-12(fp)
    2094:	e1bffe15 	stw	r6,-8(fp)
    2098:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    209c:	e0bffc17 	ldw	r2,-16(fp)
    20a0:	e0bffa15 	stw	r2,-24(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20a4:	e03ffb15 	stw	zero,-20(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    20a8:	e0bffa17 	ldw	r2,-24(fp)
    20ac:	10c00e17 	ldw	r3,56(r2)
    20b0:	e0bffa17 	ldw	r2,-24(fp)
    20b4:	10800f17 	ldw	r2,60(r2)
    20b8:	18800336 	bltu	r3,r2,20c8 <xQueueGenericSendFromISR+0x4c>
    20bc:	e0bfff17 	ldw	r2,-4(fp)
    20c0:	10800098 	cmpnei	r2,r2,2
    20c4:	10001e1e 	bne	r2,zero,2140 <xQueueGenericSendFromISR+0xc4>
			/* A task can only have an inherited priority if it is a mutex
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    20c8:	e1bfff17 	ldw	r6,-4(fp)
    20cc:	e17ffd17 	ldw	r5,-12(fp)
    20d0:	e13ffa17 	ldw	r4,-24(fp)
    20d4:	00026900 	call	2690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    20d8:	e0bffa17 	ldw	r2,-24(fp)
    20dc:	10801217 	ldw	r2,72(r2)
    20e0:	10bfffd8 	cmpnei	r2,r2,-1
    20e4:	10000e1e 	bne	r2,zero,2120 <xQueueGenericSendFromISR+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20e8:	e0bffa17 	ldw	r2,-24(fp)
    20ec:	10800917 	ldw	r2,36(r2)
    20f0:	10001026 	beq	r2,zero,2134 <xQueueGenericSendFromISR+0xb8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    20f4:	e0bffa17 	ldw	r2,-24(fp)
    20f8:	10800904 	addi	r2,r2,36
    20fc:	1009883a 	mov	r4,r2
    2100:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    2104:	10000b26 	beq	r2,zero,2134 <xQueueGenericSendFromISR+0xb8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2108:	e0bffe17 	ldw	r2,-8(fp)
    210c:	10000926 	beq	r2,zero,2134 <xQueueGenericSendFromISR+0xb8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2110:	e0bffe17 	ldw	r2,-8(fp)
    2114:	00c00044 	movi	r3,1
    2118:	10c00015 	stw	r3,0(r2)
    211c:	00000506 	br	2134 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2120:	e0bffa17 	ldw	r2,-24(fp)
    2124:	10801217 	ldw	r2,72(r2)
    2128:	10c00044 	addi	r3,r2,1
    212c:	e0bffa17 	ldw	r2,-24(fp)
    2130:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2134:	00800044 	movi	r2,1
    2138:	e0bff915 	stw	r2,-28(fp)
    213c:	00000106 	br	2144 <xQueueGenericSendFromISR+0xc8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2140:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2144:	e0bff917 	ldw	r2,-28(fp)
}
    2148:	e037883a 	mov	sp,fp
    214c:	dfc00117 	ldw	ra,4(sp)
    2150:	df000017 	ldw	fp,0(sp)
    2154:	dec00204 	addi	sp,sp,8
    2158:	f800283a 	ret

0000215c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    215c:	defff904 	addi	sp,sp,-28
    2160:	dfc00615 	stw	ra,24(sp)
    2164:	df000515 	stw	fp,20(sp)
    2168:	df000504 	addi	fp,sp,20
    216c:	e13ffe15 	stw	r4,-8(fp)
    2170:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2174:	e0bffe17 	ldw	r2,-8(fp)
    2178:	e0bffc15 	stw	r2,-16(fp)
	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    217c:	e03ffd15 	stw	zero,-12(fp)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2180:	e0bffc17 	ldw	r2,-16(fp)
    2184:	10c00e17 	ldw	r3,56(r2)
    2188:	e0bffc17 	ldw	r2,-16(fp)
    218c:	10800f17 	ldw	r2,60(r2)
    2190:	18801f2e 	bgeu	r3,r2,2210 <xQueueGiveFromISR+0xb4>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  Therefore, unlike the xQueueGenericGive()
			function, there is no need to determine the need for priority
			disinheritance here or to clear the mutex holder TCB member. */

			++( pxQueue->uxMessagesWaiting );
    2194:	e0bffc17 	ldw	r2,-16(fp)
    2198:	10800e17 	ldw	r2,56(r2)
    219c:	10c00044 	addi	r3,r2,1
    21a0:	e0bffc17 	ldw	r2,-16(fp)
    21a4:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    21a8:	e0bffc17 	ldw	r2,-16(fp)
    21ac:	10801217 	ldw	r2,72(r2)
    21b0:	10bfffd8 	cmpnei	r2,r2,-1
    21b4:	10000e1e 	bne	r2,zero,21f0 <xQueueGiveFromISR+0x94>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21b8:	e0bffc17 	ldw	r2,-16(fp)
    21bc:	10800917 	ldw	r2,36(r2)
    21c0:	10001026 	beq	r2,zero,2204 <xQueueGiveFromISR+0xa8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    21c4:	e0bffc17 	ldw	r2,-16(fp)
    21c8:	10800904 	addi	r2,r2,36
    21cc:	1009883a 	mov	r4,r2
    21d0:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    21d4:	10000b26 	beq	r2,zero,2204 <xQueueGiveFromISR+0xa8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    21d8:	e0bfff17 	ldw	r2,-4(fp)
    21dc:	10000926 	beq	r2,zero,2204 <xQueueGiveFromISR+0xa8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    21e0:	e0bfff17 	ldw	r2,-4(fp)
    21e4:	00c00044 	movi	r3,1
    21e8:	10c00015 	stw	r3,0(r2)
    21ec:	00000506 	br	2204 <xQueueGiveFromISR+0xa8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    21f0:	e0bffc17 	ldw	r2,-16(fp)
    21f4:	10801217 	ldw	r2,72(r2)
    21f8:	10c00044 	addi	r3,r2,1
    21fc:	e0bffc17 	ldw	r2,-16(fp)
    2200:	10c01215 	stw	r3,72(r2)
			}

			xReturn = pdPASS;
    2204:	00800044 	movi	r2,1
    2208:	e0bffb15 	stw	r2,-20(fp)
    220c:	00000106 	br	2214 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2210:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2214:	e0bffb17 	ldw	r2,-20(fp)
}
    2218:	e037883a 	mov	sp,fp
    221c:	dfc00117 	ldw	ra,4(sp)
    2220:	df000017 	ldw	fp,0(sp)
    2224:	dec00204 	addi	sp,sp,8
    2228:	f800283a 	ret

0000222c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    222c:	defff504 	addi	sp,sp,-44
    2230:	dfc00a15 	stw	ra,40(sp)
    2234:	df000915 	stw	fp,36(sp)
    2238:	df000904 	addi	fp,sp,36
    223c:	e13ffc15 	stw	r4,-16(fp)
    2240:	e17ffd15 	stw	r5,-12(fp)
    2244:	e1bffe15 	stw	r6,-8(fp)
    2248:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
    224c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2250:	e0bffc17 	ldw	r2,-16(fp)
    2254:	e0bff815 	stw	r2,-32(fp)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2258:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    225c:	e0bff817 	ldw	r2,-32(fp)
    2260:	10800e17 	ldw	r2,56(r2)
    2264:	10002e26 	beq	r2,zero,2320 <xQueueGenericReceive+0xf4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2268:	e0bff817 	ldw	r2,-32(fp)
    226c:	10800317 	ldw	r2,12(r2)
    2270:	e0bff915 	stw	r2,-28(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2274:	e17ffd17 	ldw	r5,-12(fp)
    2278:	e13ff817 	ldw	r4,-32(fp)
    227c:	00028200 	call	2820 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2280:	e0bfff17 	ldw	r2,-4(fp)
    2284:	1000171e 	bne	r2,zero,22e4 <xQueueGenericReceive+0xb8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2288:	e0bff817 	ldw	r2,-32(fp)
    228c:	10800e17 	ldw	r2,56(r2)
    2290:	10ffffc4 	addi	r3,r2,-1
    2294:	e0bff817 	ldw	r2,-32(fp)
    2298:	10c00e15 	stw	r3,56(r2)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    229c:	e0bff817 	ldw	r2,-32(fp)
    22a0:	10800017 	ldw	r2,0(r2)
    22a4:	1000041e 	bne	r2,zero,22b8 <xQueueGenericReceive+0x8c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    22a8:	00041a00 	call	41a0 <pvTaskIncrementMutexHeldCount>
    22ac:	1007883a 	mov	r3,r2
    22b0:	e0bff817 	ldw	r2,-32(fp)
    22b4:	10c00115 	stw	r3,4(r2)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    22b8:	e0bff817 	ldw	r2,-32(fp)
    22bc:	10800417 	ldw	r2,16(r2)
    22c0:	10001426 	beq	r2,zero,2314 <xQueueGenericReceive+0xe8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    22c4:	e0bff817 	ldw	r2,-32(fp)
    22c8:	10800404 	addi	r2,r2,16
    22cc:	1009883a 	mov	r4,r2
    22d0:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    22d4:	10800058 	cmpnei	r2,r2,1
    22d8:	10000e1e 	bne	r2,zero,2314 <xQueueGenericReceive+0xe8>
						{
							queueYIELD_IF_USING_PREEMPTION();
    22dc:	003b683a 	trap	0
    22e0:	00000c06 	br	2314 <xQueueGenericReceive+0xe8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    22e4:	e0bff817 	ldw	r2,-32(fp)
    22e8:	e0fff917 	ldw	r3,-28(fp)
    22ec:	10c00315 	stw	r3,12(r2)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    22f0:	e0bff817 	ldw	r2,-32(fp)
    22f4:	10800917 	ldw	r2,36(r2)
    22f8:	10000626 	beq	r2,zero,2314 <xQueueGenericReceive+0xe8>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22fc:	e0bff817 	ldw	r2,-32(fp)
    2300:	10800904 	addi	r2,r2,36
    2304:	1009883a 	mov	r4,r2
    2308:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    230c:	10000126 	beq	r2,zero,2314 <xQueueGenericReceive+0xe8>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2310:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2314:	00040fc0 	call	40fc <vTaskExitCritical>
				return pdPASS;
    2318:	00800044 	movi	r2,1
    231c:	00004206 	br	2428 <xQueueGenericReceive+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2320:	e0bffe17 	ldw	r2,-8(fp)
    2324:	1000031e 	bne	r2,zero,2334 <xQueueGenericReceive+0x108>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2328:	00040fc0 	call	40fc <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    232c:	0005883a 	mov	r2,zero
    2330:	00003d06 	br	2428 <xQueueGenericReceive+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
    2334:	e0bff717 	ldw	r2,-36(fp)
    2338:	1000051e 	bne	r2,zero,2350 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    233c:	e0bffa04 	addi	r2,fp,-24
    2340:	1009883a 	mov	r4,r2
    2344:	000376c0 	call	376c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2348:	00800044 	movi	r2,1
    234c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2350:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2354:	0002f6c0 	call	2f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2358:	00040a80 	call	40a8 <vTaskEnterCritical>
    235c:	e0bff817 	ldw	r2,-32(fp)
    2360:	10801117 	ldw	r2,68(r2)
    2364:	10bfffd8 	cmpnei	r2,r2,-1
    2368:	1000021e 	bne	r2,zero,2374 <xQueueGenericReceive+0x148>
    236c:	e0bff817 	ldw	r2,-32(fp)
    2370:	10001115 	stw	zero,68(r2)
    2374:	e0bff817 	ldw	r2,-32(fp)
    2378:	10801217 	ldw	r2,72(r2)
    237c:	10bfffd8 	cmpnei	r2,r2,-1
    2380:	1000021e 	bne	r2,zero,238c <xQueueGenericReceive+0x160>
    2384:	e0bff817 	ldw	r2,-32(fp)
    2388:	10001215 	stw	zero,72(r2)
    238c:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2390:	e0fffe04 	addi	r3,fp,-8
    2394:	e0bffa04 	addi	r2,fp,-24
    2398:	180b883a 	mov	r5,r3
    239c:	1009883a 	mov	r4,r2
    23a0:	00037a80 	call	37a8 <xTaskCheckForTimeOut>
    23a4:	10001c1e 	bne	r2,zero,2418 <xQueueGenericReceive+0x1ec>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    23a8:	e13ff817 	ldw	r4,-32(fp)
    23ac:	00029b00 	call	29b0 <prvIsQueueEmpty>
    23b0:	10001526 	beq	r2,zero,2408 <xQueueGenericReceive+0x1dc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    23b4:	e0bff817 	ldw	r2,-32(fp)
    23b8:	10800017 	ldw	r2,0(r2)
    23bc:	1000061e 	bne	r2,zero,23d8 <xQueueGenericReceive+0x1ac>
					{
						taskENTER_CRITICAL();
    23c0:	00040a80 	call	40a8 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    23c4:	e0bff817 	ldw	r2,-32(fp)
    23c8:	10800117 	ldw	r2,4(r2)
    23cc:	1009883a 	mov	r4,r2
    23d0:	0003e840 	call	3e84 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    23d4:	00040fc0 	call	40fc <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    23d8:	e0bff817 	ldw	r2,-32(fp)
    23dc:	10800904 	addi	r2,r2,36
    23e0:	e0fffe17 	ldw	r3,-8(fp)
    23e4:	180b883a 	mov	r5,r3
    23e8:	1009883a 	mov	r4,r2
    23ec:	00034480 	call	3448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    23f0:	e13ff817 	ldw	r4,-32(fp)
    23f4:	00028bc0 	call	28bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    23f8:	0002f980 	call	2f98 <xTaskResumeAll>
    23fc:	103f961e 	bne	r2,zero,2258 <__alt_data_end+0xf0002258>
				{
					portYIELD_WITHIN_API();
    2400:	003b683a 	trap	0
    2404:	003f9406 	br	2258 <__alt_data_end+0xf0002258>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2408:	e13ff817 	ldw	r4,-32(fp)
    240c:	00028bc0 	call	28bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2410:	0002f980 	call	2f98 <xTaskResumeAll>
    2414:	003f9006 	br	2258 <__alt_data_end+0xf0002258>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2418:	e13ff817 	ldw	r4,-32(fp)
    241c:	00028bc0 	call	28bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2420:	0002f980 	call	2f98 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2424:	0005883a 	mov	r2,zero
		}
	}
}
    2428:	e037883a 	mov	sp,fp
    242c:	dfc00117 	ldw	ra,4(sp)
    2430:	df000017 	ldw	fp,0(sp)
    2434:	dec00204 	addi	sp,sp,8
    2438:	f800283a 	ret

0000243c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    243c:	defff804 	addi	sp,sp,-32
    2440:	dfc00715 	stw	ra,28(sp)
    2444:	df000615 	stw	fp,24(sp)
    2448:	df000604 	addi	fp,sp,24
    244c:	e13ffd15 	stw	r4,-12(fp)
    2450:	e17ffe15 	stw	r5,-8(fp)
    2454:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2458:	e0bffd17 	ldw	r2,-12(fp)
    245c:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2460:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2464:	e0bffb17 	ldw	r2,-20(fp)
    2468:	10800e17 	ldw	r2,56(r2)
    246c:	10002226 	beq	r2,zero,24f8 <xQueueReceiveFromISR+0xbc>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2470:	e17ffe17 	ldw	r5,-8(fp)
    2474:	e13ffb17 	ldw	r4,-20(fp)
    2478:	00028200 	call	2820 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    247c:	e0bffb17 	ldw	r2,-20(fp)
    2480:	10800e17 	ldw	r2,56(r2)
    2484:	10ffffc4 	addi	r3,r2,-1
    2488:	e0bffb17 	ldw	r2,-20(fp)
    248c:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2490:	e0bffb17 	ldw	r2,-20(fp)
    2494:	10801117 	ldw	r2,68(r2)
    2498:	10bfffd8 	cmpnei	r2,r2,-1
    249c:	10000e1e 	bne	r2,zero,24d8 <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    24a0:	e0bffb17 	ldw	r2,-20(fp)
    24a4:	10800417 	ldw	r2,16(r2)
    24a8:	10001026 	beq	r2,zero,24ec <xQueueReceiveFromISR+0xb0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    24ac:	e0bffb17 	ldw	r2,-20(fp)
    24b0:	10800404 	addi	r2,r2,16
    24b4:	1009883a 	mov	r4,r2
    24b8:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    24bc:	10000b26 	beq	r2,zero,24ec <xQueueReceiveFromISR+0xb0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    24c0:	e0bfff17 	ldw	r2,-4(fp)
    24c4:	10000926 	beq	r2,zero,24ec <xQueueReceiveFromISR+0xb0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    24c8:	e0bfff17 	ldw	r2,-4(fp)
    24cc:	00c00044 	movi	r3,1
    24d0:	10c00015 	stw	r3,0(r2)
    24d4:	00000506 	br	24ec <xQueueReceiveFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    24d8:	e0bffb17 	ldw	r2,-20(fp)
    24dc:	10801117 	ldw	r2,68(r2)
    24e0:	10c00044 	addi	r3,r2,1
    24e4:	e0bffb17 	ldw	r2,-20(fp)
    24e8:	10c01115 	stw	r3,68(r2)
			}

			xReturn = pdPASS;
    24ec:	00800044 	movi	r2,1
    24f0:	e0bffa15 	stw	r2,-24(fp)
    24f4:	00000106 	br	24fc <xQueueReceiveFromISR+0xc0>
		}
		else
		{
			xReturn = pdFAIL;
    24f8:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    24fc:	e0bffa17 	ldw	r2,-24(fp)
}
    2500:	e037883a 	mov	sp,fp
    2504:	dfc00117 	ldw	ra,4(sp)
    2508:	df000017 	ldw	fp,0(sp)
    250c:	dec00204 	addi	sp,sp,8
    2510:	f800283a 	ret

00002514 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2514:	defff804 	addi	sp,sp,-32
    2518:	dfc00715 	stw	ra,28(sp)
    251c:	df000615 	stw	fp,24(sp)
    2520:	df000604 	addi	fp,sp,24
    2524:	e13ffe15 	stw	r4,-8(fp)
    2528:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    252c:	e0bffe17 	ldw	r2,-8(fp)
    2530:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2534:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2538:	e0bffb17 	ldw	r2,-20(fp)
    253c:	10800e17 	ldw	r2,56(r2)
    2540:	10000c26 	beq	r2,zero,2574 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2544:	e0bffb17 	ldw	r2,-20(fp)
    2548:	10800317 	ldw	r2,12(r2)
    254c:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2550:	e17fff17 	ldw	r5,-4(fp)
    2554:	e13ffb17 	ldw	r4,-20(fp)
    2558:	00028200 	call	2820 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    255c:	e0bffb17 	ldw	r2,-20(fp)
    2560:	e0fffd17 	ldw	r3,-12(fp)
    2564:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
    2568:	00800044 	movi	r2,1
    256c:	e0bffa15 	stw	r2,-24(fp)
    2570:	00000106 	br	2578 <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
    2574:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2578:	e0bffa17 	ldw	r2,-24(fp)
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2590:	defffc04 	addi	sp,sp,-16
    2594:	dfc00315 	stw	ra,12(sp)
    2598:	df000215 	stw	fp,8(sp)
    259c:	df000204 	addi	fp,sp,8
    25a0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    25a4:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    25a8:	e0bfff17 	ldw	r2,-4(fp)
    25ac:	10800e17 	ldw	r2,56(r2)
    25b0:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    25b4:	00040fc0 	call	40fc <vTaskExitCritical>

	return uxReturn;
    25b8:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    25bc:	e037883a 	mov	sp,fp
    25c0:	dfc00117 	ldw	ra,4(sp)
    25c4:	df000017 	ldw	fp,0(sp)
    25c8:	dec00204 	addi	sp,sp,8
    25cc:	f800283a 	ret

000025d0 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    25d0:	defffb04 	addi	sp,sp,-20
    25d4:	dfc00415 	stw	ra,16(sp)
    25d8:	df000315 	stw	fp,12(sp)
    25dc:	df000304 	addi	fp,sp,12
    25e0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    25e4:	e0bfff17 	ldw	r2,-4(fp)
    25e8:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    25ec:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    25f0:	e0bffd17 	ldw	r2,-12(fp)
    25f4:	10c00f17 	ldw	r3,60(r2)
    25f8:	e0bffd17 	ldw	r2,-12(fp)
    25fc:	10800e17 	ldw	r2,56(r2)
    2600:	1885c83a 	sub	r2,r3,r2
    2604:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    2608:	00040fc0 	call	40fc <vTaskExitCritical>

	return uxReturn;
    260c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2610:	e037883a 	mov	sp,fp
    2614:	dfc00117 	ldw	ra,4(sp)
    2618:	df000017 	ldw	fp,0(sp)
    261c:	dec00204 	addi	sp,sp,8
    2620:	f800283a 	ret

00002624 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2624:	defffd04 	addi	sp,sp,-12
    2628:	df000215 	stw	fp,8(sp)
    262c:	df000204 	addi	fp,sp,8
    2630:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2634:	e0bfff17 	ldw	r2,-4(fp)
    2638:	10800e17 	ldw	r2,56(r2)
    263c:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
    2640:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2644:	e037883a 	mov	sp,fp
    2648:	df000017 	ldw	fp,0(sp)
    264c:	dec00104 	addi	sp,sp,4
    2650:	f800283a 	ret

00002654 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2654:	defffc04 	addi	sp,sp,-16
    2658:	dfc00315 	stw	ra,12(sp)
    265c:	df000215 	stw	fp,8(sp)
    2660:	df000204 	addi	fp,sp,8
    2664:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2668:	e0bfff17 	ldw	r2,-4(fp)
    266c:	e0bffe15 	stw	r2,-8(fp)
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    2670:	e13ffe17 	ldw	r4,-8(fp)
    2674:	00011500 	call	1150 <vPortFree>
}
    2678:	0001883a 	nop
    267c:	e037883a 	mov	sp,fp
    2680:	dfc00117 	ldw	ra,4(sp)
    2684:	df000017 	ldw	fp,0(sp)
    2688:	dec00204 	addi	sp,sp,8
    268c:	f800283a 	ret

00002690 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2690:	defffa04 	addi	sp,sp,-24
    2694:	dfc00515 	stw	ra,20(sp)
    2698:	df000415 	stw	fp,16(sp)
    269c:	df000404 	addi	fp,sp,16
    26a0:	e13ffd15 	stw	r4,-12(fp)
    26a4:	e17ffe15 	stw	r5,-8(fp)
    26a8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
    26ac:	e03ffc15 	stw	zero,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    26b0:	e0bffd17 	ldw	r2,-12(fp)
    26b4:	10801017 	ldw	r2,64(r2)
    26b8:	10000b1e 	bne	r2,zero,26e8 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    26bc:	e0bffd17 	ldw	r2,-12(fp)
    26c0:	10800017 	ldw	r2,0(r2)
    26c4:	10004b1e 	bne	r2,zero,27f4 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    26c8:	e0bffd17 	ldw	r2,-12(fp)
    26cc:	10800117 	ldw	r2,4(r2)
    26d0:	1009883a 	mov	r4,r2
    26d4:	0003fac0 	call	3fac <xTaskPriorityDisinherit>
    26d8:	e0bffc15 	stw	r2,-16(fp)
				pxQueue->pxMutexHolder = NULL;
    26dc:	e0bffd17 	ldw	r2,-12(fp)
    26e0:	10000115 	stw	zero,4(r2)
    26e4:	00004306 	br	27f4 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    26e8:	e0bfff17 	ldw	r2,-4(fp)
    26ec:	1000191e 	bne	r2,zero,2754 <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    26f0:	e0bffd17 	ldw	r2,-12(fp)
    26f4:	10c00217 	ldw	r3,8(r2)
    26f8:	e0bffd17 	ldw	r2,-12(fp)
    26fc:	10801017 	ldw	r2,64(r2)
    2700:	100d883a 	mov	r6,r2
    2704:	e17ffe17 	ldw	r5,-8(fp)
    2708:	1809883a 	mov	r4,r3
    270c:	00091200 	call	9120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2710:	e0bffd17 	ldw	r2,-12(fp)
    2714:	10c00217 	ldw	r3,8(r2)
    2718:	e0bffd17 	ldw	r2,-12(fp)
    271c:	10801017 	ldw	r2,64(r2)
    2720:	1887883a 	add	r3,r3,r2
    2724:	e0bffd17 	ldw	r2,-12(fp)
    2728:	10c00215 	stw	r3,8(r2)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	10c00217 	ldw	r3,8(r2)
    2734:	e0bffd17 	ldw	r2,-12(fp)
    2738:	10800117 	ldw	r2,4(r2)
    273c:	18802d36 	bltu	r3,r2,27f4 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2740:	e0bffd17 	ldw	r2,-12(fp)
    2744:	10c00017 	ldw	r3,0(r2)
    2748:	e0bffd17 	ldw	r2,-12(fp)
    274c:	10c00215 	stw	r3,8(r2)
    2750:	00002806 	br	27f4 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2754:	e0bffd17 	ldw	r2,-12(fp)
    2758:	10c00317 	ldw	r3,12(r2)
    275c:	e0bffd17 	ldw	r2,-12(fp)
    2760:	10801017 	ldw	r2,64(r2)
    2764:	100d883a 	mov	r6,r2
    2768:	e17ffe17 	ldw	r5,-8(fp)
    276c:	1809883a 	mov	r4,r3
    2770:	00091200 	call	9120 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2774:	e0bffd17 	ldw	r2,-12(fp)
    2778:	10c00317 	ldw	r3,12(r2)
    277c:	e0bffd17 	ldw	r2,-12(fp)
    2780:	10801017 	ldw	r2,64(r2)
    2784:	0085c83a 	sub	r2,zero,r2
    2788:	1887883a 	add	r3,r3,r2
    278c:	e0bffd17 	ldw	r2,-12(fp)
    2790:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2794:	e0bffd17 	ldw	r2,-12(fp)
    2798:	10c00317 	ldw	r3,12(r2)
    279c:	e0bffd17 	ldw	r2,-12(fp)
    27a0:	10800017 	ldw	r2,0(r2)
    27a4:	1880082e 	bgeu	r3,r2,27c8 <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	10c00117 	ldw	r3,4(r2)
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	10801017 	ldw	r2,64(r2)
    27b8:	0085c83a 	sub	r2,zero,r2
    27bc:	1887883a 	add	r3,r3,r2
    27c0:	e0bffd17 	ldw	r2,-12(fp)
    27c4:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    27c8:	e0bfff17 	ldw	r2,-4(fp)
    27cc:	10800098 	cmpnei	r2,r2,2
    27d0:	1000081e 	bne	r2,zero,27f4 <prvCopyDataToQueue+0x164>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    27d4:	e0bffd17 	ldw	r2,-12(fp)
    27d8:	10800e17 	ldw	r2,56(r2)
    27dc:	10000526 	beq	r2,zero,27f4 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	10800e17 	ldw	r2,56(r2)
    27e8:	10ffffc4 	addi	r3,r2,-1
    27ec:	e0bffd17 	ldw	r2,-12(fp)
    27f0:	10c00e15 	stw	r3,56(r2)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    27f4:	e0bffd17 	ldw	r2,-12(fp)
    27f8:	10800e17 	ldw	r2,56(r2)
    27fc:	10c00044 	addi	r3,r2,1
    2800:	e0bffd17 	ldw	r2,-12(fp)
    2804:	10c00e15 	stw	r3,56(r2)

	return xReturn;
    2808:	e0bffc17 	ldw	r2,-16(fp)
}
    280c:	e037883a 	mov	sp,fp
    2810:	dfc00117 	ldw	ra,4(sp)
    2814:	df000017 	ldw	fp,0(sp)
    2818:	dec00204 	addi	sp,sp,8
    281c:	f800283a 	ret

00002820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2820:	defffc04 	addi	sp,sp,-16
    2824:	dfc00315 	stw	ra,12(sp)
    2828:	df000215 	stw	fp,8(sp)
    282c:	df000204 	addi	fp,sp,8
    2830:	e13ffe15 	stw	r4,-8(fp)
    2834:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2838:	e0bffe17 	ldw	r2,-8(fp)
    283c:	10801017 	ldw	r2,64(r2)
    2840:	10001826 	beq	r2,zero,28a4 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2844:	e0bffe17 	ldw	r2,-8(fp)
    2848:	10c00317 	ldw	r3,12(r2)
    284c:	e0bffe17 	ldw	r2,-8(fp)
    2850:	10801017 	ldw	r2,64(r2)
    2854:	1887883a 	add	r3,r3,r2
    2858:	e0bffe17 	ldw	r2,-8(fp)
    285c:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2860:	e0bffe17 	ldw	r2,-8(fp)
    2864:	10c00317 	ldw	r3,12(r2)
    2868:	e0bffe17 	ldw	r2,-8(fp)
    286c:	10800117 	ldw	r2,4(r2)
    2870:	18800436 	bltu	r3,r2,2884 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2874:	e0bffe17 	ldw	r2,-8(fp)
    2878:	10c00017 	ldw	r3,0(r2)
    287c:	e0bffe17 	ldw	r2,-8(fp)
    2880:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2884:	e0bffe17 	ldw	r2,-8(fp)
    2888:	10c00317 	ldw	r3,12(r2)
    288c:	e0bffe17 	ldw	r2,-8(fp)
    2890:	10801017 	ldw	r2,64(r2)
    2894:	100d883a 	mov	r6,r2
    2898:	180b883a 	mov	r5,r3
    289c:	e13fff17 	ldw	r4,-4(fp)
    28a0:	00091200 	call	9120 <memcpy>
	}
}
    28a4:	0001883a 	nop
    28a8:	e037883a 	mov	sp,fp
    28ac:	dfc00117 	ldw	ra,4(sp)
    28b0:	df000017 	ldw	fp,0(sp)
    28b4:	dec00204 	addi	sp,sp,8
    28b8:	f800283a 	ret

000028bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    28bc:	defffd04 	addi	sp,sp,-12
    28c0:	dfc00215 	stw	ra,8(sp)
    28c4:	df000115 	stw	fp,4(sp)
    28c8:	df000104 	addi	fp,sp,4
    28cc:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    28d0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    28d4:	00000e06 	br	2910 <prvUnlockQueue+0x54>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    28d8:	e0bfff17 	ldw	r2,-4(fp)
    28dc:	10800917 	ldw	r2,36(r2)
    28e0:	10000f26 	beq	r2,zero,2920 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    28e4:	e0bfff17 	ldw	r2,-4(fp)
    28e8:	10800904 	addi	r2,r2,36
    28ec:	1009883a 	mov	r4,r2
    28f0:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    28f4:	10000126 	beq	r2,zero,28fc <prvUnlockQueue+0x40>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    28f8:	000386c0 	call	386c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    28fc:	e0bfff17 	ldw	r2,-4(fp)
    2900:	10801217 	ldw	r2,72(r2)
    2904:	10ffffc4 	addi	r3,r2,-1
    2908:	e0bfff17 	ldw	r2,-4(fp)
    290c:	10c01215 	stw	r3,72(r2)
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2910:	e0bfff17 	ldw	r2,-4(fp)
    2914:	10801217 	ldw	r2,72(r2)
    2918:	00bfef16 	blt	zero,r2,28d8 <__alt_data_end+0xf00028d8>
    291c:	00000106 	br	2924 <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
    2920:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2924:	e0bfff17 	ldw	r2,-4(fp)
    2928:	00ffffc4 	movi	r3,-1
    292c:	10c01215 	stw	r3,72(r2)
	}
	taskEXIT_CRITICAL();
    2930:	00040fc0 	call	40fc <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2934:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2938:	00000e06 	br	2974 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    293c:	e0bfff17 	ldw	r2,-4(fp)
    2940:	10800417 	ldw	r2,16(r2)
    2944:	10000f26 	beq	r2,zero,2984 <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2948:	e0bfff17 	ldw	r2,-4(fp)
    294c:	10800404 	addi	r2,r2,16
    2950:	1009883a 	mov	r4,r2
    2954:	00035a00 	call	35a0 <xTaskRemoveFromEventList>
    2958:	10000126 	beq	r2,zero,2960 <prvUnlockQueue+0xa4>
				{
					vTaskMissedYield();
    295c:	000386c0 	call	386c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    2960:	e0bfff17 	ldw	r2,-4(fp)
    2964:	10801117 	ldw	r2,68(r2)
    2968:	10ffffc4 	addi	r3,r2,-1
    296c:	e0bfff17 	ldw	r2,-4(fp)
    2970:	10c01115 	stw	r3,68(r2)
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2974:	e0bfff17 	ldw	r2,-4(fp)
    2978:	10801117 	ldw	r2,68(r2)
    297c:	00bfef16 	blt	zero,r2,293c <__alt_data_end+0xf000293c>
    2980:	00000106 	br	2988 <prvUnlockQueue+0xcc>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    2984:	0001883a 	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2988:	e0bfff17 	ldw	r2,-4(fp)
    298c:	00ffffc4 	movi	r3,-1
    2990:	10c01115 	stw	r3,68(r2)
	}
	taskEXIT_CRITICAL();
    2994:	00040fc0 	call	40fc <vTaskExitCritical>
}
    2998:	0001883a 	nop
    299c:	e037883a 	mov	sp,fp
    29a0:	dfc00117 	ldw	ra,4(sp)
    29a4:	df000017 	ldw	fp,0(sp)
    29a8:	dec00204 	addi	sp,sp,8
    29ac:	f800283a 	ret

000029b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    29b0:	defffc04 	addi	sp,sp,-16
    29b4:	dfc00315 	stw	ra,12(sp)
    29b8:	df000215 	stw	fp,8(sp)
    29bc:	df000204 	addi	fp,sp,8
    29c0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    29c4:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    29c8:	e0bfff17 	ldw	r2,-4(fp)
    29cc:	10800e17 	ldw	r2,56(r2)
    29d0:	1000031e 	bne	r2,zero,29e0 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
    29d4:	00800044 	movi	r2,1
    29d8:	e0bffe15 	stw	r2,-8(fp)
    29dc:	00000106 	br	29e4 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
    29e0:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    29e4:	00040fc0 	call	40fc <vTaskExitCritical>

	return xReturn;
    29e8:	e0bffe17 	ldw	r2,-8(fp)
}
    29ec:	e037883a 	mov	sp,fp
    29f0:	dfc00117 	ldw	ra,4(sp)
    29f4:	df000017 	ldw	fp,0(sp)
    29f8:	dec00204 	addi	sp,sp,8
    29fc:	f800283a 	ret

00002a00 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    2a00:	defffd04 	addi	sp,sp,-12
    2a04:	df000215 	stw	fp,8(sp)
    2a08:	df000204 	addi	fp,sp,8
    2a0c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2a10:	e0bfff17 	ldw	r2,-4(fp)
    2a14:	10800e17 	ldw	r2,56(r2)
    2a18:	1000031e 	bne	r2,zero,2a28 <xQueueIsQueueEmptyFromISR+0x28>
	{
		xReturn = pdTRUE;
    2a1c:	00800044 	movi	r2,1
    2a20:	e0bffe15 	stw	r2,-8(fp)
    2a24:	00000106 	br	2a2c <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    2a28:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2a2c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2a30:	e037883a 	mov	sp,fp
    2a34:	df000017 	ldw	fp,0(sp)
    2a38:	dec00104 	addi	sp,sp,4
    2a3c:	f800283a 	ret

00002a40 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2a40:	defffc04 	addi	sp,sp,-16
    2a44:	dfc00315 	stw	ra,12(sp)
    2a48:	df000215 	stw	fp,8(sp)
    2a4c:	df000204 	addi	fp,sp,8
    2a50:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a54:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2a58:	e0bfff17 	ldw	r2,-4(fp)
    2a5c:	10c00e17 	ldw	r3,56(r2)
    2a60:	e0bfff17 	ldw	r2,-4(fp)
    2a64:	10800f17 	ldw	r2,60(r2)
    2a68:	1880031e 	bne	r3,r2,2a78 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
    2a6c:	00800044 	movi	r2,1
    2a70:	e0bffe15 	stw	r2,-8(fp)
    2a74:	00000106 	br	2a7c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
    2a78:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
    2a7c:	00040fc0 	call	40fc <vTaskExitCritical>

	return xReturn;
    2a80:	e0bffe17 	ldw	r2,-8(fp)
}
    2a84:	e037883a 	mov	sp,fp
    2a88:	dfc00117 	ldw	ra,4(sp)
    2a8c:	df000017 	ldw	fp,0(sp)
    2a90:	dec00204 	addi	sp,sp,8
    2a94:	f800283a 	ret

00002a98 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2a98:	defffd04 	addi	sp,sp,-12
    2a9c:	df000215 	stw	fp,8(sp)
    2aa0:	df000204 	addi	fp,sp,8
    2aa4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2aa8:	e0bfff17 	ldw	r2,-4(fp)
    2aac:	10c00e17 	ldw	r3,56(r2)
    2ab0:	e0bfff17 	ldw	r2,-4(fp)
    2ab4:	10800f17 	ldw	r2,60(r2)
    2ab8:	1880031e 	bne	r3,r2,2ac8 <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    2abc:	00800044 	movi	r2,1
    2ac0:	e0bffe15 	stw	r2,-8(fp)
    2ac4:	00000106 	br	2acc <xQueueIsQueueFullFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
    2ac8:	e03ffe15 	stw	zero,-8(fp)
	}

	return xReturn;
    2acc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2ad0:	e037883a 	mov	sp,fp
    2ad4:	df000017 	ldw	fp,0(sp)
    2ad8:	dec00104 	addi	sp,sp,4
    2adc:	f800283a 	ret

00002ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2ae0:	defffb04 	addi	sp,sp,-20
    2ae4:	dfc00415 	stw	ra,16(sp)
    2ae8:	df000315 	stw	fp,12(sp)
    2aec:	df000304 	addi	fp,sp,12
    2af0:	e13ffe15 	stw	r4,-8(fp)
    2af4:	e17fff15 	stw	r5,-4(fp)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2af8:	e0bffe17 	ldw	r2,-8(fp)
    2afc:	e0bffd15 	stw	r2,-12(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2b00:	00040a80 	call	40a8 <vTaskEnterCritical>
    2b04:	e0bffd17 	ldw	r2,-12(fp)
    2b08:	10801117 	ldw	r2,68(r2)
    2b0c:	10bfffd8 	cmpnei	r2,r2,-1
    2b10:	1000021e 	bne	r2,zero,2b1c <vQueueWaitForMessageRestricted+0x3c>
    2b14:	e0bffd17 	ldw	r2,-12(fp)
    2b18:	10001115 	stw	zero,68(r2)
    2b1c:	e0bffd17 	ldw	r2,-12(fp)
    2b20:	10801217 	ldw	r2,72(r2)
    2b24:	10bfffd8 	cmpnei	r2,r2,-1
    2b28:	1000021e 	bne	r2,zero,2b34 <vQueueWaitForMessageRestricted+0x54>
    2b2c:	e0bffd17 	ldw	r2,-12(fp)
    2b30:	10001215 	stw	zero,72(r2)
    2b34:	00040fc0 	call	40fc <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2b38:	e0bffd17 	ldw	r2,-12(fp)
    2b3c:	10800e17 	ldw	r2,56(r2)
    2b40:	1000051e 	bne	r2,zero,2b58 <vQueueWaitForMessageRestricted+0x78>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2b44:	e0bffd17 	ldw	r2,-12(fp)
    2b48:	10800904 	addi	r2,r2,36
    2b4c:	e17fff17 	ldw	r5,-4(fp)
    2b50:	1009883a 	mov	r4,r2
    2b54:	00035340 	call	3534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2b58:	e13ffd17 	ldw	r4,-12(fp)
    2b5c:	00028bc0 	call	28bc <prvUnlockQueue>
	}
    2b60:	0001883a 	nop
    2b64:	e037883a 	mov	sp,fp
    2b68:	dfc00117 	ldw	ra,4(sp)
    2b6c:	df000017 	ldw	fp,0(sp)
    2b70:	dec00204 	addi	sp,sp,8
    2b74:	f800283a 	ret

00002b78 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2b78:	defff604 	addi	sp,sp,-40
    2b7c:	dfc00915 	stw	ra,36(sp)
    2b80:	df000815 	stw	fp,32(sp)
    2b84:	df000804 	addi	fp,sp,32
    2b88:	e13ffc15 	stw	r4,-16(fp)
    2b8c:	e17ffd15 	stw	r5,-12(fp)
    2b90:	3005883a 	mov	r2,r6
    2b94:	e1ffff15 	stw	r7,-4(fp)
    2b98:	e0bffe0d 	sth	r2,-8(fp)
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2b9c:	e0bffe0b 	ldhu	r2,-8(fp)
    2ba0:	e1400417 	ldw	r5,16(fp)
    2ba4:	1009883a 	mov	r4,r2
    2ba8:	0003bdc0 	call	3bdc <prvAllocateTCBAndStack>
    2bac:	e0bffa15 	stw	r2,-24(fp)

	if( pxNewTCB != NULL )
    2bb0:	e0bffa17 	ldw	r2,-24(fp)
    2bb4:	10004f26 	beq	r2,zero,2cf4 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2bb8:	e0bffa17 	ldw	r2,-24(fp)
    2bbc:	10c00c17 	ldw	r3,48(r2)
    2bc0:	e13ffe0b 	ldhu	r4,-8(fp)
    2bc4:	00900034 	movhi	r2,16384
    2bc8:	10bfffc4 	addi	r2,r2,-1
    2bcc:	2085883a 	add	r2,r4,r2
    2bd0:	1085883a 	add	r2,r2,r2
    2bd4:	1085883a 	add	r2,r2,r2
    2bd8:	1885883a 	add	r2,r3,r2
    2bdc:	e0bffb15 	stw	r2,-20(fp)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2be0:	e0fffb17 	ldw	r3,-20(fp)
    2be4:	00bfff04 	movi	r2,-4
    2be8:	1884703a 	and	r2,r3,r2
    2bec:	e0bffb15 	stw	r2,-20(fp)
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2bf0:	e0bffe0b 	ldhu	r2,-8(fp)
    2bf4:	d8800015 	stw	r2,0(sp)
    2bf8:	e1c00517 	ldw	r7,20(fp)
    2bfc:	e1800217 	ldw	r6,8(fp)
    2c00:	e17ffd17 	ldw	r5,-12(fp)
    2c04:	e13ffa17 	ldw	r4,-24(fp)
    2c08:	00038b00 	call	38b0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2c0c:	e1bfff17 	ldw	r6,-4(fp)
    2c10:	e17ffc17 	ldw	r5,-16(fp)
    2c14:	e13ffb17 	ldw	r4,-20(fp)
    2c18:	00017000 	call	1700 <pxPortInitialiseStack>
    2c1c:	1007883a 	mov	r3,r2
    2c20:	e0bffa17 	ldw	r2,-24(fp)
    2c24:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2c28:	e0800317 	ldw	r2,12(fp)
    2c2c:	10000326 	beq	r2,zero,2c3c <xTaskGenericCreate+0xc4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2c30:	e0800317 	ldw	r2,12(fp)
    2c34:	e0fffa17 	ldw	r3,-24(fp)
    2c38:	10c00015 	stw	r3,0(r2)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2c3c:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    2c40:	d0a02697 	ldw	r2,-32614(gp)
    2c44:	10800044 	addi	r2,r2,1
    2c48:	d0a02695 	stw	r2,-32614(gp)
			if( pxCurrentTCB == NULL )
    2c4c:	d0a02297 	ldw	r2,-32630(gp)
    2c50:	1000071e 	bne	r2,zero,2c70 <xTaskGenericCreate+0xf8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2c54:	e0bffa17 	ldw	r2,-24(fp)
    2c58:	d0a02295 	stw	r2,-32630(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2c5c:	d0a02697 	ldw	r2,-32614(gp)
    2c60:	10800058 	cmpnei	r2,r2,1
    2c64:	10000a1e 	bne	r2,zero,2c90 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2c68:	00039fc0 	call	39fc <prvInitialiseTaskLists>
    2c6c:	00000806 	br	2c90 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2c70:	d0a02997 	ldw	r2,-32602(gp)
    2c74:	1000061e 	bne	r2,zero,2c90 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2c78:	d0a02297 	ldw	r2,-32630(gp)
    2c7c:	10800b17 	ldw	r2,44(r2)
    2c80:	e0c00217 	ldw	r3,8(fp)
    2c84:	18800236 	bltu	r3,r2,2c90 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    2c88:	e0bffa17 	ldw	r2,-24(fp)
    2c8c:	d0a02295 	stw	r2,-32630(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2c90:	d0a02d97 	ldw	r2,-32586(gp)
    2c94:	10800044 	addi	r2,r2,1
    2c98:	d0a02d95 	stw	r2,-32586(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2c9c:	e0bffa17 	ldw	r2,-24(fp)
    2ca0:	10800b17 	ldw	r2,44(r2)
    2ca4:	d0e02897 	ldw	r3,-32606(gp)
    2ca8:	1880032e 	bgeu	r3,r2,2cb8 <xTaskGenericCreate+0x140>
    2cac:	e0bffa17 	ldw	r2,-24(fp)
    2cb0:	10800b17 	ldw	r2,44(r2)
    2cb4:	d0a02895 	stw	r2,-32606(gp)
    2cb8:	e0bffa17 	ldw	r2,-24(fp)
    2cbc:	10800b17 	ldw	r2,44(r2)
    2cc0:	10c00524 	muli	r3,r2,20
    2cc4:	00820234 	movhi	r2,2056
    2cc8:	10bf6d04 	addi	r2,r2,-588
    2ccc:	1887883a 	add	r3,r3,r2
    2cd0:	e0bffa17 	ldw	r2,-24(fp)
    2cd4:	10800104 	addi	r2,r2,4
    2cd8:	100b883a 	mov	r5,r2
    2cdc:	1809883a 	mov	r4,r3
    2ce0:	00014980 	call	1498 <vListInsertEnd>

			xReturn = pdPASS;
    2ce4:	00800044 	movi	r2,1
    2ce8:	e0bff915 	stw	r2,-28(fp)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2cec:	00040fc0 	call	40fc <vTaskExitCritical>
    2cf0:	00000206 	br	2cfc <xTaskGenericCreate+0x184>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2cf4:	00bfffc4 	movi	r2,-1
    2cf8:	e0bff915 	stw	r2,-28(fp)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2cfc:	e0bff917 	ldw	r2,-28(fp)
    2d00:	10800058 	cmpnei	r2,r2,1
    2d04:	1000071e 	bne	r2,zero,2d24 <xTaskGenericCreate+0x1ac>
	{
		if( xSchedulerRunning != pdFALSE )
    2d08:	d0a02997 	ldw	r2,-32602(gp)
    2d0c:	10000526 	beq	r2,zero,2d24 <xTaskGenericCreate+0x1ac>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2d10:	d0a02297 	ldw	r2,-32630(gp)
    2d14:	10c00b17 	ldw	r3,44(r2)
    2d18:	e0800217 	ldw	r2,8(fp)
    2d1c:	1880012e 	bgeu	r3,r2,2d24 <xTaskGenericCreate+0x1ac>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2d20:	003b683a 	trap	0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2d24:	e0bff917 	ldw	r2,-28(fp)
}
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2d3c:	defffc04 	addi	sp,sp,-16
    2d40:	dfc00315 	stw	ra,12(sp)
    2d44:	df000215 	stw	fp,8(sp)
    2d48:	df000204 	addi	fp,sp,8
    2d4c:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2d50:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2d54:	e0bfff17 	ldw	r2,-4(fp)
    2d58:	1000021e 	bne	r2,zero,2d64 <vTaskDelete+0x28>
    2d5c:	d0a02297 	ldw	r2,-32630(gp)
    2d60:	00000106 	br	2d68 <vTaskDelete+0x2c>
    2d64:	e0bfff17 	ldw	r2,-4(fp)
    2d68:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2d6c:	e0bffe17 	ldw	r2,-8(fp)
    2d70:	10800104 	addi	r2,r2,4
    2d74:	1009883a 	mov	r4,r2
    2d78:	00015fc0 	call	15fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2d7c:	e0bffe17 	ldw	r2,-8(fp)
    2d80:	10800a17 	ldw	r2,40(r2)
    2d84:	10000426 	beq	r2,zero,2d98 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2d88:	e0bffe17 	ldw	r2,-8(fp)
    2d8c:	10800604 	addi	r2,r2,24
    2d90:	1009883a 	mov	r4,r2
    2d94:	00015fc0 	call	15fc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2d98:	e0bffe17 	ldw	r2,-8(fp)
    2d9c:	10800104 	addi	r2,r2,4
    2da0:	100b883a 	mov	r5,r2
    2da4:	01020234 	movhi	r4,2056
    2da8:	213fb804 	addi	r4,r4,-288
    2dac:	00014980 	call	1498 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2db0:	d0a02597 	ldw	r2,-32618(gp)
    2db4:	10800044 	addi	r2,r2,1
    2db8:	d0a02595 	stw	r2,-32618(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2dbc:	d0a02d97 	ldw	r2,-32586(gp)
    2dc0:	10800044 	addi	r2,r2,1
    2dc4:	d0a02d95 	stw	r2,-32586(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2dc8:	00040fc0 	call	40fc <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2dcc:	d0a02997 	ldw	r2,-32602(gp)
    2dd0:	10000826 	beq	r2,zero,2df4 <vTaskDelete+0xb8>
		{
			if( pxTCB == pxCurrentTCB )
    2dd4:	d0a02297 	ldw	r2,-32630(gp)
    2dd8:	e0fffe17 	ldw	r3,-8(fp)
    2ddc:	1880021e 	bne	r3,r2,2de8 <vTaskDelete+0xac>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    2de0:	003b683a 	trap	0
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
    2de4:	00000306 	br	2df4 <vTaskDelete+0xb8>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    2de8:	00040a80 	call	40a8 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2dec:	0003da80 	call	3da8 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
    2df0:	00040fc0 	call	40fc <vTaskExitCritical>
			}
		}
	}
    2df4:	0001883a 	nop
    2df8:	e037883a 	mov	sp,fp
    2dfc:	dfc00117 	ldw	ra,4(sp)
    2e00:	df000017 	ldw	fp,0(sp)
    2e04:	dec00204 	addi	sp,sp,8
    2e08:	f800283a 	ret

00002e0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2e0c:	defffb04 	addi	sp,sp,-20
    2e10:	dfc00415 	stw	ra,16(sp)
    2e14:	df000315 	stw	fp,12(sp)
    2e18:	df000304 	addi	fp,sp,12
    2e1c:	e13fff15 	stw	r4,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2e20:	e03ffd15 	stw	zero,-12(fp)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2e24:	e0bfff17 	ldw	r2,-4(fp)
    2e28:	10000d26 	beq	r2,zero,2e60 <vTaskDelay+0x54>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2e2c:	0002f6c0 	call	2f6c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2e30:	d0e02797 	ldw	r3,-32610(gp)
    2e34:	e0bfff17 	ldw	r2,-4(fp)
    2e38:	1885883a 	add	r2,r3,r2
    2e3c:	e0bffe15 	stw	r2,-8(fp)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e40:	d0a02297 	ldw	r2,-32630(gp)
    2e44:	10800104 	addi	r2,r2,4
    2e48:	1009883a 	mov	r4,r2
    2e4c:	00015fc0 	call	15fc <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2e50:	e13ffe17 	ldw	r4,-8(fp)
    2e54:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2e58:	0002f980 	call	2f98 <xTaskResumeAll>
    2e5c:	e0bffd15 	stw	r2,-12(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2e60:	e0bffd17 	ldw	r2,-12(fp)
    2e64:	1000011e 	bne	r2,zero,2e6c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
    2e68:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2e6c:	0001883a 	nop
    2e70:	e037883a 	mov	sp,fp
    2e74:	dfc00117 	ldw	ra,4(sp)
    2e78:	df000017 	ldw	fp,0(sp)
    2e7c:	dec00204 	addi	sp,sp,8
    2e80:	f800283a 	ret

00002e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2e84:	defff804 	addi	sp,sp,-32
    2e88:	dfc00715 	stw	ra,28(sp)
    2e8c:	df000615 	stw	fp,24(sp)
    2e90:	df000604 	addi	fp,sp,24
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2e94:	d8000315 	stw	zero,12(sp)
    2e98:	d8000215 	stw	zero,8(sp)
    2e9c:	d8000115 	stw	zero,4(sp)
    2ea0:	d8000015 	stw	zero,0(sp)
    2ea4:	000f883a 	mov	r7,zero
    2ea8:	01840004 	movi	r6,4096
    2eac:	01420034 	movhi	r5,2048
    2eb0:	29400d04 	addi	r5,r5,52
    2eb4:	01000034 	movhi	r4,0
    2eb8:	210e2504 	addi	r4,r4,14484
    2ebc:	0002b780 	call	2b78 <xTaskGenericCreate>
    2ec0:	e0bffe15 	stw	r2,-8(fp)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2ec4:	e0bffe17 	ldw	r2,-8(fp)
    2ec8:	10800058 	cmpnei	r2,r2,1
    2ecc:	1000021e 	bne	r2,zero,2ed8 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
    2ed0:	00048080 	call	4808 <xTimerCreateTimerTask>
    2ed4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2ed8:	e0bffe17 	ldw	r2,-8(fp)
    2edc:	10800058 	cmpnei	r2,r2,1
    2ee0:	10000a1e 	bne	r2,zero,2f0c <vTaskStartScheduler+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ee4:	0005303a 	rdctl	r2,status
    2ee8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2eec:	e0ffff17 	ldw	r3,-4(fp)
    2ef0:	00bfff84 	movi	r2,-2
    2ef4:	1884703a 	and	r2,r3,r2
    2ef8:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2efc:	00800044 	movi	r2,1
    2f00:	d0a02995 	stw	r2,-32602(gp)
		xTickCount = ( TickType_t ) 0U;
    2f04:	d0202795 	stw	zero,-32610(gp)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2f08:	00017e00 	call	17e0 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    2f0c:	0001883a 	nop
    2f10:	e037883a 	mov	sp,fp
    2f14:	dfc00117 	ldw	ra,4(sp)
    2f18:	df000017 	ldw	fp,0(sp)
    2f1c:	dec00204 	addi	sp,sp,8
    2f20:	f800283a 	ret

00002f24 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2f24:	defffd04 	addi	sp,sp,-12
    2f28:	dfc00215 	stw	ra,8(sp)
    2f2c:	df000115 	stw	fp,4(sp)
    2f30:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f34:	0005303a 	rdctl	r2,status
    2f38:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f3c:	e0ffff17 	ldw	r3,-4(fp)
    2f40:	00bfff84 	movi	r2,-2
    2f44:	1884703a 	and	r2,r3,r2
    2f48:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    2f4c:	d0202995 	stw	zero,-32602(gp)
	vPortEndScheduler();
    2f50:	00018180 	call	1818 <vPortEndScheduler>
}
    2f54:	0001883a 	nop
    2f58:	e037883a 	mov	sp,fp
    2f5c:	dfc00117 	ldw	ra,4(sp)
    2f60:	df000017 	ldw	fp,0(sp)
    2f64:	dec00204 	addi	sp,sp,8
    2f68:	f800283a 	ret

00002f6c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2f6c:	deffff04 	addi	sp,sp,-4
    2f70:	df000015 	stw	fp,0(sp)
    2f74:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2f78:	d0a02e97 	ldw	r2,-32582(gp)
    2f7c:	10800044 	addi	r2,r2,1
    2f80:	d0a02e95 	stw	r2,-32582(gp)
}
    2f84:	0001883a 	nop
    2f88:	e037883a 	mov	sp,fp
    2f8c:	df000017 	ldw	fp,0(sp)
    2f90:	dec00104 	addi	sp,sp,4
    2f94:	f800283a 	ret

00002f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2f98:	defffc04 	addi	sp,sp,-16
    2f9c:	dfc00315 	stw	ra,12(sp)
    2fa0:	df000215 	stw	fp,8(sp)
    2fa4:	df000204 	addi	fp,sp,8
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2fa8:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2fac:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    2fb0:	d0a02e97 	ldw	r2,-32582(gp)
    2fb4:	10bfffc4 	addi	r2,r2,-1
    2fb8:	d0a02e95 	stw	r2,-32582(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2fbc:	d0a02e97 	ldw	r2,-32582(gp)
    2fc0:	10003f1e 	bne	r2,zero,30c0 <xTaskResumeAll+0x128>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2fc4:	d0a02697 	ldw	r2,-32614(gp)
    2fc8:	10003d26 	beq	r2,zero,30c0 <xTaskResumeAll+0x128>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2fcc:	00002606 	br	3068 <xTaskResumeAll+0xd0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2fd0:	00820234 	movhi	r2,2056
    2fd4:	10bfb304 	addi	r2,r2,-308
    2fd8:	10800317 	ldw	r2,12(r2)
    2fdc:	10800317 	ldw	r2,12(r2)
    2fe0:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2fe4:	e0bfff17 	ldw	r2,-4(fp)
    2fe8:	10800604 	addi	r2,r2,24
    2fec:	1009883a 	mov	r4,r2
    2ff0:	00015fc0 	call	15fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2ff4:	e0bfff17 	ldw	r2,-4(fp)
    2ff8:	10800104 	addi	r2,r2,4
    2ffc:	1009883a 	mov	r4,r2
    3000:	00015fc0 	call	15fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3004:	e0bfff17 	ldw	r2,-4(fp)
    3008:	10800b17 	ldw	r2,44(r2)
    300c:	d0e02897 	ldw	r3,-32606(gp)
    3010:	1880032e 	bgeu	r3,r2,3020 <xTaskResumeAll+0x88>
    3014:	e0bfff17 	ldw	r2,-4(fp)
    3018:	10800b17 	ldw	r2,44(r2)
    301c:	d0a02895 	stw	r2,-32606(gp)
    3020:	e0bfff17 	ldw	r2,-4(fp)
    3024:	10800b17 	ldw	r2,44(r2)
    3028:	10c00524 	muli	r3,r2,20
    302c:	00820234 	movhi	r2,2056
    3030:	10bf6d04 	addi	r2,r2,-588
    3034:	1887883a 	add	r3,r3,r2
    3038:	e0bfff17 	ldw	r2,-4(fp)
    303c:	10800104 	addi	r2,r2,4
    3040:	100b883a 	mov	r5,r2
    3044:	1809883a 	mov	r4,r3
    3048:	00014980 	call	1498 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    304c:	e0bfff17 	ldw	r2,-4(fp)
    3050:	10c00b17 	ldw	r3,44(r2)
    3054:	d0a02297 	ldw	r2,-32630(gp)
    3058:	10800b17 	ldw	r2,44(r2)
    305c:	18800236 	bltu	r3,r2,3068 <xTaskResumeAll+0xd0>
					{
						xYieldPending = pdTRUE;
    3060:	00800044 	movi	r2,1
    3064:	d0a02b95 	stw	r2,-32594(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3068:	00820234 	movhi	r2,2056
    306c:	10bfb304 	addi	r2,r2,-308
    3070:	10800017 	ldw	r2,0(r2)
    3074:	103fd61e 	bne	r2,zero,2fd0 <__alt_data_end+0xf0002fd0>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    3078:	d0a02a97 	ldw	r2,-32598(gp)
    307c:	10000a26 	beq	r2,zero,30a8 <xTaskResumeAll+0x110>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3080:	00000706 	br	30a0 <xTaskResumeAll+0x108>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3084:	00031500 	call	3150 <xTaskIncrementTick>
    3088:	10000226 	beq	r2,zero,3094 <xTaskResumeAll+0xfc>
						{
							xYieldPending = pdTRUE;
    308c:	00800044 	movi	r2,1
    3090:	d0a02b95 	stw	r2,-32594(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    3094:	d0a02a97 	ldw	r2,-32598(gp)
    3098:	10bfffc4 	addi	r2,r2,-1
    309c:	d0a02a95 	stw	r2,-32598(gp)
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    30a0:	d0a02a97 	ldw	r2,-32598(gp)
    30a4:	103ff71e 	bne	r2,zero,3084 <__alt_data_end+0xf0003084>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    30a8:	d0a02b97 	ldw	r2,-32594(gp)
    30ac:	10800058 	cmpnei	r2,r2,1
    30b0:	1000031e 	bne	r2,zero,30c0 <xTaskResumeAll+0x128>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    30b4:	00800044 	movi	r2,1
    30b8:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    30bc:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    30c0:	00040fc0 	call	40fc <vTaskExitCritical>

	return xAlreadyYielded;
    30c4:	e0bffe17 	ldw	r2,-8(fp)
}
    30c8:	e037883a 	mov	sp,fp
    30cc:	dfc00117 	ldw	ra,4(sp)
    30d0:	df000017 	ldw	fp,0(sp)
    30d4:	dec00204 	addi	sp,sp,8
    30d8:	f800283a 	ret

000030dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    30dc:	defffe04 	addi	sp,sp,-8
    30e0:	df000115 	stw	fp,4(sp)
    30e4:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    30e8:	d0a02797 	ldw	r2,-32610(gp)
    30ec:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    30f0:	e0bfff17 	ldw	r2,-4(fp)
}
    30f4:	e037883a 	mov	sp,fp
    30f8:	df000017 	ldw	fp,0(sp)
    30fc:	dec00104 	addi	sp,sp,4
    3100:	f800283a 	ret

00003104 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3104:	defffd04 	addi	sp,sp,-12
    3108:	df000215 	stw	fp,8(sp)
    310c:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    3110:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
    3114:	d0a02797 	ldw	r2,-32610(gp)
    3118:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    311c:	e0bfff17 	ldw	r2,-4(fp)
}
    3120:	e037883a 	mov	sp,fp
    3124:	df000017 	ldw	fp,0(sp)
    3128:	dec00104 	addi	sp,sp,4
    312c:	f800283a 	ret

00003130 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    3130:	deffff04 	addi	sp,sp,-4
    3134:	df000015 	stw	fp,0(sp)
    3138:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    313c:	d0a02697 	ldw	r2,-32614(gp)
}
    3140:	e037883a 	mov	sp,fp
    3144:	df000017 	ldw	fp,0(sp)
    3148:	dec00104 	addi	sp,sp,4
    314c:	f800283a 	ret

00003150 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3150:	defff904 	addi	sp,sp,-28
    3154:	dfc00615 	stw	ra,24(sp)
    3158:	df000515 	stw	fp,20(sp)
    315c:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3160:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3164:	d0a02e97 	ldw	r2,-32582(gp)
    3168:	10005d1e 	bne	r2,zero,32e0 <xTaskIncrementTick+0x190>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    316c:	d0a02797 	ldw	r2,-32610(gp)
    3170:	10800044 	addi	r2,r2,1
    3174:	d0a02795 	stw	r2,-32610(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3178:	d0a02797 	ldw	r2,-32610(gp)
    317c:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount == ( TickType_t ) 0U )
    3180:	e0bffc17 	ldw	r2,-16(fp)
    3184:	10000a1e 	bne	r2,zero,31b0 <xTaskIncrementTick+0x60>
			{
				taskSWITCH_DELAYED_LISTS();
    3188:	d0a02397 	ldw	r2,-32626(gp)
    318c:	e0bffd15 	stw	r2,-12(fp)
    3190:	d0a02497 	ldw	r2,-32622(gp)
    3194:	d0a02395 	stw	r2,-32626(gp)
    3198:	e0bffd17 	ldw	r2,-12(fp)
    319c:	d0a02495 	stw	r2,-32622(gp)
    31a0:	d0a02c97 	ldw	r2,-32590(gp)
    31a4:	10800044 	addi	r2,r2,1
    31a8:	d0a02c95 	stw	r2,-32590(gp)
    31ac:	0003da80 	call	3da8 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    31b0:	d0a00397 	ldw	r2,-32754(gp)
    31b4:	e0fffc17 	ldw	r3,-16(fp)
    31b8:	18803d36 	bltu	r3,r2,32b0 <xTaskIncrementTick+0x160>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    31bc:	d0a02397 	ldw	r2,-32626(gp)
    31c0:	10800017 	ldw	r2,0(r2)
    31c4:	1000021e 	bne	r2,zero,31d0 <xTaskIncrementTick+0x80>
    31c8:	00800044 	movi	r2,1
    31cc:	00000106 	br	31d4 <xTaskIncrementTick+0x84>
    31d0:	0005883a 	mov	r2,zero
    31d4:	10803fcc 	andi	r2,r2,255
    31d8:	10000326 	beq	r2,zero,31e8 <xTaskIncrementTick+0x98>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    31dc:	00bfffc4 	movi	r2,-1
    31e0:	d0a00395 	stw	r2,-32754(gp)
						break;
    31e4:	00003206 	br	32b0 <xTaskIncrementTick+0x160>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    31e8:	d0a02397 	ldw	r2,-32626(gp)
    31ec:	10800317 	ldw	r2,12(r2)
    31f0:	10800317 	ldw	r2,12(r2)
    31f4:	e0bffe15 	stw	r2,-8(fp)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    31f8:	e0bffe17 	ldw	r2,-8(fp)
    31fc:	10800117 	ldw	r2,4(r2)
    3200:	e0bfff15 	stw	r2,-4(fp)

						if( xConstTickCount < xItemValue )
    3204:	e0fffc17 	ldw	r3,-16(fp)
    3208:	e0bfff17 	ldw	r2,-4(fp)
    320c:	1880032e 	bgeu	r3,r2,321c <xTaskIncrementTick+0xcc>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    3210:	e0bfff17 	ldw	r2,-4(fp)
    3214:	d0a00395 	stw	r2,-32754(gp)
							break;
    3218:	00002506 	br	32b0 <xTaskIncrementTick+0x160>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    321c:	e0bffe17 	ldw	r2,-8(fp)
    3220:	10800104 	addi	r2,r2,4
    3224:	1009883a 	mov	r4,r2
    3228:	00015fc0 	call	15fc <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    322c:	e0bffe17 	ldw	r2,-8(fp)
    3230:	10800a17 	ldw	r2,40(r2)
    3234:	10000426 	beq	r2,zero,3248 <xTaskIncrementTick+0xf8>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3238:	e0bffe17 	ldw	r2,-8(fp)
    323c:	10800604 	addi	r2,r2,24
    3240:	1009883a 	mov	r4,r2
    3244:	00015fc0 	call	15fc <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3248:	e0bffe17 	ldw	r2,-8(fp)
    324c:	10800b17 	ldw	r2,44(r2)
    3250:	d0e02897 	ldw	r3,-32606(gp)
    3254:	1880032e 	bgeu	r3,r2,3264 <xTaskIncrementTick+0x114>
    3258:	e0bffe17 	ldw	r2,-8(fp)
    325c:	10800b17 	ldw	r2,44(r2)
    3260:	d0a02895 	stw	r2,-32606(gp)
    3264:	e0bffe17 	ldw	r2,-8(fp)
    3268:	10800b17 	ldw	r2,44(r2)
    326c:	10c00524 	muli	r3,r2,20
    3270:	00820234 	movhi	r2,2056
    3274:	10bf6d04 	addi	r2,r2,-588
    3278:	1887883a 	add	r3,r3,r2
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800104 	addi	r2,r2,4
    3284:	100b883a 	mov	r5,r2
    3288:	1809883a 	mov	r4,r3
    328c:	00014980 	call	1498 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3290:	e0bffe17 	ldw	r2,-8(fp)
    3294:	10c00b17 	ldw	r3,44(r2)
    3298:	d0a02297 	ldw	r2,-32630(gp)
    329c:	10800b17 	ldw	r2,44(r2)
    32a0:	18bfc636 	bltu	r3,r2,31bc <__alt_data_end+0xf00031bc>
							{
								xSwitchRequired = pdTRUE;
    32a4:	00800044 	movi	r2,1
    32a8:	e0bffb15 	stw	r2,-20(fp)
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    32ac:	003fc306 	br	31bc <__alt_data_end+0xf00031bc>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    32b0:	d0a02297 	ldw	r2,-32630(gp)
    32b4:	10c00b17 	ldw	r3,44(r2)
    32b8:	00820234 	movhi	r2,2056
    32bc:	10bf6d04 	addi	r2,r2,-588
    32c0:	18c00524 	muli	r3,r3,20
    32c4:	10c5883a 	add	r2,r2,r3
    32c8:	10800017 	ldw	r2,0(r2)
    32cc:	108000b0 	cmpltui	r2,r2,2
    32d0:	1000061e 	bne	r2,zero,32ec <xTaskIncrementTick+0x19c>
			{
				xSwitchRequired = pdTRUE;
    32d4:	00800044 	movi	r2,1
    32d8:	e0bffb15 	stw	r2,-20(fp)
    32dc:	00000306 	br	32ec <xTaskIncrementTick+0x19c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    32e0:	d0a02a97 	ldw	r2,-32598(gp)
    32e4:	10800044 	addi	r2,r2,1
    32e8:	d0a02a95 	stw	r2,-32598(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    32ec:	d0a02b97 	ldw	r2,-32594(gp)
    32f0:	10000226 	beq	r2,zero,32fc <xTaskIncrementTick+0x1ac>
		{
			xSwitchRequired = pdTRUE;
    32f4:	00800044 	movi	r2,1
    32f8:	e0bffb15 	stw	r2,-20(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    32fc:	e0bffb17 	ldw	r2,-20(fp)
}
    3300:	e037883a 	mov	sp,fp
    3304:	dfc00117 	ldw	ra,4(sp)
    3308:	df000017 	ldw	fp,0(sp)
    330c:	dec00204 	addi	sp,sp,8
    3310:	f800283a 	ret

00003314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3314:	defffd04 	addi	sp,sp,-12
    3318:	dfc00215 	stw	ra,8(sp)
    331c:	df000115 	stw	fp,4(sp)
    3320:	df000104 	addi	fp,sp,4
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3324:	d0a02e97 	ldw	r2,-32582(gp)
    3328:	10000326 	beq	r2,zero,3338 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    332c:	00800044 	movi	r2,1
    3330:	d0a02b95 	stw	r2,-32594(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3334:	00003e06 	br	3430 <vTaskSwitchContext+0x11c>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    3338:	d0202b95 	stw	zero,-32594(gp)
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    333c:	d0a02297 	ldw	r2,-32630(gp)
    3340:	10800017 	ldw	r2,0(r2)
    3344:	d0e02297 	ldw	r3,-32630(gp)
    3348:	18c00c17 	ldw	r3,48(r3)
    334c:	18800636 	bltu	r3,r2,3368 <vTaskSwitchContext+0x54>
    3350:	d0e02297 	ldw	r3,-32630(gp)
    3354:	d0a02297 	ldw	r2,-32630(gp)
    3358:	10800d04 	addi	r2,r2,52
    335c:	100b883a 	mov	r5,r2
    3360:	1809883a 	mov	r4,r3
    3364:	00016940 	call	1694 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    3368:	d0a02297 	ldw	r2,-32630(gp)
    336c:	10800c17 	ldw	r2,48(r2)
    3370:	01800504 	movi	r6,20
    3374:	01420034 	movhi	r5,2048
    3378:	29400e44 	addi	r5,r5,57
    337c:	1009883a 	mov	r4,r2
    3380:	00090a40 	call	90a4 <memcmp>
    3384:	10000a26 	beq	r2,zero,33b0 <vTaskSwitchContext+0x9c>
    3388:	d0e02297 	ldw	r3,-32630(gp)
    338c:	d0a02297 	ldw	r2,-32630(gp)
    3390:	10800d04 	addi	r2,r2,52
    3394:	100b883a 	mov	r5,r2
    3398:	1809883a 	mov	r4,r3
    339c:	00016940 	call	1694 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    33a0:	00000306 	br	33b0 <vTaskSwitchContext+0x9c>
    33a4:	d0a02897 	ldw	r2,-32606(gp)
    33a8:	10bfffc4 	addi	r2,r2,-1
    33ac:	d0a02895 	stw	r2,-32606(gp)
    33b0:	d0e02897 	ldw	r3,-32606(gp)
    33b4:	00820234 	movhi	r2,2056
    33b8:	10bf6d04 	addi	r2,r2,-588
    33bc:	18c00524 	muli	r3,r3,20
    33c0:	10c5883a 	add	r2,r2,r3
    33c4:	10800017 	ldw	r2,0(r2)
    33c8:	103ff626 	beq	r2,zero,33a4 <__alt_data_end+0xf00033a4>
    33cc:	d0a02897 	ldw	r2,-32606(gp)
    33d0:	10c00524 	muli	r3,r2,20
    33d4:	00820234 	movhi	r2,2056
    33d8:	10bf6d04 	addi	r2,r2,-588
    33dc:	1885883a 	add	r2,r3,r2
    33e0:	e0bfff15 	stw	r2,-4(fp)
    33e4:	e0bfff17 	ldw	r2,-4(fp)
    33e8:	10800117 	ldw	r2,4(r2)
    33ec:	10c00117 	ldw	r3,4(r2)
    33f0:	e0bfff17 	ldw	r2,-4(fp)
    33f4:	10c00115 	stw	r3,4(r2)
    33f8:	e0bfff17 	ldw	r2,-4(fp)
    33fc:	10c00117 	ldw	r3,4(r2)
    3400:	e0bfff17 	ldw	r2,-4(fp)
    3404:	10800204 	addi	r2,r2,8
    3408:	1880051e 	bne	r3,r2,3420 <vTaskSwitchContext+0x10c>
    340c:	e0bfff17 	ldw	r2,-4(fp)
    3410:	10800117 	ldw	r2,4(r2)
    3414:	10c00117 	ldw	r3,4(r2)
    3418:	e0bfff17 	ldw	r2,-4(fp)
    341c:	10c00115 	stw	r3,4(r2)
    3420:	e0bfff17 	ldw	r2,-4(fp)
    3424:	10800117 	ldw	r2,4(r2)
    3428:	10800317 	ldw	r2,12(r2)
    342c:	d0a02295 	stw	r2,-32630(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3430:	0001883a 	nop
    3434:	e037883a 	mov	sp,fp
    3438:	dfc00117 	ldw	ra,4(sp)
    343c:	df000017 	ldw	fp,0(sp)
    3440:	dec00204 	addi	sp,sp,8
    3444:	f800283a 	ret

00003448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3448:	defffb04 	addi	sp,sp,-20
    344c:	dfc00415 	stw	ra,16(sp)
    3450:	df000315 	stw	fp,12(sp)
    3454:	df000304 	addi	fp,sp,12
    3458:	e13ffe15 	stw	r4,-8(fp)
    345c:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3460:	d0a02297 	ldw	r2,-32630(gp)
    3464:	10800604 	addi	r2,r2,24
    3468:	100b883a 	mov	r5,r2
    346c:	e13ffe17 	ldw	r4,-8(fp)
    3470:	00015240 	call	1524 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3474:	d0a02297 	ldw	r2,-32630(gp)
    3478:	10800104 	addi	r2,r2,4
    347c:	1009883a 	mov	r4,r2
    3480:	00015fc0 	call	15fc <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    3484:	d0e02797 	ldw	r3,-32610(gp)
    3488:	e0bfff17 	ldw	r2,-4(fp)
    348c:	1885883a 	add	r2,r3,r2
    3490:	e0bffd15 	stw	r2,-12(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3494:	e13ffd17 	ldw	r4,-12(fp)
    3498:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    349c:	0001883a 	nop
    34a0:	e037883a 	mov	sp,fp
    34a4:	dfc00117 	ldw	ra,4(sp)
    34a8:	df000017 	ldw	fp,0(sp)
    34ac:	dec00204 	addi	sp,sp,8
    34b0:	f800283a 	ret

000034b4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    34b4:	defffa04 	addi	sp,sp,-24
    34b8:	dfc00515 	stw	ra,20(sp)
    34bc:	df000415 	stw	fp,16(sp)
    34c0:	df000404 	addi	fp,sp,16
    34c4:	e13ffd15 	stw	r4,-12(fp)
    34c8:	e17ffe15 	stw	r5,-8(fp)
    34cc:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    34d0:	d0a02297 	ldw	r2,-32630(gp)
    34d4:	e0fffe17 	ldw	r3,-8(fp)
    34d8:	18e00034 	orhi	r3,r3,32768
    34dc:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    34e0:	d0a02297 	ldw	r2,-32630(gp)
    34e4:	10800604 	addi	r2,r2,24
    34e8:	100b883a 	mov	r5,r2
    34ec:	e13ffd17 	ldw	r4,-12(fp)
    34f0:	00014980 	call	1498 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    34f4:	d0a02297 	ldw	r2,-32630(gp)
    34f8:	10800104 	addi	r2,r2,4
    34fc:	1009883a 	mov	r4,r2
    3500:	00015fc0 	call	15fc <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    3504:	d0e02797 	ldw	r3,-32610(gp)
    3508:	e0bfff17 	ldw	r2,-4(fp)
    350c:	1885883a 	add	r2,r3,r2
    3510:	e0bffc15 	stw	r2,-16(fp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3514:	e13ffc17 	ldw	r4,-16(fp)
    3518:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    351c:	0001883a 	nop
    3520:	e037883a 	mov	sp,fp
    3524:	dfc00117 	ldw	ra,4(sp)
    3528:	df000017 	ldw	fp,0(sp)
    352c:	dec00204 	addi	sp,sp,8
    3530:	f800283a 	ret

00003534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    3534:	defffb04 	addi	sp,sp,-20
    3538:	dfc00415 	stw	ra,16(sp)
    353c:	df000315 	stw	fp,12(sp)
    3540:	df000304 	addi	fp,sp,12
    3544:	e13ffe15 	stw	r4,-8(fp)
    3548:	e17fff15 	stw	r5,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    354c:	d0a02297 	ldw	r2,-32630(gp)
    3550:	10800604 	addi	r2,r2,24
    3554:	100b883a 	mov	r5,r2
    3558:	e13ffe17 	ldw	r4,-8(fp)
    355c:	00014980 	call	1498 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3560:	d0a02297 	ldw	r2,-32630(gp)
    3564:	10800104 	addi	r2,r2,4
    3568:	1009883a 	mov	r4,r2
    356c:	00015fc0 	call	15fc <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    3570:	d0e02797 	ldw	r3,-32610(gp)
    3574:	e0bfff17 	ldw	r2,-4(fp)
    3578:	1885883a 	add	r2,r3,r2
    357c:	e0bffd15 	stw	r2,-12(fp)

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    3580:	e13ffd17 	ldw	r4,-12(fp)
    3584:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>
	}
    3588:	0001883a 	nop
    358c:	e037883a 	mov	sp,fp
    3590:	dfc00117 	ldw	ra,4(sp)
    3594:	df000017 	ldw	fp,0(sp)
    3598:	dec00204 	addi	sp,sp,8
    359c:	f800283a 	ret

000035a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    35a0:	defffb04 	addi	sp,sp,-20
    35a4:	dfc00415 	stw	ra,16(sp)
    35a8:	df000315 	stw	fp,12(sp)
    35ac:	df000304 	addi	fp,sp,12
    35b0:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    35b4:	e0bfff17 	ldw	r2,-4(fp)
    35b8:	10800317 	ldw	r2,12(r2)
    35bc:	10800317 	ldw	r2,12(r2)
    35c0:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    35c4:	e0bffe17 	ldw	r2,-8(fp)
    35c8:	10800604 	addi	r2,r2,24
    35cc:	1009883a 	mov	r4,r2
    35d0:	00015fc0 	call	15fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    35d4:	d0a02e97 	ldw	r2,-32582(gp)
    35d8:	1000171e 	bne	r2,zero,3638 <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    35dc:	e0bffe17 	ldw	r2,-8(fp)
    35e0:	10800104 	addi	r2,r2,4
    35e4:	1009883a 	mov	r4,r2
    35e8:	00015fc0 	call	15fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    35ec:	e0bffe17 	ldw	r2,-8(fp)
    35f0:	10800b17 	ldw	r2,44(r2)
    35f4:	d0e02897 	ldw	r3,-32606(gp)
    35f8:	1880032e 	bgeu	r3,r2,3608 <xTaskRemoveFromEventList+0x68>
    35fc:	e0bffe17 	ldw	r2,-8(fp)
    3600:	10800b17 	ldw	r2,44(r2)
    3604:	d0a02895 	stw	r2,-32606(gp)
    3608:	e0bffe17 	ldw	r2,-8(fp)
    360c:	10800b17 	ldw	r2,44(r2)
    3610:	10c00524 	muli	r3,r2,20
    3614:	00820234 	movhi	r2,2056
    3618:	10bf6d04 	addi	r2,r2,-588
    361c:	1887883a 	add	r3,r3,r2
    3620:	e0bffe17 	ldw	r2,-8(fp)
    3624:	10800104 	addi	r2,r2,4
    3628:	100b883a 	mov	r5,r2
    362c:	1809883a 	mov	r4,r3
    3630:	00014980 	call	1498 <vListInsertEnd>
    3634:	00000606 	br	3650 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3638:	e0bffe17 	ldw	r2,-8(fp)
    363c:	10800604 	addi	r2,r2,24
    3640:	100b883a 	mov	r5,r2
    3644:	01020234 	movhi	r4,2056
    3648:	213fb304 	addi	r4,r4,-308
    364c:	00014980 	call	1498 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3650:	e0bffe17 	ldw	r2,-8(fp)
    3654:	10800b17 	ldw	r2,44(r2)
    3658:	d0e02297 	ldw	r3,-32630(gp)
    365c:	18c00b17 	ldw	r3,44(r3)
    3660:	1880052e 	bgeu	r3,r2,3678 <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3664:	00800044 	movi	r2,1
    3668:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    366c:	00800044 	movi	r2,1
    3670:	d0a02b95 	stw	r2,-32594(gp)
    3674:	00000106 	br	367c <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
    3678:	e03ffd15 	stw	zero,-12(fp)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    367c:	e0bffd17 	ldw	r2,-12(fp)
}
    3680:	e037883a 	mov	sp,fp
    3684:	dfc00117 	ldw	ra,4(sp)
    3688:	df000017 	ldw	fp,0(sp)
    368c:	dec00204 	addi	sp,sp,8
    3690:	f800283a 	ret

00003694 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3694:	defffa04 	addi	sp,sp,-24
    3698:	dfc00515 	stw	ra,20(sp)
    369c:	df000415 	stw	fp,16(sp)
    36a0:	df000404 	addi	fp,sp,16
    36a4:	e13ffe15 	stw	r4,-8(fp)
    36a8:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    36ac:	e0bfff17 	ldw	r2,-4(fp)
    36b0:	10e00034 	orhi	r3,r2,32768
    36b4:	e0bffe17 	ldw	r2,-8(fp)
    36b8:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    36bc:	e0bffe17 	ldw	r2,-8(fp)
    36c0:	10800317 	ldw	r2,12(r2)
    36c4:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    36c8:	e13ffe17 	ldw	r4,-8(fp)
    36cc:	00015fc0 	call	15fc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    36d0:	e0bffd17 	ldw	r2,-12(fp)
    36d4:	10800104 	addi	r2,r2,4
    36d8:	1009883a 	mov	r4,r2
    36dc:	00015fc0 	call	15fc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    36e0:	e0bffd17 	ldw	r2,-12(fp)
    36e4:	10800b17 	ldw	r2,44(r2)
    36e8:	d0e02897 	ldw	r3,-32606(gp)
    36ec:	1880032e 	bgeu	r3,r2,36fc <xTaskRemoveFromUnorderedEventList+0x68>
    36f0:	e0bffd17 	ldw	r2,-12(fp)
    36f4:	10800b17 	ldw	r2,44(r2)
    36f8:	d0a02895 	stw	r2,-32606(gp)
    36fc:	e0bffd17 	ldw	r2,-12(fp)
    3700:	10800b17 	ldw	r2,44(r2)
    3704:	10c00524 	muli	r3,r2,20
    3708:	00820234 	movhi	r2,2056
    370c:	10bf6d04 	addi	r2,r2,-588
    3710:	1887883a 	add	r3,r3,r2
    3714:	e0bffd17 	ldw	r2,-12(fp)
    3718:	10800104 	addi	r2,r2,4
    371c:	100b883a 	mov	r5,r2
    3720:	1809883a 	mov	r4,r3
    3724:	00014980 	call	1498 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3728:	e0bffd17 	ldw	r2,-12(fp)
    372c:	10800b17 	ldw	r2,44(r2)
    3730:	d0e02297 	ldw	r3,-32630(gp)
    3734:	18c00b17 	ldw	r3,44(r3)
    3738:	1880052e 	bgeu	r3,r2,3750 <xTaskRemoveFromUnorderedEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    373c:	00800044 	movi	r2,1
    3740:	e0bffc15 	stw	r2,-16(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3744:	00800044 	movi	r2,1
    3748:	d0a02b95 	stw	r2,-32594(gp)
    374c:	00000106 	br	3754 <xTaskRemoveFromUnorderedEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    3750:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
    3754:	e0bffc17 	ldw	r2,-16(fp)
}
    3758:	e037883a 	mov	sp,fp
    375c:	dfc00117 	ldw	ra,4(sp)
    3760:	df000017 	ldw	fp,0(sp)
    3764:	dec00204 	addi	sp,sp,8
    3768:	f800283a 	ret

0000376c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    376c:	defffe04 	addi	sp,sp,-8
    3770:	df000115 	stw	fp,4(sp)
    3774:	df000104 	addi	fp,sp,4
    3778:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    377c:	d0e02c97 	ldw	r3,-32590(gp)
    3780:	e0bfff17 	ldw	r2,-4(fp)
    3784:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
    3788:	d0e02797 	ldw	r3,-32610(gp)
    378c:	e0bfff17 	ldw	r2,-4(fp)
    3790:	10c00115 	stw	r3,4(r2)
}
    3794:	0001883a 	nop
    3798:	e037883a 	mov	sp,fp
    379c:	df000017 	ldw	fp,0(sp)
    37a0:	dec00104 	addi	sp,sp,4
    37a4:	f800283a 	ret

000037a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    37a8:	defffa04 	addi	sp,sp,-24
    37ac:	dfc00515 	stw	ra,20(sp)
    37b0:	df000415 	stw	fp,16(sp)
    37b4:	df000404 	addi	fp,sp,16
    37b8:	e13ffe15 	stw	r4,-8(fp)
    37bc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    37c0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    37c4:	d0a02797 	ldw	r2,-32610(gp)
    37c8:	e0bffd15 	stw	r2,-12(fp)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    37cc:	e0bffe17 	ldw	r2,-8(fp)
    37d0:	10c00017 	ldw	r3,0(r2)
    37d4:	d0a02c97 	ldw	r2,-32590(gp)
    37d8:	18800726 	beq	r3,r2,37f8 <xTaskCheckForTimeOut+0x50>
    37dc:	e0bffe17 	ldw	r2,-8(fp)
    37e0:	10800117 	ldw	r2,4(r2)
    37e4:	e0fffd17 	ldw	r3,-12(fp)
    37e8:	18800336 	bltu	r3,r2,37f8 <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    37ec:	00800044 	movi	r2,1
    37f0:	e0bffc15 	stw	r2,-16(fp)
    37f4:	00001606 	br	3850 <xTaskCheckForTimeOut+0xa8>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    37f8:	e0bffe17 	ldw	r2,-8(fp)
    37fc:	10800117 	ldw	r2,4(r2)
    3800:	e0fffd17 	ldw	r3,-12(fp)
    3804:	1887c83a 	sub	r3,r3,r2
    3808:	e0bfff17 	ldw	r2,-4(fp)
    380c:	10800017 	ldw	r2,0(r2)
    3810:	18800d2e 	bgeu	r3,r2,3848 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3814:	e0bfff17 	ldw	r2,-4(fp)
    3818:	10c00017 	ldw	r3,0(r2)
    381c:	e0bffe17 	ldw	r2,-8(fp)
    3820:	11000117 	ldw	r4,4(r2)
    3824:	e0bffd17 	ldw	r2,-12(fp)
    3828:	2085c83a 	sub	r2,r4,r2
    382c:	1887883a 	add	r3,r3,r2
    3830:	e0bfff17 	ldw	r2,-4(fp)
    3834:	10c00015 	stw	r3,0(r2)
			vTaskSetTimeOutState( pxTimeOut );
    3838:	e13ffe17 	ldw	r4,-8(fp)
    383c:	000376c0 	call	376c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3840:	e03ffc15 	stw	zero,-16(fp)
    3844:	00000206 	br	3850 <xTaskCheckForTimeOut+0xa8>
		}
		else
		{
			xReturn = pdTRUE;
    3848:	00800044 	movi	r2,1
    384c:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	taskEXIT_CRITICAL();
    3850:	00040fc0 	call	40fc <vTaskExitCritical>

	return xReturn;
    3854:	e0bffc17 	ldw	r2,-16(fp)
}
    3858:	e037883a 	mov	sp,fp
    385c:	dfc00117 	ldw	ra,4(sp)
    3860:	df000017 	ldw	fp,0(sp)
    3864:	dec00204 	addi	sp,sp,8
    3868:	f800283a 	ret

0000386c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    386c:	deffff04 	addi	sp,sp,-4
    3870:	df000015 	stw	fp,0(sp)
    3874:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
    3878:	00800044 	movi	r2,1
    387c:	d0a02b95 	stw	r2,-32594(gp)
}
    3880:	0001883a 	nop
    3884:	e037883a 	mov	sp,fp
    3888:	df000017 	ldw	fp,0(sp)
    388c:	dec00104 	addi	sp,sp,4
    3890:	f800283a 	ret

00003894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3894:	defffd04 	addi	sp,sp,-12
    3898:	dfc00215 	stw	ra,8(sp)
    389c:	df000115 	stw	fp,4(sp)
    38a0:	df000104 	addi	fp,sp,4
    38a4:	e13fff15 	stw	r4,-4(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    38a8:	0003aa80 	call	3aa8 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    38ac:	003ffe06 	br	38a8 <__alt_data_end+0xf00038a8>

000038b0 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    38b0:	defff804 	addi	sp,sp,-32
    38b4:	dfc00715 	stw	ra,28(sp)
    38b8:	df000615 	stw	fp,24(sp)
    38bc:	df000604 	addi	fp,sp,24
    38c0:	e13ffb15 	stw	r4,-20(fp)
    38c4:	e17ffc15 	stw	r5,-16(fp)
    38c8:	e1bffd15 	stw	r6,-12(fp)
    38cc:	e1fffe15 	stw	r7,-8(fp)
    38d0:	e0800217 	ldw	r2,8(fp)
    38d4:	e0bfff0d 	sth	r2,-4(fp)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    38d8:	e03ffa15 	stw	zero,-24(fp)
    38dc:	00001406 	br	3930 <prvInitialiseTCBVariables+0x80>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    38e0:	e0fffc17 	ldw	r3,-16(fp)
    38e4:	e0bffa17 	ldw	r2,-24(fp)
    38e8:	1885883a 	add	r2,r3,r2
    38ec:	10c00003 	ldbu	r3,0(r2)
    38f0:	e13ffb17 	ldw	r4,-20(fp)
    38f4:	e0bffa17 	ldw	r2,-24(fp)
    38f8:	2085883a 	add	r2,r4,r2
    38fc:	10800d04 	addi	r2,r2,52
    3900:	10c00005 	stb	r3,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3904:	e0fffc17 	ldw	r3,-16(fp)
    3908:	e0bffa17 	ldw	r2,-24(fp)
    390c:	1885883a 	add	r2,r3,r2
    3910:	10800003 	ldbu	r2,0(r2)
    3914:	10803fcc 	andi	r2,r2,255
    3918:	1080201c 	xori	r2,r2,128
    391c:	10bfe004 	addi	r2,r2,-128
    3920:	10000726 	beq	r2,zero,3940 <prvInitialiseTCBVariables+0x90>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3924:	e0bffa17 	ldw	r2,-24(fp)
    3928:	10800044 	addi	r2,r2,1
    392c:	e0bffa15 	stw	r2,-24(fp)
    3930:	e0bffa17 	ldw	r2,-24(fp)
    3934:	10800230 	cmpltui	r2,r2,8
    3938:	103fe91e 	bne	r2,zero,38e0 <__alt_data_end+0xf00038e0>
    393c:	00000106 	br	3944 <prvInitialiseTCBVariables+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    3940:	0001883a 	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3944:	e0bffb17 	ldw	r2,-20(fp)
    3948:	10000ec5 	stb	zero,59(r2)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    394c:	e0bffd17 	ldw	r2,-12(fp)
    3950:	10800330 	cmpltui	r2,r2,12
    3954:	1000021e 	bne	r2,zero,3960 <prvInitialiseTCBVariables+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3958:	008002c4 	movi	r2,11
    395c:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    3960:	e0bffb17 	ldw	r2,-20(fp)
    3964:	e0fffd17 	ldw	r3,-12(fp)
    3968:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    396c:	e0bffb17 	ldw	r2,-20(fp)
    3970:	e0fffd17 	ldw	r3,-12(fp)
    3974:	10c01015 	stw	r3,64(r2)
		pxTCB->uxMutexesHeld = 0;
    3978:	e0bffb17 	ldw	r2,-20(fp)
    397c:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3980:	e0bffb17 	ldw	r2,-20(fp)
    3984:	10800104 	addi	r2,r2,4
    3988:	1009883a 	mov	r4,r2
    398c:	000146c0 	call	146c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3990:	e0bffb17 	ldw	r2,-20(fp)
    3994:	10800604 	addi	r2,r2,24
    3998:	1009883a 	mov	r4,r2
    399c:	000146c0 	call	146c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    39a0:	e0bffb17 	ldw	r2,-20(fp)
    39a4:	e0fffb17 	ldw	r3,-20(fp)
    39a8:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    39ac:	00c00304 	movi	r3,12
    39b0:	e0bffd17 	ldw	r2,-12(fp)
    39b4:	1887c83a 	sub	r3,r3,r2
    39b8:	e0bffb17 	ldw	r2,-20(fp)
    39bc:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    39c0:	e0bffb17 	ldw	r2,-20(fp)
    39c4:	e0fffb17 	ldw	r3,-20(fp)
    39c8:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    39cc:	e0bffb17 	ldw	r2,-20(fp)
    39d0:	10000f15 	stw	zero,60(r2)
	}
	#endif /* portUSING_MPU_WRAPPERS */

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    39d4:	e0bffb17 	ldw	r2,-20(fp)
    39d8:	10001215 	stw	zero,72(r2)
		pxTCB->eNotifyState = eNotWaitingNotification;
    39dc:	e0bffb17 	ldw	r2,-20(fp)
    39e0:	10001315 	stw	zero,76(r2)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    39e4:	0001883a 	nop
    39e8:	e037883a 	mov	sp,fp
    39ec:	dfc00117 	ldw	ra,4(sp)
    39f0:	df000017 	ldw	fp,0(sp)
    39f4:	dec00204 	addi	sp,sp,8
    39f8:	f800283a 	ret

000039fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    39fc:	defffd04 	addi	sp,sp,-12
    3a00:	dfc00215 	stw	ra,8(sp)
    3a04:	df000115 	stw	fp,4(sp)
    3a08:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a0c:	e03fff15 	stw	zero,-4(fp)
    3a10:	00000a06 	br	3a3c <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a14:	e0bfff17 	ldw	r2,-4(fp)
    3a18:	10c00524 	muli	r3,r2,20
    3a1c:	00820234 	movhi	r2,2056
    3a20:	10bf6d04 	addi	r2,r2,-588
    3a24:	1885883a 	add	r2,r3,r2
    3a28:	1009883a 	mov	r4,r2
    3a2c:	00014040 	call	1404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3a30:	e0bfff17 	ldw	r2,-4(fp)
    3a34:	10800044 	addi	r2,r2,1
    3a38:	e0bfff15 	stw	r2,-4(fp)
    3a3c:	e0bfff17 	ldw	r2,-4(fp)
    3a40:	10800330 	cmpltui	r2,r2,12
    3a44:	103ff31e 	bne	r2,zero,3a14 <__alt_data_end+0xf0003a14>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3a48:	01020234 	movhi	r4,2056
    3a4c:	213fa904 	addi	r4,r4,-348
    3a50:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3a54:	01020234 	movhi	r4,2056
    3a58:	213fae04 	addi	r4,r4,-328
    3a5c:	00014040 	call	1404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3a60:	01020234 	movhi	r4,2056
    3a64:	213fb304 	addi	r4,r4,-308
    3a68:	00014040 	call	1404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3a6c:	01020234 	movhi	r4,2056
    3a70:	213fb804 	addi	r4,r4,-288
    3a74:	00014040 	call	1404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3a78:	00820234 	movhi	r2,2056
    3a7c:	10bfa904 	addi	r2,r2,-348
    3a80:	d0a02395 	stw	r2,-32626(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3a84:	00820234 	movhi	r2,2056
    3a88:	10bfae04 	addi	r2,r2,-328
    3a8c:	d0a02495 	stw	r2,-32622(gp)
}
    3a90:	0001883a 	nop
    3a94:	e037883a 	mov	sp,fp
    3a98:	dfc00117 	ldw	ra,4(sp)
    3a9c:	df000017 	ldw	fp,0(sp)
    3aa0:	dec00204 	addi	sp,sp,8
    3aa4:	f800283a 	ret

00003aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3aa8:	defffc04 	addi	sp,sp,-16
    3aac:	dfc00315 	stw	ra,12(sp)
    3ab0:	df000215 	stw	fp,8(sp)
    3ab4:	df000204 	addi	fp,sp,8
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3ab8:	00001d06 	br	3b30 <prvCheckTasksWaitingTermination+0x88>
		{
			vTaskSuspendAll();
    3abc:	0002f6c0 	call	2f6c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3ac0:	00820234 	movhi	r2,2056
    3ac4:	10bfb804 	addi	r2,r2,-288
    3ac8:	10800017 	ldw	r2,0(r2)
    3acc:	1005003a 	cmpeq	r2,r2,zero
    3ad0:	10803fcc 	andi	r2,r2,255
    3ad4:	e0bffe15 	stw	r2,-8(fp)
			}
			( void ) xTaskResumeAll();
    3ad8:	0002f980 	call	2f98 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3adc:	e0bffe17 	ldw	r2,-8(fp)
    3ae0:	1000131e 	bne	r2,zero,3b30 <prvCheckTasksWaitingTermination+0x88>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3ae4:	00040a80 	call	40a8 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3ae8:	00820234 	movhi	r2,2056
    3aec:	10bfb804 	addi	r2,r2,-288
    3af0:	10800317 	ldw	r2,12(r2)
    3af4:	10800317 	ldw	r2,12(r2)
    3af8:	e0bfff15 	stw	r2,-4(fp)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3afc:	e0bfff17 	ldw	r2,-4(fp)
    3b00:	10800104 	addi	r2,r2,4
    3b04:	1009883a 	mov	r4,r2
    3b08:	00015fc0 	call	15fc <uxListRemove>
					--uxCurrentNumberOfTasks;
    3b0c:	d0a02697 	ldw	r2,-32614(gp)
    3b10:	10bfffc4 	addi	r2,r2,-1
    3b14:	d0a02695 	stw	r2,-32614(gp)
					--uxTasksDeleted;
    3b18:	d0a02597 	ldw	r2,-32618(gp)
    3b1c:	10bfffc4 	addi	r2,r2,-1
    3b20:	d0a02595 	stw	r2,-32618(gp)
				}
				taskEXIT_CRITICAL();
    3b24:	00040fc0 	call	40fc <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
    3b28:	e13fff17 	ldw	r4,-4(fp)
    3b2c:	0003d640 	call	3d64 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3b30:	d0a02597 	ldw	r2,-32618(gp)
    3b34:	103fe11e 	bne	r2,zero,3abc <__alt_data_end+0xf0003abc>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3b38:	0001883a 	nop
    3b3c:	e037883a 	mov	sp,fp
    3b40:	dfc00117 	ldw	ra,4(sp)
    3b44:	df000017 	ldw	fp,0(sp)
    3b48:	dec00204 	addi	sp,sp,8
    3b4c:	f800283a 	ret

00003b50 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    3b50:	defffd04 	addi	sp,sp,-12
    3b54:	dfc00215 	stw	ra,8(sp)
    3b58:	df000115 	stw	fp,4(sp)
    3b5c:	df000104 	addi	fp,sp,4
    3b60:	e13fff15 	stw	r4,-4(fp)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3b64:	d0a02297 	ldw	r2,-32630(gp)
    3b68:	e0ffff17 	ldw	r3,-4(fp)
    3b6c:	10c00115 	stw	r3,4(r2)

	if( xTimeToWake < xTickCount )
    3b70:	d0a02797 	ldw	r2,-32610(gp)
    3b74:	e0ffff17 	ldw	r3,-4(fp)
    3b78:	1880072e 	bgeu	r3,r2,3b98 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3b7c:	d0e02497 	ldw	r3,-32622(gp)
    3b80:	d0a02297 	ldw	r2,-32630(gp)
    3b84:	10800104 	addi	r2,r2,4
    3b88:	100b883a 	mov	r5,r2
    3b8c:	1809883a 	mov	r4,r3
    3b90:	00015240 	call	1524 <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3b94:	00000b06 	br	3bc4 <prvAddCurrentTaskToDelayedList+0x74>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3b98:	d0e02397 	ldw	r3,-32626(gp)
    3b9c:	d0a02297 	ldw	r2,-32630(gp)
    3ba0:	10800104 	addi	r2,r2,4
    3ba4:	100b883a 	mov	r5,r2
    3ba8:	1809883a 	mov	r4,r3
    3bac:	00015240 	call	1524 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3bb0:	d0a00397 	ldw	r2,-32754(gp)
    3bb4:	e0ffff17 	ldw	r3,-4(fp)
    3bb8:	1880022e 	bgeu	r3,r2,3bc4 <prvAddCurrentTaskToDelayedList+0x74>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	d0a00395 	stw	r2,-32754(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3bc4:	0001883a 	nop
    3bc8:	e037883a 	mov	sp,fp
    3bcc:	dfc00117 	ldw	ra,4(sp)
    3bd0:	df000017 	ldw	fp,0(sp)
    3bd4:	dec00204 	addi	sp,sp,8
    3bd8:	f800283a 	ret

00003bdc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    3bdc:	defffa04 	addi	sp,sp,-24
    3be0:	dfc00515 	stw	ra,20(sp)
    3be4:	df000415 	stw	fp,16(sp)
    3be8:	df000404 	addi	fp,sp,16
    3bec:	2005883a 	mov	r2,r4
    3bf0:	e17fff15 	stw	r5,-4(fp)
    3bf4:	e0bffe0d 	sth	r2,-8(fp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3bf8:	e0bfff17 	ldw	r2,-4(fp)
    3bfc:	1000061e 	bne	r2,zero,3c18 <prvAllocateTCBAndStack+0x3c>
    3c00:	e0bffe0b 	ldhu	r2,-8(fp)
    3c04:	1085883a 	add	r2,r2,r2
    3c08:	1085883a 	add	r2,r2,r2
    3c0c:	1009883a 	mov	r4,r2
    3c10:	0000fd00 	call	fd0 <pvPortMalloc>
    3c14:	00000106 	br	3c1c <prvAllocateTCBAndStack+0x40>
    3c18:	e0bfff17 	ldw	r2,-4(fp)
    3c1c:	e0bffd15 	stw	r2,-12(fp)

		if( pxStack != NULL )
    3c20:	e0bffd17 	ldw	r2,-12(fp)
    3c24:	10000c26 	beq	r2,zero,3c58 <prvAllocateTCBAndStack+0x7c>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    3c28:	01001404 	movi	r4,80
    3c2c:	0000fd00 	call	fd0 <pvPortMalloc>
    3c30:	e0bffc15 	stw	r2,-16(fp)

			if( pxNewTCB != NULL )
    3c34:	e0bffc17 	ldw	r2,-16(fp)
    3c38:	10000426 	beq	r2,zero,3c4c <prvAllocateTCBAndStack+0x70>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    3c3c:	e0bffc17 	ldw	r2,-16(fp)
    3c40:	e0fffd17 	ldw	r3,-12(fp)
    3c44:	10c00c15 	stw	r3,48(r2)
    3c48:	00000406 	br	3c5c <prvAllocateTCBAndStack+0x80>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    3c4c:	e13ffd17 	ldw	r4,-12(fp)
    3c50:	00011500 	call	1150 <vPortFree>
    3c54:	00000106 	br	3c5c <prvAllocateTCBAndStack+0x80>
			}
		}
		else
		{
			pxNewTCB = NULL;
    3c58:	e03ffc15 	stw	zero,-16(fp)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
    3c5c:	e0bffc17 	ldw	r2,-16(fp)
    3c60:	10000926 	beq	r2,zero,3c88 <prvAllocateTCBAndStack+0xac>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    3c64:	e0bffc17 	ldw	r2,-16(fp)
    3c68:	10c00c17 	ldw	r3,48(r2)
    3c6c:	e0bffe0b 	ldhu	r2,-8(fp)
    3c70:	1085883a 	add	r2,r2,r2
    3c74:	1085883a 	add	r2,r2,r2
    3c78:	100d883a 	mov	r6,r2
    3c7c:	01402944 	movi	r5,165
    3c80:	1809883a 	mov	r4,r3
    3c84:	00092680 	call	9268 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
    3c88:	e0bffc17 	ldw	r2,-16(fp)
}
    3c8c:	e037883a 	mov	sp,fp
    3c90:	dfc00117 	ldw	ra,4(sp)
    3c94:	df000017 	ldw	fp,0(sp)
    3c98:	dec00204 	addi	sp,sp,8
    3c9c:	f800283a 	ret

00003ca0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    3ca0:	defffd04 	addi	sp,sp,-12
    3ca4:	df000215 	stw	fp,8(sp)
    3ca8:	df000204 	addi	fp,sp,8
    3cac:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
    3cb0:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cb4:	00000606 	br	3cd0 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
    3cb8:	e0bfff17 	ldw	r2,-4(fp)
    3cbc:	10800044 	addi	r2,r2,1
    3cc0:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
    3cc4:	e0bffe17 	ldw	r2,-8(fp)
    3cc8:	10800044 	addi	r2,r2,1
    3ccc:	e0bffe15 	stw	r2,-8(fp)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3cd0:	e0bfff17 	ldw	r2,-4(fp)
    3cd4:	10800003 	ldbu	r2,0(r2)
    3cd8:	10803fcc 	andi	r2,r2,255
    3cdc:	10802960 	cmpeqi	r2,r2,165
    3ce0:	103ff51e 	bne	r2,zero,3cb8 <__alt_data_end+0xf0003cb8>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    3ce4:	e0bffe17 	ldw	r2,-8(fp)
    3ce8:	1004d0ba 	srli	r2,r2,2
    3cec:	e0bffe15 	stw	r2,-8(fp)

		return ( uint16_t ) ulCount;
    3cf0:	e0bffe17 	ldw	r2,-8(fp)
	}
    3cf4:	e037883a 	mov	sp,fp
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00104 	addi	sp,sp,4
    3d00:	f800283a 	ret

00003d04 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    3d04:	defffa04 	addi	sp,sp,-24
    3d08:	dfc00515 	stw	ra,20(sp)
    3d0c:	df000415 	stw	fp,16(sp)
    3d10:	df000404 	addi	fp,sp,16
    3d14:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3d18:	e0bfff17 	ldw	r2,-4(fp)
    3d1c:	1000021e 	bne	r2,zero,3d28 <uxTaskGetStackHighWaterMark+0x24>
    3d20:	d0a02297 	ldw	r2,-32630(gp)
    3d24:	00000106 	br	3d2c <uxTaskGetStackHighWaterMark+0x28>
    3d28:	e0bfff17 	ldw	r2,-4(fp)
    3d2c:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    3d30:	e0bffc17 	ldw	r2,-16(fp)
    3d34:	10800c17 	ldw	r2,48(r2)
    3d38:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    3d3c:	e13ffd17 	ldw	r4,-12(fp)
    3d40:	0003ca00 	call	3ca0 <prvTaskCheckFreeStackSpace>
    3d44:	10bfffcc 	andi	r2,r2,65535
    3d48:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
    3d4c:	e0bffe17 	ldw	r2,-8(fp)
	}
    3d50:	e037883a 	mov	sp,fp
    3d54:	dfc00117 	ldw	ra,4(sp)
    3d58:	df000017 	ldw	fp,0(sp)
    3d5c:	dec00204 	addi	sp,sp,8
    3d60:	f800283a 	ret

00003d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3d64:	defffd04 	addi	sp,sp,-12
    3d68:	dfc00215 	stw	ra,8(sp)
    3d6c:	df000115 	stw	fp,4(sp)
    3d70:	df000104 	addi	fp,sp,4
    3d74:	e13fff15 	stw	r4,-4(fp)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    3d78:	e0bfff17 	ldw	r2,-4(fp)
    3d7c:	10800c17 	ldw	r2,48(r2)
    3d80:	1009883a 	mov	r4,r2
    3d84:	00011500 	call	1150 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    3d88:	e13fff17 	ldw	r4,-4(fp)
    3d8c:	00011500 	call	1150 <vPortFree>
	}
    3d90:	0001883a 	nop
    3d94:	e037883a 	mov	sp,fp
    3d98:	dfc00117 	ldw	ra,4(sp)
    3d9c:	df000017 	ldw	fp,0(sp)
    3da0:	dec00204 	addi	sp,sp,8
    3da4:	f800283a 	ret

00003da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3da8:	defffe04 	addi	sp,sp,-8
    3dac:	df000115 	stw	fp,4(sp)
    3db0:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3db4:	d0a02397 	ldw	r2,-32626(gp)
    3db8:	10800017 	ldw	r2,0(r2)
    3dbc:	1000021e 	bne	r2,zero,3dc8 <prvResetNextTaskUnblockTime+0x20>
    3dc0:	00800044 	movi	r2,1
    3dc4:	00000106 	br	3dcc <prvResetNextTaskUnblockTime+0x24>
    3dc8:	0005883a 	mov	r2,zero
    3dcc:	10803fcc 	andi	r2,r2,255
    3dd0:	10000326 	beq	r2,zero,3de0 <prvResetNextTaskUnblockTime+0x38>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3dd4:	00bfffc4 	movi	r2,-1
    3dd8:	d0a00395 	stw	r2,-32754(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
    3ddc:	00000706 	br	3dfc <prvResetNextTaskUnblockTime+0x54>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3de0:	d0a02397 	ldw	r2,-32626(gp)
    3de4:	10800317 	ldw	r2,12(r2)
    3de8:	10800317 	ldw	r2,12(r2)
    3dec:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    3df0:	e0bfff17 	ldw	r2,-4(fp)
    3df4:	10800117 	ldw	r2,4(r2)
    3df8:	d0a00395 	stw	r2,-32754(gp)
	}
}
    3dfc:	0001883a 	nop
    3e00:	e037883a 	mov	sp,fp
    3e04:	df000017 	ldw	fp,0(sp)
    3e08:	dec00104 	addi	sp,sp,4
    3e0c:	f800283a 	ret

00003e10 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3e10:	defffe04 	addi	sp,sp,-8
    3e14:	df000115 	stw	fp,4(sp)
    3e18:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e1c:	d0a02297 	ldw	r2,-32630(gp)
    3e20:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
    3e24:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e28:	e037883a 	mov	sp,fp
    3e2c:	df000017 	ldw	fp,0(sp)
    3e30:	dec00104 	addi	sp,sp,4
    3e34:	f800283a 	ret

00003e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3e38:	defffe04 	addi	sp,sp,-8
    3e3c:	df000115 	stw	fp,4(sp)
    3e40:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3e44:	d0a02997 	ldw	r2,-32602(gp)
    3e48:	1000031e 	bne	r2,zero,3e58 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3e4c:	00800044 	movi	r2,1
    3e50:	e0bfff15 	stw	r2,-4(fp)
    3e54:	00000606 	br	3e70 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3e58:	d0a02e97 	ldw	r2,-32582(gp)
    3e5c:	1000031e 	bne	r2,zero,3e6c <xTaskGetSchedulerState+0x34>
			{
				xReturn = taskSCHEDULER_RUNNING;
    3e60:	00800084 	movi	r2,2
    3e64:	e0bfff15 	stw	r2,-4(fp)
    3e68:	00000106 	br	3e70 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3e6c:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
    3e70:	e0bfff17 	ldw	r2,-4(fp)
	}
    3e74:	e037883a 	mov	sp,fp
    3e78:	df000017 	ldw	fp,0(sp)
    3e7c:	dec00104 	addi	sp,sp,4
    3e80:	f800283a 	ret

00003e84 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3e84:	defffc04 	addi	sp,sp,-16
    3e88:	dfc00315 	stw	ra,12(sp)
    3e8c:	df000215 	stw	fp,8(sp)
    3e90:	df000204 	addi	fp,sp,8
    3e94:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3e98:	e0bfff17 	ldw	r2,-4(fp)
    3e9c:	e0bffe15 	stw	r2,-8(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3ea0:	e0bfff17 	ldw	r2,-4(fp)
    3ea4:	10003b26 	beq	r2,zero,3f94 <vTaskPriorityInherit+0x110>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3ea8:	e0bffe17 	ldw	r2,-8(fp)
    3eac:	10c00b17 	ldw	r3,44(r2)
    3eb0:	d0a02297 	ldw	r2,-32630(gp)
    3eb4:	10800b17 	ldw	r2,44(r2)
    3eb8:	1880362e 	bgeu	r3,r2,3f94 <vTaskPriorityInherit+0x110>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3ebc:	e0bffe17 	ldw	r2,-8(fp)
    3ec0:	10800617 	ldw	r2,24(r2)
    3ec4:	10000616 	blt	r2,zero,3ee0 <vTaskPriorityInherit+0x5c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3ec8:	d0a02297 	ldw	r2,-32630(gp)
    3ecc:	10800b17 	ldw	r2,44(r2)
    3ed0:	00c00304 	movi	r3,12
    3ed4:	1887c83a 	sub	r3,r3,r2
    3ed8:	e0bffe17 	ldw	r2,-8(fp)
    3edc:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3ee0:	e0bffe17 	ldw	r2,-8(fp)
    3ee4:	10c00517 	ldw	r3,20(r2)
    3ee8:	e0bffe17 	ldw	r2,-8(fp)
    3eec:	10800b17 	ldw	r2,44(r2)
    3ef0:	11000524 	muli	r4,r2,20
    3ef4:	00820234 	movhi	r2,2056
    3ef8:	10bf6d04 	addi	r2,r2,-588
    3efc:	2085883a 	add	r2,r4,r2
    3f00:	1880021e 	bne	r3,r2,3f0c <vTaskPriorityInherit+0x88>
    3f04:	00800044 	movi	r2,1
    3f08:	00000106 	br	3f10 <vTaskPriorityInherit+0x8c>
    3f0c:	0005883a 	mov	r2,zero
    3f10:	10803fcc 	andi	r2,r2,255
    3f14:	10001b26 	beq	r2,zero,3f84 <vTaskPriorityInherit+0x100>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3f18:	e0bffe17 	ldw	r2,-8(fp)
    3f1c:	10800104 	addi	r2,r2,4
    3f20:	1009883a 	mov	r4,r2
    3f24:	00015fc0 	call	15fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f28:	d0a02297 	ldw	r2,-32630(gp)
    3f2c:	10c00b17 	ldw	r3,44(r2)
    3f30:	e0bffe17 	ldw	r2,-8(fp)
    3f34:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxTCB );
    3f38:	e0bffe17 	ldw	r2,-8(fp)
    3f3c:	10800b17 	ldw	r2,44(r2)
    3f40:	d0e02897 	ldw	r3,-32606(gp)
    3f44:	1880032e 	bgeu	r3,r2,3f54 <vTaskPriorityInherit+0xd0>
    3f48:	e0bffe17 	ldw	r2,-8(fp)
    3f4c:	10800b17 	ldw	r2,44(r2)
    3f50:	d0a02895 	stw	r2,-32606(gp)
    3f54:	e0bffe17 	ldw	r2,-8(fp)
    3f58:	10800b17 	ldw	r2,44(r2)
    3f5c:	10c00524 	muli	r3,r2,20
    3f60:	00820234 	movhi	r2,2056
    3f64:	10bf6d04 	addi	r2,r2,-588
    3f68:	1887883a 	add	r3,r3,r2
    3f6c:	e0bffe17 	ldw	r2,-8(fp)
    3f70:	10800104 	addi	r2,r2,4
    3f74:	100b883a 	mov	r5,r2
    3f78:	1809883a 	mov	r4,r3
    3f7c:	00014980 	call	1498 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3f80:	00000406 	br	3f94 <vTaskPriorityInherit+0x110>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f84:	d0a02297 	ldw	r2,-32630(gp)
    3f88:	10c00b17 	ldw	r3,44(r2)
    3f8c:	e0bffe17 	ldw	r2,-8(fp)
    3f90:	10c00b15 	stw	r3,44(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3f94:	0001883a 	nop
    3f98:	e037883a 	mov	sp,fp
    3f9c:	dfc00117 	ldw	ra,4(sp)
    3fa0:	df000017 	ldw	fp,0(sp)
    3fa4:	dec00204 	addi	sp,sp,8
    3fa8:	f800283a 	ret

00003fac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    3fac:	defffb04 	addi	sp,sp,-20
    3fb0:	dfc00415 	stw	ra,16(sp)
    3fb4:	df000315 	stw	fp,12(sp)
    3fb8:	df000304 	addi	fp,sp,12
    3fbc:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3fc0:	e0bfff17 	ldw	r2,-4(fp)
    3fc4:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
    3fc8:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
    3fcc:	e0bfff17 	ldw	r2,-4(fp)
    3fd0:	10002f26 	beq	r2,zero,4090 <xTaskPriorityDisinherit+0xe4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    3fd4:	e0bffe17 	ldw	r2,-8(fp)
    3fd8:	10801117 	ldw	r2,68(r2)
    3fdc:	10ffffc4 	addi	r3,r2,-1
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	10c01115 	stw	r3,68(r2)

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3fe8:	e0bffe17 	ldw	r2,-8(fp)
    3fec:	10c00b17 	ldw	r3,44(r2)
    3ff0:	e0bffe17 	ldw	r2,-8(fp)
    3ff4:	10801017 	ldw	r2,64(r2)
    3ff8:	18802526 	beq	r3,r2,4090 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3ffc:	e0bffe17 	ldw	r2,-8(fp)
    4000:	10801117 	ldw	r2,68(r2)
    4004:	1000221e 	bne	r2,zero,4090 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inhertied priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4008:	e0bffe17 	ldw	r2,-8(fp)
    400c:	10800104 	addi	r2,r2,4
    4010:	1009883a 	mov	r4,r2
    4014:	00015fc0 	call	15fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4018:	e0bffe17 	ldw	r2,-8(fp)
    401c:	10c01017 	ldw	r3,64(r2)
    4020:	e0bffe17 	ldw	r2,-8(fp)
    4024:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4028:	e0bffe17 	ldw	r2,-8(fp)
    402c:	10800b17 	ldw	r2,44(r2)
    4030:	00c00304 	movi	r3,12
    4034:	1887c83a 	sub	r3,r3,r2
    4038:	e0bffe17 	ldw	r2,-8(fp)
    403c:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
    4040:	e0bffe17 	ldw	r2,-8(fp)
    4044:	10800b17 	ldw	r2,44(r2)
    4048:	d0e02897 	ldw	r3,-32606(gp)
    404c:	1880032e 	bgeu	r3,r2,405c <xTaskPriorityDisinherit+0xb0>
    4050:	e0bffe17 	ldw	r2,-8(fp)
    4054:	10800b17 	ldw	r2,44(r2)
    4058:	d0a02895 	stw	r2,-32606(gp)
    405c:	e0bffe17 	ldw	r2,-8(fp)
    4060:	10800b17 	ldw	r2,44(r2)
    4064:	10c00524 	muli	r3,r2,20
    4068:	00820234 	movhi	r2,2056
    406c:	10bf6d04 	addi	r2,r2,-588
    4070:	1887883a 	add	r3,r3,r2
    4074:	e0bffe17 	ldw	r2,-8(fp)
    4078:	10800104 	addi	r2,r2,4
    407c:	100b883a 	mov	r5,r2
    4080:	1809883a 	mov	r4,r3
    4084:	00014980 	call	1498 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4088:	00800044 	movi	r2,1
    408c:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4090:	e0bffd17 	ldw	r2,-12(fp)
	}
    4094:	e037883a 	mov	sp,fp
    4098:	dfc00117 	ldw	ra,4(sp)
    409c:	df000017 	ldw	fp,0(sp)
    40a0:	dec00204 	addi	sp,sp,8
    40a4:	f800283a 	ret

000040a8 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
    40a8:	defffe04 	addi	sp,sp,-8
    40ac:	df000115 	stw	fp,4(sp)
    40b0:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    40b4:	0005303a 	rdctl	r2,status
    40b8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    40bc:	e0ffff17 	ldw	r3,-4(fp)
    40c0:	00bfff84 	movi	r2,-2
    40c4:	1884703a 	and	r2,r3,r2
    40c8:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    40cc:	d0a02997 	ldw	r2,-32602(gp)
    40d0:	10000526 	beq	r2,zero,40e8 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    40d4:	d0a02297 	ldw	r2,-32630(gp)
    40d8:	10c00f17 	ldw	r3,60(r2)
    40dc:	18c00044 	addi	r3,r3,1
    40e0:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    40e4:	d0a02297 	ldw	r2,-32630(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    40e8:	0001883a 	nop
    40ec:	e037883a 	mov	sp,fp
    40f0:	df000017 	ldw	fp,0(sp)
    40f4:	dec00104 	addi	sp,sp,4
    40f8:	f800283a 	ret

000040fc <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	df000115 	stw	fp,4(sp)
    4104:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
    4108:	d0a02997 	ldw	r2,-32602(gp)
    410c:	10000e26 	beq	r2,zero,4148 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    4110:	d0a02297 	ldw	r2,-32630(gp)
    4114:	10800f17 	ldw	r2,60(r2)
    4118:	10000b26 	beq	r2,zero,4148 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    411c:	d0a02297 	ldw	r2,-32630(gp)
    4120:	10c00f17 	ldw	r3,60(r2)
    4124:	18ffffc4 	addi	r3,r3,-1
    4128:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    412c:	d0a02297 	ldw	r2,-32630(gp)
    4130:	10800f17 	ldw	r2,60(r2)
    4134:	1000041e 	bne	r2,zero,4148 <vTaskExitCritical+0x4c>
    4138:	00800044 	movi	r2,1
    413c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4140:	e0bfff17 	ldw	r2,-4(fp)
    4144:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4148:	0001883a 	nop
    414c:	e037883a 	mov	sp,fp
    4150:	df000017 	ldw	fp,0(sp)
    4154:	dec00104 	addi	sp,sp,4
    4158:	f800283a 	ret

0000415c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    415c:	defffe04 	addi	sp,sp,-8
    4160:	df000115 	stw	fp,4(sp)
    4164:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4168:	d0a02297 	ldw	r2,-32630(gp)
    416c:	10800617 	ldw	r2,24(r2)
    4170:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4174:	d0a02297 	ldw	r2,-32630(gp)
    4178:	d0e02297 	ldw	r3,-32630(gp)
    417c:	18c00b17 	ldw	r3,44(r3)
    4180:	01000304 	movi	r4,12
    4184:	20c7c83a 	sub	r3,r4,r3
    4188:	10c00615 	stw	r3,24(r2)

	return uxReturn;
    418c:	e0bfff17 	ldw	r2,-4(fp)
}
    4190:	e037883a 	mov	sp,fp
    4194:	df000017 	ldw	fp,0(sp)
    4198:	dec00104 	addi	sp,sp,4
    419c:	f800283a 	ret

000041a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    41a0:	deffff04 	addi	sp,sp,-4
    41a4:	df000015 	stw	fp,0(sp)
    41a8:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    41ac:	d0a02297 	ldw	r2,-32630(gp)
    41b0:	10000426 	beq	r2,zero,41c4 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    41b4:	d0a02297 	ldw	r2,-32630(gp)
    41b8:	10c01117 	ldw	r3,68(r2)
    41bc:	18c00044 	addi	r3,r3,1
    41c0:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
    41c4:	d0a02297 	ldw	r2,-32630(gp)
	}
    41c8:	e037883a 	mov	sp,fp
    41cc:	df000017 	ldw	fp,0(sp)
    41d0:	dec00104 	addi	sp,sp,4
    41d4:	f800283a 	ret

000041d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    41d8:	defffa04 	addi	sp,sp,-24
    41dc:	dfc00515 	stw	ra,20(sp)
    41e0:	df000415 	stw	fp,16(sp)
    41e4:	df000404 	addi	fp,sp,16
    41e8:	e13ffe15 	stw	r4,-8(fp)
    41ec:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    41f0:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    41f4:	d0a02297 	ldw	r2,-32630(gp)
    41f8:	10801217 	ldw	r2,72(r2)
    41fc:	1000101e 	bne	r2,zero,4240 <ulTaskNotifyTake+0x68>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    4200:	d0a02297 	ldw	r2,-32630(gp)
    4204:	00c00044 	movi	r3,1
    4208:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	10000b26 	beq	r2,zero,4240 <ulTaskNotifyTake+0x68>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4214:	d0a02297 	ldw	r2,-32630(gp)
    4218:	10800104 	addi	r2,r2,4
    421c:	1009883a 	mov	r4,r2
    4220:	00015fc0 	call	15fc <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4224:	d0e02797 	ldw	r3,-32610(gp)
    4228:	e0bfff17 	ldw	r2,-4(fp)
    422c:	1885883a 	add	r2,r3,r2
    4230:	e0bffc15 	stw	r2,-16(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    4234:	e13ffc17 	ldw	r4,-16(fp)
    4238:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    423c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4240:	00040fc0 	call	40fc <vTaskExitCritical>

		taskENTER_CRITICAL();
    4244:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4248:	d0a02297 	ldw	r2,-32630(gp)
    424c:	10801217 	ldw	r2,72(r2)
    4250:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
    4254:	e0bffd17 	ldw	r2,-12(fp)
    4258:	10000926 	beq	r2,zero,4280 <ulTaskNotifyTake+0xa8>
			{
				if( xClearCountOnExit != pdFALSE )
    425c:	e0bffe17 	ldw	r2,-8(fp)
    4260:	10000326 	beq	r2,zero,4270 <ulTaskNotifyTake+0x98>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    4264:	d0a02297 	ldw	r2,-32630(gp)
    4268:	10001215 	stw	zero,72(r2)
    426c:	00000406 	br	4280 <ulTaskNotifyTake+0xa8>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    4270:	d0a02297 	ldw	r2,-32630(gp)
    4274:	10c01217 	ldw	r3,72(r2)
    4278:	18ffffc4 	addi	r3,r3,-1
    427c:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4280:	d0a02297 	ldw	r2,-32630(gp)
    4284:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4288:	00040fc0 	call	40fc <vTaskExitCritical>

		return ulReturn;
    428c:	e0bffd17 	ldw	r2,-12(fp)
	}
    4290:	e037883a 	mov	sp,fp
    4294:	dfc00117 	ldw	ra,4(sp)
    4298:	df000017 	ldw	fp,0(sp)
    429c:	dec00204 	addi	sp,sp,8
    42a0:	f800283a 	ret

000042a4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    42a4:	defff804 	addi	sp,sp,-32
    42a8:	dfc00715 	stw	ra,28(sp)
    42ac:	df000615 	stw	fp,24(sp)
    42b0:	df000604 	addi	fp,sp,24
    42b4:	e13ffc15 	stw	r4,-16(fp)
    42b8:	e17ffd15 	stw	r5,-12(fp)
    42bc:	e1bffe15 	stw	r6,-8(fp)
    42c0:	e1ffff15 	stw	r7,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    42c4:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    42c8:	d0a02297 	ldw	r2,-32630(gp)
    42cc:	10801317 	ldw	r2,76(r2)
    42d0:	108000a0 	cmpeqi	r2,r2,2
    42d4:	1000161e 	bne	r2,zero,4330 <xTaskNotifyWait+0x8c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    42d8:	d0a02297 	ldw	r2,-32630(gp)
    42dc:	11001217 	ldw	r4,72(r2)
    42e0:	e0fffc17 	ldw	r3,-16(fp)
    42e4:	00c6303a 	nor	r3,zero,r3
    42e8:	20c6703a 	and	r3,r4,r3
    42ec:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    42f0:	d0a02297 	ldw	r2,-32630(gp)
    42f4:	00c00044 	movi	r3,1
    42f8:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	10000b26 	beq	r2,zero,4330 <xTaskNotifyWait+0x8c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4304:	d0a02297 	ldw	r2,-32630(gp)
    4308:	10800104 	addi	r2,r2,4
    430c:	1009883a 	mov	r4,r2
    4310:	00015fc0 	call	15fc <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4314:	d0e02797 	ldw	r3,-32610(gp)
    4318:	e0bfff17 	ldw	r2,-4(fp)
    431c:	1885883a 	add	r2,r3,r2
    4320:	e0bffb15 	stw	r2,-20(fp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    4324:	e13ffb17 	ldw	r4,-20(fp)
    4328:	0003b500 	call	3b50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    432c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4330:	00040fc0 	call	40fc <vTaskExitCritical>

		taskENTER_CRITICAL();
    4334:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			if( pulNotificationValue != NULL )
    4338:	e0bffe17 	ldw	r2,-8(fp)
    433c:	10000426 	beq	r2,zero,4350 <xTaskNotifyWait+0xac>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4340:	d0a02297 	ldw	r2,-32630(gp)
    4344:	10c01217 	ldw	r3,72(r2)
    4348:	e0bffe17 	ldw	r2,-8(fp)
    434c:	10c00015 	stw	r3,0(r2)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    4350:	d0a02297 	ldw	r2,-32630(gp)
    4354:	10801317 	ldw	r2,76(r2)
    4358:	10800058 	cmpnei	r2,r2,1
    435c:	1000021e 	bne	r2,zero,4368 <xTaskNotifyWait+0xc4>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    4360:	e03ffa15 	stw	zero,-24(fp)
    4364:	00000806 	br	4388 <xTaskNotifyWait+0xe4>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4368:	d0a02297 	ldw	r2,-32630(gp)
    436c:	11001217 	ldw	r4,72(r2)
    4370:	e0fffd17 	ldw	r3,-12(fp)
    4374:	00c6303a 	nor	r3,zero,r3
    4378:	20c6703a 	and	r3,r4,r3
    437c:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
    4380:	00800044 	movi	r2,1
    4384:	e0bffa15 	stw	r2,-24(fp)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    4388:	d0a02297 	ldw	r2,-32630(gp)
    438c:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    4390:	00040fc0 	call	40fc <vTaskExitCritical>

		return xReturn;
    4394:	e0bffa17 	ldw	r2,-24(fp)
	}
    4398:	e037883a 	mov	sp,fp
    439c:	dfc00117 	ldw	ra,4(sp)
    43a0:	df000017 	ldw	fp,0(sp)
    43a4:	dec00204 	addi	sp,sp,8
    43a8:	f800283a 	ret

000043ac <xTaskNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction )
	{
    43ac:	defff804 	addi	sp,sp,-32
    43b0:	dfc00715 	stw	ra,28(sp)
    43b4:	df000615 	stw	fp,24(sp)
    43b8:	df000604 	addi	fp,sp,24
    43bc:	e13ffd15 	stw	r4,-12(fp)
    43c0:	e17ffe15 	stw	r5,-8(fp)
    43c4:	e1bfff15 	stw	r6,-4(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    43c8:	00800044 	movi	r2,1
    43cc:	e0bffa15 	stw	r2,-24(fp)

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    43d0:	e0bffd17 	ldw	r2,-12(fp)
    43d4:	e0bffb15 	stw	r2,-20(fp)

		taskENTER_CRITICAL();
    43d8:	00040a80 	call	40a8 <vTaskEnterCritical>
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    43dc:	e0bffb17 	ldw	r2,-20(fp)
    43e0:	10801317 	ldw	r2,76(r2)
    43e4:	e0bffc15 	stw	r2,-16(fp)

			pxTCB->eNotifyState = eNotified;
    43e8:	e0bffb17 	ldw	r2,-20(fp)
    43ec:	00c00084 	movi	r3,2
    43f0:	10c01315 	stw	r3,76(r2)

			switch( eAction )
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	10800168 	cmpgeui	r2,r2,5
    43fc:	1000271e 	bne	r2,zero,449c <xTaskNotify+0xf0>
    4400:	e0bfff17 	ldw	r2,-4(fp)
    4404:	100690ba 	slli	r3,r2,2
    4408:	00800034 	movhi	r2,0
    440c:	10910704 	addi	r2,r2,17436
    4410:	1885883a 	add	r2,r3,r2
    4414:	10800017 	ldw	r2,0(r2)
    4418:	1000683a 	jmp	r2
    441c:	00004498 	cmpnei	zero,zero,274
    4420:	00004430 	cmpltui	zero,zero,272
    4424:	0000444c 	andi	zero,zero,273
    4428:	00004464 	muli	zero,zero,273
    442c:	00004474 	movhi	zero,273
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4430:	e0bffb17 	ldw	r2,-20(fp)
    4434:	10c01217 	ldw	r3,72(r2)
    4438:	e0bffe17 	ldw	r2,-8(fp)
    443c:	1886b03a 	or	r3,r3,r2
    4440:	e0bffb17 	ldw	r2,-20(fp)
    4444:	10c01215 	stw	r3,72(r2)
					break;
    4448:	00001406 	br	449c <xTaskNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    444c:	e0bffb17 	ldw	r2,-20(fp)
    4450:	10801217 	ldw	r2,72(r2)
    4454:	10c00044 	addi	r3,r2,1
    4458:	e0bffb17 	ldw	r2,-20(fp)
    445c:	10c01215 	stw	r3,72(r2)
					break;
    4460:	00000e06 	br	449c <xTaskNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4464:	e0bffb17 	ldw	r2,-20(fp)
    4468:	e0fffe17 	ldw	r3,-8(fp)
    446c:	10c01215 	stw	r3,72(r2)
					break;
    4470:	00000a06 	br	449c <xTaskNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4474:	e0bffc17 	ldw	r2,-16(fp)
    4478:	108000a0 	cmpeqi	r2,r2,2
    447c:	1000041e 	bne	r2,zero,4490 <xTaskNotify+0xe4>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4480:	e0bffb17 	ldw	r2,-20(fp)
    4484:	e0fffe17 	ldw	r3,-8(fp)
    4488:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    448c:	00000306 	br	449c <xTaskNotify+0xf0>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4490:	e03ffa15 	stw	zero,-24(fp)
					}
					break;
    4494:	00000106 	br	449c <xTaskNotify+0xf0>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
    4498:	0001883a 	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    449c:	e0bffc17 	ldw	r2,-16(fp)
    44a0:	10800058 	cmpnei	r2,r2,1
    44a4:	10001c1e 	bne	r2,zero,4518 <xTaskNotify+0x16c>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    44a8:	e0bffb17 	ldw	r2,-20(fp)
    44ac:	10800104 	addi	r2,r2,4
    44b0:	1009883a 	mov	r4,r2
    44b4:	00015fc0 	call	15fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    44b8:	e0bffb17 	ldw	r2,-20(fp)
    44bc:	10800b17 	ldw	r2,44(r2)
    44c0:	d0e02897 	ldw	r3,-32606(gp)
    44c4:	1880032e 	bgeu	r3,r2,44d4 <xTaskNotify+0x128>
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10800b17 	ldw	r2,44(r2)
    44d0:	d0a02895 	stw	r2,-32606(gp)
    44d4:	e0bffb17 	ldw	r2,-20(fp)
    44d8:	10800b17 	ldw	r2,44(r2)
    44dc:	10c00524 	muli	r3,r2,20
    44e0:	00820234 	movhi	r2,2056
    44e4:	10bf6d04 	addi	r2,r2,-588
    44e8:	1887883a 	add	r3,r3,r2
    44ec:	e0bffb17 	ldw	r2,-20(fp)
    44f0:	10800104 	addi	r2,r2,4
    44f4:	100b883a 	mov	r5,r2
    44f8:	1809883a 	mov	r4,r3
    44fc:	00014980 	call	1498 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4500:	e0bffb17 	ldw	r2,-20(fp)
    4504:	10800b17 	ldw	r2,44(r2)
    4508:	d0e02297 	ldw	r3,-32630(gp)
    450c:	18c00b17 	ldw	r3,44(r3)
    4510:	1880012e 	bgeu	r3,r2,4518 <xTaskNotify+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					portYIELD_WITHIN_API();
    4514:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4518:	00040fc0 	call	40fc <vTaskExitCritical>

		return xReturn;
    451c:	e0bffa17 	ldw	r2,-24(fp)
	}
    4520:	e037883a 	mov	sp,fp
    4524:	dfc00117 	ldw	ra,4(sp)
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00204 	addi	sp,sp,8
    4530:	f800283a 	ret

00004534 <xTaskNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4534:	defff604 	addi	sp,sp,-40
    4538:	dfc00915 	stw	ra,36(sp)
    453c:	df000815 	stw	fp,32(sp)
    4540:	df000804 	addi	fp,sp,32
    4544:	e13ffc15 	stw	r4,-16(fp)
    4548:	e17ffd15 	stw	r5,-12(fp)
    454c:	e1bffe15 	stw	r6,-8(fp)
    4550:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4554:	00800044 	movi	r2,1
    4558:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    455c:	e0bffc17 	ldw	r2,-16(fp)
    4560:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4564:	e03ffa15 	stw	zero,-24(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4568:	e0bff917 	ldw	r2,-28(fp)
    456c:	10801317 	ldw	r2,76(r2)
    4570:	e0bffb15 	stw	r2,-20(fp)

			pxTCB->eNotifyState = eNotified;
    4574:	e0bff917 	ldw	r2,-28(fp)
    4578:	00c00084 	movi	r3,2
    457c:	10c01315 	stw	r3,76(r2)

			switch( eAction )
    4580:	e0bffe17 	ldw	r2,-8(fp)
    4584:	10800168 	cmpgeui	r2,r2,5
    4588:	1000271e 	bne	r2,zero,4628 <xTaskNotifyFromISR+0xf4>
    458c:	e0bffe17 	ldw	r2,-8(fp)
    4590:	100690ba 	slli	r3,r2,2
    4594:	00800034 	movhi	r2,0
    4598:	10916a04 	addi	r2,r2,17832
    459c:	1885883a 	add	r2,r3,r2
    45a0:	10800017 	ldw	r2,0(r2)
    45a4:	1000683a 	jmp	r2
    45a8:	00004624 	muli	zero,zero,280
    45ac:	000045bc 	xorhi	zero,zero,278
    45b0:	000045d8 	cmpnei	zero,zero,279
    45b4:	000045f0 	cmpltui	zero,zero,279
    45b8:	00004600 	call	460 <vCoRoutineAddToDelayedList+0x80>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    45bc:	e0bff917 	ldw	r2,-28(fp)
    45c0:	10c01217 	ldw	r3,72(r2)
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	1886b03a 	or	r3,r3,r2
    45cc:	e0bff917 	ldw	r2,-28(fp)
    45d0:	10c01215 	stw	r3,72(r2)
					break;
    45d4:	00001406 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    45d8:	e0bff917 	ldw	r2,-28(fp)
    45dc:	10801217 	ldw	r2,72(r2)
    45e0:	10c00044 	addi	r3,r2,1
    45e4:	e0bff917 	ldw	r2,-28(fp)
    45e8:	10c01215 	stw	r3,72(r2)
					break;
    45ec:	00000e06 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    45f0:	e0bff917 	ldw	r2,-28(fp)
    45f4:	e0fffd17 	ldw	r3,-12(fp)
    45f8:	10c01215 	stw	r3,72(r2)
					break;
    45fc:	00000a06 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    4600:	e0bffb17 	ldw	r2,-20(fp)
    4604:	108000a0 	cmpeqi	r2,r2,2
    4608:	1000041e 	bne	r2,zero,461c <xTaskNotifyFromISR+0xe8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    460c:	e0bff917 	ldw	r2,-28(fp)
    4610:	e0fffd17 	ldw	r3,-12(fp)
    4614:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    4618:	00000306 	br	4628 <xTaskNotifyFromISR+0xf4>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    461c:	e03ff815 	stw	zero,-32(fp)
					}
					break;
    4620:	00000106 	br	4628 <xTaskNotifyFromISR+0xf4>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
    4624:	0001883a 	nop
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    4628:	e0bffb17 	ldw	r2,-20(fp)
    462c:	10800058 	cmpnei	r2,r2,1
    4630:	1000291e 	bne	r2,zero,46d8 <xTaskNotifyFromISR+0x1a4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4634:	d0a02e97 	ldw	r2,-32582(gp)
    4638:	1000171e 	bne	r2,zero,4698 <xTaskNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    463c:	e0bff917 	ldw	r2,-28(fp)
    4640:	10800104 	addi	r2,r2,4
    4644:	1009883a 	mov	r4,r2
    4648:	00015fc0 	call	15fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    464c:	e0bff917 	ldw	r2,-28(fp)
    4650:	10800b17 	ldw	r2,44(r2)
    4654:	d0e02897 	ldw	r3,-32606(gp)
    4658:	1880032e 	bgeu	r3,r2,4668 <xTaskNotifyFromISR+0x134>
    465c:	e0bff917 	ldw	r2,-28(fp)
    4660:	10800b17 	ldw	r2,44(r2)
    4664:	d0a02895 	stw	r2,-32606(gp)
    4668:	e0bff917 	ldw	r2,-28(fp)
    466c:	10800b17 	ldw	r2,44(r2)
    4670:	10c00524 	muli	r3,r2,20
    4674:	00820234 	movhi	r2,2056
    4678:	10bf6d04 	addi	r2,r2,-588
    467c:	1887883a 	add	r3,r3,r2
    4680:	e0bff917 	ldw	r2,-28(fp)
    4684:	10800104 	addi	r2,r2,4
    4688:	100b883a 	mov	r5,r2
    468c:	1809883a 	mov	r4,r3
    4690:	00014980 	call	1498 <vListInsertEnd>
    4694:	00000606 	br	46b0 <xTaskNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4698:	e0bff917 	ldw	r2,-28(fp)
    469c:	10800604 	addi	r2,r2,24
    46a0:	100b883a 	mov	r5,r2
    46a4:	01020234 	movhi	r4,2056
    46a8:	213fb304 	addi	r4,r4,-308
    46ac:	00014980 	call	1498 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    46b0:	e0bff917 	ldw	r2,-28(fp)
    46b4:	10800b17 	ldw	r2,44(r2)
    46b8:	d0e02297 	ldw	r3,-32630(gp)
    46bc:	18c00b17 	ldw	r3,44(r3)
    46c0:	1880052e 	bgeu	r3,r2,46d8 <xTaskNotifyFromISR+0x1a4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    46c4:	e0bfff17 	ldw	r2,-4(fp)
    46c8:	10000326 	beq	r2,zero,46d8 <xTaskNotifyFromISR+0x1a4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    46cc:	e0bfff17 	ldw	r2,-4(fp)
    46d0:	00c00044 	movi	r3,1
    46d4:	10c00015 	stw	r3,0(r2)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    46d8:	e0bff817 	ldw	r2,-32(fp)
	}
    46dc:	e037883a 	mov	sp,fp
    46e0:	dfc00117 	ldw	ra,4(sp)
    46e4:	df000017 	ldw	fp,0(sp)
    46e8:	dec00204 	addi	sp,sp,8
    46ec:	f800283a 	ret

000046f0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    46f0:	defff904 	addi	sp,sp,-28
    46f4:	dfc00615 	stw	ra,24(sp)
    46f8:	df000515 	stw	fp,20(sp)
    46fc:	df000504 	addi	fp,sp,20
    4700:	e13ffe15 	stw	r4,-8(fp)
    4704:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4708:	e0bffe17 	ldw	r2,-8(fp)
    470c:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4710:	e03ffc15 	stw	zero,-16(fp)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    4714:	e0bffb17 	ldw	r2,-20(fp)
    4718:	10801317 	ldw	r2,76(r2)
    471c:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->eNotifyState = eNotified;
    4720:	e0bffb17 	ldw	r2,-20(fp)
    4724:	00c00084 	movi	r3,2
    4728:	10c01315 	stw	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    472c:	e0bffb17 	ldw	r2,-20(fp)
    4730:	10801217 	ldw	r2,72(r2)
    4734:	10c00044 	addi	r3,r2,1
    4738:	e0bffb17 	ldw	r2,-20(fp)
    473c:	10c01215 	stw	r3,72(r2)

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    4740:	e0bffd17 	ldw	r2,-12(fp)
    4744:	10800058 	cmpnei	r2,r2,1
    4748:	1000291e 	bne	r2,zero,47f0 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    474c:	d0a02e97 	ldw	r2,-32582(gp)
    4750:	1000171e 	bne	r2,zero,47b0 <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4754:	e0bffb17 	ldw	r2,-20(fp)
    4758:	10800104 	addi	r2,r2,4
    475c:	1009883a 	mov	r4,r2
    4760:	00015fc0 	call	15fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4764:	e0bffb17 	ldw	r2,-20(fp)
    4768:	10800b17 	ldw	r2,44(r2)
    476c:	d0e02897 	ldw	r3,-32606(gp)
    4770:	1880032e 	bgeu	r3,r2,4780 <vTaskNotifyGiveFromISR+0x90>
    4774:	e0bffb17 	ldw	r2,-20(fp)
    4778:	10800b17 	ldw	r2,44(r2)
    477c:	d0a02895 	stw	r2,-32606(gp)
    4780:	e0bffb17 	ldw	r2,-20(fp)
    4784:	10800b17 	ldw	r2,44(r2)
    4788:	10c00524 	muli	r3,r2,20
    478c:	00820234 	movhi	r2,2056
    4790:	10bf6d04 	addi	r2,r2,-588
    4794:	1887883a 	add	r3,r3,r2
    4798:	e0bffb17 	ldw	r2,-20(fp)
    479c:	10800104 	addi	r2,r2,4
    47a0:	100b883a 	mov	r5,r2
    47a4:	1809883a 	mov	r4,r3
    47a8:	00014980 	call	1498 <vListInsertEnd>
    47ac:	00000606 	br	47c8 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    47b0:	e0bffb17 	ldw	r2,-20(fp)
    47b4:	10800604 	addi	r2,r2,24
    47b8:	100b883a 	mov	r5,r2
    47bc:	01020234 	movhi	r4,2056
    47c0:	213fb304 	addi	r4,r4,-308
    47c4:	00014980 	call	1498 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    47c8:	e0bffb17 	ldw	r2,-20(fp)
    47cc:	10800b17 	ldw	r2,44(r2)
    47d0:	d0e02297 	ldw	r3,-32630(gp)
    47d4:	18c00b17 	ldw	r3,44(r3)
    47d8:	1880052e 	bgeu	r3,r2,47f0 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    47dc:	e0bfff17 	ldw	r2,-4(fp)
    47e0:	10000326 	beq	r2,zero,47f0 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    47e4:	e0bfff17 	ldw	r2,-4(fp)
    47e8:	00c00044 	movi	r3,1
    47ec:	10c00015 	stw	r3,0(r2)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    47f0:	0001883a 	nop
    47f4:	e037883a 	mov	sp,fp
    47f8:	dfc00117 	ldw	ra,4(sp)
    47fc:	df000017 	ldw	fp,0(sp)
    4800:	dec00204 	addi	sp,sp,8
    4804:	f800283a 	ret

00004808 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    4808:	defff904 	addi	sp,sp,-28
    480c:	dfc00615 	stw	ra,24(sp)
    4810:	df000515 	stw	fp,20(sp)
    4814:	df000504 	addi	fp,sp,20
BaseType_t xReturn = pdFAIL;
    4818:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    481c:	00050080 	call	5008 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    4820:	d0a03197 	ldw	r2,-32570(gp)
    4824:	10000d26 	beq	r2,zero,485c <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    4828:	d8000315 	stw	zero,12(sp)
    482c:	d8000215 	stw	zero,8(sp)
    4830:	d8000115 	stw	zero,4(sp)
    4834:	008000c4 	movi	r2,3
    4838:	d8800015 	stw	r2,0(sp)
    483c:	000f883a 	mov	r7,zero
    4840:	01820004 	movi	r6,2048
    4844:	01420034 	movhi	r5,2048
    4848:	29401404 	addi	r5,r5,80
    484c:	01000034 	movhi	r4,0
    4850:	2112b904 	addi	r4,r4,19172
    4854:	0002b780 	call	2b78 <xTaskGenericCreate>
    4858:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
    485c:	e0bfff17 	ldw	r2,-4(fp)
}
    4860:	e037883a 	mov	sp,fp
    4864:	dfc00117 	ldw	ra,4(sp)
    4868:	df000017 	ldw	fp,0(sp)
    486c:	dec00204 	addi	sp,sp,8
    4870:	f800283a 	ret

00004874 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    4874:	defff904 	addi	sp,sp,-28
    4878:	dfc00615 	stw	ra,24(sp)
    487c:	df000515 	stw	fp,20(sp)
    4880:	df000504 	addi	fp,sp,20
    4884:	e13ffc15 	stw	r4,-16(fp)
    4888:	e17ffd15 	stw	r5,-12(fp)
    488c:	e1bffe15 	stw	r6,-8(fp)
    4890:	e1ffff15 	stw	r7,-4(fp)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    4894:	e0bffd17 	ldw	r2,-12(fp)
    4898:	1000021e 	bne	r2,zero,48a4 <xTimerCreate+0x30>
	{
		pxNewTimer = NULL;
    489c:	e03ffb15 	stw	zero,-20(fp)
    48a0:	00001906 	br	4908 <xTimerCreate+0x94>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    48a4:	01000a04 	movi	r4,40
    48a8:	0000fd00 	call	fd0 <pvPortMalloc>
    48ac:	e0bffb15 	stw	r2,-20(fp)
		if( pxNewTimer != NULL )
    48b0:	e0bffb17 	ldw	r2,-20(fp)
    48b4:	10001426 	beq	r2,zero,4908 <xTimerCreate+0x94>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    48b8:	00050080 	call	5008 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    48bc:	e0bffb17 	ldw	r2,-20(fp)
    48c0:	e0fffc17 	ldw	r3,-16(fp)
    48c4:	10c00015 	stw	r3,0(r2)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    48c8:	e0bffb17 	ldw	r2,-20(fp)
    48cc:	e0fffd17 	ldw	r3,-12(fp)
    48d0:	10c00615 	stw	r3,24(r2)
			pxNewTimer->uxAutoReload = uxAutoReload;
    48d4:	e0bffb17 	ldw	r2,-20(fp)
    48d8:	e0fffe17 	ldw	r3,-8(fp)
    48dc:	10c00715 	stw	r3,28(r2)
			pxNewTimer->pvTimerID = pvTimerID;
    48e0:	e0bffb17 	ldw	r2,-20(fp)
    48e4:	e0ffff17 	ldw	r3,-4(fp)
    48e8:	10c00815 	stw	r3,32(r2)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    48ec:	e0bffb17 	ldw	r2,-20(fp)
    48f0:	e0c00217 	ldw	r3,8(fp)
    48f4:	10c00915 	stw	r3,36(r2)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    48f8:	e0bffb17 	ldw	r2,-20(fp)
    48fc:	10800104 	addi	r2,r2,4
    4900:	1009883a 	mov	r4,r2
    4904:	000146c0 	call	146c <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
    4908:	e0bffb17 	ldw	r2,-20(fp)
}
    490c:	e037883a 	mov	sp,fp
    4910:	dfc00117 	ldw	ra,4(sp)
    4914:	df000017 	ldw	fp,0(sp)
    4918:	dec00204 	addi	sp,sp,8
    491c:	f800283a 	ret

00004920 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    4920:	defff604 	addi	sp,sp,-40
    4924:	dfc00915 	stw	ra,36(sp)
    4928:	df000815 	stw	fp,32(sp)
    492c:	df000804 	addi	fp,sp,32
    4930:	e13ffc15 	stw	r4,-16(fp)
    4934:	e17ffd15 	stw	r5,-12(fp)
    4938:	e1bffe15 	stw	r6,-8(fp)
    493c:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
    4940:	e03ff815 	stw	zero,-32(fp)
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    4944:	d0a03197 	ldw	r2,-32570(gp)
    4948:	10002626 	beq	r2,zero,49e4 <xTimerGenericCommand+0xc4>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    494c:	e0bffd17 	ldw	r2,-12(fp)
    4950:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4954:	e0bffe17 	ldw	r2,-8(fp)
    4958:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    495c:	e0bffc17 	ldw	r2,-16(fp)
    4960:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4964:	e0bffd17 	ldw	r2,-12(fp)
    4968:	10800188 	cmpgei	r2,r2,6
    496c:	1000151e 	bne	r2,zero,49c4 <xTimerGenericCommand+0xa4>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4970:	0003e380 	call	3e38 <xTaskGetSchedulerState>
    4974:	10800098 	cmpnei	r2,r2,2
    4978:	1000091e 	bne	r2,zero,49a0 <xTimerGenericCommand+0x80>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    497c:	d0a03197 	ldw	r2,-32570(gp)
    4980:	e0fff904 	addi	r3,fp,-28
    4984:	000f883a 	mov	r7,zero
    4988:	e1800217 	ldw	r6,8(fp)
    498c:	180b883a 	mov	r5,r3
    4990:	1009883a 	mov	r4,r2
    4994:	0001edc0 	call	1edc <xQueueGenericSend>
    4998:	e0bff815 	stw	r2,-32(fp)
    499c:	00001106 	br	49e4 <xTimerGenericCommand+0xc4>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    49a0:	d0a03197 	ldw	r2,-32570(gp)
    49a4:	e0fff904 	addi	r3,fp,-28
    49a8:	000f883a 	mov	r7,zero
    49ac:	000d883a 	mov	r6,zero
    49b0:	180b883a 	mov	r5,r3
    49b4:	1009883a 	mov	r4,r2
    49b8:	0001edc0 	call	1edc <xQueueGenericSend>
    49bc:	e0bff815 	stw	r2,-32(fp)
    49c0:	00000806 	br	49e4 <xTimerGenericCommand+0xc4>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    49c4:	d0a03197 	ldw	r2,-32570(gp)
    49c8:	e0fff904 	addi	r3,fp,-28
    49cc:	000f883a 	mov	r7,zero
    49d0:	e1bfff17 	ldw	r6,-4(fp)
    49d4:	180b883a 	mov	r5,r3
    49d8:	1009883a 	mov	r4,r2
    49dc:	000207c0 	call	207c <xQueueGenericSendFromISR>
    49e0:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    49e4:	e0bff817 	ldw	r2,-32(fp)
}
    49e8:	e037883a 	mov	sp,fp
    49ec:	dfc00117 	ldw	ra,4(sp)
    49f0:	df000017 	ldw	fp,0(sp)
    49f4:	dec00204 	addi	sp,sp,8
    49f8:	f800283a 	ret

000049fc <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
    49fc:	defffd04 	addi	sp,sp,-12
    4a00:	df000215 	stw	fp,8(sp)
    4a04:	df000204 	addi	fp,sp,8
    4a08:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    4a0c:	e0bfff17 	ldw	r2,-4(fp)
    4a10:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pcTimerName;
    4a14:	e0bffe17 	ldw	r2,-8(fp)
    4a18:	10800017 	ldw	r2,0(r2)
}
    4a1c:	e037883a 	mov	sp,fp
    4a20:	df000017 	ldw	fp,0(sp)
    4a24:	dec00104 	addi	sp,sp,4
    4a28:	f800283a 	ret

00004a2c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    4a2c:	defff904 	addi	sp,sp,-28
    4a30:	dfc00615 	stw	ra,24(sp)
    4a34:	df000515 	stw	fp,20(sp)
    4a38:	df000504 	addi	fp,sp,20
    4a3c:	e13ffe15 	stw	r4,-8(fp)
    4a40:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4a44:	d0a02f97 	ldw	r2,-32578(gp)
    4a48:	10800317 	ldw	r2,12(r2)
    4a4c:	10800317 	ldw	r2,12(r2)
    4a50:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4a54:	e0bffc17 	ldw	r2,-16(fp)
    4a58:	10800104 	addi	r2,r2,4
    4a5c:	1009883a 	mov	r4,r2
    4a60:	00015fc0 	call	15fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4a64:	e0bffc17 	ldw	r2,-16(fp)
    4a68:	10800717 	ldw	r2,28(r2)
    4a6c:	10800058 	cmpnei	r2,r2,1
    4a70:	1000121e 	bne	r2,zero,4abc <prvProcessExpiredTimer+0x90>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    4a74:	e0bffc17 	ldw	r2,-16(fp)
    4a78:	10c00617 	ldw	r3,24(r2)
    4a7c:	e0bffe17 	ldw	r2,-8(fp)
    4a80:	1885883a 	add	r2,r3,r2
    4a84:	e1fffe17 	ldw	r7,-8(fp)
    4a88:	e1bfff17 	ldw	r6,-4(fp)
    4a8c:	100b883a 	mov	r5,r2
    4a90:	e13ffc17 	ldw	r4,-16(fp)
    4a94:	0004c840 	call	4c84 <prvInsertTimerInActiveList>
    4a98:	10800058 	cmpnei	r2,r2,1
    4a9c:	1000071e 	bne	r2,zero,4abc <prvProcessExpiredTimer+0x90>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4aa0:	d8000015 	stw	zero,0(sp)
    4aa4:	000f883a 	mov	r7,zero
    4aa8:	e1bffe17 	ldw	r6,-8(fp)
    4aac:	000b883a 	mov	r5,zero
    4ab0:	e13ffc17 	ldw	r4,-16(fp)
    4ab4:	00049200 	call	4920 <xTimerGenericCommand>
    4ab8:	e0bffd15 	stw	r2,-12(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4abc:	e0bffc17 	ldw	r2,-16(fp)
    4ac0:	10800917 	ldw	r2,36(r2)
    4ac4:	e13ffc17 	ldw	r4,-16(fp)
    4ac8:	103ee83a 	callr	r2
}
    4acc:	0001883a 	nop
    4ad0:	e037883a 	mov	sp,fp
    4ad4:	dfc00117 	ldw	ra,4(sp)
    4ad8:	df000017 	ldw	fp,0(sp)
    4adc:	dec00204 	addi	sp,sp,8
    4ae0:	f800283a 	ret

00004ae4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4ae4:	defffb04 	addi	sp,sp,-20
    4ae8:	dfc00415 	stw	ra,16(sp)
    4aec:	df000315 	stw	fp,12(sp)
    4af0:	df000304 	addi	fp,sp,12
    4af4:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    4af8:	e0bffe04 	addi	r2,fp,-8
    4afc:	1009883a 	mov	r4,r2
    4b00:	0004bc00 	call	4bc0 <prvGetNextExpireTime>
    4b04:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    4b08:	e0bffe17 	ldw	r2,-8(fp)
    4b0c:	100b883a 	mov	r5,r2
    4b10:	e13ffd17 	ldw	r4,-12(fp)
    4b14:	0004b200 	call	4b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    4b18:	0004d600 	call	4d60 <prvProcessReceivedCommands>
	}
    4b1c:	003ff606 	br	4af8 <__alt_data_end+0xf0004af8>

00004b20 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    4b20:	defffa04 	addi	sp,sp,-24
    4b24:	dfc00515 	stw	ra,20(sp)
    4b28:	df000415 	stw	fp,16(sp)
    4b2c:	df000404 	addi	fp,sp,16
    4b30:	e13ffe15 	stw	r4,-8(fp)
    4b34:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    4b38:	0002f6c0 	call	2f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4b3c:	e0bffd04 	addi	r2,fp,-12
    4b40:	1009883a 	mov	r4,r2
    4b44:	0004c200 	call	4c20 <prvSampleTimeNow>
    4b48:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
    4b4c:	e0bffd17 	ldw	r2,-12(fp)
    4b50:	1000141e 	bne	r2,zero,4ba4 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4b54:	e0bfff17 	ldw	r2,-4(fp)
    4b58:	1000081e 	bne	r2,zero,4b7c <prvProcessTimerOrBlockTask+0x5c>
    4b5c:	e0bffe17 	ldw	r2,-8(fp)
    4b60:	e0fffc17 	ldw	r3,-16(fp)
    4b64:	18800536 	bltu	r3,r2,4b7c <prvProcessTimerOrBlockTask+0x5c>
			{
				( void ) xTaskResumeAll();
    4b68:	0002f980 	call	2f98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4b6c:	e17ffc17 	ldw	r5,-16(fp)
    4b70:	e13ffe17 	ldw	r4,-8(fp)
    4b74:	0004a2c0 	call	4a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    4b78:	00000b06 	br	4ba8 <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    4b7c:	d1203197 	ldw	r4,-32570(gp)
    4b80:	e0fffe17 	ldw	r3,-8(fp)
    4b84:	e0bffc17 	ldw	r2,-16(fp)
    4b88:	1885c83a 	sub	r2,r3,r2
    4b8c:	100b883a 	mov	r5,r2
    4b90:	0002ae00 	call	2ae0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    4b94:	0002f980 	call	2f98 <xTaskResumeAll>
    4b98:	1000031e 	bne	r2,zero,4ba8 <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    4b9c:	003b683a 	trap	0
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    4ba0:	00000106 	br	4ba8 <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    4ba4:	0002f980 	call	2f98 <xTaskResumeAll>
		}
	}
}
    4ba8:	0001883a 	nop
    4bac:	e037883a 	mov	sp,fp
    4bb0:	dfc00117 	ldw	ra,4(sp)
    4bb4:	df000017 	ldw	fp,0(sp)
    4bb8:	dec00204 	addi	sp,sp,8
    4bbc:	f800283a 	ret

00004bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    4bc0:	defffd04 	addi	sp,sp,-12
    4bc4:	df000215 	stw	fp,8(sp)
    4bc8:	df000204 	addi	fp,sp,8
    4bcc:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4bd0:	d0a02f97 	ldw	r2,-32578(gp)
    4bd4:	10800017 	ldw	r2,0(r2)
    4bd8:	1005003a 	cmpeq	r2,r2,zero
    4bdc:	10c03fcc 	andi	r3,r2,255
    4be0:	e0bfff17 	ldw	r2,-4(fp)
    4be4:	10c00015 	stw	r3,0(r2)
	if( *pxListWasEmpty == pdFALSE )
    4be8:	e0bfff17 	ldw	r2,-4(fp)
    4bec:	10800017 	ldw	r2,0(r2)
    4bf0:	1000051e 	bne	r2,zero,4c08 <prvGetNextExpireTime+0x48>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4bf4:	d0a02f97 	ldw	r2,-32578(gp)
    4bf8:	10800317 	ldw	r2,12(r2)
    4bfc:	10800017 	ldw	r2,0(r2)
    4c00:	e0bffe15 	stw	r2,-8(fp)
    4c04:	00000106 	br	4c0c <prvGetNextExpireTime+0x4c>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    4c08:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
    4c0c:	e0bffe17 	ldw	r2,-8(fp)
}
    4c10:	e037883a 	mov	sp,fp
    4c14:	df000017 	ldw	fp,0(sp)
    4c18:	dec00104 	addi	sp,sp,4
    4c1c:	f800283a 	ret

00004c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    4c20:	defffc04 	addi	sp,sp,-16
    4c24:	dfc00315 	stw	ra,12(sp)
    4c28:	df000215 	stw	fp,8(sp)
    4c2c:	df000204 	addi	fp,sp,8
    4c30:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    4c34:	00030dc0 	call	30dc <xTaskGetTickCount>
    4c38:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
    4c3c:	d0a03297 	ldw	r2,-32566(gp)
    4c40:	e0fffe17 	ldw	r3,-8(fp)
    4c44:	1880052e 	bgeu	r3,r2,4c5c <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
    4c48:	0004ef80 	call	4ef8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    4c4c:	e0bfff17 	ldw	r2,-4(fp)
    4c50:	00c00044 	movi	r3,1
    4c54:	10c00015 	stw	r3,0(r2)
    4c58:	00000206 	br	4c64 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4c5c:	e0bfff17 	ldw	r2,-4(fp)
    4c60:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
    4c64:	e0bffe17 	ldw	r2,-8(fp)
    4c68:	d0a03295 	stw	r2,-32566(gp)

	return xTimeNow;
    4c6c:	e0bffe17 	ldw	r2,-8(fp)
}
    4c70:	e037883a 	mov	sp,fp
    4c74:	dfc00117 	ldw	ra,4(sp)
    4c78:	df000017 	ldw	fp,0(sp)
    4c7c:	dec00204 	addi	sp,sp,8
    4c80:	f800283a 	ret

00004c84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4c84:	defff904 	addi	sp,sp,-28
    4c88:	dfc00615 	stw	ra,24(sp)
    4c8c:	df000515 	stw	fp,20(sp)
    4c90:	df000504 	addi	fp,sp,20
    4c94:	e13ffc15 	stw	r4,-16(fp)
    4c98:	e17ffd15 	stw	r5,-12(fp)
    4c9c:	e1bffe15 	stw	r6,-8(fp)
    4ca0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
    4ca4:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4ca8:	e0bffc17 	ldw	r2,-16(fp)
    4cac:	e0fffd17 	ldw	r3,-12(fp)
    4cb0:	10c00115 	stw	r3,4(r2)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4cb4:	e0bffc17 	ldw	r2,-16(fp)
    4cb8:	e0fffc17 	ldw	r3,-16(fp)
    4cbc:	10c00415 	stw	r3,16(r2)

	if( xNextExpiryTime <= xTimeNow )
    4cc0:	e0bffd17 	ldw	r2,-12(fp)
    4cc4:	e0fffe17 	ldw	r3,-8(fp)
    4cc8:	18801036 	bltu	r3,r2,4d0c <prvInsertTimerInActiveList+0x88>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    4ccc:	e0fffe17 	ldw	r3,-8(fp)
    4cd0:	e0bfff17 	ldw	r2,-4(fp)
    4cd4:	1887c83a 	sub	r3,r3,r2
    4cd8:	e0bffc17 	ldw	r2,-16(fp)
    4cdc:	10800617 	ldw	r2,24(r2)
    4ce0:	18800336 	bltu	r3,r2,4cf0 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4ce4:	00800044 	movi	r2,1
    4ce8:	e0bffb15 	stw	r2,-20(fp)
    4cec:	00001606 	br	4d48 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4cf0:	d0e03097 	ldw	r3,-32574(gp)
    4cf4:	e0bffc17 	ldw	r2,-16(fp)
    4cf8:	10800104 	addi	r2,r2,4
    4cfc:	100b883a 	mov	r5,r2
    4d00:	1809883a 	mov	r4,r3
    4d04:	00015240 	call	1524 <vListInsert>
    4d08:	00000f06 	br	4d48 <prvInsertTimerInActiveList+0xc4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d0c:	e0fffe17 	ldw	r3,-8(fp)
    4d10:	e0bfff17 	ldw	r2,-4(fp)
    4d14:	1880062e 	bgeu	r3,r2,4d30 <prvInsertTimerInActiveList+0xac>
    4d18:	e0fffd17 	ldw	r3,-12(fp)
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	18800336 	bltu	r3,r2,4d30 <prvInsertTimerInActiveList+0xac>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4d24:	00800044 	movi	r2,1
    4d28:	e0bffb15 	stw	r2,-20(fp)
    4d2c:	00000606 	br	4d48 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4d30:	d0e02f97 	ldw	r3,-32578(gp)
    4d34:	e0bffc17 	ldw	r2,-16(fp)
    4d38:	10800104 	addi	r2,r2,4
    4d3c:	100b883a 	mov	r5,r2
    4d40:	1809883a 	mov	r4,r3
    4d44:	00015240 	call	1524 <vListInsert>
		}
	}

	return xProcessTimerNow;
    4d48:	e0bffb17 	ldw	r2,-20(fp)
}
    4d4c:	e037883a 	mov	sp,fp
    4d50:	dfc00117 	ldw	ra,4(sp)
    4d54:	df000017 	ldw	fp,0(sp)
    4d58:	dec00204 	addi	sp,sp,8
    4d5c:	f800283a 	ret

00004d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    4d60:	defff604 	addi	sp,sp,-40
    4d64:	dfc00915 	stw	ra,36(sp)
    4d68:	df000815 	stw	fp,32(sp)
    4d6c:	df000804 	addi	fp,sp,32
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4d70:	00005306 	br	4ec0 <prvProcessReceivedCommands+0x160>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	10005116 	blt	r2,zero,4ec0 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4d7c:	e0bffe17 	ldw	r2,-8(fp)
    4d80:	e0bff915 	stw	r2,-28(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    4d84:	e0bff917 	ldw	r2,-28(fp)
    4d88:	10800517 	ldw	r2,20(r2)
    4d8c:	10000426 	beq	r2,zero,4da0 <prvProcessReceivedCommands+0x40>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4d90:	e0bff917 	ldw	r2,-28(fp)
    4d94:	10800104 	addi	r2,r2,4
    4d98:	1009883a 	mov	r4,r2
    4d9c:	00015fc0 	call	15fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4da0:	e0bfff04 	addi	r2,fp,-4
    4da4:	1009883a 	mov	r4,r2
    4da8:	0004c200 	call	4c20 <prvSampleTimeNow>
    4dac:	e0bffa15 	stw	r2,-24(fp)

			switch( xMessage.xMessageID )
    4db0:	e0bffc17 	ldw	r2,-16(fp)
    4db4:	10c002a8 	cmpgeui	r3,r2,10
    4db8:	1800401e 	bne	r3,zero,4ebc <prvProcessReceivedCommands+0x15c>
    4dbc:	100690ba 	slli	r3,r2,2
    4dc0:	00800034 	movhi	r2,0
    4dc4:	10937504 	addi	r2,r2,19924
    4dc8:	1885883a 	add	r2,r3,r2
    4dcc:	10800017 	ldw	r2,0(r2)
    4dd0:	1000683a 	jmp	r2
    4dd4:	00004dfc 	xorhi	zero,zero,311
    4dd8:	00004dfc 	xorhi	zero,zero,311
    4ddc:	00004dfc 	xorhi	zero,zero,311
    4de0:	00004ec0 	call	4ec <prvCheckPendingReadyList+0x54>
    4de4:	00004e7c 	xorhi	zero,zero,313
    4de8:	00004eb0 	cmpltui	zero,zero,314
    4dec:	00004dfc 	xorhi	zero,zero,311
    4df0:	00004dfc 	xorhi	zero,zero,311
    4df4:	00004ec0 	call	4ec <prvCheckPendingReadyList+0x54>
    4df8:	00004e7c 	xorhi	zero,zero,313
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    4dfc:	e0fffd17 	ldw	r3,-12(fp)
    4e00:	e0bff917 	ldw	r2,-28(fp)
    4e04:	10800617 	ldw	r2,24(r2)
    4e08:	1885883a 	add	r2,r3,r2
    4e0c:	e0fffd17 	ldw	r3,-12(fp)
    4e10:	180f883a 	mov	r7,r3
    4e14:	e1bffa17 	ldw	r6,-24(fp)
    4e18:	100b883a 	mov	r5,r2
    4e1c:	e13ff917 	ldw	r4,-28(fp)
    4e20:	0004c840 	call	4c84 <prvInsertTimerInActiveList>
    4e24:	10800058 	cmpnei	r2,r2,1
    4e28:	1000251e 	bne	r2,zero,4ec0 <prvProcessReceivedCommands+0x160>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4e2c:	e0bff917 	ldw	r2,-28(fp)
    4e30:	10800917 	ldw	r2,36(r2)
    4e34:	e13ff917 	ldw	r4,-28(fp)
    4e38:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4e3c:	e0bff917 	ldw	r2,-28(fp)
    4e40:	10800717 	ldw	r2,28(r2)
    4e44:	10800058 	cmpnei	r2,r2,1
    4e48:	10001d1e 	bne	r2,zero,4ec0 <prvProcessReceivedCommands+0x160>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4e4c:	e0fffd17 	ldw	r3,-12(fp)
    4e50:	e0bff917 	ldw	r2,-28(fp)
    4e54:	10800617 	ldw	r2,24(r2)
    4e58:	1885883a 	add	r2,r3,r2
    4e5c:	d8000015 	stw	zero,0(sp)
    4e60:	000f883a 	mov	r7,zero
    4e64:	100d883a 	mov	r6,r2
    4e68:	000b883a 	mov	r5,zero
    4e6c:	e13ff917 	ldw	r4,-28(fp)
    4e70:	00049200 	call	4920 <xTimerGenericCommand>
    4e74:	e0bffb15 	stw	r2,-20(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    4e78:	00001106 	br	4ec0 <prvProcessReceivedCommands+0x160>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4e7c:	e0fffd17 	ldw	r3,-12(fp)
    4e80:	e0bff917 	ldw	r2,-28(fp)
    4e84:	10c00615 	stw	r3,24(r2)
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4e88:	e0bff917 	ldw	r2,-28(fp)
    4e8c:	10c00617 	ldw	r3,24(r2)
    4e90:	e0bffa17 	ldw	r2,-24(fp)
    4e94:	1885883a 	add	r2,r3,r2
    4e98:	e1fffa17 	ldw	r7,-24(fp)
    4e9c:	e1bffa17 	ldw	r6,-24(fp)
    4ea0:	100b883a 	mov	r5,r2
    4ea4:	e13ff917 	ldw	r4,-28(fp)
    4ea8:	0004c840 	call	4c84 <prvInsertTimerInActiveList>
					break;
    4eac:	00000406 	br	4ec0 <prvProcessReceivedCommands+0x160>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4eb0:	e13ff917 	ldw	r4,-28(fp)
    4eb4:	00011500 	call	1150 <vPortFree>
					break;
    4eb8:	00000106 	br	4ec0 <prvProcessReceivedCommands+0x160>

				default	:
					/* Don't expect to get here. */
					break;
    4ebc:	0001883a 	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4ec0:	d0a03197 	ldw	r2,-32570(gp)
    4ec4:	e0fffc04 	addi	r3,fp,-16
    4ec8:	000f883a 	mov	r7,zero
    4ecc:	000d883a 	mov	r6,zero
    4ed0:	180b883a 	mov	r5,r3
    4ed4:	1009883a 	mov	r4,r2
    4ed8:	000222c0 	call	222c <xQueueGenericReceive>
    4edc:	103fa51e 	bne	r2,zero,4d74 <__alt_data_end+0xf0004d74>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    4ee0:	0001883a 	nop
    4ee4:	e037883a 	mov	sp,fp
    4ee8:	dfc00117 	ldw	ra,4(sp)
    4eec:	df000017 	ldw	fp,0(sp)
    4ef0:	dec00204 	addi	sp,sp,8
    4ef4:	f800283a 	ret

00004ef8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4ef8:	defff804 	addi	sp,sp,-32
    4efc:	dfc00715 	stw	ra,28(sp)
    4f00:	df000615 	stw	fp,24(sp)
    4f04:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4f08:	00003006 	br	4fcc <prvSwitchTimerLists+0xd4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f0c:	d0a02f97 	ldw	r2,-32578(gp)
    4f10:	10800317 	ldw	r2,12(r2)
    4f14:	10800017 	ldw	r2,0(r2)
    4f18:	e0bffb15 	stw	r2,-20(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4f1c:	d0a02f97 	ldw	r2,-32578(gp)
    4f20:	10800317 	ldw	r2,12(r2)
    4f24:	10800317 	ldw	r2,12(r2)
    4f28:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4f2c:	e0bffc17 	ldw	r2,-16(fp)
    4f30:	10800104 	addi	r2,r2,4
    4f34:	1009883a 	mov	r4,r2
    4f38:	00015fc0 	call	15fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4f3c:	e0bffc17 	ldw	r2,-16(fp)
    4f40:	10800917 	ldw	r2,36(r2)
    4f44:	e13ffc17 	ldw	r4,-16(fp)
    4f48:	103ee83a 	callr	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4f4c:	e0bffc17 	ldw	r2,-16(fp)
    4f50:	10800717 	ldw	r2,28(r2)
    4f54:	10800058 	cmpnei	r2,r2,1
    4f58:	10001c1e 	bne	r2,zero,4fcc <prvSwitchTimerLists+0xd4>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4f5c:	e0bffc17 	ldw	r2,-16(fp)
    4f60:	10c00617 	ldw	r3,24(r2)
    4f64:	e0bffb17 	ldw	r2,-20(fp)
    4f68:	1885883a 	add	r2,r3,r2
    4f6c:	e0bffd15 	stw	r2,-12(fp)
			if( xReloadTime > xNextExpireTime )
    4f70:	e0bffd17 	ldw	r2,-12(fp)
    4f74:	e0fffb17 	ldw	r3,-20(fp)
    4f78:	18800d2e 	bgeu	r3,r2,4fb0 <prvSwitchTimerLists+0xb8>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4f7c:	e0bffc17 	ldw	r2,-16(fp)
    4f80:	e0fffd17 	ldw	r3,-12(fp)
    4f84:	10c00115 	stw	r3,4(r2)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4f88:	e0bffc17 	ldw	r2,-16(fp)
    4f8c:	e0fffc17 	ldw	r3,-16(fp)
    4f90:	10c00415 	stw	r3,16(r2)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4f94:	d0e02f97 	ldw	r3,-32578(gp)
    4f98:	e0bffc17 	ldw	r2,-16(fp)
    4f9c:	10800104 	addi	r2,r2,4
    4fa0:	100b883a 	mov	r5,r2
    4fa4:	1809883a 	mov	r4,r3
    4fa8:	00015240 	call	1524 <vListInsert>
    4fac:	00000706 	br	4fcc <prvSwitchTimerLists+0xd4>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4fb0:	d8000015 	stw	zero,0(sp)
    4fb4:	000f883a 	mov	r7,zero
    4fb8:	e1bffb17 	ldw	r6,-20(fp)
    4fbc:	000b883a 	mov	r5,zero
    4fc0:	e13ffc17 	ldw	r4,-16(fp)
    4fc4:	00049200 	call	4920 <xTimerGenericCommand>
    4fc8:	e0bffe15 	stw	r2,-8(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4fcc:	d0a02f97 	ldw	r2,-32578(gp)
    4fd0:	10800017 	ldw	r2,0(r2)
    4fd4:	103fcd1e 	bne	r2,zero,4f0c <__alt_data_end+0xf0004f0c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    4fd8:	d0a02f97 	ldw	r2,-32578(gp)
    4fdc:	e0bfff15 	stw	r2,-4(fp)
	pxCurrentTimerList = pxOverflowTimerList;
    4fe0:	d0a03097 	ldw	r2,-32574(gp)
    4fe4:	d0a02f95 	stw	r2,-32578(gp)
	pxOverflowTimerList = pxTemp;
    4fe8:	e0bfff17 	ldw	r2,-4(fp)
    4fec:	d0a03095 	stw	r2,-32574(gp)
}
    4ff0:	0001883a 	nop
    4ff4:	e037883a 	mov	sp,fp
    4ff8:	dfc00117 	ldw	ra,4(sp)
    4ffc:	df000017 	ldw	fp,0(sp)
    5000:	dec00204 	addi	sp,sp,8
    5004:	f800283a 	ret

00005008 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    5008:	defffe04 	addi	sp,sp,-8
    500c:	dfc00115 	stw	ra,4(sp)
    5010:	df000015 	stw	fp,0(sp)
    5014:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5018:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
    501c:	d0a03197 	ldw	r2,-32570(gp)
    5020:	1000111e 	bne	r2,zero,5068 <prvCheckForValidListAndQueue+0x60>
		{
			vListInitialise( &xActiveTimerList1 );
    5024:	01020234 	movhi	r4,2056
    5028:	213fbd04 	addi	r4,r4,-268
    502c:	00014040 	call	1404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    5030:	01020234 	movhi	r4,2056
    5034:	213fc204 	addi	r4,r4,-248
    5038:	00014040 	call	1404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    503c:	00820234 	movhi	r2,2056
    5040:	10bfbd04 	addi	r2,r2,-268
    5044:	d0a02f95 	stw	r2,-32578(gp)
			pxOverflowTimerList = &xActiveTimerList2;
    5048:	00820234 	movhi	r2,2056
    504c:	10bfc204 	addi	r2,r2,-248
    5050:	d0a03095 	stw	r2,-32574(gp)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5054:	000d883a 	mov	r6,zero
    5058:	01400304 	movi	r5,12
    505c:	01000284 	movi	r4,10
    5060:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5064:	d0a03195 	stw	r2,-32570(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5068:	00040fc0 	call	40fc <vTaskExitCritical>
}
    506c:	0001883a 	nop
    5070:	e037883a 	mov	sp,fp
    5074:	dfc00117 	ldw	ra,4(sp)
    5078:	df000017 	ldw	fp,0(sp)
    507c:	dec00204 	addi	sp,sp,8
    5080:	f800283a 	ret

00005084 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    5084:	defffb04 	addi	sp,sp,-20
    5088:	dfc00415 	stw	ra,16(sp)
    508c:	df000315 	stw	fp,12(sp)
    5090:	df000304 	addi	fp,sp,12
    5094:	e13fff15 	stw	r4,-4(fp)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    5098:	e0bfff17 	ldw	r2,-4(fp)
    509c:	e0bffd15 	stw	r2,-12(fp)

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    50a0:	00040a80 	call	40a8 <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    50a4:	e0bffd17 	ldw	r2,-12(fp)
    50a8:	10800517 	ldw	r2,20(r2)
    50ac:	1004c03a 	cmpne	r2,r2,zero
    50b0:	10803fcc 	andi	r2,r2,255
    50b4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
    50b8:	00040fc0 	call	40fc <vTaskExitCritical>

	return xTimerIsInActiveList;
    50bc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
    50c0:	e037883a 	mov	sp,fp
    50c4:	dfc00117 	ldw	ra,4(sp)
    50c8:	df000017 	ldw	fp,0(sp)
    50cc:	dec00204 	addi	sp,sp,8
    50d0:	f800283a 	ret

000050d4 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
    50d4:	defffd04 	addi	sp,sp,-12
    50d8:	df000215 	stw	fp,8(sp)
    50dc:	df000204 	addi	fp,sp,8
    50e0:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
    50e4:	e0bfff17 	ldw	r2,-4(fp)
    50e8:	e0bffe15 	stw	r2,-8(fp)

	return pxTimer->pvTimerID;
    50ec:	e0bffe17 	ldw	r2,-8(fp)
    50f0:	10800817 	ldw	r2,32(r2)
}
    50f4:	e037883a 	mov	sp,fp
    50f8:	df000017 	ldw	fp,0(sp)
    50fc:	dec00104 	addi	sp,sp,4
    5100:	f800283a 	ret

00005104 <MaintenanceStateButton>:
static void Load_LED_Ctrl_Task(void *pvParams);
static void Switch_Control_Task(void *pvParams);
unsigned char byte;


void MaintenanceStateButton () {
    5104:	deffff04 	addi	sp,sp,-4
    5108:	df000015 	stw	fp,0(sp)
    510c:	d839883a 	mov	fp,sp

	  // Inverting maintenance mode:
	Maintenance ^= 0x1;
    5110:	d0a03597 	ldw	r2,-32554(gp)
    5114:	1080005c 	xori	r2,r2,1
    5118:	d0a03595 	stw	r2,-32554(gp)
	  // clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7);
    511c:	00c001c4 	movi	r3,7
    5120:	00800134 	movhi	r2,4
    5124:	108c3304 	addi	r2,r2,12492
    5128:	10c00035 	stwio	r3,0(r2)

}
    512c:	0001883a 	nop
    5130:	e037883a 	mov	sp,fp
    5134:	df000017 	ldw	fp,0(sp)
    5138:	dec00104 	addi	sp,sp,4
    513c:	f800283a 	ret

00005140 <ps2_isr>:
void ps2_isr(void* ps2_device, alt_u32 id){
    5140:	defff804 	addi	sp,sp,-32
    5144:	dfc00715 	stw	ra,28(sp)
    5148:	df000615 	stw	fp,24(sp)
    514c:	df000604 	addi	fp,sp,24
    5150:	e13ffe15 	stw	r4,-8(fp)
    5154:	e17fff15 	stw	r5,-4(fp)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    5158:	e03ffb15 	stw	zero,-20(fp)
	char ascii;
	int status = 0;
    515c:	e03ffa15 	stw	zero,-24(fp)
	KB_CODE_TYPE decode_mode;
	status = decode_scancode (ps2_device, &decode_mode , &byte , &ascii) ;
    5160:	e0fffc04 	addi	r3,fp,-16
    5164:	e0bffd04 	addi	r2,fp,-12
    5168:	180f883a 	mov	r7,r3
    516c:	d1a04384 	addi	r6,gp,-32498
    5170:	100b883a 	mov	r5,r2
    5174:	e13ffe17 	ldw	r4,-8(fp)
    5178:	001db000 	call	1db00 <decode_scancode>
    517c:	e0bffa15 	stw	r2,-24(fp)
	if ( status == 0 ) //success
    5180:	e0bffa17 	ldw	r2,-24(fp)
    5184:	1000131e 	bne	r2,zero,51d4 <ps2_isr+0x94>
	{
		// print out the result
		switch ( decode_mode )
    5188:	e0bffd17 	ldw	r2,-12(fp)
    518c:	10c00060 	cmpeqi	r3,r2,1
    5190:	18000a1e 	bne	r3,zero,51bc <ps2_isr+0x7c>
    5194:	0080032e 	bgeu	zero,r2,51a4 <ps2_isr+0x64>
    5198:	10800128 	cmpgeui	r2,r2,4
    519c:	1000011e 	bne	r2,zero,51a4 <ps2_isr+0x64>
	        break ;
	      case KB_LONG_BINARY_MAKE_CODE :
	        // do nothing
	      case KB_BINARY_MAKE_CODE :
	        //printf ( "MAKE CODE : %x\n", byte ) ;
	        break ;
    51a0:	00000706 	br	51c0 <ps2_isr+0x80>
	      case KB_BREAK_CODE :
	        // do nothing
	      default :
	        xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
    51a4:	d0a03897 	ldw	r2,-32542(gp)
    51a8:	e0fffb04 	addi	r3,fp,-20
    51ac:	180b883a 	mov	r5,r3
    51b0:	1009883a 	mov	r4,r2
    51b4:	000215c0 	call	215c <xQueueGiveFromISR>
	        break ;
    51b8:	00000106 	br	51c0 <ps2_isr+0x80>
		// print out the result
		switch ( decode_mode )
	    {
	      case KB_ASCII_MAKE_CODE :
	        //printf ( "ASCII   : %x\n", byte ) ;
	        break ;
    51bc:	0001883a 	nop
	        // do nothing
	      default :
	        xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
	        break ;
	    }
	    IOWR(SEVEN_SEG_BASE,0 ,byte);
    51c0:	d0a04383 	ldbu	r2,-32498(gp)
    51c4:	10c03fcc 	andi	r3,r2,255
    51c8:	00800134 	movhi	r2,4
    51cc:	108c4104 	addi	r2,r2,12548
    51d0:	10c00035 	stwio	r3,0(r2)
	  }


}
    51d4:	0001883a 	nop
    51d8:	e037883a 	mov	sp,fp
    51dc:	dfc00117 	ldw	ra,4(sp)
    51e0:	df000017 	ldw	fp,0(sp)
    51e4:	dec00204 	addi	sp,sp,8
    51e8:	f800283a 	ret

000051ec <loadTimerISR>:
void loadTimerISR(TimerHandle_t xTimer) {
    51ec:	defffd04 	addi	sp,sp,-12
    51f0:	dfc00215 	stw	ra,8(sp)
    51f4:	df000115 	stw	fp,4(sp)
    51f8:	df000104 	addi	fp,sp,4
    51fc:	e13fff15 	stw	r4,-4(fp)
	// Timer has expired, do smthn
	printf("expired \n");
    5200:	01020034 	movhi	r4,2048
    5204:	21001604 	addi	r4,r4,88
    5208:	00094bc0 	call	94bc <puts>
	LoadTimeExp = 1;
    520c:	00800044 	movi	r2,1
    5210:	d0a03a95 	stw	r2,-32534(gp)
}
    5214:	0001883a 	nop
    5218:	e037883a 	mov	sp,fp
    521c:	dfc00117 	ldw	ra,4(sp)
    5220:	df000017 	ldw	fp,0(sp)
    5224:	dec00204 	addi	sp,sp,8
    5228:	f800283a 	ret

0000522c <freq_relay_isr>:
void freq_relay_isr() {
    522c:	defffd04 	addi	sp,sp,-12
    5230:	dfc00215 	stw	ra,8(sp)
    5234:	df000115 	stw	fp,4(sp)
    5238:	df000104 	addi	fp,sp,4
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    523c:	e03fff15 	stw	zero,-4(fp)
	Freq_Val= IORD(FREQUENCY_ANALYSER_BASE, 0); //it's in COUNT, not in HERTZ. to convert, do 16000/temp
    5240:	00800134 	movhi	r2,4
    5244:	108c4004 	addi	r2,r2,12544
    5248:	10800037 	ldwio	r2,0(r2)
    524c:	d0a04495 	stw	r2,-32494(gp)
	//double temp = 16000.0/Freq_Val;
	//xQueueSendToBackFromISR(Q_freq_data, &temp, pdFALSE);
	xSemaphoreGiveFromISR(freqSemaphore, &xHigherPriorityTaskWoken);
    5250:	d0a03f97 	ldw	r2,-32514(gp)
    5254:	e17fff04 	addi	r5,fp,-4
    5258:	1009883a 	mov	r4,r2
    525c:	000215c0 	call	215c <xQueueGiveFromISR>
}
    5260:	0001883a 	nop
    5264:	e037883a 	mov	sp,fp
    5268:	dfc00117 	ldw	ra,4(sp)
    526c:	df000017 	ldw	fp,0(sp)
    5270:	dec00204 	addi	sp,sp,8
    5274:	f800283a 	ret

00005278 <main>:

//===================================MAIN=============================================//
int main(void) {
    5278:	defff904 	addi	sp,sp,-28
    527c:	dfc00615 	stw	ra,24(sp)
    5280:	df000515 	stw	fp,20(sp)
    5284:	df000504 	addi	fp,sp,20
	StabilityQ = xQueueCreate( STBL_QUEUE_SIZE, sizeof( void* ) );
    5288:	000d883a 	mov	r6,zero
    528c:	01400104 	movi	r5,4
    5290:	01000c84 	movi	r4,50
    5294:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5298:	d0a04095 	stw	r2,-32510(gp)
	LoadControlQ = xQueueCreate(STBL_QUEUE_SIZE, sizeof(void*));
    529c:	000d883a 	mov	r6,zero
    52a0:	01400104 	movi	r5,4
    52a4:	01000c84 	movi	r4,50
    52a8:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    52ac:	d0a04895 	stw	r2,-32478(gp)
	//Q_freq_data = xQueueCreate(5, sizeof(double) );
	alt_up_ps2_dev * ps2_device = alt_up_ps2_open_dev(PS2_NAME);
    52b0:	01020034 	movhi	r4,2048
    52b4:	21001904 	addi	r4,r4,100
    52b8:	001c6040 	call	1c604 <alt_up_ps2_open_dev>
    52bc:	e0bfff15 	stw	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7); // Clearing edge capture register for ISR
    52c0:	00c001c4 	movi	r3,7
    52c4:	00800134 	movhi	r2,4
    52c8:	108c3304 	addi	r2,r2,12492
    52cc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTON_BASE,0x7); // Enabling interrupts for the buttons
    52d0:	00c001c4 	movi	r3,7
    52d4:	00800134 	movhi	r2,4
    52d8:	108c3204 	addi	r2,r2,12488
    52dc:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(PUSH_BUTTON_IRQ,0,MaintenanceStateButton);
    52e0:	01800034 	movhi	r6,0
    52e4:	31944104 	addi	r6,r6,20740
    52e8:	000b883a 	mov	r5,zero
    52ec:	01000044 	movi	r4,1
    52f0:	00019200 	call	1920 <alt_irq_register>
	//Threshold values defined.
	Thresh_Val = 55;
    52f4:	00800dc4 	movi	r2,55
    52f8:	d0a03b95 	stw	r2,-32530(gp)
	Thresh_ROC = 5;
    52fc:	00800144 	movi	r2,5
    5300:	d0a04795 	stw	r2,-32482(gp)
	if(ps2_device == NULL){
    5304:	e0bfff17 	ldw	r2,-4(fp)
    5308:	1000051e 	bne	r2,zero,5320 <main+0xa8>
		printf("can't find PS/2 device\n");
    530c:	01020034 	movhi	r4,2048
    5310:	21001c04 	addi	r4,r4,112
    5314:	00094bc0 	call	94bc <puts>
		return 1;
    5318:	00800044 	movi	r2,1
    531c:	00007006 	br	54e0 <main+0x268>
	}

	alt_up_ps2_enable_read_interrupt(ps2_device);
    5320:	e13fff17 	ldw	r4,-4(fp)
    5324:	001c1800 	call	1c180 <alt_up_ps2_enable_read_interrupt>
	alt_irq_register(PS2_IRQ, ps2_device, ps2_isr);
    5328:	01800034 	movhi	r6,0
    532c:	31945004 	addi	r6,r6,20800
    5330:	e17fff17 	ldw	r5,-4(fp)
    5334:	01000084 	movi	r4,2
    5338:	00019200 	call	1920 <alt_irq_register>
	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay_isr);
    533c:	01800034 	movhi	r6,0
    5340:	31948b04 	addi	r6,r6,21036
    5344:	000b883a 	mov	r5,zero
    5348:	010001c4 	movi	r4,7
    534c:	00019200 	call	1920 <alt_irq_register>
	//Create binary Semaphore
	semaphore = xSemaphoreCreateBinary();
    5350:	018000c4 	movi	r6,3
    5354:	000b883a 	mov	r5,zero
    5358:	01000044 	movi	r4,1
    535c:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5360:	d0a03895 	stw	r2,-32542(gp)
	freqSemaphore = xSemaphoreCreateBinary();
    5364:	018000c4 	movi	r6,3
    5368:	000b883a 	mov	r5,zero
    536c:	01000044 	movi	r4,1
    5370:	0001ba80 	call	1ba8 <xQueueGenericCreate>
    5374:	d0a03f95 	stw	r2,-32514(gp)
	threshold_mutex = xSemaphoreCreateMutex(); //has a priority inheritance mechanism unlike binary semaphores.
    5378:	01000044 	movi	r4,1
    537c:	0001c800 	call	1c80 <xQueueCreateMutex>
    5380:	d0a03d95 	stw	r2,-32522(gp)


	// Creating Timers
	LoadTimer = xTimerCreate("LoadTimer",pdMS_TO_TICKS(500),pdTRUE,NULL,loadTimerISR);
    5384:	00800034 	movhi	r2,0
    5388:	10947b04 	addi	r2,r2,20972
    538c:	d8800015 	stw	r2,0(sp)
    5390:	000f883a 	mov	r7,zero
    5394:	01800044 	movi	r6,1
    5398:	01407d04 	movi	r5,500
    539c:	01020034 	movhi	r4,2048
    53a0:	21002204 	addi	r4,r4,136
    53a4:	00048740 	call	4874 <xTimerCreate>
    53a8:	d0a03c95 	stw	r2,-32526(gp)

	// Creating Tasks used
	xTaskCreate(Switch_Control_Task, 'Switch', configMINIMAL_STACK_SIZE, Switch_Control_Param, Switch_Task_Priority, switch_control_handle);
    53ac:	d0a04597 	ldw	r2,-32490(gp)
    53b0:	d8000315 	stw	zero,12(sp)
    53b4:	d8000215 	stw	zero,8(sp)
    53b8:	d8800115 	stw	r2,4(sp)
    53bc:	00800104 	movi	r2,4
    53c0:	d8800015 	stw	r2,0(sp)
    53c4:	01c48d34 	movhi	r7,4660
    53c8:	39d59e04 	addi	r7,r7,22136
    53cc:	01840004 	movi	r6,4096
    53d0:	015a5d34 	movhi	r5,26996
    53d4:	2958da04 	addi	r5,r5,25448
    53d8:	01000034 	movhi	r4,0
    53dc:	21153d04 	addi	r4,r4,21748
    53e0:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Load_LED_Ctrl_Task,'LEDs',configMINIMAL_STACK_SIZE,NULL,Load_LED_Ctrl_Task_Priority,NULL);
    53e4:	d8000315 	stw	zero,12(sp)
    53e8:	d8000215 	stw	zero,8(sp)
    53ec:	d8000115 	stw	zero,4(sp)
    53f0:	008000c4 	movi	r2,3
    53f4:	d8800015 	stw	r2,0(sp)
    53f8:	000f883a 	mov	r7,zero
    53fc:	01840004 	movi	r6,4096
    5400:	01531174 	movhi	r5,19525
    5404:	29511cc4 	addi	r5,r5,17523
    5408:	01000034 	movhi	r4,0
    540c:	21154c04 	addi	r4,r4,21808
    5410:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Keyboard_Task, 'Keyboard', configMINIMAL_STACK_SIZE, NULL, Keyboard_Task_Priority, NULL);
    5414:	d8000315 	stw	zero,12(sp)
    5418:	d8000215 	stw	zero,8(sp)
    541c:	d8000115 	stw	zero,4(sp)
    5420:	00800144 	movi	r2,5
    5424:	d8800015 	stw	r2,0(sp)
    5428:	000f883a 	mov	r7,zero
    542c:	01840004 	movi	r6,4096
    5430:	015bd874 	movhi	r5,28513
    5434:	295c9904 	addi	r5,r5,29284
    5438:	01000034 	movhi	r4,0
    543c:	21171704 	addi	r4,r4,23644
    5440:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Stability_Monitor_Task, 'Monitoring', configMINIMAL_STACK_SIZE, NULL, Stable_Mon_Tsk_Priority, NULL);
    5444:	d8000315 	stw	zero,12(sp)
    5448:	d8000215 	stw	zero,8(sp)
    544c:	d8000115 	stw	zero,4(sp)
    5450:	00800044 	movi	r2,1
    5454:	d8800015 	stw	r2,0(sp)
    5458:	000f883a 	mov	r7,zero
    545c:	01840004 	movi	r6,4096
    5460:	015c9a74 	movhi	r5,29289
    5464:	295b99c4 	addi	r5,r5,28263
    5468:	01000034 	movhi	r4,0
    546c:	21165704 	addi	r4,r4,22876
    5470:	0002b780 	call	2b78 <xTaskGenericCreate>
	xTaskCreate(Load_Management_Task, 'LoadShed',configMINIMAL_STACK_SIZE,NULL,Load_Management_Task_Priority,&PRVGADraw);
    5474:	d8000315 	stw	zero,12(sp)
    5478:	d8000215 	stw	zero,8(sp)
    547c:	d0a04184 	addi	r2,gp,-32506
    5480:	d8800115 	stw	r2,4(sp)
    5484:	00800084 	movi	r2,2
    5488:	d8800015 	stw	r2,0(sp)
    548c:	000f883a 	mov	r7,zero
    5490:	01840004 	movi	r6,4096
    5494:	0154da34 	movhi	r5,21352
    5498:	29595904 	addi	r5,r5,25956
    549c:	01000034 	movhi	r4,0
    54a0:	21156604 	addi	r4,r4,21912
    54a4:	0002b780 	call	2b78 <xTaskGenericCreate>

	xTaskCreate(VGA_Task, 'VGA', configMINIMAL_STACK_SIZE, NULL, VGA_Task_Priority, NULL);
    54a8:	d8000315 	stw	zero,12(sp)
    54ac:	d8000215 	stw	zero,8(sp)
    54b0:	d8000115 	stw	zero,4(sp)
    54b4:	00800184 	movi	r2,6
    54b8:	d8800015 	stw	r2,0(sp)
    54bc:	000f883a 	mov	r7,zero
    54c0:	01840004 	movi	r6,4096
    54c4:	014015b4 	movhi	r5,86
    54c8:	2951d044 	addi	r5,r5,18241
    54cc:	01000034 	movhi	r4,0
    54d0:	21177004 	addi	r4,r4,24000
    54d4:	0002b780 	call	2b78 <xTaskGenericCreate>

	vTaskStartScheduler();
    54d8:	0002e840 	call	2e84 <vTaskStartScheduler>
	for(;;);
    54dc:	003fff06 	br	54dc <__alt_data_end+0xf00054dc>
}
    54e0:	e037883a 	mov	sp,fp
    54e4:	dfc00117 	ldw	ra,4(sp)
    54e8:	df000017 	ldw	fp,0(sp)
    54ec:	dec00204 	addi	sp,sp,8
    54f0:	f800283a 	ret

000054f4 <Switch_Control_Task>:

//=======================================END OF MAIN==================================================================//
static void Switch_Control_Task(void *pvParams) {
    54f4:	defffd04 	addi	sp,sp,-12
    54f8:	dfc00215 	stw	ra,8(sp)
    54fc:	df000115 	stw	fp,4(sp)
    5500:	df000104 	addi	fp,sp,4
    5504:	e13fff15 	stw	r4,-4(fp)
	while (1) {
		printf("SwitchTask\n"); //Debug version
    5508:	01020034 	movhi	r4,2048
    550c:	21002504 	addi	r4,r4,148
    5510:	00094bc0 	call	94bc <puts>
		Current_Switch_State = IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE);
    5514:	00800134 	movhi	r2,4
    5518:	108c2c04 	addi	r2,r2,12464
    551c:	10800037 	ldwio	r2,0(r2)
    5520:	d0a03695 	stw	r2,-32550(gp)
		vTaskDelay(pdMS_TO_TICKS(200));
    5524:	01003204 	movi	r4,200
    5528:	0002e0c0 	call	2e0c <vTaskDelay>
	}
    552c:	003ff606 	br	5508 <__alt_data_end+0xf0005508>

00005530 <Load_LED_Ctrl_Task>:
}
static void Load_LED_Ctrl_Task(void *pvParams) {
    5530:	defffc04 	addi	sp,sp,-16
    5534:	dfc00315 	stw	ra,12(sp)
    5538:	df000215 	stw	fp,8(sp)
    553c:	df000204 	addi	fp,sp,8
    5540:	e13fff15 	stw	r4,-4(fp)
	unsigned int *LdQ;
	while (1) {
		printf("LED Control Task \n");
    5544:	01020034 	movhi	r4,2048
    5548:	21002804 	addi	r4,r4,160
    554c:	00094bc0 	call	94bc <puts>
		xQueueReceive(LoadControlQ,&LdQ,portMAX_DELAY);
    5550:	d0a04897 	ldw	r2,-32478(gp)
    5554:	000f883a 	mov	r7,zero
    5558:	01bfffc4 	movi	r6,-1
    555c:	e17ffe04 	addi	r5,fp,-8
    5560:	1009883a 	mov	r4,r2
    5564:	000222c0 	call	222c <xQueueGenericReceive>
		IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, Current_Switch_State);
    5568:	d0e03697 	ldw	r3,-32550(gp)
    556c:	00800134 	movhi	r2,4
    5570:	108c1804 	addi	r2,r2,12384
    5574:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE,LdQ);
    5578:	e0bffe17 	ldw	r2,-8(fp)
    557c:	1007883a 	mov	r3,r2
    5580:	00800134 	movhi	r2,4
    5584:	108c2004 	addi	r2,r2,12416
    5588:	10c00035 	stwio	r3,0(r2)
		vTaskDelay(pdMS_TO_TICKS(200));
    558c:	01003204 	movi	r4,200
    5590:	0002e0c0 	call	2e0c <vTaskDelay>
	}
    5594:	003feb06 	br	5544 <__alt_data_end+0xf0005544>

00005598 <Load_Management_Task>:
}
static void Load_Management_Task(void *pvParams) {
    5598:	defff204 	addi	sp,sp,-56
    559c:	dfc00d15 	stw	ra,52(sp)
    55a0:	df000c15 	stw	fp,48(sp)
    55a4:	dc000b15 	stw	r16,44(sp)
    55a8:	df000c04 	addi	fp,sp,48
    55ac:	e13ffe15 	stw	r4,-8(fp)
	unsigned int *stable;
	unsigned int LoadQ;
	while(1) {

		xQueueReceive(StabilityQ,&stable,portMAX_DELAY);
    55b0:	d0a04097 	ldw	r2,-32510(gp)
    55b4:	e0fffc04 	addi	r3,fp,-16
    55b8:	000f883a 	mov	r7,zero
    55bc:	01bfffc4 	movi	r6,-1
    55c0:	180b883a 	mov	r5,r3
    55c4:	1009883a 	mov	r4,r2
    55c8:	000222c0 	call	222c <xQueueGenericReceive>

		if (Maintenance != 0) {
    55cc:	d0a03597 	ldw	r2,-32554(gp)
    55d0:	1000d526 	beq	r2,zero,5928 <Load_Management_Task+0x390>
			if (stable == 0 && Ld_Manage_State == 0) { // Found to be unstable
    55d4:	e0bffc17 	ldw	r2,-16(fp)
    55d8:	1000101e 	bne	r2,zero,561c <Load_Management_Task+0x84>
    55dc:	d0a03997 	ldw	r2,-32538(gp)
    55e0:	10000e1e 	bne	r2,zero,561c <Load_Management_Task+0x84>
			// Labeling as now in load managing state
				Ld_Manage_State = 1;
    55e4:	00800044 	movi	r2,1
    55e8:	d0a03995 	stw	r2,-32538(gp)

				Init_Load = Current_Switch_State;
    55ec:	d0a03697 	ldw	r2,-32550(gp)
    55f0:	d0a03795 	stw	r2,-32546(gp)
				Prev_Stable = Current_Switch_State;
    55f4:	d0a03697 	ldw	r2,-32550(gp)
    55f8:	d0a03e95 	stw	r2,-32518(gp)
				xTimerStart(LoadTimer,0);
    55fc:	d4203c97 	ldw	r16,-32526(gp)
    5600:	00030dc0 	call	30dc <xTaskGetTickCount>
    5604:	d8000015 	stw	zero,0(sp)
    5608:	000f883a 	mov	r7,zero
    560c:	100d883a 	mov	r6,r2
    5610:	01400044 	movi	r5,1
    5614:	8009883a 	mov	r4,r16
    5618:	00049200 	call	4920 <xTimerGenericCommand>
			}
			if (Ld_Manage_State == 1) {
    561c:	d0a03997 	ldw	r2,-32538(gp)
    5620:	10800058 	cmpnei	r2,r2,1
    5624:	1000ca1e 	bne	r2,zero,5950 <Load_Management_Task+0x3b8>
				if (stable ==1) {
    5628:	e0bffc17 	ldw	r2,-16(fp)
    562c:	10800058 	cmpnei	r2,r2,1
    5630:	1000691e 	bne	r2,zero,57d8 <Load_Management_Task+0x240>
					if ((Prev_Stable >> 5) == 0) { // If it was unstable prior we reset the timer
    5634:	d0a03e97 	ldw	r2,-32518(gp)
    5638:	1005d17a 	srai	r2,r2,5
    563c:	1000091e 	bne	r2,zero,5664 <Load_Management_Task+0xcc>
						xTimerReset(LoadTimer,0);
    5640:	d4203c97 	ldw	r16,-32526(gp)
    5644:	00030dc0 	call	30dc <xTaskGetTickCount>
    5648:	d8000015 	stw	zero,0(sp)
    564c:	000f883a 	mov	r7,zero
    5650:	100d883a 	mov	r6,r2
    5654:	01400084 	movi	r5,2
    5658:	8009883a 	mov	r4,r16
    565c:	00049200 	call	4920 <xTimerGenericCommand>
    5660:	00005406 	br	57b4 <Load_Management_Task+0x21c>
					} else if (LoadTimeExp == 1) {
    5664:	d0a03a97 	ldw	r2,-32534(gp)
    5668:	10800058 	cmpnei	r2,r2,1
    566c:	1000511e 	bne	r2,zero,57b4 <Load_Management_Task+0x21c>
						LoadTimeExp = 0;
    5670:	d0203a95 	stw	zero,-32534(gp)
						// Restoring

						//loop through and check to see which of the highest bits need to be 'unshedded'
						int found = 0;
    5674:	e03ff515 	stw	zero,-44(fp)
						int pos = 4;
    5678:	00800104 	movi	r2,4
    567c:	e0bff615 	stw	r2,-40(fp)
						int mask = 1;
    5680:	00800044 	movi	r2,1
    5684:	e0bff915 	stw	r2,-28(fp)
						int val;
						printf("Prev_Stable: %d\n",Prev_Stable);
    5688:	d0a03e97 	ldw	r2,-32518(gp)
    568c:	100b883a 	mov	r5,r2
    5690:	01020034 	movhi	r4,2048
    5694:	21002d04 	addi	r4,r4,180
    5698:	00093c00 	call	93c0 <printf>
						while (found == 0 && pos>=0) {
    569c:	00001f06 	br	571c <Load_Management_Task+0x184>
							mask = 1<<pos;
    56a0:	00c00044 	movi	r3,1
    56a4:	e0bff617 	ldw	r2,-40(fp)
    56a8:	1884983a 	sll	r2,r3,r2
    56ac:	e0bff915 	stw	r2,-28(fp)
							val = Prev_Stable & mask;
    56b0:	d0e03e97 	ldw	r3,-32518(gp)
    56b4:	e0bff917 	ldw	r2,-28(fp)
    56b8:	1884703a 	and	r2,r3,r2
    56bc:	e0bffa15 	stw	r2,-24(fp)
							if (!val && (Init_Load & (1U << pos))) {
    56c0:	e0bffa17 	ldw	r2,-24(fp)
    56c4:	1000121e 	bne	r2,zero,5710 <Load_Management_Task+0x178>
    56c8:	d0a03797 	ldw	r2,-32546(gp)
    56cc:	1007883a 	mov	r3,r2
    56d0:	e0bff617 	ldw	r2,-40(fp)
    56d4:	1884d83a 	srl	r2,r3,r2
    56d8:	1080004c 	andi	r2,r2,1
    56dc:	10000c26 	beq	r2,zero,5710 <Load_Management_Task+0x178>
								found =1;
    56e0:	00800044 	movi	r2,1
    56e4:	e0bff515 	stw	r2,-44(fp)
								printf("Position:%d \n",pos);
    56e8:	e17ff617 	ldw	r5,-40(fp)
    56ec:	01020034 	movhi	r4,2048
    56f0:	21003204 	addi	r4,r4,200
    56f4:	00093c00 	call	93c0 <printf>
								printf("Init: %d\n",Init_Load);
    56f8:	d0a03797 	ldw	r2,-32546(gp)
    56fc:	100b883a 	mov	r5,r2
    5700:	01020034 	movhi	r4,2048
    5704:	21003604 	addi	r4,r4,216
    5708:	00093c00 	call	93c0 <printf>
								break;
    570c:	00000706 	br	572c <Load_Management_Task+0x194>
							}
							pos--;
    5710:	e0bff617 	ldw	r2,-40(fp)
    5714:	10bfffc4 	addi	r2,r2,-1
    5718:	e0bff615 	stw	r2,-40(fp)
						int found = 0;
						int pos = 4;
						int mask = 1;
						int val;
						printf("Prev_Stable: %d\n",Prev_Stable);
						while (found == 0 && pos>=0) {
    571c:	e0bff517 	ldw	r2,-44(fp)
    5720:	1000021e 	bne	r2,zero,572c <Load_Management_Task+0x194>
    5724:	e0bff617 	ldw	r2,-40(fp)
    5728:	103fdd0e 	bge	r2,zero,56a0 <__alt_data_end+0xf00056a0>
								printf("Init: %d\n",Init_Load);
								break;
							}
							pos--;
						}
						if (found == 1) {
    572c:	e0bff517 	ldw	r2,-44(fp)
    5730:	10800058 	cmpnei	r2,r2,1
    5734:	1000171e 	bne	r2,zero,5794 <Load_Management_Task+0x1fc>
							Prev_Stable |= (1U << pos); // putting 1 into the position found
    5738:	00c00044 	movi	r3,1
    573c:	e0bff617 	ldw	r2,-40(fp)
    5740:	1884983a 	sll	r2,r3,r2
    5744:	d0e03e97 	ldw	r3,-32518(gp)
    5748:	10c4b03a 	or	r2,r2,r3
    574c:	d0a03e95 	stw	r2,-32518(gp)
							LoadQ = Prev_Stable;
    5750:	d0a03e97 	ldw	r2,-32518(gp)
    5754:	e0bffd15 	stw	r2,-12(fp)
							LoadQ &= 0b011111;
    5758:	e0bffd17 	ldw	r2,-12(fp)
    575c:	108007cc 	andi	r2,r2,31
    5760:	e0bffd15 	stw	r2,-12(fp)
							printf("LOAD: %d\n",LoadQ);
    5764:	e0bffd17 	ldw	r2,-12(fp)
    5768:	100b883a 	mov	r5,r2
    576c:	01020034 	movhi	r4,2048
    5770:	21003904 	addi	r4,r4,228
    5774:	00093c00 	call	93c0 <printf>
							xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    5778:	d0a04897 	ldw	r2,-32478(gp)
    577c:	e0fffd04 	addi	r3,fp,-12
    5780:	000f883a 	mov	r7,zero
    5784:	000d883a 	mov	r6,zero
    5788:	180b883a 	mov	r5,r3
    578c:	1009883a 	mov	r4,r2
    5790:	0001edc0 	call	1edc <xQueueGenericSend>

						}
						xTimerStart(LoadTimer,0);
    5794:	d4203c97 	ldw	r16,-32526(gp)
    5798:	00030dc0 	call	30dc <xTaskGetTickCount>
    579c:	d8000015 	stw	zero,0(sp)
    57a0:	000f883a 	mov	r7,zero
    57a4:	100d883a 	mov	r6,r2
    57a8:	01400044 	movi	r5,1
    57ac:	8009883a 	mov	r4,r16
    57b0:	00049200 	call	4920 <xTimerGenericCommand>
					}
					Prev_Stable |= (1U << 5);
    57b4:	d0a03e97 	ldw	r2,-32518(gp)
    57b8:	10800814 	ori	r2,r2,32
    57bc:	d0a03e95 	stw	r2,-32518(gp)
					if (Prev_Stable == (Init_Load | 1<<5)) {
    57c0:	d0a03797 	ldw	r2,-32546(gp)
    57c4:	10c00814 	ori	r3,r2,32
    57c8:	d0a03e97 	ldw	r2,-32518(gp)
    57cc:	1880601e 	bne	r3,r2,5950 <Load_Management_Task+0x3b8>
						// No longer needs to be in load manage state
						Ld_Manage_State = 0;
    57d0:	d0203995 	stw	zero,-32538(gp)
    57d4:	00005e06 	br	5950 <Load_Management_Task+0x3b8>
					}

				} else {
					printf("UNSABLE \n");
    57d8:	01020034 	movhi	r4,2048
    57dc:	21003c04 	addi	r4,r4,240
    57e0:	00094bc0 	call	94bc <puts>
					// Finding the lowest bit (lowest priority that is on)
					int pos = 0;
    57e4:	e03ff715 	stw	zero,-36(fp)
					unsigned int mask = 1;
    57e8:	00800044 	movi	r2,1
    57ec:	e0bffb15 	stw	r2,-20(fp)
					if ((Prev_Stable >> 5) == 1) { // If it was stable prior we reset the timer
    57f0:	d0a03e97 	ldw	r2,-32518(gp)
    57f4:	1005d17a 	srai	r2,r2,5
    57f8:	10800058 	cmpnei	r2,r2,1
    57fc:	1000091e 	bne	r2,zero,5824 <Load_Management_Task+0x28c>
						xTimerReset(LoadTimer,0);
    5800:	d4203c97 	ldw	r16,-32526(gp)
    5804:	00030dc0 	call	30dc <xTaskGetTickCount>
    5808:	d8000015 	stw	zero,0(sp)
    580c:	000f883a 	mov	r7,zero
    5810:	100d883a 	mov	r6,r2
    5814:	01400084 	movi	r5,2
    5818:	8009883a 	mov	r4,r16
    581c:	00049200 	call	4920 <xTimerGenericCommand>
    5820:	00004b06 	br	5950 <Load_Management_Task+0x3b8>

					} else if ((LoadTimeExp == 1) || ((Prev_Stable & 0b011111) == Init_Load) ) {
    5824:	d0a03a97 	ldw	r2,-32534(gp)
    5828:	10800060 	cmpeqi	r2,r2,1
    582c:	1000041e 	bne	r2,zero,5840 <Load_Management_Task+0x2a8>
    5830:	d0a03e97 	ldw	r2,-32518(gp)
    5834:	10c007cc 	andi	r3,r2,31
    5838:	d0a03797 	ldw	r2,-32546(gp)
    583c:	1880441e 	bne	r3,r2,5950 <Load_Management_Task+0x3b8>

						LoadTimeExp = 0;
    5840:	d0203a95 	stw	zero,-32534(gp)
						int iso = Prev_Stable & -Prev_Stable;
    5844:	d0a03e97 	ldw	r2,-32518(gp)
    5848:	0087c83a 	sub	r3,zero,r2
    584c:	d0a03e97 	ldw	r2,-32518(gp)
    5850:	1884703a 	and	r2,r3,r2
    5854:	e0bff815 	stw	r2,-32(fp)
						while (iso > 1) {
    5858:	00000606 	br	5874 <Load_Management_Task+0x2dc>
							iso>>=1;
    585c:	e0bff817 	ldw	r2,-32(fp)
    5860:	1005d07a 	srai	r2,r2,1
    5864:	e0bff815 	stw	r2,-32(fp)
							pos++;
    5868:	e0bff717 	ldw	r2,-36(fp)
    586c:	10800044 	addi	r2,r2,1
    5870:	e0bff715 	stw	r2,-36(fp)

					} else if ((LoadTimeExp == 1) || ((Prev_Stable & 0b011111) == Init_Load) ) {

						LoadTimeExp = 0;
						int iso = Prev_Stable & -Prev_Stable;
						while (iso > 1) {
    5874:	e0bff817 	ldw	r2,-32(fp)
    5878:	10800088 	cmpgei	r2,r2,2
    587c:	103ff71e 	bne	r2,zero,585c <__alt_data_end+0xf000585c>
							iso>>=1;
							pos++;
						}
						if (pos == 5) {
    5880:	e0bff717 	ldw	r2,-36(fp)
    5884:	10800160 	cmpeqi	r2,r2,5
    5888:	10001a1e 	bne	r2,zero,58f4 <Load_Management_Task+0x35c>
							// ALL LOADS ARE OFF, don't do any shedding
						} else {
							mask = 1 << pos;
    588c:	00c00044 	movi	r3,1
    5890:	e0bff717 	ldw	r2,-36(fp)
    5894:	1884983a 	sll	r2,r3,r2
    5898:	e0bffb15 	stw	r2,-20(fp)
							Prev_Stable &= ~mask;
    589c:	e0bffb17 	ldw	r2,-20(fp)
    58a0:	0084303a 	nor	r2,zero,r2
    58a4:	d0e03e97 	ldw	r3,-32518(gp)
    58a8:	10c4703a 	and	r2,r2,r3
    58ac:	d0a03e95 	stw	r2,-32518(gp)
							LoadQ = Prev_Stable;
    58b0:	d0a03e97 	ldw	r2,-32518(gp)
    58b4:	e0bffd15 	stw	r2,-12(fp)
							LoadQ &= 0b011111;
    58b8:	e0bffd17 	ldw	r2,-12(fp)
    58bc:	108007cc 	andi	r2,r2,31
    58c0:	e0bffd15 	stw	r2,-12(fp)
							printf("LOAD: %d\n",LoadQ);
    58c4:	e0bffd17 	ldw	r2,-12(fp)
    58c8:	100b883a 	mov	r5,r2
    58cc:	01020034 	movhi	r4,2048
    58d0:	21003904 	addi	r4,r4,228
    58d4:	00093c00 	call	93c0 <printf>
							xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    58d8:	d0a04897 	ldw	r2,-32478(gp)
    58dc:	e0fffd04 	addi	r3,fp,-12
    58e0:	000f883a 	mov	r7,zero
    58e4:	000d883a 	mov	r6,zero
    58e8:	180b883a 	mov	r5,r3
    58ec:	1009883a 	mov	r4,r2
    58f0:	0001edc0 	call	1edc <xQueueGenericSend>

						}
						Prev_Stable = (Prev_Stable & ~(1 << 5)) | (0<< 5);
    58f4:	d0e03e97 	ldw	r3,-32518(gp)
    58f8:	00bff7c4 	movi	r2,-33
    58fc:	1884703a 	and	r2,r3,r2
    5900:	d0a03e95 	stw	r2,-32518(gp)
						xTimerStart(LoadTimer,0);
    5904:	d4203c97 	ldw	r16,-32526(gp)
    5908:	00030dc0 	call	30dc <xTaskGetTickCount>
    590c:	d8000015 	stw	zero,0(sp)
    5910:	000f883a 	mov	r7,zero
    5914:	100d883a 	mov	r6,r2
    5918:	01400044 	movi	r5,1
    591c:	8009883a 	mov	r4,r16
    5920:	00049200 	call	4920 <xTimerGenericCommand>
    5924:	00000a06 	br	5950 <Load_Management_Task+0x3b8>

				}

			}
		} else {
			LoadQ = Current_Switch_State;
    5928:	d0a03697 	ldw	r2,-32550(gp)
    592c:	e0bffd15 	stw	r2,-12(fp)
			xQueueSend(LoadControlQ,(void *)&LoadQ,0);
    5930:	d0a04897 	ldw	r2,-32478(gp)
    5934:	e0fffd04 	addi	r3,fp,-12
    5938:	000f883a 	mov	r7,zero
    593c:	000d883a 	mov	r6,zero
    5940:	180b883a 	mov	r5,r3
    5944:	1009883a 	mov	r4,r2
    5948:	0001edc0 	call	1edc <xQueueGenericSend>
			Ld_Manage_State = 0;
    594c:	d0203995 	stw	zero,-32538(gp)
		}
		vTaskDelay(200);
    5950:	01003204 	movi	r4,200
    5954:	0002e0c0 	call	2e0c <vTaskDelay>

	}
    5958:	003f1506 	br	55b0 <__alt_data_end+0xf00055b0>

0000595c <Stability_Monitor_Task>:
}
static void Stability_Monitor_Task(void *paParams) {
    595c:	defff304 	addi	sp,sp,-52
    5960:	dfc00c15 	stw	ra,48(sp)
    5964:	df000b15 	stw	fp,44(sp)
    5968:	dc400a15 	stw	r17,40(sp)
    596c:	dc000915 	stw	r16,36(sp)
    5970:	df000b04 	addi	fp,sp,44
    5974:	e13ffd15 	stw	r4,-12(fp)
	unsigned int stableQ;
	while (1) {
		float temp_five[5];
		if (xSemaphoreTake(freqSemaphore, portMAX_DELAY) == pdTRUE) {
    5978:	d0a03f97 	ldw	r2,-32514(gp)
    597c:	000f883a 	mov	r7,zero
    5980:	01bfffc4 	movi	r6,-1
    5984:	000b883a 	mov	r5,zero
    5988:	1009883a 	mov	r4,r2
    598c:	000222c0 	call	222c <xQueueGenericReceive>
    5990:	10800058 	cmpnei	r2,r2,1
    5994:	1000ad1e 	bne	r2,zero,5c4c <Stability_Monitor_Task+0x2f0>
			memcpy(temp_five,Prev_Five_Freq, 5*sizeof(float));
    5998:	00820234 	movhi	r2,2056
    599c:	10bfd104 	addi	r2,r2,-188
    59a0:	10c00017 	ldw	r3,0(r2)
    59a4:	e0fff815 	stw	r3,-32(fp)
    59a8:	10c00117 	ldw	r3,4(r2)
    59ac:	e0fff915 	stw	r3,-28(fp)
    59b0:	10c00217 	ldw	r3,8(r2)
    59b4:	e0fffa15 	stw	r3,-24(fp)
    59b8:	10c00317 	ldw	r3,12(r2)
    59bc:	e0fffb15 	stw	r3,-20(fp)
    59c0:	10800417 	ldw	r2,16(r2)
    59c4:	e0bffc15 	stw	r2,-16(fp)
			for (uint8_t i=0;i<4;i++) {
    59c8:	e03ff505 	stb	zero,-44(fp)
    59cc:	00001206 	br	5a18 <Stability_Monitor_Task+0xbc>
				Prev_Five_Freq[i+1] = temp_five[i];
    59d0:	e0bff503 	ldbu	r2,-44(fp)
    59d4:	10c00044 	addi	r3,r2,1
    59d8:	e0bff503 	ldbu	r2,-44(fp)
    59dc:	1085883a 	add	r2,r2,r2
    59e0:	1085883a 	add	r2,r2,r2
    59e4:	e13ff504 	addi	r4,fp,-44
    59e8:	2085883a 	add	r2,r4,r2
    59ec:	10800304 	addi	r2,r2,12
    59f0:	11000017 	ldw	r4,0(r2)
    59f4:	00820234 	movhi	r2,2056
    59f8:	10bfd104 	addi	r2,r2,-188
    59fc:	18c7883a 	add	r3,r3,r3
    5a00:	18c7883a 	add	r3,r3,r3
    5a04:	10c5883a 	add	r2,r2,r3
    5a08:	11000015 	stw	r4,0(r2)
	unsigned int stableQ;
	while (1) {
		float temp_five[5];
		if (xSemaphoreTake(freqSemaphore, portMAX_DELAY) == pdTRUE) {
			memcpy(temp_five,Prev_Five_Freq, 5*sizeof(float));
			for (uint8_t i=0;i<4;i++) {
    5a0c:	e0bff503 	ldbu	r2,-44(fp)
    5a10:	10800044 	addi	r2,r2,1
    5a14:	e0bff505 	stb	r2,-44(fp)
    5a18:	e0bff503 	ldbu	r2,-44(fp)
    5a1c:	10800130 	cmpltui	r2,r2,4
    5a20:	103feb1e 	bne	r2,zero,59d0 <__alt_data_end+0xf00059d0>
				Prev_Five_Freq[i+1] = temp_five[i];
			}
			memcpy(temp_five,Current_ROC_Freq, 5*sizeof(float));
    5a24:	00820234 	movhi	r2,2056
    5a28:	10bfd604 	addi	r2,r2,-168
    5a2c:	10c00017 	ldw	r3,0(r2)
    5a30:	e0fff815 	stw	r3,-32(fp)
    5a34:	10c00117 	ldw	r3,4(r2)
    5a38:	e0fff915 	stw	r3,-28(fp)
    5a3c:	10c00217 	ldw	r3,8(r2)
    5a40:	e0fffa15 	stw	r3,-24(fp)
    5a44:	10c00317 	ldw	r3,12(r2)
    5a48:	e0fffb15 	stw	r3,-20(fp)
    5a4c:	10800417 	ldw	r2,16(r2)
    5a50:	e0bffc15 	stw	r2,-16(fp)
			for (uint8_t i=0;i<4;i++) {
    5a54:	e03ff545 	stb	zero,-43(fp)
    5a58:	00001206 	br	5aa4 <Stability_Monitor_Task+0x148>
				Current_ROC_Freq[i+1] = temp_five[i];
    5a5c:	e0bff543 	ldbu	r2,-43(fp)
    5a60:	10c00044 	addi	r3,r2,1
    5a64:	e0bff543 	ldbu	r2,-43(fp)
    5a68:	1085883a 	add	r2,r2,r2
    5a6c:	1085883a 	add	r2,r2,r2
    5a70:	e13ff504 	addi	r4,fp,-44
    5a74:	2085883a 	add	r2,r4,r2
    5a78:	10800304 	addi	r2,r2,12
    5a7c:	11000017 	ldw	r4,0(r2)
    5a80:	00820234 	movhi	r2,2056
    5a84:	10bfd604 	addi	r2,r2,-168
    5a88:	18c7883a 	add	r3,r3,r3
    5a8c:	18c7883a 	add	r3,r3,r3
    5a90:	10c5883a 	add	r2,r2,r3
    5a94:	11000015 	stw	r4,0(r2)
			memcpy(temp_five,Prev_Five_Freq, 5*sizeof(float));
			for (uint8_t i=0;i<4;i++) {
				Prev_Five_Freq[i+1] = temp_five[i];
			}
			memcpy(temp_five,Current_ROC_Freq, 5*sizeof(float));
			for (uint8_t i=0;i<4;i++) {
    5a98:	e0bff543 	ldbu	r2,-43(fp)
    5a9c:	10800044 	addi	r2,r2,1
    5aa0:	e0bff545 	stb	r2,-43(fp)
    5aa4:	e0bff543 	ldbu	r2,-43(fp)
    5aa8:	10800130 	cmpltui	r2,r2,4
    5aac:	103feb1e 	bne	r2,zero,5a5c <__alt_data_end+0xf0005a5c>
				Current_ROC_Freq[i+1] = temp_five[i];
			}

			Prev_Five_Freq[0] = 16000.0/(double)Freq_Val;	//Freq_val is in count
    5ab0:	d0a04497 	ldw	r2,-32494(gp)
    5ab4:	1009883a 	mov	r4,r2
    5ab8:	0008af80 	call	8af8 <__floatsidf>
    5abc:	1009883a 	mov	r4,r2
    5ac0:	180b883a 	mov	r5,r3
    5ac4:	200d883a 	mov	r6,r4
    5ac8:	280f883a 	mov	r7,r5
    5acc:	0009883a 	mov	r4,zero
    5ad0:	015033f4 	movhi	r5,16591
    5ad4:	29500004 	addi	r5,r5,16384
    5ad8:	00070a00 	call	70a0 <__divdf3>
    5adc:	1009883a 	mov	r4,r2
    5ae0:	180b883a 	mov	r5,r3
    5ae4:	2005883a 	mov	r2,r4
    5ae8:	2807883a 	mov	r3,r5
    5aec:	1009883a 	mov	r4,r2
    5af0:	180b883a 	mov	r5,r3
    5af4:	0008ce40 	call	8ce4 <__truncdfsf2>
    5af8:	1007883a 	mov	r3,r2
    5afc:	00820234 	movhi	r2,2056
    5b00:	10bfd104 	addi	r2,r2,-188
    5b04:	10c00015 	stw	r3,0(r2)
			//printf("%f hz\n", 16000.0/(double)Freq_Val);
			//printf("Count number %d\n", Freq_Val);
			float change_freq = Prev_Five_Freq[0] - Prev_Five_Freq[1];
    5b08:	00820234 	movhi	r2,2056
    5b0c:	10bfd104 	addi	r2,r2,-188
    5b10:	10c00017 	ldw	r3,0(r2)
    5b14:	00820234 	movhi	r2,2056
    5b18:	10bfd104 	addi	r2,r2,-188
    5b1c:	11000117 	ldw	r4,4(r2)
    5b20:	200b883a 	mov	r5,r4
    5b24:	1809883a 	mov	r4,r3
    5b28:	0006a280 	call	6a28 <__subsf3>
    5b2c:	1007883a 	mov	r3,r2
    5b30:	e0fff615 	stw	r3,-40(fp)
			//printf("change freq %f\n", change_freq);
			Current_ROC_Freq[0] = (double)(change_freq * 16000)/ (double)Freq_Val;
    5b34:	01519eb4 	movhi	r5,18042
    5b38:	e13ff617 	ldw	r4,-40(fp)
    5b3c:	000662c0 	call	662c <__mulsf3>
    5b40:	1007883a 	mov	r3,r2
    5b44:	1805883a 	mov	r2,r3
    5b48:	1009883a 	mov	r4,r2
    5b4c:	0008bd40 	call	8bd4 <__extendsfdf2>
    5b50:	1021883a 	mov	r16,r2
    5b54:	1823883a 	mov	r17,r3
    5b58:	d0a04497 	ldw	r2,-32494(gp)
    5b5c:	1009883a 	mov	r4,r2
    5b60:	0008af80 	call	8af8 <__floatsidf>
    5b64:	1009883a 	mov	r4,r2
    5b68:	180b883a 	mov	r5,r3
    5b6c:	200d883a 	mov	r6,r4
    5b70:	280f883a 	mov	r7,r5
    5b74:	8009883a 	mov	r4,r16
    5b78:	880b883a 	mov	r5,r17
    5b7c:	00070a00 	call	70a0 <__divdf3>
    5b80:	1009883a 	mov	r4,r2
    5b84:	180b883a 	mov	r5,r3
    5b88:	2005883a 	mov	r2,r4
    5b8c:	2807883a 	mov	r3,r5
    5b90:	1009883a 	mov	r4,r2
    5b94:	180b883a 	mov	r5,r3
    5b98:	0008ce40 	call	8ce4 <__truncdfsf2>
    5b9c:	1007883a 	mov	r3,r2
    5ba0:	00820234 	movhi	r2,2056
    5ba4:	10bfd604 	addi	r2,r2,-168
    5ba8:	10c00015 	stw	r3,0(r2)
			//printf("Rate of change is %f hz/s \n", Current_ROC_Freq);

			if ((Prev_Five_Freq[0] < Thresh_Val) || (abs(Current_ROC_Freq)>Thresh_ROC)) {
    5bac:	00820234 	movhi	r2,2056
    5bb0:	10bfd104 	addi	r2,r2,-188
    5bb4:	14000017 	ldw	r16,0(r2)
    5bb8:	d0a03b97 	ldw	r2,-32530(gp)
    5bbc:	1009883a 	mov	r4,r2
    5bc0:	0006f7c0 	call	6f7c <__floatsisf>
    5bc4:	1007883a 	mov	r3,r2
    5bc8:	180b883a 	mov	r5,r3
    5bcc:	8009883a 	mov	r4,r16
    5bd0:	00065640 	call	6564 <__lesf2>
    5bd4:	10000616 	blt	r2,zero,5bf0 <Stability_Monitor_Task+0x294>
    5bd8:	d0e04797 	ldw	r3,-32482(gp)
    5bdc:	00820234 	movhi	r2,2056
    5be0:	10bfd604 	addi	r2,r2,-168
    5be4:	1000010e 	bge	r2,zero,5bec <Stability_Monitor_Task+0x290>
    5be8:	0085c83a 	sub	r2,zero,r2
    5bec:	18800b0e 	bge	r3,r2,5c1c <Stability_Monitor_Task+0x2c0>
				//printf("-----UNSTABLE----- \n");
				//printf("Current Freq:%f, Thresh: %d, Current ROC: %f, Thresh: %d \n",Prev_Five_Freq[0],Thresh_Val,Current_ROC_Freq,Thresh_ROC);
				Current_Stable = 0;
    5bf0:	d0204295 	stw	zero,-32502(gp)
				stableQ = Current_Stable;
    5bf4:	d0a04297 	ldw	r2,-32502(gp)
    5bf8:	e0bff715 	stw	r2,-36(fp)
				xQueueSend(StabilityQ, (void *)&stableQ,0);
    5bfc:	d0a04097 	ldw	r2,-32510(gp)
    5c00:	e0fff704 	addi	r3,fp,-36
    5c04:	000f883a 	mov	r7,zero
    5c08:	000d883a 	mov	r6,zero
    5c0c:	180b883a 	mov	r5,r3
    5c10:	1009883a 	mov	r4,r2
    5c14:	0001edc0 	call	1edc <xQueueGenericSend>
    5c18:	00000f06 	br	5c58 <Stability_Monitor_Task+0x2fc>
			} else {
				Current_Stable = 1;
    5c1c:	00800044 	movi	r2,1
    5c20:	d0a04295 	stw	r2,-32502(gp)
				stableQ = Current_Stable;
    5c24:	d0a04297 	ldw	r2,-32502(gp)
    5c28:	e0bff715 	stw	r2,-36(fp)
				xQueueSend(StabilityQ, (void *)&stableQ,0);
    5c2c:	d0a04097 	ldw	r2,-32510(gp)
    5c30:	e0fff704 	addi	r3,fp,-36
    5c34:	000f883a 	mov	r7,zero
    5c38:	000d883a 	mov	r6,zero
    5c3c:	180b883a 	mov	r5,r3
    5c40:	1009883a 	mov	r4,r2
    5c44:	0001edc0 	call	1edc <xQueueGenericSend>
    5c48:	003f4b06 	br	5978 <__alt_data_end+0xf0005978>
			}
			//printf("Stable: %d \n",stableQ);
		} else {
			printf("no freq_semaphore was taken");
    5c4c:	01020034 	movhi	r4,2048
    5c50:	21003f04 	addi	r4,r4,252
    5c54:	00093c00 	call	93c0 <printf>
		}
	}
    5c58:	003f4706 	br	5978 <__alt_data_end+0xf0005978>

00005c5c <Keyboard_Task>:
}
static void Keyboard_Task(void *pvParams) {
    5c5c:	defffd04 	addi	sp,sp,-12
    5c60:	dfc00215 	stw	ra,8(sp)
    5c64:	df000115 	stw	fp,4(sp)
    5c68:	df000104 	addi	fp,sp,4
    5c6c:	e13fff15 	stw	r4,-4(fp)
	// UP:   75
	//DOWN:  72
	//LEFT:  6B
	//RIGHT: 74
	while (1) {
		if (xSemaphoreTake(semaphore, portMAX_DELAY) == pdTRUE) {
    5c70:	d0a03897 	ldw	r2,-32542(gp)
    5c74:	000f883a 	mov	r7,zero
    5c78:	01bfffc4 	movi	r6,-1
    5c7c:	000b883a 	mov	r5,zero
    5c80:	1009883a 	mov	r4,r2
    5c84:	000222c0 	call	222c <xQueueGenericReceive>
    5c88:	10800058 	cmpnei	r2,r2,1
    5c8c:	1000481e 	bne	r2,zero,5db0 <Keyboard_Task+0x154>
			if (byte == 0x75) {
    5c90:	d0a04383 	ldbu	r2,-32498(gp)
    5c94:	10803fcc 	andi	r2,r2,255
    5c98:	10801d58 	cmpnei	r2,r2,117
    5c9c:	1000151e 	bne	r2,zero,5cf4 <Keyboard_Task+0x98>
				// Up case
				if (use_ROC_Thresh == 0) {
    5ca0:	d0a03383 	ldbu	r2,-32562(gp)
    5ca4:	10803fcc 	andi	r2,r2,255
    5ca8:	1000091e 	bne	r2,zero,5cd0 <Keyboard_Task+0x74>
					Thresh_Val +=1;
    5cac:	d0a03b97 	ldw	r2,-32530(gp)
    5cb0:	10800044 	addi	r2,r2,1
    5cb4:	d0a03b95 	stw	r2,-32530(gp)
					printf("%d\n",Thresh_Val);
    5cb8:	d0a03b97 	ldw	r2,-32530(gp)
    5cbc:	100b883a 	mov	r5,r2
    5cc0:	01020034 	movhi	r4,2048
    5cc4:	21004604 	addi	r4,r4,280
    5cc8:	00093c00 	call	93c0 <printf>
    5ccc:	003fe806 	br	5c70 <__alt_data_end+0xf0005c70>
				} else {
					Thresh_ROC += 1;
    5cd0:	d0a04797 	ldw	r2,-32482(gp)
    5cd4:	10800044 	addi	r2,r2,1
    5cd8:	d0a04795 	stw	r2,-32482(gp)
					printf("%d\n",Thresh_ROC);
    5cdc:	d0a04797 	ldw	r2,-32482(gp)
    5ce0:	100b883a 	mov	r5,r2
    5ce4:	01020034 	movhi	r4,2048
    5ce8:	21004604 	addi	r4,r4,280
    5cec:	00093c00 	call	93c0 <printf>
    5cf0:	003fdf06 	br	5c70 <__alt_data_end+0xf0005c70>
				}

			} else if (byte == 0x72) {
    5cf4:	d0a04383 	ldbu	r2,-32498(gp)
    5cf8:	10803fcc 	andi	r2,r2,255
    5cfc:	10801c98 	cmpnei	r2,r2,114
    5d00:	10001b1e 	bne	r2,zero,5d70 <Keyboard_Task+0x114>
				// DOWN case
				if (use_ROC_Thresh ==0) {
    5d04:	d0a03383 	ldbu	r2,-32562(gp)
    5d08:	10803fcc 	andi	r2,r2,255
    5d0c:	10000c1e 	bne	r2,zero,5d40 <Keyboard_Task+0xe4>
					Thresh_Val += -1;
    5d10:	d0a03b97 	ldw	r2,-32530(gp)
    5d14:	10bfffc4 	addi	r2,r2,-1
    5d18:	d0a03b95 	stw	r2,-32530(gp)
					if (Thresh_Val <= 0) {
    5d1c:	d0a03b97 	ldw	r2,-32530(gp)
    5d20:	00800116 	blt	zero,r2,5d28 <Keyboard_Task+0xcc>
						Thresh_Val = 0;
    5d24:	d0203b95 	stw	zero,-32530(gp)
					}
					printf("%d\n",Thresh_Val);
    5d28:	d0a03b97 	ldw	r2,-32530(gp)
    5d2c:	100b883a 	mov	r5,r2
    5d30:	01020034 	movhi	r4,2048
    5d34:	21004604 	addi	r4,r4,280
    5d38:	00093c00 	call	93c0 <printf>
    5d3c:	003fcc06 	br	5c70 <__alt_data_end+0xf0005c70>
				} else {
					Thresh_ROC += -1;
    5d40:	d0a04797 	ldw	r2,-32482(gp)
    5d44:	10bfffc4 	addi	r2,r2,-1
    5d48:	d0a04795 	stw	r2,-32482(gp)
					if (Thresh_ROC <= 0) {
    5d4c:	d0a04797 	ldw	r2,-32482(gp)
    5d50:	00800116 	blt	zero,r2,5d58 <Keyboard_Task+0xfc>
						Thresh_ROC = 0;
    5d54:	d0204795 	stw	zero,-32482(gp)
					}
					printf("%d\n",Thresh_ROC);
    5d58:	d0a04797 	ldw	r2,-32482(gp)
    5d5c:	100b883a 	mov	r5,r2
    5d60:	01020034 	movhi	r4,2048
    5d64:	21004604 	addi	r4,r4,280
    5d68:	00093c00 	call	93c0 <printf>
    5d6c:	003fc006 	br	5c70 <__alt_data_end+0xf0005c70>
				}
			} else if (byte == 0x6B || byte== 0x74) {
    5d70:	d0a04383 	ldbu	r2,-32498(gp)
    5d74:	10803fcc 	andi	r2,r2,255
    5d78:	10801ae0 	cmpeqi	r2,r2,107
    5d7c:	1000041e 	bne	r2,zero,5d90 <Keyboard_Task+0x134>
    5d80:	d0a04383 	ldbu	r2,-32498(gp)
    5d84:	10803fcc 	andi	r2,r2,255
    5d88:	10801d18 	cmpnei	r2,r2,116
    5d8c:	1000041e 	bne	r2,zero,5da0 <Keyboard_Task+0x144>
				use_ROC_Thresh = use_ROC_Thresh ^ 0b1;
    5d90:	d0a03383 	ldbu	r2,-32562(gp)
    5d94:	1080005c 	xori	r2,r2,1
    5d98:	d0a03385 	stb	r2,-32562(gp)
    5d9c:	00000706 	br	5dbc <Keyboard_Task+0x160>
			} else {
				printf("not valid key press \n");
    5da0:	01020034 	movhi	r4,2048
    5da4:	21004704 	addi	r4,r4,284
    5da8:	00094bc0 	call	94bc <puts>
    5dac:	003fb006 	br	5c70 <__alt_data_end+0xf0005c70>
			}
		} else {
			printf("no semaphore was taken");
    5db0:	01020034 	movhi	r4,2048
    5db4:	21004d04 	addi	r4,r4,308
    5db8:	00093c00 	call	93c0 <printf>
		}
	}
    5dbc:	003fac06 	br	5c70 <__alt_data_end+0xf0005c70>

00005dc0 <VGA_Task>:
}

void VGA_Task(void *pvParameters ){
    5dc0:	deffd504 	addi	sp,sp,-172
    5dc4:	dfc02a15 	stw	ra,168(sp)
    5dc8:	df002915 	stw	fp,164(sp)
    5dcc:	df002904 	addi	fp,sp,164
    5dd0:	e13fff15 	stw	r4,-4(fp)


	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
    5dd4:	01020034 	movhi	r4,2048
    5dd8:	21005304 	addi	r4,r4,332
    5ddc:	001c9200 	call	1c920 <alt_up_pixel_buffer_dma_open_dev>
    5de0:	e0bfdb15 	stw	r2,-148(fp)
	if(pixel_buf == NULL){
    5de4:	e0bfdb17 	ldw	r2,-148(fp)
    5de8:	1000031e 	bne	r2,zero,5df8 <VGA_Task+0x38>
		printf("can't find pixel buffer device\n");
    5dec:	01020034 	movhi	r4,2048
    5df0:	21005a04 	addi	r4,r4,360
    5df4:	00094bc0 	call	94bc <puts>
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);
    5df8:	000b883a 	mov	r5,zero
    5dfc:	e13fdb17 	ldw	r4,-148(fp)
    5e00:	001cbe00 	call	1cbe0 <alt_up_pixel_buffer_dma_clear_screen>

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
    5e04:	01020034 	movhi	r4,2048
    5e08:	21006204 	addi	r4,r4,392
    5e0c:	001c6c00 	call	1c6c0 <alt_up_char_buffer_open_dev>
    5e10:	e0bfdc15 	stw	r2,-144(fp)
	if(char_buf == NULL){
    5e14:	e0bfdc17 	ldw	r2,-144(fp)
    5e18:	1000031e 	bne	r2,zero,5e28 <VGA_Task+0x68>
		printf("can't find char buffer device\n");
    5e1c:	01020034 	movhi	r4,2048
    5e20:	21006c04 	addi	r4,r4,432
    5e24:	00094bc0 	call	94bc <puts>
	}
	alt_up_char_buffer_clear(char_buf);
    5e28:	e13fdc17 	ldw	r4,-144(fp)
    5e2c:	001c8c40 	call	1c8c4 <alt_up_char_buffer_clear>



	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 400, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5e30:	d8000115 	stw	zero,4(sp)
    5e34:	00900034 	movhi	r2,16384
    5e38:	10bfffc4 	addi	r2,r2,-1
    5e3c:	d8800015 	stw	r2,0(sp)
    5e40:	01c03204 	movi	r7,200
    5e44:	01806404 	movi	r6,400
    5e48:	01401904 	movi	r5,100
    5e4c:	e13fdb17 	ldw	r4,-148(fp)
    5e50:	001cfe40 	call	1cfe4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 400, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5e54:	d8000115 	stw	zero,4(sp)
    5e58:	00900034 	movhi	r2,16384
    5e5c:	10bfffc4 	addi	r2,r2,-1
    5e60:	d8800015 	stw	r2,0(sp)
    5e64:	01c04b04 	movi	r7,300
    5e68:	01806404 	movi	r6,400
    5e6c:	01401904 	movi	r5,100
    5e70:	e13fdb17 	ldw	r4,-148(fp)
    5e74:	001cfe40 	call	1cfe4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5e78:	d8000115 	stw	zero,4(sp)
    5e7c:	00900034 	movhi	r2,16384
    5e80:	10bfffc4 	addi	r2,r2,-1
    5e84:	d8800015 	stw	r2,0(sp)
    5e88:	01c03204 	movi	r7,200
    5e8c:	01800c84 	movi	r6,50
    5e90:	01401904 	movi	r5,100
    5e94:	e13fdb17 	ldw	r4,-148(fp)
    5e98:	001d1f40 	call	1d1f4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
    5e9c:	d8000115 	stw	zero,4(sp)
    5ea0:	00900034 	movhi	r2,16384
    5ea4:	10bfffc4 	addi	r2,r2,-1
    5ea8:	d8800015 	stw	r2,0(sp)
    5eac:	01c04b04 	movi	r7,300
    5eb0:	01803704 	movi	r6,220
    5eb4:	01401904 	movi	r5,100
    5eb8:	e13fdb17 	ldw	r4,-148(fp)
    5ebc:	001d1f40 	call	1d1f4 <alt_up_pixel_buffer_dma_draw_vline>

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
    5ec0:	01c00104 	movi	r7,4
    5ec4:	01800104 	movi	r6,4
    5ec8:	01420034 	movhi	r5,2048
    5ecc:	29407404 	addi	r5,r5,464
    5ed0:	e13fdc17 	ldw	r4,-144(fp)
    5ed4:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
    5ed8:	01c001c4 	movi	r7,7
    5edc:	01800284 	movi	r6,10
    5ee0:	01420034 	movhi	r5,2048
    5ee4:	29407804 	addi	r5,r5,480
    5ee8:	e13fdc17 	ldw	r4,-144(fp)
    5eec:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
    5ef0:	01c00304 	movi	r7,12
    5ef4:	01800284 	movi	r6,10
    5ef8:	01420034 	movhi	r5,2048
    5efc:	29407904 	addi	r5,r5,484
    5f00:	e13fdc17 	ldw	r4,-144(fp)
    5f04:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
    5f08:	01c00444 	movi	r7,17
    5f0c:	01800284 	movi	r6,10
    5f10:	01420034 	movhi	r5,2048
    5f14:	29407a04 	addi	r5,r5,488
    5f18:	e13fdc17 	ldw	r4,-144(fp)
    5f1c:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "46", 10, 22);
    5f20:	01c00584 	movi	r7,22
    5f24:	01800284 	movi	r6,10
    5f28:	01420034 	movhi	r5,2048
    5f2c:	29407b04 	addi	r5,r5,492
    5f30:	e13fdc17 	ldw	r4,-144(fp)
    5f34:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
    5f38:	01c00684 	movi	r7,26
    5f3c:	01800104 	movi	r6,4
    5f40:	01420034 	movhi	r5,2048
    5f44:	29407c04 	addi	r5,r5,496
    5f48:	e13fdc17 	ldw	r4,-144(fp)
    5f4c:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
    5f50:	01c00704 	movi	r7,28
    5f54:	01800284 	movi	r6,10
    5f58:	01420034 	movhi	r5,2048
    5f5c:	29407f04 	addi	r5,r5,508
    5f60:	e13fdc17 	ldw	r4,-144(fp)
    5f64:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
    5f68:	01c00784 	movi	r7,30
    5f6c:	01800284 	movi	r6,10
    5f70:	01420034 	movhi	r5,2048
    5f74:	29408004 	addi	r5,r5,512
    5f78:	e13fdc17 	ldw	r4,-144(fp)
    5f7c:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
    5f80:	01c00804 	movi	r7,32
    5f84:	01800284 	movi	r6,10
    5f88:	01420034 	movhi	r5,2048
    5f8c:	29408104 	addi	r5,r5,516
    5f90:	e13fdc17 	ldw	r4,-144(fp)
    5f94:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
    5f98:	01c00884 	movi	r7,34
    5f9c:	01800244 	movi	r6,9
    5fa0:	01420034 	movhi	r5,2048
    5fa4:	29408204 	addi	r5,r5,520
    5fa8:	e13fdc17 	ldw	r4,-144(fp)
    5fac:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);
    5fb0:	01c00904 	movi	r7,36
    5fb4:	01800244 	movi	r6,9
    5fb8:	01420034 	movhi	r5,2048
    5fbc:	29408304 	addi	r5,r5,524
    5fc0:	e13fdc17 	ldw	r4,-144(fp)
    5fc4:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "Lower Threshold", 10, 45);
    5fc8:	01c00b44 	movi	r7,45
    5fcc:	01800284 	movi	r6,10
    5fd0:	01420034 	movhi	r5,2048
    5fd4:	29408404 	addi	r5,r5,528
    5fd8:	e13fdc17 	ldw	r4,-144(fp)
    5fdc:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf, "RoC Threshold", 10, 48);
    5fe0:	01c00c04 	movi	r7,48
    5fe4:	01800284 	movi	r6,10
    5fe8:	01420034 	movhi	r5,2048
    5fec:	29408804 	addi	r5,r5,544
    5ff0:	e13fdc17 	ldw	r4,-144(fp)
    5ff4:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>



	int i = 0, j = 0;
    5ff8:	e03fdd15 	stw	zero,-140(fp)
    5ffc:	e03fda15 	stw	zero,-152(fp)
	char buffer1[50];
	char buffer2[50];
	while(1){

		//receive frequency data from queue
		printf("VGA\n");
    6000:	01020034 	movhi	r4,2048
    6004:	21008c04 	addi	r4,r4,560
    6008:	00094bc0 	call	94bc <puts>
		//clear old graph to draw new graph
		sprintf(buffer1, "%d", Thresh_Val);
    600c:	d0e03b97 	ldw	r3,-32530(gp)
    6010:	e0bfe604 	addi	r2,fp,-104
    6014:	180d883a 	mov	r6,r3
    6018:	01420034 	movhi	r5,2048
    601c:	29408d04 	addi	r5,r5,564
    6020:	1009883a 	mov	r4,r2
    6024:	00095280 	call	9528 <sprintf>
		sprintf(buffer2, "%d", Thresh_ROC);
    6028:	d0e04797 	ldw	r3,-32482(gp)
    602c:	e0bff284 	addi	r2,fp,-54
    6030:	180d883a 	mov	r6,r3
    6034:	01420034 	movhi	r5,2048
    6038:	29408d04 	addi	r5,r5,564
    603c:	1009883a 	mov	r4,r2
    6040:	00095280 	call	9528 <sprintf>
		alt_up_char_buffer_string(char_buf, buffer1 , 30, 45);
    6044:	e0bfe604 	addi	r2,fp,-104
    6048:	01c00b44 	movi	r7,45
    604c:	01800784 	movi	r6,30
    6050:	100b883a 	mov	r5,r2
    6054:	e13fdc17 	ldw	r4,-144(fp)
    6058:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf, buffer2 , 30, 48);
    605c:	e0bff284 	addi	r2,fp,-54
    6060:	01c00c04 	movi	r7,48
    6064:	01800784 	movi	r6,30
    6068:	100b883a 	mov	r5,r2
    606c:	e13fdc17 	ldw	r4,-144(fp)
    6070:	001c7c80 	call	1c7c8 <alt_up_char_buffer_string>
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
    6074:	d8000215 	stw	zero,8(sp)
    6078:	d8000115 	stw	zero,4(sp)
    607c:	008031c4 	movi	r2,199
    6080:	d8800015 	stw	r2,0(sp)
    6084:	01c09fc4 	movi	r7,639
    6088:	000d883a 	mov	r6,zero
    608c:	01401944 	movi	r5,101
    6090:	e13fdb17 	ldw	r4,-148(fp)
    6094:	001cd080 	call	1cd08 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);
    6098:	d8000215 	stw	zero,8(sp)
    609c:	d8000115 	stw	zero,4(sp)
    60a0:	00804ac4 	movi	r2,299
    60a4:	d8800015 	stw	r2,0(sp)
    60a8:	01c09fc4 	movi	r7,639
    60ac:	01803244 	movi	r6,201
    60b0:	01401944 	movi	r5,101
    60b4:	e13fdb17 	ldw	r4,-148(fp)
    60b8:	001cd080 	call	1cd08 <alt_up_pixel_buffer_dma_draw_box>

		for(j=0;j<5;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    60bc:	e03fda15 	stw	zero,-152(fp)
    60c0:	00012206 	br	654c <VGA_Task+0x78c>
			if (((int)(Prev_Five_Freq[(i+j)%5]) > MIN_FREQ) && ((int)(Prev_Five_Freq[(i+j+1)%5]) > MIN_FREQ)){
    60c4:	e0ffdd17 	ldw	r3,-140(fp)
    60c8:	e0bfda17 	ldw	r2,-152(fp)
    60cc:	1885883a 	add	r2,r3,r2
    60d0:	00c00144 	movi	r3,5
    60d4:	10c7283a 	div	r3,r2,r3
    60d8:	18c00164 	muli	r3,r3,5
    60dc:	10c7c83a 	sub	r3,r2,r3
    60e0:	00820234 	movhi	r2,2056
    60e4:	10bfd104 	addi	r2,r2,-188
    60e8:	18c7883a 	add	r3,r3,r3
    60ec:	18c7883a 	add	r3,r3,r3
    60f0:	10c5883a 	add	r2,r2,r3
    60f4:	10c00017 	ldw	r3,0(r2)
    60f8:	1809883a 	mov	r4,r3
    60fc:	0006f0c0 	call	6f0c <__fixsfsi>
    6100:	1009883a 	mov	r4,r2
    6104:	0008af80 	call	8af8 <__floatsidf>
    6108:	1011883a 	mov	r8,r2
    610c:	1813883a 	mov	r9,r3
    6110:	000d883a 	mov	r6,zero
    6114:	01d011f4 	movhi	r7,16455
    6118:	39e00004 	addi	r7,r7,-32768
    611c:	4009883a 	mov	r4,r8
    6120:	480b883a 	mov	r5,r9
    6124:	00079880 	call	7988 <__gedf2>
    6128:	0081050e 	bge	zero,r2,6540 <VGA_Task+0x780>
    612c:	e0ffdd17 	ldw	r3,-140(fp)
    6130:	e0bfda17 	ldw	r2,-152(fp)
    6134:	1885883a 	add	r2,r3,r2
    6138:	10800044 	addi	r2,r2,1
    613c:	00c00144 	movi	r3,5
    6140:	10c7283a 	div	r3,r2,r3
    6144:	18c00164 	muli	r3,r3,5
    6148:	10c7c83a 	sub	r3,r2,r3
    614c:	00820234 	movhi	r2,2056
    6150:	10bfd104 	addi	r2,r2,-188
    6154:	18c7883a 	add	r3,r3,r3
    6158:	18c7883a 	add	r3,r3,r3
    615c:	10c5883a 	add	r2,r2,r3
    6160:	10c00017 	ldw	r3,0(r2)
    6164:	1809883a 	mov	r4,r3
    6168:	0006f0c0 	call	6f0c <__fixsfsi>
    616c:	1009883a 	mov	r4,r2
    6170:	0008af80 	call	8af8 <__floatsidf>
    6174:	1011883a 	mov	r8,r2
    6178:	1813883a 	mov	r9,r3
    617c:	000d883a 	mov	r6,zero
    6180:	01d011f4 	movhi	r7,16455
    6184:	39e00004 	addi	r7,r7,-32768
    6188:	4009883a 	mov	r4,r8
    618c:	480b883a 	mov	r5,r9
    6190:	00079880 	call	7988 <__gedf2>
    6194:	0080ea0e 	bge	zero,r2,6540 <VGA_Task+0x780>
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
    6198:	e0bfda17 	ldw	r2,-152(fp)
    619c:	10800ca4 	muli	r2,r2,50
    61a0:	10801944 	addi	r2,r2,101
    61a4:	e0bfde15 	stw	r2,-136(fp)
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (Prev_Five_Freq[(i+j)%5] - MIN_FREQ));
    61a8:	e0ffdd17 	ldw	r3,-140(fp)
    61ac:	e0bfda17 	ldw	r2,-152(fp)
    61b0:	1885883a 	add	r2,r3,r2
    61b4:	00c00144 	movi	r3,5
    61b8:	10c7283a 	div	r3,r2,r3
    61bc:	18c00164 	muli	r3,r3,5
    61c0:	10c7c83a 	sub	r3,r2,r3
    61c4:	00820234 	movhi	r2,2056
    61c8:	10bfd104 	addi	r2,r2,-188
    61cc:	18c7883a 	add	r3,r3,r3
    61d0:	18c7883a 	add	r3,r3,r3
    61d4:	10c5883a 	add	r2,r2,r3
    61d8:	10c00017 	ldw	r3,0(r2)
    61dc:	1809883a 	mov	r4,r3
    61e0:	0008bd40 	call	8bd4 <__extendsfdf2>
    61e4:	1011883a 	mov	r8,r2
    61e8:	1813883a 	mov	r9,r3
    61ec:	000d883a 	mov	r6,zero
    61f0:	01d011f4 	movhi	r7,16455
    61f4:	39e00004 	addi	r7,r7,-32768
    61f8:	4009883a 	mov	r4,r8
    61fc:	480b883a 	mov	r5,r9
    6200:	000817c0 	call	817c <__subdf3>
    6204:	1009883a 	mov	r4,r2
    6208:	180b883a 	mov	r5,r3
    620c:	2005883a 	mov	r2,r4
    6210:	2807883a 	mov	r3,r5
    6214:	000d883a 	mov	r6,zero
    6218:	01d00d34 	movhi	r7,16436
    621c:	1009883a 	mov	r4,r2
    6220:	180b883a 	mov	r5,r3
    6224:	0007a640 	call	7a64 <__muldf3>
    6228:	1009883a 	mov	r4,r2
    622c:	180b883a 	mov	r5,r3
    6230:	2005883a 	mov	r2,r4
    6234:	2807883a 	mov	r3,r5
    6238:	100d883a 	mov	r6,r2
    623c:	180f883a 	mov	r7,r3
    6240:	0009883a 	mov	r4,zero
    6244:	01501a74 	movhi	r5,16489
    6248:	29780004 	addi	r5,r5,-8192
    624c:	000817c0 	call	817c <__subdf3>
    6250:	1009883a 	mov	r4,r2
    6254:	180b883a 	mov	r5,r3
    6258:	2005883a 	mov	r2,r4
    625c:	2807883a 	mov	r3,r5
    6260:	1009883a 	mov	r4,r2
    6264:	180b883a 	mov	r5,r3
    6268:	0008a780 	call	8a78 <__fixdfsi>
    626c:	e0bfdf15 	stw	r2,-132(fp)

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
    6270:	e0bfda17 	ldw	r2,-152(fp)
    6274:	10800044 	addi	r2,r2,1
    6278:	10800ca4 	muli	r2,r2,50
    627c:	10801944 	addi	r2,r2,101
    6280:	e0bfe015 	stw	r2,-128(fp)
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (Prev_Five_Freq[(i+j+1)%5] - MIN_FREQ));
    6284:	e0ffdd17 	ldw	r3,-140(fp)
    6288:	e0bfda17 	ldw	r2,-152(fp)
    628c:	1885883a 	add	r2,r3,r2
    6290:	10800044 	addi	r2,r2,1
    6294:	00c00144 	movi	r3,5
    6298:	10c7283a 	div	r3,r2,r3
    629c:	18c00164 	muli	r3,r3,5
    62a0:	10c7c83a 	sub	r3,r2,r3
    62a4:	00820234 	movhi	r2,2056
    62a8:	10bfd104 	addi	r2,r2,-188
    62ac:	18c7883a 	add	r3,r3,r3
    62b0:	18c7883a 	add	r3,r3,r3
    62b4:	10c5883a 	add	r2,r2,r3
    62b8:	10c00017 	ldw	r3,0(r2)
    62bc:	1809883a 	mov	r4,r3
    62c0:	0008bd40 	call	8bd4 <__extendsfdf2>
    62c4:	1011883a 	mov	r8,r2
    62c8:	1813883a 	mov	r9,r3
    62cc:	000d883a 	mov	r6,zero
    62d0:	01d011f4 	movhi	r7,16455
    62d4:	39e00004 	addi	r7,r7,-32768
    62d8:	4009883a 	mov	r4,r8
    62dc:	480b883a 	mov	r5,r9
    62e0:	000817c0 	call	817c <__subdf3>
    62e4:	1009883a 	mov	r4,r2
    62e8:	180b883a 	mov	r5,r3
    62ec:	2005883a 	mov	r2,r4
    62f0:	2807883a 	mov	r3,r5
    62f4:	000d883a 	mov	r6,zero
    62f8:	01d00d34 	movhi	r7,16436
    62fc:	1009883a 	mov	r4,r2
    6300:	180b883a 	mov	r5,r3
    6304:	0007a640 	call	7a64 <__muldf3>
    6308:	1009883a 	mov	r4,r2
    630c:	180b883a 	mov	r5,r3
    6310:	2005883a 	mov	r2,r4
    6314:	2807883a 	mov	r3,r5
    6318:	100d883a 	mov	r6,r2
    631c:	180f883a 	mov	r7,r3
    6320:	0009883a 	mov	r4,zero
    6324:	01501a74 	movhi	r5,16489
    6328:	29780004 	addi	r5,r5,-8192
    632c:	000817c0 	call	817c <__subdf3>
    6330:	1009883a 	mov	r4,r2
    6334:	180b883a 	mov	r5,r3
    6338:	2005883a 	mov	r2,r4
    633c:	2807883a 	mov	r3,r5
    6340:	1009883a 	mov	r4,r2
    6344:	180b883a 	mov	r5,r3
    6348:	0008a780 	call	8a78 <__fixdfsi>
    634c:	e0bfe115 	stw	r2,-124(fp)

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
    6350:	e0bfda17 	ldw	r2,-152(fp)
    6354:	10800ca4 	muli	r2,r2,50
    6358:	10801944 	addi	r2,r2,101
    635c:	e0bfe215 	stw	r2,-120(fp)
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * Current_ROC_Freq[(i+j)%5]);
    6360:	e0ffdd17 	ldw	r3,-140(fp)
    6364:	e0bfda17 	ldw	r2,-152(fp)
    6368:	1885883a 	add	r2,r3,r2
    636c:	00c00144 	movi	r3,5
    6370:	10c7283a 	div	r3,r2,r3
    6374:	18c00164 	muli	r3,r3,5
    6378:	10c7c83a 	sub	r3,r2,r3
    637c:	00820234 	movhi	r2,2056
    6380:	10bfd604 	addi	r2,r2,-168
    6384:	18c7883a 	add	r3,r3,r3
    6388:	18c7883a 	add	r3,r3,r3
    638c:	10c5883a 	add	r2,r2,r3
    6390:	10c00017 	ldw	r3,0(r2)
    6394:	1809883a 	mov	r4,r3
    6398:	0008bd40 	call	8bd4 <__extendsfdf2>
    639c:	1011883a 	mov	r8,r2
    63a0:	1813883a 	mov	r9,r3
    63a4:	000d883a 	mov	r6,zero
    63a8:	01cff834 	movhi	r7,16352
    63ac:	4009883a 	mov	r4,r8
    63b0:	480b883a 	mov	r5,r9
    63b4:	0007a640 	call	7a64 <__muldf3>
    63b8:	1009883a 	mov	r4,r2
    63bc:	180b883a 	mov	r5,r3
    63c0:	2005883a 	mov	r2,r4
    63c4:	2807883a 	mov	r3,r5
    63c8:	100d883a 	mov	r6,r2
    63cc:	180f883a 	mov	r7,r3
    63d0:	0009883a 	mov	r4,zero
    63d4:	01501c34 	movhi	r5,16496
    63d8:	294c0004 	addi	r5,r5,12288
    63dc:	000817c0 	call	817c <__subdf3>
    63e0:	1009883a 	mov	r4,r2
    63e4:	180b883a 	mov	r5,r3
    63e8:	2005883a 	mov	r2,r4
    63ec:	2807883a 	mov	r3,r5
    63f0:	1009883a 	mov	r4,r2
    63f4:	180b883a 	mov	r5,r3
    63f8:	0008a780 	call	8a78 <__fixdfsi>
    63fc:	e0bfe315 	stw	r2,-116(fp)

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
    6400:	e0bfda17 	ldw	r2,-152(fp)
    6404:	10800044 	addi	r2,r2,1
    6408:	10800ca4 	muli	r2,r2,50
    640c:	10801944 	addi	r2,r2,101
    6410:	e0bfe415 	stw	r2,-112(fp)
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * Current_ROC_Freq[(i+j+1)%5]);
    6414:	e0ffdd17 	ldw	r3,-140(fp)
    6418:	e0bfda17 	ldw	r2,-152(fp)
    641c:	1885883a 	add	r2,r3,r2
    6420:	10800044 	addi	r2,r2,1
    6424:	00c00144 	movi	r3,5
    6428:	10c7283a 	div	r3,r2,r3
    642c:	18c00164 	muli	r3,r3,5
    6430:	10c7c83a 	sub	r3,r2,r3
    6434:	00820234 	movhi	r2,2056
    6438:	10bfd604 	addi	r2,r2,-168
    643c:	18c7883a 	add	r3,r3,r3
    6440:	18c7883a 	add	r3,r3,r3
    6444:	10c5883a 	add	r2,r2,r3
    6448:	10c00017 	ldw	r3,0(r2)
    644c:	1809883a 	mov	r4,r3
    6450:	0008bd40 	call	8bd4 <__extendsfdf2>
    6454:	1011883a 	mov	r8,r2
    6458:	1813883a 	mov	r9,r3
    645c:	000d883a 	mov	r6,zero
    6460:	01cff834 	movhi	r7,16352
    6464:	4009883a 	mov	r4,r8
    6468:	480b883a 	mov	r5,r9
    646c:	0007a640 	call	7a64 <__muldf3>
    6470:	1009883a 	mov	r4,r2
    6474:	180b883a 	mov	r5,r3
    6478:	2005883a 	mov	r2,r4
    647c:	2807883a 	mov	r3,r5
    6480:	100d883a 	mov	r6,r2
    6484:	180f883a 	mov	r7,r3
    6488:	0009883a 	mov	r4,zero
    648c:	01501c34 	movhi	r5,16496
    6490:	294c0004 	addi	r5,r5,12288
    6494:	000817c0 	call	817c <__subdf3>
    6498:	1009883a 	mov	r4,r2
    649c:	180b883a 	mov	r5,r3
    64a0:	2005883a 	mov	r2,r4
    64a4:	2807883a 	mov	r3,r5
    64a8:	1009883a 	mov	r4,r2
    64ac:	180b883a 	mov	r5,r3
    64b0:	0008a780 	call	8a78 <__fixdfsi>
    64b4:	e0bfe515 	stw	r2,-108(fp)

				//printf("first: %f\n", Prev_Five_Freq[0]);
				//printf("last value: %f\n", Prev_Five_Freq[4]);
				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
    64b8:	e0bfde17 	ldw	r2,-136(fp)
    64bc:	1009883a 	mov	r4,r2
    64c0:	e0bfdf17 	ldw	r2,-132(fp)
    64c4:	100b883a 	mov	r5,r2
    64c8:	e0bfe017 	ldw	r2,-128(fp)
    64cc:	100d883a 	mov	r6,r2
    64d0:	e0bfe117 	ldw	r2,-124(fp)
    64d4:	1007883a 	mov	r3,r2
    64d8:	d8000215 	stw	zero,8(sp)
    64dc:	0080ffc4 	movi	r2,1023
    64e0:	d8800115 	stw	r2,4(sp)
    64e4:	d8c00015 	stw	r3,0(sp)
    64e8:	300f883a 	mov	r7,r6
    64ec:	280d883a 	mov	r6,r5
    64f0:	200b883a 	mov	r5,r4
    64f4:	e13fdb17 	ldw	r4,-148(fp)
    64f8:	001d58c0 	call	1d58c <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
    64fc:	e0bfe217 	ldw	r2,-120(fp)
    6500:	1009883a 	mov	r4,r2
    6504:	e0bfe317 	ldw	r2,-116(fp)
    6508:	100b883a 	mov	r5,r2
    650c:	e0bfe417 	ldw	r2,-112(fp)
    6510:	100d883a 	mov	r6,r2
    6514:	e0bfe517 	ldw	r2,-108(fp)
    6518:	1007883a 	mov	r3,r2
    651c:	d8000215 	stw	zero,8(sp)
    6520:	0080ffc4 	movi	r2,1023
    6524:	d8800115 	stw	r2,4(sp)
    6528:	d8c00015 	stw	r3,0(sp)
    652c:	300f883a 	mov	r7,r6
    6530:	280d883a 	mov	r6,r5
    6534:	200b883a 	mov	r5,r4
    6538:	e13fdb17 	ldw	r4,-148(fp)
    653c:	001d58c0 	call	1d58c <alt_up_pixel_buffer_dma_draw_line>
		alt_up_char_buffer_string(char_buf, buffer1 , 30, 45);
		alt_up_char_buffer_string(char_buf, buffer2 , 30, 48);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		for(j=0;j<5;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
    6540:	e0bfda17 	ldw	r2,-152(fp)
    6544:	10800044 	addi	r2,r2,1
    6548:	e0bfda15 	stw	r2,-152(fp)
    654c:	e0bfda17 	ldw	r2,-152(fp)
    6550:	10800150 	cmplti	r2,r2,5
    6554:	103edb1e 	bne	r2,zero,60c4 <__alt_data_end+0xf00060c4>
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}

		vTaskDelay(pdMS_TO_TICKS(500));
    6558:	01007d04 	movi	r4,500
    655c:	0002e0c0 	call	2e0c <vTaskDelay>

	}
    6560:	003ea706 	br	6000 <__alt_data_end+0xf0006000>

00006564 <__lesf2>:
    6564:	2004d5fa 	srli	r2,r4,23
    6568:	280cd5fa 	srli	r6,r5,23
    656c:	00c02034 	movhi	r3,128
    6570:	18ffffc4 	addi	r3,r3,-1
    6574:	10803fcc 	andi	r2,r2,255
    6578:	01c03fc4 	movi	r7,255
    657c:	1910703a 	and	r8,r3,r4
    6580:	31803fcc 	andi	r6,r6,255
    6584:	1946703a 	and	r3,r3,r5
    6588:	2008d7fa 	srli	r4,r4,31
    658c:	280ad7fa 	srli	r5,r5,31
    6590:	11c01b26 	beq	r2,r7,6600 <__lesf2+0x9c>
    6594:	01c03fc4 	movi	r7,255
    6598:	31c01126 	beq	r6,r7,65e0 <__lesf2+0x7c>
    659c:	1000071e 	bne	r2,zero,65bc <__lesf2+0x58>
    65a0:	400f003a 	cmpeq	r7,r8,zero
    65a4:	21003fcc 	andi	r4,r4,255
    65a8:	3000081e 	bne	r6,zero,65cc <__lesf2+0x68>
    65ac:	1800071e 	bne	r3,zero,65cc <__lesf2+0x68>
    65b0:	0005883a 	mov	r2,zero
    65b4:	40000f1e 	bne	r8,zero,65f4 <__lesf2+0x90>
    65b8:	f800283a 	ret
    65bc:	21003fcc 	andi	r4,r4,255
    65c0:	30000a1e 	bne	r6,zero,65ec <__lesf2+0x88>
    65c4:	18000b26 	beq	r3,zero,65f4 <__lesf2+0x90>
    65c8:	000f883a 	mov	r7,zero
    65cc:	29403fcc 	andi	r5,r5,255
    65d0:	38000726 	beq	r7,zero,65f0 <__lesf2+0x8c>
    65d4:	28000826 	beq	r5,zero,65f8 <__lesf2+0x94>
    65d8:	00800044 	movi	r2,1
    65dc:	f800283a 	ret
    65e0:	183fee26 	beq	r3,zero,659c <__alt_data_end+0xf000659c>
    65e4:	00800084 	movi	r2,2
    65e8:	f800283a 	ret
    65ec:	29403fcc 	andi	r5,r5,255
    65f0:	21400626 	beq	r4,r5,660c <__lesf2+0xa8>
    65f4:	203ff826 	beq	r4,zero,65d8 <__alt_data_end+0xf00065d8>
    65f8:	00bfffc4 	movi	r2,-1
    65fc:	f800283a 	ret
    6600:	403fe426 	beq	r8,zero,6594 <__alt_data_end+0xf0006594>
    6604:	00800084 	movi	r2,2
    6608:	f800283a 	ret
    660c:	30bff916 	blt	r6,r2,65f4 <__alt_data_end+0xf00065f4>
    6610:	11800216 	blt	r2,r6,661c <__lesf2+0xb8>
    6614:	1a3ff736 	bltu	r3,r8,65f4 <__alt_data_end+0xf00065f4>
    6618:	40c0022e 	bgeu	r8,r3,6624 <__lesf2+0xc0>
    661c:	203fee1e 	bne	r4,zero,65d8 <__alt_data_end+0xf00065d8>
    6620:	003ff506 	br	65f8 <__alt_data_end+0xf00065f8>
    6624:	0005883a 	mov	r2,zero
    6628:	f800283a 	ret

0000662c <__mulsf3>:
    662c:	defff504 	addi	sp,sp,-44
    6630:	dc000115 	stw	r16,4(sp)
    6634:	2020d5fa 	srli	r16,r4,23
    6638:	dd400615 	stw	r21,24(sp)
    663c:	202ad7fa 	srli	r21,r4,31
    6640:	dc800315 	stw	r18,12(sp)
    6644:	04802034 	movhi	r18,128
    6648:	df000915 	stw	fp,36(sp)
    664c:	dd000515 	stw	r20,20(sp)
    6650:	94bfffc4 	addi	r18,r18,-1
    6654:	dfc00a15 	stw	ra,40(sp)
    6658:	ddc00815 	stw	r23,32(sp)
    665c:	dd800715 	stw	r22,28(sp)
    6660:	dcc00415 	stw	r19,16(sp)
    6664:	dc400215 	stw	r17,8(sp)
    6668:	84003fcc 	andi	r16,r16,255
    666c:	9124703a 	and	r18,r18,r4
    6670:	a829883a 	mov	r20,r21
    6674:	af003fcc 	andi	fp,r21,255
    6678:	80005426 	beq	r16,zero,67cc <__mulsf3+0x1a0>
    667c:	00803fc4 	movi	r2,255
    6680:	80802f26 	beq	r16,r2,6740 <__mulsf3+0x114>
    6684:	91002034 	orhi	r4,r18,128
    6688:	202490fa 	slli	r18,r4,3
    668c:	843fe044 	addi	r16,r16,-127
    6690:	0023883a 	mov	r17,zero
    6694:	002f883a 	mov	r23,zero
    6698:	2804d5fa 	srli	r2,r5,23
    669c:	282cd7fa 	srli	r22,r5,31
    66a0:	01002034 	movhi	r4,128
    66a4:	213fffc4 	addi	r4,r4,-1
    66a8:	10803fcc 	andi	r2,r2,255
    66ac:	2166703a 	and	r19,r4,r5
    66b0:	b1803fcc 	andi	r6,r22,255
    66b4:	10004c26 	beq	r2,zero,67e8 <__mulsf3+0x1bc>
    66b8:	00c03fc4 	movi	r3,255
    66bc:	10c04726 	beq	r2,r3,67dc <__mulsf3+0x1b0>
    66c0:	99002034 	orhi	r4,r19,128
    66c4:	202690fa 	slli	r19,r4,3
    66c8:	10bfe044 	addi	r2,r2,-127
    66cc:	0007883a 	mov	r3,zero
    66d0:	80a1883a 	add	r16,r16,r2
    66d4:	010003c4 	movi	r4,15
    66d8:	1c44b03a 	or	r2,r3,r17
    66dc:	b56af03a 	xor	r21,r22,r21
    66e0:	81c00044 	addi	r7,r16,1
    66e4:	20806b36 	bltu	r4,r2,6894 <__mulsf3+0x268>
    66e8:	100490ba 	slli	r2,r2,2
    66ec:	01000034 	movhi	r4,0
    66f0:	2119c004 	addi	r4,r4,26368
    66f4:	1105883a 	add	r2,r2,r4
    66f8:	10800017 	ldw	r2,0(r2)
    66fc:	1000683a 	jmp	r2
    6700:	00006894 	movui	zero,418
    6704:	00006754 	movui	zero,413
    6708:	00006754 	movui	zero,413
    670c:	00006750 	cmplti	zero,zero,413
    6710:	00006878 	rdprs	zero,zero,417
    6714:	00006878 	rdprs	zero,zero,417
    6718:	00006864 	muli	zero,zero,417
    671c:	00006750 	cmplti	zero,zero,413
    6720:	00006878 	rdprs	zero,zero,417
    6724:	00006864 	muli	zero,zero,417
    6728:	00006878 	rdprs	zero,zero,417
    672c:	00006750 	cmplti	zero,zero,413
    6730:	00006884 	movi	zero,418
    6734:	00006884 	movi	zero,418
    6738:	00006884 	movi	zero,418
    673c:	00006960 	cmpeqi	zero,zero,421
    6740:	90003b1e 	bne	r18,zero,6830 <__mulsf3+0x204>
    6744:	04400204 	movi	r17,8
    6748:	05c00084 	movi	r23,2
    674c:	003fd206 	br	6698 <__alt_data_end+0xf0006698>
    6750:	302b883a 	mov	r21,r6
    6754:	00800084 	movi	r2,2
    6758:	18802626 	beq	r3,r2,67f4 <__mulsf3+0x1c8>
    675c:	008000c4 	movi	r2,3
    6760:	1880ab26 	beq	r3,r2,6a10 <__mulsf3+0x3e4>
    6764:	00800044 	movi	r2,1
    6768:	1880a21e 	bne	r3,r2,69f4 <__mulsf3+0x3c8>
    676c:	a829883a 	mov	r20,r21
    6770:	0007883a 	mov	r3,zero
    6774:	0009883a 	mov	r4,zero
    6778:	18803fcc 	andi	r2,r3,255
    677c:	100695fa 	slli	r3,r2,23
    6780:	a0803fcc 	andi	r2,r20,255
    6784:	100a97fa 	slli	r5,r2,31
    6788:	00802034 	movhi	r2,128
    678c:	10bfffc4 	addi	r2,r2,-1
    6790:	2084703a 	and	r2,r4,r2
    6794:	10c4b03a 	or	r2,r2,r3
    6798:	1144b03a 	or	r2,r2,r5
    679c:	dfc00a17 	ldw	ra,40(sp)
    67a0:	df000917 	ldw	fp,36(sp)
    67a4:	ddc00817 	ldw	r23,32(sp)
    67a8:	dd800717 	ldw	r22,28(sp)
    67ac:	dd400617 	ldw	r21,24(sp)
    67b0:	dd000517 	ldw	r20,20(sp)
    67b4:	dcc00417 	ldw	r19,16(sp)
    67b8:	dc800317 	ldw	r18,12(sp)
    67bc:	dc400217 	ldw	r17,8(sp)
    67c0:	dc000117 	ldw	r16,4(sp)
    67c4:	dec00b04 	addi	sp,sp,44
    67c8:	f800283a 	ret
    67cc:	90000d1e 	bne	r18,zero,6804 <__mulsf3+0x1d8>
    67d0:	04400104 	movi	r17,4
    67d4:	05c00044 	movi	r23,1
    67d8:	003faf06 	br	6698 <__alt_data_end+0xf0006698>
    67dc:	9806c03a 	cmpne	r3,r19,zero
    67e0:	18c00084 	addi	r3,r3,2
    67e4:	003fba06 	br	66d0 <__alt_data_end+0xf00066d0>
    67e8:	9800141e 	bne	r19,zero,683c <__mulsf3+0x210>
    67ec:	00c00044 	movi	r3,1
    67f0:	003fb706 	br	66d0 <__alt_data_end+0xf00066d0>
    67f4:	a829883a 	mov	r20,r21
    67f8:	00ffffc4 	movi	r3,-1
    67fc:	0009883a 	mov	r4,zero
    6800:	003fdd06 	br	6778 <__alt_data_end+0xf0006778>
    6804:	9009883a 	mov	r4,r18
    6808:	d9400015 	stw	r5,0(sp)
    680c:	0008e8c0 	call	8e8c <__clzsi2>
    6810:	10fffec4 	addi	r3,r2,-5
    6814:	10801d84 	addi	r2,r2,118
    6818:	90e4983a 	sll	r18,r18,r3
    681c:	00a1c83a 	sub	r16,zero,r2
    6820:	0023883a 	mov	r17,zero
    6824:	002f883a 	mov	r23,zero
    6828:	d9400017 	ldw	r5,0(sp)
    682c:	003f9a06 	br	6698 <__alt_data_end+0xf0006698>
    6830:	04400304 	movi	r17,12
    6834:	05c000c4 	movi	r23,3
    6838:	003f9706 	br	6698 <__alt_data_end+0xf0006698>
    683c:	9809883a 	mov	r4,r19
    6840:	d9800015 	stw	r6,0(sp)
    6844:	0008e8c0 	call	8e8c <__clzsi2>
    6848:	10fffec4 	addi	r3,r2,-5
    684c:	10801d84 	addi	r2,r2,118
    6850:	98e6983a 	sll	r19,r19,r3
    6854:	0085c83a 	sub	r2,zero,r2
    6858:	0007883a 	mov	r3,zero
    685c:	d9800017 	ldw	r6,0(sp)
    6860:	003f9b06 	br	66d0 <__alt_data_end+0xf00066d0>
    6864:	01002034 	movhi	r4,128
    6868:	0029883a 	mov	r20,zero
    686c:	213fffc4 	addi	r4,r4,-1
    6870:	00ffffc4 	movi	r3,-1
    6874:	003fc006 	br	6778 <__alt_data_end+0xf0006778>
    6878:	9027883a 	mov	r19,r18
    687c:	b807883a 	mov	r3,r23
    6880:	003fb406 	br	6754 <__alt_data_end+0xf0006754>
    6884:	9027883a 	mov	r19,r18
    6888:	e02b883a 	mov	r21,fp
    688c:	b807883a 	mov	r3,r23
    6890:	003fb006 	br	6754 <__alt_data_end+0xf0006754>
    6894:	9004d43a 	srli	r2,r18,16
    6898:	9810d43a 	srli	r8,r19,16
    689c:	94bfffcc 	andi	r18,r18,65535
    68a0:	993fffcc 	andi	r4,r19,65535
    68a4:	910d383a 	mul	r6,r18,r4
    68a8:	20a7383a 	mul	r19,r4,r2
    68ac:	9225383a 	mul	r18,r18,r8
    68b0:	3006d43a 	srli	r3,r6,16
    68b4:	1211383a 	mul	r8,r2,r8
    68b8:	94e5883a 	add	r18,r18,r19
    68bc:	1c87883a 	add	r3,r3,r18
    68c0:	1cc0022e 	bgeu	r3,r19,68cc <__mulsf3+0x2a0>
    68c4:	00800074 	movhi	r2,1
    68c8:	4091883a 	add	r8,r8,r2
    68cc:	1804943a 	slli	r2,r3,16
    68d0:	31bfffcc 	andi	r6,r6,65535
    68d4:	1806d43a 	srli	r3,r3,16
    68d8:	1185883a 	add	r2,r2,r6
    68dc:	102691ba 	slli	r19,r2,6
    68e0:	1a07883a 	add	r3,r3,r8
    68e4:	1004d6ba 	srli	r2,r2,26
    68e8:	180891ba 	slli	r4,r3,6
    68ec:	9826c03a 	cmpne	r19,r19,zero
    68f0:	9884b03a 	or	r2,r19,r2
    68f4:	1126b03a 	or	r19,r2,r4
    68f8:	9882002c 	andhi	r2,r19,2048
    68fc:	10000426 	beq	r2,zero,6910 <__mulsf3+0x2e4>
    6900:	9804d07a 	srli	r2,r19,1
    6904:	9900004c 	andi	r4,r19,1
    6908:	3821883a 	mov	r16,r7
    690c:	1126b03a 	or	r19,r2,r4
    6910:	80c01fc4 	addi	r3,r16,127
    6914:	00c0210e 	bge	zero,r3,699c <__mulsf3+0x370>
    6918:	988001cc 	andi	r2,r19,7
    691c:	10000426 	beq	r2,zero,6930 <__mulsf3+0x304>
    6920:	988003cc 	andi	r2,r19,15
    6924:	01000104 	movi	r4,4
    6928:	11000126 	beq	r2,r4,6930 <__mulsf3+0x304>
    692c:	9927883a 	add	r19,r19,r4
    6930:	9882002c 	andhi	r2,r19,2048
    6934:	10000426 	beq	r2,zero,6948 <__mulsf3+0x31c>
    6938:	00be0034 	movhi	r2,63488
    693c:	10bfffc4 	addi	r2,r2,-1
    6940:	80c02004 	addi	r3,r16,128
    6944:	98a6703a 	and	r19,r19,r2
    6948:	00803f84 	movi	r2,254
    694c:	10ffa916 	blt	r2,r3,67f4 <__alt_data_end+0xf00067f4>
    6950:	980891ba 	slli	r4,r19,6
    6954:	a829883a 	mov	r20,r21
    6958:	2008d27a 	srli	r4,r4,9
    695c:	003f8606 	br	6778 <__alt_data_end+0xf0006778>
    6960:	9080102c 	andhi	r2,r18,64
    6964:	10000826 	beq	r2,zero,6988 <__mulsf3+0x35c>
    6968:	9880102c 	andhi	r2,r19,64
    696c:	1000061e 	bne	r2,zero,6988 <__mulsf3+0x35c>
    6970:	00802034 	movhi	r2,128
    6974:	99001034 	orhi	r4,r19,64
    6978:	10bfffc4 	addi	r2,r2,-1
    697c:	b029883a 	mov	r20,r22
    6980:	2088703a 	and	r4,r4,r2
    6984:	003fba06 	br	6870 <__alt_data_end+0xf0006870>
    6988:	00802034 	movhi	r2,128
    698c:	91001034 	orhi	r4,r18,64
    6990:	10bfffc4 	addi	r2,r2,-1
    6994:	2088703a 	and	r4,r4,r2
    6998:	003fb506 	br	6870 <__alt_data_end+0xf0006870>
    699c:	00800044 	movi	r2,1
    69a0:	10c7c83a 	sub	r3,r2,r3
    69a4:	008006c4 	movi	r2,27
    69a8:	10ff7016 	blt	r2,r3,676c <__alt_data_end+0xf000676c>
    69ac:	00800804 	movi	r2,32
    69b0:	10c5c83a 	sub	r2,r2,r3
    69b4:	9884983a 	sll	r2,r19,r2
    69b8:	98c6d83a 	srl	r3,r19,r3
    69bc:	1004c03a 	cmpne	r2,r2,zero
    69c0:	1884b03a 	or	r2,r3,r2
    69c4:	10c001cc 	andi	r3,r2,7
    69c8:	18000426 	beq	r3,zero,69dc <__mulsf3+0x3b0>
    69cc:	10c003cc 	andi	r3,r2,15
    69d0:	01000104 	movi	r4,4
    69d4:	19000126 	beq	r3,r4,69dc <__mulsf3+0x3b0>
    69d8:	1105883a 	add	r2,r2,r4
    69dc:	10c1002c 	andhi	r3,r2,1024
    69e0:	18000626 	beq	r3,zero,69fc <__mulsf3+0x3d0>
    69e4:	a829883a 	mov	r20,r21
    69e8:	00c00044 	movi	r3,1
    69ec:	0009883a 	mov	r4,zero
    69f0:	003f6106 	br	6778 <__alt_data_end+0xf0006778>
    69f4:	3821883a 	mov	r16,r7
    69f8:	003fc506 	br	6910 <__alt_data_end+0xf0006910>
    69fc:	100491ba 	slli	r2,r2,6
    6a00:	a829883a 	mov	r20,r21
    6a04:	0007883a 	mov	r3,zero
    6a08:	1008d27a 	srli	r4,r2,9
    6a0c:	003f5a06 	br	6778 <__alt_data_end+0xf0006778>
    6a10:	00802034 	movhi	r2,128
    6a14:	99001034 	orhi	r4,r19,64
    6a18:	10bfffc4 	addi	r2,r2,-1
    6a1c:	a829883a 	mov	r20,r21
    6a20:	2088703a 	and	r4,r4,r2
    6a24:	003f9206 	br	6870 <__alt_data_end+0xf0006870>

00006a28 <__subsf3>:
    6a28:	defffc04 	addi	sp,sp,-16
    6a2c:	280cd5fa 	srli	r6,r5,23
    6a30:	dc000015 	stw	r16,0(sp)
    6a34:	01c02034 	movhi	r7,128
    6a38:	2020d5fa 	srli	r16,r4,23
    6a3c:	39ffffc4 	addi	r7,r7,-1
    6a40:	3906703a 	and	r3,r7,r4
    6a44:	dc400115 	stw	r17,4(sp)
    6a48:	394e703a 	and	r7,r7,r5
    6a4c:	2022d7fa 	srli	r17,r4,31
    6a50:	dfc00315 	stw	ra,12(sp)
    6a54:	dc800215 	stw	r18,8(sp)
    6a58:	31803fcc 	andi	r6,r6,255
    6a5c:	01003fc4 	movi	r4,255
    6a60:	84003fcc 	andi	r16,r16,255
    6a64:	180690fa 	slli	r3,r3,3
    6a68:	2804d7fa 	srli	r2,r5,31
    6a6c:	380e90fa 	slli	r7,r7,3
    6a70:	31006d26 	beq	r6,r4,6c28 <__subsf3+0x200>
    6a74:	1080005c 	xori	r2,r2,1
    6a78:	8189c83a 	sub	r4,r16,r6
    6a7c:	14404f26 	beq	r2,r17,6bbc <__subsf3+0x194>
    6a80:	0100770e 	bge	zero,r4,6c60 <__subsf3+0x238>
    6a84:	30001e1e 	bne	r6,zero,6b00 <__subsf3+0xd8>
    6a88:	38006a1e 	bne	r7,zero,6c34 <__subsf3+0x20c>
    6a8c:	188001cc 	andi	r2,r3,7
    6a90:	10000426 	beq	r2,zero,6aa4 <__subsf3+0x7c>
    6a94:	188003cc 	andi	r2,r3,15
    6a98:	01000104 	movi	r4,4
    6a9c:	11000126 	beq	r2,r4,6aa4 <__subsf3+0x7c>
    6aa0:	1907883a 	add	r3,r3,r4
    6aa4:	1881002c 	andhi	r2,r3,1024
    6aa8:	10003926 	beq	r2,zero,6b90 <__subsf3+0x168>
    6aac:	84000044 	addi	r16,r16,1
    6ab0:	00803fc4 	movi	r2,255
    6ab4:	80807526 	beq	r16,r2,6c8c <__subsf3+0x264>
    6ab8:	180691ba 	slli	r3,r3,6
    6abc:	8880004c 	andi	r2,r17,1
    6ac0:	180ad27a 	srli	r5,r3,9
    6ac4:	84003fcc 	andi	r16,r16,255
    6ac8:	800695fa 	slli	r3,r16,23
    6acc:	10803fcc 	andi	r2,r2,255
    6ad0:	01002034 	movhi	r4,128
    6ad4:	213fffc4 	addi	r4,r4,-1
    6ad8:	100497fa 	slli	r2,r2,31
    6adc:	2920703a 	and	r16,r5,r4
    6ae0:	80e0b03a 	or	r16,r16,r3
    6ae4:	8084b03a 	or	r2,r16,r2
    6ae8:	dfc00317 	ldw	ra,12(sp)
    6aec:	dc800217 	ldw	r18,8(sp)
    6af0:	dc400117 	ldw	r17,4(sp)
    6af4:	dc000017 	ldw	r16,0(sp)
    6af8:	dec00404 	addi	sp,sp,16
    6afc:	f800283a 	ret
    6b00:	00803fc4 	movi	r2,255
    6b04:	80bfe126 	beq	r16,r2,6a8c <__alt_data_end+0xf0006a8c>
    6b08:	39c10034 	orhi	r7,r7,1024
    6b0c:	008006c4 	movi	r2,27
    6b10:	11007416 	blt	r2,r4,6ce4 <__subsf3+0x2bc>
    6b14:	00800804 	movi	r2,32
    6b18:	1105c83a 	sub	r2,r2,r4
    6b1c:	3884983a 	sll	r2,r7,r2
    6b20:	390ed83a 	srl	r7,r7,r4
    6b24:	1008c03a 	cmpne	r4,r2,zero
    6b28:	390eb03a 	or	r7,r7,r4
    6b2c:	19c7c83a 	sub	r3,r3,r7
    6b30:	1881002c 	andhi	r2,r3,1024
    6b34:	10001426 	beq	r2,zero,6b88 <__subsf3+0x160>
    6b38:	04810034 	movhi	r18,1024
    6b3c:	94bfffc4 	addi	r18,r18,-1
    6b40:	1ca4703a 	and	r18,r3,r18
    6b44:	9009883a 	mov	r4,r18
    6b48:	0008e8c0 	call	8e8c <__clzsi2>
    6b4c:	10bffec4 	addi	r2,r2,-5
    6b50:	90a4983a 	sll	r18,r18,r2
    6b54:	14005116 	blt	r2,r16,6c9c <__subsf3+0x274>
    6b58:	1405c83a 	sub	r2,r2,r16
    6b5c:	10c00044 	addi	r3,r2,1
    6b60:	00800804 	movi	r2,32
    6b64:	10c5c83a 	sub	r2,r2,r3
    6b68:	9084983a 	sll	r2,r18,r2
    6b6c:	90e4d83a 	srl	r18,r18,r3
    6b70:	0021883a 	mov	r16,zero
    6b74:	1006c03a 	cmpne	r3,r2,zero
    6b78:	90c6b03a 	or	r3,r18,r3
    6b7c:	003fc306 	br	6a8c <__alt_data_end+0xf0006a8c>
    6b80:	2000e026 	beq	r4,zero,6f04 <__subsf3+0x4dc>
    6b84:	2007883a 	mov	r3,r4
    6b88:	188001cc 	andi	r2,r3,7
    6b8c:	103fc11e 	bne	r2,zero,6a94 <__alt_data_end+0xf0006a94>
    6b90:	180ad0fa 	srli	r5,r3,3
    6b94:	00c03fc4 	movi	r3,255
    6b98:	8880004c 	andi	r2,r17,1
    6b9c:	80c0031e 	bne	r16,r3,6bac <__subsf3+0x184>
    6ba0:	28006d26 	beq	r5,zero,6d58 <__subsf3+0x330>
    6ba4:	29401034 	orhi	r5,r5,64
    6ba8:	043fffc4 	movi	r16,-1
    6bac:	00c02034 	movhi	r3,128
    6bb0:	18ffffc4 	addi	r3,r3,-1
    6bb4:	28ca703a 	and	r5,r5,r3
    6bb8:	003fc206 	br	6ac4 <__alt_data_end+0xf0006ac4>
    6bbc:	01003c0e 	bge	zero,r4,6cb0 <__subsf3+0x288>
    6bc0:	30002126 	beq	r6,zero,6c48 <__subsf3+0x220>
    6bc4:	01403fc4 	movi	r5,255
    6bc8:	817fb026 	beq	r16,r5,6a8c <__alt_data_end+0xf0006a8c>
    6bcc:	39c10034 	orhi	r7,r7,1024
    6bd0:	014006c4 	movi	r5,27
    6bd4:	29007416 	blt	r5,r4,6da8 <__subsf3+0x380>
    6bd8:	01400804 	movi	r5,32
    6bdc:	290bc83a 	sub	r5,r5,r4
    6be0:	394a983a 	sll	r5,r7,r5
    6be4:	390ed83a 	srl	r7,r7,r4
    6be8:	2808c03a 	cmpne	r4,r5,zero
    6bec:	390eb03a 	or	r7,r7,r4
    6bf0:	19c7883a 	add	r3,r3,r7
    6bf4:	1901002c 	andhi	r4,r3,1024
    6bf8:	20003826 	beq	r4,zero,6cdc <__subsf3+0x2b4>
    6bfc:	84000044 	addi	r16,r16,1
    6c00:	01003fc4 	movi	r4,255
    6c04:	81005426 	beq	r16,r4,6d58 <__subsf3+0x330>
    6c08:	1023883a 	mov	r17,r2
    6c0c:	00bf0034 	movhi	r2,64512
    6c10:	10bfffc4 	addi	r2,r2,-1
    6c14:	1900004c 	andi	r4,r3,1
    6c18:	1886703a 	and	r3,r3,r2
    6c1c:	1806d07a 	srli	r3,r3,1
    6c20:	1906b03a 	or	r3,r3,r4
    6c24:	003f9906 	br	6a8c <__alt_data_end+0xf0006a8c>
    6c28:	383f9226 	beq	r7,zero,6a74 <__alt_data_end+0xf0006a74>
    6c2c:	10803fcc 	andi	r2,r2,255
    6c30:	003f9106 	br	6a78 <__alt_data_end+0xf0006a78>
    6c34:	213fffc4 	addi	r4,r4,-1
    6c38:	203fbc26 	beq	r4,zero,6b2c <__alt_data_end+0xf0006b2c>
    6c3c:	00803fc4 	movi	r2,255
    6c40:	80bfb21e 	bne	r16,r2,6b0c <__alt_data_end+0xf0006b0c>
    6c44:	003f9106 	br	6a8c <__alt_data_end+0xf0006a8c>
    6c48:	383f9026 	beq	r7,zero,6a8c <__alt_data_end+0xf0006a8c>
    6c4c:	213fffc4 	addi	r4,r4,-1
    6c50:	203fe726 	beq	r4,zero,6bf0 <__alt_data_end+0xf0006bf0>
    6c54:	01403fc4 	movi	r5,255
    6c58:	817fdd1e 	bne	r16,r5,6bd0 <__alt_data_end+0xf0006bd0>
    6c5c:	003f8b06 	br	6a8c <__alt_data_end+0xf0006a8c>
    6c60:	2000221e 	bne	r4,zero,6cec <__subsf3+0x2c4>
    6c64:	81000044 	addi	r4,r16,1
    6c68:	21003fcc 	andi	r4,r4,255
    6c6c:	01400044 	movi	r5,1
    6c70:	2900470e 	bge	r5,r4,6d90 <__subsf3+0x368>
    6c74:	19e5c83a 	sub	r18,r3,r7
    6c78:	9141002c 	andhi	r5,r18,1024
    6c7c:	28002d26 	beq	r5,zero,6d34 <__subsf3+0x30c>
    6c80:	38e5c83a 	sub	r18,r7,r3
    6c84:	1023883a 	mov	r17,r2
    6c88:	003fae06 	br	6b44 <__alt_data_end+0xf0006b44>
    6c8c:	8880004c 	andi	r2,r17,1
    6c90:	043fffc4 	movi	r16,-1
    6c94:	000b883a 	mov	r5,zero
    6c98:	003f8a06 	br	6ac4 <__alt_data_end+0xf0006ac4>
    6c9c:	00ff0034 	movhi	r3,64512
    6ca0:	18ffffc4 	addi	r3,r3,-1
    6ca4:	80a1c83a 	sub	r16,r16,r2
    6ca8:	90c6703a 	and	r3,r18,r3
    6cac:	003f7706 	br	6a8c <__alt_data_end+0xf0006a8c>
    6cb0:	2000431e 	bne	r4,zero,6dc0 <__subsf3+0x398>
    6cb4:	81000044 	addi	r4,r16,1
    6cb8:	21803fcc 	andi	r6,r4,255
    6cbc:	01400044 	movi	r5,1
    6cc0:	2980280e 	bge	r5,r6,6d64 <__subsf3+0x33c>
    6cc4:	01403fc4 	movi	r5,255
    6cc8:	21402326 	beq	r4,r5,6d58 <__subsf3+0x330>
    6ccc:	19c7883a 	add	r3,r3,r7
    6cd0:	1806d07a 	srli	r3,r3,1
    6cd4:	2021883a 	mov	r16,r4
    6cd8:	003f6c06 	br	6a8c <__alt_data_end+0xf0006a8c>
    6cdc:	1023883a 	mov	r17,r2
    6ce0:	003fa906 	br	6b88 <__alt_data_end+0xf0006b88>
    6ce4:	01c00044 	movi	r7,1
    6ce8:	003f9006 	br	6b2c <__alt_data_end+0xf0006b2c>
    6cec:	8000151e 	bne	r16,zero,6d44 <__subsf3+0x31c>
    6cf0:	18002f26 	beq	r3,zero,6db0 <__subsf3+0x388>
    6cf4:	0108303a 	nor	r4,zero,r4
    6cf8:	20000a26 	beq	r4,zero,6d24 <__subsf3+0x2fc>
    6cfc:	01403fc4 	movi	r5,255
    6d00:	31402b26 	beq	r6,r5,6db0 <__subsf3+0x388>
    6d04:	014006c4 	movi	r5,27
    6d08:	29006e16 	blt	r5,r4,6ec4 <__subsf3+0x49c>
    6d0c:	01400804 	movi	r5,32
    6d10:	290bc83a 	sub	r5,r5,r4
    6d14:	194a983a 	sll	r5,r3,r5
    6d18:	1908d83a 	srl	r4,r3,r4
    6d1c:	2806c03a 	cmpne	r3,r5,zero
    6d20:	20c6b03a 	or	r3,r4,r3
    6d24:	38c7c83a 	sub	r3,r7,r3
    6d28:	3021883a 	mov	r16,r6
    6d2c:	1023883a 	mov	r17,r2
    6d30:	003f7f06 	br	6b30 <__alt_data_end+0xf0006b30>
    6d34:	903f831e 	bne	r18,zero,6b44 <__alt_data_end+0xf0006b44>
    6d38:	0005883a 	mov	r2,zero
    6d3c:	0021883a 	mov	r16,zero
    6d40:	003f9a06 	br	6bac <__alt_data_end+0xf0006bac>
    6d44:	01403fc4 	movi	r5,255
    6d48:	31401926 	beq	r6,r5,6db0 <__subsf3+0x388>
    6d4c:	0109c83a 	sub	r4,zero,r4
    6d50:	18c10034 	orhi	r3,r3,1024
    6d54:	003feb06 	br	6d04 <__alt_data_end+0xf0006d04>
    6d58:	043fffc4 	movi	r16,-1
    6d5c:	000b883a 	mov	r5,zero
    6d60:	003f5806 	br	6ac4 <__alt_data_end+0xf0006ac4>
    6d64:	8000481e 	bne	r16,zero,6e88 <__subsf3+0x460>
    6d68:	18006226 	beq	r3,zero,6ef4 <__subsf3+0x4cc>
    6d6c:	383f4726 	beq	r7,zero,6a8c <__alt_data_end+0xf0006a8c>
    6d70:	19c7883a 	add	r3,r3,r7
    6d74:	1881002c 	andhi	r2,r3,1024
    6d78:	103f8326 	beq	r2,zero,6b88 <__alt_data_end+0xf0006b88>
    6d7c:	00bf0034 	movhi	r2,64512
    6d80:	10bfffc4 	addi	r2,r2,-1
    6d84:	2821883a 	mov	r16,r5
    6d88:	1886703a 	and	r3,r3,r2
    6d8c:	003f3f06 	br	6a8c <__alt_data_end+0xf0006a8c>
    6d90:	80001c1e 	bne	r16,zero,6e04 <__subsf3+0x3dc>
    6d94:	1800261e 	bne	r3,zero,6e30 <__subsf3+0x408>
    6d98:	38004c26 	beq	r7,zero,6ecc <__subsf3+0x4a4>
    6d9c:	3807883a 	mov	r3,r7
    6da0:	1023883a 	mov	r17,r2
    6da4:	003f3906 	br	6a8c <__alt_data_end+0xf0006a8c>
    6da8:	01c00044 	movi	r7,1
    6dac:	003f9006 	br	6bf0 <__alt_data_end+0xf0006bf0>
    6db0:	3807883a 	mov	r3,r7
    6db4:	3021883a 	mov	r16,r6
    6db8:	1023883a 	mov	r17,r2
    6dbc:	003f3306 	br	6a8c <__alt_data_end+0xf0006a8c>
    6dc0:	8000161e 	bne	r16,zero,6e1c <__subsf3+0x3f4>
    6dc4:	18002d26 	beq	r3,zero,6e7c <__subsf3+0x454>
    6dc8:	0108303a 	nor	r4,zero,r4
    6dcc:	20000a26 	beq	r4,zero,6df8 <__subsf3+0x3d0>
    6dd0:	01403fc4 	movi	r5,255
    6dd4:	31402926 	beq	r6,r5,6e7c <__subsf3+0x454>
    6dd8:	014006c4 	movi	r5,27
    6ddc:	29004716 	blt	r5,r4,6efc <__subsf3+0x4d4>
    6de0:	01400804 	movi	r5,32
    6de4:	290bc83a 	sub	r5,r5,r4
    6de8:	194a983a 	sll	r5,r3,r5
    6dec:	1908d83a 	srl	r4,r3,r4
    6df0:	2806c03a 	cmpne	r3,r5,zero
    6df4:	20c6b03a 	or	r3,r4,r3
    6df8:	19c7883a 	add	r3,r3,r7
    6dfc:	3021883a 	mov	r16,r6
    6e00:	003f7c06 	br	6bf4 <__alt_data_end+0xf0006bf4>
    6e04:	1800111e 	bne	r3,zero,6e4c <__subsf3+0x424>
    6e08:	38003326 	beq	r7,zero,6ed8 <__subsf3+0x4b0>
    6e0c:	3807883a 	mov	r3,r7
    6e10:	1023883a 	mov	r17,r2
    6e14:	04003fc4 	movi	r16,255
    6e18:	003f1c06 	br	6a8c <__alt_data_end+0xf0006a8c>
    6e1c:	01403fc4 	movi	r5,255
    6e20:	31401626 	beq	r6,r5,6e7c <__subsf3+0x454>
    6e24:	0109c83a 	sub	r4,zero,r4
    6e28:	18c10034 	orhi	r3,r3,1024
    6e2c:	003fea06 	br	6dd8 <__alt_data_end+0xf0006dd8>
    6e30:	383f1626 	beq	r7,zero,6a8c <__alt_data_end+0xf0006a8c>
    6e34:	19c9c83a 	sub	r4,r3,r7
    6e38:	2141002c 	andhi	r5,r4,1024
    6e3c:	283f5026 	beq	r5,zero,6b80 <__alt_data_end+0xf0006b80>
    6e40:	38c7c83a 	sub	r3,r7,r3
    6e44:	1023883a 	mov	r17,r2
    6e48:	003f1006 	br	6a8c <__alt_data_end+0xf0006a8c>
    6e4c:	38001b26 	beq	r7,zero,6ebc <__subsf3+0x494>
    6e50:	1806d0fa 	srli	r3,r3,3
    6e54:	1900102c 	andhi	r4,r3,64
    6e58:	20000526 	beq	r4,zero,6e70 <__subsf3+0x448>
    6e5c:	380ed0fa 	srli	r7,r7,3
    6e60:	3900102c 	andhi	r4,r7,64
    6e64:	2000021e 	bne	r4,zero,6e70 <__subsf3+0x448>
    6e68:	3807883a 	mov	r3,r7
    6e6c:	1023883a 	mov	r17,r2
    6e70:	180690fa 	slli	r3,r3,3
    6e74:	04003fc4 	movi	r16,255
    6e78:	003f0406 	br	6a8c <__alt_data_end+0xf0006a8c>
    6e7c:	3807883a 	mov	r3,r7
    6e80:	3021883a 	mov	r16,r6
    6e84:	003f0106 	br	6a8c <__alt_data_end+0xf0006a8c>
    6e88:	18001726 	beq	r3,zero,6ee8 <__subsf3+0x4c0>
    6e8c:	38000b26 	beq	r7,zero,6ebc <__subsf3+0x494>
    6e90:	1806d0fa 	srli	r3,r3,3
    6e94:	1900102c 	andhi	r4,r3,64
    6e98:	20000426 	beq	r4,zero,6eac <__subsf3+0x484>
    6e9c:	380ed0fa 	srli	r7,r7,3
    6ea0:	3900102c 	andhi	r4,r7,64
    6ea4:	2000011e 	bne	r4,zero,6eac <__subsf3+0x484>
    6ea8:	3807883a 	mov	r3,r7
    6eac:	180690fa 	slli	r3,r3,3
    6eb0:	1023883a 	mov	r17,r2
    6eb4:	04003fc4 	movi	r16,255
    6eb8:	003ef406 	br	6a8c <__alt_data_end+0xf0006a8c>
    6ebc:	04003fc4 	movi	r16,255
    6ec0:	003ef206 	br	6a8c <__alt_data_end+0xf0006a8c>
    6ec4:	00c00044 	movi	r3,1
    6ec8:	003f9606 	br	6d24 <__alt_data_end+0xf0006d24>
    6ecc:	000b883a 	mov	r5,zero
    6ed0:	0005883a 	mov	r2,zero
    6ed4:	003f3506 	br	6bac <__alt_data_end+0xf0006bac>
    6ed8:	01402034 	movhi	r5,128
    6edc:	297fffc4 	addi	r5,r5,-1
    6ee0:	0005883a 	mov	r2,zero
    6ee4:	003f2f06 	br	6ba4 <__alt_data_end+0xf0006ba4>
    6ee8:	3807883a 	mov	r3,r7
    6eec:	04003fc4 	movi	r16,255
    6ef0:	003ee606 	br	6a8c <__alt_data_end+0xf0006a8c>
    6ef4:	3807883a 	mov	r3,r7
    6ef8:	003ee406 	br	6a8c <__alt_data_end+0xf0006a8c>
    6efc:	00c00044 	movi	r3,1
    6f00:	003fbd06 	br	6df8 <__alt_data_end+0xf0006df8>
    6f04:	0005883a 	mov	r2,zero
    6f08:	003f2806 	br	6bac <__alt_data_end+0xf0006bac>

00006f0c <__fixsfsi>:
    6f0c:	200ad5fa 	srli	r5,r4,23
    6f10:	00c02034 	movhi	r3,128
    6f14:	18ffffc4 	addi	r3,r3,-1
    6f18:	29403fcc 	andi	r5,r5,255
    6f1c:	00801f84 	movi	r2,126
    6f20:	1906703a 	and	r3,r3,r4
    6f24:	2008d7fa 	srli	r4,r4,31
    6f28:	11400e0e 	bge	r2,r5,6f64 <__fixsfsi+0x58>
    6f2c:	00802744 	movi	r2,157
    6f30:	11400816 	blt	r2,r5,6f54 <__fixsfsi+0x48>
    6f34:	00802544 	movi	r2,149
    6f38:	18c02034 	orhi	r3,r3,128
    6f3c:	11400b0e 	bge	r2,r5,6f6c <__fixsfsi+0x60>
    6f40:	28bfda84 	addi	r2,r5,-150
    6f44:	1884983a 	sll	r2,r3,r2
    6f48:	20000726 	beq	r4,zero,6f68 <__fixsfsi+0x5c>
    6f4c:	0085c83a 	sub	r2,zero,r2
    6f50:	f800283a 	ret
    6f54:	00a00034 	movhi	r2,32768
    6f58:	10bfffc4 	addi	r2,r2,-1
    6f5c:	2085883a 	add	r2,r4,r2
    6f60:	f800283a 	ret
    6f64:	0005883a 	mov	r2,zero
    6f68:	f800283a 	ret
    6f6c:	00802584 	movi	r2,150
    6f70:	1145c83a 	sub	r2,r2,r5
    6f74:	1884d83a 	srl	r2,r3,r2
    6f78:	003ff306 	br	6f48 <__alt_data_end+0xf0006f48>

00006f7c <__floatsisf>:
    6f7c:	defffd04 	addi	sp,sp,-12
    6f80:	dfc00215 	stw	ra,8(sp)
    6f84:	dc400115 	stw	r17,4(sp)
    6f88:	dc000015 	stw	r16,0(sp)
    6f8c:	20003526 	beq	r4,zero,7064 <__floatsisf+0xe8>
    6f90:	2021883a 	mov	r16,r4
    6f94:	2022d7fa 	srli	r17,r4,31
    6f98:	20003616 	blt	r4,zero,7074 <__floatsisf+0xf8>
    6f9c:	8009883a 	mov	r4,r16
    6fa0:	0008e8c0 	call	8e8c <__clzsi2>
    6fa4:	00c02784 	movi	r3,158
    6fa8:	1887c83a 	sub	r3,r3,r2
    6fac:	01002584 	movi	r4,150
    6fb0:	20c01416 	blt	r4,r3,7004 <__floatsisf+0x88>
    6fb4:	20c9c83a 	sub	r4,r4,r3
    6fb8:	8120983a 	sll	r16,r16,r4
    6fbc:	00802034 	movhi	r2,128
    6fc0:	10bfffc4 	addi	r2,r2,-1
    6fc4:	8809883a 	mov	r4,r17
    6fc8:	80a0703a 	and	r16,r16,r2
    6fcc:	18803fcc 	andi	r2,r3,255
    6fd0:	100695fa 	slli	r3,r2,23
    6fd4:	20803fcc 	andi	r2,r4,255
    6fd8:	100897fa 	slli	r4,r2,31
    6fdc:	00802034 	movhi	r2,128
    6fe0:	10bfffc4 	addi	r2,r2,-1
    6fe4:	8084703a 	and	r2,r16,r2
    6fe8:	10c4b03a 	or	r2,r2,r3
    6fec:	1104b03a 	or	r2,r2,r4
    6ff0:	dfc00217 	ldw	ra,8(sp)
    6ff4:	dc400117 	ldw	r17,4(sp)
    6ff8:	dc000017 	ldw	r16,0(sp)
    6ffc:	dec00304 	addi	sp,sp,12
    7000:	f800283a 	ret
    7004:	01002644 	movi	r4,153
    7008:	20c01c16 	blt	r4,r3,707c <__floatsisf+0x100>
    700c:	20c9c83a 	sub	r4,r4,r3
    7010:	8120983a 	sll	r16,r16,r4
    7014:	013f0034 	movhi	r4,64512
    7018:	213fffc4 	addi	r4,r4,-1
    701c:	814001cc 	andi	r5,r16,7
    7020:	8108703a 	and	r4,r16,r4
    7024:	28000426 	beq	r5,zero,7038 <__floatsisf+0xbc>
    7028:	840003cc 	andi	r16,r16,15
    702c:	01400104 	movi	r5,4
    7030:	81400126 	beq	r16,r5,7038 <__floatsisf+0xbc>
    7034:	2149883a 	add	r4,r4,r5
    7038:	2141002c 	andhi	r5,r4,1024
    703c:	28000526 	beq	r5,zero,7054 <__floatsisf+0xd8>
    7040:	00c027c4 	movi	r3,159
    7044:	1887c83a 	sub	r3,r3,r2
    7048:	00bf0034 	movhi	r2,64512
    704c:	10bfffc4 	addi	r2,r2,-1
    7050:	2088703a 	and	r4,r4,r2
    7054:	202091ba 	slli	r16,r4,6
    7058:	8809883a 	mov	r4,r17
    705c:	8020d27a 	srli	r16,r16,9
    7060:	003fda06 	br	6fcc <__alt_data_end+0xf0006fcc>
    7064:	0009883a 	mov	r4,zero
    7068:	0007883a 	mov	r3,zero
    706c:	0021883a 	mov	r16,zero
    7070:	003fd606 	br	6fcc <__alt_data_end+0xf0006fcc>
    7074:	0121c83a 	sub	r16,zero,r4
    7078:	003fc806 	br	6f9c <__alt_data_end+0xf0006f9c>
    707c:	01002e44 	movi	r4,185
    7080:	20c9c83a 	sub	r4,r4,r3
    7084:	01400144 	movi	r5,5
    7088:	8108983a 	sll	r4,r16,r4
    708c:	288bc83a 	sub	r5,r5,r2
    7090:	8160d83a 	srl	r16,r16,r5
    7094:	2008c03a 	cmpne	r4,r4,zero
    7098:	8120b03a 	or	r16,r16,r4
    709c:	003fdd06 	br	7014 <__alt_data_end+0xf0007014>

000070a0 <__divdf3>:
    70a0:	defff204 	addi	sp,sp,-56
    70a4:	dd400915 	stw	r21,36(sp)
    70a8:	282ad53a 	srli	r21,r5,20
    70ac:	dd000815 	stw	r20,32(sp)
    70b0:	2828d7fa 	srli	r20,r5,31
    70b4:	dc000415 	stw	r16,16(sp)
    70b8:	04000434 	movhi	r16,16
    70bc:	df000c15 	stw	fp,48(sp)
    70c0:	843fffc4 	addi	r16,r16,-1
    70c4:	dfc00d15 	stw	ra,52(sp)
    70c8:	ddc00b15 	stw	r23,44(sp)
    70cc:	dd800a15 	stw	r22,40(sp)
    70d0:	dcc00715 	stw	r19,28(sp)
    70d4:	dc800615 	stw	r18,24(sp)
    70d8:	dc400515 	stw	r17,20(sp)
    70dc:	ad41ffcc 	andi	r21,r21,2047
    70e0:	2c20703a 	and	r16,r5,r16
    70e4:	a7003fcc 	andi	fp,r20,255
    70e8:	a8006126 	beq	r21,zero,7270 <__divdf3+0x1d0>
    70ec:	0081ffc4 	movi	r2,2047
    70f0:	2025883a 	mov	r18,r4
    70f4:	a8803726 	beq	r21,r2,71d4 <__divdf3+0x134>
    70f8:	80800434 	orhi	r2,r16,16
    70fc:	100490fa 	slli	r2,r2,3
    7100:	2020d77a 	srli	r16,r4,29
    7104:	202490fa 	slli	r18,r4,3
    7108:	ad7f0044 	addi	r21,r21,-1023
    710c:	80a0b03a 	or	r16,r16,r2
    7110:	0027883a 	mov	r19,zero
    7114:	0013883a 	mov	r9,zero
    7118:	3804d53a 	srli	r2,r7,20
    711c:	382cd7fa 	srli	r22,r7,31
    7120:	04400434 	movhi	r17,16
    7124:	8c7fffc4 	addi	r17,r17,-1
    7128:	1081ffcc 	andi	r2,r2,2047
    712c:	3011883a 	mov	r8,r6
    7130:	3c62703a 	and	r17,r7,r17
    7134:	b5c03fcc 	andi	r23,r22,255
    7138:	10006c26 	beq	r2,zero,72ec <__divdf3+0x24c>
    713c:	00c1ffc4 	movi	r3,2047
    7140:	10c06426 	beq	r2,r3,72d4 <__divdf3+0x234>
    7144:	88c00434 	orhi	r3,r17,16
    7148:	180690fa 	slli	r3,r3,3
    714c:	3022d77a 	srli	r17,r6,29
    7150:	301090fa 	slli	r8,r6,3
    7154:	10bf0044 	addi	r2,r2,-1023
    7158:	88e2b03a 	or	r17,r17,r3
    715c:	000f883a 	mov	r7,zero
    7160:	a58cf03a 	xor	r6,r20,r22
    7164:	3cc8b03a 	or	r4,r7,r19
    7168:	a8abc83a 	sub	r21,r21,r2
    716c:	008003c4 	movi	r2,15
    7170:	3007883a 	mov	r3,r6
    7174:	34c03fcc 	andi	r19,r6,255
    7178:	11009036 	bltu	r2,r4,73bc <__divdf3+0x31c>
    717c:	200890ba 	slli	r4,r4,2
    7180:	00800034 	movhi	r2,0
    7184:	109c6504 	addi	r2,r2,29076
    7188:	2089883a 	add	r4,r4,r2
    718c:	20800017 	ldw	r2,0(r4)
    7190:	1000683a 	jmp	r2
    7194:	000073bc 	xorhi	zero,zero,462
    7198:	0000720c 	andi	zero,zero,456
    719c:	000073ac 	andhi	zero,zero,462
    71a0:	00007200 	call	720 <vCoRoutineSchedule+0x50>
    71a4:	000073ac 	andhi	zero,zero,462
    71a8:	00007380 	call	738 <vCoRoutineSchedule+0x68>
    71ac:	000073ac 	andhi	zero,zero,462
    71b0:	00007200 	call	720 <vCoRoutineSchedule+0x50>
    71b4:	0000720c 	andi	zero,zero,456
    71b8:	0000720c 	andi	zero,zero,456
    71bc:	00007380 	call	738 <vCoRoutineSchedule+0x68>
    71c0:	00007200 	call	720 <vCoRoutineSchedule+0x50>
    71c4:	000071f0 	cmpltui	zero,zero,455
    71c8:	000071f0 	cmpltui	zero,zero,455
    71cc:	000071f0 	cmpltui	zero,zero,455
    71d0:	000076a0 	cmpeqi	zero,zero,474
    71d4:	2404b03a 	or	r2,r4,r16
    71d8:	1000661e 	bne	r2,zero,7374 <__divdf3+0x2d4>
    71dc:	04c00204 	movi	r19,8
    71e0:	0021883a 	mov	r16,zero
    71e4:	0025883a 	mov	r18,zero
    71e8:	02400084 	movi	r9,2
    71ec:	003fca06 	br	7118 <__alt_data_end+0xf0007118>
    71f0:	8023883a 	mov	r17,r16
    71f4:	9011883a 	mov	r8,r18
    71f8:	e02f883a 	mov	r23,fp
    71fc:	480f883a 	mov	r7,r9
    7200:	00800084 	movi	r2,2
    7204:	3881311e 	bne	r7,r2,76cc <__divdf3+0x62c>
    7208:	b827883a 	mov	r19,r23
    720c:	98c0004c 	andi	r3,r19,1
    7210:	0081ffc4 	movi	r2,2047
    7214:	000b883a 	mov	r5,zero
    7218:	0025883a 	mov	r18,zero
    721c:	1004953a 	slli	r2,r2,20
    7220:	18c03fcc 	andi	r3,r3,255
    7224:	04400434 	movhi	r17,16
    7228:	8c7fffc4 	addi	r17,r17,-1
    722c:	180697fa 	slli	r3,r3,31
    7230:	2c4a703a 	and	r5,r5,r17
    7234:	288ab03a 	or	r5,r5,r2
    7238:	28c6b03a 	or	r3,r5,r3
    723c:	9005883a 	mov	r2,r18
    7240:	dfc00d17 	ldw	ra,52(sp)
    7244:	df000c17 	ldw	fp,48(sp)
    7248:	ddc00b17 	ldw	r23,44(sp)
    724c:	dd800a17 	ldw	r22,40(sp)
    7250:	dd400917 	ldw	r21,36(sp)
    7254:	dd000817 	ldw	r20,32(sp)
    7258:	dcc00717 	ldw	r19,28(sp)
    725c:	dc800617 	ldw	r18,24(sp)
    7260:	dc400517 	ldw	r17,20(sp)
    7264:	dc000417 	ldw	r16,16(sp)
    7268:	dec00e04 	addi	sp,sp,56
    726c:	f800283a 	ret
    7270:	2404b03a 	or	r2,r4,r16
    7274:	2027883a 	mov	r19,r4
    7278:	10003926 	beq	r2,zero,7360 <__divdf3+0x2c0>
    727c:	80012e26 	beq	r16,zero,7738 <__divdf3+0x698>
    7280:	8009883a 	mov	r4,r16
    7284:	d9800315 	stw	r6,12(sp)
    7288:	d9c00215 	stw	r7,8(sp)
    728c:	0008e8c0 	call	8e8c <__clzsi2>
    7290:	d9800317 	ldw	r6,12(sp)
    7294:	d9c00217 	ldw	r7,8(sp)
    7298:	113ffd44 	addi	r4,r2,-11
    729c:	00c00704 	movi	r3,28
    72a0:	19012116 	blt	r3,r4,7728 <__divdf3+0x688>
    72a4:	00c00744 	movi	r3,29
    72a8:	147ffe04 	addi	r17,r2,-8
    72ac:	1907c83a 	sub	r3,r3,r4
    72b0:	8460983a 	sll	r16,r16,r17
    72b4:	98c6d83a 	srl	r3,r19,r3
    72b8:	9c64983a 	sll	r18,r19,r17
    72bc:	1c20b03a 	or	r16,r3,r16
    72c0:	1080fcc4 	addi	r2,r2,1011
    72c4:	00abc83a 	sub	r21,zero,r2
    72c8:	0027883a 	mov	r19,zero
    72cc:	0013883a 	mov	r9,zero
    72d0:	003f9106 	br	7118 <__alt_data_end+0xf0007118>
    72d4:	3446b03a 	or	r3,r6,r17
    72d8:	18001f1e 	bne	r3,zero,7358 <__divdf3+0x2b8>
    72dc:	0023883a 	mov	r17,zero
    72e0:	0011883a 	mov	r8,zero
    72e4:	01c00084 	movi	r7,2
    72e8:	003f9d06 	br	7160 <__alt_data_end+0xf0007160>
    72ec:	3446b03a 	or	r3,r6,r17
    72f0:	18001526 	beq	r3,zero,7348 <__divdf3+0x2a8>
    72f4:	88011b26 	beq	r17,zero,7764 <__divdf3+0x6c4>
    72f8:	8809883a 	mov	r4,r17
    72fc:	d9800315 	stw	r6,12(sp)
    7300:	da400115 	stw	r9,4(sp)
    7304:	0008e8c0 	call	8e8c <__clzsi2>
    7308:	d9800317 	ldw	r6,12(sp)
    730c:	da400117 	ldw	r9,4(sp)
    7310:	113ffd44 	addi	r4,r2,-11
    7314:	00c00704 	movi	r3,28
    7318:	19010e16 	blt	r3,r4,7754 <__divdf3+0x6b4>
    731c:	00c00744 	movi	r3,29
    7320:	123ffe04 	addi	r8,r2,-8
    7324:	1907c83a 	sub	r3,r3,r4
    7328:	8a22983a 	sll	r17,r17,r8
    732c:	30c6d83a 	srl	r3,r6,r3
    7330:	3210983a 	sll	r8,r6,r8
    7334:	1c62b03a 	or	r17,r3,r17
    7338:	1080fcc4 	addi	r2,r2,1011
    733c:	0085c83a 	sub	r2,zero,r2
    7340:	000f883a 	mov	r7,zero
    7344:	003f8606 	br	7160 <__alt_data_end+0xf0007160>
    7348:	0023883a 	mov	r17,zero
    734c:	0011883a 	mov	r8,zero
    7350:	01c00044 	movi	r7,1
    7354:	003f8206 	br	7160 <__alt_data_end+0xf0007160>
    7358:	01c000c4 	movi	r7,3
    735c:	003f8006 	br	7160 <__alt_data_end+0xf0007160>
    7360:	04c00104 	movi	r19,4
    7364:	0021883a 	mov	r16,zero
    7368:	0025883a 	mov	r18,zero
    736c:	02400044 	movi	r9,1
    7370:	003f6906 	br	7118 <__alt_data_end+0xf0007118>
    7374:	04c00304 	movi	r19,12
    7378:	024000c4 	movi	r9,3
    737c:	003f6606 	br	7118 <__alt_data_end+0xf0007118>
    7380:	01400434 	movhi	r5,16
    7384:	0007883a 	mov	r3,zero
    7388:	297fffc4 	addi	r5,r5,-1
    738c:	04bfffc4 	movi	r18,-1
    7390:	0081ffc4 	movi	r2,2047
    7394:	003fa106 	br	721c <__alt_data_end+0xf000721c>
    7398:	00c00044 	movi	r3,1
    739c:	1887c83a 	sub	r3,r3,r2
    73a0:	01000e04 	movi	r4,56
    73a4:	20c1210e 	bge	r4,r3,782c <__divdf3+0x78c>
    73a8:	98c0004c 	andi	r3,r19,1
    73ac:	0005883a 	mov	r2,zero
    73b0:	000b883a 	mov	r5,zero
    73b4:	0025883a 	mov	r18,zero
    73b8:	003f9806 	br	721c <__alt_data_end+0xf000721c>
    73bc:	8c00fd36 	bltu	r17,r16,77b4 <__divdf3+0x714>
    73c0:	8440fb26 	beq	r16,r17,77b0 <__divdf3+0x710>
    73c4:	8007883a 	mov	r3,r16
    73c8:	ad7fffc4 	addi	r21,r21,-1
    73cc:	0021883a 	mov	r16,zero
    73d0:	4004d63a 	srli	r2,r8,24
    73d4:	8822923a 	slli	r17,r17,8
    73d8:	1809883a 	mov	r4,r3
    73dc:	402c923a 	slli	r22,r8,8
    73e0:	88b8b03a 	or	fp,r17,r2
    73e4:	e028d43a 	srli	r20,fp,16
    73e8:	d8c00015 	stw	r3,0(sp)
    73ec:	e5ffffcc 	andi	r23,fp,65535
    73f0:	a00b883a 	mov	r5,r20
    73f4:	0008fe80 	call	8fe8 <__udivsi3>
    73f8:	d8c00017 	ldw	r3,0(sp)
    73fc:	a00b883a 	mov	r5,r20
    7400:	d8800315 	stw	r2,12(sp)
    7404:	1809883a 	mov	r4,r3
    7408:	000904c0 	call	904c <__umodsi3>
    740c:	d9800317 	ldw	r6,12(sp)
    7410:	1006943a 	slli	r3,r2,16
    7414:	9004d43a 	srli	r2,r18,16
    7418:	b9a3383a 	mul	r17,r23,r6
    741c:	10c4b03a 	or	r2,r2,r3
    7420:	1440062e 	bgeu	r2,r17,743c <__divdf3+0x39c>
    7424:	1705883a 	add	r2,r2,fp
    7428:	30ffffc4 	addi	r3,r6,-1
    742c:	1700ee36 	bltu	r2,fp,77e8 <__divdf3+0x748>
    7430:	1440ed2e 	bgeu	r2,r17,77e8 <__divdf3+0x748>
    7434:	31bfff84 	addi	r6,r6,-2
    7438:	1705883a 	add	r2,r2,fp
    743c:	1463c83a 	sub	r17,r2,r17
    7440:	a00b883a 	mov	r5,r20
    7444:	8809883a 	mov	r4,r17
    7448:	d9800315 	stw	r6,12(sp)
    744c:	0008fe80 	call	8fe8 <__udivsi3>
    7450:	a00b883a 	mov	r5,r20
    7454:	8809883a 	mov	r4,r17
    7458:	d8800215 	stw	r2,8(sp)
    745c:	000904c0 	call	904c <__umodsi3>
    7460:	d9c00217 	ldw	r7,8(sp)
    7464:	1004943a 	slli	r2,r2,16
    7468:	94bfffcc 	andi	r18,r18,65535
    746c:	b9d1383a 	mul	r8,r23,r7
    7470:	90a4b03a 	or	r18,r18,r2
    7474:	d9800317 	ldw	r6,12(sp)
    7478:	9200062e 	bgeu	r18,r8,7494 <__divdf3+0x3f4>
    747c:	9725883a 	add	r18,r18,fp
    7480:	38bfffc4 	addi	r2,r7,-1
    7484:	9700d636 	bltu	r18,fp,77e0 <__divdf3+0x740>
    7488:	9200d52e 	bgeu	r18,r8,77e0 <__divdf3+0x740>
    748c:	39ffff84 	addi	r7,r7,-2
    7490:	9725883a 	add	r18,r18,fp
    7494:	3004943a 	slli	r2,r6,16
    7498:	b012d43a 	srli	r9,r22,16
    749c:	b1bfffcc 	andi	r6,r22,65535
    74a0:	11e2b03a 	or	r17,r2,r7
    74a4:	8806d43a 	srli	r3,r17,16
    74a8:	893fffcc 	andi	r4,r17,65535
    74ac:	218b383a 	mul	r5,r4,r6
    74b0:	30c5383a 	mul	r2,r6,r3
    74b4:	2249383a 	mul	r4,r4,r9
    74b8:	280ed43a 	srli	r7,r5,16
    74bc:	9225c83a 	sub	r18,r18,r8
    74c0:	2089883a 	add	r4,r4,r2
    74c4:	3909883a 	add	r4,r7,r4
    74c8:	1a47383a 	mul	r3,r3,r9
    74cc:	2080022e 	bgeu	r4,r2,74d8 <__divdf3+0x438>
    74d0:	00800074 	movhi	r2,1
    74d4:	1887883a 	add	r3,r3,r2
    74d8:	2004d43a 	srli	r2,r4,16
    74dc:	2008943a 	slli	r4,r4,16
    74e0:	297fffcc 	andi	r5,r5,65535
    74e4:	10c7883a 	add	r3,r2,r3
    74e8:	2149883a 	add	r4,r4,r5
    74ec:	90c0a536 	bltu	r18,r3,7784 <__divdf3+0x6e4>
    74f0:	90c0bf26 	beq	r18,r3,77f0 <__divdf3+0x750>
    74f4:	90c7c83a 	sub	r3,r18,r3
    74f8:	810fc83a 	sub	r7,r16,r4
    74fc:	81e5803a 	cmpltu	r18,r16,r7
    7500:	1ca5c83a 	sub	r18,r3,r18
    7504:	e480c126 	beq	fp,r18,780c <__divdf3+0x76c>
    7508:	a00b883a 	mov	r5,r20
    750c:	9009883a 	mov	r4,r18
    7510:	d9800315 	stw	r6,12(sp)
    7514:	d9c00215 	stw	r7,8(sp)
    7518:	da400115 	stw	r9,4(sp)
    751c:	0008fe80 	call	8fe8 <__udivsi3>
    7520:	a00b883a 	mov	r5,r20
    7524:	9009883a 	mov	r4,r18
    7528:	d8800015 	stw	r2,0(sp)
    752c:	000904c0 	call	904c <__umodsi3>
    7530:	d9c00217 	ldw	r7,8(sp)
    7534:	da000017 	ldw	r8,0(sp)
    7538:	1006943a 	slli	r3,r2,16
    753c:	3804d43a 	srli	r2,r7,16
    7540:	ba21383a 	mul	r16,r23,r8
    7544:	d9800317 	ldw	r6,12(sp)
    7548:	10c4b03a 	or	r2,r2,r3
    754c:	da400117 	ldw	r9,4(sp)
    7550:	1400062e 	bgeu	r2,r16,756c <__divdf3+0x4cc>
    7554:	1705883a 	add	r2,r2,fp
    7558:	40ffffc4 	addi	r3,r8,-1
    755c:	1700ad36 	bltu	r2,fp,7814 <__divdf3+0x774>
    7560:	1400ac2e 	bgeu	r2,r16,7814 <__divdf3+0x774>
    7564:	423fff84 	addi	r8,r8,-2
    7568:	1705883a 	add	r2,r2,fp
    756c:	1421c83a 	sub	r16,r2,r16
    7570:	a00b883a 	mov	r5,r20
    7574:	8009883a 	mov	r4,r16
    7578:	d9800315 	stw	r6,12(sp)
    757c:	d9c00215 	stw	r7,8(sp)
    7580:	da000015 	stw	r8,0(sp)
    7584:	da400115 	stw	r9,4(sp)
    7588:	0008fe80 	call	8fe8 <__udivsi3>
    758c:	8009883a 	mov	r4,r16
    7590:	a00b883a 	mov	r5,r20
    7594:	1025883a 	mov	r18,r2
    7598:	000904c0 	call	904c <__umodsi3>
    759c:	d9c00217 	ldw	r7,8(sp)
    75a0:	1004943a 	slli	r2,r2,16
    75a4:	bcaf383a 	mul	r23,r23,r18
    75a8:	393fffcc 	andi	r4,r7,65535
    75ac:	2088b03a 	or	r4,r4,r2
    75b0:	d9800317 	ldw	r6,12(sp)
    75b4:	da000017 	ldw	r8,0(sp)
    75b8:	da400117 	ldw	r9,4(sp)
    75bc:	25c0062e 	bgeu	r4,r23,75d8 <__divdf3+0x538>
    75c0:	2709883a 	add	r4,r4,fp
    75c4:	90bfffc4 	addi	r2,r18,-1
    75c8:	27009436 	bltu	r4,fp,781c <__divdf3+0x77c>
    75cc:	25c0932e 	bgeu	r4,r23,781c <__divdf3+0x77c>
    75d0:	94bfff84 	addi	r18,r18,-2
    75d4:	2709883a 	add	r4,r4,fp
    75d8:	4004943a 	slli	r2,r8,16
    75dc:	25efc83a 	sub	r23,r4,r23
    75e0:	1490b03a 	or	r8,r2,r18
    75e4:	4008d43a 	srli	r4,r8,16
    75e8:	40ffffcc 	andi	r3,r8,65535
    75ec:	30c5383a 	mul	r2,r6,r3
    75f0:	1a47383a 	mul	r3,r3,r9
    75f4:	310d383a 	mul	r6,r6,r4
    75f8:	100ad43a 	srli	r5,r2,16
    75fc:	4913383a 	mul	r9,r9,r4
    7600:	1987883a 	add	r3,r3,r6
    7604:	28c7883a 	add	r3,r5,r3
    7608:	1980022e 	bgeu	r3,r6,7614 <__divdf3+0x574>
    760c:	01000074 	movhi	r4,1
    7610:	4913883a 	add	r9,r9,r4
    7614:	1808d43a 	srli	r4,r3,16
    7618:	1806943a 	slli	r3,r3,16
    761c:	10bfffcc 	andi	r2,r2,65535
    7620:	2253883a 	add	r9,r4,r9
    7624:	1887883a 	add	r3,r3,r2
    7628:	ba403836 	bltu	r23,r9,770c <__divdf3+0x66c>
    762c:	ba403626 	beq	r23,r9,7708 <__divdf3+0x668>
    7630:	42000054 	ori	r8,r8,1
    7634:	a880ffc4 	addi	r2,r21,1023
    7638:	00bf570e 	bge	zero,r2,7398 <__alt_data_end+0xf0007398>
    763c:	40c001cc 	andi	r3,r8,7
    7640:	18000726 	beq	r3,zero,7660 <__divdf3+0x5c0>
    7644:	40c003cc 	andi	r3,r8,15
    7648:	01000104 	movi	r4,4
    764c:	19000426 	beq	r3,r4,7660 <__divdf3+0x5c0>
    7650:	4107883a 	add	r3,r8,r4
    7654:	1a11803a 	cmpltu	r8,r3,r8
    7658:	8a23883a 	add	r17,r17,r8
    765c:	1811883a 	mov	r8,r3
    7660:	88c0402c 	andhi	r3,r17,256
    7664:	18000426 	beq	r3,zero,7678 <__divdf3+0x5d8>
    7668:	00ffc034 	movhi	r3,65280
    766c:	18ffffc4 	addi	r3,r3,-1
    7670:	a8810004 	addi	r2,r21,1024
    7674:	88e2703a 	and	r17,r17,r3
    7678:	00c1ff84 	movi	r3,2046
    767c:	18bee316 	blt	r3,r2,720c <__alt_data_end+0xf000720c>
    7680:	8824977a 	slli	r18,r17,29
    7684:	4010d0fa 	srli	r8,r8,3
    7688:	8822927a 	slli	r17,r17,9
    768c:	1081ffcc 	andi	r2,r2,2047
    7690:	9224b03a 	or	r18,r18,r8
    7694:	880ad33a 	srli	r5,r17,12
    7698:	98c0004c 	andi	r3,r19,1
    769c:	003edf06 	br	721c <__alt_data_end+0xf000721c>
    76a0:	8080022c 	andhi	r2,r16,8
    76a4:	10001226 	beq	r2,zero,76f0 <__divdf3+0x650>
    76a8:	8880022c 	andhi	r2,r17,8
    76ac:	1000101e 	bne	r2,zero,76f0 <__divdf3+0x650>
    76b0:	00800434 	movhi	r2,16
    76b4:	89400234 	orhi	r5,r17,8
    76b8:	10bfffc4 	addi	r2,r2,-1
    76bc:	b007883a 	mov	r3,r22
    76c0:	288a703a 	and	r5,r5,r2
    76c4:	4025883a 	mov	r18,r8
    76c8:	003f3106 	br	7390 <__alt_data_end+0xf0007390>
    76cc:	008000c4 	movi	r2,3
    76d0:	3880a626 	beq	r7,r2,796c <__divdf3+0x8cc>
    76d4:	00800044 	movi	r2,1
    76d8:	3880521e 	bne	r7,r2,7824 <__divdf3+0x784>
    76dc:	b807883a 	mov	r3,r23
    76e0:	0005883a 	mov	r2,zero
    76e4:	000b883a 	mov	r5,zero
    76e8:	0025883a 	mov	r18,zero
    76ec:	003ecb06 	br	721c <__alt_data_end+0xf000721c>
    76f0:	00800434 	movhi	r2,16
    76f4:	81400234 	orhi	r5,r16,8
    76f8:	10bfffc4 	addi	r2,r2,-1
    76fc:	a007883a 	mov	r3,r20
    7700:	288a703a 	and	r5,r5,r2
    7704:	003f2206 	br	7390 <__alt_data_end+0xf0007390>
    7708:	183fca26 	beq	r3,zero,7634 <__alt_data_end+0xf0007634>
    770c:	e5ef883a 	add	r23,fp,r23
    7710:	40bfffc4 	addi	r2,r8,-1
    7714:	bf00392e 	bgeu	r23,fp,77fc <__divdf3+0x75c>
    7718:	1011883a 	mov	r8,r2
    771c:	ba7fc41e 	bne	r23,r9,7630 <__alt_data_end+0xf0007630>
    7720:	b0ffc31e 	bne	r22,r3,7630 <__alt_data_end+0xf0007630>
    7724:	003fc306 	br	7634 <__alt_data_end+0xf0007634>
    7728:	143ff604 	addi	r16,r2,-40
    772c:	9c20983a 	sll	r16,r19,r16
    7730:	0025883a 	mov	r18,zero
    7734:	003ee206 	br	72c0 <__alt_data_end+0xf00072c0>
    7738:	d9800315 	stw	r6,12(sp)
    773c:	d9c00215 	stw	r7,8(sp)
    7740:	0008e8c0 	call	8e8c <__clzsi2>
    7744:	10800804 	addi	r2,r2,32
    7748:	d9c00217 	ldw	r7,8(sp)
    774c:	d9800317 	ldw	r6,12(sp)
    7750:	003ed106 	br	7298 <__alt_data_end+0xf0007298>
    7754:	147ff604 	addi	r17,r2,-40
    7758:	3462983a 	sll	r17,r6,r17
    775c:	0011883a 	mov	r8,zero
    7760:	003ef506 	br	7338 <__alt_data_end+0xf0007338>
    7764:	3009883a 	mov	r4,r6
    7768:	d9800315 	stw	r6,12(sp)
    776c:	da400115 	stw	r9,4(sp)
    7770:	0008e8c0 	call	8e8c <__clzsi2>
    7774:	10800804 	addi	r2,r2,32
    7778:	da400117 	ldw	r9,4(sp)
    777c:	d9800317 	ldw	r6,12(sp)
    7780:	003ee306 	br	7310 <__alt_data_end+0xf0007310>
    7784:	85a1883a 	add	r16,r16,r22
    7788:	8585803a 	cmpltu	r2,r16,r22
    778c:	1705883a 	add	r2,r2,fp
    7790:	14a5883a 	add	r18,r2,r18
    7794:	88bfffc4 	addi	r2,r17,-1
    7798:	e4800c2e 	bgeu	fp,r18,77cc <__divdf3+0x72c>
    779c:	90c03e36 	bltu	r18,r3,7898 <__divdf3+0x7f8>
    77a0:	1c806926 	beq	r3,r18,7948 <__divdf3+0x8a8>
    77a4:	90c7c83a 	sub	r3,r18,r3
    77a8:	1023883a 	mov	r17,r2
    77ac:	003f5206 	br	74f8 <__alt_data_end+0xf00074f8>
    77b0:	923f0436 	bltu	r18,r8,73c4 <__alt_data_end+0xf00073c4>
    77b4:	800897fa 	slli	r4,r16,31
    77b8:	9004d07a 	srli	r2,r18,1
    77bc:	8006d07a 	srli	r3,r16,1
    77c0:	902097fa 	slli	r16,r18,31
    77c4:	20a4b03a 	or	r18,r4,r2
    77c8:	003f0106 	br	73d0 <__alt_data_end+0xf00073d0>
    77cc:	e4bff51e 	bne	fp,r18,77a4 <__alt_data_end+0xf00077a4>
    77d0:	85bff22e 	bgeu	r16,r22,779c <__alt_data_end+0xf000779c>
    77d4:	e0c7c83a 	sub	r3,fp,r3
    77d8:	1023883a 	mov	r17,r2
    77dc:	003f4606 	br	74f8 <__alt_data_end+0xf00074f8>
    77e0:	100f883a 	mov	r7,r2
    77e4:	003f2b06 	br	7494 <__alt_data_end+0xf0007494>
    77e8:	180d883a 	mov	r6,r3
    77ec:	003f1306 	br	743c <__alt_data_end+0xf000743c>
    77f0:	813fe436 	bltu	r16,r4,7784 <__alt_data_end+0xf0007784>
    77f4:	0007883a 	mov	r3,zero
    77f8:	003f3f06 	br	74f8 <__alt_data_end+0xf00074f8>
    77fc:	ba402c36 	bltu	r23,r9,78b0 <__divdf3+0x810>
    7800:	4dc05426 	beq	r9,r23,7954 <__divdf3+0x8b4>
    7804:	1011883a 	mov	r8,r2
    7808:	003f8906 	br	7630 <__alt_data_end+0xf0007630>
    780c:	023fffc4 	movi	r8,-1
    7810:	003f8806 	br	7634 <__alt_data_end+0xf0007634>
    7814:	1811883a 	mov	r8,r3
    7818:	003f5406 	br	756c <__alt_data_end+0xf000756c>
    781c:	1025883a 	mov	r18,r2
    7820:	003f6d06 	br	75d8 <__alt_data_end+0xf00075d8>
    7824:	b827883a 	mov	r19,r23
    7828:	003f8206 	br	7634 <__alt_data_end+0xf0007634>
    782c:	010007c4 	movi	r4,31
    7830:	20c02616 	blt	r4,r3,78cc <__divdf3+0x82c>
    7834:	00800804 	movi	r2,32
    7838:	10c5c83a 	sub	r2,r2,r3
    783c:	888a983a 	sll	r5,r17,r2
    7840:	40c8d83a 	srl	r4,r8,r3
    7844:	4084983a 	sll	r2,r8,r2
    7848:	88e2d83a 	srl	r17,r17,r3
    784c:	2906b03a 	or	r3,r5,r4
    7850:	1004c03a 	cmpne	r2,r2,zero
    7854:	1886b03a 	or	r3,r3,r2
    7858:	188001cc 	andi	r2,r3,7
    785c:	10000726 	beq	r2,zero,787c <__divdf3+0x7dc>
    7860:	188003cc 	andi	r2,r3,15
    7864:	01000104 	movi	r4,4
    7868:	11000426 	beq	r2,r4,787c <__divdf3+0x7dc>
    786c:	1805883a 	mov	r2,r3
    7870:	10c00104 	addi	r3,r2,4
    7874:	1885803a 	cmpltu	r2,r3,r2
    7878:	88a3883a 	add	r17,r17,r2
    787c:	8880202c 	andhi	r2,r17,128
    7880:	10002726 	beq	r2,zero,7920 <__divdf3+0x880>
    7884:	98c0004c 	andi	r3,r19,1
    7888:	00800044 	movi	r2,1
    788c:	000b883a 	mov	r5,zero
    7890:	0025883a 	mov	r18,zero
    7894:	003e6106 	br	721c <__alt_data_end+0xf000721c>
    7898:	85a1883a 	add	r16,r16,r22
    789c:	8585803a 	cmpltu	r2,r16,r22
    78a0:	1705883a 	add	r2,r2,fp
    78a4:	14a5883a 	add	r18,r2,r18
    78a8:	8c7fff84 	addi	r17,r17,-2
    78ac:	003f1106 	br	74f4 <__alt_data_end+0xf00074f4>
    78b0:	b589883a 	add	r4,r22,r22
    78b4:	25ad803a 	cmpltu	r22,r4,r22
    78b8:	b739883a 	add	fp,r22,fp
    78bc:	40bfff84 	addi	r2,r8,-2
    78c0:	bf2f883a 	add	r23,r23,fp
    78c4:	202d883a 	mov	r22,r4
    78c8:	003f9306 	br	7718 <__alt_data_end+0xf0007718>
    78cc:	013ff844 	movi	r4,-31
    78d0:	2085c83a 	sub	r2,r4,r2
    78d4:	8888d83a 	srl	r4,r17,r2
    78d8:	00800804 	movi	r2,32
    78dc:	18802126 	beq	r3,r2,7964 <__divdf3+0x8c4>
    78e0:	00801004 	movi	r2,64
    78e4:	10c5c83a 	sub	r2,r2,r3
    78e8:	8884983a 	sll	r2,r17,r2
    78ec:	1204b03a 	or	r2,r2,r8
    78f0:	1004c03a 	cmpne	r2,r2,zero
    78f4:	2084b03a 	or	r2,r4,r2
    78f8:	144001cc 	andi	r17,r2,7
    78fc:	88000d1e 	bne	r17,zero,7934 <__divdf3+0x894>
    7900:	000b883a 	mov	r5,zero
    7904:	1024d0fa 	srli	r18,r2,3
    7908:	98c0004c 	andi	r3,r19,1
    790c:	0005883a 	mov	r2,zero
    7910:	9464b03a 	or	r18,r18,r17
    7914:	003e4106 	br	721c <__alt_data_end+0xf000721c>
    7918:	1007883a 	mov	r3,r2
    791c:	0023883a 	mov	r17,zero
    7920:	880a927a 	slli	r5,r17,9
    7924:	1805883a 	mov	r2,r3
    7928:	8822977a 	slli	r17,r17,29
    792c:	280ad33a 	srli	r5,r5,12
    7930:	003ff406 	br	7904 <__alt_data_end+0xf0007904>
    7934:	10c003cc 	andi	r3,r2,15
    7938:	01000104 	movi	r4,4
    793c:	193ff626 	beq	r3,r4,7918 <__alt_data_end+0xf0007918>
    7940:	0023883a 	mov	r17,zero
    7944:	003fca06 	br	7870 <__alt_data_end+0xf0007870>
    7948:	813fd336 	bltu	r16,r4,7898 <__alt_data_end+0xf0007898>
    794c:	1023883a 	mov	r17,r2
    7950:	003fa806 	br	77f4 <__alt_data_end+0xf00077f4>
    7954:	b0ffd636 	bltu	r22,r3,78b0 <__alt_data_end+0xf00078b0>
    7958:	1011883a 	mov	r8,r2
    795c:	b0ff341e 	bne	r22,r3,7630 <__alt_data_end+0xf0007630>
    7960:	003f3406 	br	7634 <__alt_data_end+0xf0007634>
    7964:	0005883a 	mov	r2,zero
    7968:	003fe006 	br	78ec <__alt_data_end+0xf00078ec>
    796c:	00800434 	movhi	r2,16
    7970:	89400234 	orhi	r5,r17,8
    7974:	10bfffc4 	addi	r2,r2,-1
    7978:	b807883a 	mov	r3,r23
    797c:	288a703a 	and	r5,r5,r2
    7980:	4025883a 	mov	r18,r8
    7984:	003e8206 	br	7390 <__alt_data_end+0xf0007390>

00007988 <__gedf2>:
    7988:	2804d53a 	srli	r2,r5,20
    798c:	3806d53a 	srli	r3,r7,20
    7990:	02000434 	movhi	r8,16
    7994:	423fffc4 	addi	r8,r8,-1
    7998:	1081ffcc 	andi	r2,r2,2047
    799c:	0241ffc4 	movi	r9,2047
    79a0:	2a14703a 	and	r10,r5,r8
    79a4:	18c1ffcc 	andi	r3,r3,2047
    79a8:	3a10703a 	and	r8,r7,r8
    79ac:	280ad7fa 	srli	r5,r5,31
    79b0:	380ed7fa 	srli	r7,r7,31
    79b4:	12401d26 	beq	r2,r9,7a2c <__gedf2+0xa4>
    79b8:	0241ffc4 	movi	r9,2047
    79bc:	1a401226 	beq	r3,r9,7a08 <__gedf2+0x80>
    79c0:	1000081e 	bne	r2,zero,79e4 <__gedf2+0x5c>
    79c4:	2296b03a 	or	r11,r4,r10
    79c8:	5813003a 	cmpeq	r9,r11,zero
    79cc:	1800091e 	bne	r3,zero,79f4 <__gedf2+0x6c>
    79d0:	3218b03a 	or	r12,r6,r8
    79d4:	6000071e 	bne	r12,zero,79f4 <__gedf2+0x6c>
    79d8:	0005883a 	mov	r2,zero
    79dc:	5800101e 	bne	r11,zero,7a20 <__gedf2+0x98>
    79e0:	f800283a 	ret
    79e4:	18000c1e 	bne	r3,zero,7a18 <__gedf2+0x90>
    79e8:	3212b03a 	or	r9,r6,r8
    79ec:	48000c26 	beq	r9,zero,7a20 <__gedf2+0x98>
    79f0:	0013883a 	mov	r9,zero
    79f4:	39c03fcc 	andi	r7,r7,255
    79f8:	48000826 	beq	r9,zero,7a1c <__gedf2+0x94>
    79fc:	38000926 	beq	r7,zero,7a24 <__gedf2+0x9c>
    7a00:	00800044 	movi	r2,1
    7a04:	f800283a 	ret
    7a08:	3212b03a 	or	r9,r6,r8
    7a0c:	483fec26 	beq	r9,zero,79c0 <__alt_data_end+0xf00079c0>
    7a10:	00bfff84 	movi	r2,-2
    7a14:	f800283a 	ret
    7a18:	39c03fcc 	andi	r7,r7,255
    7a1c:	29c00626 	beq	r5,r7,7a38 <__gedf2+0xb0>
    7a20:	283ff726 	beq	r5,zero,7a00 <__alt_data_end+0xf0007a00>
    7a24:	00bfffc4 	movi	r2,-1
    7a28:	f800283a 	ret
    7a2c:	2292b03a 	or	r9,r4,r10
    7a30:	483fe126 	beq	r9,zero,79b8 <__alt_data_end+0xf00079b8>
    7a34:	003ff606 	br	7a10 <__alt_data_end+0xf0007a10>
    7a38:	18bff916 	blt	r3,r2,7a20 <__alt_data_end+0xf0007a20>
    7a3c:	10c00316 	blt	r2,r3,7a4c <__gedf2+0xc4>
    7a40:	42bff736 	bltu	r8,r10,7a20 <__alt_data_end+0xf0007a20>
    7a44:	52000326 	beq	r10,r8,7a54 <__gedf2+0xcc>
    7a48:	5200042e 	bgeu	r10,r8,7a5c <__gedf2+0xd4>
    7a4c:	283fec1e 	bne	r5,zero,7a00 <__alt_data_end+0xf0007a00>
    7a50:	003ff406 	br	7a24 <__alt_data_end+0xf0007a24>
    7a54:	313ff236 	bltu	r6,r4,7a20 <__alt_data_end+0xf0007a20>
    7a58:	21bffc36 	bltu	r4,r6,7a4c <__alt_data_end+0xf0007a4c>
    7a5c:	0005883a 	mov	r2,zero
    7a60:	f800283a 	ret

00007a64 <__muldf3>:
    7a64:	defff304 	addi	sp,sp,-52
    7a68:	2804d53a 	srli	r2,r5,20
    7a6c:	dd800915 	stw	r22,36(sp)
    7a70:	282cd7fa 	srli	r22,r5,31
    7a74:	dc000315 	stw	r16,12(sp)
    7a78:	04000434 	movhi	r16,16
    7a7c:	dd400815 	stw	r21,32(sp)
    7a80:	dc800515 	stw	r18,20(sp)
    7a84:	843fffc4 	addi	r16,r16,-1
    7a88:	dfc00c15 	stw	ra,48(sp)
    7a8c:	df000b15 	stw	fp,44(sp)
    7a90:	ddc00a15 	stw	r23,40(sp)
    7a94:	dd000715 	stw	r20,28(sp)
    7a98:	dcc00615 	stw	r19,24(sp)
    7a9c:	dc400415 	stw	r17,16(sp)
    7aa0:	1481ffcc 	andi	r18,r2,2047
    7aa4:	2c20703a 	and	r16,r5,r16
    7aa8:	b02b883a 	mov	r21,r22
    7aac:	b2403fcc 	andi	r9,r22,255
    7ab0:	90006026 	beq	r18,zero,7c34 <__muldf3+0x1d0>
    7ab4:	0081ffc4 	movi	r2,2047
    7ab8:	2029883a 	mov	r20,r4
    7abc:	90803626 	beq	r18,r2,7b98 <__muldf3+0x134>
    7ac0:	80800434 	orhi	r2,r16,16
    7ac4:	100490fa 	slli	r2,r2,3
    7ac8:	2020d77a 	srli	r16,r4,29
    7acc:	202890fa 	slli	r20,r4,3
    7ad0:	94bf0044 	addi	r18,r18,-1023
    7ad4:	80a0b03a 	or	r16,r16,r2
    7ad8:	0027883a 	mov	r19,zero
    7adc:	0039883a 	mov	fp,zero
    7ae0:	3804d53a 	srli	r2,r7,20
    7ae4:	382ed7fa 	srli	r23,r7,31
    7ae8:	04400434 	movhi	r17,16
    7aec:	8c7fffc4 	addi	r17,r17,-1
    7af0:	1081ffcc 	andi	r2,r2,2047
    7af4:	3011883a 	mov	r8,r6
    7af8:	3c62703a 	and	r17,r7,r17
    7afc:	ba803fcc 	andi	r10,r23,255
    7b00:	10006d26 	beq	r2,zero,7cb8 <__muldf3+0x254>
    7b04:	00c1ffc4 	movi	r3,2047
    7b08:	10c06526 	beq	r2,r3,7ca0 <__muldf3+0x23c>
    7b0c:	88c00434 	orhi	r3,r17,16
    7b10:	180690fa 	slli	r3,r3,3
    7b14:	3022d77a 	srli	r17,r6,29
    7b18:	301090fa 	slli	r8,r6,3
    7b1c:	10bf0044 	addi	r2,r2,-1023
    7b20:	88e2b03a 	or	r17,r17,r3
    7b24:	000b883a 	mov	r5,zero
    7b28:	9085883a 	add	r2,r18,r2
    7b2c:	2cc8b03a 	or	r4,r5,r19
    7b30:	00c003c4 	movi	r3,15
    7b34:	bdacf03a 	xor	r22,r23,r22
    7b38:	12c00044 	addi	r11,r2,1
    7b3c:	19009936 	bltu	r3,r4,7da4 <__muldf3+0x340>
    7b40:	200890ba 	slli	r4,r4,2
    7b44:	00c00034 	movhi	r3,0
    7b48:	18ded604 	addi	r3,r3,31576
    7b4c:	20c9883a 	add	r4,r4,r3
    7b50:	20c00017 	ldw	r3,0(r4)
    7b54:	1800683a 	jmp	r3
    7b58:	00007da4 	muli	zero,zero,502
    7b5c:	00007bb8 	rdprs	zero,zero,494
    7b60:	00007bb8 	rdprs	zero,zero,494
    7b64:	00007bb4 	movhi	zero,494
    7b68:	00007d80 	call	7d8 <prvInitialiseCoRoutineLists+0x1c>
    7b6c:	00007d80 	call	7d8 <prvInitialiseCoRoutineLists+0x1c>
    7b70:	00007d68 	cmpgeui	zero,zero,501
    7b74:	00007bb4 	movhi	zero,494
    7b78:	00007d80 	call	7d8 <prvInitialiseCoRoutineLists+0x1c>
    7b7c:	00007d68 	cmpgeui	zero,zero,501
    7b80:	00007d80 	call	7d8 <prvInitialiseCoRoutineLists+0x1c>
    7b84:	00007bb4 	movhi	zero,494
    7b88:	00007d90 	cmplti	zero,zero,502
    7b8c:	00007d90 	cmplti	zero,zero,502
    7b90:	00007d90 	cmplti	zero,zero,502
    7b94:	00007fac 	andhi	zero,zero,510
    7b98:	2404b03a 	or	r2,r4,r16
    7b9c:	10006f1e 	bne	r2,zero,7d5c <__muldf3+0x2f8>
    7ba0:	04c00204 	movi	r19,8
    7ba4:	0021883a 	mov	r16,zero
    7ba8:	0029883a 	mov	r20,zero
    7bac:	07000084 	movi	fp,2
    7bb0:	003fcb06 	br	7ae0 <__alt_data_end+0xf0007ae0>
    7bb4:	502d883a 	mov	r22,r10
    7bb8:	00800084 	movi	r2,2
    7bbc:	28805726 	beq	r5,r2,7d1c <__muldf3+0x2b8>
    7bc0:	008000c4 	movi	r2,3
    7bc4:	28816626 	beq	r5,r2,8160 <__muldf3+0x6fc>
    7bc8:	00800044 	movi	r2,1
    7bcc:	2881411e 	bne	r5,r2,80d4 <__muldf3+0x670>
    7bd0:	b02b883a 	mov	r21,r22
    7bd4:	0005883a 	mov	r2,zero
    7bd8:	000b883a 	mov	r5,zero
    7bdc:	0029883a 	mov	r20,zero
    7be0:	1004953a 	slli	r2,r2,20
    7be4:	a8c03fcc 	andi	r3,r21,255
    7be8:	04400434 	movhi	r17,16
    7bec:	8c7fffc4 	addi	r17,r17,-1
    7bf0:	180697fa 	slli	r3,r3,31
    7bf4:	2c4a703a 	and	r5,r5,r17
    7bf8:	288ab03a 	or	r5,r5,r2
    7bfc:	28c6b03a 	or	r3,r5,r3
    7c00:	a005883a 	mov	r2,r20
    7c04:	dfc00c17 	ldw	ra,48(sp)
    7c08:	df000b17 	ldw	fp,44(sp)
    7c0c:	ddc00a17 	ldw	r23,40(sp)
    7c10:	dd800917 	ldw	r22,36(sp)
    7c14:	dd400817 	ldw	r21,32(sp)
    7c18:	dd000717 	ldw	r20,28(sp)
    7c1c:	dcc00617 	ldw	r19,24(sp)
    7c20:	dc800517 	ldw	r18,20(sp)
    7c24:	dc400417 	ldw	r17,16(sp)
    7c28:	dc000317 	ldw	r16,12(sp)
    7c2c:	dec00d04 	addi	sp,sp,52
    7c30:	f800283a 	ret
    7c34:	2404b03a 	or	r2,r4,r16
    7c38:	2027883a 	mov	r19,r4
    7c3c:	10004226 	beq	r2,zero,7d48 <__muldf3+0x2e4>
    7c40:	8000fc26 	beq	r16,zero,8034 <__muldf3+0x5d0>
    7c44:	8009883a 	mov	r4,r16
    7c48:	d9800215 	stw	r6,8(sp)
    7c4c:	d9c00015 	stw	r7,0(sp)
    7c50:	da400115 	stw	r9,4(sp)
    7c54:	0008e8c0 	call	8e8c <__clzsi2>
    7c58:	d9800217 	ldw	r6,8(sp)
    7c5c:	d9c00017 	ldw	r7,0(sp)
    7c60:	da400117 	ldw	r9,4(sp)
    7c64:	113ffd44 	addi	r4,r2,-11
    7c68:	00c00704 	movi	r3,28
    7c6c:	1900ed16 	blt	r3,r4,8024 <__muldf3+0x5c0>
    7c70:	00c00744 	movi	r3,29
    7c74:	147ffe04 	addi	r17,r2,-8
    7c78:	1907c83a 	sub	r3,r3,r4
    7c7c:	8460983a 	sll	r16,r16,r17
    7c80:	98c6d83a 	srl	r3,r19,r3
    7c84:	9c68983a 	sll	r20,r19,r17
    7c88:	1c20b03a 	or	r16,r3,r16
    7c8c:	1080fcc4 	addi	r2,r2,1011
    7c90:	00a5c83a 	sub	r18,zero,r2
    7c94:	0027883a 	mov	r19,zero
    7c98:	0039883a 	mov	fp,zero
    7c9c:	003f9006 	br	7ae0 <__alt_data_end+0xf0007ae0>
    7ca0:	3446b03a 	or	r3,r6,r17
    7ca4:	1800261e 	bne	r3,zero,7d40 <__muldf3+0x2dc>
    7ca8:	0023883a 	mov	r17,zero
    7cac:	0011883a 	mov	r8,zero
    7cb0:	01400084 	movi	r5,2
    7cb4:	003f9c06 	br	7b28 <__alt_data_end+0xf0007b28>
    7cb8:	3446b03a 	or	r3,r6,r17
    7cbc:	18001c26 	beq	r3,zero,7d30 <__muldf3+0x2cc>
    7cc0:	8800ce26 	beq	r17,zero,7ffc <__muldf3+0x598>
    7cc4:	8809883a 	mov	r4,r17
    7cc8:	d9800215 	stw	r6,8(sp)
    7ccc:	da400115 	stw	r9,4(sp)
    7cd0:	da800015 	stw	r10,0(sp)
    7cd4:	0008e8c0 	call	8e8c <__clzsi2>
    7cd8:	d9800217 	ldw	r6,8(sp)
    7cdc:	da400117 	ldw	r9,4(sp)
    7ce0:	da800017 	ldw	r10,0(sp)
    7ce4:	113ffd44 	addi	r4,r2,-11
    7ce8:	00c00704 	movi	r3,28
    7cec:	1900bf16 	blt	r3,r4,7fec <__muldf3+0x588>
    7cf0:	00c00744 	movi	r3,29
    7cf4:	123ffe04 	addi	r8,r2,-8
    7cf8:	1907c83a 	sub	r3,r3,r4
    7cfc:	8a22983a 	sll	r17,r17,r8
    7d00:	30c6d83a 	srl	r3,r6,r3
    7d04:	3210983a 	sll	r8,r6,r8
    7d08:	1c62b03a 	or	r17,r3,r17
    7d0c:	1080fcc4 	addi	r2,r2,1011
    7d10:	0085c83a 	sub	r2,zero,r2
    7d14:	000b883a 	mov	r5,zero
    7d18:	003f8306 	br	7b28 <__alt_data_end+0xf0007b28>
    7d1c:	b02b883a 	mov	r21,r22
    7d20:	0081ffc4 	movi	r2,2047
    7d24:	000b883a 	mov	r5,zero
    7d28:	0029883a 	mov	r20,zero
    7d2c:	003fac06 	br	7be0 <__alt_data_end+0xf0007be0>
    7d30:	0023883a 	mov	r17,zero
    7d34:	0011883a 	mov	r8,zero
    7d38:	01400044 	movi	r5,1
    7d3c:	003f7a06 	br	7b28 <__alt_data_end+0xf0007b28>
    7d40:	014000c4 	movi	r5,3
    7d44:	003f7806 	br	7b28 <__alt_data_end+0xf0007b28>
    7d48:	04c00104 	movi	r19,4
    7d4c:	0021883a 	mov	r16,zero
    7d50:	0029883a 	mov	r20,zero
    7d54:	07000044 	movi	fp,1
    7d58:	003f6106 	br	7ae0 <__alt_data_end+0xf0007ae0>
    7d5c:	04c00304 	movi	r19,12
    7d60:	070000c4 	movi	fp,3
    7d64:	003f5e06 	br	7ae0 <__alt_data_end+0xf0007ae0>
    7d68:	01400434 	movhi	r5,16
    7d6c:	002b883a 	mov	r21,zero
    7d70:	297fffc4 	addi	r5,r5,-1
    7d74:	053fffc4 	movi	r20,-1
    7d78:	0081ffc4 	movi	r2,2047
    7d7c:	003f9806 	br	7be0 <__alt_data_end+0xf0007be0>
    7d80:	8023883a 	mov	r17,r16
    7d84:	a011883a 	mov	r8,r20
    7d88:	e00b883a 	mov	r5,fp
    7d8c:	003f8a06 	br	7bb8 <__alt_data_end+0xf0007bb8>
    7d90:	8023883a 	mov	r17,r16
    7d94:	a011883a 	mov	r8,r20
    7d98:	482d883a 	mov	r22,r9
    7d9c:	e00b883a 	mov	r5,fp
    7da0:	003f8506 	br	7bb8 <__alt_data_end+0xf0007bb8>
    7da4:	a00ad43a 	srli	r5,r20,16
    7da8:	401ad43a 	srli	r13,r8,16
    7dac:	a53fffcc 	andi	r20,r20,65535
    7db0:	423fffcc 	andi	r8,r8,65535
    7db4:	4519383a 	mul	r12,r8,r20
    7db8:	4147383a 	mul	r3,r8,r5
    7dbc:	6d09383a 	mul	r4,r13,r20
    7dc0:	600cd43a 	srli	r6,r12,16
    7dc4:	2b5d383a 	mul	r14,r5,r13
    7dc8:	20c9883a 	add	r4,r4,r3
    7dcc:	310d883a 	add	r6,r6,r4
    7dd0:	30c0022e 	bgeu	r6,r3,7ddc <__muldf3+0x378>
    7dd4:	00c00074 	movhi	r3,1
    7dd8:	70dd883a 	add	r14,r14,r3
    7ddc:	8826d43a 	srli	r19,r17,16
    7de0:	8bffffcc 	andi	r15,r17,65535
    7de4:	7d23383a 	mul	r17,r15,r20
    7de8:	7949383a 	mul	r4,r15,r5
    7dec:	9d29383a 	mul	r20,r19,r20
    7df0:	8814d43a 	srli	r10,r17,16
    7df4:	3012943a 	slli	r9,r6,16
    7df8:	a129883a 	add	r20,r20,r4
    7dfc:	633fffcc 	andi	r12,r12,65535
    7e00:	5515883a 	add	r10,r10,r20
    7e04:	3006d43a 	srli	r3,r6,16
    7e08:	4b13883a 	add	r9,r9,r12
    7e0c:	2ccb383a 	mul	r5,r5,r19
    7e10:	5100022e 	bgeu	r10,r4,7e1c <__muldf3+0x3b8>
    7e14:	01000074 	movhi	r4,1
    7e18:	290b883a 	add	r5,r5,r4
    7e1c:	802ad43a 	srli	r21,r16,16
    7e20:	843fffcc 	andi	r16,r16,65535
    7e24:	440d383a 	mul	r6,r8,r16
    7e28:	4565383a 	mul	r18,r8,r21
    7e2c:	8349383a 	mul	r4,r16,r13
    7e30:	500e943a 	slli	r7,r10,16
    7e34:	3010d43a 	srli	r8,r6,16
    7e38:	5028d43a 	srli	r20,r10,16
    7e3c:	2489883a 	add	r4,r4,r18
    7e40:	8abfffcc 	andi	r10,r17,65535
    7e44:	3a95883a 	add	r10,r7,r10
    7e48:	4119883a 	add	r12,r8,r4
    7e4c:	a169883a 	add	r20,r20,r5
    7e50:	1a87883a 	add	r3,r3,r10
    7e54:	6d5b383a 	mul	r13,r13,r21
    7e58:	6480022e 	bgeu	r12,r18,7e64 <__muldf3+0x400>
    7e5c:	01000074 	movhi	r4,1
    7e60:	691b883a 	add	r13,r13,r4
    7e64:	7c25383a 	mul	r18,r15,r16
    7e68:	7d4b383a 	mul	r5,r15,r21
    7e6c:	84cf383a 	mul	r7,r16,r19
    7e70:	901ed43a 	srli	r15,r18,16
    7e74:	6008d43a 	srli	r4,r12,16
    7e78:	6010943a 	slli	r8,r12,16
    7e7c:	394f883a 	add	r7,r7,r5
    7e80:	333fffcc 	andi	r12,r6,65535
    7e84:	79df883a 	add	r15,r15,r7
    7e88:	235b883a 	add	r13,r4,r13
    7e8c:	9d63383a 	mul	r17,r19,r21
    7e90:	4309883a 	add	r4,r8,r12
    7e94:	7940022e 	bgeu	r15,r5,7ea0 <__muldf3+0x43c>
    7e98:	01400074 	movhi	r5,1
    7e9c:	8963883a 	add	r17,r17,r5
    7ea0:	780a943a 	slli	r5,r15,16
    7ea4:	91bfffcc 	andi	r6,r18,65535
    7ea8:	70c7883a 	add	r3,r14,r3
    7eac:	298d883a 	add	r6,r5,r6
    7eb0:	1a8f803a 	cmpltu	r7,r3,r10
    7eb4:	350b883a 	add	r5,r6,r20
    7eb8:	20c7883a 	add	r3,r4,r3
    7ebc:	3955883a 	add	r10,r7,r5
    7ec0:	1909803a 	cmpltu	r4,r3,r4
    7ec4:	6a91883a 	add	r8,r13,r10
    7ec8:	780cd43a 	srli	r6,r15,16
    7ecc:	2219883a 	add	r12,r4,r8
    7ed0:	2d0b803a 	cmpltu	r5,r5,r20
    7ed4:	51cf803a 	cmpltu	r7,r10,r7
    7ed8:	29ceb03a 	or	r7,r5,r7
    7edc:	4351803a 	cmpltu	r8,r8,r13
    7ee0:	610b803a 	cmpltu	r5,r12,r4
    7ee4:	4148b03a 	or	r4,r8,r5
    7ee8:	398f883a 	add	r7,r7,r6
    7eec:	3909883a 	add	r4,r7,r4
    7ef0:	1810927a 	slli	r8,r3,9
    7ef4:	2449883a 	add	r4,r4,r17
    7ef8:	2008927a 	slli	r4,r4,9
    7efc:	6022d5fa 	srli	r17,r12,23
    7f00:	1806d5fa 	srli	r3,r3,23
    7f04:	4252b03a 	or	r9,r8,r9
    7f08:	600a927a 	slli	r5,r12,9
    7f0c:	4810c03a 	cmpne	r8,r9,zero
    7f10:	2462b03a 	or	r17,r4,r17
    7f14:	40c6b03a 	or	r3,r8,r3
    7f18:	8900402c 	andhi	r4,r17,256
    7f1c:	1950b03a 	or	r8,r3,r5
    7f20:	20000726 	beq	r4,zero,7f40 <__muldf3+0x4dc>
    7f24:	4006d07a 	srli	r3,r8,1
    7f28:	880497fa 	slli	r2,r17,31
    7f2c:	4200004c 	andi	r8,r8,1
    7f30:	8822d07a 	srli	r17,r17,1
    7f34:	1a10b03a 	or	r8,r3,r8
    7f38:	1210b03a 	or	r8,r2,r8
    7f3c:	5805883a 	mov	r2,r11
    7f40:	1140ffc4 	addi	r5,r2,1023
    7f44:	0140440e 	bge	zero,r5,8058 <__muldf3+0x5f4>
    7f48:	40c001cc 	andi	r3,r8,7
    7f4c:	18000726 	beq	r3,zero,7f6c <__muldf3+0x508>
    7f50:	40c003cc 	andi	r3,r8,15
    7f54:	01000104 	movi	r4,4
    7f58:	19000426 	beq	r3,r4,7f6c <__muldf3+0x508>
    7f5c:	4107883a 	add	r3,r8,r4
    7f60:	1a11803a 	cmpltu	r8,r3,r8
    7f64:	8a23883a 	add	r17,r17,r8
    7f68:	1811883a 	mov	r8,r3
    7f6c:	88c0402c 	andhi	r3,r17,256
    7f70:	18000426 	beq	r3,zero,7f84 <__muldf3+0x520>
    7f74:	11410004 	addi	r5,r2,1024
    7f78:	00bfc034 	movhi	r2,65280
    7f7c:	10bfffc4 	addi	r2,r2,-1
    7f80:	88a2703a 	and	r17,r17,r2
    7f84:	0081ff84 	movi	r2,2046
    7f88:	117f6416 	blt	r2,r5,7d1c <__alt_data_end+0xf0007d1c>
    7f8c:	8828977a 	slli	r20,r17,29
    7f90:	4010d0fa 	srli	r8,r8,3
    7f94:	8822927a 	slli	r17,r17,9
    7f98:	2881ffcc 	andi	r2,r5,2047
    7f9c:	a228b03a 	or	r20,r20,r8
    7fa0:	880ad33a 	srli	r5,r17,12
    7fa4:	b02b883a 	mov	r21,r22
    7fa8:	003f0d06 	br	7be0 <__alt_data_end+0xf0007be0>
    7fac:	8080022c 	andhi	r2,r16,8
    7fb0:	10000926 	beq	r2,zero,7fd8 <__muldf3+0x574>
    7fb4:	8880022c 	andhi	r2,r17,8
    7fb8:	1000071e 	bne	r2,zero,7fd8 <__muldf3+0x574>
    7fbc:	00800434 	movhi	r2,16
    7fc0:	89400234 	orhi	r5,r17,8
    7fc4:	10bfffc4 	addi	r2,r2,-1
    7fc8:	b82b883a 	mov	r21,r23
    7fcc:	288a703a 	and	r5,r5,r2
    7fd0:	4029883a 	mov	r20,r8
    7fd4:	003f6806 	br	7d78 <__alt_data_end+0xf0007d78>
    7fd8:	00800434 	movhi	r2,16
    7fdc:	81400234 	orhi	r5,r16,8
    7fe0:	10bfffc4 	addi	r2,r2,-1
    7fe4:	288a703a 	and	r5,r5,r2
    7fe8:	003f6306 	br	7d78 <__alt_data_end+0xf0007d78>
    7fec:	147ff604 	addi	r17,r2,-40
    7ff0:	3462983a 	sll	r17,r6,r17
    7ff4:	0011883a 	mov	r8,zero
    7ff8:	003f4406 	br	7d0c <__alt_data_end+0xf0007d0c>
    7ffc:	3009883a 	mov	r4,r6
    8000:	d9800215 	stw	r6,8(sp)
    8004:	da400115 	stw	r9,4(sp)
    8008:	da800015 	stw	r10,0(sp)
    800c:	0008e8c0 	call	8e8c <__clzsi2>
    8010:	10800804 	addi	r2,r2,32
    8014:	da800017 	ldw	r10,0(sp)
    8018:	da400117 	ldw	r9,4(sp)
    801c:	d9800217 	ldw	r6,8(sp)
    8020:	003f3006 	br	7ce4 <__alt_data_end+0xf0007ce4>
    8024:	143ff604 	addi	r16,r2,-40
    8028:	9c20983a 	sll	r16,r19,r16
    802c:	0029883a 	mov	r20,zero
    8030:	003f1606 	br	7c8c <__alt_data_end+0xf0007c8c>
    8034:	d9800215 	stw	r6,8(sp)
    8038:	d9c00015 	stw	r7,0(sp)
    803c:	da400115 	stw	r9,4(sp)
    8040:	0008e8c0 	call	8e8c <__clzsi2>
    8044:	10800804 	addi	r2,r2,32
    8048:	da400117 	ldw	r9,4(sp)
    804c:	d9c00017 	ldw	r7,0(sp)
    8050:	d9800217 	ldw	r6,8(sp)
    8054:	003f0306 	br	7c64 <__alt_data_end+0xf0007c64>
    8058:	00c00044 	movi	r3,1
    805c:	1947c83a 	sub	r3,r3,r5
    8060:	00800e04 	movi	r2,56
    8064:	10feda16 	blt	r2,r3,7bd0 <__alt_data_end+0xf0007bd0>
    8068:	008007c4 	movi	r2,31
    806c:	10c01b16 	blt	r2,r3,80dc <__muldf3+0x678>
    8070:	00800804 	movi	r2,32
    8074:	10c5c83a 	sub	r2,r2,r3
    8078:	888a983a 	sll	r5,r17,r2
    807c:	40c8d83a 	srl	r4,r8,r3
    8080:	4084983a 	sll	r2,r8,r2
    8084:	88e2d83a 	srl	r17,r17,r3
    8088:	2906b03a 	or	r3,r5,r4
    808c:	1004c03a 	cmpne	r2,r2,zero
    8090:	1886b03a 	or	r3,r3,r2
    8094:	188001cc 	andi	r2,r3,7
    8098:	10000726 	beq	r2,zero,80b8 <__muldf3+0x654>
    809c:	188003cc 	andi	r2,r3,15
    80a0:	01000104 	movi	r4,4
    80a4:	11000426 	beq	r2,r4,80b8 <__muldf3+0x654>
    80a8:	1805883a 	mov	r2,r3
    80ac:	10c00104 	addi	r3,r2,4
    80b0:	1885803a 	cmpltu	r2,r3,r2
    80b4:	88a3883a 	add	r17,r17,r2
    80b8:	8880202c 	andhi	r2,r17,128
    80bc:	10001c26 	beq	r2,zero,8130 <__muldf3+0x6cc>
    80c0:	b02b883a 	mov	r21,r22
    80c4:	00800044 	movi	r2,1
    80c8:	000b883a 	mov	r5,zero
    80cc:	0029883a 	mov	r20,zero
    80d0:	003ec306 	br	7be0 <__alt_data_end+0xf0007be0>
    80d4:	5805883a 	mov	r2,r11
    80d8:	003f9906 	br	7f40 <__alt_data_end+0xf0007f40>
    80dc:	00bff844 	movi	r2,-31
    80e0:	1145c83a 	sub	r2,r2,r5
    80e4:	8888d83a 	srl	r4,r17,r2
    80e8:	00800804 	movi	r2,32
    80ec:	18801a26 	beq	r3,r2,8158 <__muldf3+0x6f4>
    80f0:	00801004 	movi	r2,64
    80f4:	10c5c83a 	sub	r2,r2,r3
    80f8:	8884983a 	sll	r2,r17,r2
    80fc:	1204b03a 	or	r2,r2,r8
    8100:	1004c03a 	cmpne	r2,r2,zero
    8104:	2084b03a 	or	r2,r4,r2
    8108:	144001cc 	andi	r17,r2,7
    810c:	88000d1e 	bne	r17,zero,8144 <__muldf3+0x6e0>
    8110:	000b883a 	mov	r5,zero
    8114:	1028d0fa 	srli	r20,r2,3
    8118:	b02b883a 	mov	r21,r22
    811c:	0005883a 	mov	r2,zero
    8120:	a468b03a 	or	r20,r20,r17
    8124:	003eae06 	br	7be0 <__alt_data_end+0xf0007be0>
    8128:	1007883a 	mov	r3,r2
    812c:	0023883a 	mov	r17,zero
    8130:	880a927a 	slli	r5,r17,9
    8134:	1805883a 	mov	r2,r3
    8138:	8822977a 	slli	r17,r17,29
    813c:	280ad33a 	srli	r5,r5,12
    8140:	003ff406 	br	8114 <__alt_data_end+0xf0008114>
    8144:	10c003cc 	andi	r3,r2,15
    8148:	01000104 	movi	r4,4
    814c:	193ff626 	beq	r3,r4,8128 <__alt_data_end+0xf0008128>
    8150:	0023883a 	mov	r17,zero
    8154:	003fd506 	br	80ac <__alt_data_end+0xf00080ac>
    8158:	0005883a 	mov	r2,zero
    815c:	003fe706 	br	80fc <__alt_data_end+0xf00080fc>
    8160:	00800434 	movhi	r2,16
    8164:	89400234 	orhi	r5,r17,8
    8168:	10bfffc4 	addi	r2,r2,-1
    816c:	b02b883a 	mov	r21,r22
    8170:	288a703a 	and	r5,r5,r2
    8174:	4029883a 	mov	r20,r8
    8178:	003eff06 	br	7d78 <__alt_data_end+0xf0007d78>

0000817c <__subdf3>:
    817c:	02000434 	movhi	r8,16
    8180:	423fffc4 	addi	r8,r8,-1
    8184:	defffb04 	addi	sp,sp,-20
    8188:	2a14703a 	and	r10,r5,r8
    818c:	3812d53a 	srli	r9,r7,20
    8190:	3a10703a 	and	r8,r7,r8
    8194:	2006d77a 	srli	r3,r4,29
    8198:	3004d77a 	srli	r2,r6,29
    819c:	dc000015 	stw	r16,0(sp)
    81a0:	501490fa 	slli	r10,r10,3
    81a4:	2820d53a 	srli	r16,r5,20
    81a8:	401090fa 	slli	r8,r8,3
    81ac:	dc800215 	stw	r18,8(sp)
    81b0:	dc400115 	stw	r17,4(sp)
    81b4:	dfc00415 	stw	ra,16(sp)
    81b8:	202290fa 	slli	r17,r4,3
    81bc:	dcc00315 	stw	r19,12(sp)
    81c0:	4a41ffcc 	andi	r9,r9,2047
    81c4:	0101ffc4 	movi	r4,2047
    81c8:	2824d7fa 	srli	r18,r5,31
    81cc:	8401ffcc 	andi	r16,r16,2047
    81d0:	50c6b03a 	or	r3,r10,r3
    81d4:	380ed7fa 	srli	r7,r7,31
    81d8:	408ab03a 	or	r5,r8,r2
    81dc:	300c90fa 	slli	r6,r6,3
    81e0:	49009626 	beq	r9,r4,843c <__subdf3+0x2c0>
    81e4:	39c0005c 	xori	r7,r7,1
    81e8:	8245c83a 	sub	r2,r16,r9
    81ec:	3c807426 	beq	r7,r18,83c0 <__subdf3+0x244>
    81f0:	0080af0e 	bge	zero,r2,84b0 <__subdf3+0x334>
    81f4:	48002a1e 	bne	r9,zero,82a0 <__subdf3+0x124>
    81f8:	2988b03a 	or	r4,r5,r6
    81fc:	20009a1e 	bne	r4,zero,8468 <__subdf3+0x2ec>
    8200:	888001cc 	andi	r2,r17,7
    8204:	10000726 	beq	r2,zero,8224 <__subdf3+0xa8>
    8208:	888003cc 	andi	r2,r17,15
    820c:	01000104 	movi	r4,4
    8210:	11000426 	beq	r2,r4,8224 <__subdf3+0xa8>
    8214:	890b883a 	add	r5,r17,r4
    8218:	2c63803a 	cmpltu	r17,r5,r17
    821c:	1c47883a 	add	r3,r3,r17
    8220:	2823883a 	mov	r17,r5
    8224:	1880202c 	andhi	r2,r3,128
    8228:	10005926 	beq	r2,zero,8390 <__subdf3+0x214>
    822c:	84000044 	addi	r16,r16,1
    8230:	0081ffc4 	movi	r2,2047
    8234:	8080be26 	beq	r16,r2,8530 <__subdf3+0x3b4>
    8238:	017fe034 	movhi	r5,65408
    823c:	297fffc4 	addi	r5,r5,-1
    8240:	1946703a 	and	r3,r3,r5
    8244:	1804977a 	slli	r2,r3,29
    8248:	1806927a 	slli	r3,r3,9
    824c:	8822d0fa 	srli	r17,r17,3
    8250:	8401ffcc 	andi	r16,r16,2047
    8254:	180ad33a 	srli	r5,r3,12
    8258:	9100004c 	andi	r4,r18,1
    825c:	1444b03a 	or	r2,r2,r17
    8260:	80c1ffcc 	andi	r3,r16,2047
    8264:	1820953a 	slli	r16,r3,20
    8268:	20c03fcc 	andi	r3,r4,255
    826c:	180897fa 	slli	r4,r3,31
    8270:	00c00434 	movhi	r3,16
    8274:	18ffffc4 	addi	r3,r3,-1
    8278:	28c6703a 	and	r3,r5,r3
    827c:	1c06b03a 	or	r3,r3,r16
    8280:	1906b03a 	or	r3,r3,r4
    8284:	dfc00417 	ldw	ra,16(sp)
    8288:	dcc00317 	ldw	r19,12(sp)
    828c:	dc800217 	ldw	r18,8(sp)
    8290:	dc400117 	ldw	r17,4(sp)
    8294:	dc000017 	ldw	r16,0(sp)
    8298:	dec00504 	addi	sp,sp,20
    829c:	f800283a 	ret
    82a0:	0101ffc4 	movi	r4,2047
    82a4:	813fd626 	beq	r16,r4,8200 <__alt_data_end+0xf0008200>
    82a8:	29402034 	orhi	r5,r5,128
    82ac:	01000e04 	movi	r4,56
    82b0:	2080a316 	blt	r4,r2,8540 <__subdf3+0x3c4>
    82b4:	010007c4 	movi	r4,31
    82b8:	2080c616 	blt	r4,r2,85d4 <__subdf3+0x458>
    82bc:	01000804 	movi	r4,32
    82c0:	2089c83a 	sub	r4,r4,r2
    82c4:	2910983a 	sll	r8,r5,r4
    82c8:	308ed83a 	srl	r7,r6,r2
    82cc:	3108983a 	sll	r4,r6,r4
    82d0:	2884d83a 	srl	r2,r5,r2
    82d4:	41ccb03a 	or	r6,r8,r7
    82d8:	2008c03a 	cmpne	r4,r4,zero
    82dc:	310cb03a 	or	r6,r6,r4
    82e0:	898dc83a 	sub	r6,r17,r6
    82e4:	89a3803a 	cmpltu	r17,r17,r6
    82e8:	1887c83a 	sub	r3,r3,r2
    82ec:	1c47c83a 	sub	r3,r3,r17
    82f0:	3023883a 	mov	r17,r6
    82f4:	1880202c 	andhi	r2,r3,128
    82f8:	10002326 	beq	r2,zero,8388 <__subdf3+0x20c>
    82fc:	04c02034 	movhi	r19,128
    8300:	9cffffc4 	addi	r19,r19,-1
    8304:	1ce6703a 	and	r19,r3,r19
    8308:	98007a26 	beq	r19,zero,84f4 <__subdf3+0x378>
    830c:	9809883a 	mov	r4,r19
    8310:	0008e8c0 	call	8e8c <__clzsi2>
    8314:	113ffe04 	addi	r4,r2,-8
    8318:	00c007c4 	movi	r3,31
    831c:	19007b16 	blt	r3,r4,850c <__subdf3+0x390>
    8320:	00800804 	movi	r2,32
    8324:	1105c83a 	sub	r2,r2,r4
    8328:	8884d83a 	srl	r2,r17,r2
    832c:	9906983a 	sll	r3,r19,r4
    8330:	8922983a 	sll	r17,r17,r4
    8334:	10c4b03a 	or	r2,r2,r3
    8338:	24007816 	blt	r4,r16,851c <__subdf3+0x3a0>
    833c:	2421c83a 	sub	r16,r4,r16
    8340:	80c00044 	addi	r3,r16,1
    8344:	010007c4 	movi	r4,31
    8348:	20c09516 	blt	r4,r3,85a0 <__subdf3+0x424>
    834c:	01400804 	movi	r5,32
    8350:	28cbc83a 	sub	r5,r5,r3
    8354:	88c8d83a 	srl	r4,r17,r3
    8358:	8962983a 	sll	r17,r17,r5
    835c:	114a983a 	sll	r5,r2,r5
    8360:	10c6d83a 	srl	r3,r2,r3
    8364:	8804c03a 	cmpne	r2,r17,zero
    8368:	290ab03a 	or	r5,r5,r4
    836c:	28a2b03a 	or	r17,r5,r2
    8370:	0021883a 	mov	r16,zero
    8374:	003fa206 	br	8200 <__alt_data_end+0xf0008200>
    8378:	2090b03a 	or	r8,r4,r2
    837c:	40018e26 	beq	r8,zero,89b8 <__subdf3+0x83c>
    8380:	1007883a 	mov	r3,r2
    8384:	2023883a 	mov	r17,r4
    8388:	888001cc 	andi	r2,r17,7
    838c:	103f9e1e 	bne	r2,zero,8208 <__alt_data_end+0xf0008208>
    8390:	1804977a 	slli	r2,r3,29
    8394:	8822d0fa 	srli	r17,r17,3
    8398:	1810d0fa 	srli	r8,r3,3
    839c:	9100004c 	andi	r4,r18,1
    83a0:	1444b03a 	or	r2,r2,r17
    83a4:	00c1ffc4 	movi	r3,2047
    83a8:	80c02826 	beq	r16,r3,844c <__subdf3+0x2d0>
    83ac:	01400434 	movhi	r5,16
    83b0:	297fffc4 	addi	r5,r5,-1
    83b4:	80e0703a 	and	r16,r16,r3
    83b8:	414a703a 	and	r5,r8,r5
    83bc:	003fa806 	br	8260 <__alt_data_end+0xf0008260>
    83c0:	0080630e 	bge	zero,r2,8550 <__subdf3+0x3d4>
    83c4:	48003026 	beq	r9,zero,8488 <__subdf3+0x30c>
    83c8:	0101ffc4 	movi	r4,2047
    83cc:	813f8c26 	beq	r16,r4,8200 <__alt_data_end+0xf0008200>
    83d0:	29402034 	orhi	r5,r5,128
    83d4:	01000e04 	movi	r4,56
    83d8:	2080a90e 	bge	r4,r2,8680 <__subdf3+0x504>
    83dc:	298cb03a 	or	r6,r5,r6
    83e0:	3012c03a 	cmpne	r9,r6,zero
    83e4:	0005883a 	mov	r2,zero
    83e8:	4c53883a 	add	r9,r9,r17
    83ec:	4c63803a 	cmpltu	r17,r9,r17
    83f0:	10c7883a 	add	r3,r2,r3
    83f4:	88c7883a 	add	r3,r17,r3
    83f8:	4823883a 	mov	r17,r9
    83fc:	1880202c 	andhi	r2,r3,128
    8400:	1000d026 	beq	r2,zero,8744 <__subdf3+0x5c8>
    8404:	84000044 	addi	r16,r16,1
    8408:	0081ffc4 	movi	r2,2047
    840c:	8080fe26 	beq	r16,r2,8808 <__subdf3+0x68c>
    8410:	00bfe034 	movhi	r2,65408
    8414:	10bfffc4 	addi	r2,r2,-1
    8418:	1886703a 	and	r3,r3,r2
    841c:	880ad07a 	srli	r5,r17,1
    8420:	180497fa 	slli	r2,r3,31
    8424:	8900004c 	andi	r4,r17,1
    8428:	2922b03a 	or	r17,r5,r4
    842c:	1806d07a 	srli	r3,r3,1
    8430:	1462b03a 	or	r17,r2,r17
    8434:	3825883a 	mov	r18,r7
    8438:	003f7106 	br	8200 <__alt_data_end+0xf0008200>
    843c:	2984b03a 	or	r2,r5,r6
    8440:	103f6826 	beq	r2,zero,81e4 <__alt_data_end+0xf00081e4>
    8444:	39c03fcc 	andi	r7,r7,255
    8448:	003f6706 	br	81e8 <__alt_data_end+0xf00081e8>
    844c:	4086b03a 	or	r3,r8,r2
    8450:	18015226 	beq	r3,zero,899c <__subdf3+0x820>
    8454:	00c00434 	movhi	r3,16
    8458:	41400234 	orhi	r5,r8,8
    845c:	18ffffc4 	addi	r3,r3,-1
    8460:	28ca703a 	and	r5,r5,r3
    8464:	003f7e06 	br	8260 <__alt_data_end+0xf0008260>
    8468:	10bfffc4 	addi	r2,r2,-1
    846c:	1000491e 	bne	r2,zero,8594 <__subdf3+0x418>
    8470:	898fc83a 	sub	r7,r17,r6
    8474:	89e3803a 	cmpltu	r17,r17,r7
    8478:	1947c83a 	sub	r3,r3,r5
    847c:	1c47c83a 	sub	r3,r3,r17
    8480:	3823883a 	mov	r17,r7
    8484:	003f9b06 	br	82f4 <__alt_data_end+0xf00082f4>
    8488:	2988b03a 	or	r4,r5,r6
    848c:	203f5c26 	beq	r4,zero,8200 <__alt_data_end+0xf0008200>
    8490:	10bfffc4 	addi	r2,r2,-1
    8494:	1000931e 	bne	r2,zero,86e4 <__subdf3+0x568>
    8498:	898d883a 	add	r6,r17,r6
    849c:	3463803a 	cmpltu	r17,r6,r17
    84a0:	1947883a 	add	r3,r3,r5
    84a4:	88c7883a 	add	r3,r17,r3
    84a8:	3023883a 	mov	r17,r6
    84ac:	003fd306 	br	83fc <__alt_data_end+0xf00083fc>
    84b0:	1000541e 	bne	r2,zero,8604 <__subdf3+0x488>
    84b4:	80800044 	addi	r2,r16,1
    84b8:	1081ffcc 	andi	r2,r2,2047
    84bc:	01000044 	movi	r4,1
    84c0:	2080a20e 	bge	r4,r2,874c <__subdf3+0x5d0>
    84c4:	8989c83a 	sub	r4,r17,r6
    84c8:	8905803a 	cmpltu	r2,r17,r4
    84cc:	1967c83a 	sub	r19,r3,r5
    84d0:	98a7c83a 	sub	r19,r19,r2
    84d4:	9880202c 	andhi	r2,r19,128
    84d8:	10006326 	beq	r2,zero,8668 <__subdf3+0x4ec>
    84dc:	3463c83a 	sub	r17,r6,r17
    84e0:	28c7c83a 	sub	r3,r5,r3
    84e4:	344d803a 	cmpltu	r6,r6,r17
    84e8:	19a7c83a 	sub	r19,r3,r6
    84ec:	3825883a 	mov	r18,r7
    84f0:	983f861e 	bne	r19,zero,830c <__alt_data_end+0xf000830c>
    84f4:	8809883a 	mov	r4,r17
    84f8:	0008e8c0 	call	8e8c <__clzsi2>
    84fc:	10800804 	addi	r2,r2,32
    8500:	113ffe04 	addi	r4,r2,-8
    8504:	00c007c4 	movi	r3,31
    8508:	193f850e 	bge	r3,r4,8320 <__alt_data_end+0xf0008320>
    850c:	10bff604 	addi	r2,r2,-40
    8510:	8884983a 	sll	r2,r17,r2
    8514:	0023883a 	mov	r17,zero
    8518:	243f880e 	bge	r4,r16,833c <__alt_data_end+0xf000833c>
    851c:	00ffe034 	movhi	r3,65408
    8520:	18ffffc4 	addi	r3,r3,-1
    8524:	8121c83a 	sub	r16,r16,r4
    8528:	10c6703a 	and	r3,r2,r3
    852c:	003f3406 	br	8200 <__alt_data_end+0xf0008200>
    8530:	9100004c 	andi	r4,r18,1
    8534:	000b883a 	mov	r5,zero
    8538:	0005883a 	mov	r2,zero
    853c:	003f4806 	br	8260 <__alt_data_end+0xf0008260>
    8540:	298cb03a 	or	r6,r5,r6
    8544:	300cc03a 	cmpne	r6,r6,zero
    8548:	0005883a 	mov	r2,zero
    854c:	003f6406 	br	82e0 <__alt_data_end+0xf00082e0>
    8550:	10009a1e 	bne	r2,zero,87bc <__subdf3+0x640>
    8554:	82400044 	addi	r9,r16,1
    8558:	4881ffcc 	andi	r2,r9,2047
    855c:	02800044 	movi	r10,1
    8560:	5080670e 	bge	r10,r2,8700 <__subdf3+0x584>
    8564:	0081ffc4 	movi	r2,2047
    8568:	4880af26 	beq	r9,r2,8828 <__subdf3+0x6ac>
    856c:	898d883a 	add	r6,r17,r6
    8570:	1945883a 	add	r2,r3,r5
    8574:	3447803a 	cmpltu	r3,r6,r17
    8578:	1887883a 	add	r3,r3,r2
    857c:	182297fa 	slli	r17,r3,31
    8580:	300cd07a 	srli	r6,r6,1
    8584:	1806d07a 	srli	r3,r3,1
    8588:	4821883a 	mov	r16,r9
    858c:	89a2b03a 	or	r17,r17,r6
    8590:	003f1b06 	br	8200 <__alt_data_end+0xf0008200>
    8594:	0101ffc4 	movi	r4,2047
    8598:	813f441e 	bne	r16,r4,82ac <__alt_data_end+0xf00082ac>
    859c:	003f1806 	br	8200 <__alt_data_end+0xf0008200>
    85a0:	843ff844 	addi	r16,r16,-31
    85a4:	01400804 	movi	r5,32
    85a8:	1408d83a 	srl	r4,r2,r16
    85ac:	19405026 	beq	r3,r5,86f0 <__subdf3+0x574>
    85b0:	01401004 	movi	r5,64
    85b4:	28c7c83a 	sub	r3,r5,r3
    85b8:	10c4983a 	sll	r2,r2,r3
    85bc:	88a2b03a 	or	r17,r17,r2
    85c0:	8822c03a 	cmpne	r17,r17,zero
    85c4:	2462b03a 	or	r17,r4,r17
    85c8:	0007883a 	mov	r3,zero
    85cc:	0021883a 	mov	r16,zero
    85d0:	003f6d06 	br	8388 <__alt_data_end+0xf0008388>
    85d4:	11fff804 	addi	r7,r2,-32
    85d8:	01000804 	movi	r4,32
    85dc:	29ced83a 	srl	r7,r5,r7
    85e0:	11004526 	beq	r2,r4,86f8 <__subdf3+0x57c>
    85e4:	01001004 	movi	r4,64
    85e8:	2089c83a 	sub	r4,r4,r2
    85ec:	2904983a 	sll	r2,r5,r4
    85f0:	118cb03a 	or	r6,r2,r6
    85f4:	300cc03a 	cmpne	r6,r6,zero
    85f8:	398cb03a 	or	r6,r7,r6
    85fc:	0005883a 	mov	r2,zero
    8600:	003f3706 	br	82e0 <__alt_data_end+0xf00082e0>
    8604:	80002a26 	beq	r16,zero,86b0 <__subdf3+0x534>
    8608:	0101ffc4 	movi	r4,2047
    860c:	49006626 	beq	r9,r4,87a8 <__subdf3+0x62c>
    8610:	0085c83a 	sub	r2,zero,r2
    8614:	18c02034 	orhi	r3,r3,128
    8618:	01000e04 	movi	r4,56
    861c:	20807e16 	blt	r4,r2,8818 <__subdf3+0x69c>
    8620:	010007c4 	movi	r4,31
    8624:	2080e716 	blt	r4,r2,89c4 <__subdf3+0x848>
    8628:	01000804 	movi	r4,32
    862c:	2089c83a 	sub	r4,r4,r2
    8630:	1914983a 	sll	r10,r3,r4
    8634:	8890d83a 	srl	r8,r17,r2
    8638:	8908983a 	sll	r4,r17,r4
    863c:	1884d83a 	srl	r2,r3,r2
    8640:	5222b03a 	or	r17,r10,r8
    8644:	2006c03a 	cmpne	r3,r4,zero
    8648:	88e2b03a 	or	r17,r17,r3
    864c:	3463c83a 	sub	r17,r6,r17
    8650:	2885c83a 	sub	r2,r5,r2
    8654:	344d803a 	cmpltu	r6,r6,r17
    8658:	1187c83a 	sub	r3,r2,r6
    865c:	4821883a 	mov	r16,r9
    8660:	3825883a 	mov	r18,r7
    8664:	003f2306 	br	82f4 <__alt_data_end+0xf00082f4>
    8668:	24d0b03a 	or	r8,r4,r19
    866c:	40001b1e 	bne	r8,zero,86dc <__subdf3+0x560>
    8670:	0005883a 	mov	r2,zero
    8674:	0009883a 	mov	r4,zero
    8678:	0021883a 	mov	r16,zero
    867c:	003f4906 	br	83a4 <__alt_data_end+0xf00083a4>
    8680:	010007c4 	movi	r4,31
    8684:	20803a16 	blt	r4,r2,8770 <__subdf3+0x5f4>
    8688:	01000804 	movi	r4,32
    868c:	2089c83a 	sub	r4,r4,r2
    8690:	2912983a 	sll	r9,r5,r4
    8694:	3090d83a 	srl	r8,r6,r2
    8698:	3108983a 	sll	r4,r6,r4
    869c:	2884d83a 	srl	r2,r5,r2
    86a0:	4a12b03a 	or	r9,r9,r8
    86a4:	2008c03a 	cmpne	r4,r4,zero
    86a8:	4912b03a 	or	r9,r9,r4
    86ac:	003f4e06 	br	83e8 <__alt_data_end+0xf00083e8>
    86b0:	1c48b03a 	or	r4,r3,r17
    86b4:	20003c26 	beq	r4,zero,87a8 <__subdf3+0x62c>
    86b8:	0084303a 	nor	r2,zero,r2
    86bc:	1000381e 	bne	r2,zero,87a0 <__subdf3+0x624>
    86c0:	3463c83a 	sub	r17,r6,r17
    86c4:	28c5c83a 	sub	r2,r5,r3
    86c8:	344d803a 	cmpltu	r6,r6,r17
    86cc:	1187c83a 	sub	r3,r2,r6
    86d0:	4821883a 	mov	r16,r9
    86d4:	3825883a 	mov	r18,r7
    86d8:	003f0606 	br	82f4 <__alt_data_end+0xf00082f4>
    86dc:	2023883a 	mov	r17,r4
    86e0:	003f0906 	br	8308 <__alt_data_end+0xf0008308>
    86e4:	0101ffc4 	movi	r4,2047
    86e8:	813f3a1e 	bne	r16,r4,83d4 <__alt_data_end+0xf00083d4>
    86ec:	003ec406 	br	8200 <__alt_data_end+0xf0008200>
    86f0:	0005883a 	mov	r2,zero
    86f4:	003fb106 	br	85bc <__alt_data_end+0xf00085bc>
    86f8:	0005883a 	mov	r2,zero
    86fc:	003fbc06 	br	85f0 <__alt_data_end+0xf00085f0>
    8700:	1c44b03a 	or	r2,r3,r17
    8704:	80008e1e 	bne	r16,zero,8940 <__subdf3+0x7c4>
    8708:	1000c826 	beq	r2,zero,8a2c <__subdf3+0x8b0>
    870c:	2984b03a 	or	r2,r5,r6
    8710:	103ebb26 	beq	r2,zero,8200 <__alt_data_end+0xf0008200>
    8714:	8989883a 	add	r4,r17,r6
    8718:	1945883a 	add	r2,r3,r5
    871c:	2447803a 	cmpltu	r3,r4,r17
    8720:	1887883a 	add	r3,r3,r2
    8724:	1880202c 	andhi	r2,r3,128
    8728:	2023883a 	mov	r17,r4
    872c:	103f1626 	beq	r2,zero,8388 <__alt_data_end+0xf0008388>
    8730:	00bfe034 	movhi	r2,65408
    8734:	10bfffc4 	addi	r2,r2,-1
    8738:	5021883a 	mov	r16,r10
    873c:	1886703a 	and	r3,r3,r2
    8740:	003eaf06 	br	8200 <__alt_data_end+0xf0008200>
    8744:	3825883a 	mov	r18,r7
    8748:	003f0f06 	br	8388 <__alt_data_end+0xf0008388>
    874c:	1c44b03a 	or	r2,r3,r17
    8750:	8000251e 	bne	r16,zero,87e8 <__subdf3+0x66c>
    8754:	1000661e 	bne	r2,zero,88f0 <__subdf3+0x774>
    8758:	2990b03a 	or	r8,r5,r6
    875c:	40009626 	beq	r8,zero,89b8 <__subdf3+0x83c>
    8760:	2807883a 	mov	r3,r5
    8764:	3023883a 	mov	r17,r6
    8768:	3825883a 	mov	r18,r7
    876c:	003ea406 	br	8200 <__alt_data_end+0xf0008200>
    8770:	127ff804 	addi	r9,r2,-32
    8774:	01000804 	movi	r4,32
    8778:	2a52d83a 	srl	r9,r5,r9
    877c:	11008c26 	beq	r2,r4,89b0 <__subdf3+0x834>
    8780:	01001004 	movi	r4,64
    8784:	2085c83a 	sub	r2,r4,r2
    8788:	2884983a 	sll	r2,r5,r2
    878c:	118cb03a 	or	r6,r2,r6
    8790:	300cc03a 	cmpne	r6,r6,zero
    8794:	4992b03a 	or	r9,r9,r6
    8798:	0005883a 	mov	r2,zero
    879c:	003f1206 	br	83e8 <__alt_data_end+0xf00083e8>
    87a0:	0101ffc4 	movi	r4,2047
    87a4:	493f9c1e 	bne	r9,r4,8618 <__alt_data_end+0xf0008618>
    87a8:	2807883a 	mov	r3,r5
    87ac:	3023883a 	mov	r17,r6
    87b0:	4821883a 	mov	r16,r9
    87b4:	3825883a 	mov	r18,r7
    87b8:	003e9106 	br	8200 <__alt_data_end+0xf0008200>
    87bc:	80001f1e 	bne	r16,zero,883c <__subdf3+0x6c0>
    87c0:	1c48b03a 	or	r4,r3,r17
    87c4:	20005a26 	beq	r4,zero,8930 <__subdf3+0x7b4>
    87c8:	0084303a 	nor	r2,zero,r2
    87cc:	1000561e 	bne	r2,zero,8928 <__subdf3+0x7ac>
    87d0:	89a3883a 	add	r17,r17,r6
    87d4:	1945883a 	add	r2,r3,r5
    87d8:	898d803a 	cmpltu	r6,r17,r6
    87dc:	3087883a 	add	r3,r6,r2
    87e0:	4821883a 	mov	r16,r9
    87e4:	003f0506 	br	83fc <__alt_data_end+0xf00083fc>
    87e8:	10002b1e 	bne	r2,zero,8898 <__subdf3+0x71c>
    87ec:	2984b03a 	or	r2,r5,r6
    87f0:	10008026 	beq	r2,zero,89f4 <__subdf3+0x878>
    87f4:	2807883a 	mov	r3,r5
    87f8:	3023883a 	mov	r17,r6
    87fc:	3825883a 	mov	r18,r7
    8800:	0401ffc4 	movi	r16,2047
    8804:	003e7e06 	br	8200 <__alt_data_end+0xf0008200>
    8808:	3809883a 	mov	r4,r7
    880c:	0011883a 	mov	r8,zero
    8810:	0005883a 	mov	r2,zero
    8814:	003ee306 	br	83a4 <__alt_data_end+0xf00083a4>
    8818:	1c62b03a 	or	r17,r3,r17
    881c:	8822c03a 	cmpne	r17,r17,zero
    8820:	0005883a 	mov	r2,zero
    8824:	003f8906 	br	864c <__alt_data_end+0xf000864c>
    8828:	3809883a 	mov	r4,r7
    882c:	4821883a 	mov	r16,r9
    8830:	0011883a 	mov	r8,zero
    8834:	0005883a 	mov	r2,zero
    8838:	003eda06 	br	83a4 <__alt_data_end+0xf00083a4>
    883c:	0101ffc4 	movi	r4,2047
    8840:	49003b26 	beq	r9,r4,8930 <__subdf3+0x7b4>
    8844:	0085c83a 	sub	r2,zero,r2
    8848:	18c02034 	orhi	r3,r3,128
    884c:	01000e04 	movi	r4,56
    8850:	20806e16 	blt	r4,r2,8a0c <__subdf3+0x890>
    8854:	010007c4 	movi	r4,31
    8858:	20807716 	blt	r4,r2,8a38 <__subdf3+0x8bc>
    885c:	01000804 	movi	r4,32
    8860:	2089c83a 	sub	r4,r4,r2
    8864:	1914983a 	sll	r10,r3,r4
    8868:	8890d83a 	srl	r8,r17,r2
    886c:	8908983a 	sll	r4,r17,r4
    8870:	1884d83a 	srl	r2,r3,r2
    8874:	5222b03a 	or	r17,r10,r8
    8878:	2006c03a 	cmpne	r3,r4,zero
    887c:	88e2b03a 	or	r17,r17,r3
    8880:	89a3883a 	add	r17,r17,r6
    8884:	1145883a 	add	r2,r2,r5
    8888:	898d803a 	cmpltu	r6,r17,r6
    888c:	3087883a 	add	r3,r6,r2
    8890:	4821883a 	mov	r16,r9
    8894:	003ed906 	br	83fc <__alt_data_end+0xf00083fc>
    8898:	2984b03a 	or	r2,r5,r6
    889c:	10004226 	beq	r2,zero,89a8 <__subdf3+0x82c>
    88a0:	1808d0fa 	srli	r4,r3,3
    88a4:	8822d0fa 	srli	r17,r17,3
    88a8:	1806977a 	slli	r3,r3,29
    88ac:	2080022c 	andhi	r2,r4,8
    88b0:	1c62b03a 	or	r17,r3,r17
    88b4:	10000826 	beq	r2,zero,88d8 <__subdf3+0x75c>
    88b8:	2812d0fa 	srli	r9,r5,3
    88bc:	4880022c 	andhi	r2,r9,8
    88c0:	1000051e 	bne	r2,zero,88d8 <__subdf3+0x75c>
    88c4:	300cd0fa 	srli	r6,r6,3
    88c8:	2804977a 	slli	r2,r5,29
    88cc:	4809883a 	mov	r4,r9
    88d0:	3825883a 	mov	r18,r7
    88d4:	11a2b03a 	or	r17,r2,r6
    88d8:	8806d77a 	srli	r3,r17,29
    88dc:	200890fa 	slli	r4,r4,3
    88e0:	882290fa 	slli	r17,r17,3
    88e4:	0401ffc4 	movi	r16,2047
    88e8:	1906b03a 	or	r3,r3,r4
    88ec:	003e4406 	br	8200 <__alt_data_end+0xf0008200>
    88f0:	2984b03a 	or	r2,r5,r6
    88f4:	103e4226 	beq	r2,zero,8200 <__alt_data_end+0xf0008200>
    88f8:	8989c83a 	sub	r4,r17,r6
    88fc:	8911803a 	cmpltu	r8,r17,r4
    8900:	1945c83a 	sub	r2,r3,r5
    8904:	1205c83a 	sub	r2,r2,r8
    8908:	1200202c 	andhi	r8,r2,128
    890c:	403e9a26 	beq	r8,zero,8378 <__alt_data_end+0xf0008378>
    8910:	3463c83a 	sub	r17,r6,r17
    8914:	28c5c83a 	sub	r2,r5,r3
    8918:	344d803a 	cmpltu	r6,r6,r17
    891c:	1187c83a 	sub	r3,r2,r6
    8920:	3825883a 	mov	r18,r7
    8924:	003e3606 	br	8200 <__alt_data_end+0xf0008200>
    8928:	0101ffc4 	movi	r4,2047
    892c:	493fc71e 	bne	r9,r4,884c <__alt_data_end+0xf000884c>
    8930:	2807883a 	mov	r3,r5
    8934:	3023883a 	mov	r17,r6
    8938:	4821883a 	mov	r16,r9
    893c:	003e3006 	br	8200 <__alt_data_end+0xf0008200>
    8940:	10003626 	beq	r2,zero,8a1c <__subdf3+0x8a0>
    8944:	2984b03a 	or	r2,r5,r6
    8948:	10001726 	beq	r2,zero,89a8 <__subdf3+0x82c>
    894c:	1808d0fa 	srli	r4,r3,3
    8950:	8822d0fa 	srli	r17,r17,3
    8954:	1806977a 	slli	r3,r3,29
    8958:	2080022c 	andhi	r2,r4,8
    895c:	1c62b03a 	or	r17,r3,r17
    8960:	10000726 	beq	r2,zero,8980 <__subdf3+0x804>
    8964:	2812d0fa 	srli	r9,r5,3
    8968:	4880022c 	andhi	r2,r9,8
    896c:	1000041e 	bne	r2,zero,8980 <__subdf3+0x804>
    8970:	300cd0fa 	srli	r6,r6,3
    8974:	2804977a 	slli	r2,r5,29
    8978:	4809883a 	mov	r4,r9
    897c:	11a2b03a 	or	r17,r2,r6
    8980:	8806d77a 	srli	r3,r17,29
    8984:	200890fa 	slli	r4,r4,3
    8988:	882290fa 	slli	r17,r17,3
    898c:	3825883a 	mov	r18,r7
    8990:	1906b03a 	or	r3,r3,r4
    8994:	0401ffc4 	movi	r16,2047
    8998:	003e1906 	br	8200 <__alt_data_end+0xf0008200>
    899c:	000b883a 	mov	r5,zero
    89a0:	0005883a 	mov	r2,zero
    89a4:	003e2e06 	br	8260 <__alt_data_end+0xf0008260>
    89a8:	0401ffc4 	movi	r16,2047
    89ac:	003e1406 	br	8200 <__alt_data_end+0xf0008200>
    89b0:	0005883a 	mov	r2,zero
    89b4:	003f7506 	br	878c <__alt_data_end+0xf000878c>
    89b8:	0005883a 	mov	r2,zero
    89bc:	0009883a 	mov	r4,zero
    89c0:	003e7806 	br	83a4 <__alt_data_end+0xf00083a4>
    89c4:	123ff804 	addi	r8,r2,-32
    89c8:	01000804 	movi	r4,32
    89cc:	1a10d83a 	srl	r8,r3,r8
    89d0:	11002526 	beq	r2,r4,8a68 <__subdf3+0x8ec>
    89d4:	01001004 	movi	r4,64
    89d8:	2085c83a 	sub	r2,r4,r2
    89dc:	1884983a 	sll	r2,r3,r2
    89e0:	1444b03a 	or	r2,r2,r17
    89e4:	1004c03a 	cmpne	r2,r2,zero
    89e8:	40a2b03a 	or	r17,r8,r2
    89ec:	0005883a 	mov	r2,zero
    89f0:	003f1606 	br	864c <__alt_data_end+0xf000864c>
    89f4:	02000434 	movhi	r8,16
    89f8:	0009883a 	mov	r4,zero
    89fc:	423fffc4 	addi	r8,r8,-1
    8a00:	00bfffc4 	movi	r2,-1
    8a04:	0401ffc4 	movi	r16,2047
    8a08:	003e6606 	br	83a4 <__alt_data_end+0xf00083a4>
    8a0c:	1c62b03a 	or	r17,r3,r17
    8a10:	8822c03a 	cmpne	r17,r17,zero
    8a14:	0005883a 	mov	r2,zero
    8a18:	003f9906 	br	8880 <__alt_data_end+0xf0008880>
    8a1c:	2807883a 	mov	r3,r5
    8a20:	3023883a 	mov	r17,r6
    8a24:	0401ffc4 	movi	r16,2047
    8a28:	003df506 	br	8200 <__alt_data_end+0xf0008200>
    8a2c:	2807883a 	mov	r3,r5
    8a30:	3023883a 	mov	r17,r6
    8a34:	003df206 	br	8200 <__alt_data_end+0xf0008200>
    8a38:	123ff804 	addi	r8,r2,-32
    8a3c:	01000804 	movi	r4,32
    8a40:	1a10d83a 	srl	r8,r3,r8
    8a44:	11000a26 	beq	r2,r4,8a70 <__subdf3+0x8f4>
    8a48:	01001004 	movi	r4,64
    8a4c:	2085c83a 	sub	r2,r4,r2
    8a50:	1884983a 	sll	r2,r3,r2
    8a54:	1444b03a 	or	r2,r2,r17
    8a58:	1004c03a 	cmpne	r2,r2,zero
    8a5c:	40a2b03a 	or	r17,r8,r2
    8a60:	0005883a 	mov	r2,zero
    8a64:	003f8606 	br	8880 <__alt_data_end+0xf0008880>
    8a68:	0005883a 	mov	r2,zero
    8a6c:	003fdc06 	br	89e0 <__alt_data_end+0xf00089e0>
    8a70:	0005883a 	mov	r2,zero
    8a74:	003ff706 	br	8a54 <__alt_data_end+0xf0008a54>

00008a78 <__fixdfsi>:
    8a78:	280cd53a 	srli	r6,r5,20
    8a7c:	00c00434 	movhi	r3,16
    8a80:	18ffffc4 	addi	r3,r3,-1
    8a84:	3181ffcc 	andi	r6,r6,2047
    8a88:	01c0ff84 	movi	r7,1022
    8a8c:	28c6703a 	and	r3,r5,r3
    8a90:	280ad7fa 	srli	r5,r5,31
    8a94:	3980120e 	bge	r7,r6,8ae0 <__fixdfsi+0x68>
    8a98:	00810744 	movi	r2,1053
    8a9c:	11800c16 	blt	r2,r6,8ad0 <__fixdfsi+0x58>
    8aa0:	00810cc4 	movi	r2,1075
    8aa4:	1185c83a 	sub	r2,r2,r6
    8aa8:	01c007c4 	movi	r7,31
    8aac:	18c00434 	orhi	r3,r3,16
    8ab0:	38800d16 	blt	r7,r2,8ae8 <__fixdfsi+0x70>
    8ab4:	31befb44 	addi	r6,r6,-1043
    8ab8:	2084d83a 	srl	r2,r4,r2
    8abc:	1986983a 	sll	r3,r3,r6
    8ac0:	1884b03a 	or	r2,r3,r2
    8ac4:	28000726 	beq	r5,zero,8ae4 <__fixdfsi+0x6c>
    8ac8:	0085c83a 	sub	r2,zero,r2
    8acc:	f800283a 	ret
    8ad0:	00a00034 	movhi	r2,32768
    8ad4:	10bfffc4 	addi	r2,r2,-1
    8ad8:	2885883a 	add	r2,r5,r2
    8adc:	f800283a 	ret
    8ae0:	0005883a 	mov	r2,zero
    8ae4:	f800283a 	ret
    8ae8:	008104c4 	movi	r2,1043
    8aec:	1185c83a 	sub	r2,r2,r6
    8af0:	1884d83a 	srl	r2,r3,r2
    8af4:	003ff306 	br	8ac4 <__alt_data_end+0xf0008ac4>

00008af8 <__floatsidf>:
    8af8:	defffd04 	addi	sp,sp,-12
    8afc:	dfc00215 	stw	ra,8(sp)
    8b00:	dc400115 	stw	r17,4(sp)
    8b04:	dc000015 	stw	r16,0(sp)
    8b08:	20002b26 	beq	r4,zero,8bb8 <__floatsidf+0xc0>
    8b0c:	2023883a 	mov	r17,r4
    8b10:	2020d7fa 	srli	r16,r4,31
    8b14:	20002d16 	blt	r4,zero,8bcc <__floatsidf+0xd4>
    8b18:	8809883a 	mov	r4,r17
    8b1c:	0008e8c0 	call	8e8c <__clzsi2>
    8b20:	01410784 	movi	r5,1054
    8b24:	288bc83a 	sub	r5,r5,r2
    8b28:	01010cc4 	movi	r4,1075
    8b2c:	2149c83a 	sub	r4,r4,r5
    8b30:	00c007c4 	movi	r3,31
    8b34:	1900160e 	bge	r3,r4,8b90 <__floatsidf+0x98>
    8b38:	00c104c4 	movi	r3,1043
    8b3c:	1947c83a 	sub	r3,r3,r5
    8b40:	88c6983a 	sll	r3,r17,r3
    8b44:	00800434 	movhi	r2,16
    8b48:	10bfffc4 	addi	r2,r2,-1
    8b4c:	1886703a 	and	r3,r3,r2
    8b50:	2941ffcc 	andi	r5,r5,2047
    8b54:	800d883a 	mov	r6,r16
    8b58:	0005883a 	mov	r2,zero
    8b5c:	280a953a 	slli	r5,r5,20
    8b60:	31803fcc 	andi	r6,r6,255
    8b64:	01000434 	movhi	r4,16
    8b68:	300c97fa 	slli	r6,r6,31
    8b6c:	213fffc4 	addi	r4,r4,-1
    8b70:	1906703a 	and	r3,r3,r4
    8b74:	1946b03a 	or	r3,r3,r5
    8b78:	1986b03a 	or	r3,r3,r6
    8b7c:	dfc00217 	ldw	ra,8(sp)
    8b80:	dc400117 	ldw	r17,4(sp)
    8b84:	dc000017 	ldw	r16,0(sp)
    8b88:	dec00304 	addi	sp,sp,12
    8b8c:	f800283a 	ret
    8b90:	00c002c4 	movi	r3,11
    8b94:	1887c83a 	sub	r3,r3,r2
    8b98:	88c6d83a 	srl	r3,r17,r3
    8b9c:	8904983a 	sll	r2,r17,r4
    8ba0:	01000434 	movhi	r4,16
    8ba4:	213fffc4 	addi	r4,r4,-1
    8ba8:	2941ffcc 	andi	r5,r5,2047
    8bac:	1906703a 	and	r3,r3,r4
    8bb0:	800d883a 	mov	r6,r16
    8bb4:	003fe906 	br	8b5c <__alt_data_end+0xf0008b5c>
    8bb8:	000d883a 	mov	r6,zero
    8bbc:	000b883a 	mov	r5,zero
    8bc0:	0007883a 	mov	r3,zero
    8bc4:	0005883a 	mov	r2,zero
    8bc8:	003fe406 	br	8b5c <__alt_data_end+0xf0008b5c>
    8bcc:	0123c83a 	sub	r17,zero,r4
    8bd0:	003fd106 	br	8b18 <__alt_data_end+0xf0008b18>

00008bd4 <__extendsfdf2>:
    8bd4:	200ad5fa 	srli	r5,r4,23
    8bd8:	defffd04 	addi	sp,sp,-12
    8bdc:	dc400115 	stw	r17,4(sp)
    8be0:	29403fcc 	andi	r5,r5,255
    8be4:	29800044 	addi	r6,r5,1
    8be8:	04402034 	movhi	r17,128
    8bec:	dc000015 	stw	r16,0(sp)
    8bf0:	8c7fffc4 	addi	r17,r17,-1
    8bf4:	dfc00215 	stw	ra,8(sp)
    8bf8:	31803fcc 	andi	r6,r6,255
    8bfc:	00800044 	movi	r2,1
    8c00:	8922703a 	and	r17,r17,r4
    8c04:	2020d7fa 	srli	r16,r4,31
    8c08:	1180110e 	bge	r2,r6,8c50 <__extendsfdf2+0x7c>
    8c0c:	880cd0fa 	srli	r6,r17,3
    8c10:	8822977a 	slli	r17,r17,29
    8c14:	2940e004 	addi	r5,r5,896
    8c18:	2941ffcc 	andi	r5,r5,2047
    8c1c:	2804953a 	slli	r2,r5,20
    8c20:	01400434 	movhi	r5,16
    8c24:	800697fa 	slli	r3,r16,31
    8c28:	297fffc4 	addi	r5,r5,-1
    8c2c:	314a703a 	and	r5,r6,r5
    8c30:	288ab03a 	or	r5,r5,r2
    8c34:	28c6b03a 	or	r3,r5,r3
    8c38:	8805883a 	mov	r2,r17
    8c3c:	dfc00217 	ldw	ra,8(sp)
    8c40:	dc400117 	ldw	r17,4(sp)
    8c44:	dc000017 	ldw	r16,0(sp)
    8c48:	dec00304 	addi	sp,sp,12
    8c4c:	f800283a 	ret
    8c50:	2800111e 	bne	r5,zero,8c98 <__extendsfdf2+0xc4>
    8c54:	88001c26 	beq	r17,zero,8cc8 <__extendsfdf2+0xf4>
    8c58:	8809883a 	mov	r4,r17
    8c5c:	0008e8c0 	call	8e8c <__clzsi2>
    8c60:	00c00284 	movi	r3,10
    8c64:	18801b16 	blt	r3,r2,8cd4 <__extendsfdf2+0x100>
    8c68:	018002c4 	movi	r6,11
    8c6c:	308dc83a 	sub	r6,r6,r2
    8c70:	11000544 	addi	r4,r2,21
    8c74:	8986d83a 	srl	r3,r17,r6
    8c78:	8922983a 	sll	r17,r17,r4
    8c7c:	0180e244 	movi	r6,905
    8c80:	01400434 	movhi	r5,16
    8c84:	3085c83a 	sub	r2,r6,r2
    8c88:	297fffc4 	addi	r5,r5,-1
    8c8c:	194c703a 	and	r6,r3,r5
    8c90:	1141ffcc 	andi	r5,r2,2047
    8c94:	003fe006 	br	8c18 <__alt_data_end+0xf0008c18>
    8c98:	88000826 	beq	r17,zero,8cbc <__extendsfdf2+0xe8>
    8c9c:	880cd0fa 	srli	r6,r17,3
    8ca0:	00800434 	movhi	r2,16
    8ca4:	10bfffc4 	addi	r2,r2,-1
    8ca8:	31800234 	orhi	r6,r6,8
    8cac:	8822977a 	slli	r17,r17,29
    8cb0:	308c703a 	and	r6,r6,r2
    8cb4:	0141ffc4 	movi	r5,2047
    8cb8:	003fd706 	br	8c18 <__alt_data_end+0xf0008c18>
    8cbc:	0141ffc4 	movi	r5,2047
    8cc0:	000d883a 	mov	r6,zero
    8cc4:	003fd406 	br	8c18 <__alt_data_end+0xf0008c18>
    8cc8:	000b883a 	mov	r5,zero
    8ccc:	000d883a 	mov	r6,zero
    8cd0:	003fd106 	br	8c18 <__alt_data_end+0xf0008c18>
    8cd4:	11bffd44 	addi	r6,r2,-11
    8cd8:	8986983a 	sll	r3,r17,r6
    8cdc:	0023883a 	mov	r17,zero
    8ce0:	003fe606 	br	8c7c <__alt_data_end+0xf0008c7c>

00008ce4 <__truncdfsf2>:
    8ce4:	2810d53a 	srli	r8,r5,20
    8ce8:	01c00434 	movhi	r7,16
    8cec:	39ffffc4 	addi	r7,r7,-1
    8cf0:	29ce703a 	and	r7,r5,r7
    8cf4:	4201ffcc 	andi	r8,r8,2047
    8cf8:	380e90fa 	slli	r7,r7,3
    8cfc:	200cd77a 	srli	r6,r4,29
    8d00:	42400044 	addi	r9,r8,1
    8d04:	4a41ffcc 	andi	r9,r9,2047
    8d08:	00c00044 	movi	r3,1
    8d0c:	280ad7fa 	srli	r5,r5,31
    8d10:	31ceb03a 	or	r7,r6,r7
    8d14:	200490fa 	slli	r2,r4,3
    8d18:	1a40230e 	bge	r3,r9,8da8 <__truncdfsf2+0xc4>
    8d1c:	40ff2004 	addi	r3,r8,-896
    8d20:	01803f84 	movi	r6,254
    8d24:	30c01516 	blt	r6,r3,8d7c <__truncdfsf2+0x98>
    8d28:	00c0380e 	bge	zero,r3,8e0c <__truncdfsf2+0x128>
    8d2c:	200c91ba 	slli	r6,r4,6
    8d30:	380e90fa 	slli	r7,r7,3
    8d34:	1004d77a 	srli	r2,r2,29
    8d38:	300cc03a 	cmpne	r6,r6,zero
    8d3c:	31ccb03a 	or	r6,r6,r7
    8d40:	308cb03a 	or	r6,r6,r2
    8d44:	308001cc 	andi	r2,r6,7
    8d48:	10000426 	beq	r2,zero,8d5c <__truncdfsf2+0x78>
    8d4c:	308003cc 	andi	r2,r6,15
    8d50:	01000104 	movi	r4,4
    8d54:	11000126 	beq	r2,r4,8d5c <__truncdfsf2+0x78>
    8d58:	31800104 	addi	r6,r6,4
    8d5c:	3081002c 	andhi	r2,r6,1024
    8d60:	10001626 	beq	r2,zero,8dbc <__truncdfsf2+0xd8>
    8d64:	18c00044 	addi	r3,r3,1
    8d68:	00803fc4 	movi	r2,255
    8d6c:	18800326 	beq	r3,r2,8d7c <__truncdfsf2+0x98>
    8d70:	300c91ba 	slli	r6,r6,6
    8d74:	300cd27a 	srli	r6,r6,9
    8d78:	00000206 	br	8d84 <__truncdfsf2+0xa0>
    8d7c:	00ffffc4 	movi	r3,-1
    8d80:	000d883a 	mov	r6,zero
    8d84:	18c03fcc 	andi	r3,r3,255
    8d88:	180895fa 	slli	r4,r3,23
    8d8c:	00c02034 	movhi	r3,128
    8d90:	280a97fa 	slli	r5,r5,31
    8d94:	18ffffc4 	addi	r3,r3,-1
    8d98:	30c6703a 	and	r3,r6,r3
    8d9c:	1906b03a 	or	r3,r3,r4
    8da0:	1944b03a 	or	r2,r3,r5
    8da4:	f800283a 	ret
    8da8:	40000b1e 	bne	r8,zero,8dd8 <__truncdfsf2+0xf4>
    8dac:	388cb03a 	or	r6,r7,r2
    8db0:	0007883a 	mov	r3,zero
    8db4:	30000426 	beq	r6,zero,8dc8 <__truncdfsf2+0xe4>
    8db8:	01800144 	movi	r6,5
    8dbc:	00803fc4 	movi	r2,255
    8dc0:	300cd0fa 	srli	r6,r6,3
    8dc4:	18800a26 	beq	r3,r2,8df0 <__truncdfsf2+0x10c>
    8dc8:	00802034 	movhi	r2,128
    8dcc:	10bfffc4 	addi	r2,r2,-1
    8dd0:	308c703a 	and	r6,r6,r2
    8dd4:	003feb06 	br	8d84 <__alt_data_end+0xf0008d84>
    8dd8:	3888b03a 	or	r4,r7,r2
    8ddc:	203fe726 	beq	r4,zero,8d7c <__alt_data_end+0xf0008d7c>
    8de0:	380c90fa 	slli	r6,r7,3
    8de4:	00c03fc4 	movi	r3,255
    8de8:	31808034 	orhi	r6,r6,512
    8dec:	003fd506 	br	8d44 <__alt_data_end+0xf0008d44>
    8df0:	303fe226 	beq	r6,zero,8d7c <__alt_data_end+0xf0008d7c>
    8df4:	00802034 	movhi	r2,128
    8df8:	31801034 	orhi	r6,r6,64
    8dfc:	10bfffc4 	addi	r2,r2,-1
    8e00:	00ffffc4 	movi	r3,-1
    8e04:	308c703a 	and	r6,r6,r2
    8e08:	003fde06 	br	8d84 <__alt_data_end+0xf0008d84>
    8e0c:	013ffa44 	movi	r4,-23
    8e10:	19000e16 	blt	r3,r4,8e4c <__truncdfsf2+0x168>
    8e14:	01000784 	movi	r4,30
    8e18:	20c9c83a 	sub	r4,r4,r3
    8e1c:	018007c4 	movi	r6,31
    8e20:	39c02034 	orhi	r7,r7,128
    8e24:	31000b16 	blt	r6,r4,8e54 <__truncdfsf2+0x170>
    8e28:	423f2084 	addi	r8,r8,-894
    8e2c:	120c983a 	sll	r6,r2,r8
    8e30:	3a0e983a 	sll	r7,r7,r8
    8e34:	1104d83a 	srl	r2,r2,r4
    8e38:	300cc03a 	cmpne	r6,r6,zero
    8e3c:	31ceb03a 	or	r7,r6,r7
    8e40:	388cb03a 	or	r6,r7,r2
    8e44:	0007883a 	mov	r3,zero
    8e48:	003fbe06 	br	8d44 <__alt_data_end+0xf0008d44>
    8e4c:	0007883a 	mov	r3,zero
    8e50:	003fd906 	br	8db8 <__alt_data_end+0xf0008db8>
    8e54:	01bfff84 	movi	r6,-2
    8e58:	30cdc83a 	sub	r6,r6,r3
    8e5c:	00c00804 	movi	r3,32
    8e60:	398cd83a 	srl	r6,r7,r6
    8e64:	20c00726 	beq	r4,r3,8e84 <__truncdfsf2+0x1a0>
    8e68:	423f2884 	addi	r8,r8,-862
    8e6c:	3a0e983a 	sll	r7,r7,r8
    8e70:	3884b03a 	or	r2,r7,r2
    8e74:	1004c03a 	cmpne	r2,r2,zero
    8e78:	118cb03a 	or	r6,r2,r6
    8e7c:	0007883a 	mov	r3,zero
    8e80:	003fb006 	br	8d44 <__alt_data_end+0xf0008d44>
    8e84:	000f883a 	mov	r7,zero
    8e88:	003ff906 	br	8e70 <__alt_data_end+0xf0008e70>

00008e8c <__clzsi2>:
    8e8c:	00bfffd4 	movui	r2,65535
    8e90:	11000536 	bltu	r2,r4,8ea8 <__clzsi2+0x1c>
    8e94:	00803fc4 	movi	r2,255
    8e98:	11000f36 	bltu	r2,r4,8ed8 <__clzsi2+0x4c>
    8e9c:	00800804 	movi	r2,32
    8ea0:	0007883a 	mov	r3,zero
    8ea4:	00000506 	br	8ebc <__clzsi2+0x30>
    8ea8:	00804034 	movhi	r2,256
    8eac:	10bfffc4 	addi	r2,r2,-1
    8eb0:	11000c2e 	bgeu	r2,r4,8ee4 <__clzsi2+0x58>
    8eb4:	00800204 	movi	r2,8
    8eb8:	00c00604 	movi	r3,24
    8ebc:	20c8d83a 	srl	r4,r4,r3
    8ec0:	00c20034 	movhi	r3,2048
    8ec4:	18c08dc4 	addi	r3,r3,567
    8ec8:	1909883a 	add	r4,r3,r4
    8ecc:	20c00003 	ldbu	r3,0(r4)
    8ed0:	10c5c83a 	sub	r2,r2,r3
    8ed4:	f800283a 	ret
    8ed8:	00800604 	movi	r2,24
    8edc:	00c00204 	movi	r3,8
    8ee0:	003ff606 	br	8ebc <__alt_data_end+0xf0008ebc>
    8ee4:	00800404 	movi	r2,16
    8ee8:	1007883a 	mov	r3,r2
    8eec:	003ff306 	br	8ebc <__alt_data_end+0xf0008ebc>

00008ef0 <__divsi3>:
    8ef0:	20001b16 	blt	r4,zero,8f60 <__divsi3+0x70>
    8ef4:	000f883a 	mov	r7,zero
    8ef8:	28001616 	blt	r5,zero,8f54 <__divsi3+0x64>
    8efc:	200d883a 	mov	r6,r4
    8f00:	29001a2e 	bgeu	r5,r4,8f6c <__divsi3+0x7c>
    8f04:	00800804 	movi	r2,32
    8f08:	00c00044 	movi	r3,1
    8f0c:	00000106 	br	8f14 <__divsi3+0x24>
    8f10:	10000d26 	beq	r2,zero,8f48 <__divsi3+0x58>
    8f14:	294b883a 	add	r5,r5,r5
    8f18:	10bfffc4 	addi	r2,r2,-1
    8f1c:	18c7883a 	add	r3,r3,r3
    8f20:	293ffb36 	bltu	r5,r4,8f10 <__alt_data_end+0xf0008f10>
    8f24:	0005883a 	mov	r2,zero
    8f28:	18000726 	beq	r3,zero,8f48 <__divsi3+0x58>
    8f2c:	0005883a 	mov	r2,zero
    8f30:	31400236 	bltu	r6,r5,8f3c <__divsi3+0x4c>
    8f34:	314dc83a 	sub	r6,r6,r5
    8f38:	10c4b03a 	or	r2,r2,r3
    8f3c:	1806d07a 	srli	r3,r3,1
    8f40:	280ad07a 	srli	r5,r5,1
    8f44:	183ffa1e 	bne	r3,zero,8f30 <__alt_data_end+0xf0008f30>
    8f48:	38000126 	beq	r7,zero,8f50 <__divsi3+0x60>
    8f4c:	0085c83a 	sub	r2,zero,r2
    8f50:	f800283a 	ret
    8f54:	014bc83a 	sub	r5,zero,r5
    8f58:	39c0005c 	xori	r7,r7,1
    8f5c:	003fe706 	br	8efc <__alt_data_end+0xf0008efc>
    8f60:	0109c83a 	sub	r4,zero,r4
    8f64:	01c00044 	movi	r7,1
    8f68:	003fe306 	br	8ef8 <__alt_data_end+0xf0008ef8>
    8f6c:	00c00044 	movi	r3,1
    8f70:	003fee06 	br	8f2c <__alt_data_end+0xf0008f2c>

00008f74 <__modsi3>:
    8f74:	20001716 	blt	r4,zero,8fd4 <__modsi3+0x60>
    8f78:	000f883a 	mov	r7,zero
    8f7c:	2005883a 	mov	r2,r4
    8f80:	28001216 	blt	r5,zero,8fcc <__modsi3+0x58>
    8f84:	2900162e 	bgeu	r5,r4,8fe0 <__modsi3+0x6c>
    8f88:	01800804 	movi	r6,32
    8f8c:	00c00044 	movi	r3,1
    8f90:	00000106 	br	8f98 <__modsi3+0x24>
    8f94:	30000a26 	beq	r6,zero,8fc0 <__modsi3+0x4c>
    8f98:	294b883a 	add	r5,r5,r5
    8f9c:	31bfffc4 	addi	r6,r6,-1
    8fa0:	18c7883a 	add	r3,r3,r3
    8fa4:	293ffb36 	bltu	r5,r4,8f94 <__alt_data_end+0xf0008f94>
    8fa8:	18000526 	beq	r3,zero,8fc0 <__modsi3+0x4c>
    8fac:	1806d07a 	srli	r3,r3,1
    8fb0:	11400136 	bltu	r2,r5,8fb8 <__modsi3+0x44>
    8fb4:	1145c83a 	sub	r2,r2,r5
    8fb8:	280ad07a 	srli	r5,r5,1
    8fbc:	183ffb1e 	bne	r3,zero,8fac <__alt_data_end+0xf0008fac>
    8fc0:	38000126 	beq	r7,zero,8fc8 <__modsi3+0x54>
    8fc4:	0085c83a 	sub	r2,zero,r2
    8fc8:	f800283a 	ret
    8fcc:	014bc83a 	sub	r5,zero,r5
    8fd0:	003fec06 	br	8f84 <__alt_data_end+0xf0008f84>
    8fd4:	0109c83a 	sub	r4,zero,r4
    8fd8:	01c00044 	movi	r7,1
    8fdc:	003fe706 	br	8f7c <__alt_data_end+0xf0008f7c>
    8fe0:	00c00044 	movi	r3,1
    8fe4:	003ff106 	br	8fac <__alt_data_end+0xf0008fac>

00008fe8 <__udivsi3>:
    8fe8:	200d883a 	mov	r6,r4
    8fec:	2900152e 	bgeu	r5,r4,9044 <__udivsi3+0x5c>
    8ff0:	28001416 	blt	r5,zero,9044 <__udivsi3+0x5c>
    8ff4:	00800804 	movi	r2,32
    8ff8:	00c00044 	movi	r3,1
    8ffc:	00000206 	br	9008 <__udivsi3+0x20>
    9000:	10000e26 	beq	r2,zero,903c <__udivsi3+0x54>
    9004:	28000516 	blt	r5,zero,901c <__udivsi3+0x34>
    9008:	294b883a 	add	r5,r5,r5
    900c:	10bfffc4 	addi	r2,r2,-1
    9010:	18c7883a 	add	r3,r3,r3
    9014:	293ffa36 	bltu	r5,r4,9000 <__alt_data_end+0xf0009000>
    9018:	18000826 	beq	r3,zero,903c <__udivsi3+0x54>
    901c:	0005883a 	mov	r2,zero
    9020:	31400236 	bltu	r6,r5,902c <__udivsi3+0x44>
    9024:	314dc83a 	sub	r6,r6,r5
    9028:	10c4b03a 	or	r2,r2,r3
    902c:	1806d07a 	srli	r3,r3,1
    9030:	280ad07a 	srli	r5,r5,1
    9034:	183ffa1e 	bne	r3,zero,9020 <__alt_data_end+0xf0009020>
    9038:	f800283a 	ret
    903c:	0005883a 	mov	r2,zero
    9040:	f800283a 	ret
    9044:	00c00044 	movi	r3,1
    9048:	003ff406 	br	901c <__alt_data_end+0xf000901c>

0000904c <__umodsi3>:
    904c:	2005883a 	mov	r2,r4
    9050:	2900122e 	bgeu	r5,r4,909c <__umodsi3+0x50>
    9054:	28001116 	blt	r5,zero,909c <__umodsi3+0x50>
    9058:	01800804 	movi	r6,32
    905c:	00c00044 	movi	r3,1
    9060:	00000206 	br	906c <__umodsi3+0x20>
    9064:	30000c26 	beq	r6,zero,9098 <__umodsi3+0x4c>
    9068:	28000516 	blt	r5,zero,9080 <__umodsi3+0x34>
    906c:	294b883a 	add	r5,r5,r5
    9070:	31bfffc4 	addi	r6,r6,-1
    9074:	18c7883a 	add	r3,r3,r3
    9078:	293ffa36 	bltu	r5,r4,9064 <__alt_data_end+0xf0009064>
    907c:	18000626 	beq	r3,zero,9098 <__umodsi3+0x4c>
    9080:	1806d07a 	srli	r3,r3,1
    9084:	11400136 	bltu	r2,r5,908c <__umodsi3+0x40>
    9088:	1145c83a 	sub	r2,r2,r5
    908c:	280ad07a 	srli	r5,r5,1
    9090:	183ffb1e 	bne	r3,zero,9080 <__alt_data_end+0xf0009080>
    9094:	f800283a 	ret
    9098:	f800283a 	ret
    909c:	00c00044 	movi	r3,1
    90a0:	003ff706 	br	9080 <__alt_data_end+0xf0009080>

000090a4 <memcmp>:
    90a4:	01c000c4 	movi	r7,3
    90a8:	3980192e 	bgeu	r7,r6,9110 <memcmp+0x6c>
    90ac:	2144b03a 	or	r2,r4,r5
    90b0:	11c4703a 	and	r2,r2,r7
    90b4:	10000f26 	beq	r2,zero,90f4 <memcmp+0x50>
    90b8:	20800003 	ldbu	r2,0(r4)
    90bc:	28c00003 	ldbu	r3,0(r5)
    90c0:	10c0151e 	bne	r2,r3,9118 <memcmp+0x74>
    90c4:	31bfff84 	addi	r6,r6,-2
    90c8:	01ffffc4 	movi	r7,-1
    90cc:	00000406 	br	90e0 <memcmp+0x3c>
    90d0:	20800003 	ldbu	r2,0(r4)
    90d4:	28c00003 	ldbu	r3,0(r5)
    90d8:	31bfffc4 	addi	r6,r6,-1
    90dc:	10c00e1e 	bne	r2,r3,9118 <memcmp+0x74>
    90e0:	21000044 	addi	r4,r4,1
    90e4:	29400044 	addi	r5,r5,1
    90e8:	31fff91e 	bne	r6,r7,90d0 <__alt_data_end+0xf00090d0>
    90ec:	0005883a 	mov	r2,zero
    90f0:	f800283a 	ret
    90f4:	20c00017 	ldw	r3,0(r4)
    90f8:	28800017 	ldw	r2,0(r5)
    90fc:	18bfee1e 	bne	r3,r2,90b8 <__alt_data_end+0xf00090b8>
    9100:	31bfff04 	addi	r6,r6,-4
    9104:	21000104 	addi	r4,r4,4
    9108:	29400104 	addi	r5,r5,4
    910c:	39bff936 	bltu	r7,r6,90f4 <__alt_data_end+0xf00090f4>
    9110:	303fe91e 	bne	r6,zero,90b8 <__alt_data_end+0xf00090b8>
    9114:	003ff506 	br	90ec <__alt_data_end+0xf00090ec>
    9118:	10c5c83a 	sub	r2,r2,r3
    911c:	f800283a 	ret

00009120 <memcpy>:
    9120:	defffd04 	addi	sp,sp,-12
    9124:	dfc00215 	stw	ra,8(sp)
    9128:	dc400115 	stw	r17,4(sp)
    912c:	dc000015 	stw	r16,0(sp)
    9130:	00c003c4 	movi	r3,15
    9134:	2005883a 	mov	r2,r4
    9138:	1980452e 	bgeu	r3,r6,9250 <memcpy+0x130>
    913c:	2906b03a 	or	r3,r5,r4
    9140:	18c000cc 	andi	r3,r3,3
    9144:	1800441e 	bne	r3,zero,9258 <memcpy+0x138>
    9148:	347ffc04 	addi	r17,r6,-16
    914c:	8822d13a 	srli	r17,r17,4
    9150:	28c00104 	addi	r3,r5,4
    9154:	23400104 	addi	r13,r4,4
    9158:	8820913a 	slli	r16,r17,4
    915c:	2b000204 	addi	r12,r5,8
    9160:	22c00204 	addi	r11,r4,8
    9164:	84000504 	addi	r16,r16,20
    9168:	2a800304 	addi	r10,r5,12
    916c:	22400304 	addi	r9,r4,12
    9170:	2c21883a 	add	r16,r5,r16
    9174:	2811883a 	mov	r8,r5
    9178:	200f883a 	mov	r7,r4
    917c:	41000017 	ldw	r4,0(r8)
    9180:	1fc00017 	ldw	ra,0(r3)
    9184:	63c00017 	ldw	r15,0(r12)
    9188:	39000015 	stw	r4,0(r7)
    918c:	53800017 	ldw	r14,0(r10)
    9190:	6fc00015 	stw	ra,0(r13)
    9194:	5bc00015 	stw	r15,0(r11)
    9198:	4b800015 	stw	r14,0(r9)
    919c:	18c00404 	addi	r3,r3,16
    91a0:	39c00404 	addi	r7,r7,16
    91a4:	42000404 	addi	r8,r8,16
    91a8:	6b400404 	addi	r13,r13,16
    91ac:	63000404 	addi	r12,r12,16
    91b0:	5ac00404 	addi	r11,r11,16
    91b4:	52800404 	addi	r10,r10,16
    91b8:	4a400404 	addi	r9,r9,16
    91bc:	1c3fef1e 	bne	r3,r16,917c <__alt_data_end+0xf000917c>
    91c0:	89c00044 	addi	r7,r17,1
    91c4:	380e913a 	slli	r7,r7,4
    91c8:	310003cc 	andi	r4,r6,15
    91cc:	02c000c4 	movi	r11,3
    91d0:	11c7883a 	add	r3,r2,r7
    91d4:	29cb883a 	add	r5,r5,r7
    91d8:	5900212e 	bgeu	r11,r4,9260 <memcpy+0x140>
    91dc:	1813883a 	mov	r9,r3
    91e0:	2811883a 	mov	r8,r5
    91e4:	200f883a 	mov	r7,r4
    91e8:	42800017 	ldw	r10,0(r8)
    91ec:	4a400104 	addi	r9,r9,4
    91f0:	39ffff04 	addi	r7,r7,-4
    91f4:	4abfff15 	stw	r10,-4(r9)
    91f8:	42000104 	addi	r8,r8,4
    91fc:	59fffa36 	bltu	r11,r7,91e8 <__alt_data_end+0xf00091e8>
    9200:	213fff04 	addi	r4,r4,-4
    9204:	2008d0ba 	srli	r4,r4,2
    9208:	318000cc 	andi	r6,r6,3
    920c:	21000044 	addi	r4,r4,1
    9210:	2109883a 	add	r4,r4,r4
    9214:	2109883a 	add	r4,r4,r4
    9218:	1907883a 	add	r3,r3,r4
    921c:	290b883a 	add	r5,r5,r4
    9220:	30000626 	beq	r6,zero,923c <memcpy+0x11c>
    9224:	198d883a 	add	r6,r3,r6
    9228:	29c00003 	ldbu	r7,0(r5)
    922c:	18c00044 	addi	r3,r3,1
    9230:	29400044 	addi	r5,r5,1
    9234:	19ffffc5 	stb	r7,-1(r3)
    9238:	19bffb1e 	bne	r3,r6,9228 <__alt_data_end+0xf0009228>
    923c:	dfc00217 	ldw	ra,8(sp)
    9240:	dc400117 	ldw	r17,4(sp)
    9244:	dc000017 	ldw	r16,0(sp)
    9248:	dec00304 	addi	sp,sp,12
    924c:	f800283a 	ret
    9250:	2007883a 	mov	r3,r4
    9254:	003ff206 	br	9220 <__alt_data_end+0xf0009220>
    9258:	2007883a 	mov	r3,r4
    925c:	003ff106 	br	9224 <__alt_data_end+0xf0009224>
    9260:	200d883a 	mov	r6,r4
    9264:	003fee06 	br	9220 <__alt_data_end+0xf0009220>

00009268 <memset>:
    9268:	20c000cc 	andi	r3,r4,3
    926c:	2005883a 	mov	r2,r4
    9270:	18004426 	beq	r3,zero,9384 <memset+0x11c>
    9274:	31ffffc4 	addi	r7,r6,-1
    9278:	30004026 	beq	r6,zero,937c <memset+0x114>
    927c:	2813883a 	mov	r9,r5
    9280:	200d883a 	mov	r6,r4
    9284:	2007883a 	mov	r3,r4
    9288:	00000406 	br	929c <memset+0x34>
    928c:	3a3fffc4 	addi	r8,r7,-1
    9290:	31800044 	addi	r6,r6,1
    9294:	38003926 	beq	r7,zero,937c <memset+0x114>
    9298:	400f883a 	mov	r7,r8
    929c:	18c00044 	addi	r3,r3,1
    92a0:	32400005 	stb	r9,0(r6)
    92a4:	1a0000cc 	andi	r8,r3,3
    92a8:	403ff81e 	bne	r8,zero,928c <__alt_data_end+0xf000928c>
    92ac:	010000c4 	movi	r4,3
    92b0:	21c02d2e 	bgeu	r4,r7,9368 <memset+0x100>
    92b4:	29003fcc 	andi	r4,r5,255
    92b8:	200c923a 	slli	r6,r4,8
    92bc:	3108b03a 	or	r4,r6,r4
    92c0:	200c943a 	slli	r6,r4,16
    92c4:	218cb03a 	or	r6,r4,r6
    92c8:	010003c4 	movi	r4,15
    92cc:	21c0182e 	bgeu	r4,r7,9330 <memset+0xc8>
    92d0:	3b3ffc04 	addi	r12,r7,-16
    92d4:	6018d13a 	srli	r12,r12,4
    92d8:	1a000104 	addi	r8,r3,4
    92dc:	1ac00204 	addi	r11,r3,8
    92e0:	6008913a 	slli	r4,r12,4
    92e4:	1a800304 	addi	r10,r3,12
    92e8:	1813883a 	mov	r9,r3
    92ec:	21000504 	addi	r4,r4,20
    92f0:	1909883a 	add	r4,r3,r4
    92f4:	49800015 	stw	r6,0(r9)
    92f8:	41800015 	stw	r6,0(r8)
    92fc:	59800015 	stw	r6,0(r11)
    9300:	51800015 	stw	r6,0(r10)
    9304:	42000404 	addi	r8,r8,16
    9308:	4a400404 	addi	r9,r9,16
    930c:	5ac00404 	addi	r11,r11,16
    9310:	52800404 	addi	r10,r10,16
    9314:	413ff71e 	bne	r8,r4,92f4 <__alt_data_end+0xf00092f4>
    9318:	63000044 	addi	r12,r12,1
    931c:	6018913a 	slli	r12,r12,4
    9320:	39c003cc 	andi	r7,r7,15
    9324:	010000c4 	movi	r4,3
    9328:	1b07883a 	add	r3,r3,r12
    932c:	21c00e2e 	bgeu	r4,r7,9368 <memset+0x100>
    9330:	1813883a 	mov	r9,r3
    9334:	3811883a 	mov	r8,r7
    9338:	010000c4 	movi	r4,3
    933c:	49800015 	stw	r6,0(r9)
    9340:	423fff04 	addi	r8,r8,-4
    9344:	4a400104 	addi	r9,r9,4
    9348:	223ffc36 	bltu	r4,r8,933c <__alt_data_end+0xf000933c>
    934c:	393fff04 	addi	r4,r7,-4
    9350:	2008d0ba 	srli	r4,r4,2
    9354:	39c000cc 	andi	r7,r7,3
    9358:	21000044 	addi	r4,r4,1
    935c:	2109883a 	add	r4,r4,r4
    9360:	2109883a 	add	r4,r4,r4
    9364:	1907883a 	add	r3,r3,r4
    9368:	38000526 	beq	r7,zero,9380 <memset+0x118>
    936c:	19cf883a 	add	r7,r3,r7
    9370:	19400005 	stb	r5,0(r3)
    9374:	18c00044 	addi	r3,r3,1
    9378:	38fffd1e 	bne	r7,r3,9370 <__alt_data_end+0xf0009370>
    937c:	f800283a 	ret
    9380:	f800283a 	ret
    9384:	2007883a 	mov	r3,r4
    9388:	300f883a 	mov	r7,r6
    938c:	003fc706 	br	92ac <__alt_data_end+0xf00092ac>

00009390 <_printf_r>:
    9390:	defffd04 	addi	sp,sp,-12
    9394:	2805883a 	mov	r2,r5
    9398:	dfc00015 	stw	ra,0(sp)
    939c:	d9800115 	stw	r6,4(sp)
    93a0:	d9c00215 	stw	r7,8(sp)
    93a4:	21400217 	ldw	r5,8(r4)
    93a8:	d9c00104 	addi	r7,sp,4
    93ac:	100d883a 	mov	r6,r2
    93b0:	000b8040 	call	b804 <___vfprintf_internal_r>
    93b4:	dfc00017 	ldw	ra,0(sp)
    93b8:	dec00304 	addi	sp,sp,12
    93bc:	f800283a 	ret

000093c0 <printf>:
    93c0:	defffc04 	addi	sp,sp,-16
    93c4:	dfc00015 	stw	ra,0(sp)
    93c8:	d9400115 	stw	r5,4(sp)
    93cc:	d9800215 	stw	r6,8(sp)
    93d0:	d9c00315 	stw	r7,12(sp)
    93d4:	00820034 	movhi	r2,2048
    93d8:	108b0204 	addi	r2,r2,11272
    93dc:	10800017 	ldw	r2,0(r2)
    93e0:	200b883a 	mov	r5,r4
    93e4:	d9800104 	addi	r6,sp,4
    93e8:	11000217 	ldw	r4,8(r2)
    93ec:	000d9fc0 	call	d9fc <__vfprintf_internal>
    93f0:	dfc00017 	ldw	ra,0(sp)
    93f4:	dec00404 	addi	sp,sp,16
    93f8:	f800283a 	ret

000093fc <_puts_r>:
    93fc:	defff604 	addi	sp,sp,-40
    9400:	dc000715 	stw	r16,28(sp)
    9404:	2021883a 	mov	r16,r4
    9408:	2809883a 	mov	r4,r5
    940c:	dc400815 	stw	r17,32(sp)
    9410:	dfc00915 	stw	ra,36(sp)
    9414:	2823883a 	mov	r17,r5
    9418:	00095940 	call	9594 <strlen>
    941c:	10c00044 	addi	r3,r2,1
    9420:	d8800115 	stw	r2,4(sp)
    9424:	00820034 	movhi	r2,2048
    9428:	1080ce04 	addi	r2,r2,824
    942c:	d8800215 	stw	r2,8(sp)
    9430:	00800044 	movi	r2,1
    9434:	d8800315 	stw	r2,12(sp)
    9438:	00800084 	movi	r2,2
    943c:	dc400015 	stw	r17,0(sp)
    9440:	d8c00615 	stw	r3,24(sp)
    9444:	dec00415 	stw	sp,16(sp)
    9448:	d8800515 	stw	r2,20(sp)
    944c:	80000226 	beq	r16,zero,9458 <_puts_r+0x5c>
    9450:	80800e17 	ldw	r2,56(r16)
    9454:	10001426 	beq	r2,zero,94a8 <_puts_r+0xac>
    9458:	81400217 	ldw	r5,8(r16)
    945c:	2880030b 	ldhu	r2,12(r5)
    9460:	10c8000c 	andi	r3,r2,8192
    9464:	1800061e 	bne	r3,zero,9480 <_puts_r+0x84>
    9468:	29001917 	ldw	r4,100(r5)
    946c:	00f7ffc4 	movi	r3,-8193
    9470:	10880014 	ori	r2,r2,8192
    9474:	20c6703a 	and	r3,r4,r3
    9478:	2880030d 	sth	r2,12(r5)
    947c:	28c01915 	stw	r3,100(r5)
    9480:	d9800404 	addi	r6,sp,16
    9484:	8009883a 	mov	r4,r16
    9488:	000ff2c0 	call	ff2c <__sfvwrite_r>
    948c:	1000091e 	bne	r2,zero,94b4 <_puts_r+0xb8>
    9490:	00800284 	movi	r2,10
    9494:	dfc00917 	ldw	ra,36(sp)
    9498:	dc400817 	ldw	r17,32(sp)
    949c:	dc000717 	ldw	r16,28(sp)
    94a0:	dec00a04 	addi	sp,sp,40
    94a4:	f800283a 	ret
    94a8:	8009883a 	mov	r4,r16
    94ac:	000faa80 	call	faa8 <__sinit>
    94b0:	003fe906 	br	9458 <__alt_data_end+0xf0009458>
    94b4:	00bfffc4 	movi	r2,-1
    94b8:	003ff606 	br	9494 <__alt_data_end+0xf0009494>

000094bc <puts>:
    94bc:	00820034 	movhi	r2,2048
    94c0:	108b0204 	addi	r2,r2,11272
    94c4:	200b883a 	mov	r5,r4
    94c8:	11000017 	ldw	r4,0(r2)
    94cc:	00093fc1 	jmpi	93fc <_puts_r>

000094d0 <_sprintf_r>:
    94d0:	deffe404 	addi	sp,sp,-112
    94d4:	2807883a 	mov	r3,r5
    94d8:	dfc01a15 	stw	ra,104(sp)
    94dc:	d9c01b15 	stw	r7,108(sp)
    94e0:	00a00034 	movhi	r2,32768
    94e4:	10bfffc4 	addi	r2,r2,-1
    94e8:	02008204 	movi	r8,520
    94ec:	d8800215 	stw	r2,8(sp)
    94f0:	d8800515 	stw	r2,20(sp)
    94f4:	d9c01b04 	addi	r7,sp,108
    94f8:	d80b883a 	mov	r5,sp
    94fc:	00bfffc4 	movi	r2,-1
    9500:	d8c00015 	stw	r3,0(sp)
    9504:	d8c00415 	stw	r3,16(sp)
    9508:	da00030d 	sth	r8,12(sp)
    950c:	d880038d 	sth	r2,14(sp)
    9510:	000962c0 	call	962c <___svfprintf_internal_r>
    9514:	d8c00017 	ldw	r3,0(sp)
    9518:	18000005 	stb	zero,0(r3)
    951c:	dfc01a17 	ldw	ra,104(sp)
    9520:	dec01c04 	addi	sp,sp,112
    9524:	f800283a 	ret

00009528 <sprintf>:
    9528:	deffe304 	addi	sp,sp,-116
    952c:	2007883a 	mov	r3,r4
    9530:	dfc01a15 	stw	ra,104(sp)
    9534:	d9801b15 	stw	r6,108(sp)
    9538:	d9c01c15 	stw	r7,112(sp)
    953c:	01020034 	movhi	r4,2048
    9540:	210b0204 	addi	r4,r4,11272
    9544:	21000017 	ldw	r4,0(r4)
    9548:	00a00034 	movhi	r2,32768
    954c:	10bfffc4 	addi	r2,r2,-1
    9550:	280d883a 	mov	r6,r5
    9554:	02008204 	movi	r8,520
    9558:	d8800215 	stw	r2,8(sp)
    955c:	d8800515 	stw	r2,20(sp)
    9560:	d9c01b04 	addi	r7,sp,108
    9564:	d80b883a 	mov	r5,sp
    9568:	00bfffc4 	movi	r2,-1
    956c:	d8c00015 	stw	r3,0(sp)
    9570:	d8c00415 	stw	r3,16(sp)
    9574:	da00030d 	sth	r8,12(sp)
    9578:	d880038d 	sth	r2,14(sp)
    957c:	000962c0 	call	962c <___svfprintf_internal_r>
    9580:	d8c00017 	ldw	r3,0(sp)
    9584:	18000005 	stb	zero,0(r3)
    9588:	dfc01a17 	ldw	ra,104(sp)
    958c:	dec01d04 	addi	sp,sp,116
    9590:	f800283a 	ret

00009594 <strlen>:
    9594:	208000cc 	andi	r2,r4,3
    9598:	10002026 	beq	r2,zero,961c <strlen+0x88>
    959c:	20800007 	ldb	r2,0(r4)
    95a0:	10002026 	beq	r2,zero,9624 <strlen+0x90>
    95a4:	2005883a 	mov	r2,r4
    95a8:	00000206 	br	95b4 <strlen+0x20>
    95ac:	10c00007 	ldb	r3,0(r2)
    95b0:	18001826 	beq	r3,zero,9614 <strlen+0x80>
    95b4:	10800044 	addi	r2,r2,1
    95b8:	10c000cc 	andi	r3,r2,3
    95bc:	183ffb1e 	bne	r3,zero,95ac <__alt_data_end+0xf00095ac>
    95c0:	10c00017 	ldw	r3,0(r2)
    95c4:	01ffbff4 	movhi	r7,65279
    95c8:	39ffbfc4 	addi	r7,r7,-257
    95cc:	00ca303a 	nor	r5,zero,r3
    95d0:	01a02074 	movhi	r6,32897
    95d4:	19c7883a 	add	r3,r3,r7
    95d8:	31a02004 	addi	r6,r6,-32640
    95dc:	1946703a 	and	r3,r3,r5
    95e0:	1986703a 	and	r3,r3,r6
    95e4:	1800091e 	bne	r3,zero,960c <strlen+0x78>
    95e8:	10800104 	addi	r2,r2,4
    95ec:	10c00017 	ldw	r3,0(r2)
    95f0:	19cb883a 	add	r5,r3,r7
    95f4:	00c6303a 	nor	r3,zero,r3
    95f8:	28c6703a 	and	r3,r5,r3
    95fc:	1986703a 	and	r3,r3,r6
    9600:	183ff926 	beq	r3,zero,95e8 <__alt_data_end+0xf00095e8>
    9604:	00000106 	br	960c <strlen+0x78>
    9608:	10800044 	addi	r2,r2,1
    960c:	10c00007 	ldb	r3,0(r2)
    9610:	183ffd1e 	bne	r3,zero,9608 <__alt_data_end+0xf0009608>
    9614:	1105c83a 	sub	r2,r2,r4
    9618:	f800283a 	ret
    961c:	2005883a 	mov	r2,r4
    9620:	003fe706 	br	95c0 <__alt_data_end+0xf00095c0>
    9624:	0005883a 	mov	r2,zero
    9628:	f800283a 	ret

0000962c <___svfprintf_internal_r>:
    962c:	deffb704 	addi	sp,sp,-292
    9630:	dfc04815 	stw	ra,288(sp)
    9634:	ddc04615 	stw	r23,280(sp)
    9638:	d9402c15 	stw	r5,176(sp)
    963c:	d9003915 	stw	r4,228(sp)
    9640:	302f883a 	mov	r23,r6
    9644:	d9c02d15 	stw	r7,180(sp)
    9648:	df004715 	stw	fp,284(sp)
    964c:	dd804515 	stw	r22,276(sp)
    9650:	dd404415 	stw	r21,272(sp)
    9654:	dd004315 	stw	r20,268(sp)
    9658:	dcc04215 	stw	r19,264(sp)
    965c:	dc804115 	stw	r18,260(sp)
    9660:	dc404015 	stw	r17,256(sp)
    9664:	dc003f15 	stw	r16,252(sp)
    9668:	001061c0 	call	1061c <_localeconv_r>
    966c:	10800017 	ldw	r2,0(r2)
    9670:	1009883a 	mov	r4,r2
    9674:	d8803415 	stw	r2,208(sp)
    9678:	00095940 	call	9594 <strlen>
    967c:	d8c02c17 	ldw	r3,176(sp)
    9680:	d8803815 	stw	r2,224(sp)
    9684:	1880030b 	ldhu	r2,12(r3)
    9688:	1080200c 	andi	r2,r2,128
    968c:	10000226 	beq	r2,zero,9698 <___svfprintf_internal_r+0x6c>
    9690:	18800417 	ldw	r2,16(r3)
    9694:	10067f26 	beq	r2,zero,b094 <___svfprintf_internal_r+0x1a68>
    9698:	dcc03917 	ldw	r19,228(sp)
    969c:	d8c00404 	addi	r3,sp,16
    96a0:	05420034 	movhi	r21,2048
    96a4:	d9001e04 	addi	r4,sp,120
    96a8:	ad40df84 	addi	r21,r21,894
    96ac:	d8c01e15 	stw	r3,120(sp)
    96b0:	d8002015 	stw	zero,128(sp)
    96b4:	d8001f15 	stw	zero,124(sp)
    96b8:	d8003315 	stw	zero,204(sp)
    96bc:	d8003615 	stw	zero,216(sp)
    96c0:	d8003715 	stw	zero,220(sp)
    96c4:	1811883a 	mov	r8,r3
    96c8:	d8003a15 	stw	zero,232(sp)
    96cc:	d8003b15 	stw	zero,236(sp)
    96d0:	d8002f15 	stw	zero,188(sp)
    96d4:	d9002815 	stw	r4,160(sp)
    96d8:	b8800007 	ldb	r2,0(r23)
    96dc:	10026726 	beq	r2,zero,a07c <___svfprintf_internal_r+0xa50>
    96e0:	00c00944 	movi	r3,37
    96e4:	b821883a 	mov	r16,r23
    96e8:	10c0021e 	bne	r2,r3,96f4 <___svfprintf_internal_r+0xc8>
    96ec:	00001406 	br	9740 <___svfprintf_internal_r+0x114>
    96f0:	10c00326 	beq	r2,r3,9700 <___svfprintf_internal_r+0xd4>
    96f4:	84000044 	addi	r16,r16,1
    96f8:	80800007 	ldb	r2,0(r16)
    96fc:	103ffc1e 	bne	r2,zero,96f0 <__alt_data_end+0xf00096f0>
    9700:	85e3c83a 	sub	r17,r16,r23
    9704:	88000e26 	beq	r17,zero,9740 <___svfprintf_internal_r+0x114>
    9708:	d8c02017 	ldw	r3,128(sp)
    970c:	d8801f17 	ldw	r2,124(sp)
    9710:	45c00015 	stw	r23,0(r8)
    9714:	1c47883a 	add	r3,r3,r17
    9718:	10800044 	addi	r2,r2,1
    971c:	d8c02015 	stw	r3,128(sp)
    9720:	44400115 	stw	r17,4(r8)
    9724:	d8801f15 	stw	r2,124(sp)
    9728:	00c001c4 	movi	r3,7
    972c:	18809716 	blt	r3,r2,998c <___svfprintf_internal_r+0x360>
    9730:	42000204 	addi	r8,r8,8
    9734:	d9402f17 	ldw	r5,188(sp)
    9738:	2c4b883a 	add	r5,r5,r17
    973c:	d9402f15 	stw	r5,188(sp)
    9740:	80800007 	ldb	r2,0(r16)
    9744:	10009826 	beq	r2,zero,99a8 <___svfprintf_internal_r+0x37c>
    9748:	84400047 	ldb	r17,1(r16)
    974c:	00bfffc4 	movi	r2,-1
    9750:	85c00044 	addi	r23,r16,1
    9754:	d8002785 	stb	zero,158(sp)
    9758:	0007883a 	mov	r3,zero
    975c:	000f883a 	mov	r7,zero
    9760:	d8802915 	stw	r2,164(sp)
    9764:	d8003115 	stw	zero,196(sp)
    9768:	0025883a 	mov	r18,zero
    976c:	01401604 	movi	r5,88
    9770:	01800244 	movi	r6,9
    9774:	02800a84 	movi	r10,42
    9778:	02401b04 	movi	r9,108
    977c:	bdc00044 	addi	r23,r23,1
    9780:	88bff804 	addi	r2,r17,-32
    9784:	2882f036 	bltu	r5,r2,a348 <___svfprintf_internal_r+0xd1c>
    9788:	100490ba 	slli	r2,r2,2
    978c:	01000074 	movhi	r4,1
    9790:	2125e804 	addi	r4,r4,-26720
    9794:	1105883a 	add	r2,r2,r4
    9798:	10800017 	ldw	r2,0(r2)
    979c:	1000683a 	jmp	r2
    97a0:	0000a2b0 	cmpltui	zero,zero,650
    97a4:	0000a348 	cmpgei	zero,zero,653
    97a8:	0000a348 	cmpgei	zero,zero,653
    97ac:	0000a2a4 	muli	zero,zero,650
    97b0:	0000a348 	cmpgei	zero,zero,653
    97b4:	0000a348 	cmpgei	zero,zero,653
    97b8:	0000a348 	cmpgei	zero,zero,653
    97bc:	0000a348 	cmpgei	zero,zero,653
    97c0:	0000a348 	cmpgei	zero,zero,653
    97c4:	0000a348 	cmpgei	zero,zero,653
    97c8:	00009a04 	movi	zero,616
    97cc:	0000a1e0 	cmpeqi	zero,zero,647
    97d0:	0000a348 	cmpgei	zero,zero,653
    97d4:	00009914 	movui	zero,612
    97d8:	00009a2c 	andhi	zero,zero,616
    97dc:	0000a348 	cmpgei	zero,zero,653
    97e0:	00009aa0 	cmpeqi	zero,zero,618
    97e4:	00009a6c 	andhi	zero,zero,617
    97e8:	00009a6c 	andhi	zero,zero,617
    97ec:	00009a6c 	andhi	zero,zero,617
    97f0:	00009a6c 	andhi	zero,zero,617
    97f4:	00009a6c 	andhi	zero,zero,617
    97f8:	00009a6c 	andhi	zero,zero,617
    97fc:	00009a6c 	andhi	zero,zero,617
    9800:	00009a6c 	andhi	zero,zero,617
    9804:	00009a6c 	andhi	zero,zero,617
    9808:	0000a348 	cmpgei	zero,zero,653
    980c:	0000a348 	cmpgei	zero,zero,653
    9810:	0000a348 	cmpgei	zero,zero,653
    9814:	0000a348 	cmpgei	zero,zero,653
    9818:	0000a348 	cmpgei	zero,zero,653
    981c:	0000a348 	cmpgei	zero,zero,653
    9820:	0000a348 	cmpgei	zero,zero,653
    9824:	0000a348 	cmpgei	zero,zero,653
    9828:	0000a348 	cmpgei	zero,zero,653
    982c:	0000a348 	cmpgei	zero,zero,653
    9830:	00009b58 	cmpnei	zero,zero,621
    9834:	00009aac 	andhi	zero,zero,618
    9838:	0000a348 	cmpgei	zero,zero,653
    983c:	00009aac 	andhi	zero,zero,618
    9840:	0000a348 	cmpgei	zero,zero,653
    9844:	0000a348 	cmpgei	zero,zero,653
    9848:	0000a348 	cmpgei	zero,zero,653
    984c:	0000a348 	cmpgei	zero,zero,653
    9850:	00009b4c 	andi	zero,zero,621
    9854:	0000a348 	cmpgei	zero,zero,653
    9858:	0000a348 	cmpgei	zero,zero,653
    985c:	00009c14 	movui	zero,624
    9860:	0000a348 	cmpgei	zero,zero,653
    9864:	0000a348 	cmpgei	zero,zero,653
    9868:	0000a348 	cmpgei	zero,zero,653
    986c:	0000a348 	cmpgei	zero,zero,653
    9870:	0000a348 	cmpgei	zero,zero,653
    9874:	0000a084 	movi	zero,642
    9878:	0000a348 	cmpgei	zero,zero,653
    987c:	0000a348 	cmpgei	zero,zero,653
    9880:	0000a0e4 	muli	zero,zero,643
    9884:	0000a348 	cmpgei	zero,zero,653
    9888:	0000a348 	cmpgei	zero,zero,653
    988c:	0000a348 	cmpgei	zero,zero,653
    9890:	0000a348 	cmpgei	zero,zero,653
    9894:	0000a348 	cmpgei	zero,zero,653
    9898:	0000a348 	cmpgei	zero,zero,653
    989c:	0000a348 	cmpgei	zero,zero,653
    98a0:	0000a348 	cmpgei	zero,zero,653
    98a4:	0000a348 	cmpgei	zero,zero,653
    98a8:	0000a348 	cmpgei	zero,zero,653
    98ac:	0000a194 	movui	zero,646
    98b0:	0000a2d0 	cmplti	zero,zero,651
    98b4:	00009aac 	andhi	zero,zero,618
    98b8:	00009aac 	andhi	zero,zero,618
    98bc:	00009aac 	andhi	zero,zero,618
    98c0:	0000a324 	muli	zero,zero,652
    98c4:	0000a2d0 	cmplti	zero,zero,651
    98c8:	0000a348 	cmpgei	zero,zero,653
    98cc:	0000a348 	cmpgei	zero,zero,653
    98d0:	0000a2e0 	cmpeqi	zero,zero,651
    98d4:	0000a348 	cmpgei	zero,zero,653
    98d8:	0000a2f0 	cmpltui	zero,zero,651
    98dc:	0000a1d0 	cmplti	zero,zero,647
    98e0:	00009920 	cmpeqi	zero,zero,612
    98e4:	0000a1f0 	cmpltui	zero,zero,647
    98e8:	0000a348 	cmpgei	zero,zero,653
    98ec:	0000a1fc 	xorhi	zero,zero,647
    98f0:	0000a348 	cmpgei	zero,zero,653
    98f4:	0000a258 	cmpnei	zero,zero,649
    98f8:	0000a348 	cmpgei	zero,zero,653
    98fc:	0000a348 	cmpgei	zero,zero,653
    9900:	0000a268 	cmpgeui	zero,zero,649
    9904:	d9003117 	ldw	r4,196(sp)
    9908:	d8802d15 	stw	r2,180(sp)
    990c:	0109c83a 	sub	r4,zero,r4
    9910:	d9003115 	stw	r4,196(sp)
    9914:	94800114 	ori	r18,r18,4
    9918:	bc400007 	ldb	r17,0(r23)
    991c:	003f9706 	br	977c <__alt_data_end+0xf000977c>
    9920:	00800c04 	movi	r2,48
    9924:	d9002d17 	ldw	r4,180(sp)
    9928:	d9402917 	ldw	r5,164(sp)
    992c:	d8802705 	stb	r2,156(sp)
    9930:	00801e04 	movi	r2,120
    9934:	d8802745 	stb	r2,157(sp)
    9938:	d8002785 	stb	zero,158(sp)
    993c:	20c00104 	addi	r3,r4,4
    9940:	25000017 	ldw	r20,0(r4)
    9944:	002d883a 	mov	r22,zero
    9948:	90800094 	ori	r2,r18,2
    994c:	28028616 	blt	r5,zero,a368 <___svfprintf_internal_r+0xd3c>
    9950:	00bfdfc4 	movi	r2,-129
    9954:	90a4703a 	and	r18,r18,r2
    9958:	d8c02d15 	stw	r3,180(sp)
    995c:	94800094 	ori	r18,r18,2
    9960:	a002731e 	bne	r20,zero,a330 <___svfprintf_internal_r+0xd04>
    9964:	00820034 	movhi	r2,2048
    9968:	1080d804 	addi	r2,r2,864
    996c:	d8803a15 	stw	r2,232(sp)
    9970:	04401e04 	movi	r17,120
    9974:	d8c02917 	ldw	r3,164(sp)
    9978:	0039883a 	mov	fp,zero
    997c:	1801d526 	beq	r3,zero,a0d4 <___svfprintf_internal_r+0xaa8>
    9980:	0029883a 	mov	r20,zero
    9984:	002d883a 	mov	r22,zero
    9988:	0001f106 	br	a150 <___svfprintf_internal_r+0xb24>
    998c:	d9402c17 	ldw	r5,176(sp)
    9990:	d9801e04 	addi	r6,sp,120
    9994:	9809883a 	mov	r4,r19
    9998:	0012a940 	call	12a94 <__ssprint_r>
    999c:	1000081e 	bne	r2,zero,99c0 <___svfprintf_internal_r+0x394>
    99a0:	da000404 	addi	r8,sp,16
    99a4:	003f6306 	br	9734 <__alt_data_end+0xf0009734>
    99a8:	d8802017 	ldw	r2,128(sp)
    99ac:	10000426 	beq	r2,zero,99c0 <___svfprintf_internal_r+0x394>
    99b0:	d9402c17 	ldw	r5,176(sp)
    99b4:	d9003917 	ldw	r4,228(sp)
    99b8:	d9801e04 	addi	r6,sp,120
    99bc:	0012a940 	call	12a94 <__ssprint_r>
    99c0:	d8802c17 	ldw	r2,176(sp)
    99c4:	10c0030b 	ldhu	r3,12(r2)
    99c8:	d8802f17 	ldw	r2,188(sp)
    99cc:	18c0100c 	andi	r3,r3,64
    99d0:	1805f51e 	bne	r3,zero,b1a8 <___svfprintf_internal_r+0x1b7c>
    99d4:	dfc04817 	ldw	ra,288(sp)
    99d8:	df004717 	ldw	fp,284(sp)
    99dc:	ddc04617 	ldw	r23,280(sp)
    99e0:	dd804517 	ldw	r22,276(sp)
    99e4:	dd404417 	ldw	r21,272(sp)
    99e8:	dd004317 	ldw	r20,268(sp)
    99ec:	dcc04217 	ldw	r19,264(sp)
    99f0:	dc804117 	ldw	r18,260(sp)
    99f4:	dc404017 	ldw	r17,256(sp)
    99f8:	dc003f17 	ldw	r16,252(sp)
    99fc:	dec04904 	addi	sp,sp,292
    9a00:	f800283a 	ret
    9a04:	d8802d17 	ldw	r2,180(sp)
    9a08:	d9002d17 	ldw	r4,180(sp)
    9a0c:	10800017 	ldw	r2,0(r2)
    9a10:	d8803115 	stw	r2,196(sp)
    9a14:	20800104 	addi	r2,r4,4
    9a18:	d9003117 	ldw	r4,196(sp)
    9a1c:	203fb916 	blt	r4,zero,9904 <__alt_data_end+0xf0009904>
    9a20:	d8802d15 	stw	r2,180(sp)
    9a24:	bc400007 	ldb	r17,0(r23)
    9a28:	003f5406 	br	977c <__alt_data_end+0xf000977c>
    9a2c:	bc400007 	ldb	r17,0(r23)
    9a30:	bac00044 	addi	r11,r23,1
    9a34:	8a873926 	beq	r17,r10,b71c <___svfprintf_internal_r+0x20f0>
    9a38:	88bff404 	addi	r2,r17,-48
    9a3c:	0009883a 	mov	r4,zero
    9a40:	30868836 	bltu	r6,r2,b464 <___svfprintf_internal_r+0x1e38>
    9a44:	5c400007 	ldb	r17,0(r11)
    9a48:	210002a4 	muli	r4,r4,10
    9a4c:	5dc00044 	addi	r23,r11,1
    9a50:	b817883a 	mov	r11,r23
    9a54:	2089883a 	add	r4,r4,r2
    9a58:	88bff404 	addi	r2,r17,-48
    9a5c:	30bff92e 	bgeu	r6,r2,9a44 <__alt_data_end+0xf0009a44>
    9a60:	2005d716 	blt	r4,zero,b1c0 <___svfprintf_internal_r+0x1b94>
    9a64:	d9002915 	stw	r4,164(sp)
    9a68:	003f4506 	br	9780 <__alt_data_end+0xf0009780>
    9a6c:	b809883a 	mov	r4,r23
    9a70:	d8003115 	stw	zero,196(sp)
    9a74:	88bff404 	addi	r2,r17,-48
    9a78:	0017883a 	mov	r11,zero
    9a7c:	24400007 	ldb	r17,0(r4)
    9a80:	5ac002a4 	muli	r11,r11,10
    9a84:	bdc00044 	addi	r23,r23,1
    9a88:	b809883a 	mov	r4,r23
    9a8c:	12d7883a 	add	r11,r2,r11
    9a90:	88bff404 	addi	r2,r17,-48
    9a94:	30bff92e 	bgeu	r6,r2,9a7c <__alt_data_end+0xf0009a7c>
    9a98:	dac03115 	stw	r11,196(sp)
    9a9c:	003f3806 	br	9780 <__alt_data_end+0xf0009780>
    9aa0:	94802014 	ori	r18,r18,128
    9aa4:	bc400007 	ldb	r17,0(r23)
    9aa8:	003f3406 	br	977c <__alt_data_end+0xf000977c>
    9aac:	18c03fcc 	andi	r3,r3,255
    9ab0:	1807471e 	bne	r3,zero,b7d0 <___svfprintf_internal_r+0x21a4>
    9ab4:	9080020c 	andi	r2,r18,8
    9ab8:	10047d26 	beq	r2,zero,acb0 <___svfprintf_internal_r+0x1684>
    9abc:	d8c02d17 	ldw	r3,180(sp)
    9ac0:	d9002d17 	ldw	r4,180(sp)
    9ac4:	d9402d17 	ldw	r5,180(sp)
    9ac8:	18c00017 	ldw	r3,0(r3)
    9acc:	21000117 	ldw	r4,4(r4)
    9ad0:	29400204 	addi	r5,r5,8
    9ad4:	d8c03615 	stw	r3,216(sp)
    9ad8:	d9003715 	stw	r4,220(sp)
    9adc:	d9402d15 	stw	r5,180(sp)
    9ae0:	d9003617 	ldw	r4,216(sp)
    9ae4:	d9403717 	ldw	r5,220(sp)
    9ae8:	da003e15 	stw	r8,248(sp)
    9aec:	04000044 	movi	r16,1
    9af0:	00127b40 	call	127b4 <__fpclassifyd>
    9af4:	da003e17 	ldw	r8,248(sp)
    9af8:	14044b1e 	bne	r2,r16,ac28 <___svfprintf_internal_r+0x15fc>
    9afc:	d9003617 	ldw	r4,216(sp)
    9b00:	d9403717 	ldw	r5,220(sp)
    9b04:	000d883a 	mov	r6,zero
    9b08:	000f883a 	mov	r7,zero
    9b0c:	00172000 	call	17200 <__ledf2>
    9b10:	da003e17 	ldw	r8,248(sp)
    9b14:	1005f316 	blt	r2,zero,b2e4 <___svfprintf_internal_r+0x1cb8>
    9b18:	df002783 	ldbu	fp,158(sp)
    9b1c:	008011c4 	movi	r2,71
    9b20:	1445590e 	bge	r2,r17,b088 <___svfprintf_internal_r+0x1a5c>
    9b24:	04020034 	movhi	r16,2048
    9b28:	8400d004 	addi	r16,r16,832
    9b2c:	00c000c4 	movi	r3,3
    9b30:	00bfdfc4 	movi	r2,-129
    9b34:	d8c02a15 	stw	r3,168(sp)
    9b38:	90a4703a 	and	r18,r18,r2
    9b3c:	d8c02e15 	stw	r3,184(sp)
    9b40:	d8002915 	stw	zero,164(sp)
    9b44:	d8003215 	stw	zero,200(sp)
    9b48:	00006606 	br	9ce4 <___svfprintf_internal_r+0x6b8>
    9b4c:	94800214 	ori	r18,r18,8
    9b50:	bc400007 	ldb	r17,0(r23)
    9b54:	003f0906 	br	977c <__alt_data_end+0xf000977c>
    9b58:	18c03fcc 	andi	r3,r3,255
    9b5c:	1807181e 	bne	r3,zero,b7c0 <___svfprintf_internal_r+0x2194>
    9b60:	94800414 	ori	r18,r18,16
    9b64:	9080080c 	andi	r2,r18,32
    9b68:	10039626 	beq	r2,zero,a9c4 <___svfprintf_internal_r+0x1398>
    9b6c:	d9402d17 	ldw	r5,180(sp)
    9b70:	28800117 	ldw	r2,4(r5)
    9b74:	2d000017 	ldw	r20,0(r5)
    9b78:	29400204 	addi	r5,r5,8
    9b7c:	d9402d15 	stw	r5,180(sp)
    9b80:	102d883a 	mov	r22,r2
    9b84:	10039816 	blt	r2,zero,a9e8 <___svfprintf_internal_r+0x13bc>
    9b88:	d9402917 	ldw	r5,164(sp)
    9b8c:	df002783 	ldbu	fp,158(sp)
    9b90:	2803ab16 	blt	r5,zero,aa40 <___svfprintf_internal_r+0x1414>
    9b94:	00ffdfc4 	movi	r3,-129
    9b98:	a584b03a 	or	r2,r20,r22
    9b9c:	90e4703a 	and	r18,r18,r3
    9ba0:	10014a26 	beq	r2,zero,a0cc <___svfprintf_internal_r+0xaa0>
    9ba4:	b0034b26 	beq	r22,zero,a8d4 <___svfprintf_internal_r+0x12a8>
    9ba8:	dc402a15 	stw	r17,168(sp)
    9bac:	dc001e04 	addi	r16,sp,120
    9bb0:	b023883a 	mov	r17,r22
    9bb4:	402d883a 	mov	r22,r8
    9bb8:	a009883a 	mov	r4,r20
    9bbc:	880b883a 	mov	r5,r17
    9bc0:	01800284 	movi	r6,10
    9bc4:	000f883a 	mov	r7,zero
    9bc8:	00163940 	call	16394 <__umoddi3>
    9bcc:	10800c04 	addi	r2,r2,48
    9bd0:	843fffc4 	addi	r16,r16,-1
    9bd4:	a009883a 	mov	r4,r20
    9bd8:	880b883a 	mov	r5,r17
    9bdc:	80800005 	stb	r2,0(r16)
    9be0:	01800284 	movi	r6,10
    9be4:	000f883a 	mov	r7,zero
    9be8:	0015e1c0 	call	15e1c <__udivdi3>
    9bec:	1029883a 	mov	r20,r2
    9bf0:	10c4b03a 	or	r2,r2,r3
    9bf4:	1823883a 	mov	r17,r3
    9bf8:	103fef1e 	bne	r2,zero,9bb8 <__alt_data_end+0xf0009bb8>
    9bfc:	d8c02817 	ldw	r3,160(sp)
    9c00:	dc402a17 	ldw	r17,168(sp)
    9c04:	b011883a 	mov	r8,r22
    9c08:	1c07c83a 	sub	r3,r3,r16
    9c0c:	d8c02e15 	stw	r3,184(sp)
    9c10:	00002e06 	br	9ccc <___svfprintf_internal_r+0x6a0>
    9c14:	18c03fcc 	andi	r3,r3,255
    9c18:	1806e71e 	bne	r3,zero,b7b8 <___svfprintf_internal_r+0x218c>
    9c1c:	94800414 	ori	r18,r18,16
    9c20:	9080080c 	andi	r2,r18,32
    9c24:	1002d426 	beq	r2,zero,a778 <___svfprintf_internal_r+0x114c>
    9c28:	d9402d17 	ldw	r5,180(sp)
    9c2c:	d8c02917 	ldw	r3,164(sp)
    9c30:	d8002785 	stb	zero,158(sp)
    9c34:	28800204 	addi	r2,r5,8
    9c38:	2d000017 	ldw	r20,0(r5)
    9c3c:	2d800117 	ldw	r22,4(r5)
    9c40:	18041516 	blt	r3,zero,ac98 <___svfprintf_internal_r+0x166c>
    9c44:	013fdfc4 	movi	r4,-129
    9c48:	a586b03a 	or	r3,r20,r22
    9c4c:	d8802d15 	stw	r2,180(sp)
    9c50:	9124703a 	and	r18,r18,r4
    9c54:	1802d51e 	bne	r3,zero,a7ac <___svfprintf_internal_r+0x1180>
    9c58:	d9402917 	ldw	r5,164(sp)
    9c5c:	0039883a 	mov	fp,zero
    9c60:	2806be26 	beq	r5,zero,b75c <___svfprintf_internal_r+0x2130>
    9c64:	0029883a 	mov	r20,zero
    9c68:	002d883a 	mov	r22,zero
    9c6c:	dc001e04 	addi	r16,sp,120
    9c70:	a006d0fa 	srli	r3,r20,3
    9c74:	b008977a 	slli	r4,r22,29
    9c78:	b02cd0fa 	srli	r22,r22,3
    9c7c:	a50001cc 	andi	r20,r20,7
    9c80:	a0800c04 	addi	r2,r20,48
    9c84:	843fffc4 	addi	r16,r16,-1
    9c88:	20e8b03a 	or	r20,r4,r3
    9c8c:	80800005 	stb	r2,0(r16)
    9c90:	a586b03a 	or	r3,r20,r22
    9c94:	183ff61e 	bne	r3,zero,9c70 <__alt_data_end+0xf0009c70>
    9c98:	90c0004c 	andi	r3,r18,1
    9c9c:	18013926 	beq	r3,zero,a184 <___svfprintf_internal_r+0xb58>
    9ca0:	10803fcc 	andi	r2,r2,255
    9ca4:	1080201c 	xori	r2,r2,128
    9ca8:	10bfe004 	addi	r2,r2,-128
    9cac:	00c00c04 	movi	r3,48
    9cb0:	10c13426 	beq	r2,r3,a184 <___svfprintf_internal_r+0xb58>
    9cb4:	80ffffc5 	stb	r3,-1(r16)
    9cb8:	d8c02817 	ldw	r3,160(sp)
    9cbc:	80bfffc4 	addi	r2,r16,-1
    9cc0:	1021883a 	mov	r16,r2
    9cc4:	1887c83a 	sub	r3,r3,r2
    9cc8:	d8c02e15 	stw	r3,184(sp)
    9ccc:	d8802e17 	ldw	r2,184(sp)
    9cd0:	d9002917 	ldw	r4,164(sp)
    9cd4:	1100010e 	bge	r2,r4,9cdc <___svfprintf_internal_r+0x6b0>
    9cd8:	2005883a 	mov	r2,r4
    9cdc:	d8802a15 	stw	r2,168(sp)
    9ce0:	d8003215 	stw	zero,200(sp)
    9ce4:	e7003fcc 	andi	fp,fp,255
    9ce8:	e700201c 	xori	fp,fp,128
    9cec:	e73fe004 	addi	fp,fp,-128
    9cf0:	e0000326 	beq	fp,zero,9d00 <___svfprintf_internal_r+0x6d4>
    9cf4:	d8c02a17 	ldw	r3,168(sp)
    9cf8:	18c00044 	addi	r3,r3,1
    9cfc:	d8c02a15 	stw	r3,168(sp)
    9d00:	90c0008c 	andi	r3,r18,2
    9d04:	d8c02b15 	stw	r3,172(sp)
    9d08:	18000326 	beq	r3,zero,9d18 <___svfprintf_internal_r+0x6ec>
    9d0c:	d8c02a17 	ldw	r3,168(sp)
    9d10:	18c00084 	addi	r3,r3,2
    9d14:	d8c02a15 	stw	r3,168(sp)
    9d18:	90c0210c 	andi	r3,r18,132
    9d1c:	d8c03015 	stw	r3,192(sp)
    9d20:	1801a11e 	bne	r3,zero,a3a8 <___svfprintf_internal_r+0xd7c>
    9d24:	d9003117 	ldw	r4,196(sp)
    9d28:	d8c02a17 	ldw	r3,168(sp)
    9d2c:	20e9c83a 	sub	r20,r4,r3
    9d30:	05019d0e 	bge	zero,r20,a3a8 <___svfprintf_internal_r+0xd7c>
    9d34:	02400404 	movi	r9,16
    9d38:	d8c02017 	ldw	r3,128(sp)
    9d3c:	d8801f17 	ldw	r2,124(sp)
    9d40:	4d051b0e 	bge	r9,r20,b1b0 <___svfprintf_internal_r+0x1b84>
    9d44:	01420034 	movhi	r5,2048
    9d48:	2940e384 	addi	r5,r5,910
    9d4c:	dc403c15 	stw	r17,240(sp)
    9d50:	d9403515 	stw	r5,212(sp)
    9d54:	a023883a 	mov	r17,r20
    9d58:	482d883a 	mov	r22,r9
    9d5c:	9029883a 	mov	r20,r18
    9d60:	070001c4 	movi	fp,7
    9d64:	8025883a 	mov	r18,r16
    9d68:	dc002c17 	ldw	r16,176(sp)
    9d6c:	00000306 	br	9d7c <___svfprintf_internal_r+0x750>
    9d70:	8c7ffc04 	addi	r17,r17,-16
    9d74:	42000204 	addi	r8,r8,8
    9d78:	b440130e 	bge	r22,r17,9dc8 <___svfprintf_internal_r+0x79c>
    9d7c:	01020034 	movhi	r4,2048
    9d80:	18c00404 	addi	r3,r3,16
    9d84:	10800044 	addi	r2,r2,1
    9d88:	2100e384 	addi	r4,r4,910
    9d8c:	41000015 	stw	r4,0(r8)
    9d90:	45800115 	stw	r22,4(r8)
    9d94:	d8c02015 	stw	r3,128(sp)
    9d98:	d8801f15 	stw	r2,124(sp)
    9d9c:	e0bff40e 	bge	fp,r2,9d70 <__alt_data_end+0xf0009d70>
    9da0:	d9801e04 	addi	r6,sp,120
    9da4:	800b883a 	mov	r5,r16
    9da8:	9809883a 	mov	r4,r19
    9dac:	0012a940 	call	12a94 <__ssprint_r>
    9db0:	103f031e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    9db4:	8c7ffc04 	addi	r17,r17,-16
    9db8:	d8c02017 	ldw	r3,128(sp)
    9dbc:	d8801f17 	ldw	r2,124(sp)
    9dc0:	da000404 	addi	r8,sp,16
    9dc4:	b47fed16 	blt	r22,r17,9d7c <__alt_data_end+0xf0009d7c>
    9dc8:	9021883a 	mov	r16,r18
    9dcc:	a025883a 	mov	r18,r20
    9dd0:	8829883a 	mov	r20,r17
    9dd4:	dc403c17 	ldw	r17,240(sp)
    9dd8:	d9403517 	ldw	r5,212(sp)
    9ddc:	a0c7883a 	add	r3,r20,r3
    9de0:	10800044 	addi	r2,r2,1
    9de4:	41400015 	stw	r5,0(r8)
    9de8:	45000115 	stw	r20,4(r8)
    9dec:	d8c02015 	stw	r3,128(sp)
    9df0:	d8801f15 	stw	r2,124(sp)
    9df4:	010001c4 	movi	r4,7
    9df8:	20829f16 	blt	r4,r2,a878 <___svfprintf_internal_r+0x124c>
    9dfc:	df002787 	ldb	fp,158(sp)
    9e00:	42000204 	addi	r8,r8,8
    9e04:	e0000c26 	beq	fp,zero,9e38 <___svfprintf_internal_r+0x80c>
    9e08:	d8801f17 	ldw	r2,124(sp)
    9e0c:	d9002784 	addi	r4,sp,158
    9e10:	18c00044 	addi	r3,r3,1
    9e14:	10800044 	addi	r2,r2,1
    9e18:	41000015 	stw	r4,0(r8)
    9e1c:	01000044 	movi	r4,1
    9e20:	41000115 	stw	r4,4(r8)
    9e24:	d8c02015 	stw	r3,128(sp)
    9e28:	d8801f15 	stw	r2,124(sp)
    9e2c:	010001c4 	movi	r4,7
    9e30:	20823816 	blt	r4,r2,a714 <___svfprintf_internal_r+0x10e8>
    9e34:	42000204 	addi	r8,r8,8
    9e38:	d8802b17 	ldw	r2,172(sp)
    9e3c:	10000c26 	beq	r2,zero,9e70 <___svfprintf_internal_r+0x844>
    9e40:	d8801f17 	ldw	r2,124(sp)
    9e44:	d9002704 	addi	r4,sp,156
    9e48:	18c00084 	addi	r3,r3,2
    9e4c:	10800044 	addi	r2,r2,1
    9e50:	41000015 	stw	r4,0(r8)
    9e54:	01000084 	movi	r4,2
    9e58:	41000115 	stw	r4,4(r8)
    9e5c:	d8c02015 	stw	r3,128(sp)
    9e60:	d8801f15 	stw	r2,124(sp)
    9e64:	010001c4 	movi	r4,7
    9e68:	20823216 	blt	r4,r2,a734 <___svfprintf_internal_r+0x1108>
    9e6c:	42000204 	addi	r8,r8,8
    9e70:	d9003017 	ldw	r4,192(sp)
    9e74:	00802004 	movi	r2,128
    9e78:	20819726 	beq	r4,r2,a4d8 <___svfprintf_internal_r+0xeac>
    9e7c:	d9402917 	ldw	r5,164(sp)
    9e80:	d8802e17 	ldw	r2,184(sp)
    9e84:	28adc83a 	sub	r22,r5,r2
    9e88:	05802f0e 	bge	zero,r22,9f48 <___svfprintf_internal_r+0x91c>
    9e8c:	07000404 	movi	fp,16
    9e90:	d8801f17 	ldw	r2,124(sp)
    9e94:	e583c00e 	bge	fp,r22,ad98 <___svfprintf_internal_r+0x176c>
    9e98:	01420034 	movhi	r5,2048
    9e9c:	2940df84 	addi	r5,r5,894
    9ea0:	dc402915 	stw	r17,164(sp)
    9ea4:	d9402b15 	stw	r5,172(sp)
    9ea8:	b023883a 	mov	r17,r22
    9eac:	050001c4 	movi	r20,7
    9eb0:	902d883a 	mov	r22,r18
    9eb4:	8025883a 	mov	r18,r16
    9eb8:	dc002c17 	ldw	r16,176(sp)
    9ebc:	00000306 	br	9ecc <___svfprintf_internal_r+0x8a0>
    9ec0:	8c7ffc04 	addi	r17,r17,-16
    9ec4:	42000204 	addi	r8,r8,8
    9ec8:	e440110e 	bge	fp,r17,9f10 <___svfprintf_internal_r+0x8e4>
    9ecc:	18c00404 	addi	r3,r3,16
    9ed0:	10800044 	addi	r2,r2,1
    9ed4:	45400015 	stw	r21,0(r8)
    9ed8:	47000115 	stw	fp,4(r8)
    9edc:	d8c02015 	stw	r3,128(sp)
    9ee0:	d8801f15 	stw	r2,124(sp)
    9ee4:	a0bff60e 	bge	r20,r2,9ec0 <__alt_data_end+0xf0009ec0>
    9ee8:	d9801e04 	addi	r6,sp,120
    9eec:	800b883a 	mov	r5,r16
    9ef0:	9809883a 	mov	r4,r19
    9ef4:	0012a940 	call	12a94 <__ssprint_r>
    9ef8:	103eb11e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    9efc:	8c7ffc04 	addi	r17,r17,-16
    9f00:	d8c02017 	ldw	r3,128(sp)
    9f04:	d8801f17 	ldw	r2,124(sp)
    9f08:	da000404 	addi	r8,sp,16
    9f0c:	e47fef16 	blt	fp,r17,9ecc <__alt_data_end+0xf0009ecc>
    9f10:	9021883a 	mov	r16,r18
    9f14:	b025883a 	mov	r18,r22
    9f18:	882d883a 	mov	r22,r17
    9f1c:	dc402917 	ldw	r17,164(sp)
    9f20:	d9002b17 	ldw	r4,172(sp)
    9f24:	1d87883a 	add	r3,r3,r22
    9f28:	10800044 	addi	r2,r2,1
    9f2c:	41000015 	stw	r4,0(r8)
    9f30:	45800115 	stw	r22,4(r8)
    9f34:	d8c02015 	stw	r3,128(sp)
    9f38:	d8801f15 	stw	r2,124(sp)
    9f3c:	010001c4 	movi	r4,7
    9f40:	2081ec16 	blt	r4,r2,a6f4 <___svfprintf_internal_r+0x10c8>
    9f44:	42000204 	addi	r8,r8,8
    9f48:	9080400c 	andi	r2,r18,256
    9f4c:	1001181e 	bne	r2,zero,a3b0 <___svfprintf_internal_r+0xd84>
    9f50:	d9402e17 	ldw	r5,184(sp)
    9f54:	d8801f17 	ldw	r2,124(sp)
    9f58:	44000015 	stw	r16,0(r8)
    9f5c:	1947883a 	add	r3,r3,r5
    9f60:	10800044 	addi	r2,r2,1
    9f64:	41400115 	stw	r5,4(r8)
    9f68:	d8c02015 	stw	r3,128(sp)
    9f6c:	d8801f15 	stw	r2,124(sp)
    9f70:	010001c4 	movi	r4,7
    9f74:	2081d116 	blt	r4,r2,a6bc <___svfprintf_internal_r+0x1090>
    9f78:	42000204 	addi	r8,r8,8
    9f7c:	9480010c 	andi	r18,r18,4
    9f80:	90003226 	beq	r18,zero,a04c <___svfprintf_internal_r+0xa20>
    9f84:	d9403117 	ldw	r5,196(sp)
    9f88:	d8802a17 	ldw	r2,168(sp)
    9f8c:	28a1c83a 	sub	r16,r5,r2
    9f90:	04002e0e 	bge	zero,r16,a04c <___svfprintf_internal_r+0xa20>
    9f94:	04400404 	movi	r17,16
    9f98:	d8801f17 	ldw	r2,124(sp)
    9f9c:	8c04b90e 	bge	r17,r16,b284 <___svfprintf_internal_r+0x1c58>
    9fa0:	01420034 	movhi	r5,2048
    9fa4:	2940e384 	addi	r5,r5,910
    9fa8:	d9403515 	stw	r5,212(sp)
    9fac:	048001c4 	movi	r18,7
    9fb0:	dd002c17 	ldw	r20,176(sp)
    9fb4:	00000306 	br	9fc4 <___svfprintf_internal_r+0x998>
    9fb8:	843ffc04 	addi	r16,r16,-16
    9fbc:	42000204 	addi	r8,r8,8
    9fc0:	8c00130e 	bge	r17,r16,a010 <___svfprintf_internal_r+0x9e4>
    9fc4:	01020034 	movhi	r4,2048
    9fc8:	18c00404 	addi	r3,r3,16
    9fcc:	10800044 	addi	r2,r2,1
    9fd0:	2100e384 	addi	r4,r4,910
    9fd4:	41000015 	stw	r4,0(r8)
    9fd8:	44400115 	stw	r17,4(r8)
    9fdc:	d8c02015 	stw	r3,128(sp)
    9fe0:	d8801f15 	stw	r2,124(sp)
    9fe4:	90bff40e 	bge	r18,r2,9fb8 <__alt_data_end+0xf0009fb8>
    9fe8:	d9801e04 	addi	r6,sp,120
    9fec:	a00b883a 	mov	r5,r20
    9ff0:	9809883a 	mov	r4,r19
    9ff4:	0012a940 	call	12a94 <__ssprint_r>
    9ff8:	103e711e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    9ffc:	843ffc04 	addi	r16,r16,-16
    a000:	d8c02017 	ldw	r3,128(sp)
    a004:	d8801f17 	ldw	r2,124(sp)
    a008:	da000404 	addi	r8,sp,16
    a00c:	8c3fed16 	blt	r17,r16,9fc4 <__alt_data_end+0xf0009fc4>
    a010:	d9403517 	ldw	r5,212(sp)
    a014:	1c07883a 	add	r3,r3,r16
    a018:	10800044 	addi	r2,r2,1
    a01c:	41400015 	stw	r5,0(r8)
    a020:	44000115 	stw	r16,4(r8)
    a024:	d8c02015 	stw	r3,128(sp)
    a028:	d8801f15 	stw	r2,124(sp)
    a02c:	010001c4 	movi	r4,7
    a030:	2080060e 	bge	r4,r2,a04c <___svfprintf_internal_r+0xa20>
    a034:	d9402c17 	ldw	r5,176(sp)
    a038:	d9801e04 	addi	r6,sp,120
    a03c:	9809883a 	mov	r4,r19
    a040:	0012a940 	call	12a94 <__ssprint_r>
    a044:	103e5e1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a048:	d8c02017 	ldw	r3,128(sp)
    a04c:	d8803117 	ldw	r2,196(sp)
    a050:	d9002a17 	ldw	r4,168(sp)
    a054:	1100010e 	bge	r2,r4,a05c <___svfprintf_internal_r+0xa30>
    a058:	2005883a 	mov	r2,r4
    a05c:	d9402f17 	ldw	r5,188(sp)
    a060:	288b883a 	add	r5,r5,r2
    a064:	d9402f15 	stw	r5,188(sp)
    a068:	18019c1e 	bne	r3,zero,a6dc <___svfprintf_internal_r+0x10b0>
    a06c:	b8800007 	ldb	r2,0(r23)
    a070:	d8001f15 	stw	zero,124(sp)
    a074:	da000404 	addi	r8,sp,16
    a078:	103d991e 	bne	r2,zero,96e0 <__alt_data_end+0xf00096e0>
    a07c:	b821883a 	mov	r16,r23
    a080:	003daf06 	br	9740 <__alt_data_end+0xf0009740>
    a084:	18c03fcc 	andi	r3,r3,255
    a088:	1805c71e 	bne	r3,zero,b7a8 <___svfprintf_internal_r+0x217c>
    a08c:	94800414 	ori	r18,r18,16
    a090:	9080080c 	andi	r2,r18,32
    a094:	10020126 	beq	r2,zero,a89c <___svfprintf_internal_r+0x1270>
    a098:	d8802d17 	ldw	r2,180(sp)
    a09c:	d9002917 	ldw	r4,164(sp)
    a0a0:	d8002785 	stb	zero,158(sp)
    a0a4:	10c00204 	addi	r3,r2,8
    a0a8:	15000017 	ldw	r20,0(r2)
    a0ac:	15800117 	ldw	r22,4(r2)
    a0b0:	20038e16 	blt	r4,zero,aeec <___svfprintf_internal_r+0x18c0>
    a0b4:	013fdfc4 	movi	r4,-129
    a0b8:	a584b03a 	or	r2,r20,r22
    a0bc:	d8c02d15 	stw	r3,180(sp)
    a0c0:	9124703a 	and	r18,r18,r4
    a0c4:	0039883a 	mov	fp,zero
    a0c8:	103eb61e 	bne	r2,zero,9ba4 <__alt_data_end+0xf0009ba4>
    a0cc:	d8802917 	ldw	r2,164(sp)
    a0d0:	1002c81e 	bne	r2,zero,abf4 <___svfprintf_internal_r+0x15c8>
    a0d4:	d8002915 	stw	zero,164(sp)
    a0d8:	d8002e15 	stw	zero,184(sp)
    a0dc:	dc001e04 	addi	r16,sp,120
    a0e0:	003efa06 	br	9ccc <__alt_data_end+0xf0009ccc>
    a0e4:	18c03fcc 	andi	r3,r3,255
    a0e8:	1805ad1e 	bne	r3,zero,b7a0 <___svfprintf_internal_r+0x2174>
    a0ec:	01420034 	movhi	r5,2048
    a0f0:	2940d304 	addi	r5,r5,844
    a0f4:	d9403a15 	stw	r5,232(sp)
    a0f8:	9080080c 	andi	r2,r18,32
    a0fc:	10006126 	beq	r2,zero,a284 <___svfprintf_internal_r+0xc58>
    a100:	d8802d17 	ldw	r2,180(sp)
    a104:	15000017 	ldw	r20,0(r2)
    a108:	15800117 	ldw	r22,4(r2)
    a10c:	10800204 	addi	r2,r2,8
    a110:	d8802d15 	stw	r2,180(sp)
    a114:	9080004c 	andi	r2,r18,1
    a118:	10018e26 	beq	r2,zero,a754 <___svfprintf_internal_r+0x1128>
    a11c:	a584b03a 	or	r2,r20,r22
    a120:	10030926 	beq	r2,zero,ad48 <___svfprintf_internal_r+0x171c>
    a124:	d8c02917 	ldw	r3,164(sp)
    a128:	00800c04 	movi	r2,48
    a12c:	d8802705 	stb	r2,156(sp)
    a130:	dc402745 	stb	r17,157(sp)
    a134:	d8002785 	stb	zero,158(sp)
    a138:	90800094 	ori	r2,r18,2
    a13c:	18048716 	blt	r3,zero,b35c <___svfprintf_internal_r+0x1d30>
    a140:	00bfdfc4 	movi	r2,-129
    a144:	90a4703a 	and	r18,r18,r2
    a148:	94800094 	ori	r18,r18,2
    a14c:	0039883a 	mov	fp,zero
    a150:	d9003a17 	ldw	r4,232(sp)
    a154:	dc001e04 	addi	r16,sp,120
    a158:	a08003cc 	andi	r2,r20,15
    a15c:	b006973a 	slli	r3,r22,28
    a160:	2085883a 	add	r2,r4,r2
    a164:	a028d13a 	srli	r20,r20,4
    a168:	10800003 	ldbu	r2,0(r2)
    a16c:	b02cd13a 	srli	r22,r22,4
    a170:	843fffc4 	addi	r16,r16,-1
    a174:	1d28b03a 	or	r20,r3,r20
    a178:	80800005 	stb	r2,0(r16)
    a17c:	a584b03a 	or	r2,r20,r22
    a180:	103ff51e 	bne	r2,zero,a158 <__alt_data_end+0xf000a158>
    a184:	d8c02817 	ldw	r3,160(sp)
    a188:	1c07c83a 	sub	r3,r3,r16
    a18c:	d8c02e15 	stw	r3,184(sp)
    a190:	003ece06 	br	9ccc <__alt_data_end+0xf0009ccc>
    a194:	d8c02d17 	ldw	r3,180(sp)
    a198:	d9002d17 	ldw	r4,180(sp)
    a19c:	d8002785 	stb	zero,158(sp)
    a1a0:	18800017 	ldw	r2,0(r3)
    a1a4:	21000104 	addi	r4,r4,4
    a1a8:	00c00044 	movi	r3,1
    a1ac:	d8c02a15 	stw	r3,168(sp)
    a1b0:	d8801405 	stb	r2,80(sp)
    a1b4:	d9002d15 	stw	r4,180(sp)
    a1b8:	d8c02e15 	stw	r3,184(sp)
    a1bc:	d8002915 	stw	zero,164(sp)
    a1c0:	d8003215 	stw	zero,200(sp)
    a1c4:	dc001404 	addi	r16,sp,80
    a1c8:	0039883a 	mov	fp,zero
    a1cc:	003ecc06 	br	9d00 <__alt_data_end+0xf0009d00>
    a1d0:	18c03fcc 	andi	r3,r3,255
    a1d4:	183e9226 	beq	r3,zero,9c20 <__alt_data_end+0xf0009c20>
    a1d8:	d9c02785 	stb	r7,158(sp)
    a1dc:	003e9006 	br	9c20 <__alt_data_end+0xf0009c20>
    a1e0:	00c00044 	movi	r3,1
    a1e4:	01c00ac4 	movi	r7,43
    a1e8:	bc400007 	ldb	r17,0(r23)
    a1ec:	003d6306 	br	977c <__alt_data_end+0xf000977c>
    a1f0:	94800814 	ori	r18,r18,32
    a1f4:	bc400007 	ldb	r17,0(r23)
    a1f8:	003d6006 	br	977c <__alt_data_end+0xf000977c>
    a1fc:	d8c02d17 	ldw	r3,180(sp)
    a200:	d8002785 	stb	zero,158(sp)
    a204:	1c000017 	ldw	r16,0(r3)
    a208:	1d000104 	addi	r20,r3,4
    a20c:	80040f26 	beq	r16,zero,b24c <___svfprintf_internal_r+0x1c20>
    a210:	d9002917 	ldw	r4,164(sp)
    a214:	2003dc16 	blt	r4,zero,b188 <___svfprintf_internal_r+0x1b5c>
    a218:	200d883a 	mov	r6,r4
    a21c:	000b883a 	mov	r5,zero
    a220:	8009883a 	mov	r4,r16
    a224:	da003e15 	stw	r8,248(sp)
    a228:	00110140 	call	11014 <memchr>
    a22c:	da003e17 	ldw	r8,248(sp)
    a230:	10045826 	beq	r2,zero,b394 <___svfprintf_internal_r+0x1d68>
    a234:	1405c83a 	sub	r2,r2,r16
    a238:	d8802e15 	stw	r2,184(sp)
    a23c:	1003d816 	blt	r2,zero,b1a0 <___svfprintf_internal_r+0x1b74>
    a240:	df002783 	ldbu	fp,158(sp)
    a244:	d8802a15 	stw	r2,168(sp)
    a248:	dd002d15 	stw	r20,180(sp)
    a24c:	d8002915 	stw	zero,164(sp)
    a250:	d8003215 	stw	zero,200(sp)
    a254:	003ea306 	br	9ce4 <__alt_data_end+0xf0009ce4>
    a258:	18c03fcc 	andi	r3,r3,255
    a25c:	183f8c26 	beq	r3,zero,a090 <__alt_data_end+0xf000a090>
    a260:	d9c02785 	stb	r7,158(sp)
    a264:	003f8a06 	br	a090 <__alt_data_end+0xf000a090>
    a268:	18c03fcc 	andi	r3,r3,255
    a26c:	1805631e 	bne	r3,zero,b7fc <___svfprintf_internal_r+0x21d0>
    a270:	01420034 	movhi	r5,2048
    a274:	2940d804 	addi	r5,r5,864
    a278:	d9403a15 	stw	r5,232(sp)
    a27c:	9080080c 	andi	r2,r18,32
    a280:	103f9f1e 	bne	r2,zero,a100 <__alt_data_end+0xf000a100>
    a284:	9080040c 	andi	r2,r18,16
    a288:	10029c26 	beq	r2,zero,acfc <___svfprintf_internal_r+0x16d0>
    a28c:	d8c02d17 	ldw	r3,180(sp)
    a290:	002d883a 	mov	r22,zero
    a294:	1d000017 	ldw	r20,0(r3)
    a298:	18c00104 	addi	r3,r3,4
    a29c:	d8c02d15 	stw	r3,180(sp)
    a2a0:	003f9c06 	br	a114 <__alt_data_end+0xf000a114>
    a2a4:	94800054 	ori	r18,r18,1
    a2a8:	bc400007 	ldb	r17,0(r23)
    a2ac:	003d3306 	br	977c <__alt_data_end+0xf000977c>
    a2b0:	38803fcc 	andi	r2,r7,255
    a2b4:	1080201c 	xori	r2,r2,128
    a2b8:	10bfe004 	addi	r2,r2,-128
    a2bc:	1002971e 	bne	r2,zero,ad1c <___svfprintf_internal_r+0x16f0>
    a2c0:	00c00044 	movi	r3,1
    a2c4:	01c00804 	movi	r7,32
    a2c8:	bc400007 	ldb	r17,0(r23)
    a2cc:	003d2b06 	br	977c <__alt_data_end+0xf000977c>
    a2d0:	18c03fcc 	andi	r3,r3,255
    a2d4:	183e2326 	beq	r3,zero,9b64 <__alt_data_end+0xf0009b64>
    a2d8:	d9c02785 	stb	r7,158(sp)
    a2dc:	003e2106 	br	9b64 <__alt_data_end+0xf0009b64>
    a2e0:	bc400007 	ldb	r17,0(r23)
    a2e4:	8a430426 	beq	r17,r9,aef8 <___svfprintf_internal_r+0x18cc>
    a2e8:	94800414 	ori	r18,r18,16
    a2ec:	003d2306 	br	977c <__alt_data_end+0xf000977c>
    a2f0:	18c03fcc 	andi	r3,r3,255
    a2f4:	18053f1e 	bne	r3,zero,b7f4 <___svfprintf_internal_r+0x21c8>
    a2f8:	9080080c 	andi	r2,r18,32
    a2fc:	10028926 	beq	r2,zero,ad24 <___svfprintf_internal_r+0x16f8>
    a300:	d9402d17 	ldw	r5,180(sp)
    a304:	d9002f17 	ldw	r4,188(sp)
    a308:	28800017 	ldw	r2,0(r5)
    a30c:	2007d7fa 	srai	r3,r4,31
    a310:	29400104 	addi	r5,r5,4
    a314:	d9402d15 	stw	r5,180(sp)
    a318:	11000015 	stw	r4,0(r2)
    a31c:	10c00115 	stw	r3,4(r2)
    a320:	003ced06 	br	96d8 <__alt_data_end+0xf00096d8>
    a324:	94801014 	ori	r18,r18,64
    a328:	bc400007 	ldb	r17,0(r23)
    a32c:	003d1306 	br	977c <__alt_data_end+0xf000977c>
    a330:	01020034 	movhi	r4,2048
    a334:	2100d804 	addi	r4,r4,864
    a338:	0039883a 	mov	fp,zero
    a33c:	d9003a15 	stw	r4,232(sp)
    a340:	04401e04 	movi	r17,120
    a344:	003f8206 	br	a150 <__alt_data_end+0xf000a150>
    a348:	18c03fcc 	andi	r3,r3,255
    a34c:	1805221e 	bne	r3,zero,b7d8 <___svfprintf_internal_r+0x21ac>
    a350:	883d9526 	beq	r17,zero,99a8 <__alt_data_end+0xf00099a8>
    a354:	00c00044 	movi	r3,1
    a358:	d8c02a15 	stw	r3,168(sp)
    a35c:	dc401405 	stb	r17,80(sp)
    a360:	d8002785 	stb	zero,158(sp)
    a364:	003f9406 	br	a1b8 <__alt_data_end+0xf000a1b8>
    a368:	01020034 	movhi	r4,2048
    a36c:	2100d804 	addi	r4,r4,864
    a370:	d9003a15 	stw	r4,232(sp)
    a374:	d8c02d15 	stw	r3,180(sp)
    a378:	1025883a 	mov	r18,r2
    a37c:	04401e04 	movi	r17,120
    a380:	a584b03a 	or	r2,r20,r22
    a384:	1000fa1e 	bne	r2,zero,a770 <___svfprintf_internal_r+0x1144>
    a388:	0039883a 	mov	fp,zero
    a38c:	00800084 	movi	r2,2
    a390:	10803fcc 	andi	r2,r2,255
    a394:	00c00044 	movi	r3,1
    a398:	10c21626 	beq	r2,r3,abf4 <___svfprintf_internal_r+0x15c8>
    a39c:	00c00084 	movi	r3,2
    a3a0:	10fe301e 	bne	r2,r3,9c64 <__alt_data_end+0xf0009c64>
    a3a4:	003d7606 	br	9980 <__alt_data_end+0xf0009980>
    a3a8:	d8c02017 	ldw	r3,128(sp)
    a3ac:	003e9506 	br	9e04 <__alt_data_end+0xf0009e04>
    a3b0:	00801944 	movi	r2,101
    a3b4:	14407c0e 	bge	r2,r17,a5a8 <___svfprintf_internal_r+0xf7c>
    a3b8:	d9003617 	ldw	r4,216(sp)
    a3bc:	d9403717 	ldw	r5,220(sp)
    a3c0:	000d883a 	mov	r6,zero
    a3c4:	000f883a 	mov	r7,zero
    a3c8:	d8c03d15 	stw	r3,244(sp)
    a3cc:	da003e15 	stw	r8,248(sp)
    a3d0:	00171780 	call	17178 <__eqdf2>
    a3d4:	d8c03d17 	ldw	r3,244(sp)
    a3d8:	da003e17 	ldw	r8,248(sp)
    a3dc:	1000f51e 	bne	r2,zero,a7b4 <___svfprintf_internal_r+0x1188>
    a3e0:	d8801f17 	ldw	r2,124(sp)
    a3e4:	01020034 	movhi	r4,2048
    a3e8:	2100df04 	addi	r4,r4,892
    a3ec:	18c00044 	addi	r3,r3,1
    a3f0:	10800044 	addi	r2,r2,1
    a3f4:	41000015 	stw	r4,0(r8)
    a3f8:	01000044 	movi	r4,1
    a3fc:	41000115 	stw	r4,4(r8)
    a400:	d8c02015 	stw	r3,128(sp)
    a404:	d8801f15 	stw	r2,124(sp)
    a408:	010001c4 	movi	r4,7
    a40c:	20826616 	blt	r4,r2,ada8 <___svfprintf_internal_r+0x177c>
    a410:	42000204 	addi	r8,r8,8
    a414:	d8802617 	ldw	r2,152(sp)
    a418:	d9403317 	ldw	r5,204(sp)
    a41c:	11400216 	blt	r2,r5,a428 <___svfprintf_internal_r+0xdfc>
    a420:	9080004c 	andi	r2,r18,1
    a424:	103ed526 	beq	r2,zero,9f7c <__alt_data_end+0xf0009f7c>
    a428:	d8803817 	ldw	r2,224(sp)
    a42c:	d9003417 	ldw	r4,208(sp)
    a430:	d9403817 	ldw	r5,224(sp)
    a434:	1887883a 	add	r3,r3,r2
    a438:	d8801f17 	ldw	r2,124(sp)
    a43c:	41000015 	stw	r4,0(r8)
    a440:	41400115 	stw	r5,4(r8)
    a444:	10800044 	addi	r2,r2,1
    a448:	d8c02015 	stw	r3,128(sp)
    a44c:	d8801f15 	stw	r2,124(sp)
    a450:	010001c4 	movi	r4,7
    a454:	2082af16 	blt	r4,r2,af14 <___svfprintf_internal_r+0x18e8>
    a458:	42000204 	addi	r8,r8,8
    a45c:	d8803317 	ldw	r2,204(sp)
    a460:	143fffc4 	addi	r16,r2,-1
    a464:	043ec50e 	bge	zero,r16,9f7c <__alt_data_end+0xf0009f7c>
    a468:	04400404 	movi	r17,16
    a46c:	d8801f17 	ldw	r2,124(sp)
    a470:	8c00860e 	bge	r17,r16,a68c <___svfprintf_internal_r+0x1060>
    a474:	01420034 	movhi	r5,2048
    a478:	2940df84 	addi	r5,r5,894
    a47c:	d9402b15 	stw	r5,172(sp)
    a480:	058001c4 	movi	r22,7
    a484:	dd002c17 	ldw	r20,176(sp)
    a488:	00000306 	br	a498 <___svfprintf_internal_r+0xe6c>
    a48c:	42000204 	addi	r8,r8,8
    a490:	843ffc04 	addi	r16,r16,-16
    a494:	8c00800e 	bge	r17,r16,a698 <___svfprintf_internal_r+0x106c>
    a498:	18c00404 	addi	r3,r3,16
    a49c:	10800044 	addi	r2,r2,1
    a4a0:	45400015 	stw	r21,0(r8)
    a4a4:	44400115 	stw	r17,4(r8)
    a4a8:	d8c02015 	stw	r3,128(sp)
    a4ac:	d8801f15 	stw	r2,124(sp)
    a4b0:	b0bff60e 	bge	r22,r2,a48c <__alt_data_end+0xf000a48c>
    a4b4:	d9801e04 	addi	r6,sp,120
    a4b8:	a00b883a 	mov	r5,r20
    a4bc:	9809883a 	mov	r4,r19
    a4c0:	0012a940 	call	12a94 <__ssprint_r>
    a4c4:	103d3e1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a4c8:	d8c02017 	ldw	r3,128(sp)
    a4cc:	d8801f17 	ldw	r2,124(sp)
    a4d0:	da000404 	addi	r8,sp,16
    a4d4:	003fee06 	br	a490 <__alt_data_end+0xf000a490>
    a4d8:	d9403117 	ldw	r5,196(sp)
    a4dc:	d8802a17 	ldw	r2,168(sp)
    a4e0:	28adc83a 	sub	r22,r5,r2
    a4e4:	05be650e 	bge	zero,r22,9e7c <__alt_data_end+0xf0009e7c>
    a4e8:	07000404 	movi	fp,16
    a4ec:	d8801f17 	ldw	r2,124(sp)
    a4f0:	e583a20e 	bge	fp,r22,b37c <___svfprintf_internal_r+0x1d50>
    a4f4:	01420034 	movhi	r5,2048
    a4f8:	2940df84 	addi	r5,r5,894
    a4fc:	dc403015 	stw	r17,192(sp)
    a500:	d9402b15 	stw	r5,172(sp)
    a504:	b023883a 	mov	r17,r22
    a508:	050001c4 	movi	r20,7
    a50c:	902d883a 	mov	r22,r18
    a510:	8025883a 	mov	r18,r16
    a514:	dc002c17 	ldw	r16,176(sp)
    a518:	00000306 	br	a528 <___svfprintf_internal_r+0xefc>
    a51c:	8c7ffc04 	addi	r17,r17,-16
    a520:	42000204 	addi	r8,r8,8
    a524:	e440110e 	bge	fp,r17,a56c <___svfprintf_internal_r+0xf40>
    a528:	18c00404 	addi	r3,r3,16
    a52c:	10800044 	addi	r2,r2,1
    a530:	45400015 	stw	r21,0(r8)
    a534:	47000115 	stw	fp,4(r8)
    a538:	d8c02015 	stw	r3,128(sp)
    a53c:	d8801f15 	stw	r2,124(sp)
    a540:	a0bff60e 	bge	r20,r2,a51c <__alt_data_end+0xf000a51c>
    a544:	d9801e04 	addi	r6,sp,120
    a548:	800b883a 	mov	r5,r16
    a54c:	9809883a 	mov	r4,r19
    a550:	0012a940 	call	12a94 <__ssprint_r>
    a554:	103d1a1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a558:	8c7ffc04 	addi	r17,r17,-16
    a55c:	d8c02017 	ldw	r3,128(sp)
    a560:	d8801f17 	ldw	r2,124(sp)
    a564:	da000404 	addi	r8,sp,16
    a568:	e47fef16 	blt	fp,r17,a528 <__alt_data_end+0xf000a528>
    a56c:	9021883a 	mov	r16,r18
    a570:	b025883a 	mov	r18,r22
    a574:	882d883a 	mov	r22,r17
    a578:	dc403017 	ldw	r17,192(sp)
    a57c:	d9002b17 	ldw	r4,172(sp)
    a580:	1d87883a 	add	r3,r3,r22
    a584:	10800044 	addi	r2,r2,1
    a588:	41000015 	stw	r4,0(r8)
    a58c:	45800115 	stw	r22,4(r8)
    a590:	d8c02015 	stw	r3,128(sp)
    a594:	d8801f15 	stw	r2,124(sp)
    a598:	010001c4 	movi	r4,7
    a59c:	20819a16 	blt	r4,r2,ac08 <___svfprintf_internal_r+0x15dc>
    a5a0:	42000204 	addi	r8,r8,8
    a5a4:	003e3506 	br	9e7c <__alt_data_end+0xf0009e7c>
    a5a8:	d9403317 	ldw	r5,204(sp)
    a5ac:	00800044 	movi	r2,1
    a5b0:	18c00044 	addi	r3,r3,1
    a5b4:	1141710e 	bge	r2,r5,ab7c <___svfprintf_internal_r+0x1550>
    a5b8:	dc401f17 	ldw	r17,124(sp)
    a5bc:	00800044 	movi	r2,1
    a5c0:	40800115 	stw	r2,4(r8)
    a5c4:	8c400044 	addi	r17,r17,1
    a5c8:	44000015 	stw	r16,0(r8)
    a5cc:	d8c02015 	stw	r3,128(sp)
    a5d0:	dc401f15 	stw	r17,124(sp)
    a5d4:	008001c4 	movi	r2,7
    a5d8:	14417416 	blt	r2,r17,abac <___svfprintf_internal_r+0x1580>
    a5dc:	42000204 	addi	r8,r8,8
    a5e0:	d8803817 	ldw	r2,224(sp)
    a5e4:	d9003417 	ldw	r4,208(sp)
    a5e8:	8c400044 	addi	r17,r17,1
    a5ec:	10c7883a 	add	r3,r2,r3
    a5f0:	40800115 	stw	r2,4(r8)
    a5f4:	41000015 	stw	r4,0(r8)
    a5f8:	d8c02015 	stw	r3,128(sp)
    a5fc:	dc401f15 	stw	r17,124(sp)
    a600:	008001c4 	movi	r2,7
    a604:	14417216 	blt	r2,r17,abd0 <___svfprintf_internal_r+0x15a4>
    a608:	45800204 	addi	r22,r8,8
    a60c:	d9003617 	ldw	r4,216(sp)
    a610:	d9403717 	ldw	r5,220(sp)
    a614:	000d883a 	mov	r6,zero
    a618:	000f883a 	mov	r7,zero
    a61c:	d8c03d15 	stw	r3,244(sp)
    a620:	00171780 	call	17178 <__eqdf2>
    a624:	d8c03d17 	ldw	r3,244(sp)
    a628:	1000b326 	beq	r2,zero,a8f8 <___svfprintf_internal_r+0x12cc>
    a62c:	d9403317 	ldw	r5,204(sp)
    a630:	84000044 	addi	r16,r16,1
    a634:	8c400044 	addi	r17,r17,1
    a638:	28bfffc4 	addi	r2,r5,-1
    a63c:	1887883a 	add	r3,r3,r2
    a640:	b0800115 	stw	r2,4(r22)
    a644:	b4000015 	stw	r16,0(r22)
    a648:	d8c02015 	stw	r3,128(sp)
    a64c:	dc401f15 	stw	r17,124(sp)
    a650:	008001c4 	movi	r2,7
    a654:	1440d216 	blt	r2,r17,a9a0 <___svfprintf_internal_r+0x1374>
    a658:	b5800204 	addi	r22,r22,8
    a65c:	d9003b17 	ldw	r4,236(sp)
    a660:	df0022c4 	addi	fp,sp,139
    a664:	8c400044 	addi	r17,r17,1
    a668:	20c7883a 	add	r3,r4,r3
    a66c:	b7000015 	stw	fp,0(r22)
    a670:	b1000115 	stw	r4,4(r22)
    a674:	d8c02015 	stw	r3,128(sp)
    a678:	dc401f15 	stw	r17,124(sp)
    a67c:	008001c4 	movi	r2,7
    a680:	14400e16 	blt	r2,r17,a6bc <___svfprintf_internal_r+0x1090>
    a684:	b2000204 	addi	r8,r22,8
    a688:	003e3c06 	br	9f7c <__alt_data_end+0xf0009f7c>
    a68c:	01020034 	movhi	r4,2048
    a690:	2100df84 	addi	r4,r4,894
    a694:	d9002b15 	stw	r4,172(sp)
    a698:	d9002b17 	ldw	r4,172(sp)
    a69c:	1c07883a 	add	r3,r3,r16
    a6a0:	44000115 	stw	r16,4(r8)
    a6a4:	41000015 	stw	r4,0(r8)
    a6a8:	10800044 	addi	r2,r2,1
    a6ac:	d8c02015 	stw	r3,128(sp)
    a6b0:	d8801f15 	stw	r2,124(sp)
    a6b4:	010001c4 	movi	r4,7
    a6b8:	20be2f0e 	bge	r4,r2,9f78 <__alt_data_end+0xf0009f78>
    a6bc:	d9402c17 	ldw	r5,176(sp)
    a6c0:	d9801e04 	addi	r6,sp,120
    a6c4:	9809883a 	mov	r4,r19
    a6c8:	0012a940 	call	12a94 <__ssprint_r>
    a6cc:	103cbc1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a6d0:	d8c02017 	ldw	r3,128(sp)
    a6d4:	da000404 	addi	r8,sp,16
    a6d8:	003e2806 	br	9f7c <__alt_data_end+0xf0009f7c>
    a6dc:	d9402c17 	ldw	r5,176(sp)
    a6e0:	d9801e04 	addi	r6,sp,120
    a6e4:	9809883a 	mov	r4,r19
    a6e8:	0012a940 	call	12a94 <__ssprint_r>
    a6ec:	103e5f26 	beq	r2,zero,a06c <__alt_data_end+0xf000a06c>
    a6f0:	003cb306 	br	99c0 <__alt_data_end+0xf00099c0>
    a6f4:	d9402c17 	ldw	r5,176(sp)
    a6f8:	d9801e04 	addi	r6,sp,120
    a6fc:	9809883a 	mov	r4,r19
    a700:	0012a940 	call	12a94 <__ssprint_r>
    a704:	103cae1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a708:	d8c02017 	ldw	r3,128(sp)
    a70c:	da000404 	addi	r8,sp,16
    a710:	003e0d06 	br	9f48 <__alt_data_end+0xf0009f48>
    a714:	d9402c17 	ldw	r5,176(sp)
    a718:	d9801e04 	addi	r6,sp,120
    a71c:	9809883a 	mov	r4,r19
    a720:	0012a940 	call	12a94 <__ssprint_r>
    a724:	103ca61e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a728:	d8c02017 	ldw	r3,128(sp)
    a72c:	da000404 	addi	r8,sp,16
    a730:	003dc106 	br	9e38 <__alt_data_end+0xf0009e38>
    a734:	d9402c17 	ldw	r5,176(sp)
    a738:	d9801e04 	addi	r6,sp,120
    a73c:	9809883a 	mov	r4,r19
    a740:	0012a940 	call	12a94 <__ssprint_r>
    a744:	103c9e1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a748:	d8c02017 	ldw	r3,128(sp)
    a74c:	da000404 	addi	r8,sp,16
    a750:	003dc706 	br	9e70 <__alt_data_end+0xf0009e70>
    a754:	d8802917 	ldw	r2,164(sp)
    a758:	d8002785 	stb	zero,158(sp)
    a75c:	103f0816 	blt	r2,zero,a380 <__alt_data_end+0xf000a380>
    a760:	00ffdfc4 	movi	r3,-129
    a764:	a584b03a 	or	r2,r20,r22
    a768:	90e4703a 	and	r18,r18,r3
    a76c:	103c8126 	beq	r2,zero,9974 <__alt_data_end+0xf0009974>
    a770:	0039883a 	mov	fp,zero
    a774:	003e7606 	br	a150 <__alt_data_end+0xf000a150>
    a778:	9080040c 	andi	r2,r18,16
    a77c:	10013d26 	beq	r2,zero,ac74 <___svfprintf_internal_r+0x1648>
    a780:	d9002d17 	ldw	r4,180(sp)
    a784:	d9402917 	ldw	r5,164(sp)
    a788:	d8002785 	stb	zero,158(sp)
    a78c:	20800104 	addi	r2,r4,4
    a790:	25000017 	ldw	r20,0(r4)
    a794:	002d883a 	mov	r22,zero
    a798:	28013f16 	blt	r5,zero,ac98 <___svfprintf_internal_r+0x166c>
    a79c:	00ffdfc4 	movi	r3,-129
    a7a0:	d8802d15 	stw	r2,180(sp)
    a7a4:	90e4703a 	and	r18,r18,r3
    a7a8:	a03d2b26 	beq	r20,zero,9c58 <__alt_data_end+0xf0009c58>
    a7ac:	0039883a 	mov	fp,zero
    a7b0:	003d2e06 	br	9c6c <__alt_data_end+0xf0009c6c>
    a7b4:	dc402617 	ldw	r17,152(sp)
    a7b8:	0441830e 	bge	zero,r17,adc8 <___svfprintf_internal_r+0x179c>
    a7bc:	dc403217 	ldw	r17,200(sp)
    a7c0:	d8803317 	ldw	r2,204(sp)
    a7c4:	1440010e 	bge	r2,r17,a7cc <___svfprintf_internal_r+0x11a0>
    a7c8:	1023883a 	mov	r17,r2
    a7cc:	04400a0e 	bge	zero,r17,a7f8 <___svfprintf_internal_r+0x11cc>
    a7d0:	d8801f17 	ldw	r2,124(sp)
    a7d4:	1c47883a 	add	r3,r3,r17
    a7d8:	44000015 	stw	r16,0(r8)
    a7dc:	10800044 	addi	r2,r2,1
    a7e0:	44400115 	stw	r17,4(r8)
    a7e4:	d8c02015 	stw	r3,128(sp)
    a7e8:	d8801f15 	stw	r2,124(sp)
    a7ec:	010001c4 	movi	r4,7
    a7f0:	20827516 	blt	r4,r2,b1c8 <___svfprintf_internal_r+0x1b9c>
    a7f4:	42000204 	addi	r8,r8,8
    a7f8:	88027b16 	blt	r17,zero,b1e8 <___svfprintf_internal_r+0x1bbc>
    a7fc:	d9003217 	ldw	r4,200(sp)
    a800:	2463c83a 	sub	r17,r4,r17
    a804:	0440990e 	bge	zero,r17,aa6c <___svfprintf_internal_r+0x1440>
    a808:	05800404 	movi	r22,16
    a80c:	d8801f17 	ldw	r2,124(sp)
    a810:	b441530e 	bge	r22,r17,ad60 <___svfprintf_internal_r+0x1734>
    a814:	01020034 	movhi	r4,2048
    a818:	2100df84 	addi	r4,r4,894
    a81c:	d9002b15 	stw	r4,172(sp)
    a820:	070001c4 	movi	fp,7
    a824:	dd002c17 	ldw	r20,176(sp)
    a828:	00000306 	br	a838 <___svfprintf_internal_r+0x120c>
    a82c:	42000204 	addi	r8,r8,8
    a830:	8c7ffc04 	addi	r17,r17,-16
    a834:	b4414d0e 	bge	r22,r17,ad6c <___svfprintf_internal_r+0x1740>
    a838:	18c00404 	addi	r3,r3,16
    a83c:	10800044 	addi	r2,r2,1
    a840:	45400015 	stw	r21,0(r8)
    a844:	45800115 	stw	r22,4(r8)
    a848:	d8c02015 	stw	r3,128(sp)
    a84c:	d8801f15 	stw	r2,124(sp)
    a850:	e0bff60e 	bge	fp,r2,a82c <__alt_data_end+0xf000a82c>
    a854:	d9801e04 	addi	r6,sp,120
    a858:	a00b883a 	mov	r5,r20
    a85c:	9809883a 	mov	r4,r19
    a860:	0012a940 	call	12a94 <__ssprint_r>
    a864:	103c561e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a868:	d8c02017 	ldw	r3,128(sp)
    a86c:	d8801f17 	ldw	r2,124(sp)
    a870:	da000404 	addi	r8,sp,16
    a874:	003fee06 	br	a830 <__alt_data_end+0xf000a830>
    a878:	d9402c17 	ldw	r5,176(sp)
    a87c:	d9801e04 	addi	r6,sp,120
    a880:	9809883a 	mov	r4,r19
    a884:	0012a940 	call	12a94 <__ssprint_r>
    a888:	103c4d1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a88c:	d8c02017 	ldw	r3,128(sp)
    a890:	df002787 	ldb	fp,158(sp)
    a894:	da000404 	addi	r8,sp,16
    a898:	003d5a06 	br	9e04 <__alt_data_end+0xf0009e04>
    a89c:	9080040c 	andi	r2,r18,16
    a8a0:	10005c26 	beq	r2,zero,aa14 <___svfprintf_internal_r+0x13e8>
    a8a4:	d9402d17 	ldw	r5,180(sp)
    a8a8:	d8c02917 	ldw	r3,164(sp)
    a8ac:	d8002785 	stb	zero,158(sp)
    a8b0:	28800104 	addi	r2,r5,4
    a8b4:	2d000017 	ldw	r20,0(r5)
    a8b8:	002d883a 	mov	r22,zero
    a8bc:	18005e16 	blt	r3,zero,aa38 <___svfprintf_internal_r+0x140c>
    a8c0:	00ffdfc4 	movi	r3,-129
    a8c4:	d8802d15 	stw	r2,180(sp)
    a8c8:	90e4703a 	and	r18,r18,r3
    a8cc:	0039883a 	mov	fp,zero
    a8d0:	a03dfe26 	beq	r20,zero,a0cc <__alt_data_end+0xf000a0cc>
    a8d4:	00800244 	movi	r2,9
    a8d8:	153cb336 	bltu	r2,r20,9ba8 <__alt_data_end+0xf0009ba8>
    a8dc:	a5000c04 	addi	r20,r20,48
    a8e0:	dc001dc4 	addi	r16,sp,119
    a8e4:	dd001dc5 	stb	r20,119(sp)
    a8e8:	d8c02817 	ldw	r3,160(sp)
    a8ec:	1c07c83a 	sub	r3,r3,r16
    a8f0:	d8c02e15 	stw	r3,184(sp)
    a8f4:	003cf506 	br	9ccc <__alt_data_end+0xf0009ccc>
    a8f8:	d8803317 	ldw	r2,204(sp)
    a8fc:	143fffc4 	addi	r16,r2,-1
    a900:	043f560e 	bge	zero,r16,a65c <__alt_data_end+0xf000a65c>
    a904:	07000404 	movi	fp,16
    a908:	e403530e 	bge	fp,r16,b658 <___svfprintf_internal_r+0x202c>
    a90c:	01420034 	movhi	r5,2048
    a910:	2940df84 	addi	r5,r5,894
    a914:	d9402b15 	stw	r5,172(sp)
    a918:	01c001c4 	movi	r7,7
    a91c:	dd002c17 	ldw	r20,176(sp)
    a920:	00000306 	br	a930 <___svfprintf_internal_r+0x1304>
    a924:	843ffc04 	addi	r16,r16,-16
    a928:	b5800204 	addi	r22,r22,8
    a92c:	e400130e 	bge	fp,r16,a97c <___svfprintf_internal_r+0x1350>
    a930:	18c00404 	addi	r3,r3,16
    a934:	8c400044 	addi	r17,r17,1
    a938:	b5400015 	stw	r21,0(r22)
    a93c:	b7000115 	stw	fp,4(r22)
    a940:	d8c02015 	stw	r3,128(sp)
    a944:	dc401f15 	stw	r17,124(sp)
    a948:	3c7ff60e 	bge	r7,r17,a924 <__alt_data_end+0xf000a924>
    a94c:	d9801e04 	addi	r6,sp,120
    a950:	a00b883a 	mov	r5,r20
    a954:	9809883a 	mov	r4,r19
    a958:	d9c03d15 	stw	r7,244(sp)
    a95c:	0012a940 	call	12a94 <__ssprint_r>
    a960:	d9c03d17 	ldw	r7,244(sp)
    a964:	103c161e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a968:	843ffc04 	addi	r16,r16,-16
    a96c:	d8c02017 	ldw	r3,128(sp)
    a970:	dc401f17 	ldw	r17,124(sp)
    a974:	dd800404 	addi	r22,sp,16
    a978:	e43fed16 	blt	fp,r16,a930 <__alt_data_end+0xf000a930>
    a97c:	d8802b17 	ldw	r2,172(sp)
    a980:	1c07883a 	add	r3,r3,r16
    a984:	8c400044 	addi	r17,r17,1
    a988:	b0800015 	stw	r2,0(r22)
    a98c:	b4000115 	stw	r16,4(r22)
    a990:	d8c02015 	stw	r3,128(sp)
    a994:	dc401f15 	stw	r17,124(sp)
    a998:	008001c4 	movi	r2,7
    a99c:	147f2e0e 	bge	r2,r17,a658 <__alt_data_end+0xf000a658>
    a9a0:	d9402c17 	ldw	r5,176(sp)
    a9a4:	d9801e04 	addi	r6,sp,120
    a9a8:	9809883a 	mov	r4,r19
    a9ac:	0012a940 	call	12a94 <__ssprint_r>
    a9b0:	103c031e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    a9b4:	d8c02017 	ldw	r3,128(sp)
    a9b8:	dc401f17 	ldw	r17,124(sp)
    a9bc:	dd800404 	addi	r22,sp,16
    a9c0:	003f2606 	br	a65c <__alt_data_end+0xf000a65c>
    a9c4:	9080040c 	andi	r2,r18,16
    a9c8:	1000c326 	beq	r2,zero,acd8 <___svfprintf_internal_r+0x16ac>
    a9cc:	d8802d17 	ldw	r2,180(sp)
    a9d0:	15000017 	ldw	r20,0(r2)
    a9d4:	10800104 	addi	r2,r2,4
    a9d8:	d8802d15 	stw	r2,180(sp)
    a9dc:	a02dd7fa 	srai	r22,r20,31
    a9e0:	b005883a 	mov	r2,r22
    a9e4:	103c680e 	bge	r2,zero,9b88 <__alt_data_end+0xf0009b88>
    a9e8:	0529c83a 	sub	r20,zero,r20
    a9ec:	a004c03a 	cmpne	r2,r20,zero
    a9f0:	05adc83a 	sub	r22,zero,r22
    a9f4:	b0adc83a 	sub	r22,r22,r2
    a9f8:	d8802917 	ldw	r2,164(sp)
    a9fc:	07000b44 	movi	fp,45
    aa00:	df002785 	stb	fp,158(sp)
    aa04:	10022e16 	blt	r2,zero,b2c0 <___svfprintf_internal_r+0x1c94>
    aa08:	00bfdfc4 	movi	r2,-129
    aa0c:	90a4703a 	and	r18,r18,r2
    aa10:	003c6406 	br	9ba4 <__alt_data_end+0xf0009ba4>
    aa14:	9080100c 	andi	r2,r18,64
    aa18:	d8002785 	stb	zero,158(sp)
    aa1c:	10012526 	beq	r2,zero,aeb4 <___svfprintf_internal_r+0x1888>
    aa20:	d9002d17 	ldw	r4,180(sp)
    aa24:	d9402917 	ldw	r5,164(sp)
    aa28:	002d883a 	mov	r22,zero
    aa2c:	20800104 	addi	r2,r4,4
    aa30:	2500000b 	ldhu	r20,0(r4)
    aa34:	283fa20e 	bge	r5,zero,a8c0 <__alt_data_end+0xf000a8c0>
    aa38:	d8802d15 	stw	r2,180(sp)
    aa3c:	0039883a 	mov	fp,zero
    aa40:	a584b03a 	or	r2,r20,r22
    aa44:	103c571e 	bne	r2,zero,9ba4 <__alt_data_end+0xf0009ba4>
    aa48:	00800044 	movi	r2,1
    aa4c:	003e5006 	br	a390 <__alt_data_end+0xf000a390>
    aa50:	d9402c17 	ldw	r5,176(sp)
    aa54:	d9801e04 	addi	r6,sp,120
    aa58:	9809883a 	mov	r4,r19
    aa5c:	0012a940 	call	12a94 <__ssprint_r>
    aa60:	103bd71e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    aa64:	d8c02017 	ldw	r3,128(sp)
    aa68:	da000404 	addi	r8,sp,16
    aa6c:	d9003217 	ldw	r4,200(sp)
    aa70:	d8802617 	ldw	r2,152(sp)
    aa74:	d9403317 	ldw	r5,204(sp)
    aa78:	8123883a 	add	r17,r16,r4
    aa7c:	11400216 	blt	r2,r5,aa88 <___svfprintf_internal_r+0x145c>
    aa80:	9100004c 	andi	r4,r18,1
    aa84:	20000d26 	beq	r4,zero,aabc <___svfprintf_internal_r+0x1490>
    aa88:	d9003817 	ldw	r4,224(sp)
    aa8c:	d9403417 	ldw	r5,208(sp)
    aa90:	1907883a 	add	r3,r3,r4
    aa94:	d9001f17 	ldw	r4,124(sp)
    aa98:	41400015 	stw	r5,0(r8)
    aa9c:	d9403817 	ldw	r5,224(sp)
    aaa0:	21000044 	addi	r4,r4,1
    aaa4:	d8c02015 	stw	r3,128(sp)
    aaa8:	41400115 	stw	r5,4(r8)
    aaac:	d9001f15 	stw	r4,124(sp)
    aab0:	014001c4 	movi	r5,7
    aab4:	2901dc16 	blt	r5,r4,b228 <___svfprintf_internal_r+0x1bfc>
    aab8:	42000204 	addi	r8,r8,8
    aabc:	d9003317 	ldw	r4,204(sp)
    aac0:	8121883a 	add	r16,r16,r4
    aac4:	2085c83a 	sub	r2,r4,r2
    aac8:	8461c83a 	sub	r16,r16,r17
    aacc:	1400010e 	bge	r2,r16,aad4 <___svfprintf_internal_r+0x14a8>
    aad0:	1021883a 	mov	r16,r2
    aad4:	04000a0e 	bge	zero,r16,ab00 <___svfprintf_internal_r+0x14d4>
    aad8:	d9001f17 	ldw	r4,124(sp)
    aadc:	1c07883a 	add	r3,r3,r16
    aae0:	44400015 	stw	r17,0(r8)
    aae4:	21000044 	addi	r4,r4,1
    aae8:	44000115 	stw	r16,4(r8)
    aaec:	d8c02015 	stw	r3,128(sp)
    aaf0:	d9001f15 	stw	r4,124(sp)
    aaf4:	014001c4 	movi	r5,7
    aaf8:	2901e616 	blt	r5,r4,b294 <___svfprintf_internal_r+0x1c68>
    aafc:	42000204 	addi	r8,r8,8
    ab00:	8001f616 	blt	r16,zero,b2dc <___svfprintf_internal_r+0x1cb0>
    ab04:	1421c83a 	sub	r16,r2,r16
    ab08:	043d1c0e 	bge	zero,r16,9f7c <__alt_data_end+0xf0009f7c>
    ab0c:	04400404 	movi	r17,16
    ab10:	d8801f17 	ldw	r2,124(sp)
    ab14:	8c3edd0e 	bge	r17,r16,a68c <__alt_data_end+0xf000a68c>
    ab18:	01420034 	movhi	r5,2048
    ab1c:	2940df84 	addi	r5,r5,894
    ab20:	d9402b15 	stw	r5,172(sp)
    ab24:	058001c4 	movi	r22,7
    ab28:	dd002c17 	ldw	r20,176(sp)
    ab2c:	00000306 	br	ab3c <___svfprintf_internal_r+0x1510>
    ab30:	42000204 	addi	r8,r8,8
    ab34:	843ffc04 	addi	r16,r16,-16
    ab38:	8c3ed70e 	bge	r17,r16,a698 <__alt_data_end+0xf000a698>
    ab3c:	18c00404 	addi	r3,r3,16
    ab40:	10800044 	addi	r2,r2,1
    ab44:	45400015 	stw	r21,0(r8)
    ab48:	44400115 	stw	r17,4(r8)
    ab4c:	d8c02015 	stw	r3,128(sp)
    ab50:	d8801f15 	stw	r2,124(sp)
    ab54:	b0bff60e 	bge	r22,r2,ab30 <__alt_data_end+0xf000ab30>
    ab58:	d9801e04 	addi	r6,sp,120
    ab5c:	a00b883a 	mov	r5,r20
    ab60:	9809883a 	mov	r4,r19
    ab64:	0012a940 	call	12a94 <__ssprint_r>
    ab68:	103b951e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    ab6c:	d8c02017 	ldw	r3,128(sp)
    ab70:	d8801f17 	ldw	r2,124(sp)
    ab74:	da000404 	addi	r8,sp,16
    ab78:	003fee06 	br	ab34 <__alt_data_end+0xf000ab34>
    ab7c:	9088703a 	and	r4,r18,r2
    ab80:	203e8d1e 	bne	r4,zero,a5b8 <__alt_data_end+0xf000a5b8>
    ab84:	dc401f17 	ldw	r17,124(sp)
    ab88:	40800115 	stw	r2,4(r8)
    ab8c:	44000015 	stw	r16,0(r8)
    ab90:	8c400044 	addi	r17,r17,1
    ab94:	d8c02015 	stw	r3,128(sp)
    ab98:	dc401f15 	stw	r17,124(sp)
    ab9c:	008001c4 	movi	r2,7
    aba0:	147f7f16 	blt	r2,r17,a9a0 <__alt_data_end+0xf000a9a0>
    aba4:	45800204 	addi	r22,r8,8
    aba8:	003eac06 	br	a65c <__alt_data_end+0xf000a65c>
    abac:	d9402c17 	ldw	r5,176(sp)
    abb0:	d9801e04 	addi	r6,sp,120
    abb4:	9809883a 	mov	r4,r19
    abb8:	0012a940 	call	12a94 <__ssprint_r>
    abbc:	103b801e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    abc0:	d8c02017 	ldw	r3,128(sp)
    abc4:	dc401f17 	ldw	r17,124(sp)
    abc8:	da000404 	addi	r8,sp,16
    abcc:	003e8406 	br	a5e0 <__alt_data_end+0xf000a5e0>
    abd0:	d9402c17 	ldw	r5,176(sp)
    abd4:	d9801e04 	addi	r6,sp,120
    abd8:	9809883a 	mov	r4,r19
    abdc:	0012a940 	call	12a94 <__ssprint_r>
    abe0:	103b771e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    abe4:	d8c02017 	ldw	r3,128(sp)
    abe8:	dc401f17 	ldw	r17,124(sp)
    abec:	dd800404 	addi	r22,sp,16
    abf0:	003e8606 	br	a60c <__alt_data_end+0xf000a60c>
    abf4:	0029883a 	mov	r20,zero
    abf8:	a5000c04 	addi	r20,r20,48
    abfc:	dc001dc4 	addi	r16,sp,119
    ac00:	dd001dc5 	stb	r20,119(sp)
    ac04:	003f3806 	br	a8e8 <__alt_data_end+0xf000a8e8>
    ac08:	d9402c17 	ldw	r5,176(sp)
    ac0c:	d9801e04 	addi	r6,sp,120
    ac10:	9809883a 	mov	r4,r19
    ac14:	0012a940 	call	12a94 <__ssprint_r>
    ac18:	103b691e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    ac1c:	d8c02017 	ldw	r3,128(sp)
    ac20:	da000404 	addi	r8,sp,16
    ac24:	003c9506 	br	9e7c <__alt_data_end+0xf0009e7c>
    ac28:	d9003617 	ldw	r4,216(sp)
    ac2c:	d9403717 	ldw	r5,220(sp)
    ac30:	da003e15 	stw	r8,248(sp)
    ac34:	00127b40 	call	127b4 <__fpclassifyd>
    ac38:	da003e17 	ldw	r8,248(sp)
    ac3c:	1000bd1e 	bne	r2,zero,af34 <___svfprintf_internal_r+0x1908>
    ac40:	008011c4 	movi	r2,71
    ac44:	14411e0e 	bge	r2,r17,b0c0 <___svfprintf_internal_r+0x1a94>
    ac48:	04020034 	movhi	r16,2048
    ac4c:	8400d204 	addi	r16,r16,840
    ac50:	00c000c4 	movi	r3,3
    ac54:	00bfdfc4 	movi	r2,-129
    ac58:	d8c02a15 	stw	r3,168(sp)
    ac5c:	90a4703a 	and	r18,r18,r2
    ac60:	df002783 	ldbu	fp,158(sp)
    ac64:	d8c02e15 	stw	r3,184(sp)
    ac68:	d8002915 	stw	zero,164(sp)
    ac6c:	d8003215 	stw	zero,200(sp)
    ac70:	003c1c06 	br	9ce4 <__alt_data_end+0xf0009ce4>
    ac74:	9080100c 	andi	r2,r18,64
    ac78:	d8002785 	stb	zero,158(sp)
    ac7c:	10009426 	beq	r2,zero,aed0 <___svfprintf_internal_r+0x18a4>
    ac80:	d8c02d17 	ldw	r3,180(sp)
    ac84:	d9002917 	ldw	r4,164(sp)
    ac88:	002d883a 	mov	r22,zero
    ac8c:	18800104 	addi	r2,r3,4
    ac90:	1d00000b 	ldhu	r20,0(r3)
    ac94:	203ec10e 	bge	r4,zero,a79c <__alt_data_end+0xf000a79c>
    ac98:	a586b03a 	or	r3,r20,r22
    ac9c:	d8802d15 	stw	r2,180(sp)
    aca0:	183ec21e 	bne	r3,zero,a7ac <__alt_data_end+0xf000a7ac>
    aca4:	0039883a 	mov	fp,zero
    aca8:	0005883a 	mov	r2,zero
    acac:	003db806 	br	a390 <__alt_data_end+0xf000a390>
    acb0:	d8802d17 	ldw	r2,180(sp)
    acb4:	d8c02d17 	ldw	r3,180(sp)
    acb8:	d9002d17 	ldw	r4,180(sp)
    acbc:	10800017 	ldw	r2,0(r2)
    acc0:	18c00117 	ldw	r3,4(r3)
    acc4:	21000204 	addi	r4,r4,8
    acc8:	d8803615 	stw	r2,216(sp)
    accc:	d8c03715 	stw	r3,220(sp)
    acd0:	d9002d15 	stw	r4,180(sp)
    acd4:	003b8206 	br	9ae0 <__alt_data_end+0xf0009ae0>
    acd8:	9080100c 	andi	r2,r18,64
    acdc:	10010726 	beq	r2,zero,b0fc <___svfprintf_internal_r+0x1ad0>
    ace0:	d8c02d17 	ldw	r3,180(sp)
    ace4:	1d00000f 	ldh	r20,0(r3)
    ace8:	18c00104 	addi	r3,r3,4
    acec:	d8c02d15 	stw	r3,180(sp)
    acf0:	a02dd7fa 	srai	r22,r20,31
    acf4:	b005883a 	mov	r2,r22
    acf8:	003ba206 	br	9b84 <__alt_data_end+0xf0009b84>
    acfc:	9080100c 	andi	r2,r18,64
    ad00:	10010526 	beq	r2,zero,b118 <___svfprintf_internal_r+0x1aec>
    ad04:	d9002d17 	ldw	r4,180(sp)
    ad08:	002d883a 	mov	r22,zero
    ad0c:	2500000b 	ldhu	r20,0(r4)
    ad10:	21000104 	addi	r4,r4,4
    ad14:	d9002d15 	stw	r4,180(sp)
    ad18:	003cfe06 	br	a114 <__alt_data_end+0xf000a114>
    ad1c:	bc400007 	ldb	r17,0(r23)
    ad20:	003a9606 	br	977c <__alt_data_end+0xf000977c>
    ad24:	9080040c 	andi	r2,r18,16
    ad28:	10010126 	beq	r2,zero,b130 <___svfprintf_internal_r+0x1b04>
    ad2c:	d9402d17 	ldw	r5,180(sp)
    ad30:	d8c02f17 	ldw	r3,188(sp)
    ad34:	28800017 	ldw	r2,0(r5)
    ad38:	29400104 	addi	r5,r5,4
    ad3c:	d9402d15 	stw	r5,180(sp)
    ad40:	10c00015 	stw	r3,0(r2)
    ad44:	003a6406 	br	96d8 <__alt_data_end+0xf00096d8>
    ad48:	d9002917 	ldw	r4,164(sp)
    ad4c:	d8002785 	stb	zero,158(sp)
    ad50:	203d8d16 	blt	r4,zero,a388 <__alt_data_end+0xf000a388>
    ad54:	00bfdfc4 	movi	r2,-129
    ad58:	90a4703a 	and	r18,r18,r2
    ad5c:	003b0506 	br	9974 <__alt_data_end+0xf0009974>
    ad60:	01420034 	movhi	r5,2048
    ad64:	2940df84 	addi	r5,r5,894
    ad68:	d9402b15 	stw	r5,172(sp)
    ad6c:	d9402b17 	ldw	r5,172(sp)
    ad70:	1c47883a 	add	r3,r3,r17
    ad74:	10800044 	addi	r2,r2,1
    ad78:	41400015 	stw	r5,0(r8)
    ad7c:	44400115 	stw	r17,4(r8)
    ad80:	d8c02015 	stw	r3,128(sp)
    ad84:	d8801f15 	stw	r2,124(sp)
    ad88:	010001c4 	movi	r4,7
    ad8c:	20bf3016 	blt	r4,r2,aa50 <__alt_data_end+0xf000aa50>
    ad90:	42000204 	addi	r8,r8,8
    ad94:	003f3506 	br	aa6c <__alt_data_end+0xf000aa6c>
    ad98:	01020034 	movhi	r4,2048
    ad9c:	2100df84 	addi	r4,r4,894
    ada0:	d9002b15 	stw	r4,172(sp)
    ada4:	003c5e06 	br	9f20 <__alt_data_end+0xf0009f20>
    ada8:	d9402c17 	ldw	r5,176(sp)
    adac:	d9801e04 	addi	r6,sp,120
    adb0:	9809883a 	mov	r4,r19
    adb4:	0012a940 	call	12a94 <__ssprint_r>
    adb8:	103b011e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    adbc:	d8c02017 	ldw	r3,128(sp)
    adc0:	da000404 	addi	r8,sp,16
    adc4:	003d9306 	br	a414 <__alt_data_end+0xf000a414>
    adc8:	d8801f17 	ldw	r2,124(sp)
    adcc:	01420034 	movhi	r5,2048
    add0:	01000044 	movi	r4,1
    add4:	18c00044 	addi	r3,r3,1
    add8:	10800044 	addi	r2,r2,1
    addc:	2940df04 	addi	r5,r5,892
    ade0:	41000115 	stw	r4,4(r8)
    ade4:	41400015 	stw	r5,0(r8)
    ade8:	d8c02015 	stw	r3,128(sp)
    adec:	d8801f15 	stw	r2,124(sp)
    adf0:	010001c4 	movi	r4,7
    adf4:	2080b516 	blt	r4,r2,b0cc <___svfprintf_internal_r+0x1aa0>
    adf8:	42000204 	addi	r8,r8,8
    adfc:	8800041e 	bne	r17,zero,ae10 <___svfprintf_internal_r+0x17e4>
    ae00:	d8803317 	ldw	r2,204(sp)
    ae04:	1000021e 	bne	r2,zero,ae10 <___svfprintf_internal_r+0x17e4>
    ae08:	9080004c 	andi	r2,r18,1
    ae0c:	103c5b26 	beq	r2,zero,9f7c <__alt_data_end+0xf0009f7c>
    ae10:	d9003817 	ldw	r4,224(sp)
    ae14:	d8801f17 	ldw	r2,124(sp)
    ae18:	d9403417 	ldw	r5,208(sp)
    ae1c:	20c7883a 	add	r3,r4,r3
    ae20:	10800044 	addi	r2,r2,1
    ae24:	41000115 	stw	r4,4(r8)
    ae28:	41400015 	stw	r5,0(r8)
    ae2c:	d8c02015 	stw	r3,128(sp)
    ae30:	d8801f15 	stw	r2,124(sp)
    ae34:	010001c4 	movi	r4,7
    ae38:	20818016 	blt	r4,r2,b43c <___svfprintf_internal_r+0x1e10>
    ae3c:	42000204 	addi	r8,r8,8
    ae40:	0463c83a 	sub	r17,zero,r17
    ae44:	0440cb0e 	bge	zero,r17,b174 <___svfprintf_internal_r+0x1b48>
    ae48:	05800404 	movi	r22,16
    ae4c:	b440e80e 	bge	r22,r17,b1f0 <___svfprintf_internal_r+0x1bc4>
    ae50:	01420034 	movhi	r5,2048
    ae54:	2940df84 	addi	r5,r5,894
    ae58:	d9402b15 	stw	r5,172(sp)
    ae5c:	070001c4 	movi	fp,7
    ae60:	dd002c17 	ldw	r20,176(sp)
    ae64:	00000306 	br	ae74 <___svfprintf_internal_r+0x1848>
    ae68:	42000204 	addi	r8,r8,8
    ae6c:	8c7ffc04 	addi	r17,r17,-16
    ae70:	b440e20e 	bge	r22,r17,b1fc <___svfprintf_internal_r+0x1bd0>
    ae74:	18c00404 	addi	r3,r3,16
    ae78:	10800044 	addi	r2,r2,1
    ae7c:	45400015 	stw	r21,0(r8)
    ae80:	45800115 	stw	r22,4(r8)
    ae84:	d8c02015 	stw	r3,128(sp)
    ae88:	d8801f15 	stw	r2,124(sp)
    ae8c:	e0bff60e 	bge	fp,r2,ae68 <__alt_data_end+0xf000ae68>
    ae90:	d9801e04 	addi	r6,sp,120
    ae94:	a00b883a 	mov	r5,r20
    ae98:	9809883a 	mov	r4,r19
    ae9c:	0012a940 	call	12a94 <__ssprint_r>
    aea0:	103ac71e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    aea4:	d8c02017 	ldw	r3,128(sp)
    aea8:	d8801f17 	ldw	r2,124(sp)
    aeac:	da000404 	addi	r8,sp,16
    aeb0:	003fee06 	br	ae6c <__alt_data_end+0xf000ae6c>
    aeb4:	d8c02d17 	ldw	r3,180(sp)
    aeb8:	d9002917 	ldw	r4,164(sp)
    aebc:	002d883a 	mov	r22,zero
    aec0:	18800104 	addi	r2,r3,4
    aec4:	1d000017 	ldw	r20,0(r3)
    aec8:	203e7d0e 	bge	r4,zero,a8c0 <__alt_data_end+0xf000a8c0>
    aecc:	003eda06 	br	aa38 <__alt_data_end+0xf000aa38>
    aed0:	d9402d17 	ldw	r5,180(sp)
    aed4:	d8c02917 	ldw	r3,164(sp)
    aed8:	002d883a 	mov	r22,zero
    aedc:	28800104 	addi	r2,r5,4
    aee0:	2d000017 	ldw	r20,0(r5)
    aee4:	183e2d0e 	bge	r3,zero,a79c <__alt_data_end+0xf000a79c>
    aee8:	003f6b06 	br	ac98 <__alt_data_end+0xf000ac98>
    aeec:	d8c02d15 	stw	r3,180(sp)
    aef0:	0039883a 	mov	fp,zero
    aef4:	003ed206 	br	aa40 <__alt_data_end+0xf000aa40>
    aef8:	bc400043 	ldbu	r17,1(r23)
    aefc:	94800814 	ori	r18,r18,32
    af00:	bdc00044 	addi	r23,r23,1
    af04:	8c403fcc 	andi	r17,r17,255
    af08:	8c40201c 	xori	r17,r17,128
    af0c:	8c7fe004 	addi	r17,r17,-128
    af10:	003a1a06 	br	977c <__alt_data_end+0xf000977c>
    af14:	d9402c17 	ldw	r5,176(sp)
    af18:	d9801e04 	addi	r6,sp,120
    af1c:	9809883a 	mov	r4,r19
    af20:	0012a940 	call	12a94 <__ssprint_r>
    af24:	103aa61e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    af28:	d8c02017 	ldw	r3,128(sp)
    af2c:	da000404 	addi	r8,sp,16
    af30:	003d4a06 	br	a45c <__alt_data_end+0xf000a45c>
    af34:	d9002917 	ldw	r4,164(sp)
    af38:	05bff7c4 	movi	r22,-33
    af3c:	00bfffc4 	movi	r2,-1
    af40:	8dac703a 	and	r22,r17,r22
    af44:	20806a26 	beq	r4,r2,b0f0 <___svfprintf_internal_r+0x1ac4>
    af48:	008011c4 	movi	r2,71
    af4c:	b0813726 	beq	r22,r2,b42c <___svfprintf_internal_r+0x1e00>
    af50:	d9003717 	ldw	r4,220(sp)
    af54:	90c04014 	ori	r3,r18,256
    af58:	d8c02b15 	stw	r3,172(sp)
    af5c:	20015d16 	blt	r4,zero,b4d4 <___svfprintf_internal_r+0x1ea8>
    af60:	dd003717 	ldw	r20,220(sp)
    af64:	d8002a05 	stb	zero,168(sp)
    af68:	00801984 	movi	r2,102
    af6c:	88814026 	beq	r17,r2,b470 <___svfprintf_internal_r+0x1e44>
    af70:	00801184 	movi	r2,70
    af74:	88817126 	beq	r17,r2,b53c <___svfprintf_internal_r+0x1f10>
    af78:	00801144 	movi	r2,69
    af7c:	b0816226 	beq	r22,r2,b508 <___svfprintf_internal_r+0x1edc>
    af80:	d8c02917 	ldw	r3,164(sp)
    af84:	d8802104 	addi	r2,sp,132
    af88:	d8800315 	stw	r2,12(sp)
    af8c:	d9403617 	ldw	r5,216(sp)
    af90:	d8802504 	addi	r2,sp,148
    af94:	d8800215 	stw	r2,8(sp)
    af98:	d8802604 	addi	r2,sp,152
    af9c:	d8c00015 	stw	r3,0(sp)
    afa0:	d8800115 	stw	r2,4(sp)
    afa4:	01c00084 	movi	r7,2
    afa8:	a00d883a 	mov	r6,r20
    afac:	9809883a 	mov	r4,r19
    afb0:	d8c03d15 	stw	r3,244(sp)
    afb4:	da003e15 	stw	r8,248(sp)
    afb8:	000de280 	call	de28 <_dtoa_r>
    afbc:	1021883a 	mov	r16,r2
    afc0:	008019c4 	movi	r2,103
    afc4:	d8c03d17 	ldw	r3,244(sp)
    afc8:	da003e17 	ldw	r8,248(sp)
    afcc:	8880e726 	beq	r17,r2,b36c <___svfprintf_internal_r+0x1d40>
    afd0:	008011c4 	movi	r2,71
    afd4:	8880d426 	beq	r17,r2,b328 <___svfprintf_internal_r+0x1cfc>
    afd8:	80f9883a 	add	fp,r16,r3
    afdc:	d9003617 	ldw	r4,216(sp)
    afe0:	000d883a 	mov	r6,zero
    afe4:	000f883a 	mov	r7,zero
    afe8:	a00b883a 	mov	r5,r20
    afec:	da003e15 	stw	r8,248(sp)
    aff0:	00171780 	call	17178 <__eqdf2>
    aff4:	da003e17 	ldw	r8,248(sp)
    aff8:	1000e426 	beq	r2,zero,b38c <___svfprintf_internal_r+0x1d60>
    affc:	d8802117 	ldw	r2,132(sp)
    b000:	1700062e 	bgeu	r2,fp,b01c <___svfprintf_internal_r+0x19f0>
    b004:	01000c04 	movi	r4,48
    b008:	10c00044 	addi	r3,r2,1
    b00c:	d8c02115 	stw	r3,132(sp)
    b010:	11000005 	stb	r4,0(r2)
    b014:	d8802117 	ldw	r2,132(sp)
    b018:	173ffb36 	bltu	r2,fp,b008 <__alt_data_end+0xf000b008>
    b01c:	1405c83a 	sub	r2,r2,r16
    b020:	d8803315 	stw	r2,204(sp)
    b024:	008011c4 	movi	r2,71
    b028:	b080c526 	beq	r22,r2,b340 <___svfprintf_internal_r+0x1d14>
    b02c:	00801944 	movi	r2,101
    b030:	1441d90e 	bge	r2,r17,b798 <___svfprintf_internal_r+0x216c>
    b034:	d8c02617 	ldw	r3,152(sp)
    b038:	00801984 	movi	r2,102
    b03c:	d8c03215 	stw	r3,200(sp)
    b040:	88813426 	beq	r17,r2,b514 <___svfprintf_internal_r+0x1ee8>
    b044:	d8c03217 	ldw	r3,200(sp)
    b048:	d9003317 	ldw	r4,204(sp)
    b04c:	19012516 	blt	r3,r4,b4e4 <___svfprintf_internal_r+0x1eb8>
    b050:	9480004c 	andi	r18,r18,1
    b054:	9001841e 	bne	r18,zero,b668 <___svfprintf_internal_r+0x203c>
    b058:	1805883a 	mov	r2,r3
    b05c:	1801cc16 	blt	r3,zero,b790 <___svfprintf_internal_r+0x2164>
    b060:	d8c03217 	ldw	r3,200(sp)
    b064:	044019c4 	movi	r17,103
    b068:	d8c02e15 	stw	r3,184(sp)
    b06c:	df002a07 	ldb	fp,168(sp)
    b070:	e000a61e 	bne	fp,zero,b30c <___svfprintf_internal_r+0x1ce0>
    b074:	df002783 	ldbu	fp,158(sp)
    b078:	d8802a15 	stw	r2,168(sp)
    b07c:	dc802b17 	ldw	r18,172(sp)
    b080:	d8002915 	stw	zero,164(sp)
    b084:	003b1706 	br	9ce4 <__alt_data_end+0xf0009ce4>
    b088:	04020034 	movhi	r16,2048
    b08c:	8400cf04 	addi	r16,r16,828
    b090:	003aa606 	br	9b2c <__alt_data_end+0xf0009b2c>
    b094:	d9003917 	ldw	r4,228(sp)
    b098:	04001004 	movi	r16,64
    b09c:	800b883a 	mov	r5,r16
    b0a0:	00108080 	call	10808 <_malloc_r>
    b0a4:	d9002c17 	ldw	r4,176(sp)
    b0a8:	20800015 	stw	r2,0(r4)
    b0ac:	20800415 	stw	r2,16(r4)
    b0b0:	1001cb26 	beq	r2,zero,b7e0 <___svfprintf_internal_r+0x21b4>
    b0b4:	d8802c17 	ldw	r2,176(sp)
    b0b8:	14000515 	stw	r16,20(r2)
    b0bc:	00397606 	br	9698 <__alt_data_end+0xf0009698>
    b0c0:	04020034 	movhi	r16,2048
    b0c4:	8400d104 	addi	r16,r16,836
    b0c8:	003ee106 	br	ac50 <__alt_data_end+0xf000ac50>
    b0cc:	d9402c17 	ldw	r5,176(sp)
    b0d0:	d9801e04 	addi	r6,sp,120
    b0d4:	9809883a 	mov	r4,r19
    b0d8:	0012a940 	call	12a94 <__ssprint_r>
    b0dc:	103a381e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    b0e0:	dc402617 	ldw	r17,152(sp)
    b0e4:	d8c02017 	ldw	r3,128(sp)
    b0e8:	da000404 	addi	r8,sp,16
    b0ec:	003f4306 	br	adfc <__alt_data_end+0xf000adfc>
    b0f0:	01400184 	movi	r5,6
    b0f4:	d9402915 	stw	r5,164(sp)
    b0f8:	003f9506 	br	af50 <__alt_data_end+0xf000af50>
    b0fc:	d9002d17 	ldw	r4,180(sp)
    b100:	25000017 	ldw	r20,0(r4)
    b104:	21000104 	addi	r4,r4,4
    b108:	d9002d15 	stw	r4,180(sp)
    b10c:	a02dd7fa 	srai	r22,r20,31
    b110:	b005883a 	mov	r2,r22
    b114:	003a9b06 	br	9b84 <__alt_data_end+0xf0009b84>
    b118:	d9402d17 	ldw	r5,180(sp)
    b11c:	002d883a 	mov	r22,zero
    b120:	2d000017 	ldw	r20,0(r5)
    b124:	29400104 	addi	r5,r5,4
    b128:	d9402d15 	stw	r5,180(sp)
    b12c:	003bf906 	br	a114 <__alt_data_end+0xf000a114>
    b130:	9480100c 	andi	r18,r18,64
    b134:	90006e26 	beq	r18,zero,b2f0 <___svfprintf_internal_r+0x1cc4>
    b138:	d9002d17 	ldw	r4,180(sp)
    b13c:	d9402f17 	ldw	r5,188(sp)
    b140:	20800017 	ldw	r2,0(r4)
    b144:	21000104 	addi	r4,r4,4
    b148:	d9002d15 	stw	r4,180(sp)
    b14c:	1140000d 	sth	r5,0(r2)
    b150:	00396106 	br	96d8 <__alt_data_end+0xf00096d8>
    b154:	d9402c17 	ldw	r5,176(sp)
    b158:	d9801e04 	addi	r6,sp,120
    b15c:	9809883a 	mov	r4,r19
    b160:	0012a940 	call	12a94 <__ssprint_r>
    b164:	103a161e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    b168:	d8c02017 	ldw	r3,128(sp)
    b16c:	d8801f17 	ldw	r2,124(sp)
    b170:	da000404 	addi	r8,sp,16
    b174:	d9403317 	ldw	r5,204(sp)
    b178:	10800044 	addi	r2,r2,1
    b17c:	44000015 	stw	r16,0(r8)
    b180:	28c7883a 	add	r3,r5,r3
    b184:	003b7706 	br	9f64 <__alt_data_end+0xf0009f64>
    b188:	8009883a 	mov	r4,r16
    b18c:	da003e15 	stw	r8,248(sp)
    b190:	00095940 	call	9594 <strlen>
    b194:	d8802e15 	stw	r2,184(sp)
    b198:	da003e17 	ldw	r8,248(sp)
    b19c:	103c280e 	bge	r2,zero,a240 <__alt_data_end+0xf000a240>
    b1a0:	0005883a 	mov	r2,zero
    b1a4:	003c2606 	br	a240 <__alt_data_end+0xf000a240>
    b1a8:	00bfffc4 	movi	r2,-1
    b1ac:	003a0906 	br	99d4 <__alt_data_end+0xf00099d4>
    b1b0:	01020034 	movhi	r4,2048
    b1b4:	2100e384 	addi	r4,r4,910
    b1b8:	d9003515 	stw	r4,212(sp)
    b1bc:	003b0606 	br	9dd8 <__alt_data_end+0xf0009dd8>
    b1c0:	013fffc4 	movi	r4,-1
    b1c4:	003a2706 	br	9a64 <__alt_data_end+0xf0009a64>
    b1c8:	d9402c17 	ldw	r5,176(sp)
    b1cc:	d9801e04 	addi	r6,sp,120
    b1d0:	9809883a 	mov	r4,r19
    b1d4:	0012a940 	call	12a94 <__ssprint_r>
    b1d8:	1039f91e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    b1dc:	d8c02017 	ldw	r3,128(sp)
    b1e0:	da000404 	addi	r8,sp,16
    b1e4:	003d8406 	br	a7f8 <__alt_data_end+0xf000a7f8>
    b1e8:	0023883a 	mov	r17,zero
    b1ec:	003d8306 	br	a7fc <__alt_data_end+0xf000a7fc>
    b1f0:	01020034 	movhi	r4,2048
    b1f4:	2100df84 	addi	r4,r4,894
    b1f8:	d9002b15 	stw	r4,172(sp)
    b1fc:	d9002b17 	ldw	r4,172(sp)
    b200:	1c47883a 	add	r3,r3,r17
    b204:	10800044 	addi	r2,r2,1
    b208:	41000015 	stw	r4,0(r8)
    b20c:	44400115 	stw	r17,4(r8)
    b210:	d8c02015 	stw	r3,128(sp)
    b214:	d8801f15 	stw	r2,124(sp)
    b218:	010001c4 	movi	r4,7
    b21c:	20bfcd16 	blt	r4,r2,b154 <__alt_data_end+0xf000b154>
    b220:	42000204 	addi	r8,r8,8
    b224:	003fd306 	br	b174 <__alt_data_end+0xf000b174>
    b228:	d9402c17 	ldw	r5,176(sp)
    b22c:	d9801e04 	addi	r6,sp,120
    b230:	9809883a 	mov	r4,r19
    b234:	0012a940 	call	12a94 <__ssprint_r>
    b238:	1039e11e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    b23c:	d8802617 	ldw	r2,152(sp)
    b240:	d8c02017 	ldw	r3,128(sp)
    b244:	da000404 	addi	r8,sp,16
    b248:	003e1c06 	br	aabc <__alt_data_end+0xf000aabc>
    b24c:	d8802917 	ldw	r2,164(sp)
    b250:	00c00184 	movi	r3,6
    b254:	1880012e 	bgeu	r3,r2,b25c <___svfprintf_internal_r+0x1c30>
    b258:	1805883a 	mov	r2,r3
    b25c:	d8802e15 	stw	r2,184(sp)
    b260:	1000f316 	blt	r2,zero,b630 <___svfprintf_internal_r+0x2004>
    b264:	04020034 	movhi	r16,2048
    b268:	d8802a15 	stw	r2,168(sp)
    b26c:	dd002d15 	stw	r20,180(sp)
    b270:	d8002915 	stw	zero,164(sp)
    b274:	d8003215 	stw	zero,200(sp)
    b278:	8400dd04 	addi	r16,r16,884
    b27c:	0039883a 	mov	fp,zero
    b280:	003a9f06 	br	9d00 <__alt_data_end+0xf0009d00>
    b284:	01020034 	movhi	r4,2048
    b288:	2100e384 	addi	r4,r4,910
    b28c:	d9003515 	stw	r4,212(sp)
    b290:	003b5f06 	br	a010 <__alt_data_end+0xf000a010>
    b294:	d9402c17 	ldw	r5,176(sp)
    b298:	d9801e04 	addi	r6,sp,120
    b29c:	9809883a 	mov	r4,r19
    b2a0:	0012a940 	call	12a94 <__ssprint_r>
    b2a4:	1039c61e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    b2a8:	d8802617 	ldw	r2,152(sp)
    b2ac:	d9403317 	ldw	r5,204(sp)
    b2b0:	d8c02017 	ldw	r3,128(sp)
    b2b4:	da000404 	addi	r8,sp,16
    b2b8:	2885c83a 	sub	r2,r5,r2
    b2bc:	003e1006 	br	ab00 <__alt_data_end+0xf000ab00>
    b2c0:	00800044 	movi	r2,1
    b2c4:	10803fcc 	andi	r2,r2,255
    b2c8:	00c00044 	movi	r3,1
    b2cc:	10fa3526 	beq	r2,r3,9ba4 <__alt_data_end+0xf0009ba4>
    b2d0:	00c00084 	movi	r3,2
    b2d4:	10fb9e26 	beq	r2,r3,a150 <__alt_data_end+0xf000a150>
    b2d8:	003a6406 	br	9c6c <__alt_data_end+0xf0009c6c>
    b2dc:	0021883a 	mov	r16,zero
    b2e0:	003e0806 	br	ab04 <__alt_data_end+0xf000ab04>
    b2e4:	07000b44 	movi	fp,45
    b2e8:	df002785 	stb	fp,158(sp)
    b2ec:	003a0b06 	br	9b1c <__alt_data_end+0xf0009b1c>
    b2f0:	d8c02d17 	ldw	r3,180(sp)
    b2f4:	d9002f17 	ldw	r4,188(sp)
    b2f8:	18800017 	ldw	r2,0(r3)
    b2fc:	18c00104 	addi	r3,r3,4
    b300:	d8c02d15 	stw	r3,180(sp)
    b304:	11000015 	stw	r4,0(r2)
    b308:	0038f306 	br	96d8 <__alt_data_end+0xf00096d8>
    b30c:	00c00b44 	movi	r3,45
    b310:	d8c02785 	stb	r3,158(sp)
    b314:	d8802a15 	stw	r2,168(sp)
    b318:	dc802b17 	ldw	r18,172(sp)
    b31c:	d8002915 	stw	zero,164(sp)
    b320:	07000b44 	movi	fp,45
    b324:	003a7306 	br	9cf4 <__alt_data_end+0xf0009cf4>
    b328:	9080004c 	andi	r2,r18,1
    b32c:	1000941e 	bne	r2,zero,b580 <___svfprintf_internal_r+0x1f54>
    b330:	d8802117 	ldw	r2,132(sp)
    b334:	1405c83a 	sub	r2,r2,r16
    b338:	d8803315 	stw	r2,204(sp)
    b33c:	b441161e 	bne	r22,r17,b798 <___svfprintf_internal_r+0x216c>
    b340:	dd802617 	ldw	r22,152(sp)
    b344:	00bfff44 	movi	r2,-3
    b348:	b0801a16 	blt	r22,r2,b3b4 <___svfprintf_internal_r+0x1d88>
    b34c:	d9402917 	ldw	r5,164(sp)
    b350:	2d801816 	blt	r5,r22,b3b4 <___svfprintf_internal_r+0x1d88>
    b354:	dd803215 	stw	r22,200(sp)
    b358:	003f3a06 	br	b044 <__alt_data_end+0xf000b044>
    b35c:	1025883a 	mov	r18,r2
    b360:	0039883a 	mov	fp,zero
    b364:	00800084 	movi	r2,2
    b368:	003fd606 	br	b2c4 <__alt_data_end+0xf000b2c4>
    b36c:	9080004c 	andi	r2,r18,1
    b370:	103f191e 	bne	r2,zero,afd8 <__alt_data_end+0xf000afd8>
    b374:	d8802117 	ldw	r2,132(sp)
    b378:	003f2806 	br	b01c <__alt_data_end+0xf000b01c>
    b37c:	01020034 	movhi	r4,2048
    b380:	2100df84 	addi	r4,r4,894
    b384:	d9002b15 	stw	r4,172(sp)
    b388:	003c7c06 	br	a57c <__alt_data_end+0xf000a57c>
    b38c:	e005883a 	mov	r2,fp
    b390:	003f2206 	br	b01c <__alt_data_end+0xf000b01c>
    b394:	d9402917 	ldw	r5,164(sp)
    b398:	df002783 	ldbu	fp,158(sp)
    b39c:	dd002d15 	stw	r20,180(sp)
    b3a0:	d9402a15 	stw	r5,168(sp)
    b3a4:	d9402e15 	stw	r5,184(sp)
    b3a8:	d8002915 	stw	zero,164(sp)
    b3ac:	d8003215 	stw	zero,200(sp)
    b3b0:	003a4c06 	br	9ce4 <__alt_data_end+0xf0009ce4>
    b3b4:	8c7fff84 	addi	r17,r17,-2
    b3b8:	b5bfffc4 	addi	r22,r22,-1
    b3bc:	dd802615 	stw	r22,152(sp)
    b3c0:	dc4022c5 	stb	r17,139(sp)
    b3c4:	b000c316 	blt	r22,zero,b6d4 <___svfprintf_internal_r+0x20a8>
    b3c8:	00800ac4 	movi	r2,43
    b3cc:	d8802305 	stb	r2,140(sp)
    b3d0:	00800244 	movi	r2,9
    b3d4:	15806e16 	blt	r2,r22,b590 <___svfprintf_internal_r+0x1f64>
    b3d8:	00800c04 	movi	r2,48
    b3dc:	b5800c04 	addi	r22,r22,48
    b3e0:	d8802345 	stb	r2,141(sp)
    b3e4:	dd802385 	stb	r22,142(sp)
    b3e8:	d88023c4 	addi	r2,sp,143
    b3ec:	df0022c4 	addi	fp,sp,139
    b3f0:	d8c03317 	ldw	r3,204(sp)
    b3f4:	1739c83a 	sub	fp,r2,fp
    b3f8:	d9003317 	ldw	r4,204(sp)
    b3fc:	e0c7883a 	add	r3,fp,r3
    b400:	df003b15 	stw	fp,236(sp)
    b404:	d8c02e15 	stw	r3,184(sp)
    b408:	00800044 	movi	r2,1
    b40c:	1100b70e 	bge	r2,r4,b6ec <___svfprintf_internal_r+0x20c0>
    b410:	d8c02e17 	ldw	r3,184(sp)
    b414:	18c00044 	addi	r3,r3,1
    b418:	d8c02e15 	stw	r3,184(sp)
    b41c:	1805883a 	mov	r2,r3
    b420:	1800b016 	blt	r3,zero,b6e4 <___svfprintf_internal_r+0x20b8>
    b424:	d8003215 	stw	zero,200(sp)
    b428:	003f1006 	br	b06c <__alt_data_end+0xf000b06c>
    b42c:	d8802917 	ldw	r2,164(sp)
    b430:	103ec71e 	bne	r2,zero,af50 <__alt_data_end+0xf000af50>
    b434:	dc002915 	stw	r16,164(sp)
    b438:	003ec506 	br	af50 <__alt_data_end+0xf000af50>
    b43c:	d9402c17 	ldw	r5,176(sp)
    b440:	d9801e04 	addi	r6,sp,120
    b444:	9809883a 	mov	r4,r19
    b448:	0012a940 	call	12a94 <__ssprint_r>
    b44c:	10395c1e 	bne	r2,zero,99c0 <__alt_data_end+0xf00099c0>
    b450:	dc402617 	ldw	r17,152(sp)
    b454:	d8c02017 	ldw	r3,128(sp)
    b458:	d8801f17 	ldw	r2,124(sp)
    b45c:	da000404 	addi	r8,sp,16
    b460:	003e7706 	br	ae40 <__alt_data_end+0xf000ae40>
    b464:	582f883a 	mov	r23,r11
    b468:	d8002915 	stw	zero,164(sp)
    b46c:	0038c406 	br	9780 <__alt_data_end+0xf0009780>
    b470:	d8c02917 	ldw	r3,164(sp)
    b474:	d8802104 	addi	r2,sp,132
    b478:	d8800315 	stw	r2,12(sp)
    b47c:	d9403617 	ldw	r5,216(sp)
    b480:	d8802504 	addi	r2,sp,148
    b484:	d8800215 	stw	r2,8(sp)
    b488:	d8802604 	addi	r2,sp,152
    b48c:	d8c00015 	stw	r3,0(sp)
    b490:	9809883a 	mov	r4,r19
    b494:	d8800115 	stw	r2,4(sp)
    b498:	01c000c4 	movi	r7,3
    b49c:	a00d883a 	mov	r6,r20
    b4a0:	da003e15 	stw	r8,248(sp)
    b4a4:	000de280 	call	de28 <_dtoa_r>
    b4a8:	d9002917 	ldw	r4,164(sp)
    b4ac:	da003e17 	ldw	r8,248(sp)
    b4b0:	1021883a 	mov	r16,r2
    b4b4:	1139883a 	add	fp,r2,r4
    b4b8:	2007883a 	mov	r3,r4
    b4bc:	81000007 	ldb	r4,0(r16)
    b4c0:	00800c04 	movi	r2,48
    b4c4:	20806f26 	beq	r4,r2,b684 <___svfprintf_internal_r+0x2058>
    b4c8:	d8c02617 	ldw	r3,152(sp)
    b4cc:	e0f9883a 	add	fp,fp,r3
    b4d0:	003ec206 	br	afdc <__alt_data_end+0xf000afdc>
    b4d4:	00c00b44 	movi	r3,45
    b4d8:	2520003c 	xorhi	r20,r4,32768
    b4dc:	d8c02a05 	stb	r3,168(sp)
    b4e0:	003ea106 	br	af68 <__alt_data_end+0xf000af68>
    b4e4:	d8c03217 	ldw	r3,200(sp)
    b4e8:	00c0890e 	bge	zero,r3,b710 <___svfprintf_internal_r+0x20e4>
    b4ec:	00800044 	movi	r2,1
    b4f0:	d9003317 	ldw	r4,204(sp)
    b4f4:	1105883a 	add	r2,r2,r4
    b4f8:	d8802e15 	stw	r2,184(sp)
    b4fc:	10005f16 	blt	r2,zero,b67c <___svfprintf_internal_r+0x2050>
    b500:	044019c4 	movi	r17,103
    b504:	003ed906 	br	b06c <__alt_data_end+0xf000b06c>
    b508:	d9002917 	ldw	r4,164(sp)
    b50c:	20c00044 	addi	r3,r4,1
    b510:	003e9c06 	br	af84 <__alt_data_end+0xf000af84>
    b514:	d9002917 	ldw	r4,164(sp)
    b518:	00c0680e 	bge	zero,r3,b6bc <___svfprintf_internal_r+0x2090>
    b51c:	2000461e 	bne	r4,zero,b638 <___svfprintf_internal_r+0x200c>
    b520:	9480004c 	andi	r18,r18,1
    b524:	9000441e 	bne	r18,zero,b638 <___svfprintf_internal_r+0x200c>
    b528:	1805883a 	mov	r2,r3
    b52c:	1800a016 	blt	r3,zero,b7b0 <___svfprintf_internal_r+0x2184>
    b530:	d8c03217 	ldw	r3,200(sp)
    b534:	d8c02e15 	stw	r3,184(sp)
    b538:	003ecc06 	br	b06c <__alt_data_end+0xf000b06c>
    b53c:	d9402917 	ldw	r5,164(sp)
    b540:	d8802104 	addi	r2,sp,132
    b544:	d8800315 	stw	r2,12(sp)
    b548:	d9400015 	stw	r5,0(sp)
    b54c:	d8802504 	addi	r2,sp,148
    b550:	d9403617 	ldw	r5,216(sp)
    b554:	d8800215 	stw	r2,8(sp)
    b558:	d8802604 	addi	r2,sp,152
    b55c:	d8800115 	stw	r2,4(sp)
    b560:	01c000c4 	movi	r7,3
    b564:	a00d883a 	mov	r6,r20
    b568:	9809883a 	mov	r4,r19
    b56c:	da003e15 	stw	r8,248(sp)
    b570:	000de280 	call	de28 <_dtoa_r>
    b574:	d8c02917 	ldw	r3,164(sp)
    b578:	da003e17 	ldw	r8,248(sp)
    b57c:	1021883a 	mov	r16,r2
    b580:	00801184 	movi	r2,70
    b584:	80f9883a 	add	fp,r16,r3
    b588:	88bfcc26 	beq	r17,r2,b4bc <__alt_data_end+0xf000b4bc>
    b58c:	003e9306 	br	afdc <__alt_data_end+0xf000afdc>
    b590:	df0022c4 	addi	fp,sp,139
    b594:	dc002915 	stw	r16,164(sp)
    b598:	9829883a 	mov	r20,r19
    b59c:	e021883a 	mov	r16,fp
    b5a0:	4027883a 	mov	r19,r8
    b5a4:	b009883a 	mov	r4,r22
    b5a8:	01400284 	movi	r5,10
    b5ac:	0008f740 	call	8f74 <__modsi3>
    b5b0:	10800c04 	addi	r2,r2,48
    b5b4:	843fffc4 	addi	r16,r16,-1
    b5b8:	b009883a 	mov	r4,r22
    b5bc:	01400284 	movi	r5,10
    b5c0:	80800005 	stb	r2,0(r16)
    b5c4:	0008ef00 	call	8ef0 <__divsi3>
    b5c8:	102d883a 	mov	r22,r2
    b5cc:	00800244 	movi	r2,9
    b5d0:	15bff416 	blt	r2,r22,b5a4 <__alt_data_end+0xf000b5a4>
    b5d4:	9811883a 	mov	r8,r19
    b5d8:	b0800c04 	addi	r2,r22,48
    b5dc:	a027883a 	mov	r19,r20
    b5e0:	8029883a 	mov	r20,r16
    b5e4:	a17fffc4 	addi	r5,r20,-1
    b5e8:	a0bfffc5 	stb	r2,-1(r20)
    b5ec:	dc002917 	ldw	r16,164(sp)
    b5f0:	2f00752e 	bgeu	r5,fp,b7c8 <___svfprintf_internal_r+0x219c>
    b5f4:	d9c02384 	addi	r7,sp,142
    b5f8:	3d0fc83a 	sub	r7,r7,r20
    b5fc:	d9002344 	addi	r4,sp,141
    b600:	e1cf883a 	add	r7,fp,r7
    b604:	00000106 	br	b60c <___svfprintf_internal_r+0x1fe0>
    b608:	28800003 	ldbu	r2,0(r5)
    b60c:	20800005 	stb	r2,0(r4)
    b610:	21000044 	addi	r4,r4,1
    b614:	29400044 	addi	r5,r5,1
    b618:	21fffb1e 	bne	r4,r7,b608 <__alt_data_end+0xf000b608>
    b61c:	d8802304 	addi	r2,sp,140
    b620:	1505c83a 	sub	r2,r2,r20
    b624:	d8c02344 	addi	r3,sp,141
    b628:	1885883a 	add	r2,r3,r2
    b62c:	003f7006 	br	b3f0 <__alt_data_end+0xf000b3f0>
    b630:	0005883a 	mov	r2,zero
    b634:	003f0b06 	br	b264 <__alt_data_end+0xf000b264>
    b638:	d9002917 	ldw	r4,164(sp)
    b63c:	d8c03217 	ldw	r3,200(sp)
    b640:	20800044 	addi	r2,r4,1
    b644:	1885883a 	add	r2,r3,r2
    b648:	d8802e15 	stw	r2,184(sp)
    b64c:	103e870e 	bge	r2,zero,b06c <__alt_data_end+0xf000b06c>
    b650:	0005883a 	mov	r2,zero
    b654:	003e8506 	br	b06c <__alt_data_end+0xf000b06c>
    b658:	01020034 	movhi	r4,2048
    b65c:	2100df84 	addi	r4,r4,894
    b660:	d9002b15 	stw	r4,172(sp)
    b664:	003cc506 	br	a97c <__alt_data_end+0xf000a97c>
    b668:	d8c03217 	ldw	r3,200(sp)
    b66c:	18c00044 	addi	r3,r3,1
    b670:	d8c02e15 	stw	r3,184(sp)
    b674:	1805883a 	mov	r2,r3
    b678:	183fa10e 	bge	r3,zero,b500 <__alt_data_end+0xf000b500>
    b67c:	0005883a 	mov	r2,zero
    b680:	003f9f06 	br	b500 <__alt_data_end+0xf000b500>
    b684:	d9003617 	ldw	r4,216(sp)
    b688:	000d883a 	mov	r6,zero
    b68c:	000f883a 	mov	r7,zero
    b690:	a00b883a 	mov	r5,r20
    b694:	d8c03d15 	stw	r3,244(sp)
    b698:	da003e15 	stw	r8,248(sp)
    b69c:	00171780 	call	17178 <__eqdf2>
    b6a0:	d8c03d17 	ldw	r3,244(sp)
    b6a4:	da003e17 	ldw	r8,248(sp)
    b6a8:	103f8726 	beq	r2,zero,b4c8 <__alt_data_end+0xf000b4c8>
    b6ac:	00800044 	movi	r2,1
    b6b0:	10c7c83a 	sub	r3,r2,r3
    b6b4:	d8c02615 	stw	r3,152(sp)
    b6b8:	003f8406 	br	b4cc <__alt_data_end+0xf000b4cc>
    b6bc:	20000e1e 	bne	r4,zero,b6f8 <___svfprintf_internal_r+0x20cc>
    b6c0:	9480004c 	andi	r18,r18,1
    b6c4:	90000c1e 	bne	r18,zero,b6f8 <___svfprintf_internal_r+0x20cc>
    b6c8:	00800044 	movi	r2,1
    b6cc:	d8802e15 	stw	r2,184(sp)
    b6d0:	003e6606 	br	b06c <__alt_data_end+0xf000b06c>
    b6d4:	00800b44 	movi	r2,45
    b6d8:	05adc83a 	sub	r22,zero,r22
    b6dc:	d8802305 	stb	r2,140(sp)
    b6e0:	003f3b06 	br	b3d0 <__alt_data_end+0xf000b3d0>
    b6e4:	0005883a 	mov	r2,zero
    b6e8:	003f4e06 	br	b424 <__alt_data_end+0xf000b424>
    b6ec:	90a4703a 	and	r18,r18,r2
    b6f0:	903f4a26 	beq	r18,zero,b41c <__alt_data_end+0xf000b41c>
    b6f4:	003f4606 	br	b410 <__alt_data_end+0xf000b410>
    b6f8:	d8c02917 	ldw	r3,164(sp)
    b6fc:	18c00084 	addi	r3,r3,2
    b700:	d8c02e15 	stw	r3,184(sp)
    b704:	1805883a 	mov	r2,r3
    b708:	183e580e 	bge	r3,zero,b06c <__alt_data_end+0xf000b06c>
    b70c:	003fd006 	br	b650 <__alt_data_end+0xf000b650>
    b710:	00800084 	movi	r2,2
    b714:	10c5c83a 	sub	r2,r2,r3
    b718:	003f7506 	br	b4f0 <__alt_data_end+0xf000b4f0>
    b71c:	d8802d17 	ldw	r2,180(sp)
    b720:	d9002d17 	ldw	r4,180(sp)
    b724:	bc400043 	ldbu	r17,1(r23)
    b728:	10800017 	ldw	r2,0(r2)
    b72c:	582f883a 	mov	r23,r11
    b730:	d8802915 	stw	r2,164(sp)
    b734:	20800104 	addi	r2,r4,4
    b738:	d9002917 	ldw	r4,164(sp)
    b73c:	d8802d15 	stw	r2,180(sp)
    b740:	203df00e 	bge	r4,zero,af04 <__alt_data_end+0xf000af04>
    b744:	8c403fcc 	andi	r17,r17,255
    b748:	00bfffc4 	movi	r2,-1
    b74c:	8c40201c 	xori	r17,r17,128
    b750:	d8802915 	stw	r2,164(sp)
    b754:	8c7fe004 	addi	r17,r17,-128
    b758:	00380806 	br	977c <__alt_data_end+0xf000977c>
    b75c:	9080004c 	andi	r2,r18,1
    b760:	0039883a 	mov	fp,zero
    b764:	10000726 	beq	r2,zero,b784 <___svfprintf_internal_r+0x2158>
    b768:	d8c02817 	ldw	r3,160(sp)
    b76c:	dc001dc4 	addi	r16,sp,119
    b770:	00800c04 	movi	r2,48
    b774:	1c07c83a 	sub	r3,r3,r16
    b778:	d8801dc5 	stb	r2,119(sp)
    b77c:	d8c02e15 	stw	r3,184(sp)
    b780:	00395206 	br	9ccc <__alt_data_end+0xf0009ccc>
    b784:	d8002e15 	stw	zero,184(sp)
    b788:	dc001e04 	addi	r16,sp,120
    b78c:	00394f06 	br	9ccc <__alt_data_end+0xf0009ccc>
    b790:	0005883a 	mov	r2,zero
    b794:	003e3206 	br	b060 <__alt_data_end+0xf000b060>
    b798:	dd802617 	ldw	r22,152(sp)
    b79c:	003f0606 	br	b3b8 <__alt_data_end+0xf000b3b8>
    b7a0:	d9c02785 	stb	r7,158(sp)
    b7a4:	003a5106 	br	a0ec <__alt_data_end+0xf000a0ec>
    b7a8:	d9c02785 	stb	r7,158(sp)
    b7ac:	003a3706 	br	a08c <__alt_data_end+0xf000a08c>
    b7b0:	0005883a 	mov	r2,zero
    b7b4:	003f5e06 	br	b530 <__alt_data_end+0xf000b530>
    b7b8:	d9c02785 	stb	r7,158(sp)
    b7bc:	00391706 	br	9c1c <__alt_data_end+0xf0009c1c>
    b7c0:	d9c02785 	stb	r7,158(sp)
    b7c4:	0038e606 	br	9b60 <__alt_data_end+0xf0009b60>
    b7c8:	d8802344 	addi	r2,sp,141
    b7cc:	003f0806 	br	b3f0 <__alt_data_end+0xf000b3f0>
    b7d0:	d9c02785 	stb	r7,158(sp)
    b7d4:	0038b706 	br	9ab4 <__alt_data_end+0xf0009ab4>
    b7d8:	d9c02785 	stb	r7,158(sp)
    b7dc:	003adc06 	br	a350 <__alt_data_end+0xf000a350>
    b7e0:	d9403917 	ldw	r5,228(sp)
    b7e4:	00800304 	movi	r2,12
    b7e8:	28800015 	stw	r2,0(r5)
    b7ec:	00bfffc4 	movi	r2,-1
    b7f0:	00387806 	br	99d4 <__alt_data_end+0xf00099d4>
    b7f4:	d9c02785 	stb	r7,158(sp)
    b7f8:	003abf06 	br	a2f8 <__alt_data_end+0xf000a2f8>
    b7fc:	d9c02785 	stb	r7,158(sp)
    b800:	003a9b06 	br	a270 <__alt_data_end+0xf000a270>

0000b804 <___vfprintf_internal_r>:
    b804:	deffb804 	addi	sp,sp,-288
    b808:	dfc04715 	stw	ra,284(sp)
    b80c:	ddc04515 	stw	r23,276(sp)
    b810:	dd404315 	stw	r21,268(sp)
    b814:	d9002c15 	stw	r4,176(sp)
    b818:	282f883a 	mov	r23,r5
    b81c:	302b883a 	mov	r21,r6
    b820:	d9c02d15 	stw	r7,180(sp)
    b824:	df004615 	stw	fp,280(sp)
    b828:	dd804415 	stw	r22,272(sp)
    b82c:	dd004215 	stw	r20,264(sp)
    b830:	dcc04115 	stw	r19,260(sp)
    b834:	dc804015 	stw	r18,256(sp)
    b838:	dc403f15 	stw	r17,252(sp)
    b83c:	dc003e15 	stw	r16,248(sp)
    b840:	001061c0 	call	1061c <_localeconv_r>
    b844:	10800017 	ldw	r2,0(r2)
    b848:	1009883a 	mov	r4,r2
    b84c:	d8803415 	stw	r2,208(sp)
    b850:	00095940 	call	9594 <strlen>
    b854:	d8803715 	stw	r2,220(sp)
    b858:	d8802c17 	ldw	r2,176(sp)
    b85c:	10000226 	beq	r2,zero,b868 <___vfprintf_internal_r+0x64>
    b860:	10800e17 	ldw	r2,56(r2)
    b864:	1000f926 	beq	r2,zero,bc4c <___vfprintf_internal_r+0x448>
    b868:	b880030b 	ldhu	r2,12(r23)
    b86c:	10c8000c 	andi	r3,r2,8192
    b870:	1800061e 	bne	r3,zero,b88c <___vfprintf_internal_r+0x88>
    b874:	b9001917 	ldw	r4,100(r23)
    b878:	00f7ffc4 	movi	r3,-8193
    b87c:	10880014 	ori	r2,r2,8192
    b880:	20c6703a 	and	r3,r4,r3
    b884:	b880030d 	sth	r2,12(r23)
    b888:	b8c01915 	stw	r3,100(r23)
    b88c:	10c0020c 	andi	r3,r2,8
    b890:	1800c126 	beq	r3,zero,bb98 <___vfprintf_internal_r+0x394>
    b894:	b8c00417 	ldw	r3,16(r23)
    b898:	1800bf26 	beq	r3,zero,bb98 <___vfprintf_internal_r+0x394>
    b89c:	1080068c 	andi	r2,r2,26
    b8a0:	00c00284 	movi	r3,10
    b8a4:	10c0c426 	beq	r2,r3,bbb8 <___vfprintf_internal_r+0x3b4>
    b8a8:	d8c00404 	addi	r3,sp,16
    b8ac:	05020034 	movhi	r20,2048
    b8b0:	d9001e04 	addi	r4,sp,120
    b8b4:	a500e784 	addi	r20,r20,926
    b8b8:	d8c01e15 	stw	r3,120(sp)
    b8bc:	d8002015 	stw	zero,128(sp)
    b8c0:	d8001f15 	stw	zero,124(sp)
    b8c4:	d8003315 	stw	zero,204(sp)
    b8c8:	d8003615 	stw	zero,216(sp)
    b8cc:	d8003815 	stw	zero,224(sp)
    b8d0:	1811883a 	mov	r8,r3
    b8d4:	d8003915 	stw	zero,228(sp)
    b8d8:	d8003a15 	stw	zero,232(sp)
    b8dc:	d8002f15 	stw	zero,188(sp)
    b8e0:	d9002815 	stw	r4,160(sp)
    b8e4:	a8800007 	ldb	r2,0(r21)
    b8e8:	10027b26 	beq	r2,zero,c2d8 <___vfprintf_internal_r+0xad4>
    b8ec:	00c00944 	movi	r3,37
    b8f0:	a821883a 	mov	r16,r21
    b8f4:	10c0021e 	bne	r2,r3,b900 <___vfprintf_internal_r+0xfc>
    b8f8:	00001406 	br	b94c <___vfprintf_internal_r+0x148>
    b8fc:	10c00326 	beq	r2,r3,b90c <___vfprintf_internal_r+0x108>
    b900:	84000044 	addi	r16,r16,1
    b904:	80800007 	ldb	r2,0(r16)
    b908:	103ffc1e 	bne	r2,zero,b8fc <__alt_data_end+0xf000b8fc>
    b90c:	8563c83a 	sub	r17,r16,r21
    b910:	88000e26 	beq	r17,zero,b94c <___vfprintf_internal_r+0x148>
    b914:	d8c02017 	ldw	r3,128(sp)
    b918:	d8801f17 	ldw	r2,124(sp)
    b91c:	45400015 	stw	r21,0(r8)
    b920:	1c47883a 	add	r3,r3,r17
    b924:	10800044 	addi	r2,r2,1
    b928:	d8c02015 	stw	r3,128(sp)
    b92c:	44400115 	stw	r17,4(r8)
    b930:	d8801f15 	stw	r2,124(sp)
    b934:	00c001c4 	movi	r3,7
    b938:	1880a716 	blt	r3,r2,bbd8 <___vfprintf_internal_r+0x3d4>
    b93c:	42000204 	addi	r8,r8,8
    b940:	d9402f17 	ldw	r5,188(sp)
    b944:	2c4b883a 	add	r5,r5,r17
    b948:	d9402f15 	stw	r5,188(sp)
    b94c:	80800007 	ldb	r2,0(r16)
    b950:	1000a826 	beq	r2,zero,bbf4 <___vfprintf_internal_r+0x3f0>
    b954:	84400047 	ldb	r17,1(r16)
    b958:	00bfffc4 	movi	r2,-1
    b95c:	85400044 	addi	r21,r16,1
    b960:	d8002785 	stb	zero,158(sp)
    b964:	0007883a 	mov	r3,zero
    b968:	000f883a 	mov	r7,zero
    b96c:	d8802915 	stw	r2,164(sp)
    b970:	d8003115 	stw	zero,196(sp)
    b974:	0025883a 	mov	r18,zero
    b978:	01401604 	movi	r5,88
    b97c:	01800244 	movi	r6,9
    b980:	02800a84 	movi	r10,42
    b984:	02401b04 	movi	r9,108
    b988:	ad400044 	addi	r21,r21,1
    b98c:	88bff804 	addi	r2,r17,-32
    b990:	28830436 	bltu	r5,r2,c5a4 <___vfprintf_internal_r+0xda0>
    b994:	100490ba 	slli	r2,r2,2
    b998:	01000074 	movhi	r4,1
    b99c:	212e6b04 	addi	r4,r4,-18004
    b9a0:	1105883a 	add	r2,r2,r4
    b9a4:	10800017 	ldw	r2,0(r2)
    b9a8:	1000683a 	jmp	r2
    b9ac:	0000c4c4 	movi	zero,787
    b9b0:	0000c5a4 	muli	zero,zero,790
    b9b4:	0000c5a4 	muli	zero,zero,790
    b9b8:	0000c4e4 	muli	zero,zero,787
    b9bc:	0000c5a4 	muli	zero,zero,790
    b9c0:	0000c5a4 	muli	zero,zero,790
    b9c4:	0000c5a4 	muli	zero,zero,790
    b9c8:	0000c5a4 	muli	zero,zero,790
    b9cc:	0000c5a4 	muli	zero,zero,790
    b9d0:	0000c5a4 	muli	zero,zero,790
    b9d4:	0000bc58 	cmpnei	zero,zero,753
    b9d8:	0000c400 	call	c40 <xEventGroupWaitBits+0x18c>
    b9dc:	0000c5a4 	muli	zero,zero,790
    b9e0:	0000bb20 	cmpeqi	zero,zero,748
    b9e4:	0000bc80 	call	bc8 <xEventGroupWaitBits+0x114>
    b9e8:	0000c5a4 	muli	zero,zero,790
    b9ec:	0000bcc0 	call	bcc <xEventGroupWaitBits+0x118>
    b9f0:	0000bccc 	andi	zero,zero,755
    b9f4:	0000bccc 	andi	zero,zero,755
    b9f8:	0000bccc 	andi	zero,zero,755
    b9fc:	0000bccc 	andi	zero,zero,755
    ba00:	0000bccc 	andi	zero,zero,755
    ba04:	0000bccc 	andi	zero,zero,755
    ba08:	0000bccc 	andi	zero,zero,755
    ba0c:	0000bccc 	andi	zero,zero,755
    ba10:	0000bccc 	andi	zero,zero,755
    ba14:	0000c5a4 	muli	zero,zero,790
    ba18:	0000c5a4 	muli	zero,zero,790
    ba1c:	0000c5a4 	muli	zero,zero,790
    ba20:	0000c5a4 	muli	zero,zero,790
    ba24:	0000c5a4 	muli	zero,zero,790
    ba28:	0000c5a4 	muli	zero,zero,790
    ba2c:	0000c5a4 	muli	zero,zero,790
    ba30:	0000c5a4 	muli	zero,zero,790
    ba34:	0000c5a4 	muli	zero,zero,790
    ba38:	0000c5a4 	muli	zero,zero,790
    ba3c:	0000bd00 	call	bd0 <xEventGroupWaitBits+0x11c>
    ba40:	0000bdbc 	xorhi	zero,zero,758
    ba44:	0000c5a4 	muli	zero,zero,790
    ba48:	0000bdbc 	xorhi	zero,zero,758
    ba4c:	0000c5a4 	muli	zero,zero,790
    ba50:	0000c5a4 	muli	zero,zero,790
    ba54:	0000c5a4 	muli	zero,zero,790
    ba58:	0000c5a4 	muli	zero,zero,790
    ba5c:	0000be5c 	xori	zero,zero,761
    ba60:	0000c5a4 	muli	zero,zero,790
    ba64:	0000c5a4 	muli	zero,zero,790
    ba68:	0000be68 	cmpgeui	zero,zero,761
    ba6c:	0000c5a4 	muli	zero,zero,790
    ba70:	0000c5a4 	muli	zero,zero,790
    ba74:	0000c5a4 	muli	zero,zero,790
    ba78:	0000c5a4 	muli	zero,zero,790
    ba7c:	0000c5a4 	muli	zero,zero,790
    ba80:	0000c2e0 	cmpeqi	zero,zero,779
    ba84:	0000c5a4 	muli	zero,zero,790
    ba88:	0000c5a4 	muli	zero,zero,790
    ba8c:	0000c340 	call	c34 <xEventGroupWaitBits+0x180>
    ba90:	0000c5a4 	muli	zero,zero,790
    ba94:	0000c5a4 	muli	zero,zero,790
    ba98:	0000c5a4 	muli	zero,zero,790
    ba9c:	0000c5a4 	muli	zero,zero,790
    baa0:	0000c5a4 	muli	zero,zero,790
    baa4:	0000c5a4 	muli	zero,zero,790
    baa8:	0000c5a4 	muli	zero,zero,790
    baac:	0000c5a4 	muli	zero,zero,790
    bab0:	0000c5a4 	muli	zero,zero,790
    bab4:	0000c5a4 	muli	zero,zero,790
    bab8:	0000c550 	cmplti	zero,zero,789
    babc:	0000c4f0 	cmpltui	zero,zero,787
    bac0:	0000bdbc 	xorhi	zero,zero,758
    bac4:	0000bdbc 	xorhi	zero,zero,758
    bac8:	0000bdbc 	xorhi	zero,zero,758
    bacc:	0000c500 	call	c50 <xEventGroupClearBits>
    bad0:	0000c4f0 	cmpltui	zero,zero,787
    bad4:	0000c5a4 	muli	zero,zero,790
    bad8:	0000c5a4 	muli	zero,zero,790
    badc:	0000c50c 	andi	zero,zero,788
    bae0:	0000c5a4 	muli	zero,zero,790
    bae4:	0000c51c 	xori	zero,zero,788
    bae8:	0000c3f0 	cmpltui	zero,zero,783
    baec:	0000bb2c 	andhi	zero,zero,748
    baf0:	0000c410 	cmplti	zero,zero,784
    baf4:	0000c5a4 	muli	zero,zero,790
    baf8:	0000c41c 	xori	zero,zero,784
    bafc:	0000c5a4 	muli	zero,zero,790
    bb00:	0000c478 	rdprs	zero,zero,785
    bb04:	0000c5a4 	muli	zero,zero,790
    bb08:	0000c5a4 	muli	zero,zero,790
    bb0c:	0000c488 	cmpgei	zero,zero,786
    bb10:	d9003117 	ldw	r4,196(sp)
    bb14:	d8802d15 	stw	r2,180(sp)
    bb18:	0109c83a 	sub	r4,zero,r4
    bb1c:	d9003115 	stw	r4,196(sp)
    bb20:	94800114 	ori	r18,r18,4
    bb24:	ac400007 	ldb	r17,0(r21)
    bb28:	003f9706 	br	b988 <__alt_data_end+0xf000b988>
    bb2c:	00800c04 	movi	r2,48
    bb30:	d9002d17 	ldw	r4,180(sp)
    bb34:	d9402917 	ldw	r5,164(sp)
    bb38:	d8802705 	stb	r2,156(sp)
    bb3c:	00801e04 	movi	r2,120
    bb40:	d8802745 	stb	r2,157(sp)
    bb44:	d8002785 	stb	zero,158(sp)
    bb48:	20c00104 	addi	r3,r4,4
    bb4c:	24c00017 	ldw	r19,0(r4)
    bb50:	002d883a 	mov	r22,zero
    bb54:	90800094 	ori	r2,r18,2
    bb58:	28029a16 	blt	r5,zero,c5c4 <___vfprintf_internal_r+0xdc0>
    bb5c:	00bfdfc4 	movi	r2,-129
    bb60:	90a4703a 	and	r18,r18,r2
    bb64:	d8c02d15 	stw	r3,180(sp)
    bb68:	94800094 	ori	r18,r18,2
    bb6c:	9802871e 	bne	r19,zero,c58c <___vfprintf_internal_r+0xd88>
    bb70:	00820034 	movhi	r2,2048
    bb74:	1080d804 	addi	r2,r2,864
    bb78:	d8803915 	stw	r2,228(sp)
    bb7c:	04401e04 	movi	r17,120
    bb80:	d8802917 	ldw	r2,164(sp)
    bb84:	0039883a 	mov	fp,zero
    bb88:	1001e926 	beq	r2,zero,c330 <___vfprintf_internal_r+0xb2c>
    bb8c:	0027883a 	mov	r19,zero
    bb90:	002d883a 	mov	r22,zero
    bb94:	00020506 	br	c3ac <___vfprintf_internal_r+0xba8>
    bb98:	d9002c17 	ldw	r4,176(sp)
    bb9c:	b80b883a 	mov	r5,r23
    bba0:	000dad40 	call	dad4 <__swsetup_r>
    bba4:	1005ac1e 	bne	r2,zero,d258 <___vfprintf_internal_r+0x1a54>
    bba8:	b880030b 	ldhu	r2,12(r23)
    bbac:	00c00284 	movi	r3,10
    bbb0:	1080068c 	andi	r2,r2,26
    bbb4:	10ff3c1e 	bne	r2,r3,b8a8 <__alt_data_end+0xf000b8a8>
    bbb8:	b880038f 	ldh	r2,14(r23)
    bbbc:	103f3a16 	blt	r2,zero,b8a8 <__alt_data_end+0xf000b8a8>
    bbc0:	d9c02d17 	ldw	r7,180(sp)
    bbc4:	d9002c17 	ldw	r4,176(sp)
    bbc8:	a80d883a 	mov	r6,r21
    bbcc:	b80b883a 	mov	r5,r23
    bbd0:	000da180 	call	da18 <__sbprintf>
    bbd4:	00001106 	br	bc1c <___vfprintf_internal_r+0x418>
    bbd8:	d9002c17 	ldw	r4,176(sp)
    bbdc:	d9801e04 	addi	r6,sp,120
    bbe0:	b80b883a 	mov	r5,r23
    bbe4:	0013f9c0 	call	13f9c <__sprint_r>
    bbe8:	1000081e 	bne	r2,zero,bc0c <___vfprintf_internal_r+0x408>
    bbec:	da000404 	addi	r8,sp,16
    bbf0:	003f5306 	br	b940 <__alt_data_end+0xf000b940>
    bbf4:	d8802017 	ldw	r2,128(sp)
    bbf8:	10000426 	beq	r2,zero,bc0c <___vfprintf_internal_r+0x408>
    bbfc:	d9002c17 	ldw	r4,176(sp)
    bc00:	d9801e04 	addi	r6,sp,120
    bc04:	b80b883a 	mov	r5,r23
    bc08:	0013f9c0 	call	13f9c <__sprint_r>
    bc0c:	b880030b 	ldhu	r2,12(r23)
    bc10:	1080100c 	andi	r2,r2,64
    bc14:	1005901e 	bne	r2,zero,d258 <___vfprintf_internal_r+0x1a54>
    bc18:	d8802f17 	ldw	r2,188(sp)
    bc1c:	dfc04717 	ldw	ra,284(sp)
    bc20:	df004617 	ldw	fp,280(sp)
    bc24:	ddc04517 	ldw	r23,276(sp)
    bc28:	dd804417 	ldw	r22,272(sp)
    bc2c:	dd404317 	ldw	r21,268(sp)
    bc30:	dd004217 	ldw	r20,264(sp)
    bc34:	dcc04117 	ldw	r19,260(sp)
    bc38:	dc804017 	ldw	r18,256(sp)
    bc3c:	dc403f17 	ldw	r17,252(sp)
    bc40:	dc003e17 	ldw	r16,248(sp)
    bc44:	dec04804 	addi	sp,sp,288
    bc48:	f800283a 	ret
    bc4c:	d9002c17 	ldw	r4,176(sp)
    bc50:	000faa80 	call	faa8 <__sinit>
    bc54:	003f0406 	br	b868 <__alt_data_end+0xf000b868>
    bc58:	d8802d17 	ldw	r2,180(sp)
    bc5c:	d9002d17 	ldw	r4,180(sp)
    bc60:	10800017 	ldw	r2,0(r2)
    bc64:	d8803115 	stw	r2,196(sp)
    bc68:	20800104 	addi	r2,r4,4
    bc6c:	d9003117 	ldw	r4,196(sp)
    bc70:	203fa716 	blt	r4,zero,bb10 <__alt_data_end+0xf000bb10>
    bc74:	d8802d15 	stw	r2,180(sp)
    bc78:	ac400007 	ldb	r17,0(r21)
    bc7c:	003f4206 	br	b988 <__alt_data_end+0xf000b988>
    bc80:	ac400007 	ldb	r17,0(r21)
    bc84:	aac00044 	addi	r11,r21,1
    bc88:	8a872826 	beq	r17,r10,d92c <___vfprintf_internal_r+0x2128>
    bc8c:	88bff404 	addi	r2,r17,-48
    bc90:	0009883a 	mov	r4,zero
    bc94:	30867d36 	bltu	r6,r2,d68c <___vfprintf_internal_r+0x1e88>
    bc98:	5c400007 	ldb	r17,0(r11)
    bc9c:	210002a4 	muli	r4,r4,10
    bca0:	5d400044 	addi	r21,r11,1
    bca4:	a817883a 	mov	r11,r21
    bca8:	2089883a 	add	r4,r4,r2
    bcac:	88bff404 	addi	r2,r17,-48
    bcb0:	30bff92e 	bgeu	r6,r2,bc98 <__alt_data_end+0xf000bc98>
    bcb4:	2005c916 	blt	r4,zero,d3dc <___vfprintf_internal_r+0x1bd8>
    bcb8:	d9002915 	stw	r4,164(sp)
    bcbc:	003f3306 	br	b98c <__alt_data_end+0xf000b98c>
    bcc0:	94802014 	ori	r18,r18,128
    bcc4:	ac400007 	ldb	r17,0(r21)
    bcc8:	003f2f06 	br	b988 <__alt_data_end+0xf000b988>
    bccc:	a809883a 	mov	r4,r21
    bcd0:	d8003115 	stw	zero,196(sp)
    bcd4:	88bff404 	addi	r2,r17,-48
    bcd8:	0017883a 	mov	r11,zero
    bcdc:	24400007 	ldb	r17,0(r4)
    bce0:	5ac002a4 	muli	r11,r11,10
    bce4:	ad400044 	addi	r21,r21,1
    bce8:	a809883a 	mov	r4,r21
    bcec:	12d7883a 	add	r11,r2,r11
    bcf0:	88bff404 	addi	r2,r17,-48
    bcf4:	30bff92e 	bgeu	r6,r2,bcdc <__alt_data_end+0xf000bcdc>
    bcf8:	dac03115 	stw	r11,196(sp)
    bcfc:	003f2306 	br	b98c <__alt_data_end+0xf000b98c>
    bd00:	18c03fcc 	andi	r3,r3,255
    bd04:	18072b1e 	bne	r3,zero,d9b4 <___vfprintf_internal_r+0x21b0>
    bd08:	94800414 	ori	r18,r18,16
    bd0c:	9080080c 	andi	r2,r18,32
    bd10:	10037b26 	beq	r2,zero,cb00 <___vfprintf_internal_r+0x12fc>
    bd14:	d9402d17 	ldw	r5,180(sp)
    bd18:	28800117 	ldw	r2,4(r5)
    bd1c:	2cc00017 	ldw	r19,0(r5)
    bd20:	29400204 	addi	r5,r5,8
    bd24:	d9402d15 	stw	r5,180(sp)
    bd28:	102d883a 	mov	r22,r2
    bd2c:	10044b16 	blt	r2,zero,ce5c <___vfprintf_internal_r+0x1658>
    bd30:	d9402917 	ldw	r5,164(sp)
    bd34:	df002783 	ldbu	fp,158(sp)
    bd38:	2803bc16 	blt	r5,zero,cc2c <___vfprintf_internal_r+0x1428>
    bd3c:	00ffdfc4 	movi	r3,-129
    bd40:	9d84b03a 	or	r2,r19,r22
    bd44:	90e4703a 	and	r18,r18,r3
    bd48:	10017726 	beq	r2,zero,c328 <___vfprintf_internal_r+0xb24>
    bd4c:	b0038326 	beq	r22,zero,cb5c <___vfprintf_internal_r+0x1358>
    bd50:	dc402a15 	stw	r17,168(sp)
    bd54:	dc001e04 	addi	r16,sp,120
    bd58:	b023883a 	mov	r17,r22
    bd5c:	402d883a 	mov	r22,r8
    bd60:	9809883a 	mov	r4,r19
    bd64:	880b883a 	mov	r5,r17
    bd68:	01800284 	movi	r6,10
    bd6c:	000f883a 	mov	r7,zero
    bd70:	00163940 	call	16394 <__umoddi3>
    bd74:	10800c04 	addi	r2,r2,48
    bd78:	843fffc4 	addi	r16,r16,-1
    bd7c:	9809883a 	mov	r4,r19
    bd80:	880b883a 	mov	r5,r17
    bd84:	80800005 	stb	r2,0(r16)
    bd88:	01800284 	movi	r6,10
    bd8c:	000f883a 	mov	r7,zero
    bd90:	0015e1c0 	call	15e1c <__udivdi3>
    bd94:	1027883a 	mov	r19,r2
    bd98:	10c4b03a 	or	r2,r2,r3
    bd9c:	1823883a 	mov	r17,r3
    bda0:	103fef1e 	bne	r2,zero,bd60 <__alt_data_end+0xf000bd60>
    bda4:	d8c02817 	ldw	r3,160(sp)
    bda8:	dc402a17 	ldw	r17,168(sp)
    bdac:	b011883a 	mov	r8,r22
    bdb0:	1c07c83a 	sub	r3,r3,r16
    bdb4:	d8c02e15 	stw	r3,184(sp)
    bdb8:	00005906 	br	bf20 <___vfprintf_internal_r+0x71c>
    bdbc:	18c03fcc 	andi	r3,r3,255
    bdc0:	1806fa1e 	bne	r3,zero,d9ac <___vfprintf_internal_r+0x21a8>
    bdc4:	9080020c 	andi	r2,r18,8
    bdc8:	10048a26 	beq	r2,zero,cff4 <___vfprintf_internal_r+0x17f0>
    bdcc:	d8c02d17 	ldw	r3,180(sp)
    bdd0:	d9002d17 	ldw	r4,180(sp)
    bdd4:	d9402d17 	ldw	r5,180(sp)
    bdd8:	18c00017 	ldw	r3,0(r3)
    bddc:	21000117 	ldw	r4,4(r4)
    bde0:	29400204 	addi	r5,r5,8
    bde4:	d8c03615 	stw	r3,216(sp)
    bde8:	d9003815 	stw	r4,224(sp)
    bdec:	d9402d15 	stw	r5,180(sp)
    bdf0:	d9003617 	ldw	r4,216(sp)
    bdf4:	d9403817 	ldw	r5,224(sp)
    bdf8:	da003d15 	stw	r8,244(sp)
    bdfc:	04000044 	movi	r16,1
    be00:	00127b40 	call	127b4 <__fpclassifyd>
    be04:	da003d17 	ldw	r8,244(sp)
    be08:	14041f1e 	bne	r2,r16,ce88 <___vfprintf_internal_r+0x1684>
    be0c:	d9003617 	ldw	r4,216(sp)
    be10:	d9403817 	ldw	r5,224(sp)
    be14:	000d883a 	mov	r6,zero
    be18:	000f883a 	mov	r7,zero
    be1c:	00172000 	call	17200 <__ledf2>
    be20:	da003d17 	ldw	r8,244(sp)
    be24:	1005be16 	blt	r2,zero,d520 <___vfprintf_internal_r+0x1d1c>
    be28:	df002783 	ldbu	fp,158(sp)
    be2c:	008011c4 	movi	r2,71
    be30:	1445330e 	bge	r2,r17,d300 <___vfprintf_internal_r+0x1afc>
    be34:	04020034 	movhi	r16,2048
    be38:	8400d004 	addi	r16,r16,832
    be3c:	00c000c4 	movi	r3,3
    be40:	00bfdfc4 	movi	r2,-129
    be44:	d8c02a15 	stw	r3,168(sp)
    be48:	90a4703a 	and	r18,r18,r2
    be4c:	d8c02e15 	stw	r3,184(sp)
    be50:	d8002915 	stw	zero,164(sp)
    be54:	d8003215 	stw	zero,200(sp)
    be58:	00003706 	br	bf38 <___vfprintf_internal_r+0x734>
    be5c:	94800214 	ori	r18,r18,8
    be60:	ac400007 	ldb	r17,0(r21)
    be64:	003ec806 	br	b988 <__alt_data_end+0xf000b988>
    be68:	18c03fcc 	andi	r3,r3,255
    be6c:	1806db1e 	bne	r3,zero,d9dc <___vfprintf_internal_r+0x21d8>
    be70:	94800414 	ori	r18,r18,16
    be74:	9080080c 	andi	r2,r18,32
    be78:	1002d826 	beq	r2,zero,c9dc <___vfprintf_internal_r+0x11d8>
    be7c:	d9402d17 	ldw	r5,180(sp)
    be80:	d8c02917 	ldw	r3,164(sp)
    be84:	d8002785 	stb	zero,158(sp)
    be88:	28800204 	addi	r2,r5,8
    be8c:	2cc00017 	ldw	r19,0(r5)
    be90:	2d800117 	ldw	r22,4(r5)
    be94:	18048f16 	blt	r3,zero,d0d4 <___vfprintf_internal_r+0x18d0>
    be98:	013fdfc4 	movi	r4,-129
    be9c:	9d86b03a 	or	r3,r19,r22
    bea0:	d8802d15 	stw	r2,180(sp)
    bea4:	9124703a 	and	r18,r18,r4
    bea8:	1802d91e 	bne	r3,zero,ca10 <___vfprintf_internal_r+0x120c>
    beac:	d8c02917 	ldw	r3,164(sp)
    beb0:	0039883a 	mov	fp,zero
    beb4:	1805c326 	beq	r3,zero,d5c4 <___vfprintf_internal_r+0x1dc0>
    beb8:	0027883a 	mov	r19,zero
    bebc:	002d883a 	mov	r22,zero
    bec0:	dc001e04 	addi	r16,sp,120
    bec4:	9806d0fa 	srli	r3,r19,3
    bec8:	b008977a 	slli	r4,r22,29
    becc:	b02cd0fa 	srli	r22,r22,3
    bed0:	9cc001cc 	andi	r19,r19,7
    bed4:	98800c04 	addi	r2,r19,48
    bed8:	843fffc4 	addi	r16,r16,-1
    bedc:	20e6b03a 	or	r19,r4,r3
    bee0:	80800005 	stb	r2,0(r16)
    bee4:	9d86b03a 	or	r3,r19,r22
    bee8:	183ff61e 	bne	r3,zero,bec4 <__alt_data_end+0xf000bec4>
    beec:	90c0004c 	andi	r3,r18,1
    bef0:	18013b26 	beq	r3,zero,c3e0 <___vfprintf_internal_r+0xbdc>
    bef4:	10803fcc 	andi	r2,r2,255
    bef8:	1080201c 	xori	r2,r2,128
    befc:	10bfe004 	addi	r2,r2,-128
    bf00:	00c00c04 	movi	r3,48
    bf04:	10c13626 	beq	r2,r3,c3e0 <___vfprintf_internal_r+0xbdc>
    bf08:	80ffffc5 	stb	r3,-1(r16)
    bf0c:	d8c02817 	ldw	r3,160(sp)
    bf10:	80bfffc4 	addi	r2,r16,-1
    bf14:	1021883a 	mov	r16,r2
    bf18:	1887c83a 	sub	r3,r3,r2
    bf1c:	d8c02e15 	stw	r3,184(sp)
    bf20:	d8802e17 	ldw	r2,184(sp)
    bf24:	d9002917 	ldw	r4,164(sp)
    bf28:	1100010e 	bge	r2,r4,bf30 <___vfprintf_internal_r+0x72c>
    bf2c:	2005883a 	mov	r2,r4
    bf30:	d8802a15 	stw	r2,168(sp)
    bf34:	d8003215 	stw	zero,200(sp)
    bf38:	e7003fcc 	andi	fp,fp,255
    bf3c:	e700201c 	xori	fp,fp,128
    bf40:	e73fe004 	addi	fp,fp,-128
    bf44:	e0000326 	beq	fp,zero,bf54 <___vfprintf_internal_r+0x750>
    bf48:	d8c02a17 	ldw	r3,168(sp)
    bf4c:	18c00044 	addi	r3,r3,1
    bf50:	d8c02a15 	stw	r3,168(sp)
    bf54:	90c0008c 	andi	r3,r18,2
    bf58:	d8c02b15 	stw	r3,172(sp)
    bf5c:	18000326 	beq	r3,zero,bf6c <___vfprintf_internal_r+0x768>
    bf60:	d8c02a17 	ldw	r3,168(sp)
    bf64:	18c00084 	addi	r3,r3,2
    bf68:	d8c02a15 	stw	r3,168(sp)
    bf6c:	90c0210c 	andi	r3,r18,132
    bf70:	d8c03015 	stw	r3,192(sp)
    bf74:	1801a31e 	bne	r3,zero,c604 <___vfprintf_internal_r+0xe00>
    bf78:	d9003117 	ldw	r4,196(sp)
    bf7c:	d8c02a17 	ldw	r3,168(sp)
    bf80:	20e7c83a 	sub	r19,r4,r3
    bf84:	04c19f0e 	bge	zero,r19,c604 <___vfprintf_internal_r+0xe00>
    bf88:	02400404 	movi	r9,16
    bf8c:	d8c02017 	ldw	r3,128(sp)
    bf90:	d8801f17 	ldw	r2,124(sp)
    bf94:	4cc50d0e 	bge	r9,r19,d3cc <___vfprintf_internal_r+0x1bc8>
    bf98:	01420034 	movhi	r5,2048
    bf9c:	2940eb84 	addi	r5,r5,942
    bfa0:	dc403b15 	stw	r17,236(sp)
    bfa4:	d9403515 	stw	r5,212(sp)
    bfa8:	9823883a 	mov	r17,r19
    bfac:	482d883a 	mov	r22,r9
    bfb0:	9027883a 	mov	r19,r18
    bfb4:	070001c4 	movi	fp,7
    bfb8:	8025883a 	mov	r18,r16
    bfbc:	dc002c17 	ldw	r16,176(sp)
    bfc0:	00000306 	br	bfd0 <___vfprintf_internal_r+0x7cc>
    bfc4:	8c7ffc04 	addi	r17,r17,-16
    bfc8:	42000204 	addi	r8,r8,8
    bfcc:	b440130e 	bge	r22,r17,c01c <___vfprintf_internal_r+0x818>
    bfd0:	01020034 	movhi	r4,2048
    bfd4:	18c00404 	addi	r3,r3,16
    bfd8:	10800044 	addi	r2,r2,1
    bfdc:	2100eb84 	addi	r4,r4,942
    bfe0:	41000015 	stw	r4,0(r8)
    bfe4:	45800115 	stw	r22,4(r8)
    bfe8:	d8c02015 	stw	r3,128(sp)
    bfec:	d8801f15 	stw	r2,124(sp)
    bff0:	e0bff40e 	bge	fp,r2,bfc4 <__alt_data_end+0xf000bfc4>
    bff4:	d9801e04 	addi	r6,sp,120
    bff8:	b80b883a 	mov	r5,r23
    bffc:	8009883a 	mov	r4,r16
    c000:	0013f9c0 	call	13f9c <__sprint_r>
    c004:	103f011e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c008:	8c7ffc04 	addi	r17,r17,-16
    c00c:	d8c02017 	ldw	r3,128(sp)
    c010:	d8801f17 	ldw	r2,124(sp)
    c014:	da000404 	addi	r8,sp,16
    c018:	b47fed16 	blt	r22,r17,bfd0 <__alt_data_end+0xf000bfd0>
    c01c:	9021883a 	mov	r16,r18
    c020:	9825883a 	mov	r18,r19
    c024:	8827883a 	mov	r19,r17
    c028:	dc403b17 	ldw	r17,236(sp)
    c02c:	d9403517 	ldw	r5,212(sp)
    c030:	98c7883a 	add	r3,r19,r3
    c034:	10800044 	addi	r2,r2,1
    c038:	41400015 	stw	r5,0(r8)
    c03c:	44c00115 	stw	r19,4(r8)
    c040:	d8c02015 	stw	r3,128(sp)
    c044:	d8801f15 	stw	r2,124(sp)
    c048:	010001c4 	movi	r4,7
    c04c:	2082a316 	blt	r4,r2,cadc <___vfprintf_internal_r+0x12d8>
    c050:	df002787 	ldb	fp,158(sp)
    c054:	42000204 	addi	r8,r8,8
    c058:	e0000c26 	beq	fp,zero,c08c <___vfprintf_internal_r+0x888>
    c05c:	d8801f17 	ldw	r2,124(sp)
    c060:	d9002784 	addi	r4,sp,158
    c064:	18c00044 	addi	r3,r3,1
    c068:	10800044 	addi	r2,r2,1
    c06c:	41000015 	stw	r4,0(r8)
    c070:	01000044 	movi	r4,1
    c074:	41000115 	stw	r4,4(r8)
    c078:	d8c02015 	stw	r3,128(sp)
    c07c:	d8801f15 	stw	r2,124(sp)
    c080:	010001c4 	movi	r4,7
    c084:	20823c16 	blt	r4,r2,c978 <___vfprintf_internal_r+0x1174>
    c088:	42000204 	addi	r8,r8,8
    c08c:	d8802b17 	ldw	r2,172(sp)
    c090:	10000c26 	beq	r2,zero,c0c4 <___vfprintf_internal_r+0x8c0>
    c094:	d8801f17 	ldw	r2,124(sp)
    c098:	d9002704 	addi	r4,sp,156
    c09c:	18c00084 	addi	r3,r3,2
    c0a0:	10800044 	addi	r2,r2,1
    c0a4:	41000015 	stw	r4,0(r8)
    c0a8:	01000084 	movi	r4,2
    c0ac:	41000115 	stw	r4,4(r8)
    c0b0:	d8c02015 	stw	r3,128(sp)
    c0b4:	d8801f15 	stw	r2,124(sp)
    c0b8:	010001c4 	movi	r4,7
    c0bc:	20823616 	blt	r4,r2,c998 <___vfprintf_internal_r+0x1194>
    c0c0:	42000204 	addi	r8,r8,8
    c0c4:	d9003017 	ldw	r4,192(sp)
    c0c8:	00802004 	movi	r2,128
    c0cc:	20819926 	beq	r4,r2,c734 <___vfprintf_internal_r+0xf30>
    c0d0:	d9402917 	ldw	r5,164(sp)
    c0d4:	d8802e17 	ldw	r2,184(sp)
    c0d8:	28adc83a 	sub	r22,r5,r2
    c0dc:	0580310e 	bge	zero,r22,c1a4 <___vfprintf_internal_r+0x9a0>
    c0e0:	07000404 	movi	fp,16
    c0e4:	d8801f17 	ldw	r2,124(sp)
    c0e8:	e584140e 	bge	fp,r22,d13c <___vfprintf_internal_r+0x1938>
    c0ec:	01420034 	movhi	r5,2048
    c0f0:	2940e784 	addi	r5,r5,926
    c0f4:	dc402915 	stw	r17,164(sp)
    c0f8:	d9402b15 	stw	r5,172(sp)
    c0fc:	b023883a 	mov	r17,r22
    c100:	04c001c4 	movi	r19,7
    c104:	a82d883a 	mov	r22,r21
    c108:	902b883a 	mov	r21,r18
    c10c:	8025883a 	mov	r18,r16
    c110:	dc002c17 	ldw	r16,176(sp)
    c114:	00000306 	br	c124 <___vfprintf_internal_r+0x920>
    c118:	8c7ffc04 	addi	r17,r17,-16
    c11c:	42000204 	addi	r8,r8,8
    c120:	e440110e 	bge	fp,r17,c168 <___vfprintf_internal_r+0x964>
    c124:	18c00404 	addi	r3,r3,16
    c128:	10800044 	addi	r2,r2,1
    c12c:	45000015 	stw	r20,0(r8)
    c130:	47000115 	stw	fp,4(r8)
    c134:	d8c02015 	stw	r3,128(sp)
    c138:	d8801f15 	stw	r2,124(sp)
    c13c:	98bff60e 	bge	r19,r2,c118 <__alt_data_end+0xf000c118>
    c140:	d9801e04 	addi	r6,sp,120
    c144:	b80b883a 	mov	r5,r23
    c148:	8009883a 	mov	r4,r16
    c14c:	0013f9c0 	call	13f9c <__sprint_r>
    c150:	103eae1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c154:	8c7ffc04 	addi	r17,r17,-16
    c158:	d8c02017 	ldw	r3,128(sp)
    c15c:	d8801f17 	ldw	r2,124(sp)
    c160:	da000404 	addi	r8,sp,16
    c164:	e47fef16 	blt	fp,r17,c124 <__alt_data_end+0xf000c124>
    c168:	9021883a 	mov	r16,r18
    c16c:	a825883a 	mov	r18,r21
    c170:	b02b883a 	mov	r21,r22
    c174:	882d883a 	mov	r22,r17
    c178:	dc402917 	ldw	r17,164(sp)
    c17c:	d9002b17 	ldw	r4,172(sp)
    c180:	1d87883a 	add	r3,r3,r22
    c184:	10800044 	addi	r2,r2,1
    c188:	41000015 	stw	r4,0(r8)
    c18c:	45800115 	stw	r22,4(r8)
    c190:	d8c02015 	stw	r3,128(sp)
    c194:	d8801f15 	stw	r2,124(sp)
    c198:	010001c4 	movi	r4,7
    c19c:	2081ee16 	blt	r4,r2,c958 <___vfprintf_internal_r+0x1154>
    c1a0:	42000204 	addi	r8,r8,8
    c1a4:	9080400c 	andi	r2,r18,256
    c1a8:	1001181e 	bne	r2,zero,c60c <___vfprintf_internal_r+0xe08>
    c1ac:	d9402e17 	ldw	r5,184(sp)
    c1b0:	d8801f17 	ldw	r2,124(sp)
    c1b4:	44000015 	stw	r16,0(r8)
    c1b8:	1947883a 	add	r3,r3,r5
    c1bc:	10800044 	addi	r2,r2,1
    c1c0:	41400115 	stw	r5,4(r8)
    c1c4:	d8c02015 	stw	r3,128(sp)
    c1c8:	d8801f15 	stw	r2,124(sp)
    c1cc:	010001c4 	movi	r4,7
    c1d0:	2081d316 	blt	r4,r2,c920 <___vfprintf_internal_r+0x111c>
    c1d4:	42000204 	addi	r8,r8,8
    c1d8:	9480010c 	andi	r18,r18,4
    c1dc:	90003226 	beq	r18,zero,c2a8 <___vfprintf_internal_r+0xaa4>
    c1e0:	d9403117 	ldw	r5,196(sp)
    c1e4:	d8802a17 	ldw	r2,168(sp)
    c1e8:	28a1c83a 	sub	r16,r5,r2
    c1ec:	04002e0e 	bge	zero,r16,c2a8 <___vfprintf_internal_r+0xaa4>
    c1f0:	04400404 	movi	r17,16
    c1f4:	d8801f17 	ldw	r2,124(sp)
    c1f8:	8c04a20e 	bge	r17,r16,d484 <___vfprintf_internal_r+0x1c80>
    c1fc:	01420034 	movhi	r5,2048
    c200:	2940eb84 	addi	r5,r5,942
    c204:	d9403515 	stw	r5,212(sp)
    c208:	048001c4 	movi	r18,7
    c20c:	dcc02c17 	ldw	r19,176(sp)
    c210:	00000306 	br	c220 <___vfprintf_internal_r+0xa1c>
    c214:	843ffc04 	addi	r16,r16,-16
    c218:	42000204 	addi	r8,r8,8
    c21c:	8c00130e 	bge	r17,r16,c26c <___vfprintf_internal_r+0xa68>
    c220:	01020034 	movhi	r4,2048
    c224:	18c00404 	addi	r3,r3,16
    c228:	10800044 	addi	r2,r2,1
    c22c:	2100eb84 	addi	r4,r4,942
    c230:	41000015 	stw	r4,0(r8)
    c234:	44400115 	stw	r17,4(r8)
    c238:	d8c02015 	stw	r3,128(sp)
    c23c:	d8801f15 	stw	r2,124(sp)
    c240:	90bff40e 	bge	r18,r2,c214 <__alt_data_end+0xf000c214>
    c244:	d9801e04 	addi	r6,sp,120
    c248:	b80b883a 	mov	r5,r23
    c24c:	9809883a 	mov	r4,r19
    c250:	0013f9c0 	call	13f9c <__sprint_r>
    c254:	103e6d1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c258:	843ffc04 	addi	r16,r16,-16
    c25c:	d8c02017 	ldw	r3,128(sp)
    c260:	d8801f17 	ldw	r2,124(sp)
    c264:	da000404 	addi	r8,sp,16
    c268:	8c3fed16 	blt	r17,r16,c220 <__alt_data_end+0xf000c220>
    c26c:	d9403517 	ldw	r5,212(sp)
    c270:	1c07883a 	add	r3,r3,r16
    c274:	10800044 	addi	r2,r2,1
    c278:	41400015 	stw	r5,0(r8)
    c27c:	44000115 	stw	r16,4(r8)
    c280:	d8c02015 	stw	r3,128(sp)
    c284:	d8801f15 	stw	r2,124(sp)
    c288:	010001c4 	movi	r4,7
    c28c:	2080060e 	bge	r4,r2,c2a8 <___vfprintf_internal_r+0xaa4>
    c290:	d9002c17 	ldw	r4,176(sp)
    c294:	d9801e04 	addi	r6,sp,120
    c298:	b80b883a 	mov	r5,r23
    c29c:	0013f9c0 	call	13f9c <__sprint_r>
    c2a0:	103e5a1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c2a4:	d8c02017 	ldw	r3,128(sp)
    c2a8:	d8803117 	ldw	r2,196(sp)
    c2ac:	d9002a17 	ldw	r4,168(sp)
    c2b0:	1100010e 	bge	r2,r4,c2b8 <___vfprintf_internal_r+0xab4>
    c2b4:	2005883a 	mov	r2,r4
    c2b8:	d9402f17 	ldw	r5,188(sp)
    c2bc:	288b883a 	add	r5,r5,r2
    c2c0:	d9402f15 	stw	r5,188(sp)
    c2c4:	18019e1e 	bne	r3,zero,c940 <___vfprintf_internal_r+0x113c>
    c2c8:	a8800007 	ldb	r2,0(r21)
    c2cc:	d8001f15 	stw	zero,124(sp)
    c2d0:	da000404 	addi	r8,sp,16
    c2d4:	103d851e 	bne	r2,zero,b8ec <__alt_data_end+0xf000b8ec>
    c2d8:	a821883a 	mov	r16,r21
    c2dc:	003d9b06 	br	b94c <__alt_data_end+0xf000b94c>
    c2e0:	18c03fcc 	andi	r3,r3,255
    c2e4:	1805c11e 	bne	r3,zero,d9ec <___vfprintf_internal_r+0x21e8>
    c2e8:	94800414 	ori	r18,r18,16
    c2ec:	9080080c 	andi	r2,r18,32
    c2f0:	10020c26 	beq	r2,zero,cb24 <___vfprintf_internal_r+0x1320>
    c2f4:	d8802d17 	ldw	r2,180(sp)
    c2f8:	d9002917 	ldw	r4,164(sp)
    c2fc:	d8002785 	stb	zero,158(sp)
    c300:	10c00204 	addi	r3,r2,8
    c304:	14c00017 	ldw	r19,0(r2)
    c308:	15800117 	ldw	r22,4(r2)
    c30c:	20040f16 	blt	r4,zero,d34c <___vfprintf_internal_r+0x1b48>
    c310:	013fdfc4 	movi	r4,-129
    c314:	9d84b03a 	or	r2,r19,r22
    c318:	d8c02d15 	stw	r3,180(sp)
    c31c:	9124703a 	and	r18,r18,r4
    c320:	0039883a 	mov	fp,zero
    c324:	103e891e 	bne	r2,zero,bd4c <__alt_data_end+0xf000bd4c>
    c328:	d9002917 	ldw	r4,164(sp)
    c32c:	2002c11e 	bne	r4,zero,ce34 <___vfprintf_internal_r+0x1630>
    c330:	d8002915 	stw	zero,164(sp)
    c334:	d8002e15 	stw	zero,184(sp)
    c338:	dc001e04 	addi	r16,sp,120
    c33c:	003ef806 	br	bf20 <__alt_data_end+0xf000bf20>
    c340:	18c03fcc 	andi	r3,r3,255
    c344:	18059d1e 	bne	r3,zero,d9bc <___vfprintf_internal_r+0x21b8>
    c348:	01420034 	movhi	r5,2048
    c34c:	2940d304 	addi	r5,r5,844
    c350:	d9403915 	stw	r5,228(sp)
    c354:	9080080c 	andi	r2,r18,32
    c358:	10005226 	beq	r2,zero,c4a4 <___vfprintf_internal_r+0xca0>
    c35c:	d8802d17 	ldw	r2,180(sp)
    c360:	14c00017 	ldw	r19,0(r2)
    c364:	15800117 	ldw	r22,4(r2)
    c368:	10800204 	addi	r2,r2,8
    c36c:	d8802d15 	stw	r2,180(sp)
    c370:	9080004c 	andi	r2,r18,1
    c374:	10019026 	beq	r2,zero,c9b8 <___vfprintf_internal_r+0x11b4>
    c378:	9d84b03a 	or	r2,r19,r22
    c37c:	10036926 	beq	r2,zero,d124 <___vfprintf_internal_r+0x1920>
    c380:	d8c02917 	ldw	r3,164(sp)
    c384:	00800c04 	movi	r2,48
    c388:	d8802705 	stb	r2,156(sp)
    c38c:	dc402745 	stb	r17,157(sp)
    c390:	d8002785 	stb	zero,158(sp)
    c394:	90800094 	ori	r2,r18,2
    c398:	18045d16 	blt	r3,zero,d510 <___vfprintf_internal_r+0x1d0c>
    c39c:	00bfdfc4 	movi	r2,-129
    c3a0:	90a4703a 	and	r18,r18,r2
    c3a4:	94800094 	ori	r18,r18,2
    c3a8:	0039883a 	mov	fp,zero
    c3ac:	d9003917 	ldw	r4,228(sp)
    c3b0:	dc001e04 	addi	r16,sp,120
    c3b4:	988003cc 	andi	r2,r19,15
    c3b8:	b006973a 	slli	r3,r22,28
    c3bc:	2085883a 	add	r2,r4,r2
    c3c0:	9826d13a 	srli	r19,r19,4
    c3c4:	10800003 	ldbu	r2,0(r2)
    c3c8:	b02cd13a 	srli	r22,r22,4
    c3cc:	843fffc4 	addi	r16,r16,-1
    c3d0:	1ce6b03a 	or	r19,r3,r19
    c3d4:	80800005 	stb	r2,0(r16)
    c3d8:	9d84b03a 	or	r2,r19,r22
    c3dc:	103ff51e 	bne	r2,zero,c3b4 <__alt_data_end+0xf000c3b4>
    c3e0:	d8c02817 	ldw	r3,160(sp)
    c3e4:	1c07c83a 	sub	r3,r3,r16
    c3e8:	d8c02e15 	stw	r3,184(sp)
    c3ec:	003ecc06 	br	bf20 <__alt_data_end+0xf000bf20>
    c3f0:	18c03fcc 	andi	r3,r3,255
    c3f4:	183e9f26 	beq	r3,zero,be74 <__alt_data_end+0xf000be74>
    c3f8:	d9c02785 	stb	r7,158(sp)
    c3fc:	003e9d06 	br	be74 <__alt_data_end+0xf000be74>
    c400:	00c00044 	movi	r3,1
    c404:	01c00ac4 	movi	r7,43
    c408:	ac400007 	ldb	r17,0(r21)
    c40c:	003d5e06 	br	b988 <__alt_data_end+0xf000b988>
    c410:	94800814 	ori	r18,r18,32
    c414:	ac400007 	ldb	r17,0(r21)
    c418:	003d5b06 	br	b988 <__alt_data_end+0xf000b988>
    c41c:	d8c02d17 	ldw	r3,180(sp)
    c420:	d8002785 	stb	zero,158(sp)
    c424:	1c000017 	ldw	r16,0(r3)
    c428:	1cc00104 	addi	r19,r3,4
    c42c:	80041926 	beq	r16,zero,d494 <___vfprintf_internal_r+0x1c90>
    c430:	d9002917 	ldw	r4,164(sp)
    c434:	2003d016 	blt	r4,zero,d378 <___vfprintf_internal_r+0x1b74>
    c438:	200d883a 	mov	r6,r4
    c43c:	000b883a 	mov	r5,zero
    c440:	8009883a 	mov	r4,r16
    c444:	da003d15 	stw	r8,244(sp)
    c448:	00110140 	call	11014 <memchr>
    c44c:	da003d17 	ldw	r8,244(sp)
    c450:	10045426 	beq	r2,zero,d5a4 <___vfprintf_internal_r+0x1da0>
    c454:	1405c83a 	sub	r2,r2,r16
    c458:	d8802e15 	stw	r2,184(sp)
    c45c:	1003cc16 	blt	r2,zero,d390 <___vfprintf_internal_r+0x1b8c>
    c460:	df002783 	ldbu	fp,158(sp)
    c464:	d8802a15 	stw	r2,168(sp)
    c468:	dcc02d15 	stw	r19,180(sp)
    c46c:	d8002915 	stw	zero,164(sp)
    c470:	d8003215 	stw	zero,200(sp)
    c474:	003eb006 	br	bf38 <__alt_data_end+0xf000bf38>
    c478:	18c03fcc 	andi	r3,r3,255
    c47c:	183f9b26 	beq	r3,zero,c2ec <__alt_data_end+0xf000c2ec>
    c480:	d9c02785 	stb	r7,158(sp)
    c484:	003f9906 	br	c2ec <__alt_data_end+0xf000c2ec>
    c488:	18c03fcc 	andi	r3,r3,255
    c48c:	1805551e 	bne	r3,zero,d9e4 <___vfprintf_internal_r+0x21e0>
    c490:	01420034 	movhi	r5,2048
    c494:	2940d804 	addi	r5,r5,864
    c498:	d9403915 	stw	r5,228(sp)
    c49c:	9080080c 	andi	r2,r18,32
    c4a0:	103fae1e 	bne	r2,zero,c35c <__alt_data_end+0xf000c35c>
    c4a4:	9080040c 	andi	r2,r18,16
    c4a8:	1002de26 	beq	r2,zero,d024 <___vfprintf_internal_r+0x1820>
    c4ac:	d8c02d17 	ldw	r3,180(sp)
    c4b0:	002d883a 	mov	r22,zero
    c4b4:	1cc00017 	ldw	r19,0(r3)
    c4b8:	18c00104 	addi	r3,r3,4
    c4bc:	d8c02d15 	stw	r3,180(sp)
    c4c0:	003fab06 	br	c370 <__alt_data_end+0xf000c370>
    c4c4:	38803fcc 	andi	r2,r7,255
    c4c8:	1080201c 	xori	r2,r2,128
    c4cc:	10bfe004 	addi	r2,r2,-128
    c4d0:	1002d21e 	bne	r2,zero,d01c <___vfprintf_internal_r+0x1818>
    c4d4:	00c00044 	movi	r3,1
    c4d8:	01c00804 	movi	r7,32
    c4dc:	ac400007 	ldb	r17,0(r21)
    c4e0:	003d2906 	br	b988 <__alt_data_end+0xf000b988>
    c4e4:	94800054 	ori	r18,r18,1
    c4e8:	ac400007 	ldb	r17,0(r21)
    c4ec:	003d2606 	br	b988 <__alt_data_end+0xf000b988>
    c4f0:	18c03fcc 	andi	r3,r3,255
    c4f4:	183e0526 	beq	r3,zero,bd0c <__alt_data_end+0xf000bd0c>
    c4f8:	d9c02785 	stb	r7,158(sp)
    c4fc:	003e0306 	br	bd0c <__alt_data_end+0xf000bd0c>
    c500:	94801014 	ori	r18,r18,64
    c504:	ac400007 	ldb	r17,0(r21)
    c508:	003d1f06 	br	b988 <__alt_data_end+0xf000b988>
    c50c:	ac400007 	ldb	r17,0(r21)
    c510:	8a438726 	beq	r17,r9,d330 <___vfprintf_internal_r+0x1b2c>
    c514:	94800414 	ori	r18,r18,16
    c518:	003d1b06 	br	b988 <__alt_data_end+0xf000b988>
    c51c:	18c03fcc 	andi	r3,r3,255
    c520:	1805341e 	bne	r3,zero,d9f4 <___vfprintf_internal_r+0x21f0>
    c524:	9080080c 	andi	r2,r18,32
    c528:	1002cd26 	beq	r2,zero,d060 <___vfprintf_internal_r+0x185c>
    c52c:	d9402d17 	ldw	r5,180(sp)
    c530:	d9002f17 	ldw	r4,188(sp)
    c534:	28800017 	ldw	r2,0(r5)
    c538:	2007d7fa 	srai	r3,r4,31
    c53c:	29400104 	addi	r5,r5,4
    c540:	d9402d15 	stw	r5,180(sp)
    c544:	11000015 	stw	r4,0(r2)
    c548:	10c00115 	stw	r3,4(r2)
    c54c:	003ce506 	br	b8e4 <__alt_data_end+0xf000b8e4>
    c550:	d8c02d17 	ldw	r3,180(sp)
    c554:	d9002d17 	ldw	r4,180(sp)
    c558:	d8002785 	stb	zero,158(sp)
    c55c:	18800017 	ldw	r2,0(r3)
    c560:	21000104 	addi	r4,r4,4
    c564:	00c00044 	movi	r3,1
    c568:	d8c02a15 	stw	r3,168(sp)
    c56c:	d8801405 	stb	r2,80(sp)
    c570:	d9002d15 	stw	r4,180(sp)
    c574:	d8c02e15 	stw	r3,184(sp)
    c578:	d8002915 	stw	zero,164(sp)
    c57c:	d8003215 	stw	zero,200(sp)
    c580:	dc001404 	addi	r16,sp,80
    c584:	0039883a 	mov	fp,zero
    c588:	003e7206 	br	bf54 <__alt_data_end+0xf000bf54>
    c58c:	01020034 	movhi	r4,2048
    c590:	2100d804 	addi	r4,r4,864
    c594:	0039883a 	mov	fp,zero
    c598:	d9003915 	stw	r4,228(sp)
    c59c:	04401e04 	movi	r17,120
    c5a0:	003f8206 	br	c3ac <__alt_data_end+0xf000c3ac>
    c5a4:	18c03fcc 	andi	r3,r3,255
    c5a8:	1805061e 	bne	r3,zero,d9c4 <___vfprintf_internal_r+0x21c0>
    c5ac:	883d9126 	beq	r17,zero,bbf4 <__alt_data_end+0xf000bbf4>
    c5b0:	00c00044 	movi	r3,1
    c5b4:	d8c02a15 	stw	r3,168(sp)
    c5b8:	dc401405 	stb	r17,80(sp)
    c5bc:	d8002785 	stb	zero,158(sp)
    c5c0:	003fec06 	br	c574 <__alt_data_end+0xf000c574>
    c5c4:	01420034 	movhi	r5,2048
    c5c8:	2940d804 	addi	r5,r5,864
    c5cc:	d9403915 	stw	r5,228(sp)
    c5d0:	d8c02d15 	stw	r3,180(sp)
    c5d4:	1025883a 	mov	r18,r2
    c5d8:	04401e04 	movi	r17,120
    c5dc:	9d84b03a 	or	r2,r19,r22
    c5e0:	1000fc1e 	bne	r2,zero,c9d4 <___vfprintf_internal_r+0x11d0>
    c5e4:	0039883a 	mov	fp,zero
    c5e8:	00800084 	movi	r2,2
    c5ec:	10803fcc 	andi	r2,r2,255
    c5f0:	00c00044 	movi	r3,1
    c5f4:	10c20f26 	beq	r2,r3,ce34 <___vfprintf_internal_r+0x1630>
    c5f8:	00c00084 	movi	r3,2
    c5fc:	10fd6326 	beq	r2,r3,bb8c <__alt_data_end+0xf000bb8c>
    c600:	003e2d06 	br	beb8 <__alt_data_end+0xf000beb8>
    c604:	d8c02017 	ldw	r3,128(sp)
    c608:	003e9306 	br	c058 <__alt_data_end+0xf000c058>
    c60c:	00801944 	movi	r2,101
    c610:	14407e0e 	bge	r2,r17,c80c <___vfprintf_internal_r+0x1008>
    c614:	d9003617 	ldw	r4,216(sp)
    c618:	d9403817 	ldw	r5,224(sp)
    c61c:	000d883a 	mov	r6,zero
    c620:	000f883a 	mov	r7,zero
    c624:	d8c03c15 	stw	r3,240(sp)
    c628:	da003d15 	stw	r8,244(sp)
    c62c:	00171780 	call	17178 <__eqdf2>
    c630:	d8c03c17 	ldw	r3,240(sp)
    c634:	da003d17 	ldw	r8,244(sp)
    c638:	1000f71e 	bne	r2,zero,ca18 <___vfprintf_internal_r+0x1214>
    c63c:	d8801f17 	ldw	r2,124(sp)
    c640:	01020034 	movhi	r4,2048
    c644:	2100df04 	addi	r4,r4,892
    c648:	18c00044 	addi	r3,r3,1
    c64c:	10800044 	addi	r2,r2,1
    c650:	41000015 	stw	r4,0(r8)
    c654:	01000044 	movi	r4,1
    c658:	41000115 	stw	r4,4(r8)
    c65c:	d8c02015 	stw	r3,128(sp)
    c660:	d8801f15 	stw	r2,124(sp)
    c664:	010001c4 	movi	r4,7
    c668:	2082b816 	blt	r4,r2,d14c <___vfprintf_internal_r+0x1948>
    c66c:	42000204 	addi	r8,r8,8
    c670:	d8802617 	ldw	r2,152(sp)
    c674:	d9403317 	ldw	r5,204(sp)
    c678:	11400216 	blt	r2,r5,c684 <___vfprintf_internal_r+0xe80>
    c67c:	9080004c 	andi	r2,r18,1
    c680:	103ed526 	beq	r2,zero,c1d8 <__alt_data_end+0xf000c1d8>
    c684:	d8803717 	ldw	r2,220(sp)
    c688:	d9003417 	ldw	r4,208(sp)
    c68c:	d9403717 	ldw	r5,220(sp)
    c690:	1887883a 	add	r3,r3,r2
    c694:	d8801f17 	ldw	r2,124(sp)
    c698:	41000015 	stw	r4,0(r8)
    c69c:	41400115 	stw	r5,4(r8)
    c6a0:	10800044 	addi	r2,r2,1
    c6a4:	d8c02015 	stw	r3,128(sp)
    c6a8:	d8801f15 	stw	r2,124(sp)
    c6ac:	010001c4 	movi	r4,7
    c6b0:	20832916 	blt	r4,r2,d358 <___vfprintf_internal_r+0x1b54>
    c6b4:	42000204 	addi	r8,r8,8
    c6b8:	d8803317 	ldw	r2,204(sp)
    c6bc:	143fffc4 	addi	r16,r2,-1
    c6c0:	043ec50e 	bge	zero,r16,c1d8 <__alt_data_end+0xf000c1d8>
    c6c4:	04400404 	movi	r17,16
    c6c8:	d8801f17 	ldw	r2,124(sp)
    c6cc:	8c00880e 	bge	r17,r16,c8f0 <___vfprintf_internal_r+0x10ec>
    c6d0:	01420034 	movhi	r5,2048
    c6d4:	2940e784 	addi	r5,r5,926
    c6d8:	d9402b15 	stw	r5,172(sp)
    c6dc:	058001c4 	movi	r22,7
    c6e0:	dcc02c17 	ldw	r19,176(sp)
    c6e4:	00000306 	br	c6f4 <___vfprintf_internal_r+0xef0>
    c6e8:	42000204 	addi	r8,r8,8
    c6ec:	843ffc04 	addi	r16,r16,-16
    c6f0:	8c00820e 	bge	r17,r16,c8fc <___vfprintf_internal_r+0x10f8>
    c6f4:	18c00404 	addi	r3,r3,16
    c6f8:	10800044 	addi	r2,r2,1
    c6fc:	45000015 	stw	r20,0(r8)
    c700:	44400115 	stw	r17,4(r8)
    c704:	d8c02015 	stw	r3,128(sp)
    c708:	d8801f15 	stw	r2,124(sp)
    c70c:	b0bff60e 	bge	r22,r2,c6e8 <__alt_data_end+0xf000c6e8>
    c710:	d9801e04 	addi	r6,sp,120
    c714:	b80b883a 	mov	r5,r23
    c718:	9809883a 	mov	r4,r19
    c71c:	0013f9c0 	call	13f9c <__sprint_r>
    c720:	103d3a1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c724:	d8c02017 	ldw	r3,128(sp)
    c728:	d8801f17 	ldw	r2,124(sp)
    c72c:	da000404 	addi	r8,sp,16
    c730:	003fee06 	br	c6ec <__alt_data_end+0xf000c6ec>
    c734:	d9403117 	ldw	r5,196(sp)
    c738:	d8802a17 	ldw	r2,168(sp)
    c73c:	28adc83a 	sub	r22,r5,r2
    c740:	05be630e 	bge	zero,r22,c0d0 <__alt_data_end+0xf000c0d0>
    c744:	07000404 	movi	fp,16
    c748:	d8801f17 	ldw	r2,124(sp)
    c74c:	e5838f0e 	bge	fp,r22,d58c <___vfprintf_internal_r+0x1d88>
    c750:	01420034 	movhi	r5,2048
    c754:	2940e784 	addi	r5,r5,926
    c758:	dc403015 	stw	r17,192(sp)
    c75c:	d9402b15 	stw	r5,172(sp)
    c760:	b023883a 	mov	r17,r22
    c764:	04c001c4 	movi	r19,7
    c768:	a82d883a 	mov	r22,r21
    c76c:	902b883a 	mov	r21,r18
    c770:	8025883a 	mov	r18,r16
    c774:	dc002c17 	ldw	r16,176(sp)
    c778:	00000306 	br	c788 <___vfprintf_internal_r+0xf84>
    c77c:	8c7ffc04 	addi	r17,r17,-16
    c780:	42000204 	addi	r8,r8,8
    c784:	e440110e 	bge	fp,r17,c7cc <___vfprintf_internal_r+0xfc8>
    c788:	18c00404 	addi	r3,r3,16
    c78c:	10800044 	addi	r2,r2,1
    c790:	45000015 	stw	r20,0(r8)
    c794:	47000115 	stw	fp,4(r8)
    c798:	d8c02015 	stw	r3,128(sp)
    c79c:	d8801f15 	stw	r2,124(sp)
    c7a0:	98bff60e 	bge	r19,r2,c77c <__alt_data_end+0xf000c77c>
    c7a4:	d9801e04 	addi	r6,sp,120
    c7a8:	b80b883a 	mov	r5,r23
    c7ac:	8009883a 	mov	r4,r16
    c7b0:	0013f9c0 	call	13f9c <__sprint_r>
    c7b4:	103d151e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c7b8:	8c7ffc04 	addi	r17,r17,-16
    c7bc:	d8c02017 	ldw	r3,128(sp)
    c7c0:	d8801f17 	ldw	r2,124(sp)
    c7c4:	da000404 	addi	r8,sp,16
    c7c8:	e47fef16 	blt	fp,r17,c788 <__alt_data_end+0xf000c788>
    c7cc:	9021883a 	mov	r16,r18
    c7d0:	a825883a 	mov	r18,r21
    c7d4:	b02b883a 	mov	r21,r22
    c7d8:	882d883a 	mov	r22,r17
    c7dc:	dc403017 	ldw	r17,192(sp)
    c7e0:	d9002b17 	ldw	r4,172(sp)
    c7e4:	1d87883a 	add	r3,r3,r22
    c7e8:	10800044 	addi	r2,r2,1
    c7ec:	41000015 	stw	r4,0(r8)
    c7f0:	45800115 	stw	r22,4(r8)
    c7f4:	d8c02015 	stw	r3,128(sp)
    c7f8:	d8801f15 	stw	r2,124(sp)
    c7fc:	010001c4 	movi	r4,7
    c800:	20818e16 	blt	r4,r2,ce3c <___vfprintf_internal_r+0x1638>
    c804:	42000204 	addi	r8,r8,8
    c808:	003e3106 	br	c0d0 <__alt_data_end+0xf000c0d0>
    c80c:	d9403317 	ldw	r5,204(sp)
    c810:	00800044 	movi	r2,1
    c814:	18c00044 	addi	r3,r3,1
    c818:	1141530e 	bge	r2,r5,cd68 <___vfprintf_internal_r+0x1564>
    c81c:	dc401f17 	ldw	r17,124(sp)
    c820:	00800044 	movi	r2,1
    c824:	40800115 	stw	r2,4(r8)
    c828:	8c400044 	addi	r17,r17,1
    c82c:	44000015 	stw	r16,0(r8)
    c830:	d8c02015 	stw	r3,128(sp)
    c834:	dc401f15 	stw	r17,124(sp)
    c838:	008001c4 	movi	r2,7
    c83c:	14416b16 	blt	r2,r17,cdec <___vfprintf_internal_r+0x15e8>
    c840:	42000204 	addi	r8,r8,8
    c844:	d8803717 	ldw	r2,220(sp)
    c848:	d9003417 	ldw	r4,208(sp)
    c84c:	8c400044 	addi	r17,r17,1
    c850:	10c7883a 	add	r3,r2,r3
    c854:	40800115 	stw	r2,4(r8)
    c858:	41000015 	stw	r4,0(r8)
    c85c:	d8c02015 	stw	r3,128(sp)
    c860:	dc401f15 	stw	r17,124(sp)
    c864:	008001c4 	movi	r2,7
    c868:	14416916 	blt	r2,r17,ce10 <___vfprintf_internal_r+0x160c>
    c86c:	45800204 	addi	r22,r8,8
    c870:	d9003617 	ldw	r4,216(sp)
    c874:	d9403817 	ldw	r5,224(sp)
    c878:	000d883a 	mov	r6,zero
    c87c:	000f883a 	mov	r7,zero
    c880:	d8c03c15 	stw	r3,240(sp)
    c884:	00171780 	call	17178 <__eqdf2>
    c888:	d8c03c17 	ldw	r3,240(sp)
    c88c:	1000bc26 	beq	r2,zero,cb80 <___vfprintf_internal_r+0x137c>
    c890:	d9403317 	ldw	r5,204(sp)
    c894:	84000044 	addi	r16,r16,1
    c898:	8c400044 	addi	r17,r17,1
    c89c:	28bfffc4 	addi	r2,r5,-1
    c8a0:	1887883a 	add	r3,r3,r2
    c8a4:	b0800115 	stw	r2,4(r22)
    c8a8:	b4000015 	stw	r16,0(r22)
    c8ac:	d8c02015 	stw	r3,128(sp)
    c8b0:	dc401f15 	stw	r17,124(sp)
    c8b4:	008001c4 	movi	r2,7
    c8b8:	14414316 	blt	r2,r17,cdc8 <___vfprintf_internal_r+0x15c4>
    c8bc:	b5800204 	addi	r22,r22,8
    c8c0:	d9003a17 	ldw	r4,232(sp)
    c8c4:	df0022c4 	addi	fp,sp,139
    c8c8:	8c400044 	addi	r17,r17,1
    c8cc:	20c7883a 	add	r3,r4,r3
    c8d0:	b7000015 	stw	fp,0(r22)
    c8d4:	b1000115 	stw	r4,4(r22)
    c8d8:	d8c02015 	stw	r3,128(sp)
    c8dc:	dc401f15 	stw	r17,124(sp)
    c8e0:	008001c4 	movi	r2,7
    c8e4:	14400e16 	blt	r2,r17,c920 <___vfprintf_internal_r+0x111c>
    c8e8:	b2000204 	addi	r8,r22,8
    c8ec:	003e3a06 	br	c1d8 <__alt_data_end+0xf000c1d8>
    c8f0:	01020034 	movhi	r4,2048
    c8f4:	2100e784 	addi	r4,r4,926
    c8f8:	d9002b15 	stw	r4,172(sp)
    c8fc:	d9002b17 	ldw	r4,172(sp)
    c900:	1c07883a 	add	r3,r3,r16
    c904:	44000115 	stw	r16,4(r8)
    c908:	41000015 	stw	r4,0(r8)
    c90c:	10800044 	addi	r2,r2,1
    c910:	d8c02015 	stw	r3,128(sp)
    c914:	d8801f15 	stw	r2,124(sp)
    c918:	010001c4 	movi	r4,7
    c91c:	20be2d0e 	bge	r4,r2,c1d4 <__alt_data_end+0xf000c1d4>
    c920:	d9002c17 	ldw	r4,176(sp)
    c924:	d9801e04 	addi	r6,sp,120
    c928:	b80b883a 	mov	r5,r23
    c92c:	0013f9c0 	call	13f9c <__sprint_r>
    c930:	103cb61e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c934:	d8c02017 	ldw	r3,128(sp)
    c938:	da000404 	addi	r8,sp,16
    c93c:	003e2606 	br	c1d8 <__alt_data_end+0xf000c1d8>
    c940:	d9002c17 	ldw	r4,176(sp)
    c944:	d9801e04 	addi	r6,sp,120
    c948:	b80b883a 	mov	r5,r23
    c94c:	0013f9c0 	call	13f9c <__sprint_r>
    c950:	103e5d26 	beq	r2,zero,c2c8 <__alt_data_end+0xf000c2c8>
    c954:	003cad06 	br	bc0c <__alt_data_end+0xf000bc0c>
    c958:	d9002c17 	ldw	r4,176(sp)
    c95c:	d9801e04 	addi	r6,sp,120
    c960:	b80b883a 	mov	r5,r23
    c964:	0013f9c0 	call	13f9c <__sprint_r>
    c968:	103ca81e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c96c:	d8c02017 	ldw	r3,128(sp)
    c970:	da000404 	addi	r8,sp,16
    c974:	003e0b06 	br	c1a4 <__alt_data_end+0xf000c1a4>
    c978:	d9002c17 	ldw	r4,176(sp)
    c97c:	d9801e04 	addi	r6,sp,120
    c980:	b80b883a 	mov	r5,r23
    c984:	0013f9c0 	call	13f9c <__sprint_r>
    c988:	103ca01e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c98c:	d8c02017 	ldw	r3,128(sp)
    c990:	da000404 	addi	r8,sp,16
    c994:	003dbd06 	br	c08c <__alt_data_end+0xf000c08c>
    c998:	d9002c17 	ldw	r4,176(sp)
    c99c:	d9801e04 	addi	r6,sp,120
    c9a0:	b80b883a 	mov	r5,r23
    c9a4:	0013f9c0 	call	13f9c <__sprint_r>
    c9a8:	103c981e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    c9ac:	d8c02017 	ldw	r3,128(sp)
    c9b0:	da000404 	addi	r8,sp,16
    c9b4:	003dc306 	br	c0c4 <__alt_data_end+0xf000c0c4>
    c9b8:	d8802917 	ldw	r2,164(sp)
    c9bc:	d8002785 	stb	zero,158(sp)
    c9c0:	103f0616 	blt	r2,zero,c5dc <__alt_data_end+0xf000c5dc>
    c9c4:	00ffdfc4 	movi	r3,-129
    c9c8:	9d84b03a 	or	r2,r19,r22
    c9cc:	90e4703a 	and	r18,r18,r3
    c9d0:	103c6b26 	beq	r2,zero,bb80 <__alt_data_end+0xf000bb80>
    c9d4:	0039883a 	mov	fp,zero
    c9d8:	003e7406 	br	c3ac <__alt_data_end+0xf000c3ac>
    c9dc:	9080040c 	andi	r2,r18,16
    c9e0:	1001b326 	beq	r2,zero,d0b0 <___vfprintf_internal_r+0x18ac>
    c9e4:	d9002d17 	ldw	r4,180(sp)
    c9e8:	d9402917 	ldw	r5,164(sp)
    c9ec:	d8002785 	stb	zero,158(sp)
    c9f0:	20800104 	addi	r2,r4,4
    c9f4:	24c00017 	ldw	r19,0(r4)
    c9f8:	002d883a 	mov	r22,zero
    c9fc:	2801b516 	blt	r5,zero,d0d4 <___vfprintf_internal_r+0x18d0>
    ca00:	00ffdfc4 	movi	r3,-129
    ca04:	d8802d15 	stw	r2,180(sp)
    ca08:	90e4703a 	and	r18,r18,r3
    ca0c:	983d2726 	beq	r19,zero,beac <__alt_data_end+0xf000beac>
    ca10:	0039883a 	mov	fp,zero
    ca14:	003d2a06 	br	bec0 <__alt_data_end+0xf000bec0>
    ca18:	dc402617 	ldw	r17,152(sp)
    ca1c:	0441d30e 	bge	zero,r17,d16c <___vfprintf_internal_r+0x1968>
    ca20:	dc403217 	ldw	r17,200(sp)
    ca24:	d8803317 	ldw	r2,204(sp)
    ca28:	1440010e 	bge	r2,r17,ca30 <___vfprintf_internal_r+0x122c>
    ca2c:	1023883a 	mov	r17,r2
    ca30:	04400a0e 	bge	zero,r17,ca5c <___vfprintf_internal_r+0x1258>
    ca34:	d8801f17 	ldw	r2,124(sp)
    ca38:	1c47883a 	add	r3,r3,r17
    ca3c:	44000015 	stw	r16,0(r8)
    ca40:	10800044 	addi	r2,r2,1
    ca44:	44400115 	stw	r17,4(r8)
    ca48:	d8c02015 	stw	r3,128(sp)
    ca4c:	d8801f15 	stw	r2,124(sp)
    ca50:	010001c4 	movi	r4,7
    ca54:	20826516 	blt	r4,r2,d3ec <___vfprintf_internal_r+0x1be8>
    ca58:	42000204 	addi	r8,r8,8
    ca5c:	88026116 	blt	r17,zero,d3e4 <___vfprintf_internal_r+0x1be0>
    ca60:	d9003217 	ldw	r4,200(sp)
    ca64:	2463c83a 	sub	r17,r4,r17
    ca68:	04407b0e 	bge	zero,r17,cc58 <___vfprintf_internal_r+0x1454>
    ca6c:	05800404 	movi	r22,16
    ca70:	d8801f17 	ldw	r2,124(sp)
    ca74:	b4419d0e 	bge	r22,r17,d0ec <___vfprintf_internal_r+0x18e8>
    ca78:	01020034 	movhi	r4,2048
    ca7c:	2100e784 	addi	r4,r4,926
    ca80:	d9002b15 	stw	r4,172(sp)
    ca84:	070001c4 	movi	fp,7
    ca88:	dcc02c17 	ldw	r19,176(sp)
    ca8c:	00000306 	br	ca9c <___vfprintf_internal_r+0x1298>
    ca90:	42000204 	addi	r8,r8,8
    ca94:	8c7ffc04 	addi	r17,r17,-16
    ca98:	b441970e 	bge	r22,r17,d0f8 <___vfprintf_internal_r+0x18f4>
    ca9c:	18c00404 	addi	r3,r3,16
    caa0:	10800044 	addi	r2,r2,1
    caa4:	45000015 	stw	r20,0(r8)
    caa8:	45800115 	stw	r22,4(r8)
    caac:	d8c02015 	stw	r3,128(sp)
    cab0:	d8801f15 	stw	r2,124(sp)
    cab4:	e0bff60e 	bge	fp,r2,ca90 <__alt_data_end+0xf000ca90>
    cab8:	d9801e04 	addi	r6,sp,120
    cabc:	b80b883a 	mov	r5,r23
    cac0:	9809883a 	mov	r4,r19
    cac4:	0013f9c0 	call	13f9c <__sprint_r>
    cac8:	103c501e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    cacc:	d8c02017 	ldw	r3,128(sp)
    cad0:	d8801f17 	ldw	r2,124(sp)
    cad4:	da000404 	addi	r8,sp,16
    cad8:	003fee06 	br	ca94 <__alt_data_end+0xf000ca94>
    cadc:	d9002c17 	ldw	r4,176(sp)
    cae0:	d9801e04 	addi	r6,sp,120
    cae4:	b80b883a 	mov	r5,r23
    cae8:	0013f9c0 	call	13f9c <__sprint_r>
    caec:	103c471e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    caf0:	d8c02017 	ldw	r3,128(sp)
    caf4:	df002787 	ldb	fp,158(sp)
    caf8:	da000404 	addi	r8,sp,16
    cafc:	003d5606 	br	c058 <__alt_data_end+0xf000c058>
    cb00:	9080040c 	andi	r2,r18,16
    cb04:	10016126 	beq	r2,zero,d08c <___vfprintf_internal_r+0x1888>
    cb08:	d8802d17 	ldw	r2,180(sp)
    cb0c:	14c00017 	ldw	r19,0(r2)
    cb10:	10800104 	addi	r2,r2,4
    cb14:	d8802d15 	stw	r2,180(sp)
    cb18:	982dd7fa 	srai	r22,r19,31
    cb1c:	b005883a 	mov	r2,r22
    cb20:	003c8206 	br	bd2c <__alt_data_end+0xf000bd2c>
    cb24:	9080040c 	andi	r2,r18,16
    cb28:	10003526 	beq	r2,zero,cc00 <___vfprintf_internal_r+0x13fc>
    cb2c:	d9402d17 	ldw	r5,180(sp)
    cb30:	d8c02917 	ldw	r3,164(sp)
    cb34:	d8002785 	stb	zero,158(sp)
    cb38:	28800104 	addi	r2,r5,4
    cb3c:	2cc00017 	ldw	r19,0(r5)
    cb40:	002d883a 	mov	r22,zero
    cb44:	18003716 	blt	r3,zero,cc24 <___vfprintf_internal_r+0x1420>
    cb48:	00ffdfc4 	movi	r3,-129
    cb4c:	d8802d15 	stw	r2,180(sp)
    cb50:	90e4703a 	and	r18,r18,r3
    cb54:	0039883a 	mov	fp,zero
    cb58:	983df326 	beq	r19,zero,c328 <__alt_data_end+0xf000c328>
    cb5c:	00800244 	movi	r2,9
    cb60:	14fc7b36 	bltu	r2,r19,bd50 <__alt_data_end+0xf000bd50>
    cb64:	d8c02817 	ldw	r3,160(sp)
    cb68:	dc001dc4 	addi	r16,sp,119
    cb6c:	9cc00c04 	addi	r19,r19,48
    cb70:	1c07c83a 	sub	r3,r3,r16
    cb74:	dcc01dc5 	stb	r19,119(sp)
    cb78:	d8c02e15 	stw	r3,184(sp)
    cb7c:	003ce806 	br	bf20 <__alt_data_end+0xf000bf20>
    cb80:	d8803317 	ldw	r2,204(sp)
    cb84:	143fffc4 	addi	r16,r2,-1
    cb88:	043f4d0e 	bge	zero,r16,c8c0 <__alt_data_end+0xf000c8c0>
    cb8c:	07000404 	movi	fp,16
    cb90:	e400810e 	bge	fp,r16,cd98 <___vfprintf_internal_r+0x1594>
    cb94:	01420034 	movhi	r5,2048
    cb98:	2940e784 	addi	r5,r5,926
    cb9c:	d9402b15 	stw	r5,172(sp)
    cba0:	01c001c4 	movi	r7,7
    cba4:	dcc02c17 	ldw	r19,176(sp)
    cba8:	00000306 	br	cbb8 <___vfprintf_internal_r+0x13b4>
    cbac:	b5800204 	addi	r22,r22,8
    cbb0:	843ffc04 	addi	r16,r16,-16
    cbb4:	e4007b0e 	bge	fp,r16,cda4 <___vfprintf_internal_r+0x15a0>
    cbb8:	18c00404 	addi	r3,r3,16
    cbbc:	8c400044 	addi	r17,r17,1
    cbc0:	b5000015 	stw	r20,0(r22)
    cbc4:	b7000115 	stw	fp,4(r22)
    cbc8:	d8c02015 	stw	r3,128(sp)
    cbcc:	dc401f15 	stw	r17,124(sp)
    cbd0:	3c7ff60e 	bge	r7,r17,cbac <__alt_data_end+0xf000cbac>
    cbd4:	d9801e04 	addi	r6,sp,120
    cbd8:	b80b883a 	mov	r5,r23
    cbdc:	9809883a 	mov	r4,r19
    cbe0:	d9c03c15 	stw	r7,240(sp)
    cbe4:	0013f9c0 	call	13f9c <__sprint_r>
    cbe8:	d9c03c17 	ldw	r7,240(sp)
    cbec:	103c071e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    cbf0:	d8c02017 	ldw	r3,128(sp)
    cbf4:	dc401f17 	ldw	r17,124(sp)
    cbf8:	dd800404 	addi	r22,sp,16
    cbfc:	003fec06 	br	cbb0 <__alt_data_end+0xf000cbb0>
    cc00:	9080100c 	andi	r2,r18,64
    cc04:	d8002785 	stb	zero,158(sp)
    cc08:	10010e26 	beq	r2,zero,d044 <___vfprintf_internal_r+0x1840>
    cc0c:	d9002d17 	ldw	r4,180(sp)
    cc10:	d9402917 	ldw	r5,164(sp)
    cc14:	002d883a 	mov	r22,zero
    cc18:	20800104 	addi	r2,r4,4
    cc1c:	24c0000b 	ldhu	r19,0(r4)
    cc20:	283fc90e 	bge	r5,zero,cb48 <__alt_data_end+0xf000cb48>
    cc24:	d8802d15 	stw	r2,180(sp)
    cc28:	0039883a 	mov	fp,zero
    cc2c:	9d84b03a 	or	r2,r19,r22
    cc30:	103c461e 	bne	r2,zero,bd4c <__alt_data_end+0xf000bd4c>
    cc34:	00800044 	movi	r2,1
    cc38:	003e6c06 	br	c5ec <__alt_data_end+0xf000c5ec>
    cc3c:	d9002c17 	ldw	r4,176(sp)
    cc40:	d9801e04 	addi	r6,sp,120
    cc44:	b80b883a 	mov	r5,r23
    cc48:	0013f9c0 	call	13f9c <__sprint_r>
    cc4c:	103bef1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    cc50:	d8c02017 	ldw	r3,128(sp)
    cc54:	da000404 	addi	r8,sp,16
    cc58:	d9003217 	ldw	r4,200(sp)
    cc5c:	d8802617 	ldw	r2,152(sp)
    cc60:	d9403317 	ldw	r5,204(sp)
    cc64:	8123883a 	add	r17,r16,r4
    cc68:	11400216 	blt	r2,r5,cc74 <___vfprintf_internal_r+0x1470>
    cc6c:	9100004c 	andi	r4,r18,1
    cc70:	20000d26 	beq	r4,zero,cca8 <___vfprintf_internal_r+0x14a4>
    cc74:	d9003717 	ldw	r4,220(sp)
    cc78:	d9403417 	ldw	r5,208(sp)
    cc7c:	1907883a 	add	r3,r3,r4
    cc80:	d9001f17 	ldw	r4,124(sp)
    cc84:	41400015 	stw	r5,0(r8)
    cc88:	d9403717 	ldw	r5,220(sp)
    cc8c:	21000044 	addi	r4,r4,1
    cc90:	d8c02015 	stw	r3,128(sp)
    cc94:	41400115 	stw	r5,4(r8)
    cc98:	d9001f15 	stw	r4,124(sp)
    cc9c:	014001c4 	movi	r5,7
    cca0:	2901e816 	blt	r5,r4,d444 <___vfprintf_internal_r+0x1c40>
    cca4:	42000204 	addi	r8,r8,8
    cca8:	d9003317 	ldw	r4,204(sp)
    ccac:	8121883a 	add	r16,r16,r4
    ccb0:	2085c83a 	sub	r2,r4,r2
    ccb4:	8461c83a 	sub	r16,r16,r17
    ccb8:	1400010e 	bge	r2,r16,ccc0 <___vfprintf_internal_r+0x14bc>
    ccbc:	1021883a 	mov	r16,r2
    ccc0:	04000a0e 	bge	zero,r16,ccec <___vfprintf_internal_r+0x14e8>
    ccc4:	d9001f17 	ldw	r4,124(sp)
    ccc8:	1c07883a 	add	r3,r3,r16
    cccc:	44400015 	stw	r17,0(r8)
    ccd0:	21000044 	addi	r4,r4,1
    ccd4:	44000115 	stw	r16,4(r8)
    ccd8:	d8c02015 	stw	r3,128(sp)
    ccdc:	d9001f15 	stw	r4,124(sp)
    cce0:	014001c4 	movi	r5,7
    cce4:	2901fb16 	blt	r5,r4,d4d4 <___vfprintf_internal_r+0x1cd0>
    cce8:	42000204 	addi	r8,r8,8
    ccec:	8001f716 	blt	r16,zero,d4cc <___vfprintf_internal_r+0x1cc8>
    ccf0:	1421c83a 	sub	r16,r2,r16
    ccf4:	043d380e 	bge	zero,r16,c1d8 <__alt_data_end+0xf000c1d8>
    ccf8:	04400404 	movi	r17,16
    ccfc:	d8801f17 	ldw	r2,124(sp)
    cd00:	8c3efb0e 	bge	r17,r16,c8f0 <__alt_data_end+0xf000c8f0>
    cd04:	01420034 	movhi	r5,2048
    cd08:	2940e784 	addi	r5,r5,926
    cd0c:	d9402b15 	stw	r5,172(sp)
    cd10:	058001c4 	movi	r22,7
    cd14:	dcc02c17 	ldw	r19,176(sp)
    cd18:	00000306 	br	cd28 <___vfprintf_internal_r+0x1524>
    cd1c:	42000204 	addi	r8,r8,8
    cd20:	843ffc04 	addi	r16,r16,-16
    cd24:	8c3ef50e 	bge	r17,r16,c8fc <__alt_data_end+0xf000c8fc>
    cd28:	18c00404 	addi	r3,r3,16
    cd2c:	10800044 	addi	r2,r2,1
    cd30:	45000015 	stw	r20,0(r8)
    cd34:	44400115 	stw	r17,4(r8)
    cd38:	d8c02015 	stw	r3,128(sp)
    cd3c:	d8801f15 	stw	r2,124(sp)
    cd40:	b0bff60e 	bge	r22,r2,cd1c <__alt_data_end+0xf000cd1c>
    cd44:	d9801e04 	addi	r6,sp,120
    cd48:	b80b883a 	mov	r5,r23
    cd4c:	9809883a 	mov	r4,r19
    cd50:	0013f9c0 	call	13f9c <__sprint_r>
    cd54:	103bad1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    cd58:	d8c02017 	ldw	r3,128(sp)
    cd5c:	d8801f17 	ldw	r2,124(sp)
    cd60:	da000404 	addi	r8,sp,16
    cd64:	003fee06 	br	cd20 <__alt_data_end+0xf000cd20>
    cd68:	9088703a 	and	r4,r18,r2
    cd6c:	203eab1e 	bne	r4,zero,c81c <__alt_data_end+0xf000c81c>
    cd70:	dc401f17 	ldw	r17,124(sp)
    cd74:	40800115 	stw	r2,4(r8)
    cd78:	44000015 	stw	r16,0(r8)
    cd7c:	8c400044 	addi	r17,r17,1
    cd80:	d8c02015 	stw	r3,128(sp)
    cd84:	dc401f15 	stw	r17,124(sp)
    cd88:	008001c4 	movi	r2,7
    cd8c:	14400e16 	blt	r2,r17,cdc8 <___vfprintf_internal_r+0x15c4>
    cd90:	45800204 	addi	r22,r8,8
    cd94:	003eca06 	br	c8c0 <__alt_data_end+0xf000c8c0>
    cd98:	01020034 	movhi	r4,2048
    cd9c:	2100e784 	addi	r4,r4,926
    cda0:	d9002b15 	stw	r4,172(sp)
    cda4:	d8802b17 	ldw	r2,172(sp)
    cda8:	1c07883a 	add	r3,r3,r16
    cdac:	8c400044 	addi	r17,r17,1
    cdb0:	b0800015 	stw	r2,0(r22)
    cdb4:	b4000115 	stw	r16,4(r22)
    cdb8:	d8c02015 	stw	r3,128(sp)
    cdbc:	dc401f15 	stw	r17,124(sp)
    cdc0:	008001c4 	movi	r2,7
    cdc4:	147ebd0e 	bge	r2,r17,c8bc <__alt_data_end+0xf000c8bc>
    cdc8:	d9002c17 	ldw	r4,176(sp)
    cdcc:	d9801e04 	addi	r6,sp,120
    cdd0:	b80b883a 	mov	r5,r23
    cdd4:	0013f9c0 	call	13f9c <__sprint_r>
    cdd8:	103b8c1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    cddc:	d8c02017 	ldw	r3,128(sp)
    cde0:	dc401f17 	ldw	r17,124(sp)
    cde4:	dd800404 	addi	r22,sp,16
    cde8:	003eb506 	br	c8c0 <__alt_data_end+0xf000c8c0>
    cdec:	d9002c17 	ldw	r4,176(sp)
    cdf0:	d9801e04 	addi	r6,sp,120
    cdf4:	b80b883a 	mov	r5,r23
    cdf8:	0013f9c0 	call	13f9c <__sprint_r>
    cdfc:	103b831e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    ce00:	d8c02017 	ldw	r3,128(sp)
    ce04:	dc401f17 	ldw	r17,124(sp)
    ce08:	da000404 	addi	r8,sp,16
    ce0c:	003e8d06 	br	c844 <__alt_data_end+0xf000c844>
    ce10:	d9002c17 	ldw	r4,176(sp)
    ce14:	d9801e04 	addi	r6,sp,120
    ce18:	b80b883a 	mov	r5,r23
    ce1c:	0013f9c0 	call	13f9c <__sprint_r>
    ce20:	103b7a1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    ce24:	d8c02017 	ldw	r3,128(sp)
    ce28:	dc401f17 	ldw	r17,124(sp)
    ce2c:	dd800404 	addi	r22,sp,16
    ce30:	003e8f06 	br	c870 <__alt_data_end+0xf000c870>
    ce34:	0027883a 	mov	r19,zero
    ce38:	003f4a06 	br	cb64 <__alt_data_end+0xf000cb64>
    ce3c:	d9002c17 	ldw	r4,176(sp)
    ce40:	d9801e04 	addi	r6,sp,120
    ce44:	b80b883a 	mov	r5,r23
    ce48:	0013f9c0 	call	13f9c <__sprint_r>
    ce4c:	103b6f1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    ce50:	d8c02017 	ldw	r3,128(sp)
    ce54:	da000404 	addi	r8,sp,16
    ce58:	003c9d06 	br	c0d0 <__alt_data_end+0xf000c0d0>
    ce5c:	04e7c83a 	sub	r19,zero,r19
    ce60:	9804c03a 	cmpne	r2,r19,zero
    ce64:	05adc83a 	sub	r22,zero,r22
    ce68:	b0adc83a 	sub	r22,r22,r2
    ce6c:	d8802917 	ldw	r2,164(sp)
    ce70:	07000b44 	movi	fp,45
    ce74:	df002785 	stb	fp,158(sp)
    ce78:	10017b16 	blt	r2,zero,d468 <___vfprintf_internal_r+0x1c64>
    ce7c:	00bfdfc4 	movi	r2,-129
    ce80:	90a4703a 	and	r18,r18,r2
    ce84:	003bb106 	br	bd4c <__alt_data_end+0xf000bd4c>
    ce88:	d9003617 	ldw	r4,216(sp)
    ce8c:	d9403817 	ldw	r5,224(sp)
    ce90:	da003d15 	stw	r8,244(sp)
    ce94:	00127b40 	call	127b4 <__fpclassifyd>
    ce98:	da003d17 	ldw	r8,244(sp)
    ce9c:	1000f026 	beq	r2,zero,d260 <___vfprintf_internal_r+0x1a5c>
    cea0:	d9002917 	ldw	r4,164(sp)
    cea4:	05bff7c4 	movi	r22,-33
    cea8:	00bfffc4 	movi	r2,-1
    ceac:	8dac703a 	and	r22,r17,r22
    ceb0:	20820026 	beq	r4,r2,d6b4 <___vfprintf_internal_r+0x1eb0>
    ceb4:	008011c4 	movi	r2,71
    ceb8:	b081f726 	beq	r22,r2,d698 <___vfprintf_internal_r+0x1e94>
    cebc:	d9003817 	ldw	r4,224(sp)
    cec0:	90c04014 	ori	r3,r18,256
    cec4:	d8c02b15 	stw	r3,172(sp)
    cec8:	20021516 	blt	r4,zero,d720 <___vfprintf_internal_r+0x1f1c>
    cecc:	dcc03817 	ldw	r19,224(sp)
    ced0:	d8002a05 	stb	zero,168(sp)
    ced4:	00801984 	movi	r2,102
    ced8:	8881f926 	beq	r17,r2,d6c0 <___vfprintf_internal_r+0x1ebc>
    cedc:	00801184 	movi	r2,70
    cee0:	88821c26 	beq	r17,r2,d754 <___vfprintf_internal_r+0x1f50>
    cee4:	00801144 	movi	r2,69
    cee8:	b081ef26 	beq	r22,r2,d6a8 <___vfprintf_internal_r+0x1ea4>
    ceec:	d8c02917 	ldw	r3,164(sp)
    cef0:	d8802104 	addi	r2,sp,132
    cef4:	d8800315 	stw	r2,12(sp)
    cef8:	d9403617 	ldw	r5,216(sp)
    cefc:	d8802504 	addi	r2,sp,148
    cf00:	d9002c17 	ldw	r4,176(sp)
    cf04:	d8800215 	stw	r2,8(sp)
    cf08:	d8802604 	addi	r2,sp,152
    cf0c:	d8c00015 	stw	r3,0(sp)
    cf10:	d8800115 	stw	r2,4(sp)
    cf14:	01c00084 	movi	r7,2
    cf18:	980d883a 	mov	r6,r19
    cf1c:	d8c03c15 	stw	r3,240(sp)
    cf20:	da003d15 	stw	r8,244(sp)
    cf24:	000de280 	call	de28 <_dtoa_r>
    cf28:	1021883a 	mov	r16,r2
    cf2c:	008019c4 	movi	r2,103
    cf30:	d8c03c17 	ldw	r3,240(sp)
    cf34:	da003d17 	ldw	r8,244(sp)
    cf38:	88817126 	beq	r17,r2,d500 <___vfprintf_internal_r+0x1cfc>
    cf3c:	008011c4 	movi	r2,71
    cf40:	88829226 	beq	r17,r2,d98c <___vfprintf_internal_r+0x2188>
    cf44:	80f9883a 	add	fp,r16,r3
    cf48:	d9003617 	ldw	r4,216(sp)
    cf4c:	000d883a 	mov	r6,zero
    cf50:	000f883a 	mov	r7,zero
    cf54:	980b883a 	mov	r5,r19
    cf58:	da003d15 	stw	r8,244(sp)
    cf5c:	00171780 	call	17178 <__eqdf2>
    cf60:	da003d17 	ldw	r8,244(sp)
    cf64:	10018d26 	beq	r2,zero,d59c <___vfprintf_internal_r+0x1d98>
    cf68:	d8802117 	ldw	r2,132(sp)
    cf6c:	1700062e 	bgeu	r2,fp,cf88 <___vfprintf_internal_r+0x1784>
    cf70:	01000c04 	movi	r4,48
    cf74:	10c00044 	addi	r3,r2,1
    cf78:	d8c02115 	stw	r3,132(sp)
    cf7c:	11000005 	stb	r4,0(r2)
    cf80:	d8802117 	ldw	r2,132(sp)
    cf84:	173ffb36 	bltu	r2,fp,cf74 <__alt_data_end+0xf000cf74>
    cf88:	1405c83a 	sub	r2,r2,r16
    cf8c:	d8803315 	stw	r2,204(sp)
    cf90:	008011c4 	movi	r2,71
    cf94:	b0817626 	beq	r22,r2,d570 <___vfprintf_internal_r+0x1d6c>
    cf98:	00801944 	movi	r2,101
    cf9c:	1442810e 	bge	r2,r17,d9a4 <___vfprintf_internal_r+0x21a0>
    cfa0:	d8c02617 	ldw	r3,152(sp)
    cfa4:	00801984 	movi	r2,102
    cfa8:	d8c03215 	stw	r3,200(sp)
    cfac:	8881fe26 	beq	r17,r2,d7a8 <___vfprintf_internal_r+0x1fa4>
    cfb0:	d8c03217 	ldw	r3,200(sp)
    cfb4:	d9003317 	ldw	r4,204(sp)
    cfb8:	1901dd16 	blt	r3,r4,d730 <___vfprintf_internal_r+0x1f2c>
    cfbc:	9480004c 	andi	r18,r18,1
    cfc0:	90022b1e 	bne	r18,zero,d870 <___vfprintf_internal_r+0x206c>
    cfc4:	1805883a 	mov	r2,r3
    cfc8:	18028016 	blt	r3,zero,d9cc <___vfprintf_internal_r+0x21c8>
    cfcc:	d8c03217 	ldw	r3,200(sp)
    cfd0:	044019c4 	movi	r17,103
    cfd4:	d8c02e15 	stw	r3,184(sp)
    cfd8:	df002a07 	ldb	fp,168(sp)
    cfdc:	e001531e 	bne	fp,zero,d52c <___vfprintf_internal_r+0x1d28>
    cfe0:	df002783 	ldbu	fp,158(sp)
    cfe4:	d8802a15 	stw	r2,168(sp)
    cfe8:	dc802b17 	ldw	r18,172(sp)
    cfec:	d8002915 	stw	zero,164(sp)
    cff0:	003bd106 	br	bf38 <__alt_data_end+0xf000bf38>
    cff4:	d8802d17 	ldw	r2,180(sp)
    cff8:	d8c02d17 	ldw	r3,180(sp)
    cffc:	d9002d17 	ldw	r4,180(sp)
    d000:	10800017 	ldw	r2,0(r2)
    d004:	18c00117 	ldw	r3,4(r3)
    d008:	21000204 	addi	r4,r4,8
    d00c:	d8803615 	stw	r2,216(sp)
    d010:	d8c03815 	stw	r3,224(sp)
    d014:	d9002d15 	stw	r4,180(sp)
    d018:	003b7506 	br	bdf0 <__alt_data_end+0xf000bdf0>
    d01c:	ac400007 	ldb	r17,0(r21)
    d020:	003a5906 	br	b988 <__alt_data_end+0xf000b988>
    d024:	9080100c 	andi	r2,r18,64
    d028:	1000a826 	beq	r2,zero,d2cc <___vfprintf_internal_r+0x1ac8>
    d02c:	d9002d17 	ldw	r4,180(sp)
    d030:	002d883a 	mov	r22,zero
    d034:	24c0000b 	ldhu	r19,0(r4)
    d038:	21000104 	addi	r4,r4,4
    d03c:	d9002d15 	stw	r4,180(sp)
    d040:	003ccb06 	br	c370 <__alt_data_end+0xf000c370>
    d044:	d8c02d17 	ldw	r3,180(sp)
    d048:	d9002917 	ldw	r4,164(sp)
    d04c:	002d883a 	mov	r22,zero
    d050:	18800104 	addi	r2,r3,4
    d054:	1cc00017 	ldw	r19,0(r3)
    d058:	203ebb0e 	bge	r4,zero,cb48 <__alt_data_end+0xf000cb48>
    d05c:	003ef106 	br	cc24 <__alt_data_end+0xf000cc24>
    d060:	9080040c 	andi	r2,r18,16
    d064:	1000921e 	bne	r2,zero,d2b0 <___vfprintf_internal_r+0x1aac>
    d068:	9480100c 	andi	r18,r18,64
    d06c:	90013926 	beq	r18,zero,d554 <___vfprintf_internal_r+0x1d50>
    d070:	d9002d17 	ldw	r4,180(sp)
    d074:	d9402f17 	ldw	r5,188(sp)
    d078:	20800017 	ldw	r2,0(r4)
    d07c:	21000104 	addi	r4,r4,4
    d080:	d9002d15 	stw	r4,180(sp)
    d084:	1140000d 	sth	r5,0(r2)
    d088:	003a1606 	br	b8e4 <__alt_data_end+0xf000b8e4>
    d08c:	9080100c 	andi	r2,r18,64
    d090:	10008026 	beq	r2,zero,d294 <___vfprintf_internal_r+0x1a90>
    d094:	d8c02d17 	ldw	r3,180(sp)
    d098:	1cc0000f 	ldh	r19,0(r3)
    d09c:	18c00104 	addi	r3,r3,4
    d0a0:	d8c02d15 	stw	r3,180(sp)
    d0a4:	982dd7fa 	srai	r22,r19,31
    d0a8:	b005883a 	mov	r2,r22
    d0ac:	003b1f06 	br	bd2c <__alt_data_end+0xf000bd2c>
    d0b0:	9080100c 	andi	r2,r18,64
    d0b4:	d8002785 	stb	zero,158(sp)
    d0b8:	10008a1e 	bne	r2,zero,d2e4 <___vfprintf_internal_r+0x1ae0>
    d0bc:	d9402d17 	ldw	r5,180(sp)
    d0c0:	d8c02917 	ldw	r3,164(sp)
    d0c4:	002d883a 	mov	r22,zero
    d0c8:	28800104 	addi	r2,r5,4
    d0cc:	2cc00017 	ldw	r19,0(r5)
    d0d0:	183e4b0e 	bge	r3,zero,ca00 <__alt_data_end+0xf000ca00>
    d0d4:	9d86b03a 	or	r3,r19,r22
    d0d8:	d8802d15 	stw	r2,180(sp)
    d0dc:	183e4c1e 	bne	r3,zero,ca10 <__alt_data_end+0xf000ca10>
    d0e0:	0039883a 	mov	fp,zero
    d0e4:	0005883a 	mov	r2,zero
    d0e8:	003d4006 	br	c5ec <__alt_data_end+0xf000c5ec>
    d0ec:	01420034 	movhi	r5,2048
    d0f0:	2940e784 	addi	r5,r5,926
    d0f4:	d9402b15 	stw	r5,172(sp)
    d0f8:	d9402b17 	ldw	r5,172(sp)
    d0fc:	1c47883a 	add	r3,r3,r17
    d100:	10800044 	addi	r2,r2,1
    d104:	41400015 	stw	r5,0(r8)
    d108:	44400115 	stw	r17,4(r8)
    d10c:	d8c02015 	stw	r3,128(sp)
    d110:	d8801f15 	stw	r2,124(sp)
    d114:	010001c4 	movi	r4,7
    d118:	20bec816 	blt	r4,r2,cc3c <__alt_data_end+0xf000cc3c>
    d11c:	42000204 	addi	r8,r8,8
    d120:	003ecd06 	br	cc58 <__alt_data_end+0xf000cc58>
    d124:	d9002917 	ldw	r4,164(sp)
    d128:	d8002785 	stb	zero,158(sp)
    d12c:	203d2d16 	blt	r4,zero,c5e4 <__alt_data_end+0xf000c5e4>
    d130:	00bfdfc4 	movi	r2,-129
    d134:	90a4703a 	and	r18,r18,r2
    d138:	003a9106 	br	bb80 <__alt_data_end+0xf000bb80>
    d13c:	01020034 	movhi	r4,2048
    d140:	2100e784 	addi	r4,r4,926
    d144:	d9002b15 	stw	r4,172(sp)
    d148:	003c0c06 	br	c17c <__alt_data_end+0xf000c17c>
    d14c:	d9002c17 	ldw	r4,176(sp)
    d150:	d9801e04 	addi	r6,sp,120
    d154:	b80b883a 	mov	r5,r23
    d158:	0013f9c0 	call	13f9c <__sprint_r>
    d15c:	103aab1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d160:	d8c02017 	ldw	r3,128(sp)
    d164:	da000404 	addi	r8,sp,16
    d168:	003d4106 	br	c670 <__alt_data_end+0xf000c670>
    d16c:	d8801f17 	ldw	r2,124(sp)
    d170:	01420034 	movhi	r5,2048
    d174:	01000044 	movi	r4,1
    d178:	18c00044 	addi	r3,r3,1
    d17c:	10800044 	addi	r2,r2,1
    d180:	2940df04 	addi	r5,r5,892
    d184:	41000115 	stw	r4,4(r8)
    d188:	41400015 	stw	r5,0(r8)
    d18c:	d8c02015 	stw	r3,128(sp)
    d190:	d8801f15 	stw	r2,124(sp)
    d194:	010001c4 	movi	r4,7
    d198:	20805c16 	blt	r4,r2,d30c <___vfprintf_internal_r+0x1b08>
    d19c:	42000204 	addi	r8,r8,8
    d1a0:	8800041e 	bne	r17,zero,d1b4 <___vfprintf_internal_r+0x19b0>
    d1a4:	d8803317 	ldw	r2,204(sp)
    d1a8:	1000021e 	bne	r2,zero,d1b4 <___vfprintf_internal_r+0x19b0>
    d1ac:	9080004c 	andi	r2,r18,1
    d1b0:	103c0926 	beq	r2,zero,c1d8 <__alt_data_end+0xf000c1d8>
    d1b4:	d9003717 	ldw	r4,220(sp)
    d1b8:	d8801f17 	ldw	r2,124(sp)
    d1bc:	d9403417 	ldw	r5,208(sp)
    d1c0:	20c7883a 	add	r3,r4,r3
    d1c4:	10800044 	addi	r2,r2,1
    d1c8:	41000115 	stw	r4,4(r8)
    d1cc:	41400015 	stw	r5,0(r8)
    d1d0:	d8c02015 	stw	r3,128(sp)
    d1d4:	d8801f15 	stw	r2,124(sp)
    d1d8:	010001c4 	movi	r4,7
    d1dc:	20812116 	blt	r4,r2,d664 <___vfprintf_internal_r+0x1e60>
    d1e0:	42000204 	addi	r8,r8,8
    d1e4:	0463c83a 	sub	r17,zero,r17
    d1e8:	0440730e 	bge	zero,r17,d3b8 <___vfprintf_internal_r+0x1bb4>
    d1ec:	05800404 	movi	r22,16
    d1f0:	b440860e 	bge	r22,r17,d40c <___vfprintf_internal_r+0x1c08>
    d1f4:	01420034 	movhi	r5,2048
    d1f8:	2940e784 	addi	r5,r5,926
    d1fc:	d9402b15 	stw	r5,172(sp)
    d200:	070001c4 	movi	fp,7
    d204:	dcc02c17 	ldw	r19,176(sp)
    d208:	00000306 	br	d218 <___vfprintf_internal_r+0x1a14>
    d20c:	42000204 	addi	r8,r8,8
    d210:	8c7ffc04 	addi	r17,r17,-16
    d214:	b440800e 	bge	r22,r17,d418 <___vfprintf_internal_r+0x1c14>
    d218:	18c00404 	addi	r3,r3,16
    d21c:	10800044 	addi	r2,r2,1
    d220:	45000015 	stw	r20,0(r8)
    d224:	45800115 	stw	r22,4(r8)
    d228:	d8c02015 	stw	r3,128(sp)
    d22c:	d8801f15 	stw	r2,124(sp)
    d230:	e0bff60e 	bge	fp,r2,d20c <__alt_data_end+0xf000d20c>
    d234:	d9801e04 	addi	r6,sp,120
    d238:	b80b883a 	mov	r5,r23
    d23c:	9809883a 	mov	r4,r19
    d240:	0013f9c0 	call	13f9c <__sprint_r>
    d244:	103a711e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d248:	d8c02017 	ldw	r3,128(sp)
    d24c:	d8801f17 	ldw	r2,124(sp)
    d250:	da000404 	addi	r8,sp,16
    d254:	003fee06 	br	d210 <__alt_data_end+0xf000d210>
    d258:	00bfffc4 	movi	r2,-1
    d25c:	003a6f06 	br	bc1c <__alt_data_end+0xf000bc1c>
    d260:	008011c4 	movi	r2,71
    d264:	1440b816 	blt	r2,r17,d548 <___vfprintf_internal_r+0x1d44>
    d268:	04020034 	movhi	r16,2048
    d26c:	8400d104 	addi	r16,r16,836
    d270:	00c000c4 	movi	r3,3
    d274:	00bfdfc4 	movi	r2,-129
    d278:	d8c02a15 	stw	r3,168(sp)
    d27c:	90a4703a 	and	r18,r18,r2
    d280:	df002783 	ldbu	fp,158(sp)
    d284:	d8c02e15 	stw	r3,184(sp)
    d288:	d8002915 	stw	zero,164(sp)
    d28c:	d8003215 	stw	zero,200(sp)
    d290:	003b2906 	br	bf38 <__alt_data_end+0xf000bf38>
    d294:	d9002d17 	ldw	r4,180(sp)
    d298:	24c00017 	ldw	r19,0(r4)
    d29c:	21000104 	addi	r4,r4,4
    d2a0:	d9002d15 	stw	r4,180(sp)
    d2a4:	982dd7fa 	srai	r22,r19,31
    d2a8:	b005883a 	mov	r2,r22
    d2ac:	003a9f06 	br	bd2c <__alt_data_end+0xf000bd2c>
    d2b0:	d9402d17 	ldw	r5,180(sp)
    d2b4:	d8c02f17 	ldw	r3,188(sp)
    d2b8:	28800017 	ldw	r2,0(r5)
    d2bc:	29400104 	addi	r5,r5,4
    d2c0:	d9402d15 	stw	r5,180(sp)
    d2c4:	10c00015 	stw	r3,0(r2)
    d2c8:	00398606 	br	b8e4 <__alt_data_end+0xf000b8e4>
    d2cc:	d9402d17 	ldw	r5,180(sp)
    d2d0:	002d883a 	mov	r22,zero
    d2d4:	2cc00017 	ldw	r19,0(r5)
    d2d8:	29400104 	addi	r5,r5,4
    d2dc:	d9402d15 	stw	r5,180(sp)
    d2e0:	003c2306 	br	c370 <__alt_data_end+0xf000c370>
    d2e4:	d8c02d17 	ldw	r3,180(sp)
    d2e8:	d9002917 	ldw	r4,164(sp)
    d2ec:	002d883a 	mov	r22,zero
    d2f0:	18800104 	addi	r2,r3,4
    d2f4:	1cc0000b 	ldhu	r19,0(r3)
    d2f8:	203dc10e 	bge	r4,zero,ca00 <__alt_data_end+0xf000ca00>
    d2fc:	003f7506 	br	d0d4 <__alt_data_end+0xf000d0d4>
    d300:	04020034 	movhi	r16,2048
    d304:	8400cf04 	addi	r16,r16,828
    d308:	003acc06 	br	be3c <__alt_data_end+0xf000be3c>
    d30c:	d9002c17 	ldw	r4,176(sp)
    d310:	d9801e04 	addi	r6,sp,120
    d314:	b80b883a 	mov	r5,r23
    d318:	0013f9c0 	call	13f9c <__sprint_r>
    d31c:	103a3b1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d320:	dc402617 	ldw	r17,152(sp)
    d324:	d8c02017 	ldw	r3,128(sp)
    d328:	da000404 	addi	r8,sp,16
    d32c:	003f9c06 	br	d1a0 <__alt_data_end+0xf000d1a0>
    d330:	ac400043 	ldbu	r17,1(r21)
    d334:	94800814 	ori	r18,r18,32
    d338:	ad400044 	addi	r21,r21,1
    d33c:	8c403fcc 	andi	r17,r17,255
    d340:	8c40201c 	xori	r17,r17,128
    d344:	8c7fe004 	addi	r17,r17,-128
    d348:	00398f06 	br	b988 <__alt_data_end+0xf000b988>
    d34c:	d8c02d15 	stw	r3,180(sp)
    d350:	0039883a 	mov	fp,zero
    d354:	003e3506 	br	cc2c <__alt_data_end+0xf000cc2c>
    d358:	d9002c17 	ldw	r4,176(sp)
    d35c:	d9801e04 	addi	r6,sp,120
    d360:	b80b883a 	mov	r5,r23
    d364:	0013f9c0 	call	13f9c <__sprint_r>
    d368:	103a281e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d36c:	d8c02017 	ldw	r3,128(sp)
    d370:	da000404 	addi	r8,sp,16
    d374:	003cd006 	br	c6b8 <__alt_data_end+0xf000c6b8>
    d378:	8009883a 	mov	r4,r16
    d37c:	da003d15 	stw	r8,244(sp)
    d380:	00095940 	call	9594 <strlen>
    d384:	d8802e15 	stw	r2,184(sp)
    d388:	da003d17 	ldw	r8,244(sp)
    d38c:	103c340e 	bge	r2,zero,c460 <__alt_data_end+0xf000c460>
    d390:	0005883a 	mov	r2,zero
    d394:	003c3206 	br	c460 <__alt_data_end+0xf000c460>
    d398:	d9002c17 	ldw	r4,176(sp)
    d39c:	d9801e04 	addi	r6,sp,120
    d3a0:	b80b883a 	mov	r5,r23
    d3a4:	0013f9c0 	call	13f9c <__sprint_r>
    d3a8:	103a181e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d3ac:	d8c02017 	ldw	r3,128(sp)
    d3b0:	d8801f17 	ldw	r2,124(sp)
    d3b4:	da000404 	addi	r8,sp,16
    d3b8:	d9403317 	ldw	r5,204(sp)
    d3bc:	10800044 	addi	r2,r2,1
    d3c0:	44000015 	stw	r16,0(r8)
    d3c4:	28c7883a 	add	r3,r5,r3
    d3c8:	003b7d06 	br	c1c0 <__alt_data_end+0xf000c1c0>
    d3cc:	01020034 	movhi	r4,2048
    d3d0:	2100eb84 	addi	r4,r4,942
    d3d4:	d9003515 	stw	r4,212(sp)
    d3d8:	003b1406 	br	c02c <__alt_data_end+0xf000c02c>
    d3dc:	013fffc4 	movi	r4,-1
    d3e0:	003a3506 	br	bcb8 <__alt_data_end+0xf000bcb8>
    d3e4:	0023883a 	mov	r17,zero
    d3e8:	003d9d06 	br	ca60 <__alt_data_end+0xf000ca60>
    d3ec:	d9002c17 	ldw	r4,176(sp)
    d3f0:	d9801e04 	addi	r6,sp,120
    d3f4:	b80b883a 	mov	r5,r23
    d3f8:	0013f9c0 	call	13f9c <__sprint_r>
    d3fc:	103a031e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d400:	d8c02017 	ldw	r3,128(sp)
    d404:	da000404 	addi	r8,sp,16
    d408:	003d9406 	br	ca5c <__alt_data_end+0xf000ca5c>
    d40c:	01020034 	movhi	r4,2048
    d410:	2100e784 	addi	r4,r4,926
    d414:	d9002b15 	stw	r4,172(sp)
    d418:	d9002b17 	ldw	r4,172(sp)
    d41c:	1c47883a 	add	r3,r3,r17
    d420:	10800044 	addi	r2,r2,1
    d424:	41000015 	stw	r4,0(r8)
    d428:	44400115 	stw	r17,4(r8)
    d42c:	d8c02015 	stw	r3,128(sp)
    d430:	d8801f15 	stw	r2,124(sp)
    d434:	010001c4 	movi	r4,7
    d438:	20bfd716 	blt	r4,r2,d398 <__alt_data_end+0xf000d398>
    d43c:	42000204 	addi	r8,r8,8
    d440:	003fdd06 	br	d3b8 <__alt_data_end+0xf000d3b8>
    d444:	d9002c17 	ldw	r4,176(sp)
    d448:	d9801e04 	addi	r6,sp,120
    d44c:	b80b883a 	mov	r5,r23
    d450:	0013f9c0 	call	13f9c <__sprint_r>
    d454:	1039ed1e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d458:	d8802617 	ldw	r2,152(sp)
    d45c:	d8c02017 	ldw	r3,128(sp)
    d460:	da000404 	addi	r8,sp,16
    d464:	003e1006 	br	cca8 <__alt_data_end+0xf000cca8>
    d468:	00800044 	movi	r2,1
    d46c:	10803fcc 	andi	r2,r2,255
    d470:	00c00044 	movi	r3,1
    d474:	10fa3526 	beq	r2,r3,bd4c <__alt_data_end+0xf000bd4c>
    d478:	00c00084 	movi	r3,2
    d47c:	10fbcb26 	beq	r2,r3,c3ac <__alt_data_end+0xf000c3ac>
    d480:	003a8f06 	br	bec0 <__alt_data_end+0xf000bec0>
    d484:	01020034 	movhi	r4,2048
    d488:	2100eb84 	addi	r4,r4,942
    d48c:	d9003515 	stw	r4,212(sp)
    d490:	003b7606 	br	c26c <__alt_data_end+0xf000c26c>
    d494:	d8802917 	ldw	r2,164(sp)
    d498:	00c00184 	movi	r3,6
    d49c:	1880012e 	bgeu	r3,r2,d4a4 <___vfprintf_internal_r+0x1ca0>
    d4a0:	1805883a 	mov	r2,r3
    d4a4:	d8802e15 	stw	r2,184(sp)
    d4a8:	1000ef16 	blt	r2,zero,d868 <___vfprintf_internal_r+0x2064>
    d4ac:	04020034 	movhi	r16,2048
    d4b0:	d8802a15 	stw	r2,168(sp)
    d4b4:	dcc02d15 	stw	r19,180(sp)
    d4b8:	d8002915 	stw	zero,164(sp)
    d4bc:	d8003215 	stw	zero,200(sp)
    d4c0:	8400dd04 	addi	r16,r16,884
    d4c4:	0039883a 	mov	fp,zero
    d4c8:	003aa206 	br	bf54 <__alt_data_end+0xf000bf54>
    d4cc:	0021883a 	mov	r16,zero
    d4d0:	003e0706 	br	ccf0 <__alt_data_end+0xf000ccf0>
    d4d4:	d9002c17 	ldw	r4,176(sp)
    d4d8:	d9801e04 	addi	r6,sp,120
    d4dc:	b80b883a 	mov	r5,r23
    d4e0:	0013f9c0 	call	13f9c <__sprint_r>
    d4e4:	1039c91e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d4e8:	d8802617 	ldw	r2,152(sp)
    d4ec:	d9403317 	ldw	r5,204(sp)
    d4f0:	d8c02017 	ldw	r3,128(sp)
    d4f4:	da000404 	addi	r8,sp,16
    d4f8:	2885c83a 	sub	r2,r5,r2
    d4fc:	003dfb06 	br	ccec <__alt_data_end+0xf000ccec>
    d500:	9080004c 	andi	r2,r18,1
    d504:	103e8f1e 	bne	r2,zero,cf44 <__alt_data_end+0xf000cf44>
    d508:	d8802117 	ldw	r2,132(sp)
    d50c:	003e9e06 	br	cf88 <__alt_data_end+0xf000cf88>
    d510:	1025883a 	mov	r18,r2
    d514:	0039883a 	mov	fp,zero
    d518:	00800084 	movi	r2,2
    d51c:	003fd306 	br	d46c <__alt_data_end+0xf000d46c>
    d520:	07000b44 	movi	fp,45
    d524:	df002785 	stb	fp,158(sp)
    d528:	003a4006 	br	be2c <__alt_data_end+0xf000be2c>
    d52c:	00c00b44 	movi	r3,45
    d530:	d8c02785 	stb	r3,158(sp)
    d534:	d8802a15 	stw	r2,168(sp)
    d538:	dc802b17 	ldw	r18,172(sp)
    d53c:	d8002915 	stw	zero,164(sp)
    d540:	07000b44 	movi	fp,45
    d544:	003a8006 	br	bf48 <__alt_data_end+0xf000bf48>
    d548:	04020034 	movhi	r16,2048
    d54c:	8400d204 	addi	r16,r16,840
    d550:	003f4706 	br	d270 <__alt_data_end+0xf000d270>
    d554:	d8c02d17 	ldw	r3,180(sp)
    d558:	d9002f17 	ldw	r4,188(sp)
    d55c:	18800017 	ldw	r2,0(r3)
    d560:	18c00104 	addi	r3,r3,4
    d564:	d8c02d15 	stw	r3,180(sp)
    d568:	11000015 	stw	r4,0(r2)
    d56c:	0038dd06 	br	b8e4 <__alt_data_end+0xf000b8e4>
    d570:	dd802617 	ldw	r22,152(sp)
    d574:	00bfff44 	movi	r2,-3
    d578:	b0801c16 	blt	r22,r2,d5ec <___vfprintf_internal_r+0x1de8>
    d57c:	d9402917 	ldw	r5,164(sp)
    d580:	2d801a16 	blt	r5,r22,d5ec <___vfprintf_internal_r+0x1de8>
    d584:	dd803215 	stw	r22,200(sp)
    d588:	003e8906 	br	cfb0 <__alt_data_end+0xf000cfb0>
    d58c:	01020034 	movhi	r4,2048
    d590:	2100e784 	addi	r4,r4,926
    d594:	d9002b15 	stw	r4,172(sp)
    d598:	003c9106 	br	c7e0 <__alt_data_end+0xf000c7e0>
    d59c:	e005883a 	mov	r2,fp
    d5a0:	003e7906 	br	cf88 <__alt_data_end+0xf000cf88>
    d5a4:	d9402917 	ldw	r5,164(sp)
    d5a8:	df002783 	ldbu	fp,158(sp)
    d5ac:	dcc02d15 	stw	r19,180(sp)
    d5b0:	d9402a15 	stw	r5,168(sp)
    d5b4:	d9402e15 	stw	r5,184(sp)
    d5b8:	d8002915 	stw	zero,164(sp)
    d5bc:	d8003215 	stw	zero,200(sp)
    d5c0:	003a5d06 	br	bf38 <__alt_data_end+0xf000bf38>
    d5c4:	9080004c 	andi	r2,r18,1
    d5c8:	0039883a 	mov	fp,zero
    d5cc:	10000426 	beq	r2,zero,d5e0 <___vfprintf_internal_r+0x1ddc>
    d5d0:	00800c04 	movi	r2,48
    d5d4:	dc001dc4 	addi	r16,sp,119
    d5d8:	d8801dc5 	stb	r2,119(sp)
    d5dc:	003b8006 	br	c3e0 <__alt_data_end+0xf000c3e0>
    d5e0:	d8002e15 	stw	zero,184(sp)
    d5e4:	dc001e04 	addi	r16,sp,120
    d5e8:	003a4d06 	br	bf20 <__alt_data_end+0xf000bf20>
    d5ec:	8c7fff84 	addi	r17,r17,-2
    d5f0:	b5bfffc4 	addi	r22,r22,-1
    d5f4:	dd802615 	stw	r22,152(sp)
    d5f8:	dc4022c5 	stb	r17,139(sp)
    d5fc:	b000bf16 	blt	r22,zero,d8fc <___vfprintf_internal_r+0x20f8>
    d600:	00800ac4 	movi	r2,43
    d604:	d8802305 	stb	r2,140(sp)
    d608:	00800244 	movi	r2,9
    d60c:	15807016 	blt	r2,r22,d7d0 <___vfprintf_internal_r+0x1fcc>
    d610:	00800c04 	movi	r2,48
    d614:	b5800c04 	addi	r22,r22,48
    d618:	d8802345 	stb	r2,141(sp)
    d61c:	dd802385 	stb	r22,142(sp)
    d620:	d88023c4 	addi	r2,sp,143
    d624:	df0022c4 	addi	fp,sp,139
    d628:	d8c03317 	ldw	r3,204(sp)
    d62c:	1739c83a 	sub	fp,r2,fp
    d630:	d9003317 	ldw	r4,204(sp)
    d634:	e0c7883a 	add	r3,fp,r3
    d638:	df003a15 	stw	fp,232(sp)
    d63c:	d8c02e15 	stw	r3,184(sp)
    d640:	00800044 	movi	r2,1
    d644:	1100b30e 	bge	r2,r4,d914 <___vfprintf_internal_r+0x2110>
    d648:	d8c02e17 	ldw	r3,184(sp)
    d64c:	18c00044 	addi	r3,r3,1
    d650:	d8c02e15 	stw	r3,184(sp)
    d654:	1805883a 	mov	r2,r3
    d658:	1800ac16 	blt	r3,zero,d90c <___vfprintf_internal_r+0x2108>
    d65c:	d8003215 	stw	zero,200(sp)
    d660:	003e5d06 	br	cfd8 <__alt_data_end+0xf000cfd8>
    d664:	d9002c17 	ldw	r4,176(sp)
    d668:	d9801e04 	addi	r6,sp,120
    d66c:	b80b883a 	mov	r5,r23
    d670:	0013f9c0 	call	13f9c <__sprint_r>
    d674:	1039651e 	bne	r2,zero,bc0c <__alt_data_end+0xf000bc0c>
    d678:	dc402617 	ldw	r17,152(sp)
    d67c:	d8c02017 	ldw	r3,128(sp)
    d680:	d8801f17 	ldw	r2,124(sp)
    d684:	da000404 	addi	r8,sp,16
    d688:	003ed606 	br	d1e4 <__alt_data_end+0xf000d1e4>
    d68c:	582b883a 	mov	r21,r11
    d690:	d8002915 	stw	zero,164(sp)
    d694:	0038bd06 	br	b98c <__alt_data_end+0xf000b98c>
    d698:	d8802917 	ldw	r2,164(sp)
    d69c:	103e071e 	bne	r2,zero,cebc <__alt_data_end+0xf000cebc>
    d6a0:	dc002915 	stw	r16,164(sp)
    d6a4:	003e0506 	br	cebc <__alt_data_end+0xf000cebc>
    d6a8:	d9002917 	ldw	r4,164(sp)
    d6ac:	20c00044 	addi	r3,r4,1
    d6b0:	003e0f06 	br	cef0 <__alt_data_end+0xf000cef0>
    d6b4:	01400184 	movi	r5,6
    d6b8:	d9402915 	stw	r5,164(sp)
    d6bc:	003dff06 	br	cebc <__alt_data_end+0xf000cebc>
    d6c0:	d8802104 	addi	r2,sp,132
    d6c4:	d8800315 	stw	r2,12(sp)
    d6c8:	d8802504 	addi	r2,sp,148
    d6cc:	d8800215 	stw	r2,8(sp)
    d6d0:	d8802604 	addi	r2,sp,152
    d6d4:	d8800115 	stw	r2,4(sp)
    d6d8:	d8802917 	ldw	r2,164(sp)
    d6dc:	d9403617 	ldw	r5,216(sp)
    d6e0:	d9002c17 	ldw	r4,176(sp)
    d6e4:	d8800015 	stw	r2,0(sp)
    d6e8:	01c000c4 	movi	r7,3
    d6ec:	980d883a 	mov	r6,r19
    d6f0:	da003d15 	stw	r8,244(sp)
    d6f4:	000de280 	call	de28 <_dtoa_r>
    d6f8:	d8c02917 	ldw	r3,164(sp)
    d6fc:	da003d17 	ldw	r8,244(sp)
    d700:	1021883a 	mov	r16,r2
    d704:	10f9883a 	add	fp,r2,r3
    d708:	81000007 	ldb	r4,0(r16)
    d70c:	00800c04 	movi	r2,48
    d710:	20805e26 	beq	r4,r2,d88c <___vfprintf_internal_r+0x2088>
    d714:	d8c02617 	ldw	r3,152(sp)
    d718:	e0f9883a 	add	fp,fp,r3
    d71c:	003e0a06 	br	cf48 <__alt_data_end+0xf000cf48>
    d720:	00c00b44 	movi	r3,45
    d724:	24e0003c 	xorhi	r19,r4,32768
    d728:	d8c02a05 	stb	r3,168(sp)
    d72c:	003de906 	br	ced4 <__alt_data_end+0xf000ced4>
    d730:	d8c03217 	ldw	r3,200(sp)
    d734:	00c07a0e 	bge	zero,r3,d920 <___vfprintf_internal_r+0x211c>
    d738:	00800044 	movi	r2,1
    d73c:	d9003317 	ldw	r4,204(sp)
    d740:	1105883a 	add	r2,r2,r4
    d744:	d8802e15 	stw	r2,184(sp)
    d748:	10004e16 	blt	r2,zero,d884 <___vfprintf_internal_r+0x2080>
    d74c:	044019c4 	movi	r17,103
    d750:	003e2106 	br	cfd8 <__alt_data_end+0xf000cfd8>
    d754:	d9002917 	ldw	r4,164(sp)
    d758:	d8802104 	addi	r2,sp,132
    d75c:	d8800315 	stw	r2,12(sp)
    d760:	d9000015 	stw	r4,0(sp)
    d764:	d8802504 	addi	r2,sp,148
    d768:	d9403617 	ldw	r5,216(sp)
    d76c:	d9002c17 	ldw	r4,176(sp)
    d770:	d8800215 	stw	r2,8(sp)
    d774:	d8802604 	addi	r2,sp,152
    d778:	d8800115 	stw	r2,4(sp)
    d77c:	01c000c4 	movi	r7,3
    d780:	980d883a 	mov	r6,r19
    d784:	da003d15 	stw	r8,244(sp)
    d788:	000de280 	call	de28 <_dtoa_r>
    d78c:	d8c02917 	ldw	r3,164(sp)
    d790:	da003d17 	ldw	r8,244(sp)
    d794:	1021883a 	mov	r16,r2
    d798:	00801184 	movi	r2,70
    d79c:	80f9883a 	add	fp,r16,r3
    d7a0:	88bfd926 	beq	r17,r2,d708 <__alt_data_end+0xf000d708>
    d7a4:	003de806 	br	cf48 <__alt_data_end+0xf000cf48>
    d7a8:	d9002917 	ldw	r4,164(sp)
    d7ac:	00c04d0e 	bge	zero,r3,d8e4 <___vfprintf_internal_r+0x20e0>
    d7b0:	2000441e 	bne	r4,zero,d8c4 <___vfprintf_internal_r+0x20c0>
    d7b4:	9480004c 	andi	r18,r18,1
    d7b8:	9000421e 	bne	r18,zero,d8c4 <___vfprintf_internal_r+0x20c0>
    d7bc:	1805883a 	mov	r2,r3
    d7c0:	18007016 	blt	r3,zero,d984 <___vfprintf_internal_r+0x2180>
    d7c4:	d8c03217 	ldw	r3,200(sp)
    d7c8:	d8c02e15 	stw	r3,184(sp)
    d7cc:	003e0206 	br	cfd8 <__alt_data_end+0xf000cfd8>
    d7d0:	df0022c4 	addi	fp,sp,139
    d7d4:	dc002915 	stw	r16,164(sp)
    d7d8:	4027883a 	mov	r19,r8
    d7dc:	e021883a 	mov	r16,fp
    d7e0:	b009883a 	mov	r4,r22
    d7e4:	01400284 	movi	r5,10
    d7e8:	0008f740 	call	8f74 <__modsi3>
    d7ec:	10800c04 	addi	r2,r2,48
    d7f0:	843fffc4 	addi	r16,r16,-1
    d7f4:	b009883a 	mov	r4,r22
    d7f8:	01400284 	movi	r5,10
    d7fc:	80800005 	stb	r2,0(r16)
    d800:	0008ef00 	call	8ef0 <__divsi3>
    d804:	102d883a 	mov	r22,r2
    d808:	00800244 	movi	r2,9
    d80c:	15bff416 	blt	r2,r22,d7e0 <__alt_data_end+0xf000d7e0>
    d810:	9811883a 	mov	r8,r19
    d814:	b0800c04 	addi	r2,r22,48
    d818:	8027883a 	mov	r19,r16
    d81c:	997fffc4 	addi	r5,r19,-1
    d820:	98bfffc5 	stb	r2,-1(r19)
    d824:	dc002917 	ldw	r16,164(sp)
    d828:	2f006a2e 	bgeu	r5,fp,d9d4 <___vfprintf_internal_r+0x21d0>
    d82c:	d9c02384 	addi	r7,sp,142
    d830:	3ccfc83a 	sub	r7,r7,r19
    d834:	d9002344 	addi	r4,sp,141
    d838:	e1cf883a 	add	r7,fp,r7
    d83c:	00000106 	br	d844 <___vfprintf_internal_r+0x2040>
    d840:	28800003 	ldbu	r2,0(r5)
    d844:	20800005 	stb	r2,0(r4)
    d848:	21000044 	addi	r4,r4,1
    d84c:	29400044 	addi	r5,r5,1
    d850:	393ffb1e 	bne	r7,r4,d840 <__alt_data_end+0xf000d840>
    d854:	d8802304 	addi	r2,sp,140
    d858:	14c5c83a 	sub	r2,r2,r19
    d85c:	d8c02344 	addi	r3,sp,141
    d860:	1885883a 	add	r2,r3,r2
    d864:	003f7006 	br	d628 <__alt_data_end+0xf000d628>
    d868:	0005883a 	mov	r2,zero
    d86c:	003f0f06 	br	d4ac <__alt_data_end+0xf000d4ac>
    d870:	d8c03217 	ldw	r3,200(sp)
    d874:	18c00044 	addi	r3,r3,1
    d878:	d8c02e15 	stw	r3,184(sp)
    d87c:	1805883a 	mov	r2,r3
    d880:	183fb20e 	bge	r3,zero,d74c <__alt_data_end+0xf000d74c>
    d884:	0005883a 	mov	r2,zero
    d888:	003fb006 	br	d74c <__alt_data_end+0xf000d74c>
    d88c:	d9003617 	ldw	r4,216(sp)
    d890:	000d883a 	mov	r6,zero
    d894:	000f883a 	mov	r7,zero
    d898:	980b883a 	mov	r5,r19
    d89c:	d8c03c15 	stw	r3,240(sp)
    d8a0:	da003d15 	stw	r8,244(sp)
    d8a4:	00171780 	call	17178 <__eqdf2>
    d8a8:	d8c03c17 	ldw	r3,240(sp)
    d8ac:	da003d17 	ldw	r8,244(sp)
    d8b0:	103f9826 	beq	r2,zero,d714 <__alt_data_end+0xf000d714>
    d8b4:	00800044 	movi	r2,1
    d8b8:	10c7c83a 	sub	r3,r2,r3
    d8bc:	d8c02615 	stw	r3,152(sp)
    d8c0:	003f9506 	br	d718 <__alt_data_end+0xf000d718>
    d8c4:	d9002917 	ldw	r4,164(sp)
    d8c8:	d8c03217 	ldw	r3,200(sp)
    d8cc:	20800044 	addi	r2,r4,1
    d8d0:	1885883a 	add	r2,r3,r2
    d8d4:	d8802e15 	stw	r2,184(sp)
    d8d8:	103dbf0e 	bge	r2,zero,cfd8 <__alt_data_end+0xf000cfd8>
    d8dc:	0005883a 	mov	r2,zero
    d8e0:	003dbd06 	br	cfd8 <__alt_data_end+0xf000cfd8>
    d8e4:	2000211e 	bne	r4,zero,d96c <___vfprintf_internal_r+0x2168>
    d8e8:	9480004c 	andi	r18,r18,1
    d8ec:	90001f1e 	bne	r18,zero,d96c <___vfprintf_internal_r+0x2168>
    d8f0:	00800044 	movi	r2,1
    d8f4:	d8802e15 	stw	r2,184(sp)
    d8f8:	003db706 	br	cfd8 <__alt_data_end+0xf000cfd8>
    d8fc:	00800b44 	movi	r2,45
    d900:	05adc83a 	sub	r22,zero,r22
    d904:	d8802305 	stb	r2,140(sp)
    d908:	003f3f06 	br	d608 <__alt_data_end+0xf000d608>
    d90c:	0005883a 	mov	r2,zero
    d910:	003f5206 	br	d65c <__alt_data_end+0xf000d65c>
    d914:	90a4703a 	and	r18,r18,r2
    d918:	903f4e26 	beq	r18,zero,d654 <__alt_data_end+0xf000d654>
    d91c:	003f4a06 	br	d648 <__alt_data_end+0xf000d648>
    d920:	00800084 	movi	r2,2
    d924:	10c5c83a 	sub	r2,r2,r3
    d928:	003f8406 	br	d73c <__alt_data_end+0xf000d73c>
    d92c:	d8802d17 	ldw	r2,180(sp)
    d930:	d9002d17 	ldw	r4,180(sp)
    d934:	ac400043 	ldbu	r17,1(r21)
    d938:	10800017 	ldw	r2,0(r2)
    d93c:	582b883a 	mov	r21,r11
    d940:	d8802915 	stw	r2,164(sp)
    d944:	20800104 	addi	r2,r4,4
    d948:	d9002917 	ldw	r4,164(sp)
    d94c:	d8802d15 	stw	r2,180(sp)
    d950:	203e7a0e 	bge	r4,zero,d33c <__alt_data_end+0xf000d33c>
    d954:	8c403fcc 	andi	r17,r17,255
    d958:	00bfffc4 	movi	r2,-1
    d95c:	8c40201c 	xori	r17,r17,128
    d960:	d8802915 	stw	r2,164(sp)
    d964:	8c7fe004 	addi	r17,r17,-128
    d968:	00380706 	br	b988 <__alt_data_end+0xf000b988>
    d96c:	d8c02917 	ldw	r3,164(sp)
    d970:	18c00084 	addi	r3,r3,2
    d974:	d8c02e15 	stw	r3,184(sp)
    d978:	1805883a 	mov	r2,r3
    d97c:	183d960e 	bge	r3,zero,cfd8 <__alt_data_end+0xf000cfd8>
    d980:	003fd606 	br	d8dc <__alt_data_end+0xf000d8dc>
    d984:	0005883a 	mov	r2,zero
    d988:	003f8e06 	br	d7c4 <__alt_data_end+0xf000d7c4>
    d98c:	9080004c 	andi	r2,r18,1
    d990:	103f811e 	bne	r2,zero,d798 <__alt_data_end+0xf000d798>
    d994:	d8802117 	ldw	r2,132(sp)
    d998:	1405c83a 	sub	r2,r2,r16
    d99c:	d8803315 	stw	r2,204(sp)
    d9a0:	b47ef326 	beq	r22,r17,d570 <__alt_data_end+0xf000d570>
    d9a4:	dd802617 	ldw	r22,152(sp)
    d9a8:	003f1106 	br	d5f0 <__alt_data_end+0xf000d5f0>
    d9ac:	d9c02785 	stb	r7,158(sp)
    d9b0:	00390406 	br	bdc4 <__alt_data_end+0xf000bdc4>
    d9b4:	d9c02785 	stb	r7,158(sp)
    d9b8:	0038d306 	br	bd08 <__alt_data_end+0xf000bd08>
    d9bc:	d9c02785 	stb	r7,158(sp)
    d9c0:	003a6106 	br	c348 <__alt_data_end+0xf000c348>
    d9c4:	d9c02785 	stb	r7,158(sp)
    d9c8:	003af806 	br	c5ac <__alt_data_end+0xf000c5ac>
    d9cc:	0005883a 	mov	r2,zero
    d9d0:	003d7e06 	br	cfcc <__alt_data_end+0xf000cfcc>
    d9d4:	d8802344 	addi	r2,sp,141
    d9d8:	003f1306 	br	d628 <__alt_data_end+0xf000d628>
    d9dc:	d9c02785 	stb	r7,158(sp)
    d9e0:	00392306 	br	be70 <__alt_data_end+0xf000be70>
    d9e4:	d9c02785 	stb	r7,158(sp)
    d9e8:	003aa906 	br	c490 <__alt_data_end+0xf000c490>
    d9ec:	d9c02785 	stb	r7,158(sp)
    d9f0:	003a3d06 	br	c2e8 <__alt_data_end+0xf000c2e8>
    d9f4:	d9c02785 	stb	r7,158(sp)
    d9f8:	003aca06 	br	c524 <__alt_data_end+0xf000c524>

0000d9fc <__vfprintf_internal>:
    d9fc:	00820034 	movhi	r2,2048
    da00:	108b0204 	addi	r2,r2,11272
    da04:	300f883a 	mov	r7,r6
    da08:	280d883a 	mov	r6,r5
    da0c:	200b883a 	mov	r5,r4
    da10:	11000017 	ldw	r4,0(r2)
    da14:	000b8041 	jmpi	b804 <___vfprintf_internal_r>

0000da18 <__sbprintf>:
    da18:	2880030b 	ldhu	r2,12(r5)
    da1c:	2ac01917 	ldw	r11,100(r5)
    da20:	2a80038b 	ldhu	r10,14(r5)
    da24:	2a400717 	ldw	r9,28(r5)
    da28:	2a000917 	ldw	r8,36(r5)
    da2c:	defee204 	addi	sp,sp,-1144
    da30:	00c10004 	movi	r3,1024
    da34:	dc011a15 	stw	r16,1128(sp)
    da38:	10bfff4c 	andi	r2,r2,65533
    da3c:	2821883a 	mov	r16,r5
    da40:	d8cb883a 	add	r5,sp,r3
    da44:	dc811c15 	stw	r18,1136(sp)
    da48:	dc411b15 	stw	r17,1132(sp)
    da4c:	dfc11d15 	stw	ra,1140(sp)
    da50:	2025883a 	mov	r18,r4
    da54:	d881030d 	sth	r2,1036(sp)
    da58:	dac11915 	stw	r11,1124(sp)
    da5c:	da81038d 	sth	r10,1038(sp)
    da60:	da410715 	stw	r9,1052(sp)
    da64:	da010915 	stw	r8,1060(sp)
    da68:	dec10015 	stw	sp,1024(sp)
    da6c:	dec10415 	stw	sp,1040(sp)
    da70:	d8c10215 	stw	r3,1032(sp)
    da74:	d8c10515 	stw	r3,1044(sp)
    da78:	d8010615 	stw	zero,1048(sp)
    da7c:	000b8040 	call	b804 <___vfprintf_internal_r>
    da80:	1023883a 	mov	r17,r2
    da84:	10000416 	blt	r2,zero,da98 <__sbprintf+0x80>
    da88:	d9410004 	addi	r5,sp,1024
    da8c:	9009883a 	mov	r4,r18
    da90:	000f6cc0 	call	f6cc <_fflush_r>
    da94:	10000d1e 	bne	r2,zero,dacc <__sbprintf+0xb4>
    da98:	d881030b 	ldhu	r2,1036(sp)
    da9c:	1080100c 	andi	r2,r2,64
    daa0:	10000326 	beq	r2,zero,dab0 <__sbprintf+0x98>
    daa4:	8080030b 	ldhu	r2,12(r16)
    daa8:	10801014 	ori	r2,r2,64
    daac:	8080030d 	sth	r2,12(r16)
    dab0:	8805883a 	mov	r2,r17
    dab4:	dfc11d17 	ldw	ra,1140(sp)
    dab8:	dc811c17 	ldw	r18,1136(sp)
    dabc:	dc411b17 	ldw	r17,1132(sp)
    dac0:	dc011a17 	ldw	r16,1128(sp)
    dac4:	dec11e04 	addi	sp,sp,1144
    dac8:	f800283a 	ret
    dacc:	047fffc4 	movi	r17,-1
    dad0:	003ff106 	br	da98 <__alt_data_end+0xf000da98>

0000dad4 <__swsetup_r>:
    dad4:	00820034 	movhi	r2,2048
    dad8:	defffd04 	addi	sp,sp,-12
    dadc:	108b0204 	addi	r2,r2,11272
    dae0:	dc400115 	stw	r17,4(sp)
    dae4:	2023883a 	mov	r17,r4
    dae8:	11000017 	ldw	r4,0(r2)
    daec:	dc000015 	stw	r16,0(sp)
    daf0:	dfc00215 	stw	ra,8(sp)
    daf4:	2821883a 	mov	r16,r5
    daf8:	20000226 	beq	r4,zero,db04 <__swsetup_r+0x30>
    dafc:	20800e17 	ldw	r2,56(r4)
    db00:	10003126 	beq	r2,zero,dbc8 <__swsetup_r+0xf4>
    db04:	8080030b 	ldhu	r2,12(r16)
    db08:	10c0020c 	andi	r3,r2,8
    db0c:	1009883a 	mov	r4,r2
    db10:	18000f26 	beq	r3,zero,db50 <__swsetup_r+0x7c>
    db14:	80c00417 	ldw	r3,16(r16)
    db18:	18001526 	beq	r3,zero,db70 <__swsetup_r+0x9c>
    db1c:	1100004c 	andi	r4,r2,1
    db20:	20001c1e 	bne	r4,zero,db94 <__swsetup_r+0xc0>
    db24:	1080008c 	andi	r2,r2,2
    db28:	1000291e 	bne	r2,zero,dbd0 <__swsetup_r+0xfc>
    db2c:	80800517 	ldw	r2,20(r16)
    db30:	80800215 	stw	r2,8(r16)
    db34:	18001c26 	beq	r3,zero,dba8 <__swsetup_r+0xd4>
    db38:	0005883a 	mov	r2,zero
    db3c:	dfc00217 	ldw	ra,8(sp)
    db40:	dc400117 	ldw	r17,4(sp)
    db44:	dc000017 	ldw	r16,0(sp)
    db48:	dec00304 	addi	sp,sp,12
    db4c:	f800283a 	ret
    db50:	2080040c 	andi	r2,r4,16
    db54:	10002e26 	beq	r2,zero,dc10 <__swsetup_r+0x13c>
    db58:	2080010c 	andi	r2,r4,4
    db5c:	10001e1e 	bne	r2,zero,dbd8 <__swsetup_r+0x104>
    db60:	80c00417 	ldw	r3,16(r16)
    db64:	20800214 	ori	r2,r4,8
    db68:	8080030d 	sth	r2,12(r16)
    db6c:	183feb1e 	bne	r3,zero,db1c <__alt_data_end+0xf000db1c>
    db70:	1100a00c 	andi	r4,r2,640
    db74:	01408004 	movi	r5,512
    db78:	217fe826 	beq	r4,r5,db1c <__alt_data_end+0xf000db1c>
    db7c:	800b883a 	mov	r5,r16
    db80:	8809883a 	mov	r4,r17
    db84:	001064c0 	call	1064c <__smakebuf_r>
    db88:	8080030b 	ldhu	r2,12(r16)
    db8c:	80c00417 	ldw	r3,16(r16)
    db90:	003fe206 	br	db1c <__alt_data_end+0xf000db1c>
    db94:	80800517 	ldw	r2,20(r16)
    db98:	80000215 	stw	zero,8(r16)
    db9c:	0085c83a 	sub	r2,zero,r2
    dba0:	80800615 	stw	r2,24(r16)
    dba4:	183fe41e 	bne	r3,zero,db38 <__alt_data_end+0xf000db38>
    dba8:	80c0030b 	ldhu	r3,12(r16)
    dbac:	0005883a 	mov	r2,zero
    dbb0:	1900200c 	andi	r4,r3,128
    dbb4:	203fe126 	beq	r4,zero,db3c <__alt_data_end+0xf000db3c>
    dbb8:	18c01014 	ori	r3,r3,64
    dbbc:	80c0030d 	sth	r3,12(r16)
    dbc0:	00bfffc4 	movi	r2,-1
    dbc4:	003fdd06 	br	db3c <__alt_data_end+0xf000db3c>
    dbc8:	000faa80 	call	faa8 <__sinit>
    dbcc:	003fcd06 	br	db04 <__alt_data_end+0xf000db04>
    dbd0:	0005883a 	mov	r2,zero
    dbd4:	003fd606 	br	db30 <__alt_data_end+0xf000db30>
    dbd8:	81400c17 	ldw	r5,48(r16)
    dbdc:	28000626 	beq	r5,zero,dbf8 <__swsetup_r+0x124>
    dbe0:	80801004 	addi	r2,r16,64
    dbe4:	28800326 	beq	r5,r2,dbf4 <__swsetup_r+0x120>
    dbe8:	8809883a 	mov	r4,r17
    dbec:	000fc1c0 	call	fc1c <_free_r>
    dbf0:	8100030b 	ldhu	r4,12(r16)
    dbf4:	80000c15 	stw	zero,48(r16)
    dbf8:	80c00417 	ldw	r3,16(r16)
    dbfc:	00bff6c4 	movi	r2,-37
    dc00:	1108703a 	and	r4,r2,r4
    dc04:	80000115 	stw	zero,4(r16)
    dc08:	80c00015 	stw	r3,0(r16)
    dc0c:	003fd506 	br	db64 <__alt_data_end+0xf000db64>
    dc10:	00800244 	movi	r2,9
    dc14:	88800015 	stw	r2,0(r17)
    dc18:	20801014 	ori	r2,r4,64
    dc1c:	8080030d 	sth	r2,12(r16)
    dc20:	00bfffc4 	movi	r2,-1
    dc24:	003fc506 	br	db3c <__alt_data_end+0xf000db3c>

0000dc28 <quorem>:
    dc28:	defff704 	addi	sp,sp,-36
    dc2c:	dc800215 	stw	r18,8(sp)
    dc30:	20800417 	ldw	r2,16(r4)
    dc34:	2c800417 	ldw	r18,16(r5)
    dc38:	dfc00815 	stw	ra,32(sp)
    dc3c:	ddc00715 	stw	r23,28(sp)
    dc40:	dd800615 	stw	r22,24(sp)
    dc44:	dd400515 	stw	r21,20(sp)
    dc48:	dd000415 	stw	r20,16(sp)
    dc4c:	dcc00315 	stw	r19,12(sp)
    dc50:	dc400115 	stw	r17,4(sp)
    dc54:	dc000015 	stw	r16,0(sp)
    dc58:	14807116 	blt	r2,r18,de20 <quorem+0x1f8>
    dc5c:	94bfffc4 	addi	r18,r18,-1
    dc60:	94ad883a 	add	r22,r18,r18
    dc64:	b5ad883a 	add	r22,r22,r22
    dc68:	2c400504 	addi	r17,r5,20
    dc6c:	8da9883a 	add	r20,r17,r22
    dc70:	25400504 	addi	r21,r4,20
    dc74:	282f883a 	mov	r23,r5
    dc78:	adad883a 	add	r22,r21,r22
    dc7c:	a1400017 	ldw	r5,0(r20)
    dc80:	2021883a 	mov	r16,r4
    dc84:	b1000017 	ldw	r4,0(r22)
    dc88:	29400044 	addi	r5,r5,1
    dc8c:	0008fe80 	call	8fe8 <__udivsi3>
    dc90:	1027883a 	mov	r19,r2
    dc94:	10002c26 	beq	r2,zero,dd48 <quorem+0x120>
    dc98:	a813883a 	mov	r9,r21
    dc9c:	880b883a 	mov	r5,r17
    dca0:	0009883a 	mov	r4,zero
    dca4:	000d883a 	mov	r6,zero
    dca8:	2a000017 	ldw	r8,0(r5)
    dcac:	49c00017 	ldw	r7,0(r9)
    dcb0:	29400104 	addi	r5,r5,4
    dcb4:	40bfffcc 	andi	r2,r8,65535
    dcb8:	14c5383a 	mul	r2,r2,r19
    dcbc:	4010d43a 	srli	r8,r8,16
    dcc0:	38ffffcc 	andi	r3,r7,65535
    dcc4:	1105883a 	add	r2,r2,r4
    dcc8:	1008d43a 	srli	r4,r2,16
    dccc:	44d1383a 	mul	r8,r8,r19
    dcd0:	198d883a 	add	r6,r3,r6
    dcd4:	10ffffcc 	andi	r3,r2,65535
    dcd8:	30c7c83a 	sub	r3,r6,r3
    dcdc:	380ed43a 	srli	r7,r7,16
    dce0:	4105883a 	add	r2,r8,r4
    dce4:	180dd43a 	srai	r6,r3,16
    dce8:	113fffcc 	andi	r4,r2,65535
    dcec:	390fc83a 	sub	r7,r7,r4
    dcf0:	398d883a 	add	r6,r7,r6
    dcf4:	300e943a 	slli	r7,r6,16
    dcf8:	18ffffcc 	andi	r3,r3,65535
    dcfc:	1008d43a 	srli	r4,r2,16
    dd00:	38ceb03a 	or	r7,r7,r3
    dd04:	49c00015 	stw	r7,0(r9)
    dd08:	300dd43a 	srai	r6,r6,16
    dd0c:	4a400104 	addi	r9,r9,4
    dd10:	a17fe52e 	bgeu	r20,r5,dca8 <__alt_data_end+0xf000dca8>
    dd14:	b0800017 	ldw	r2,0(r22)
    dd18:	10000b1e 	bne	r2,zero,dd48 <quorem+0x120>
    dd1c:	b0bfff04 	addi	r2,r22,-4
    dd20:	a880082e 	bgeu	r21,r2,dd44 <quorem+0x11c>
    dd24:	b0ffff17 	ldw	r3,-4(r22)
    dd28:	18000326 	beq	r3,zero,dd38 <quorem+0x110>
    dd2c:	00000506 	br	dd44 <quorem+0x11c>
    dd30:	10c00017 	ldw	r3,0(r2)
    dd34:	1800031e 	bne	r3,zero,dd44 <quorem+0x11c>
    dd38:	10bfff04 	addi	r2,r2,-4
    dd3c:	94bfffc4 	addi	r18,r18,-1
    dd40:	a8bffb36 	bltu	r21,r2,dd30 <__alt_data_end+0xf000dd30>
    dd44:	84800415 	stw	r18,16(r16)
    dd48:	b80b883a 	mov	r5,r23
    dd4c:	8009883a 	mov	r4,r16
    dd50:	0011b1c0 	call	11b1c <__mcmp>
    dd54:	10002616 	blt	r2,zero,ddf0 <quorem+0x1c8>
    dd58:	9cc00044 	addi	r19,r19,1
    dd5c:	a805883a 	mov	r2,r21
    dd60:	000b883a 	mov	r5,zero
    dd64:	11000017 	ldw	r4,0(r2)
    dd68:	89800017 	ldw	r6,0(r17)
    dd6c:	10800104 	addi	r2,r2,4
    dd70:	20ffffcc 	andi	r3,r4,65535
    dd74:	194b883a 	add	r5,r3,r5
    dd78:	30ffffcc 	andi	r3,r6,65535
    dd7c:	28c7c83a 	sub	r3,r5,r3
    dd80:	300cd43a 	srli	r6,r6,16
    dd84:	2008d43a 	srli	r4,r4,16
    dd88:	180bd43a 	srai	r5,r3,16
    dd8c:	18ffffcc 	andi	r3,r3,65535
    dd90:	2189c83a 	sub	r4,r4,r6
    dd94:	2149883a 	add	r4,r4,r5
    dd98:	200c943a 	slli	r6,r4,16
    dd9c:	8c400104 	addi	r17,r17,4
    dda0:	200bd43a 	srai	r5,r4,16
    dda4:	30c6b03a 	or	r3,r6,r3
    dda8:	10ffff15 	stw	r3,-4(r2)
    ddac:	a47fed2e 	bgeu	r20,r17,dd64 <__alt_data_end+0xf000dd64>
    ddb0:	9485883a 	add	r2,r18,r18
    ddb4:	1085883a 	add	r2,r2,r2
    ddb8:	a887883a 	add	r3,r21,r2
    ddbc:	18800017 	ldw	r2,0(r3)
    ddc0:	10000b1e 	bne	r2,zero,ddf0 <quorem+0x1c8>
    ddc4:	18bfff04 	addi	r2,r3,-4
    ddc8:	a880082e 	bgeu	r21,r2,ddec <quorem+0x1c4>
    ddcc:	18ffff17 	ldw	r3,-4(r3)
    ddd0:	18000326 	beq	r3,zero,dde0 <quorem+0x1b8>
    ddd4:	00000506 	br	ddec <quorem+0x1c4>
    ddd8:	10c00017 	ldw	r3,0(r2)
    dddc:	1800031e 	bne	r3,zero,ddec <quorem+0x1c4>
    dde0:	10bfff04 	addi	r2,r2,-4
    dde4:	94bfffc4 	addi	r18,r18,-1
    dde8:	a8bffb36 	bltu	r21,r2,ddd8 <__alt_data_end+0xf000ddd8>
    ddec:	84800415 	stw	r18,16(r16)
    ddf0:	9805883a 	mov	r2,r19
    ddf4:	dfc00817 	ldw	ra,32(sp)
    ddf8:	ddc00717 	ldw	r23,28(sp)
    ddfc:	dd800617 	ldw	r22,24(sp)
    de00:	dd400517 	ldw	r21,20(sp)
    de04:	dd000417 	ldw	r20,16(sp)
    de08:	dcc00317 	ldw	r19,12(sp)
    de0c:	dc800217 	ldw	r18,8(sp)
    de10:	dc400117 	ldw	r17,4(sp)
    de14:	dc000017 	ldw	r16,0(sp)
    de18:	dec00904 	addi	sp,sp,36
    de1c:	f800283a 	ret
    de20:	0005883a 	mov	r2,zero
    de24:	003ff306 	br	ddf4 <__alt_data_end+0xf000ddf4>

0000de28 <_dtoa_r>:
    de28:	20801017 	ldw	r2,64(r4)
    de2c:	deffde04 	addi	sp,sp,-136
    de30:	df002015 	stw	fp,128(sp)
    de34:	dcc01b15 	stw	r19,108(sp)
    de38:	dc801a15 	stw	r18,104(sp)
    de3c:	dc401915 	stw	r17,100(sp)
    de40:	dc001815 	stw	r16,96(sp)
    de44:	dfc02115 	stw	ra,132(sp)
    de48:	ddc01f15 	stw	r23,124(sp)
    de4c:	dd801e15 	stw	r22,120(sp)
    de50:	dd401d15 	stw	r21,116(sp)
    de54:	dd001c15 	stw	r20,112(sp)
    de58:	d9c00315 	stw	r7,12(sp)
    de5c:	2039883a 	mov	fp,r4
    de60:	3023883a 	mov	r17,r6
    de64:	2825883a 	mov	r18,r5
    de68:	dc002417 	ldw	r16,144(sp)
    de6c:	3027883a 	mov	r19,r6
    de70:	10000826 	beq	r2,zero,de94 <_dtoa_r+0x6c>
    de74:	21801117 	ldw	r6,68(r4)
    de78:	00c00044 	movi	r3,1
    de7c:	100b883a 	mov	r5,r2
    de80:	1986983a 	sll	r3,r3,r6
    de84:	11800115 	stw	r6,4(r2)
    de88:	10c00215 	stw	r3,8(r2)
    de8c:	00112fc0 	call	112fc <_Bfree>
    de90:	e0001015 	stw	zero,64(fp)
    de94:	88002e16 	blt	r17,zero,df50 <_dtoa_r+0x128>
    de98:	80000015 	stw	zero,0(r16)
    de9c:	889ffc2c 	andhi	r2,r17,32752
    dea0:	00dffc34 	movhi	r3,32752
    dea4:	10c01c26 	beq	r2,r3,df18 <_dtoa_r+0xf0>
    dea8:	000d883a 	mov	r6,zero
    deac:	000f883a 	mov	r7,zero
    deb0:	9009883a 	mov	r4,r18
    deb4:	980b883a 	mov	r5,r19
    deb8:	00171780 	call	17178 <__eqdf2>
    debc:	10002b1e 	bne	r2,zero,df6c <_dtoa_r+0x144>
    dec0:	d9c02317 	ldw	r7,140(sp)
    dec4:	00800044 	movi	r2,1
    dec8:	38800015 	stw	r2,0(r7)
    decc:	d8802517 	ldw	r2,148(sp)
    ded0:	10019e26 	beq	r2,zero,e54c <_dtoa_r+0x724>
    ded4:	d8c02517 	ldw	r3,148(sp)
    ded8:	00820034 	movhi	r2,2048
    dedc:	1080df44 	addi	r2,r2,893
    dee0:	18800015 	stw	r2,0(r3)
    dee4:	10bfffc4 	addi	r2,r2,-1
    dee8:	dfc02117 	ldw	ra,132(sp)
    deec:	df002017 	ldw	fp,128(sp)
    def0:	ddc01f17 	ldw	r23,124(sp)
    def4:	dd801e17 	ldw	r22,120(sp)
    def8:	dd401d17 	ldw	r21,116(sp)
    defc:	dd001c17 	ldw	r20,112(sp)
    df00:	dcc01b17 	ldw	r19,108(sp)
    df04:	dc801a17 	ldw	r18,104(sp)
    df08:	dc401917 	ldw	r17,100(sp)
    df0c:	dc001817 	ldw	r16,96(sp)
    df10:	dec02204 	addi	sp,sp,136
    df14:	f800283a 	ret
    df18:	d8c02317 	ldw	r3,140(sp)
    df1c:	0089c3c4 	movi	r2,9999
    df20:	18800015 	stw	r2,0(r3)
    df24:	90017726 	beq	r18,zero,e504 <_dtoa_r+0x6dc>
    df28:	00820034 	movhi	r2,2048
    df2c:	1080f304 	addi	r2,r2,972
    df30:	d9002517 	ldw	r4,148(sp)
    df34:	203fec26 	beq	r4,zero,dee8 <__alt_data_end+0xf000dee8>
    df38:	10c000c7 	ldb	r3,3(r2)
    df3c:	1801781e 	bne	r3,zero,e520 <_dtoa_r+0x6f8>
    df40:	10c000c4 	addi	r3,r2,3
    df44:	d9802517 	ldw	r6,148(sp)
    df48:	30c00015 	stw	r3,0(r6)
    df4c:	003fe606 	br	dee8 <__alt_data_end+0xf000dee8>
    df50:	04e00034 	movhi	r19,32768
    df54:	9cffffc4 	addi	r19,r19,-1
    df58:	00800044 	movi	r2,1
    df5c:	8ce6703a 	and	r19,r17,r19
    df60:	80800015 	stw	r2,0(r16)
    df64:	9823883a 	mov	r17,r19
    df68:	003fcc06 	br	de9c <__alt_data_end+0xf000de9c>
    df6c:	d8800204 	addi	r2,sp,8
    df70:	d8800015 	stw	r2,0(sp)
    df74:	d9c00104 	addi	r7,sp,4
    df78:	900b883a 	mov	r5,r18
    df7c:	980d883a 	mov	r6,r19
    df80:	e009883a 	mov	r4,fp
    df84:	8820d53a 	srli	r16,r17,20
    df88:	0011ee80 	call	11ee8 <__d2b>
    df8c:	d8800915 	stw	r2,36(sp)
    df90:	8001651e 	bne	r16,zero,e528 <_dtoa_r+0x700>
    df94:	dd800217 	ldw	r22,8(sp)
    df98:	dc000117 	ldw	r16,4(sp)
    df9c:	00800804 	movi	r2,32
    dfa0:	b421883a 	add	r16,r22,r16
    dfa4:	80c10c84 	addi	r3,r16,1074
    dfa8:	10c2d10e 	bge	r2,r3,eaf0 <_dtoa_r+0xcc8>
    dfac:	00801004 	movi	r2,64
    dfb0:	81010484 	addi	r4,r16,1042
    dfb4:	10c7c83a 	sub	r3,r2,r3
    dfb8:	9108d83a 	srl	r4,r18,r4
    dfbc:	88e2983a 	sll	r17,r17,r3
    dfc0:	2448b03a 	or	r4,r4,r17
    dfc4:	00172f40 	call	172f4 <__floatunsidf>
    dfc8:	017f8434 	movhi	r5,65040
    dfcc:	01800044 	movi	r6,1
    dfd0:	1009883a 	mov	r4,r2
    dfd4:	194b883a 	add	r5,r3,r5
    dfd8:	843fffc4 	addi	r16,r16,-1
    dfdc:	d9801115 	stw	r6,68(sp)
    dfe0:	000d883a 	mov	r6,zero
    dfe4:	01cffe34 	movhi	r7,16376
    dfe8:	000817c0 	call	817c <__subdf3>
    dfec:	0198dbf4 	movhi	r6,25455
    dff0:	01cff4f4 	movhi	r7,16339
    dff4:	3190d844 	addi	r6,r6,17249
    dff8:	39e1e9c4 	addi	r7,r7,-30809
    dffc:	1009883a 	mov	r4,r2
    e000:	180b883a 	mov	r5,r3
    e004:	0007a640 	call	7a64 <__muldf3>
    e008:	01a2d874 	movhi	r6,35681
    e00c:	01cff1f4 	movhi	r7,16327
    e010:	31b22cc4 	addi	r6,r6,-14157
    e014:	39e28a04 	addi	r7,r7,-30168
    e018:	180b883a 	mov	r5,r3
    e01c:	1009883a 	mov	r4,r2
    e020:	00168cc0 	call	168cc <__adddf3>
    e024:	8009883a 	mov	r4,r16
    e028:	1029883a 	mov	r20,r2
    e02c:	1823883a 	mov	r17,r3
    e030:	0008af80 	call	8af8 <__floatsidf>
    e034:	019427f4 	movhi	r6,20639
    e038:	01cff4f4 	movhi	r7,16339
    e03c:	319e7ec4 	addi	r6,r6,31227
    e040:	39d104c4 	addi	r7,r7,17427
    e044:	1009883a 	mov	r4,r2
    e048:	180b883a 	mov	r5,r3
    e04c:	0007a640 	call	7a64 <__muldf3>
    e050:	100d883a 	mov	r6,r2
    e054:	180f883a 	mov	r7,r3
    e058:	a009883a 	mov	r4,r20
    e05c:	880b883a 	mov	r5,r17
    e060:	00168cc0 	call	168cc <__adddf3>
    e064:	1009883a 	mov	r4,r2
    e068:	180b883a 	mov	r5,r3
    e06c:	1029883a 	mov	r20,r2
    e070:	1823883a 	mov	r17,r3
    e074:	0008a780 	call	8a78 <__fixdfsi>
    e078:	000d883a 	mov	r6,zero
    e07c:	000f883a 	mov	r7,zero
    e080:	a009883a 	mov	r4,r20
    e084:	880b883a 	mov	r5,r17
    e088:	d8800515 	stw	r2,20(sp)
    e08c:	00172000 	call	17200 <__ledf2>
    e090:	10028716 	blt	r2,zero,eab0 <_dtoa_r+0xc88>
    e094:	d8c00517 	ldw	r3,20(sp)
    e098:	00800584 	movi	r2,22
    e09c:	10c27536 	bltu	r2,r3,ea74 <_dtoa_r+0xc4c>
    e0a0:	180490fa 	slli	r2,r3,3
    e0a4:	00c20034 	movhi	r3,2048
    e0a8:	18c10f04 	addi	r3,r3,1084
    e0ac:	1885883a 	add	r2,r3,r2
    e0b0:	11000017 	ldw	r4,0(r2)
    e0b4:	11400117 	ldw	r5,4(r2)
    e0b8:	900d883a 	mov	r6,r18
    e0bc:	980f883a 	mov	r7,r19
    e0c0:	00079880 	call	7988 <__gedf2>
    e0c4:	00828d0e 	bge	zero,r2,eafc <_dtoa_r+0xcd4>
    e0c8:	d9000517 	ldw	r4,20(sp)
    e0cc:	d8000e15 	stw	zero,56(sp)
    e0d0:	213fffc4 	addi	r4,r4,-1
    e0d4:	d9000515 	stw	r4,20(sp)
    e0d8:	b42dc83a 	sub	r22,r22,r16
    e0dc:	b5bfffc4 	addi	r22,r22,-1
    e0e0:	b0026f16 	blt	r22,zero,eaa0 <_dtoa_r+0xc78>
    e0e4:	d8000815 	stw	zero,32(sp)
    e0e8:	d9c00517 	ldw	r7,20(sp)
    e0ec:	38026416 	blt	r7,zero,ea80 <_dtoa_r+0xc58>
    e0f0:	b1ed883a 	add	r22,r22,r7
    e0f4:	d9c00d15 	stw	r7,52(sp)
    e0f8:	d8000a15 	stw	zero,40(sp)
    e0fc:	d9800317 	ldw	r6,12(sp)
    e100:	00800244 	movi	r2,9
    e104:	11811436 	bltu	r2,r6,e558 <_dtoa_r+0x730>
    e108:	00800144 	movi	r2,5
    e10c:	1184e10e 	bge	r2,r6,f494 <_dtoa_r+0x166c>
    e110:	31bfff04 	addi	r6,r6,-4
    e114:	d9800315 	stw	r6,12(sp)
    e118:	0023883a 	mov	r17,zero
    e11c:	d9800317 	ldw	r6,12(sp)
    e120:	008000c4 	movi	r2,3
    e124:	30836726 	beq	r6,r2,eec4 <_dtoa_r+0x109c>
    e128:	1183410e 	bge	r2,r6,ee30 <_dtoa_r+0x1008>
    e12c:	d9c00317 	ldw	r7,12(sp)
    e130:	00800104 	movi	r2,4
    e134:	38827c26 	beq	r7,r2,eb28 <_dtoa_r+0xd00>
    e138:	00800144 	movi	r2,5
    e13c:	3884c41e 	bne	r7,r2,f450 <_dtoa_r+0x1628>
    e140:	00800044 	movi	r2,1
    e144:	d8800b15 	stw	r2,44(sp)
    e148:	d8c00517 	ldw	r3,20(sp)
    e14c:	d9002217 	ldw	r4,136(sp)
    e150:	1907883a 	add	r3,r3,r4
    e154:	19800044 	addi	r6,r3,1
    e158:	d8c00c15 	stw	r3,48(sp)
    e15c:	d9800615 	stw	r6,24(sp)
    e160:	0183a40e 	bge	zero,r6,eff4 <_dtoa_r+0x11cc>
    e164:	d9800617 	ldw	r6,24(sp)
    e168:	3021883a 	mov	r16,r6
    e16c:	e0001115 	stw	zero,68(fp)
    e170:	008005c4 	movi	r2,23
    e174:	1184c92e 	bgeu	r2,r6,f49c <_dtoa_r+0x1674>
    e178:	00c00044 	movi	r3,1
    e17c:	00800104 	movi	r2,4
    e180:	1085883a 	add	r2,r2,r2
    e184:	11000504 	addi	r4,r2,20
    e188:	180b883a 	mov	r5,r3
    e18c:	18c00044 	addi	r3,r3,1
    e190:	313ffb2e 	bgeu	r6,r4,e180 <__alt_data_end+0xf000e180>
    e194:	e1401115 	stw	r5,68(fp)
    e198:	e009883a 	mov	r4,fp
    e19c:	00112540 	call	11254 <_Balloc>
    e1a0:	d8800715 	stw	r2,28(sp)
    e1a4:	e0801015 	stw	r2,64(fp)
    e1a8:	00800384 	movi	r2,14
    e1ac:	1400f736 	bltu	r2,r16,e58c <_dtoa_r+0x764>
    e1b0:	8800f626 	beq	r17,zero,e58c <_dtoa_r+0x764>
    e1b4:	d9c00517 	ldw	r7,20(sp)
    e1b8:	01c39a0e 	bge	zero,r7,f024 <_dtoa_r+0x11fc>
    e1bc:	388003cc 	andi	r2,r7,15
    e1c0:	100490fa 	slli	r2,r2,3
    e1c4:	382bd13a 	srai	r21,r7,4
    e1c8:	00c20034 	movhi	r3,2048
    e1cc:	18c10f04 	addi	r3,r3,1084
    e1d0:	1885883a 	add	r2,r3,r2
    e1d4:	a8c0040c 	andi	r3,r21,16
    e1d8:	12400017 	ldw	r9,0(r2)
    e1dc:	12000117 	ldw	r8,4(r2)
    e1e0:	18037926 	beq	r3,zero,efc8 <_dtoa_r+0x11a0>
    e1e4:	00820034 	movhi	r2,2048
    e1e8:	10810504 	addi	r2,r2,1044
    e1ec:	11800817 	ldw	r6,32(r2)
    e1f0:	11c00917 	ldw	r7,36(r2)
    e1f4:	9009883a 	mov	r4,r18
    e1f8:	980b883a 	mov	r5,r19
    e1fc:	da001715 	stw	r8,92(sp)
    e200:	da401615 	stw	r9,88(sp)
    e204:	00070a00 	call	70a0 <__divdf3>
    e208:	da001717 	ldw	r8,92(sp)
    e20c:	da401617 	ldw	r9,88(sp)
    e210:	ad4003cc 	andi	r21,r21,15
    e214:	040000c4 	movi	r16,3
    e218:	1023883a 	mov	r17,r2
    e21c:	1829883a 	mov	r20,r3
    e220:	a8001126 	beq	r21,zero,e268 <_dtoa_r+0x440>
    e224:	05c20034 	movhi	r23,2048
    e228:	bdc10504 	addi	r23,r23,1044
    e22c:	4805883a 	mov	r2,r9
    e230:	4007883a 	mov	r3,r8
    e234:	a980004c 	andi	r6,r21,1
    e238:	1009883a 	mov	r4,r2
    e23c:	a82bd07a 	srai	r21,r21,1
    e240:	180b883a 	mov	r5,r3
    e244:	30000426 	beq	r6,zero,e258 <_dtoa_r+0x430>
    e248:	b9800017 	ldw	r6,0(r23)
    e24c:	b9c00117 	ldw	r7,4(r23)
    e250:	84000044 	addi	r16,r16,1
    e254:	0007a640 	call	7a64 <__muldf3>
    e258:	bdc00204 	addi	r23,r23,8
    e25c:	a83ff51e 	bne	r21,zero,e234 <__alt_data_end+0xf000e234>
    e260:	1013883a 	mov	r9,r2
    e264:	1811883a 	mov	r8,r3
    e268:	480d883a 	mov	r6,r9
    e26c:	400f883a 	mov	r7,r8
    e270:	8809883a 	mov	r4,r17
    e274:	a00b883a 	mov	r5,r20
    e278:	00070a00 	call	70a0 <__divdf3>
    e27c:	d8800f15 	stw	r2,60(sp)
    e280:	d8c01015 	stw	r3,64(sp)
    e284:	d8c00e17 	ldw	r3,56(sp)
    e288:	18000626 	beq	r3,zero,e2a4 <_dtoa_r+0x47c>
    e28c:	d9000f17 	ldw	r4,60(sp)
    e290:	d9401017 	ldw	r5,64(sp)
    e294:	000d883a 	mov	r6,zero
    e298:	01cffc34 	movhi	r7,16368
    e29c:	00172000 	call	17200 <__ledf2>
    e2a0:	10040b16 	blt	r2,zero,f2d0 <_dtoa_r+0x14a8>
    e2a4:	8009883a 	mov	r4,r16
    e2a8:	0008af80 	call	8af8 <__floatsidf>
    e2ac:	d9800f17 	ldw	r6,60(sp)
    e2b0:	d9c01017 	ldw	r7,64(sp)
    e2b4:	1009883a 	mov	r4,r2
    e2b8:	180b883a 	mov	r5,r3
    e2bc:	0007a640 	call	7a64 <__muldf3>
    e2c0:	000d883a 	mov	r6,zero
    e2c4:	01d00734 	movhi	r7,16412
    e2c8:	1009883a 	mov	r4,r2
    e2cc:	180b883a 	mov	r5,r3
    e2d0:	00168cc0 	call	168cc <__adddf3>
    e2d4:	1021883a 	mov	r16,r2
    e2d8:	d8800617 	ldw	r2,24(sp)
    e2dc:	047f3034 	movhi	r17,64704
    e2e0:	1c63883a 	add	r17,r3,r17
    e2e4:	10031826 	beq	r2,zero,ef48 <_dtoa_r+0x1120>
    e2e8:	d8c00517 	ldw	r3,20(sp)
    e2ec:	db000617 	ldw	r12,24(sp)
    e2f0:	d8c01315 	stw	r3,76(sp)
    e2f4:	d9000b17 	ldw	r4,44(sp)
    e2f8:	20038f26 	beq	r4,zero,f138 <_dtoa_r+0x1310>
    e2fc:	60bfffc4 	addi	r2,r12,-1
    e300:	100490fa 	slli	r2,r2,3
    e304:	00c20034 	movhi	r3,2048
    e308:	18c10f04 	addi	r3,r3,1084
    e30c:	1885883a 	add	r2,r3,r2
    e310:	11800017 	ldw	r6,0(r2)
    e314:	11c00117 	ldw	r7,4(r2)
    e318:	d8800717 	ldw	r2,28(sp)
    e31c:	0009883a 	mov	r4,zero
    e320:	014ff834 	movhi	r5,16352
    e324:	db001615 	stw	r12,88(sp)
    e328:	15c00044 	addi	r23,r2,1
    e32c:	00070a00 	call	70a0 <__divdf3>
    e330:	800d883a 	mov	r6,r16
    e334:	880f883a 	mov	r7,r17
    e338:	1009883a 	mov	r4,r2
    e33c:	180b883a 	mov	r5,r3
    e340:	000817c0 	call	817c <__subdf3>
    e344:	d9401017 	ldw	r5,64(sp)
    e348:	d9000f17 	ldw	r4,60(sp)
    e34c:	102b883a 	mov	r21,r2
    e350:	d8c01215 	stw	r3,72(sp)
    e354:	0008a780 	call	8a78 <__fixdfsi>
    e358:	1009883a 	mov	r4,r2
    e35c:	1029883a 	mov	r20,r2
    e360:	0008af80 	call	8af8 <__floatsidf>
    e364:	d9000f17 	ldw	r4,60(sp)
    e368:	d9401017 	ldw	r5,64(sp)
    e36c:	100d883a 	mov	r6,r2
    e370:	180f883a 	mov	r7,r3
    e374:	000817c0 	call	817c <__subdf3>
    e378:	1823883a 	mov	r17,r3
    e37c:	d8c00717 	ldw	r3,28(sp)
    e380:	d9401217 	ldw	r5,72(sp)
    e384:	a2000c04 	addi	r8,r20,48
    e388:	1021883a 	mov	r16,r2
    e38c:	1a000005 	stb	r8,0(r3)
    e390:	800d883a 	mov	r6,r16
    e394:	880f883a 	mov	r7,r17
    e398:	a809883a 	mov	r4,r21
    e39c:	4029883a 	mov	r20,r8
    e3a0:	00079880 	call	7988 <__gedf2>
    e3a4:	00841d16 	blt	zero,r2,f41c <_dtoa_r+0x15f4>
    e3a8:	800d883a 	mov	r6,r16
    e3ac:	880f883a 	mov	r7,r17
    e3b0:	0009883a 	mov	r4,zero
    e3b4:	014ffc34 	movhi	r5,16368
    e3b8:	000817c0 	call	817c <__subdf3>
    e3bc:	d9401217 	ldw	r5,72(sp)
    e3c0:	100d883a 	mov	r6,r2
    e3c4:	180f883a 	mov	r7,r3
    e3c8:	a809883a 	mov	r4,r21
    e3cc:	00079880 	call	7988 <__gedf2>
    e3d0:	db001617 	ldw	r12,88(sp)
    e3d4:	00840e16 	blt	zero,r2,f410 <_dtoa_r+0x15e8>
    e3d8:	00800044 	movi	r2,1
    e3dc:	13006b0e 	bge	r2,r12,e58c <_dtoa_r+0x764>
    e3e0:	d9000717 	ldw	r4,28(sp)
    e3e4:	dd800f15 	stw	r22,60(sp)
    e3e8:	dcc01015 	stw	r19,64(sp)
    e3ec:	2319883a 	add	r12,r4,r12
    e3f0:	dcc01217 	ldw	r19,72(sp)
    e3f4:	602d883a 	mov	r22,r12
    e3f8:	dc801215 	stw	r18,72(sp)
    e3fc:	b825883a 	mov	r18,r23
    e400:	00000906 	br	e428 <_dtoa_r+0x600>
    e404:	000817c0 	call	817c <__subdf3>
    e408:	a80d883a 	mov	r6,r21
    e40c:	980f883a 	mov	r7,r19
    e410:	1009883a 	mov	r4,r2
    e414:	180b883a 	mov	r5,r3
    e418:	00172000 	call	17200 <__ledf2>
    e41c:	1003e816 	blt	r2,zero,f3c0 <_dtoa_r+0x1598>
    e420:	b825883a 	mov	r18,r23
    e424:	bd83e926 	beq	r23,r22,f3cc <_dtoa_r+0x15a4>
    e428:	a809883a 	mov	r4,r21
    e42c:	980b883a 	mov	r5,r19
    e430:	000d883a 	mov	r6,zero
    e434:	01d00934 	movhi	r7,16420
    e438:	0007a640 	call	7a64 <__muldf3>
    e43c:	000d883a 	mov	r6,zero
    e440:	01d00934 	movhi	r7,16420
    e444:	8009883a 	mov	r4,r16
    e448:	880b883a 	mov	r5,r17
    e44c:	102b883a 	mov	r21,r2
    e450:	1827883a 	mov	r19,r3
    e454:	0007a640 	call	7a64 <__muldf3>
    e458:	180b883a 	mov	r5,r3
    e45c:	1009883a 	mov	r4,r2
    e460:	1821883a 	mov	r16,r3
    e464:	1023883a 	mov	r17,r2
    e468:	0008a780 	call	8a78 <__fixdfsi>
    e46c:	1009883a 	mov	r4,r2
    e470:	1029883a 	mov	r20,r2
    e474:	0008af80 	call	8af8 <__floatsidf>
    e478:	8809883a 	mov	r4,r17
    e47c:	800b883a 	mov	r5,r16
    e480:	100d883a 	mov	r6,r2
    e484:	180f883a 	mov	r7,r3
    e488:	000817c0 	call	817c <__subdf3>
    e48c:	a5000c04 	addi	r20,r20,48
    e490:	a80d883a 	mov	r6,r21
    e494:	980f883a 	mov	r7,r19
    e498:	1009883a 	mov	r4,r2
    e49c:	180b883a 	mov	r5,r3
    e4a0:	95000005 	stb	r20,0(r18)
    e4a4:	1021883a 	mov	r16,r2
    e4a8:	1823883a 	mov	r17,r3
    e4ac:	00172000 	call	17200 <__ledf2>
    e4b0:	bdc00044 	addi	r23,r23,1
    e4b4:	800d883a 	mov	r6,r16
    e4b8:	880f883a 	mov	r7,r17
    e4bc:	0009883a 	mov	r4,zero
    e4c0:	014ffc34 	movhi	r5,16368
    e4c4:	103fcf0e 	bge	r2,zero,e404 <__alt_data_end+0xf000e404>
    e4c8:	d8c01317 	ldw	r3,76(sp)
    e4cc:	d8c00515 	stw	r3,20(sp)
    e4d0:	d9400917 	ldw	r5,36(sp)
    e4d4:	e009883a 	mov	r4,fp
    e4d8:	00112fc0 	call	112fc <_Bfree>
    e4dc:	d9000517 	ldw	r4,20(sp)
    e4e0:	d9802317 	ldw	r6,140(sp)
    e4e4:	d9c02517 	ldw	r7,148(sp)
    e4e8:	b8000005 	stb	zero,0(r23)
    e4ec:	20800044 	addi	r2,r4,1
    e4f0:	30800015 	stw	r2,0(r6)
    e4f4:	3802aa26 	beq	r7,zero,efa0 <_dtoa_r+0x1178>
    e4f8:	3dc00015 	stw	r23,0(r7)
    e4fc:	d8800717 	ldw	r2,28(sp)
    e500:	003e7906 	br	dee8 <__alt_data_end+0xf000dee8>
    e504:	00800434 	movhi	r2,16
    e508:	10bfffc4 	addi	r2,r2,-1
    e50c:	88a2703a 	and	r17,r17,r2
    e510:	883e851e 	bne	r17,zero,df28 <__alt_data_end+0xf000df28>
    e514:	00820034 	movhi	r2,2048
    e518:	1080f004 	addi	r2,r2,960
    e51c:	003e8406 	br	df30 <__alt_data_end+0xf000df30>
    e520:	10c00204 	addi	r3,r2,8
    e524:	003e8706 	br	df44 <__alt_data_end+0xf000df44>
    e528:	01400434 	movhi	r5,16
    e52c:	297fffc4 	addi	r5,r5,-1
    e530:	994a703a 	and	r5,r19,r5
    e534:	9009883a 	mov	r4,r18
    e538:	843f0044 	addi	r16,r16,-1023
    e53c:	294ffc34 	orhi	r5,r5,16368
    e540:	dd800217 	ldw	r22,8(sp)
    e544:	d8001115 	stw	zero,68(sp)
    e548:	003ea506 	br	dfe0 <__alt_data_end+0xf000dfe0>
    e54c:	00820034 	movhi	r2,2048
    e550:	1080df04 	addi	r2,r2,892
    e554:	003e6406 	br	dee8 <__alt_data_end+0xf000dee8>
    e558:	e0001115 	stw	zero,68(fp)
    e55c:	000b883a 	mov	r5,zero
    e560:	e009883a 	mov	r4,fp
    e564:	00112540 	call	11254 <_Balloc>
    e568:	01bfffc4 	movi	r6,-1
    e56c:	01c00044 	movi	r7,1
    e570:	d8800715 	stw	r2,28(sp)
    e574:	d9800c15 	stw	r6,48(sp)
    e578:	e0801015 	stw	r2,64(fp)
    e57c:	d8000315 	stw	zero,12(sp)
    e580:	d9c00b15 	stw	r7,44(sp)
    e584:	d9800615 	stw	r6,24(sp)
    e588:	d8002215 	stw	zero,136(sp)
    e58c:	d8800117 	ldw	r2,4(sp)
    e590:	10008916 	blt	r2,zero,e7b8 <_dtoa_r+0x990>
    e594:	d9000517 	ldw	r4,20(sp)
    e598:	00c00384 	movi	r3,14
    e59c:	19008616 	blt	r3,r4,e7b8 <_dtoa_r+0x990>
    e5a0:	200490fa 	slli	r2,r4,3
    e5a4:	00c20034 	movhi	r3,2048
    e5a8:	d9802217 	ldw	r6,136(sp)
    e5ac:	18c10f04 	addi	r3,r3,1084
    e5b0:	1885883a 	add	r2,r3,r2
    e5b4:	14000017 	ldw	r16,0(r2)
    e5b8:	14400117 	ldw	r17,4(r2)
    e5bc:	30016316 	blt	r6,zero,eb4c <_dtoa_r+0xd24>
    e5c0:	800d883a 	mov	r6,r16
    e5c4:	880f883a 	mov	r7,r17
    e5c8:	9009883a 	mov	r4,r18
    e5cc:	980b883a 	mov	r5,r19
    e5d0:	00070a00 	call	70a0 <__divdf3>
    e5d4:	180b883a 	mov	r5,r3
    e5d8:	1009883a 	mov	r4,r2
    e5dc:	0008a780 	call	8a78 <__fixdfsi>
    e5e0:	1009883a 	mov	r4,r2
    e5e4:	102b883a 	mov	r21,r2
    e5e8:	0008af80 	call	8af8 <__floatsidf>
    e5ec:	800d883a 	mov	r6,r16
    e5f0:	880f883a 	mov	r7,r17
    e5f4:	1009883a 	mov	r4,r2
    e5f8:	180b883a 	mov	r5,r3
    e5fc:	0007a640 	call	7a64 <__muldf3>
    e600:	100d883a 	mov	r6,r2
    e604:	180f883a 	mov	r7,r3
    e608:	9009883a 	mov	r4,r18
    e60c:	980b883a 	mov	r5,r19
    e610:	000817c0 	call	817c <__subdf3>
    e614:	d9c00717 	ldw	r7,28(sp)
    e618:	1009883a 	mov	r4,r2
    e61c:	a8800c04 	addi	r2,r21,48
    e620:	38800005 	stb	r2,0(r7)
    e624:	3dc00044 	addi	r23,r7,1
    e628:	d9c00617 	ldw	r7,24(sp)
    e62c:	01800044 	movi	r6,1
    e630:	180b883a 	mov	r5,r3
    e634:	2005883a 	mov	r2,r4
    e638:	39803826 	beq	r7,r6,e71c <_dtoa_r+0x8f4>
    e63c:	000d883a 	mov	r6,zero
    e640:	01d00934 	movhi	r7,16420
    e644:	0007a640 	call	7a64 <__muldf3>
    e648:	000d883a 	mov	r6,zero
    e64c:	000f883a 	mov	r7,zero
    e650:	1009883a 	mov	r4,r2
    e654:	180b883a 	mov	r5,r3
    e658:	1025883a 	mov	r18,r2
    e65c:	1827883a 	mov	r19,r3
    e660:	00171780 	call	17178 <__eqdf2>
    e664:	103f9a26 	beq	r2,zero,e4d0 <__alt_data_end+0xf000e4d0>
    e668:	d9c00617 	ldw	r7,24(sp)
    e66c:	d8c00717 	ldw	r3,28(sp)
    e670:	b829883a 	mov	r20,r23
    e674:	38bfffc4 	addi	r2,r7,-1
    e678:	18ad883a 	add	r22,r3,r2
    e67c:	00000a06 	br	e6a8 <_dtoa_r+0x880>
    e680:	0007a640 	call	7a64 <__muldf3>
    e684:	000d883a 	mov	r6,zero
    e688:	000f883a 	mov	r7,zero
    e68c:	1009883a 	mov	r4,r2
    e690:	180b883a 	mov	r5,r3
    e694:	1025883a 	mov	r18,r2
    e698:	1827883a 	mov	r19,r3
    e69c:	b829883a 	mov	r20,r23
    e6a0:	00171780 	call	17178 <__eqdf2>
    e6a4:	103f8a26 	beq	r2,zero,e4d0 <__alt_data_end+0xf000e4d0>
    e6a8:	800d883a 	mov	r6,r16
    e6ac:	880f883a 	mov	r7,r17
    e6b0:	9009883a 	mov	r4,r18
    e6b4:	980b883a 	mov	r5,r19
    e6b8:	00070a00 	call	70a0 <__divdf3>
    e6bc:	180b883a 	mov	r5,r3
    e6c0:	1009883a 	mov	r4,r2
    e6c4:	0008a780 	call	8a78 <__fixdfsi>
    e6c8:	1009883a 	mov	r4,r2
    e6cc:	102b883a 	mov	r21,r2
    e6d0:	0008af80 	call	8af8 <__floatsidf>
    e6d4:	800d883a 	mov	r6,r16
    e6d8:	880f883a 	mov	r7,r17
    e6dc:	1009883a 	mov	r4,r2
    e6e0:	180b883a 	mov	r5,r3
    e6e4:	0007a640 	call	7a64 <__muldf3>
    e6e8:	100d883a 	mov	r6,r2
    e6ec:	180f883a 	mov	r7,r3
    e6f0:	9009883a 	mov	r4,r18
    e6f4:	980b883a 	mov	r5,r19
    e6f8:	000817c0 	call	817c <__subdf3>
    e6fc:	aa000c04 	addi	r8,r21,48
    e700:	a2000005 	stb	r8,0(r20)
    e704:	000d883a 	mov	r6,zero
    e708:	01d00934 	movhi	r7,16420
    e70c:	1009883a 	mov	r4,r2
    e710:	180b883a 	mov	r5,r3
    e714:	a5c00044 	addi	r23,r20,1
    e718:	b53fd91e 	bne	r22,r20,e680 <__alt_data_end+0xf000e680>
    e71c:	100d883a 	mov	r6,r2
    e720:	180f883a 	mov	r7,r3
    e724:	1009883a 	mov	r4,r2
    e728:	180b883a 	mov	r5,r3
    e72c:	00168cc0 	call	168cc <__adddf3>
    e730:	100d883a 	mov	r6,r2
    e734:	180f883a 	mov	r7,r3
    e738:	8009883a 	mov	r4,r16
    e73c:	880b883a 	mov	r5,r17
    e740:	1027883a 	mov	r19,r2
    e744:	1825883a 	mov	r18,r3
    e748:	00172000 	call	17200 <__ledf2>
    e74c:	10000816 	blt	r2,zero,e770 <_dtoa_r+0x948>
    e750:	980d883a 	mov	r6,r19
    e754:	900f883a 	mov	r7,r18
    e758:	8009883a 	mov	r4,r16
    e75c:	880b883a 	mov	r5,r17
    e760:	00171780 	call	17178 <__eqdf2>
    e764:	103f5a1e 	bne	r2,zero,e4d0 <__alt_data_end+0xf000e4d0>
    e768:	ad40004c 	andi	r21,r21,1
    e76c:	a83f5826 	beq	r21,zero,e4d0 <__alt_data_end+0xf000e4d0>
    e770:	bd3fffc3 	ldbu	r20,-1(r23)
    e774:	b8bfffc4 	addi	r2,r23,-1
    e778:	1007883a 	mov	r3,r2
    e77c:	01400e44 	movi	r5,57
    e780:	d9800717 	ldw	r6,28(sp)
    e784:	00000506 	br	e79c <_dtoa_r+0x974>
    e788:	18ffffc4 	addi	r3,r3,-1
    e78c:	11824726 	beq	r2,r6,f0ac <_dtoa_r+0x1284>
    e790:	1d000003 	ldbu	r20,0(r3)
    e794:	102f883a 	mov	r23,r2
    e798:	10bfffc4 	addi	r2,r2,-1
    e79c:	a1003fcc 	andi	r4,r20,255
    e7a0:	2100201c 	xori	r4,r4,128
    e7a4:	213fe004 	addi	r4,r4,-128
    e7a8:	217ff726 	beq	r4,r5,e788 <__alt_data_end+0xf000e788>
    e7ac:	a2000044 	addi	r8,r20,1
    e7b0:	12000005 	stb	r8,0(r2)
    e7b4:	003f4606 	br	e4d0 <__alt_data_end+0xf000e4d0>
    e7b8:	d9000b17 	ldw	r4,44(sp)
    e7bc:	2000c826 	beq	r4,zero,eae0 <_dtoa_r+0xcb8>
    e7c0:	d9800317 	ldw	r6,12(sp)
    e7c4:	00c00044 	movi	r3,1
    e7c8:	1980f90e 	bge	r3,r6,ebb0 <_dtoa_r+0xd88>
    e7cc:	d8800617 	ldw	r2,24(sp)
    e7d0:	d8c00a17 	ldw	r3,40(sp)
    e7d4:	157fffc4 	addi	r21,r2,-1
    e7d8:	1d41f316 	blt	r3,r21,efa8 <_dtoa_r+0x1180>
    e7dc:	1d6bc83a 	sub	r21,r3,r21
    e7e0:	d9c00617 	ldw	r7,24(sp)
    e7e4:	3802aa16 	blt	r7,zero,f290 <_dtoa_r+0x1468>
    e7e8:	dd000817 	ldw	r20,32(sp)
    e7ec:	d8800617 	ldw	r2,24(sp)
    e7f0:	d8c00817 	ldw	r3,32(sp)
    e7f4:	01400044 	movi	r5,1
    e7f8:	e009883a 	mov	r4,fp
    e7fc:	1887883a 	add	r3,r3,r2
    e800:	d8c00815 	stw	r3,32(sp)
    e804:	b0ad883a 	add	r22,r22,r2
    e808:	00116600 	call	11660 <__i2b>
    e80c:	1023883a 	mov	r17,r2
    e810:	a0000826 	beq	r20,zero,e834 <_dtoa_r+0xa0c>
    e814:	0580070e 	bge	zero,r22,e834 <_dtoa_r+0xa0c>
    e818:	a005883a 	mov	r2,r20
    e81c:	b500b916 	blt	r22,r20,eb04 <_dtoa_r+0xcdc>
    e820:	d9000817 	ldw	r4,32(sp)
    e824:	a0a9c83a 	sub	r20,r20,r2
    e828:	b0adc83a 	sub	r22,r22,r2
    e82c:	2089c83a 	sub	r4,r4,r2
    e830:	d9000815 	stw	r4,32(sp)
    e834:	d9800a17 	ldw	r6,40(sp)
    e838:	0181810e 	bge	zero,r6,ee40 <_dtoa_r+0x1018>
    e83c:	d9c00b17 	ldw	r7,44(sp)
    e840:	3800b326 	beq	r7,zero,eb10 <_dtoa_r+0xce8>
    e844:	a800b226 	beq	r21,zero,eb10 <_dtoa_r+0xce8>
    e848:	880b883a 	mov	r5,r17
    e84c:	a80d883a 	mov	r6,r21
    e850:	e009883a 	mov	r4,fp
    e854:	00118940 	call	11894 <__pow5mult>
    e858:	d9800917 	ldw	r6,36(sp)
    e85c:	100b883a 	mov	r5,r2
    e860:	e009883a 	mov	r4,fp
    e864:	1023883a 	mov	r17,r2
    e868:	001169c0 	call	1169c <__multiply>
    e86c:	1021883a 	mov	r16,r2
    e870:	d8800a17 	ldw	r2,40(sp)
    e874:	d9400917 	ldw	r5,36(sp)
    e878:	e009883a 	mov	r4,fp
    e87c:	1545c83a 	sub	r2,r2,r21
    e880:	d8800a15 	stw	r2,40(sp)
    e884:	00112fc0 	call	112fc <_Bfree>
    e888:	d8c00a17 	ldw	r3,40(sp)
    e88c:	18009f1e 	bne	r3,zero,eb0c <_dtoa_r+0xce4>
    e890:	05c00044 	movi	r23,1
    e894:	e009883a 	mov	r4,fp
    e898:	b80b883a 	mov	r5,r23
    e89c:	00116600 	call	11660 <__i2b>
    e8a0:	d9000d17 	ldw	r4,52(sp)
    e8a4:	102b883a 	mov	r21,r2
    e8a8:	2000ce26 	beq	r4,zero,ebe4 <_dtoa_r+0xdbc>
    e8ac:	200d883a 	mov	r6,r4
    e8b0:	100b883a 	mov	r5,r2
    e8b4:	e009883a 	mov	r4,fp
    e8b8:	00118940 	call	11894 <__pow5mult>
    e8bc:	d9800317 	ldw	r6,12(sp)
    e8c0:	102b883a 	mov	r21,r2
    e8c4:	b981810e 	bge	r23,r6,eecc <_dtoa_r+0x10a4>
    e8c8:	0027883a 	mov	r19,zero
    e8cc:	a8800417 	ldw	r2,16(r21)
    e8d0:	05c00804 	movi	r23,32
    e8d4:	10800104 	addi	r2,r2,4
    e8d8:	1085883a 	add	r2,r2,r2
    e8dc:	1085883a 	add	r2,r2,r2
    e8e0:	a885883a 	add	r2,r21,r2
    e8e4:	11000017 	ldw	r4,0(r2)
    e8e8:	00115480 	call	11548 <__hi0bits>
    e8ec:	b885c83a 	sub	r2,r23,r2
    e8f0:	1585883a 	add	r2,r2,r22
    e8f4:	108007cc 	andi	r2,r2,31
    e8f8:	1000b326 	beq	r2,zero,ebc8 <_dtoa_r+0xda0>
    e8fc:	00c00804 	movi	r3,32
    e900:	1887c83a 	sub	r3,r3,r2
    e904:	01000104 	movi	r4,4
    e908:	20c2cd0e 	bge	r4,r3,f440 <_dtoa_r+0x1618>
    e90c:	00c00704 	movi	r3,28
    e910:	1885c83a 	sub	r2,r3,r2
    e914:	d8c00817 	ldw	r3,32(sp)
    e918:	a0a9883a 	add	r20,r20,r2
    e91c:	b0ad883a 	add	r22,r22,r2
    e920:	1887883a 	add	r3,r3,r2
    e924:	d8c00815 	stw	r3,32(sp)
    e928:	d9800817 	ldw	r6,32(sp)
    e92c:	0180040e 	bge	zero,r6,e940 <_dtoa_r+0xb18>
    e930:	800b883a 	mov	r5,r16
    e934:	e009883a 	mov	r4,fp
    e938:	00119d40 	call	119d4 <__lshift>
    e93c:	1021883a 	mov	r16,r2
    e940:	0580050e 	bge	zero,r22,e958 <_dtoa_r+0xb30>
    e944:	a80b883a 	mov	r5,r21
    e948:	b00d883a 	mov	r6,r22
    e94c:	e009883a 	mov	r4,fp
    e950:	00119d40 	call	119d4 <__lshift>
    e954:	102b883a 	mov	r21,r2
    e958:	d9c00e17 	ldw	r7,56(sp)
    e95c:	3801211e 	bne	r7,zero,ede4 <_dtoa_r+0xfbc>
    e960:	d9800617 	ldw	r6,24(sp)
    e964:	0181380e 	bge	zero,r6,ee48 <_dtoa_r+0x1020>
    e968:	d8c00b17 	ldw	r3,44(sp)
    e96c:	1800ab1e 	bne	r3,zero,ec1c <_dtoa_r+0xdf4>
    e970:	dc800717 	ldw	r18,28(sp)
    e974:	dcc00617 	ldw	r19,24(sp)
    e978:	9029883a 	mov	r20,r18
    e97c:	00000206 	br	e988 <_dtoa_r+0xb60>
    e980:	00113240 	call	11324 <__multadd>
    e984:	1021883a 	mov	r16,r2
    e988:	a80b883a 	mov	r5,r21
    e98c:	8009883a 	mov	r4,r16
    e990:	000dc280 	call	dc28 <quorem>
    e994:	10800c04 	addi	r2,r2,48
    e998:	90800005 	stb	r2,0(r18)
    e99c:	94800044 	addi	r18,r18,1
    e9a0:	9507c83a 	sub	r3,r18,r20
    e9a4:	000f883a 	mov	r7,zero
    e9a8:	01800284 	movi	r6,10
    e9ac:	800b883a 	mov	r5,r16
    e9b0:	e009883a 	mov	r4,fp
    e9b4:	1cfff216 	blt	r3,r19,e980 <__alt_data_end+0xf000e980>
    e9b8:	1011883a 	mov	r8,r2
    e9bc:	d8800617 	ldw	r2,24(sp)
    e9c0:	0082370e 	bge	zero,r2,f2a0 <_dtoa_r+0x1478>
    e9c4:	d9000717 	ldw	r4,28(sp)
    e9c8:	0025883a 	mov	r18,zero
    e9cc:	20af883a 	add	r23,r4,r2
    e9d0:	01800044 	movi	r6,1
    e9d4:	800b883a 	mov	r5,r16
    e9d8:	e009883a 	mov	r4,fp
    e9dc:	da001715 	stw	r8,92(sp)
    e9e0:	00119d40 	call	119d4 <__lshift>
    e9e4:	a80b883a 	mov	r5,r21
    e9e8:	1009883a 	mov	r4,r2
    e9ec:	d8800915 	stw	r2,36(sp)
    e9f0:	0011b1c0 	call	11b1c <__mcmp>
    e9f4:	da001717 	ldw	r8,92(sp)
    e9f8:	0081800e 	bge	zero,r2,effc <_dtoa_r+0x11d4>
    e9fc:	b93fffc3 	ldbu	r4,-1(r23)
    ea00:	b8bfffc4 	addi	r2,r23,-1
    ea04:	1007883a 	mov	r3,r2
    ea08:	01800e44 	movi	r6,57
    ea0c:	d9c00717 	ldw	r7,28(sp)
    ea10:	00000506 	br	ea28 <_dtoa_r+0xc00>
    ea14:	18ffffc4 	addi	r3,r3,-1
    ea18:	11c12326 	beq	r2,r7,eea8 <_dtoa_r+0x1080>
    ea1c:	19000003 	ldbu	r4,0(r3)
    ea20:	102f883a 	mov	r23,r2
    ea24:	10bfffc4 	addi	r2,r2,-1
    ea28:	21403fcc 	andi	r5,r4,255
    ea2c:	2940201c 	xori	r5,r5,128
    ea30:	297fe004 	addi	r5,r5,-128
    ea34:	29bff726 	beq	r5,r6,ea14 <__alt_data_end+0xf000ea14>
    ea38:	21000044 	addi	r4,r4,1
    ea3c:	11000005 	stb	r4,0(r2)
    ea40:	a80b883a 	mov	r5,r21
    ea44:	e009883a 	mov	r4,fp
    ea48:	00112fc0 	call	112fc <_Bfree>
    ea4c:	883ea026 	beq	r17,zero,e4d0 <__alt_data_end+0xf000e4d0>
    ea50:	90000426 	beq	r18,zero,ea64 <_dtoa_r+0xc3c>
    ea54:	94400326 	beq	r18,r17,ea64 <_dtoa_r+0xc3c>
    ea58:	900b883a 	mov	r5,r18
    ea5c:	e009883a 	mov	r4,fp
    ea60:	00112fc0 	call	112fc <_Bfree>
    ea64:	880b883a 	mov	r5,r17
    ea68:	e009883a 	mov	r4,fp
    ea6c:	00112fc0 	call	112fc <_Bfree>
    ea70:	003e9706 	br	e4d0 <__alt_data_end+0xf000e4d0>
    ea74:	01800044 	movi	r6,1
    ea78:	d9800e15 	stw	r6,56(sp)
    ea7c:	003d9606 	br	e0d8 <__alt_data_end+0xf000e0d8>
    ea80:	d8800817 	ldw	r2,32(sp)
    ea84:	d8c00517 	ldw	r3,20(sp)
    ea88:	d8000d15 	stw	zero,52(sp)
    ea8c:	10c5c83a 	sub	r2,r2,r3
    ea90:	00c9c83a 	sub	r4,zero,r3
    ea94:	d8800815 	stw	r2,32(sp)
    ea98:	d9000a15 	stw	r4,40(sp)
    ea9c:	003d9706 	br	e0fc <__alt_data_end+0xf000e0fc>
    eaa0:	05adc83a 	sub	r22,zero,r22
    eaa4:	dd800815 	stw	r22,32(sp)
    eaa8:	002d883a 	mov	r22,zero
    eaac:	003d8e06 	br	e0e8 <__alt_data_end+0xf000e0e8>
    eab0:	d9000517 	ldw	r4,20(sp)
    eab4:	0008af80 	call	8af8 <__floatsidf>
    eab8:	100d883a 	mov	r6,r2
    eabc:	180f883a 	mov	r7,r3
    eac0:	a009883a 	mov	r4,r20
    eac4:	880b883a 	mov	r5,r17
    eac8:	00171780 	call	17178 <__eqdf2>
    eacc:	103d7126 	beq	r2,zero,e094 <__alt_data_end+0xf000e094>
    ead0:	d9c00517 	ldw	r7,20(sp)
    ead4:	39ffffc4 	addi	r7,r7,-1
    ead8:	d9c00515 	stw	r7,20(sp)
    eadc:	003d6d06 	br	e094 <__alt_data_end+0xf000e094>
    eae0:	dd400a17 	ldw	r21,40(sp)
    eae4:	dd000817 	ldw	r20,32(sp)
    eae8:	0023883a 	mov	r17,zero
    eaec:	003f4806 	br	e810 <__alt_data_end+0xf000e810>
    eaf0:	10e3c83a 	sub	r17,r2,r3
    eaf4:	9448983a 	sll	r4,r18,r17
    eaf8:	003d3206 	br	dfc4 <__alt_data_end+0xf000dfc4>
    eafc:	d8000e15 	stw	zero,56(sp)
    eb00:	003d7506 	br	e0d8 <__alt_data_end+0xf000e0d8>
    eb04:	b005883a 	mov	r2,r22
    eb08:	003f4506 	br	e820 <__alt_data_end+0xf000e820>
    eb0c:	dc000915 	stw	r16,36(sp)
    eb10:	d9800a17 	ldw	r6,40(sp)
    eb14:	d9400917 	ldw	r5,36(sp)
    eb18:	e009883a 	mov	r4,fp
    eb1c:	00118940 	call	11894 <__pow5mult>
    eb20:	1021883a 	mov	r16,r2
    eb24:	003f5a06 	br	e890 <__alt_data_end+0xf000e890>
    eb28:	01c00044 	movi	r7,1
    eb2c:	d9c00b15 	stw	r7,44(sp)
    eb30:	d8802217 	ldw	r2,136(sp)
    eb34:	0081280e 	bge	zero,r2,efd8 <_dtoa_r+0x11b0>
    eb38:	100d883a 	mov	r6,r2
    eb3c:	1021883a 	mov	r16,r2
    eb40:	d8800c15 	stw	r2,48(sp)
    eb44:	d8800615 	stw	r2,24(sp)
    eb48:	003d8806 	br	e16c <__alt_data_end+0xf000e16c>
    eb4c:	d8800617 	ldw	r2,24(sp)
    eb50:	00be9b16 	blt	zero,r2,e5c0 <__alt_data_end+0xf000e5c0>
    eb54:	10010f1e 	bne	r2,zero,ef94 <_dtoa_r+0x116c>
    eb58:	880b883a 	mov	r5,r17
    eb5c:	000d883a 	mov	r6,zero
    eb60:	01d00534 	movhi	r7,16404
    eb64:	8009883a 	mov	r4,r16
    eb68:	0007a640 	call	7a64 <__muldf3>
    eb6c:	900d883a 	mov	r6,r18
    eb70:	980f883a 	mov	r7,r19
    eb74:	1009883a 	mov	r4,r2
    eb78:	180b883a 	mov	r5,r3
    eb7c:	00079880 	call	7988 <__gedf2>
    eb80:	002b883a 	mov	r21,zero
    eb84:	0023883a 	mov	r17,zero
    eb88:	1000bf16 	blt	r2,zero,ee88 <_dtoa_r+0x1060>
    eb8c:	d9802217 	ldw	r6,136(sp)
    eb90:	ddc00717 	ldw	r23,28(sp)
    eb94:	018c303a 	nor	r6,zero,r6
    eb98:	d9800515 	stw	r6,20(sp)
    eb9c:	a80b883a 	mov	r5,r21
    eba0:	e009883a 	mov	r4,fp
    eba4:	00112fc0 	call	112fc <_Bfree>
    eba8:	883e4926 	beq	r17,zero,e4d0 <__alt_data_end+0xf000e4d0>
    ebac:	003fad06 	br	ea64 <__alt_data_end+0xf000ea64>
    ebb0:	d9c01117 	ldw	r7,68(sp)
    ebb4:	3801bc26 	beq	r7,zero,f2a8 <_dtoa_r+0x1480>
    ebb8:	10810cc4 	addi	r2,r2,1075
    ebbc:	dd400a17 	ldw	r21,40(sp)
    ebc0:	dd000817 	ldw	r20,32(sp)
    ebc4:	003f0a06 	br	e7f0 <__alt_data_end+0xf000e7f0>
    ebc8:	00800704 	movi	r2,28
    ebcc:	d9000817 	ldw	r4,32(sp)
    ebd0:	a0a9883a 	add	r20,r20,r2
    ebd4:	b0ad883a 	add	r22,r22,r2
    ebd8:	2089883a 	add	r4,r4,r2
    ebdc:	d9000815 	stw	r4,32(sp)
    ebe0:	003f5106 	br	e928 <__alt_data_end+0xf000e928>
    ebe4:	d8c00317 	ldw	r3,12(sp)
    ebe8:	b8c1fc0e 	bge	r23,r3,f3dc <_dtoa_r+0x15b4>
    ebec:	0027883a 	mov	r19,zero
    ebf0:	b805883a 	mov	r2,r23
    ebf4:	003f3e06 	br	e8f0 <__alt_data_end+0xf000e8f0>
    ebf8:	880b883a 	mov	r5,r17
    ebfc:	e009883a 	mov	r4,fp
    ec00:	000f883a 	mov	r7,zero
    ec04:	01800284 	movi	r6,10
    ec08:	00113240 	call	11324 <__multadd>
    ec0c:	d9000c17 	ldw	r4,48(sp)
    ec10:	1023883a 	mov	r17,r2
    ec14:	0102040e 	bge	zero,r4,f428 <_dtoa_r+0x1600>
    ec18:	d9000615 	stw	r4,24(sp)
    ec1c:	0500050e 	bge	zero,r20,ec34 <_dtoa_r+0xe0c>
    ec20:	880b883a 	mov	r5,r17
    ec24:	a00d883a 	mov	r6,r20
    ec28:	e009883a 	mov	r4,fp
    ec2c:	00119d40 	call	119d4 <__lshift>
    ec30:	1023883a 	mov	r17,r2
    ec34:	9801241e 	bne	r19,zero,f0c8 <_dtoa_r+0x12a0>
    ec38:	8829883a 	mov	r20,r17
    ec3c:	d9000617 	ldw	r4,24(sp)
    ec40:	dcc00717 	ldw	r19,28(sp)
    ec44:	9480004c 	andi	r18,r18,1
    ec48:	20bfffc4 	addi	r2,r4,-1
    ec4c:	9885883a 	add	r2,r19,r2
    ec50:	d8800415 	stw	r2,16(sp)
    ec54:	dc800615 	stw	r18,24(sp)
    ec58:	a80b883a 	mov	r5,r21
    ec5c:	8009883a 	mov	r4,r16
    ec60:	000dc280 	call	dc28 <quorem>
    ec64:	880b883a 	mov	r5,r17
    ec68:	8009883a 	mov	r4,r16
    ec6c:	102f883a 	mov	r23,r2
    ec70:	0011b1c0 	call	11b1c <__mcmp>
    ec74:	a80b883a 	mov	r5,r21
    ec78:	a00d883a 	mov	r6,r20
    ec7c:	e009883a 	mov	r4,fp
    ec80:	102d883a 	mov	r22,r2
    ec84:	0011b7c0 	call	11b7c <__mdiff>
    ec88:	1007883a 	mov	r3,r2
    ec8c:	10800317 	ldw	r2,12(r2)
    ec90:	bc800c04 	addi	r18,r23,48
    ec94:	180b883a 	mov	r5,r3
    ec98:	10004e1e 	bne	r2,zero,edd4 <_dtoa_r+0xfac>
    ec9c:	8009883a 	mov	r4,r16
    eca0:	d8c01615 	stw	r3,88(sp)
    eca4:	0011b1c0 	call	11b1c <__mcmp>
    eca8:	d8c01617 	ldw	r3,88(sp)
    ecac:	e009883a 	mov	r4,fp
    ecb0:	d8801615 	stw	r2,88(sp)
    ecb4:	180b883a 	mov	r5,r3
    ecb8:	00112fc0 	call	112fc <_Bfree>
    ecbc:	d8801617 	ldw	r2,88(sp)
    ecc0:	1000041e 	bne	r2,zero,ecd4 <_dtoa_r+0xeac>
    ecc4:	d9800317 	ldw	r6,12(sp)
    ecc8:	3000021e 	bne	r6,zero,ecd4 <_dtoa_r+0xeac>
    eccc:	d8c00617 	ldw	r3,24(sp)
    ecd0:	18003726 	beq	r3,zero,edb0 <_dtoa_r+0xf88>
    ecd4:	b0002016 	blt	r22,zero,ed58 <_dtoa_r+0xf30>
    ecd8:	b000041e 	bne	r22,zero,ecec <_dtoa_r+0xec4>
    ecdc:	d9000317 	ldw	r4,12(sp)
    ece0:	2000021e 	bne	r4,zero,ecec <_dtoa_r+0xec4>
    ece4:	d8c00617 	ldw	r3,24(sp)
    ece8:	18001b26 	beq	r3,zero,ed58 <_dtoa_r+0xf30>
    ecec:	00810716 	blt	zero,r2,f10c <_dtoa_r+0x12e4>
    ecf0:	d8c00417 	ldw	r3,16(sp)
    ecf4:	9d800044 	addi	r22,r19,1
    ecf8:	9c800005 	stb	r18,0(r19)
    ecfc:	b02f883a 	mov	r23,r22
    ed00:	98c10626 	beq	r19,r3,f11c <_dtoa_r+0x12f4>
    ed04:	800b883a 	mov	r5,r16
    ed08:	000f883a 	mov	r7,zero
    ed0c:	01800284 	movi	r6,10
    ed10:	e009883a 	mov	r4,fp
    ed14:	00113240 	call	11324 <__multadd>
    ed18:	1021883a 	mov	r16,r2
    ed1c:	000f883a 	mov	r7,zero
    ed20:	01800284 	movi	r6,10
    ed24:	880b883a 	mov	r5,r17
    ed28:	e009883a 	mov	r4,fp
    ed2c:	8d002526 	beq	r17,r20,edc4 <_dtoa_r+0xf9c>
    ed30:	00113240 	call	11324 <__multadd>
    ed34:	a00b883a 	mov	r5,r20
    ed38:	000f883a 	mov	r7,zero
    ed3c:	01800284 	movi	r6,10
    ed40:	e009883a 	mov	r4,fp
    ed44:	1023883a 	mov	r17,r2
    ed48:	00113240 	call	11324 <__multadd>
    ed4c:	1029883a 	mov	r20,r2
    ed50:	b027883a 	mov	r19,r22
    ed54:	003fc006 	br	ec58 <__alt_data_end+0xf000ec58>
    ed58:	9011883a 	mov	r8,r18
    ed5c:	00800e0e 	bge	zero,r2,ed98 <_dtoa_r+0xf70>
    ed60:	800b883a 	mov	r5,r16
    ed64:	01800044 	movi	r6,1
    ed68:	e009883a 	mov	r4,fp
    ed6c:	da001715 	stw	r8,92(sp)
    ed70:	00119d40 	call	119d4 <__lshift>
    ed74:	a80b883a 	mov	r5,r21
    ed78:	1009883a 	mov	r4,r2
    ed7c:	1021883a 	mov	r16,r2
    ed80:	0011b1c0 	call	11b1c <__mcmp>
    ed84:	da001717 	ldw	r8,92(sp)
    ed88:	0081960e 	bge	zero,r2,f3e4 <_dtoa_r+0x15bc>
    ed8c:	00800e44 	movi	r2,57
    ed90:	40817026 	beq	r8,r2,f354 <_dtoa_r+0x152c>
    ed94:	ba000c44 	addi	r8,r23,49
    ed98:	8825883a 	mov	r18,r17
    ed9c:	9dc00044 	addi	r23,r19,1
    eda0:	9a000005 	stb	r8,0(r19)
    eda4:	a023883a 	mov	r17,r20
    eda8:	dc000915 	stw	r16,36(sp)
    edac:	003f2406 	br	ea40 <__alt_data_end+0xf000ea40>
    edb0:	00800e44 	movi	r2,57
    edb4:	9011883a 	mov	r8,r18
    edb8:	90816626 	beq	r18,r2,f354 <_dtoa_r+0x152c>
    edbc:	05bff516 	blt	zero,r22,ed94 <__alt_data_end+0xf000ed94>
    edc0:	003ff506 	br	ed98 <__alt_data_end+0xf000ed98>
    edc4:	00113240 	call	11324 <__multadd>
    edc8:	1023883a 	mov	r17,r2
    edcc:	1029883a 	mov	r20,r2
    edd0:	003fdf06 	br	ed50 <__alt_data_end+0xf000ed50>
    edd4:	e009883a 	mov	r4,fp
    edd8:	00112fc0 	call	112fc <_Bfree>
    eddc:	00800044 	movi	r2,1
    ede0:	003fbc06 	br	ecd4 <__alt_data_end+0xf000ecd4>
    ede4:	a80b883a 	mov	r5,r21
    ede8:	8009883a 	mov	r4,r16
    edec:	0011b1c0 	call	11b1c <__mcmp>
    edf0:	103edb0e 	bge	r2,zero,e960 <__alt_data_end+0xf000e960>
    edf4:	800b883a 	mov	r5,r16
    edf8:	000f883a 	mov	r7,zero
    edfc:	01800284 	movi	r6,10
    ee00:	e009883a 	mov	r4,fp
    ee04:	00113240 	call	11324 <__multadd>
    ee08:	1021883a 	mov	r16,r2
    ee0c:	d8800517 	ldw	r2,20(sp)
    ee10:	d8c00b17 	ldw	r3,44(sp)
    ee14:	10bfffc4 	addi	r2,r2,-1
    ee18:	d8800515 	stw	r2,20(sp)
    ee1c:	183f761e 	bne	r3,zero,ebf8 <__alt_data_end+0xf000ebf8>
    ee20:	d9000c17 	ldw	r4,48(sp)
    ee24:	0101730e 	bge	zero,r4,f3f4 <_dtoa_r+0x15cc>
    ee28:	d9000615 	stw	r4,24(sp)
    ee2c:	003ed006 	br	e970 <__alt_data_end+0xf000e970>
    ee30:	00800084 	movi	r2,2
    ee34:	3081861e 	bne	r6,r2,f450 <_dtoa_r+0x1628>
    ee38:	d8000b15 	stw	zero,44(sp)
    ee3c:	003f3c06 	br	eb30 <__alt_data_end+0xf000eb30>
    ee40:	dc000917 	ldw	r16,36(sp)
    ee44:	003e9206 	br	e890 <__alt_data_end+0xf000e890>
    ee48:	d9c00317 	ldw	r7,12(sp)
    ee4c:	00800084 	movi	r2,2
    ee50:	11fec50e 	bge	r2,r7,e968 <__alt_data_end+0xf000e968>
    ee54:	d9000617 	ldw	r4,24(sp)
    ee58:	20013c1e 	bne	r4,zero,f34c <_dtoa_r+0x1524>
    ee5c:	a80b883a 	mov	r5,r21
    ee60:	000f883a 	mov	r7,zero
    ee64:	01800144 	movi	r6,5
    ee68:	e009883a 	mov	r4,fp
    ee6c:	00113240 	call	11324 <__multadd>
    ee70:	100b883a 	mov	r5,r2
    ee74:	8009883a 	mov	r4,r16
    ee78:	102b883a 	mov	r21,r2
    ee7c:	0011b1c0 	call	11b1c <__mcmp>
    ee80:	dc000915 	stw	r16,36(sp)
    ee84:	00bf410e 	bge	zero,r2,eb8c <__alt_data_end+0xf000eb8c>
    ee88:	d9c00717 	ldw	r7,28(sp)
    ee8c:	00800c44 	movi	r2,49
    ee90:	38800005 	stb	r2,0(r7)
    ee94:	d8800517 	ldw	r2,20(sp)
    ee98:	3dc00044 	addi	r23,r7,1
    ee9c:	10800044 	addi	r2,r2,1
    eea0:	d8800515 	stw	r2,20(sp)
    eea4:	003f3d06 	br	eb9c <__alt_data_end+0xf000eb9c>
    eea8:	d9800517 	ldw	r6,20(sp)
    eeac:	d9c00717 	ldw	r7,28(sp)
    eeb0:	00800c44 	movi	r2,49
    eeb4:	31800044 	addi	r6,r6,1
    eeb8:	d9800515 	stw	r6,20(sp)
    eebc:	38800005 	stb	r2,0(r7)
    eec0:	003edf06 	br	ea40 <__alt_data_end+0xf000ea40>
    eec4:	d8000b15 	stw	zero,44(sp)
    eec8:	003c9f06 	br	e148 <__alt_data_end+0xf000e148>
    eecc:	903e7e1e 	bne	r18,zero,e8c8 <__alt_data_end+0xf000e8c8>
    eed0:	00800434 	movhi	r2,16
    eed4:	10bfffc4 	addi	r2,r2,-1
    eed8:	9884703a 	and	r2,r19,r2
    eedc:	1000ea1e 	bne	r2,zero,f288 <_dtoa_r+0x1460>
    eee0:	9cdffc2c 	andhi	r19,r19,32752
    eee4:	9800e826 	beq	r19,zero,f288 <_dtoa_r+0x1460>
    eee8:	d9c00817 	ldw	r7,32(sp)
    eeec:	b5800044 	addi	r22,r22,1
    eef0:	04c00044 	movi	r19,1
    eef4:	39c00044 	addi	r7,r7,1
    eef8:	d9c00815 	stw	r7,32(sp)
    eefc:	d8800d17 	ldw	r2,52(sp)
    ef00:	103e721e 	bne	r2,zero,e8cc <__alt_data_end+0xf000e8cc>
    ef04:	00800044 	movi	r2,1
    ef08:	003e7906 	br	e8f0 <__alt_data_end+0xf000e8f0>
    ef0c:	8009883a 	mov	r4,r16
    ef10:	0008af80 	call	8af8 <__floatsidf>
    ef14:	d9800f17 	ldw	r6,60(sp)
    ef18:	d9c01017 	ldw	r7,64(sp)
    ef1c:	1009883a 	mov	r4,r2
    ef20:	180b883a 	mov	r5,r3
    ef24:	0007a640 	call	7a64 <__muldf3>
    ef28:	000d883a 	mov	r6,zero
    ef2c:	01d00734 	movhi	r7,16412
    ef30:	1009883a 	mov	r4,r2
    ef34:	180b883a 	mov	r5,r3
    ef38:	00168cc0 	call	168cc <__adddf3>
    ef3c:	047f3034 	movhi	r17,64704
    ef40:	1021883a 	mov	r16,r2
    ef44:	1c63883a 	add	r17,r3,r17
    ef48:	d9000f17 	ldw	r4,60(sp)
    ef4c:	d9401017 	ldw	r5,64(sp)
    ef50:	000d883a 	mov	r6,zero
    ef54:	01d00534 	movhi	r7,16404
    ef58:	000817c0 	call	817c <__subdf3>
    ef5c:	800d883a 	mov	r6,r16
    ef60:	880f883a 	mov	r7,r17
    ef64:	1009883a 	mov	r4,r2
    ef68:	180b883a 	mov	r5,r3
    ef6c:	102b883a 	mov	r21,r2
    ef70:	1829883a 	mov	r20,r3
    ef74:	00079880 	call	7988 <__gedf2>
    ef78:	00806c16 	blt	zero,r2,f12c <_dtoa_r+0x1304>
    ef7c:	89e0003c 	xorhi	r7,r17,32768
    ef80:	800d883a 	mov	r6,r16
    ef84:	a809883a 	mov	r4,r21
    ef88:	a00b883a 	mov	r5,r20
    ef8c:	00172000 	call	17200 <__ledf2>
    ef90:	103d7e0e 	bge	r2,zero,e58c <__alt_data_end+0xf000e58c>
    ef94:	002b883a 	mov	r21,zero
    ef98:	0023883a 	mov	r17,zero
    ef9c:	003efb06 	br	eb8c <__alt_data_end+0xf000eb8c>
    efa0:	d8800717 	ldw	r2,28(sp)
    efa4:	003bd006 	br	dee8 <__alt_data_end+0xf000dee8>
    efa8:	d9000a17 	ldw	r4,40(sp)
    efac:	d9800d17 	ldw	r6,52(sp)
    efb0:	dd400a15 	stw	r21,40(sp)
    efb4:	a905c83a 	sub	r2,r21,r4
    efb8:	308d883a 	add	r6,r6,r2
    efbc:	d9800d15 	stw	r6,52(sp)
    efc0:	002b883a 	mov	r21,zero
    efc4:	003e0606 	br	e7e0 <__alt_data_end+0xf000e7e0>
    efc8:	9023883a 	mov	r17,r18
    efcc:	9829883a 	mov	r20,r19
    efd0:	04000084 	movi	r16,2
    efd4:	003c9206 	br	e220 <__alt_data_end+0xf000e220>
    efd8:	04000044 	movi	r16,1
    efdc:	dc000c15 	stw	r16,48(sp)
    efe0:	dc000615 	stw	r16,24(sp)
    efe4:	dc002215 	stw	r16,136(sp)
    efe8:	e0001115 	stw	zero,68(fp)
    efec:	000b883a 	mov	r5,zero
    eff0:	003c6906 	br	e198 <__alt_data_end+0xf000e198>
    eff4:	3021883a 	mov	r16,r6
    eff8:	003ffb06 	br	efe8 <__alt_data_end+0xf000efe8>
    effc:	1000021e 	bne	r2,zero,f008 <_dtoa_r+0x11e0>
    f000:	4200004c 	andi	r8,r8,1
    f004:	403e7d1e 	bne	r8,zero,e9fc <__alt_data_end+0xf000e9fc>
    f008:	01000c04 	movi	r4,48
    f00c:	00000106 	br	f014 <_dtoa_r+0x11ec>
    f010:	102f883a 	mov	r23,r2
    f014:	b8bfffc4 	addi	r2,r23,-1
    f018:	10c00007 	ldb	r3,0(r2)
    f01c:	193ffc26 	beq	r3,r4,f010 <__alt_data_end+0xf000f010>
    f020:	003e8706 	br	ea40 <__alt_data_end+0xf000ea40>
    f024:	d8800517 	ldw	r2,20(sp)
    f028:	00a3c83a 	sub	r17,zero,r2
    f02c:	8800a426 	beq	r17,zero,f2c0 <_dtoa_r+0x1498>
    f030:	888003cc 	andi	r2,r17,15
    f034:	100490fa 	slli	r2,r2,3
    f038:	00c20034 	movhi	r3,2048
    f03c:	18c10f04 	addi	r3,r3,1084
    f040:	1885883a 	add	r2,r3,r2
    f044:	11800017 	ldw	r6,0(r2)
    f048:	11c00117 	ldw	r7,4(r2)
    f04c:	9009883a 	mov	r4,r18
    f050:	980b883a 	mov	r5,r19
    f054:	8823d13a 	srai	r17,r17,4
    f058:	0007a640 	call	7a64 <__muldf3>
    f05c:	d8800f15 	stw	r2,60(sp)
    f060:	d8c01015 	stw	r3,64(sp)
    f064:	8800e826 	beq	r17,zero,f408 <_dtoa_r+0x15e0>
    f068:	05020034 	movhi	r20,2048
    f06c:	a5010504 	addi	r20,r20,1044
    f070:	04000084 	movi	r16,2
    f074:	8980004c 	andi	r6,r17,1
    f078:	1009883a 	mov	r4,r2
    f07c:	8823d07a 	srai	r17,r17,1
    f080:	180b883a 	mov	r5,r3
    f084:	30000426 	beq	r6,zero,f098 <_dtoa_r+0x1270>
    f088:	a1800017 	ldw	r6,0(r20)
    f08c:	a1c00117 	ldw	r7,4(r20)
    f090:	84000044 	addi	r16,r16,1
    f094:	0007a640 	call	7a64 <__muldf3>
    f098:	a5000204 	addi	r20,r20,8
    f09c:	883ff51e 	bne	r17,zero,f074 <__alt_data_end+0xf000f074>
    f0a0:	d8800f15 	stw	r2,60(sp)
    f0a4:	d8c01015 	stw	r3,64(sp)
    f0a8:	003c7606 	br	e284 <__alt_data_end+0xf000e284>
    f0ac:	00c00c04 	movi	r3,48
    f0b0:	10c00005 	stb	r3,0(r2)
    f0b4:	d8c00517 	ldw	r3,20(sp)
    f0b8:	bd3fffc3 	ldbu	r20,-1(r23)
    f0bc:	18c00044 	addi	r3,r3,1
    f0c0:	d8c00515 	stw	r3,20(sp)
    f0c4:	003db906 	br	e7ac <__alt_data_end+0xf000e7ac>
    f0c8:	89400117 	ldw	r5,4(r17)
    f0cc:	e009883a 	mov	r4,fp
    f0d0:	00112540 	call	11254 <_Balloc>
    f0d4:	89800417 	ldw	r6,16(r17)
    f0d8:	89400304 	addi	r5,r17,12
    f0dc:	11000304 	addi	r4,r2,12
    f0e0:	31800084 	addi	r6,r6,2
    f0e4:	318d883a 	add	r6,r6,r6
    f0e8:	318d883a 	add	r6,r6,r6
    f0ec:	1027883a 	mov	r19,r2
    f0f0:	00091200 	call	9120 <memcpy>
    f0f4:	01800044 	movi	r6,1
    f0f8:	980b883a 	mov	r5,r19
    f0fc:	e009883a 	mov	r4,fp
    f100:	00119d40 	call	119d4 <__lshift>
    f104:	1029883a 	mov	r20,r2
    f108:	003ecc06 	br	ec3c <__alt_data_end+0xf000ec3c>
    f10c:	00800e44 	movi	r2,57
    f110:	90809026 	beq	r18,r2,f354 <_dtoa_r+0x152c>
    f114:	92000044 	addi	r8,r18,1
    f118:	003f1f06 	br	ed98 <__alt_data_end+0xf000ed98>
    f11c:	9011883a 	mov	r8,r18
    f120:	8825883a 	mov	r18,r17
    f124:	a023883a 	mov	r17,r20
    f128:	003e2906 	br	e9d0 <__alt_data_end+0xf000e9d0>
    f12c:	002b883a 	mov	r21,zero
    f130:	0023883a 	mov	r17,zero
    f134:	003f5406 	br	ee88 <__alt_data_end+0xf000ee88>
    f138:	61bfffc4 	addi	r6,r12,-1
    f13c:	300490fa 	slli	r2,r6,3
    f140:	00c20034 	movhi	r3,2048
    f144:	18c10f04 	addi	r3,r3,1084
    f148:	1885883a 	add	r2,r3,r2
    f14c:	11000017 	ldw	r4,0(r2)
    f150:	11400117 	ldw	r5,4(r2)
    f154:	d8800717 	ldw	r2,28(sp)
    f158:	880f883a 	mov	r7,r17
    f15c:	d9801215 	stw	r6,72(sp)
    f160:	800d883a 	mov	r6,r16
    f164:	db001615 	stw	r12,88(sp)
    f168:	15c00044 	addi	r23,r2,1
    f16c:	0007a640 	call	7a64 <__muldf3>
    f170:	d9401017 	ldw	r5,64(sp)
    f174:	d9000f17 	ldw	r4,60(sp)
    f178:	d8c01515 	stw	r3,84(sp)
    f17c:	d8801415 	stw	r2,80(sp)
    f180:	0008a780 	call	8a78 <__fixdfsi>
    f184:	1009883a 	mov	r4,r2
    f188:	1021883a 	mov	r16,r2
    f18c:	0008af80 	call	8af8 <__floatsidf>
    f190:	d9000f17 	ldw	r4,60(sp)
    f194:	d9401017 	ldw	r5,64(sp)
    f198:	100d883a 	mov	r6,r2
    f19c:	180f883a 	mov	r7,r3
    f1a0:	000817c0 	call	817c <__subdf3>
    f1a4:	1829883a 	mov	r20,r3
    f1a8:	d8c00717 	ldw	r3,28(sp)
    f1ac:	84000c04 	addi	r16,r16,48
    f1b0:	1023883a 	mov	r17,r2
    f1b4:	1c000005 	stb	r16,0(r3)
    f1b8:	db001617 	ldw	r12,88(sp)
    f1bc:	00800044 	movi	r2,1
    f1c0:	60802226 	beq	r12,r2,f24c <_dtoa_r+0x1424>
    f1c4:	d9c00717 	ldw	r7,28(sp)
    f1c8:	8805883a 	mov	r2,r17
    f1cc:	b82b883a 	mov	r21,r23
    f1d0:	3b19883a 	add	r12,r7,r12
    f1d4:	6023883a 	mov	r17,r12
    f1d8:	a007883a 	mov	r3,r20
    f1dc:	dc800f15 	stw	r18,60(sp)
    f1e0:	000d883a 	mov	r6,zero
    f1e4:	01d00934 	movhi	r7,16420
    f1e8:	1009883a 	mov	r4,r2
    f1ec:	180b883a 	mov	r5,r3
    f1f0:	0007a640 	call	7a64 <__muldf3>
    f1f4:	180b883a 	mov	r5,r3
    f1f8:	1009883a 	mov	r4,r2
    f1fc:	1829883a 	mov	r20,r3
    f200:	1025883a 	mov	r18,r2
    f204:	0008a780 	call	8a78 <__fixdfsi>
    f208:	1009883a 	mov	r4,r2
    f20c:	1021883a 	mov	r16,r2
    f210:	0008af80 	call	8af8 <__floatsidf>
    f214:	100d883a 	mov	r6,r2
    f218:	180f883a 	mov	r7,r3
    f21c:	9009883a 	mov	r4,r18
    f220:	a00b883a 	mov	r5,r20
    f224:	84000c04 	addi	r16,r16,48
    f228:	000817c0 	call	817c <__subdf3>
    f22c:	ad400044 	addi	r21,r21,1
    f230:	ac3fffc5 	stb	r16,-1(r21)
    f234:	ac7fea1e 	bne	r21,r17,f1e0 <__alt_data_end+0xf000f1e0>
    f238:	1023883a 	mov	r17,r2
    f23c:	d8801217 	ldw	r2,72(sp)
    f240:	dc800f17 	ldw	r18,60(sp)
    f244:	1829883a 	mov	r20,r3
    f248:	b8af883a 	add	r23,r23,r2
    f24c:	d9001417 	ldw	r4,80(sp)
    f250:	d9401517 	ldw	r5,84(sp)
    f254:	000d883a 	mov	r6,zero
    f258:	01cff834 	movhi	r7,16352
    f25c:	00168cc0 	call	168cc <__adddf3>
    f260:	880d883a 	mov	r6,r17
    f264:	a00f883a 	mov	r7,r20
    f268:	1009883a 	mov	r4,r2
    f26c:	180b883a 	mov	r5,r3
    f270:	00172000 	call	17200 <__ledf2>
    f274:	10003e0e 	bge	r2,zero,f370 <_dtoa_r+0x1548>
    f278:	d9001317 	ldw	r4,76(sp)
    f27c:	bd3fffc3 	ldbu	r20,-1(r23)
    f280:	d9000515 	stw	r4,20(sp)
    f284:	003d3b06 	br	e774 <__alt_data_end+0xf000e774>
    f288:	0027883a 	mov	r19,zero
    f28c:	003f1b06 	br	eefc <__alt_data_end+0xf000eefc>
    f290:	d8800817 	ldw	r2,32(sp)
    f294:	11e9c83a 	sub	r20,r2,r7
    f298:	0005883a 	mov	r2,zero
    f29c:	003d5406 	br	e7f0 <__alt_data_end+0xf000e7f0>
    f2a0:	00800044 	movi	r2,1
    f2a4:	003dc706 	br	e9c4 <__alt_data_end+0xf000e9c4>
    f2a8:	d8c00217 	ldw	r3,8(sp)
    f2ac:	00800d84 	movi	r2,54
    f2b0:	dd400a17 	ldw	r21,40(sp)
    f2b4:	10c5c83a 	sub	r2,r2,r3
    f2b8:	dd000817 	ldw	r20,32(sp)
    f2bc:	003d4c06 	br	e7f0 <__alt_data_end+0xf000e7f0>
    f2c0:	dc800f15 	stw	r18,60(sp)
    f2c4:	dcc01015 	stw	r19,64(sp)
    f2c8:	04000084 	movi	r16,2
    f2cc:	003bed06 	br	e284 <__alt_data_end+0xf000e284>
    f2d0:	d9000617 	ldw	r4,24(sp)
    f2d4:	203f0d26 	beq	r4,zero,ef0c <__alt_data_end+0xf000ef0c>
    f2d8:	d9800c17 	ldw	r6,48(sp)
    f2dc:	01bcab0e 	bge	zero,r6,e58c <__alt_data_end+0xf000e58c>
    f2e0:	d9401017 	ldw	r5,64(sp)
    f2e4:	d9000f17 	ldw	r4,60(sp)
    f2e8:	000d883a 	mov	r6,zero
    f2ec:	01d00934 	movhi	r7,16420
    f2f0:	0007a640 	call	7a64 <__muldf3>
    f2f4:	81000044 	addi	r4,r16,1
    f2f8:	d8800f15 	stw	r2,60(sp)
    f2fc:	d8c01015 	stw	r3,64(sp)
    f300:	0008af80 	call	8af8 <__floatsidf>
    f304:	d9800f17 	ldw	r6,60(sp)
    f308:	d9c01017 	ldw	r7,64(sp)
    f30c:	1009883a 	mov	r4,r2
    f310:	180b883a 	mov	r5,r3
    f314:	0007a640 	call	7a64 <__muldf3>
    f318:	01d00734 	movhi	r7,16412
    f31c:	000d883a 	mov	r6,zero
    f320:	1009883a 	mov	r4,r2
    f324:	180b883a 	mov	r5,r3
    f328:	00168cc0 	call	168cc <__adddf3>
    f32c:	d9c00517 	ldw	r7,20(sp)
    f330:	047f3034 	movhi	r17,64704
    f334:	1021883a 	mov	r16,r2
    f338:	39ffffc4 	addi	r7,r7,-1
    f33c:	d9c01315 	stw	r7,76(sp)
    f340:	1c63883a 	add	r17,r3,r17
    f344:	db000c17 	ldw	r12,48(sp)
    f348:	003bea06 	br	e2f4 <__alt_data_end+0xf000e2f4>
    f34c:	dc000915 	stw	r16,36(sp)
    f350:	003e0e06 	br	eb8c <__alt_data_end+0xf000eb8c>
    f354:	01000e44 	movi	r4,57
    f358:	8825883a 	mov	r18,r17
    f35c:	9dc00044 	addi	r23,r19,1
    f360:	99000005 	stb	r4,0(r19)
    f364:	a023883a 	mov	r17,r20
    f368:	dc000915 	stw	r16,36(sp)
    f36c:	003da406 	br	ea00 <__alt_data_end+0xf000ea00>
    f370:	d9801417 	ldw	r6,80(sp)
    f374:	d9c01517 	ldw	r7,84(sp)
    f378:	0009883a 	mov	r4,zero
    f37c:	014ff834 	movhi	r5,16352
    f380:	000817c0 	call	817c <__subdf3>
    f384:	880d883a 	mov	r6,r17
    f388:	a00f883a 	mov	r7,r20
    f38c:	1009883a 	mov	r4,r2
    f390:	180b883a 	mov	r5,r3
    f394:	00079880 	call	7988 <__gedf2>
    f398:	00bc7c0e 	bge	zero,r2,e58c <__alt_data_end+0xf000e58c>
    f39c:	01000c04 	movi	r4,48
    f3a0:	00000106 	br	f3a8 <_dtoa_r+0x1580>
    f3a4:	102f883a 	mov	r23,r2
    f3a8:	b8bfffc4 	addi	r2,r23,-1
    f3ac:	10c00007 	ldb	r3,0(r2)
    f3b0:	193ffc26 	beq	r3,r4,f3a4 <__alt_data_end+0xf000f3a4>
    f3b4:	d9801317 	ldw	r6,76(sp)
    f3b8:	d9800515 	stw	r6,20(sp)
    f3bc:	003c4406 	br	e4d0 <__alt_data_end+0xf000e4d0>
    f3c0:	d9801317 	ldw	r6,76(sp)
    f3c4:	d9800515 	stw	r6,20(sp)
    f3c8:	003cea06 	br	e774 <__alt_data_end+0xf000e774>
    f3cc:	dd800f17 	ldw	r22,60(sp)
    f3d0:	dcc01017 	ldw	r19,64(sp)
    f3d4:	dc801217 	ldw	r18,72(sp)
    f3d8:	003c6c06 	br	e58c <__alt_data_end+0xf000e58c>
    f3dc:	903e031e 	bne	r18,zero,ebec <__alt_data_end+0xf000ebec>
    f3e0:	003ebb06 	br	eed0 <__alt_data_end+0xf000eed0>
    f3e4:	103e6c1e 	bne	r2,zero,ed98 <__alt_data_end+0xf000ed98>
    f3e8:	4080004c 	andi	r2,r8,1
    f3ec:	103e6a26 	beq	r2,zero,ed98 <__alt_data_end+0xf000ed98>
    f3f0:	003e6606 	br	ed8c <__alt_data_end+0xf000ed8c>
    f3f4:	d8c00317 	ldw	r3,12(sp)
    f3f8:	00800084 	movi	r2,2
    f3fc:	10c02916 	blt	r2,r3,f4a4 <_dtoa_r+0x167c>
    f400:	d9000c17 	ldw	r4,48(sp)
    f404:	003e8806 	br	ee28 <__alt_data_end+0xf000ee28>
    f408:	04000084 	movi	r16,2
    f40c:	003b9d06 	br	e284 <__alt_data_end+0xf000e284>
    f410:	d9001317 	ldw	r4,76(sp)
    f414:	d9000515 	stw	r4,20(sp)
    f418:	003cd606 	br	e774 <__alt_data_end+0xf000e774>
    f41c:	d8801317 	ldw	r2,76(sp)
    f420:	d8800515 	stw	r2,20(sp)
    f424:	003c2a06 	br	e4d0 <__alt_data_end+0xf000e4d0>
    f428:	d9800317 	ldw	r6,12(sp)
    f42c:	00800084 	movi	r2,2
    f430:	11801516 	blt	r2,r6,f488 <_dtoa_r+0x1660>
    f434:	d9c00c17 	ldw	r7,48(sp)
    f438:	d9c00615 	stw	r7,24(sp)
    f43c:	003df706 	br	ec1c <__alt_data_end+0xf000ec1c>
    f440:	193d3926 	beq	r3,r4,e928 <__alt_data_end+0xf000e928>
    f444:	00c00f04 	movi	r3,60
    f448:	1885c83a 	sub	r2,r3,r2
    f44c:	003ddf06 	br	ebcc <__alt_data_end+0xf000ebcc>
    f450:	e009883a 	mov	r4,fp
    f454:	e0001115 	stw	zero,68(fp)
    f458:	000b883a 	mov	r5,zero
    f45c:	00112540 	call	11254 <_Balloc>
    f460:	d8800715 	stw	r2,28(sp)
    f464:	d8c00717 	ldw	r3,28(sp)
    f468:	00bfffc4 	movi	r2,-1
    f46c:	01000044 	movi	r4,1
    f470:	d8800c15 	stw	r2,48(sp)
    f474:	e0c01015 	stw	r3,64(fp)
    f478:	d9000b15 	stw	r4,44(sp)
    f47c:	d8800615 	stw	r2,24(sp)
    f480:	d8002215 	stw	zero,136(sp)
    f484:	003c4106 	br	e58c <__alt_data_end+0xf000e58c>
    f488:	d8c00c17 	ldw	r3,48(sp)
    f48c:	d8c00615 	stw	r3,24(sp)
    f490:	003e7006 	br	ee54 <__alt_data_end+0xf000ee54>
    f494:	04400044 	movi	r17,1
    f498:	003b2006 	br	e11c <__alt_data_end+0xf000e11c>
    f49c:	000b883a 	mov	r5,zero
    f4a0:	003b3d06 	br	e198 <__alt_data_end+0xf000e198>
    f4a4:	d8800c17 	ldw	r2,48(sp)
    f4a8:	d8800615 	stw	r2,24(sp)
    f4ac:	003e6906 	br	ee54 <__alt_data_end+0xf000ee54>

0000f4b0 <__sflush_r>:
    f4b0:	2880030b 	ldhu	r2,12(r5)
    f4b4:	defffb04 	addi	sp,sp,-20
    f4b8:	dcc00315 	stw	r19,12(sp)
    f4bc:	dc400115 	stw	r17,4(sp)
    f4c0:	dfc00415 	stw	ra,16(sp)
    f4c4:	dc800215 	stw	r18,8(sp)
    f4c8:	dc000015 	stw	r16,0(sp)
    f4cc:	10c0020c 	andi	r3,r2,8
    f4d0:	2823883a 	mov	r17,r5
    f4d4:	2027883a 	mov	r19,r4
    f4d8:	1800311e 	bne	r3,zero,f5a0 <__sflush_r+0xf0>
    f4dc:	28c00117 	ldw	r3,4(r5)
    f4e0:	10820014 	ori	r2,r2,2048
    f4e4:	2880030d 	sth	r2,12(r5)
    f4e8:	00c04b0e 	bge	zero,r3,f618 <__sflush_r+0x168>
    f4ec:	8a000a17 	ldw	r8,40(r17)
    f4f0:	40002326 	beq	r8,zero,f580 <__sflush_r+0xd0>
    f4f4:	9c000017 	ldw	r16,0(r19)
    f4f8:	10c4000c 	andi	r3,r2,4096
    f4fc:	98000015 	stw	zero,0(r19)
    f500:	18004826 	beq	r3,zero,f624 <__sflush_r+0x174>
    f504:	89801417 	ldw	r6,80(r17)
    f508:	10c0010c 	andi	r3,r2,4
    f50c:	18000626 	beq	r3,zero,f528 <__sflush_r+0x78>
    f510:	88c00117 	ldw	r3,4(r17)
    f514:	88800c17 	ldw	r2,48(r17)
    f518:	30cdc83a 	sub	r6,r6,r3
    f51c:	10000226 	beq	r2,zero,f528 <__sflush_r+0x78>
    f520:	88800f17 	ldw	r2,60(r17)
    f524:	308dc83a 	sub	r6,r6,r2
    f528:	89400717 	ldw	r5,28(r17)
    f52c:	000f883a 	mov	r7,zero
    f530:	9809883a 	mov	r4,r19
    f534:	403ee83a 	callr	r8
    f538:	00ffffc4 	movi	r3,-1
    f53c:	10c04426 	beq	r2,r3,f650 <__sflush_r+0x1a0>
    f540:	88c0030b 	ldhu	r3,12(r17)
    f544:	89000417 	ldw	r4,16(r17)
    f548:	88000115 	stw	zero,4(r17)
    f54c:	197dffcc 	andi	r5,r3,63487
    f550:	8940030d 	sth	r5,12(r17)
    f554:	89000015 	stw	r4,0(r17)
    f558:	18c4000c 	andi	r3,r3,4096
    f55c:	18002c1e 	bne	r3,zero,f610 <__sflush_r+0x160>
    f560:	89400c17 	ldw	r5,48(r17)
    f564:	9c000015 	stw	r16,0(r19)
    f568:	28000526 	beq	r5,zero,f580 <__sflush_r+0xd0>
    f56c:	88801004 	addi	r2,r17,64
    f570:	28800226 	beq	r5,r2,f57c <__sflush_r+0xcc>
    f574:	9809883a 	mov	r4,r19
    f578:	000fc1c0 	call	fc1c <_free_r>
    f57c:	88000c15 	stw	zero,48(r17)
    f580:	0005883a 	mov	r2,zero
    f584:	dfc00417 	ldw	ra,16(sp)
    f588:	dcc00317 	ldw	r19,12(sp)
    f58c:	dc800217 	ldw	r18,8(sp)
    f590:	dc400117 	ldw	r17,4(sp)
    f594:	dc000017 	ldw	r16,0(sp)
    f598:	dec00504 	addi	sp,sp,20
    f59c:	f800283a 	ret
    f5a0:	2c800417 	ldw	r18,16(r5)
    f5a4:	903ff626 	beq	r18,zero,f580 <__alt_data_end+0xf000f580>
    f5a8:	2c000017 	ldw	r16,0(r5)
    f5ac:	108000cc 	andi	r2,r2,3
    f5b0:	2c800015 	stw	r18,0(r5)
    f5b4:	84a1c83a 	sub	r16,r16,r18
    f5b8:	1000131e 	bne	r2,zero,f608 <__sflush_r+0x158>
    f5bc:	28800517 	ldw	r2,20(r5)
    f5c0:	88800215 	stw	r2,8(r17)
    f5c4:	04000316 	blt	zero,r16,f5d4 <__sflush_r+0x124>
    f5c8:	003fed06 	br	f580 <__alt_data_end+0xf000f580>
    f5cc:	90a5883a 	add	r18,r18,r2
    f5d0:	043feb0e 	bge	zero,r16,f580 <__alt_data_end+0xf000f580>
    f5d4:	88800917 	ldw	r2,36(r17)
    f5d8:	89400717 	ldw	r5,28(r17)
    f5dc:	800f883a 	mov	r7,r16
    f5e0:	900d883a 	mov	r6,r18
    f5e4:	9809883a 	mov	r4,r19
    f5e8:	103ee83a 	callr	r2
    f5ec:	80a1c83a 	sub	r16,r16,r2
    f5f0:	00bff616 	blt	zero,r2,f5cc <__alt_data_end+0xf000f5cc>
    f5f4:	88c0030b 	ldhu	r3,12(r17)
    f5f8:	00bfffc4 	movi	r2,-1
    f5fc:	18c01014 	ori	r3,r3,64
    f600:	88c0030d 	sth	r3,12(r17)
    f604:	003fdf06 	br	f584 <__alt_data_end+0xf000f584>
    f608:	0005883a 	mov	r2,zero
    f60c:	003fec06 	br	f5c0 <__alt_data_end+0xf000f5c0>
    f610:	88801415 	stw	r2,80(r17)
    f614:	003fd206 	br	f560 <__alt_data_end+0xf000f560>
    f618:	28c00f17 	ldw	r3,60(r5)
    f61c:	00ffb316 	blt	zero,r3,f4ec <__alt_data_end+0xf000f4ec>
    f620:	003fd706 	br	f580 <__alt_data_end+0xf000f580>
    f624:	89400717 	ldw	r5,28(r17)
    f628:	000d883a 	mov	r6,zero
    f62c:	01c00044 	movi	r7,1
    f630:	9809883a 	mov	r4,r19
    f634:	403ee83a 	callr	r8
    f638:	100d883a 	mov	r6,r2
    f63c:	00bfffc4 	movi	r2,-1
    f640:	30801426 	beq	r6,r2,f694 <__sflush_r+0x1e4>
    f644:	8880030b 	ldhu	r2,12(r17)
    f648:	8a000a17 	ldw	r8,40(r17)
    f64c:	003fae06 	br	f508 <__alt_data_end+0xf000f508>
    f650:	98c00017 	ldw	r3,0(r19)
    f654:	183fba26 	beq	r3,zero,f540 <__alt_data_end+0xf000f540>
    f658:	01000744 	movi	r4,29
    f65c:	19000626 	beq	r3,r4,f678 <__sflush_r+0x1c8>
    f660:	01000584 	movi	r4,22
    f664:	19000426 	beq	r3,r4,f678 <__sflush_r+0x1c8>
    f668:	88c0030b 	ldhu	r3,12(r17)
    f66c:	18c01014 	ori	r3,r3,64
    f670:	88c0030d 	sth	r3,12(r17)
    f674:	003fc306 	br	f584 <__alt_data_end+0xf000f584>
    f678:	8880030b 	ldhu	r2,12(r17)
    f67c:	88c00417 	ldw	r3,16(r17)
    f680:	88000115 	stw	zero,4(r17)
    f684:	10bdffcc 	andi	r2,r2,63487
    f688:	8880030d 	sth	r2,12(r17)
    f68c:	88c00015 	stw	r3,0(r17)
    f690:	003fb306 	br	f560 <__alt_data_end+0xf000f560>
    f694:	98800017 	ldw	r2,0(r19)
    f698:	103fea26 	beq	r2,zero,f644 <__alt_data_end+0xf000f644>
    f69c:	00c00744 	movi	r3,29
    f6a0:	10c00226 	beq	r2,r3,f6ac <__sflush_r+0x1fc>
    f6a4:	00c00584 	movi	r3,22
    f6a8:	10c0031e 	bne	r2,r3,f6b8 <__sflush_r+0x208>
    f6ac:	9c000015 	stw	r16,0(r19)
    f6b0:	0005883a 	mov	r2,zero
    f6b4:	003fb306 	br	f584 <__alt_data_end+0xf000f584>
    f6b8:	88c0030b 	ldhu	r3,12(r17)
    f6bc:	3005883a 	mov	r2,r6
    f6c0:	18c01014 	ori	r3,r3,64
    f6c4:	88c0030d 	sth	r3,12(r17)
    f6c8:	003fae06 	br	f584 <__alt_data_end+0xf000f584>

0000f6cc <_fflush_r>:
    f6cc:	defffd04 	addi	sp,sp,-12
    f6d0:	dc000115 	stw	r16,4(sp)
    f6d4:	dfc00215 	stw	ra,8(sp)
    f6d8:	2021883a 	mov	r16,r4
    f6dc:	20000226 	beq	r4,zero,f6e8 <_fflush_r+0x1c>
    f6e0:	20800e17 	ldw	r2,56(r4)
    f6e4:	10000c26 	beq	r2,zero,f718 <_fflush_r+0x4c>
    f6e8:	2880030f 	ldh	r2,12(r5)
    f6ec:	1000051e 	bne	r2,zero,f704 <_fflush_r+0x38>
    f6f0:	0005883a 	mov	r2,zero
    f6f4:	dfc00217 	ldw	ra,8(sp)
    f6f8:	dc000117 	ldw	r16,4(sp)
    f6fc:	dec00304 	addi	sp,sp,12
    f700:	f800283a 	ret
    f704:	8009883a 	mov	r4,r16
    f708:	dfc00217 	ldw	ra,8(sp)
    f70c:	dc000117 	ldw	r16,4(sp)
    f710:	dec00304 	addi	sp,sp,12
    f714:	000f4b01 	jmpi	f4b0 <__sflush_r>
    f718:	d9400015 	stw	r5,0(sp)
    f71c:	000faa80 	call	faa8 <__sinit>
    f720:	d9400017 	ldw	r5,0(sp)
    f724:	003ff006 	br	f6e8 <__alt_data_end+0xf000f6e8>

0000f728 <fflush>:
    f728:	20000526 	beq	r4,zero,f740 <fflush+0x18>
    f72c:	00820034 	movhi	r2,2048
    f730:	108b0204 	addi	r2,r2,11272
    f734:	200b883a 	mov	r5,r4
    f738:	11000017 	ldw	r4,0(r2)
    f73c:	000f6cc1 	jmpi	f6cc <_fflush_r>
    f740:	00820034 	movhi	r2,2048
    f744:	108b0104 	addi	r2,r2,11268
    f748:	11000017 	ldw	r4,0(r2)
    f74c:	01400074 	movhi	r5,1
    f750:	297db304 	addi	r5,r5,-2356
    f754:	00104ac1 	jmpi	104ac <_fwalk_reent>

0000f758 <__fp_unlock>:
    f758:	0005883a 	mov	r2,zero
    f75c:	f800283a 	ret

0000f760 <_cleanup_r>:
    f760:	01400074 	movhi	r5,1
    f764:	29559804 	addi	r5,r5,22112
    f768:	00104ac1 	jmpi	104ac <_fwalk_reent>

0000f76c <__sinit.part.1>:
    f76c:	defff704 	addi	sp,sp,-36
    f770:	00c00074 	movhi	r3,1
    f774:	dfc00815 	stw	ra,32(sp)
    f778:	ddc00715 	stw	r23,28(sp)
    f77c:	dd800615 	stw	r22,24(sp)
    f780:	dd400515 	stw	r21,20(sp)
    f784:	dd000415 	stw	r20,16(sp)
    f788:	dcc00315 	stw	r19,12(sp)
    f78c:	dc800215 	stw	r18,8(sp)
    f790:	dc400115 	stw	r17,4(sp)
    f794:	dc000015 	stw	r16,0(sp)
    f798:	18fdd804 	addi	r3,r3,-2208
    f79c:	24000117 	ldw	r16,4(r4)
    f7a0:	20c00f15 	stw	r3,60(r4)
    f7a4:	2080bb04 	addi	r2,r4,748
    f7a8:	00c000c4 	movi	r3,3
    f7ac:	20c0b915 	stw	r3,740(r4)
    f7b0:	2080ba15 	stw	r2,744(r4)
    f7b4:	2000b815 	stw	zero,736(r4)
    f7b8:	05c00204 	movi	r23,8
    f7bc:	00800104 	movi	r2,4
    f7c0:	2025883a 	mov	r18,r4
    f7c4:	b80d883a 	mov	r6,r23
    f7c8:	81001704 	addi	r4,r16,92
    f7cc:	000b883a 	mov	r5,zero
    f7d0:	80000015 	stw	zero,0(r16)
    f7d4:	80000115 	stw	zero,4(r16)
    f7d8:	80000215 	stw	zero,8(r16)
    f7dc:	8080030d 	sth	r2,12(r16)
    f7e0:	80001915 	stw	zero,100(r16)
    f7e4:	8000038d 	sth	zero,14(r16)
    f7e8:	80000415 	stw	zero,16(r16)
    f7ec:	80000515 	stw	zero,20(r16)
    f7f0:	80000615 	stw	zero,24(r16)
    f7f4:	00092680 	call	9268 <memset>
    f7f8:	05800074 	movhi	r22,1
    f7fc:	94400217 	ldw	r17,8(r18)
    f800:	05400074 	movhi	r21,1
    f804:	05000074 	movhi	r20,1
    f808:	04c00074 	movhi	r19,1
    f80c:	b58a1f04 	addi	r22,r22,10364
    f810:	ad4a3604 	addi	r21,r21,10456
    f814:	a50a5504 	addi	r20,r20,10580
    f818:	9cca6c04 	addi	r19,r19,10672
    f81c:	85800815 	stw	r22,32(r16)
    f820:	85400915 	stw	r21,36(r16)
    f824:	85000a15 	stw	r20,40(r16)
    f828:	84c00b15 	stw	r19,44(r16)
    f82c:	84000715 	stw	r16,28(r16)
    f830:	00800284 	movi	r2,10
    f834:	8880030d 	sth	r2,12(r17)
    f838:	00800044 	movi	r2,1
    f83c:	b80d883a 	mov	r6,r23
    f840:	89001704 	addi	r4,r17,92
    f844:	000b883a 	mov	r5,zero
    f848:	88000015 	stw	zero,0(r17)
    f84c:	88000115 	stw	zero,4(r17)
    f850:	88000215 	stw	zero,8(r17)
    f854:	88001915 	stw	zero,100(r17)
    f858:	8880038d 	sth	r2,14(r17)
    f85c:	88000415 	stw	zero,16(r17)
    f860:	88000515 	stw	zero,20(r17)
    f864:	88000615 	stw	zero,24(r17)
    f868:	00092680 	call	9268 <memset>
    f86c:	94000317 	ldw	r16,12(r18)
    f870:	00800484 	movi	r2,18
    f874:	8c400715 	stw	r17,28(r17)
    f878:	8d800815 	stw	r22,32(r17)
    f87c:	8d400915 	stw	r21,36(r17)
    f880:	8d000a15 	stw	r20,40(r17)
    f884:	8cc00b15 	stw	r19,44(r17)
    f888:	8080030d 	sth	r2,12(r16)
    f88c:	00800084 	movi	r2,2
    f890:	80000015 	stw	zero,0(r16)
    f894:	80000115 	stw	zero,4(r16)
    f898:	80000215 	stw	zero,8(r16)
    f89c:	80001915 	stw	zero,100(r16)
    f8a0:	8080038d 	sth	r2,14(r16)
    f8a4:	80000415 	stw	zero,16(r16)
    f8a8:	80000515 	stw	zero,20(r16)
    f8ac:	80000615 	stw	zero,24(r16)
    f8b0:	b80d883a 	mov	r6,r23
    f8b4:	000b883a 	mov	r5,zero
    f8b8:	81001704 	addi	r4,r16,92
    f8bc:	00092680 	call	9268 <memset>
    f8c0:	00800044 	movi	r2,1
    f8c4:	84000715 	stw	r16,28(r16)
    f8c8:	85800815 	stw	r22,32(r16)
    f8cc:	85400915 	stw	r21,36(r16)
    f8d0:	85000a15 	stw	r20,40(r16)
    f8d4:	84c00b15 	stw	r19,44(r16)
    f8d8:	90800e15 	stw	r2,56(r18)
    f8dc:	dfc00817 	ldw	ra,32(sp)
    f8e0:	ddc00717 	ldw	r23,28(sp)
    f8e4:	dd800617 	ldw	r22,24(sp)
    f8e8:	dd400517 	ldw	r21,20(sp)
    f8ec:	dd000417 	ldw	r20,16(sp)
    f8f0:	dcc00317 	ldw	r19,12(sp)
    f8f4:	dc800217 	ldw	r18,8(sp)
    f8f8:	dc400117 	ldw	r17,4(sp)
    f8fc:	dc000017 	ldw	r16,0(sp)
    f900:	dec00904 	addi	sp,sp,36
    f904:	f800283a 	ret

0000f908 <__fp_lock>:
    f908:	0005883a 	mov	r2,zero
    f90c:	f800283a 	ret

0000f910 <__sfmoreglue>:
    f910:	defffc04 	addi	sp,sp,-16
    f914:	dc400115 	stw	r17,4(sp)
    f918:	2c7fffc4 	addi	r17,r5,-1
    f91c:	8c401a24 	muli	r17,r17,104
    f920:	dc800215 	stw	r18,8(sp)
    f924:	2825883a 	mov	r18,r5
    f928:	89401d04 	addi	r5,r17,116
    f92c:	dc000015 	stw	r16,0(sp)
    f930:	dfc00315 	stw	ra,12(sp)
    f934:	00108080 	call	10808 <_malloc_r>
    f938:	1021883a 	mov	r16,r2
    f93c:	10000726 	beq	r2,zero,f95c <__sfmoreglue+0x4c>
    f940:	11000304 	addi	r4,r2,12
    f944:	10000015 	stw	zero,0(r2)
    f948:	14800115 	stw	r18,4(r2)
    f94c:	11000215 	stw	r4,8(r2)
    f950:	89801a04 	addi	r6,r17,104
    f954:	000b883a 	mov	r5,zero
    f958:	00092680 	call	9268 <memset>
    f95c:	8005883a 	mov	r2,r16
    f960:	dfc00317 	ldw	ra,12(sp)
    f964:	dc800217 	ldw	r18,8(sp)
    f968:	dc400117 	ldw	r17,4(sp)
    f96c:	dc000017 	ldw	r16,0(sp)
    f970:	dec00404 	addi	sp,sp,16
    f974:	f800283a 	ret

0000f978 <__sfp>:
    f978:	defffb04 	addi	sp,sp,-20
    f97c:	dc000015 	stw	r16,0(sp)
    f980:	04020034 	movhi	r16,2048
    f984:	840b0104 	addi	r16,r16,11268
    f988:	dcc00315 	stw	r19,12(sp)
    f98c:	2027883a 	mov	r19,r4
    f990:	81000017 	ldw	r4,0(r16)
    f994:	dfc00415 	stw	ra,16(sp)
    f998:	dc800215 	stw	r18,8(sp)
    f99c:	20800e17 	ldw	r2,56(r4)
    f9a0:	dc400115 	stw	r17,4(sp)
    f9a4:	1000021e 	bne	r2,zero,f9b0 <__sfp+0x38>
    f9a8:	000f76c0 	call	f76c <__sinit.part.1>
    f9ac:	81000017 	ldw	r4,0(r16)
    f9b0:	2480b804 	addi	r18,r4,736
    f9b4:	047fffc4 	movi	r17,-1
    f9b8:	91000117 	ldw	r4,4(r18)
    f9bc:	94000217 	ldw	r16,8(r18)
    f9c0:	213fffc4 	addi	r4,r4,-1
    f9c4:	20000a16 	blt	r4,zero,f9f0 <__sfp+0x78>
    f9c8:	8080030f 	ldh	r2,12(r16)
    f9cc:	10000c26 	beq	r2,zero,fa00 <__sfp+0x88>
    f9d0:	80c01d04 	addi	r3,r16,116
    f9d4:	00000206 	br	f9e0 <__sfp+0x68>
    f9d8:	18bfe60f 	ldh	r2,-104(r3)
    f9dc:	10000826 	beq	r2,zero,fa00 <__sfp+0x88>
    f9e0:	213fffc4 	addi	r4,r4,-1
    f9e4:	1c3ffd04 	addi	r16,r3,-12
    f9e8:	18c01a04 	addi	r3,r3,104
    f9ec:	247ffa1e 	bne	r4,r17,f9d8 <__alt_data_end+0xf000f9d8>
    f9f0:	90800017 	ldw	r2,0(r18)
    f9f4:	10001d26 	beq	r2,zero,fa6c <__sfp+0xf4>
    f9f8:	1025883a 	mov	r18,r2
    f9fc:	003fee06 	br	f9b8 <__alt_data_end+0xf000f9b8>
    fa00:	00bfffc4 	movi	r2,-1
    fa04:	8080038d 	sth	r2,14(r16)
    fa08:	00800044 	movi	r2,1
    fa0c:	8080030d 	sth	r2,12(r16)
    fa10:	80001915 	stw	zero,100(r16)
    fa14:	80000015 	stw	zero,0(r16)
    fa18:	80000215 	stw	zero,8(r16)
    fa1c:	80000115 	stw	zero,4(r16)
    fa20:	80000415 	stw	zero,16(r16)
    fa24:	80000515 	stw	zero,20(r16)
    fa28:	80000615 	stw	zero,24(r16)
    fa2c:	01800204 	movi	r6,8
    fa30:	000b883a 	mov	r5,zero
    fa34:	81001704 	addi	r4,r16,92
    fa38:	00092680 	call	9268 <memset>
    fa3c:	8005883a 	mov	r2,r16
    fa40:	80000c15 	stw	zero,48(r16)
    fa44:	80000d15 	stw	zero,52(r16)
    fa48:	80001115 	stw	zero,68(r16)
    fa4c:	80001215 	stw	zero,72(r16)
    fa50:	dfc00417 	ldw	ra,16(sp)
    fa54:	dcc00317 	ldw	r19,12(sp)
    fa58:	dc800217 	ldw	r18,8(sp)
    fa5c:	dc400117 	ldw	r17,4(sp)
    fa60:	dc000017 	ldw	r16,0(sp)
    fa64:	dec00504 	addi	sp,sp,20
    fa68:	f800283a 	ret
    fa6c:	01400104 	movi	r5,4
    fa70:	9809883a 	mov	r4,r19
    fa74:	000f9100 	call	f910 <__sfmoreglue>
    fa78:	90800015 	stw	r2,0(r18)
    fa7c:	103fde1e 	bne	r2,zero,f9f8 <__alt_data_end+0xf000f9f8>
    fa80:	00800304 	movi	r2,12
    fa84:	98800015 	stw	r2,0(r19)
    fa88:	0005883a 	mov	r2,zero
    fa8c:	003ff006 	br	fa50 <__alt_data_end+0xf000fa50>

0000fa90 <_cleanup>:
    fa90:	00820034 	movhi	r2,2048
    fa94:	108b0104 	addi	r2,r2,11268
    fa98:	11000017 	ldw	r4,0(r2)
    fa9c:	01400074 	movhi	r5,1
    faa0:	29559804 	addi	r5,r5,22112
    faa4:	00104ac1 	jmpi	104ac <_fwalk_reent>

0000faa8 <__sinit>:
    faa8:	20800e17 	ldw	r2,56(r4)
    faac:	10000126 	beq	r2,zero,fab4 <__sinit+0xc>
    fab0:	f800283a 	ret
    fab4:	000f76c1 	jmpi	f76c <__sinit.part.1>

0000fab8 <__sfp_lock_acquire>:
    fab8:	f800283a 	ret

0000fabc <__sfp_lock_release>:
    fabc:	f800283a 	ret

0000fac0 <__sinit_lock_acquire>:
    fac0:	f800283a 	ret

0000fac4 <__sinit_lock_release>:
    fac4:	f800283a 	ret

0000fac8 <__fp_lock_all>:
    fac8:	00820034 	movhi	r2,2048
    facc:	108b0204 	addi	r2,r2,11272
    fad0:	11000017 	ldw	r4,0(r2)
    fad4:	01400074 	movhi	r5,1
    fad8:	297e4204 	addi	r5,r5,-1784
    fadc:	00103e81 	jmpi	103e8 <_fwalk>

0000fae0 <__fp_unlock_all>:
    fae0:	00820034 	movhi	r2,2048
    fae4:	108b0204 	addi	r2,r2,11272
    fae8:	11000017 	ldw	r4,0(r2)
    faec:	01400074 	movhi	r5,1
    faf0:	297dd604 	addi	r5,r5,-2216
    faf4:	00103e81 	jmpi	103e8 <_fwalk>

0000faf8 <_malloc_trim_r>:
    faf8:	defffb04 	addi	sp,sp,-20
    fafc:	dcc00315 	stw	r19,12(sp)
    fb00:	04c20034 	movhi	r19,2048
    fb04:	dc800215 	stw	r18,8(sp)
    fb08:	dc400115 	stw	r17,4(sp)
    fb0c:	dc000015 	stw	r16,0(sp)
    fb10:	dfc00415 	stw	ra,16(sp)
    fb14:	2821883a 	mov	r16,r5
    fb18:	9cc3e104 	addi	r19,r19,3972
    fb1c:	2025883a 	mov	r18,r4
    fb20:	001782c0 	call	1782c <__malloc_lock>
    fb24:	98800217 	ldw	r2,8(r19)
    fb28:	14400117 	ldw	r17,4(r2)
    fb2c:	00bfff04 	movi	r2,-4
    fb30:	88a2703a 	and	r17,r17,r2
    fb34:	8c21c83a 	sub	r16,r17,r16
    fb38:	8403fbc4 	addi	r16,r16,4079
    fb3c:	8020d33a 	srli	r16,r16,12
    fb40:	0083ffc4 	movi	r2,4095
    fb44:	843fffc4 	addi	r16,r16,-1
    fb48:	8020933a 	slli	r16,r16,12
    fb4c:	1400060e 	bge	r2,r16,fb68 <_malloc_trim_r+0x70>
    fb50:	000b883a 	mov	r5,zero
    fb54:	9009883a 	mov	r4,r18
    fb58:	00128280 	call	12828 <_sbrk_r>
    fb5c:	98c00217 	ldw	r3,8(r19)
    fb60:	1c47883a 	add	r3,r3,r17
    fb64:	10c00a26 	beq	r2,r3,fb90 <_malloc_trim_r+0x98>
    fb68:	9009883a 	mov	r4,r18
    fb6c:	00178500 	call	17850 <__malloc_unlock>
    fb70:	0005883a 	mov	r2,zero
    fb74:	dfc00417 	ldw	ra,16(sp)
    fb78:	dcc00317 	ldw	r19,12(sp)
    fb7c:	dc800217 	ldw	r18,8(sp)
    fb80:	dc400117 	ldw	r17,4(sp)
    fb84:	dc000017 	ldw	r16,0(sp)
    fb88:	dec00504 	addi	sp,sp,20
    fb8c:	f800283a 	ret
    fb90:	040bc83a 	sub	r5,zero,r16
    fb94:	9009883a 	mov	r4,r18
    fb98:	00128280 	call	12828 <_sbrk_r>
    fb9c:	00ffffc4 	movi	r3,-1
    fba0:	10c00d26 	beq	r2,r3,fbd8 <_malloc_trim_r+0xe0>
    fba4:	00c20234 	movhi	r3,2056
    fba8:	18ffc704 	addi	r3,r3,-228
    fbac:	18800017 	ldw	r2,0(r3)
    fbb0:	99000217 	ldw	r4,8(r19)
    fbb4:	8c23c83a 	sub	r17,r17,r16
    fbb8:	8c400054 	ori	r17,r17,1
    fbbc:	1421c83a 	sub	r16,r2,r16
    fbc0:	24400115 	stw	r17,4(r4)
    fbc4:	9009883a 	mov	r4,r18
    fbc8:	1c000015 	stw	r16,0(r3)
    fbcc:	00178500 	call	17850 <__malloc_unlock>
    fbd0:	00800044 	movi	r2,1
    fbd4:	003fe706 	br	fb74 <__alt_data_end+0xf000fb74>
    fbd8:	000b883a 	mov	r5,zero
    fbdc:	9009883a 	mov	r4,r18
    fbe0:	00128280 	call	12828 <_sbrk_r>
    fbe4:	99000217 	ldw	r4,8(r19)
    fbe8:	014003c4 	movi	r5,15
    fbec:	1107c83a 	sub	r3,r2,r4
    fbf0:	28ffdd0e 	bge	r5,r3,fb68 <__alt_data_end+0xf000fb68>
    fbf4:	01420034 	movhi	r5,2048
    fbf8:	294b0404 	addi	r5,r5,11280
    fbfc:	29400017 	ldw	r5,0(r5)
    fc00:	18c00054 	ori	r3,r3,1
    fc04:	20c00115 	stw	r3,4(r4)
    fc08:	00c20234 	movhi	r3,2056
    fc0c:	1145c83a 	sub	r2,r2,r5
    fc10:	18ffc704 	addi	r3,r3,-228
    fc14:	18800015 	stw	r2,0(r3)
    fc18:	003fd306 	br	fb68 <__alt_data_end+0xf000fb68>

0000fc1c <_free_r>:
    fc1c:	28004126 	beq	r5,zero,fd24 <_free_r+0x108>
    fc20:	defffd04 	addi	sp,sp,-12
    fc24:	dc400115 	stw	r17,4(sp)
    fc28:	dc000015 	stw	r16,0(sp)
    fc2c:	2023883a 	mov	r17,r4
    fc30:	2821883a 	mov	r16,r5
    fc34:	dfc00215 	stw	ra,8(sp)
    fc38:	001782c0 	call	1782c <__malloc_lock>
    fc3c:	81ffff17 	ldw	r7,-4(r16)
    fc40:	00bfff84 	movi	r2,-2
    fc44:	01020034 	movhi	r4,2048
    fc48:	81bffe04 	addi	r6,r16,-8
    fc4c:	3884703a 	and	r2,r7,r2
    fc50:	2103e104 	addi	r4,r4,3972
    fc54:	308b883a 	add	r5,r6,r2
    fc58:	2a400117 	ldw	r9,4(r5)
    fc5c:	22000217 	ldw	r8,8(r4)
    fc60:	00ffff04 	movi	r3,-4
    fc64:	48c6703a 	and	r3,r9,r3
    fc68:	2a005726 	beq	r5,r8,fdc8 <_free_r+0x1ac>
    fc6c:	28c00115 	stw	r3,4(r5)
    fc70:	39c0004c 	andi	r7,r7,1
    fc74:	3800091e 	bne	r7,zero,fc9c <_free_r+0x80>
    fc78:	823ffe17 	ldw	r8,-8(r16)
    fc7c:	22400204 	addi	r9,r4,8
    fc80:	320dc83a 	sub	r6,r6,r8
    fc84:	31c00217 	ldw	r7,8(r6)
    fc88:	1205883a 	add	r2,r2,r8
    fc8c:	3a406526 	beq	r7,r9,fe24 <_free_r+0x208>
    fc90:	32000317 	ldw	r8,12(r6)
    fc94:	3a000315 	stw	r8,12(r7)
    fc98:	41c00215 	stw	r7,8(r8)
    fc9c:	28cf883a 	add	r7,r5,r3
    fca0:	39c00117 	ldw	r7,4(r7)
    fca4:	39c0004c 	andi	r7,r7,1
    fca8:	38003a26 	beq	r7,zero,fd94 <_free_r+0x178>
    fcac:	10c00054 	ori	r3,r2,1
    fcb0:	30c00115 	stw	r3,4(r6)
    fcb4:	3087883a 	add	r3,r6,r2
    fcb8:	18800015 	stw	r2,0(r3)
    fcbc:	00c07fc4 	movi	r3,511
    fcc0:	18801936 	bltu	r3,r2,fd28 <_free_r+0x10c>
    fcc4:	1004d0fa 	srli	r2,r2,3
    fcc8:	01c00044 	movi	r7,1
    fccc:	21400117 	ldw	r5,4(r4)
    fcd0:	10c00044 	addi	r3,r2,1
    fcd4:	18c7883a 	add	r3,r3,r3
    fcd8:	1005d0ba 	srai	r2,r2,2
    fcdc:	18c7883a 	add	r3,r3,r3
    fce0:	18c7883a 	add	r3,r3,r3
    fce4:	1907883a 	add	r3,r3,r4
    fce8:	3884983a 	sll	r2,r7,r2
    fcec:	19c00017 	ldw	r7,0(r3)
    fcf0:	1a3ffe04 	addi	r8,r3,-8
    fcf4:	1144b03a 	or	r2,r2,r5
    fcf8:	32000315 	stw	r8,12(r6)
    fcfc:	31c00215 	stw	r7,8(r6)
    fd00:	20800115 	stw	r2,4(r4)
    fd04:	19800015 	stw	r6,0(r3)
    fd08:	39800315 	stw	r6,12(r7)
    fd0c:	8809883a 	mov	r4,r17
    fd10:	dfc00217 	ldw	ra,8(sp)
    fd14:	dc400117 	ldw	r17,4(sp)
    fd18:	dc000017 	ldw	r16,0(sp)
    fd1c:	dec00304 	addi	sp,sp,12
    fd20:	00178501 	jmpi	17850 <__malloc_unlock>
    fd24:	f800283a 	ret
    fd28:	100ad27a 	srli	r5,r2,9
    fd2c:	00c00104 	movi	r3,4
    fd30:	19404a36 	bltu	r3,r5,fe5c <_free_r+0x240>
    fd34:	100ad1ba 	srli	r5,r2,6
    fd38:	28c00e44 	addi	r3,r5,57
    fd3c:	18c7883a 	add	r3,r3,r3
    fd40:	29400e04 	addi	r5,r5,56
    fd44:	18c7883a 	add	r3,r3,r3
    fd48:	18c7883a 	add	r3,r3,r3
    fd4c:	1909883a 	add	r4,r3,r4
    fd50:	20c00017 	ldw	r3,0(r4)
    fd54:	01c20034 	movhi	r7,2048
    fd58:	213ffe04 	addi	r4,r4,-8
    fd5c:	39c3e104 	addi	r7,r7,3972
    fd60:	20c04426 	beq	r4,r3,fe74 <_free_r+0x258>
    fd64:	01ffff04 	movi	r7,-4
    fd68:	19400117 	ldw	r5,4(r3)
    fd6c:	29ca703a 	and	r5,r5,r7
    fd70:	1140022e 	bgeu	r2,r5,fd7c <_free_r+0x160>
    fd74:	18c00217 	ldw	r3,8(r3)
    fd78:	20fffb1e 	bne	r4,r3,fd68 <__alt_data_end+0xf000fd68>
    fd7c:	19000317 	ldw	r4,12(r3)
    fd80:	31000315 	stw	r4,12(r6)
    fd84:	30c00215 	stw	r3,8(r6)
    fd88:	21800215 	stw	r6,8(r4)
    fd8c:	19800315 	stw	r6,12(r3)
    fd90:	003fde06 	br	fd0c <__alt_data_end+0xf000fd0c>
    fd94:	29c00217 	ldw	r7,8(r5)
    fd98:	10c5883a 	add	r2,r2,r3
    fd9c:	00c20034 	movhi	r3,2048
    fda0:	18c3e304 	addi	r3,r3,3980
    fda4:	38c03b26 	beq	r7,r3,fe94 <_free_r+0x278>
    fda8:	2a000317 	ldw	r8,12(r5)
    fdac:	11400054 	ori	r5,r2,1
    fdb0:	3087883a 	add	r3,r6,r2
    fdb4:	3a000315 	stw	r8,12(r7)
    fdb8:	41c00215 	stw	r7,8(r8)
    fdbc:	31400115 	stw	r5,4(r6)
    fdc0:	18800015 	stw	r2,0(r3)
    fdc4:	003fbd06 	br	fcbc <__alt_data_end+0xf000fcbc>
    fdc8:	39c0004c 	andi	r7,r7,1
    fdcc:	10c5883a 	add	r2,r2,r3
    fdd0:	3800071e 	bne	r7,zero,fdf0 <_free_r+0x1d4>
    fdd4:	81fffe17 	ldw	r7,-8(r16)
    fdd8:	31cdc83a 	sub	r6,r6,r7
    fddc:	30c00317 	ldw	r3,12(r6)
    fde0:	31400217 	ldw	r5,8(r6)
    fde4:	11c5883a 	add	r2,r2,r7
    fde8:	28c00315 	stw	r3,12(r5)
    fdec:	19400215 	stw	r5,8(r3)
    fdf0:	10c00054 	ori	r3,r2,1
    fdf4:	30c00115 	stw	r3,4(r6)
    fdf8:	00c20034 	movhi	r3,2048
    fdfc:	18cb0504 	addi	r3,r3,11284
    fe00:	18c00017 	ldw	r3,0(r3)
    fe04:	21800215 	stw	r6,8(r4)
    fe08:	10ffc036 	bltu	r2,r3,fd0c <__alt_data_end+0xf000fd0c>
    fe0c:	00820034 	movhi	r2,2048
    fe10:	108b4b04 	addi	r2,r2,11564
    fe14:	11400017 	ldw	r5,0(r2)
    fe18:	8809883a 	mov	r4,r17
    fe1c:	000faf80 	call	faf8 <_malloc_trim_r>
    fe20:	003fba06 	br	fd0c <__alt_data_end+0xf000fd0c>
    fe24:	28c9883a 	add	r4,r5,r3
    fe28:	21000117 	ldw	r4,4(r4)
    fe2c:	2100004c 	andi	r4,r4,1
    fe30:	2000391e 	bne	r4,zero,ff18 <_free_r+0x2fc>
    fe34:	29c00217 	ldw	r7,8(r5)
    fe38:	29000317 	ldw	r4,12(r5)
    fe3c:	1885883a 	add	r2,r3,r2
    fe40:	10c00054 	ori	r3,r2,1
    fe44:	39000315 	stw	r4,12(r7)
    fe48:	21c00215 	stw	r7,8(r4)
    fe4c:	30c00115 	stw	r3,4(r6)
    fe50:	308d883a 	add	r6,r6,r2
    fe54:	30800015 	stw	r2,0(r6)
    fe58:	003fac06 	br	fd0c <__alt_data_end+0xf000fd0c>
    fe5c:	00c00504 	movi	r3,20
    fe60:	19401536 	bltu	r3,r5,feb8 <_free_r+0x29c>
    fe64:	28c01704 	addi	r3,r5,92
    fe68:	18c7883a 	add	r3,r3,r3
    fe6c:	294016c4 	addi	r5,r5,91
    fe70:	003fb406 	br	fd44 <__alt_data_end+0xf000fd44>
    fe74:	280bd0ba 	srai	r5,r5,2
    fe78:	00c00044 	movi	r3,1
    fe7c:	38800117 	ldw	r2,4(r7)
    fe80:	194a983a 	sll	r5,r3,r5
    fe84:	2007883a 	mov	r3,r4
    fe88:	2884b03a 	or	r2,r5,r2
    fe8c:	38800115 	stw	r2,4(r7)
    fe90:	003fbb06 	br	fd80 <__alt_data_end+0xf000fd80>
    fe94:	21800515 	stw	r6,20(r4)
    fe98:	21800415 	stw	r6,16(r4)
    fe9c:	10c00054 	ori	r3,r2,1
    fea0:	31c00315 	stw	r7,12(r6)
    fea4:	31c00215 	stw	r7,8(r6)
    fea8:	30c00115 	stw	r3,4(r6)
    feac:	308d883a 	add	r6,r6,r2
    feb0:	30800015 	stw	r2,0(r6)
    feb4:	003f9506 	br	fd0c <__alt_data_end+0xf000fd0c>
    feb8:	00c01504 	movi	r3,84
    febc:	19400536 	bltu	r3,r5,fed4 <_free_r+0x2b8>
    fec0:	100ad33a 	srli	r5,r2,12
    fec4:	28c01bc4 	addi	r3,r5,111
    fec8:	18c7883a 	add	r3,r3,r3
    fecc:	29401b84 	addi	r5,r5,110
    fed0:	003f9c06 	br	fd44 <__alt_data_end+0xf000fd44>
    fed4:	00c05504 	movi	r3,340
    fed8:	19400536 	bltu	r3,r5,fef0 <_free_r+0x2d4>
    fedc:	100ad3fa 	srli	r5,r2,15
    fee0:	28c01e04 	addi	r3,r5,120
    fee4:	18c7883a 	add	r3,r3,r3
    fee8:	29401dc4 	addi	r5,r5,119
    feec:	003f9506 	br	fd44 <__alt_data_end+0xf000fd44>
    fef0:	00c15504 	movi	r3,1364
    fef4:	19400536 	bltu	r3,r5,ff0c <_free_r+0x2f0>
    fef8:	100ad4ba 	srli	r5,r2,18
    fefc:	28c01f44 	addi	r3,r5,125
    ff00:	18c7883a 	add	r3,r3,r3
    ff04:	29401f04 	addi	r5,r5,124
    ff08:	003f8e06 	br	fd44 <__alt_data_end+0xf000fd44>
    ff0c:	00c03f84 	movi	r3,254
    ff10:	01401f84 	movi	r5,126
    ff14:	003f8b06 	br	fd44 <__alt_data_end+0xf000fd44>
    ff18:	10c00054 	ori	r3,r2,1
    ff1c:	30c00115 	stw	r3,4(r6)
    ff20:	308d883a 	add	r6,r6,r2
    ff24:	30800015 	stw	r2,0(r6)
    ff28:	003f7806 	br	fd0c <__alt_data_end+0xf000fd0c>

0000ff2c <__sfvwrite_r>:
    ff2c:	30800217 	ldw	r2,8(r6)
    ff30:	10006726 	beq	r2,zero,100d0 <__sfvwrite_r+0x1a4>
    ff34:	28c0030b 	ldhu	r3,12(r5)
    ff38:	defff404 	addi	sp,sp,-48
    ff3c:	dd400715 	stw	r21,28(sp)
    ff40:	dd000615 	stw	r20,24(sp)
    ff44:	dc000215 	stw	r16,8(sp)
    ff48:	dfc00b15 	stw	ra,44(sp)
    ff4c:	df000a15 	stw	fp,40(sp)
    ff50:	ddc00915 	stw	r23,36(sp)
    ff54:	dd800815 	stw	r22,32(sp)
    ff58:	dcc00515 	stw	r19,20(sp)
    ff5c:	dc800415 	stw	r18,16(sp)
    ff60:	dc400315 	stw	r17,12(sp)
    ff64:	1880020c 	andi	r2,r3,8
    ff68:	2821883a 	mov	r16,r5
    ff6c:	202b883a 	mov	r21,r4
    ff70:	3029883a 	mov	r20,r6
    ff74:	10002726 	beq	r2,zero,10014 <__sfvwrite_r+0xe8>
    ff78:	28800417 	ldw	r2,16(r5)
    ff7c:	10002526 	beq	r2,zero,10014 <__sfvwrite_r+0xe8>
    ff80:	1880008c 	andi	r2,r3,2
    ff84:	a4400017 	ldw	r17,0(r20)
    ff88:	10002a26 	beq	r2,zero,10034 <__sfvwrite_r+0x108>
    ff8c:	05a00034 	movhi	r22,32768
    ff90:	0027883a 	mov	r19,zero
    ff94:	0025883a 	mov	r18,zero
    ff98:	b5bf0004 	addi	r22,r22,-1024
    ff9c:	980d883a 	mov	r6,r19
    ffa0:	a809883a 	mov	r4,r21
    ffa4:	90004626 	beq	r18,zero,100c0 <__sfvwrite_r+0x194>
    ffa8:	900f883a 	mov	r7,r18
    ffac:	b480022e 	bgeu	r22,r18,ffb8 <__sfvwrite_r+0x8c>
    ffb0:	01e00034 	movhi	r7,32768
    ffb4:	39ff0004 	addi	r7,r7,-1024
    ffb8:	80800917 	ldw	r2,36(r16)
    ffbc:	81400717 	ldw	r5,28(r16)
    ffc0:	103ee83a 	callr	r2
    ffc4:	0080570e 	bge	zero,r2,10124 <__sfvwrite_r+0x1f8>
    ffc8:	a0c00217 	ldw	r3,8(r20)
    ffcc:	98a7883a 	add	r19,r19,r2
    ffd0:	90a5c83a 	sub	r18,r18,r2
    ffd4:	1885c83a 	sub	r2,r3,r2
    ffd8:	a0800215 	stw	r2,8(r20)
    ffdc:	103fef1e 	bne	r2,zero,ff9c <__alt_data_end+0xf000ff9c>
    ffe0:	0005883a 	mov	r2,zero
    ffe4:	dfc00b17 	ldw	ra,44(sp)
    ffe8:	df000a17 	ldw	fp,40(sp)
    ffec:	ddc00917 	ldw	r23,36(sp)
    fff0:	dd800817 	ldw	r22,32(sp)
    fff4:	dd400717 	ldw	r21,28(sp)
    fff8:	dd000617 	ldw	r20,24(sp)
    fffc:	dcc00517 	ldw	r19,20(sp)
   10000:	dc800417 	ldw	r18,16(sp)
   10004:	dc400317 	ldw	r17,12(sp)
   10008:	dc000217 	ldw	r16,8(sp)
   1000c:	dec00c04 	addi	sp,sp,48
   10010:	f800283a 	ret
   10014:	800b883a 	mov	r5,r16
   10018:	a809883a 	mov	r4,r21
   1001c:	000dad40 	call	dad4 <__swsetup_r>
   10020:	1000eb1e 	bne	r2,zero,103d0 <__sfvwrite_r+0x4a4>
   10024:	80c0030b 	ldhu	r3,12(r16)
   10028:	a4400017 	ldw	r17,0(r20)
   1002c:	1880008c 	andi	r2,r3,2
   10030:	103fd61e 	bne	r2,zero,ff8c <__alt_data_end+0xf000ff8c>
   10034:	1880004c 	andi	r2,r3,1
   10038:	10003f1e 	bne	r2,zero,10138 <__sfvwrite_r+0x20c>
   1003c:	0039883a 	mov	fp,zero
   10040:	0025883a 	mov	r18,zero
   10044:	90001a26 	beq	r18,zero,100b0 <__sfvwrite_r+0x184>
   10048:	1880800c 	andi	r2,r3,512
   1004c:	84c00217 	ldw	r19,8(r16)
   10050:	10002126 	beq	r2,zero,100d8 <__sfvwrite_r+0x1ac>
   10054:	982f883a 	mov	r23,r19
   10058:	94c09336 	bltu	r18,r19,102a8 <__sfvwrite_r+0x37c>
   1005c:	1881200c 	andi	r2,r3,1152
   10060:	10009e1e 	bne	r2,zero,102dc <__sfvwrite_r+0x3b0>
   10064:	81000017 	ldw	r4,0(r16)
   10068:	b80d883a 	mov	r6,r23
   1006c:	e00b883a 	mov	r5,fp
   10070:	00110f80 	call	110f8 <memmove>
   10074:	80c00217 	ldw	r3,8(r16)
   10078:	81000017 	ldw	r4,0(r16)
   1007c:	9005883a 	mov	r2,r18
   10080:	1ce7c83a 	sub	r19,r3,r19
   10084:	25cf883a 	add	r7,r4,r23
   10088:	84c00215 	stw	r19,8(r16)
   1008c:	81c00015 	stw	r7,0(r16)
   10090:	a0c00217 	ldw	r3,8(r20)
   10094:	e0b9883a 	add	fp,fp,r2
   10098:	90a5c83a 	sub	r18,r18,r2
   1009c:	18a7c83a 	sub	r19,r3,r2
   100a0:	a4c00215 	stw	r19,8(r20)
   100a4:	983fce26 	beq	r19,zero,ffe0 <__alt_data_end+0xf000ffe0>
   100a8:	80c0030b 	ldhu	r3,12(r16)
   100ac:	903fe61e 	bne	r18,zero,10048 <__alt_data_end+0xf0010048>
   100b0:	8f000017 	ldw	fp,0(r17)
   100b4:	8c800117 	ldw	r18,4(r17)
   100b8:	8c400204 	addi	r17,r17,8
   100bc:	003fe106 	br	10044 <__alt_data_end+0xf0010044>
   100c0:	8cc00017 	ldw	r19,0(r17)
   100c4:	8c800117 	ldw	r18,4(r17)
   100c8:	8c400204 	addi	r17,r17,8
   100cc:	003fb306 	br	ff9c <__alt_data_end+0xf000ff9c>
   100d0:	0005883a 	mov	r2,zero
   100d4:	f800283a 	ret
   100d8:	81000017 	ldw	r4,0(r16)
   100dc:	80800417 	ldw	r2,16(r16)
   100e0:	11005736 	bltu	r2,r4,10240 <__sfvwrite_r+0x314>
   100e4:	85c00517 	ldw	r23,20(r16)
   100e8:	95c05536 	bltu	r18,r23,10240 <__sfvwrite_r+0x314>
   100ec:	00a00034 	movhi	r2,32768
   100f0:	10bfffc4 	addi	r2,r2,-1
   100f4:	9009883a 	mov	r4,r18
   100f8:	1480012e 	bgeu	r2,r18,10100 <__sfvwrite_r+0x1d4>
   100fc:	1009883a 	mov	r4,r2
   10100:	b80b883a 	mov	r5,r23
   10104:	0008ef00 	call	8ef0 <__divsi3>
   10108:	15cf383a 	mul	r7,r2,r23
   1010c:	81400717 	ldw	r5,28(r16)
   10110:	80800917 	ldw	r2,36(r16)
   10114:	e00d883a 	mov	r6,fp
   10118:	a809883a 	mov	r4,r21
   1011c:	103ee83a 	callr	r2
   10120:	00bfdb16 	blt	zero,r2,10090 <__alt_data_end+0xf0010090>
   10124:	8080030b 	ldhu	r2,12(r16)
   10128:	10801014 	ori	r2,r2,64
   1012c:	8080030d 	sth	r2,12(r16)
   10130:	00bfffc4 	movi	r2,-1
   10134:	003fab06 	br	ffe4 <__alt_data_end+0xf000ffe4>
   10138:	0027883a 	mov	r19,zero
   1013c:	0011883a 	mov	r8,zero
   10140:	0039883a 	mov	fp,zero
   10144:	0025883a 	mov	r18,zero
   10148:	90001f26 	beq	r18,zero,101c8 <__sfvwrite_r+0x29c>
   1014c:	40005a26 	beq	r8,zero,102b8 <__sfvwrite_r+0x38c>
   10150:	982d883a 	mov	r22,r19
   10154:	94c0012e 	bgeu	r18,r19,1015c <__sfvwrite_r+0x230>
   10158:	902d883a 	mov	r22,r18
   1015c:	81000017 	ldw	r4,0(r16)
   10160:	80800417 	ldw	r2,16(r16)
   10164:	b02f883a 	mov	r23,r22
   10168:	81c00517 	ldw	r7,20(r16)
   1016c:	1100032e 	bgeu	r2,r4,1017c <__sfvwrite_r+0x250>
   10170:	80c00217 	ldw	r3,8(r16)
   10174:	38c7883a 	add	r3,r7,r3
   10178:	1d801816 	blt	r3,r22,101dc <__sfvwrite_r+0x2b0>
   1017c:	b1c03e16 	blt	r22,r7,10278 <__sfvwrite_r+0x34c>
   10180:	80800917 	ldw	r2,36(r16)
   10184:	81400717 	ldw	r5,28(r16)
   10188:	e00d883a 	mov	r6,fp
   1018c:	da000115 	stw	r8,4(sp)
   10190:	a809883a 	mov	r4,r21
   10194:	103ee83a 	callr	r2
   10198:	102f883a 	mov	r23,r2
   1019c:	da000117 	ldw	r8,4(sp)
   101a0:	00bfe00e 	bge	zero,r2,10124 <__alt_data_end+0xf0010124>
   101a4:	9de7c83a 	sub	r19,r19,r23
   101a8:	98001f26 	beq	r19,zero,10228 <__sfvwrite_r+0x2fc>
   101ac:	a0800217 	ldw	r2,8(r20)
   101b0:	e5f9883a 	add	fp,fp,r23
   101b4:	95e5c83a 	sub	r18,r18,r23
   101b8:	15efc83a 	sub	r23,r2,r23
   101bc:	a5c00215 	stw	r23,8(r20)
   101c0:	b83f8726 	beq	r23,zero,ffe0 <__alt_data_end+0xf000ffe0>
   101c4:	903fe11e 	bne	r18,zero,1014c <__alt_data_end+0xf001014c>
   101c8:	8f000017 	ldw	fp,0(r17)
   101cc:	8c800117 	ldw	r18,4(r17)
   101d0:	0011883a 	mov	r8,zero
   101d4:	8c400204 	addi	r17,r17,8
   101d8:	003fdb06 	br	10148 <__alt_data_end+0xf0010148>
   101dc:	180d883a 	mov	r6,r3
   101e0:	e00b883a 	mov	r5,fp
   101e4:	da000115 	stw	r8,4(sp)
   101e8:	d8c00015 	stw	r3,0(sp)
   101ec:	00110f80 	call	110f8 <memmove>
   101f0:	d8c00017 	ldw	r3,0(sp)
   101f4:	80800017 	ldw	r2,0(r16)
   101f8:	800b883a 	mov	r5,r16
   101fc:	a809883a 	mov	r4,r21
   10200:	10c5883a 	add	r2,r2,r3
   10204:	80800015 	stw	r2,0(r16)
   10208:	d8c00015 	stw	r3,0(sp)
   1020c:	000f6cc0 	call	f6cc <_fflush_r>
   10210:	d8c00017 	ldw	r3,0(sp)
   10214:	da000117 	ldw	r8,4(sp)
   10218:	103fc21e 	bne	r2,zero,10124 <__alt_data_end+0xf0010124>
   1021c:	182f883a 	mov	r23,r3
   10220:	9de7c83a 	sub	r19,r19,r23
   10224:	983fe11e 	bne	r19,zero,101ac <__alt_data_end+0xf00101ac>
   10228:	800b883a 	mov	r5,r16
   1022c:	a809883a 	mov	r4,r21
   10230:	000f6cc0 	call	f6cc <_fflush_r>
   10234:	103fbb1e 	bne	r2,zero,10124 <__alt_data_end+0xf0010124>
   10238:	0011883a 	mov	r8,zero
   1023c:	003fdb06 	br	101ac <__alt_data_end+0xf00101ac>
   10240:	94c0012e 	bgeu	r18,r19,10248 <__sfvwrite_r+0x31c>
   10244:	9027883a 	mov	r19,r18
   10248:	980d883a 	mov	r6,r19
   1024c:	e00b883a 	mov	r5,fp
   10250:	00110f80 	call	110f8 <memmove>
   10254:	80800217 	ldw	r2,8(r16)
   10258:	80c00017 	ldw	r3,0(r16)
   1025c:	14c5c83a 	sub	r2,r2,r19
   10260:	1cc7883a 	add	r3,r3,r19
   10264:	80800215 	stw	r2,8(r16)
   10268:	80c00015 	stw	r3,0(r16)
   1026c:	10004326 	beq	r2,zero,1037c <__sfvwrite_r+0x450>
   10270:	9805883a 	mov	r2,r19
   10274:	003f8606 	br	10090 <__alt_data_end+0xf0010090>
   10278:	b00d883a 	mov	r6,r22
   1027c:	e00b883a 	mov	r5,fp
   10280:	da000115 	stw	r8,4(sp)
   10284:	00110f80 	call	110f8 <memmove>
   10288:	80800217 	ldw	r2,8(r16)
   1028c:	80c00017 	ldw	r3,0(r16)
   10290:	da000117 	ldw	r8,4(sp)
   10294:	1585c83a 	sub	r2,r2,r22
   10298:	1dad883a 	add	r22,r3,r22
   1029c:	80800215 	stw	r2,8(r16)
   102a0:	85800015 	stw	r22,0(r16)
   102a4:	003fbf06 	br	101a4 <__alt_data_end+0xf00101a4>
   102a8:	81000017 	ldw	r4,0(r16)
   102ac:	9027883a 	mov	r19,r18
   102b0:	902f883a 	mov	r23,r18
   102b4:	003f6c06 	br	10068 <__alt_data_end+0xf0010068>
   102b8:	900d883a 	mov	r6,r18
   102bc:	01400284 	movi	r5,10
   102c0:	e009883a 	mov	r4,fp
   102c4:	00110140 	call	11014 <memchr>
   102c8:	10003e26 	beq	r2,zero,103c4 <__sfvwrite_r+0x498>
   102cc:	10800044 	addi	r2,r2,1
   102d0:	1727c83a 	sub	r19,r2,fp
   102d4:	02000044 	movi	r8,1
   102d8:	003f9d06 	br	10150 <__alt_data_end+0xf0010150>
   102dc:	80800517 	ldw	r2,20(r16)
   102e0:	81400417 	ldw	r5,16(r16)
   102e4:	81c00017 	ldw	r7,0(r16)
   102e8:	10a7883a 	add	r19,r2,r2
   102ec:	9885883a 	add	r2,r19,r2
   102f0:	1026d7fa 	srli	r19,r2,31
   102f4:	396dc83a 	sub	r22,r7,r5
   102f8:	b1000044 	addi	r4,r22,1
   102fc:	9885883a 	add	r2,r19,r2
   10300:	1027d07a 	srai	r19,r2,1
   10304:	2485883a 	add	r2,r4,r18
   10308:	980d883a 	mov	r6,r19
   1030c:	9880022e 	bgeu	r19,r2,10318 <__sfvwrite_r+0x3ec>
   10310:	1027883a 	mov	r19,r2
   10314:	100d883a 	mov	r6,r2
   10318:	18c1000c 	andi	r3,r3,1024
   1031c:	18001c26 	beq	r3,zero,10390 <__sfvwrite_r+0x464>
   10320:	300b883a 	mov	r5,r6
   10324:	a809883a 	mov	r4,r21
   10328:	00108080 	call	10808 <_malloc_r>
   1032c:	102f883a 	mov	r23,r2
   10330:	10002926 	beq	r2,zero,103d8 <__sfvwrite_r+0x4ac>
   10334:	81400417 	ldw	r5,16(r16)
   10338:	b00d883a 	mov	r6,r22
   1033c:	1009883a 	mov	r4,r2
   10340:	00091200 	call	9120 <memcpy>
   10344:	8080030b 	ldhu	r2,12(r16)
   10348:	00fedfc4 	movi	r3,-1153
   1034c:	10c4703a 	and	r2,r2,r3
   10350:	10802014 	ori	r2,r2,128
   10354:	8080030d 	sth	r2,12(r16)
   10358:	bd89883a 	add	r4,r23,r22
   1035c:	9d8fc83a 	sub	r7,r19,r22
   10360:	85c00415 	stw	r23,16(r16)
   10364:	84c00515 	stw	r19,20(r16)
   10368:	81000015 	stw	r4,0(r16)
   1036c:	9027883a 	mov	r19,r18
   10370:	81c00215 	stw	r7,8(r16)
   10374:	902f883a 	mov	r23,r18
   10378:	003f3b06 	br	10068 <__alt_data_end+0xf0010068>
   1037c:	800b883a 	mov	r5,r16
   10380:	a809883a 	mov	r4,r21
   10384:	000f6cc0 	call	f6cc <_fflush_r>
   10388:	103fb926 	beq	r2,zero,10270 <__alt_data_end+0xf0010270>
   1038c:	003f6506 	br	10124 <__alt_data_end+0xf0010124>
   10390:	a809883a 	mov	r4,r21
   10394:	00122500 	call	12250 <_realloc_r>
   10398:	102f883a 	mov	r23,r2
   1039c:	103fee1e 	bne	r2,zero,10358 <__alt_data_end+0xf0010358>
   103a0:	81400417 	ldw	r5,16(r16)
   103a4:	a809883a 	mov	r4,r21
   103a8:	000fc1c0 	call	fc1c <_free_r>
   103ac:	8080030b 	ldhu	r2,12(r16)
   103b0:	00ffdfc4 	movi	r3,-129
   103b4:	1884703a 	and	r2,r3,r2
   103b8:	00c00304 	movi	r3,12
   103bc:	a8c00015 	stw	r3,0(r21)
   103c0:	003f5906 	br	10128 <__alt_data_end+0xf0010128>
   103c4:	94c00044 	addi	r19,r18,1
   103c8:	02000044 	movi	r8,1
   103cc:	003f6006 	br	10150 <__alt_data_end+0xf0010150>
   103d0:	00bfffc4 	movi	r2,-1
   103d4:	003f0306 	br	ffe4 <__alt_data_end+0xf000ffe4>
   103d8:	00800304 	movi	r2,12
   103dc:	a8800015 	stw	r2,0(r21)
   103e0:	8080030b 	ldhu	r2,12(r16)
   103e4:	003f5006 	br	10128 <__alt_data_end+0xf0010128>

000103e8 <_fwalk>:
   103e8:	defff704 	addi	sp,sp,-36
   103ec:	dd000415 	stw	r20,16(sp)
   103f0:	dfc00815 	stw	ra,32(sp)
   103f4:	ddc00715 	stw	r23,28(sp)
   103f8:	dd800615 	stw	r22,24(sp)
   103fc:	dd400515 	stw	r21,20(sp)
   10400:	dcc00315 	stw	r19,12(sp)
   10404:	dc800215 	stw	r18,8(sp)
   10408:	dc400115 	stw	r17,4(sp)
   1040c:	dc000015 	stw	r16,0(sp)
   10410:	2500b804 	addi	r20,r4,736
   10414:	a0002326 	beq	r20,zero,104a4 <_fwalk+0xbc>
   10418:	282b883a 	mov	r21,r5
   1041c:	002f883a 	mov	r23,zero
   10420:	05800044 	movi	r22,1
   10424:	04ffffc4 	movi	r19,-1
   10428:	a4400117 	ldw	r17,4(r20)
   1042c:	a4800217 	ldw	r18,8(r20)
   10430:	8c7fffc4 	addi	r17,r17,-1
   10434:	88000d16 	blt	r17,zero,1046c <_fwalk+0x84>
   10438:	94000304 	addi	r16,r18,12
   1043c:	94800384 	addi	r18,r18,14
   10440:	8080000b 	ldhu	r2,0(r16)
   10444:	8c7fffc4 	addi	r17,r17,-1
   10448:	813ffd04 	addi	r4,r16,-12
   1044c:	b080042e 	bgeu	r22,r2,10460 <_fwalk+0x78>
   10450:	9080000f 	ldh	r2,0(r18)
   10454:	14c00226 	beq	r2,r19,10460 <_fwalk+0x78>
   10458:	a83ee83a 	callr	r21
   1045c:	b8aeb03a 	or	r23,r23,r2
   10460:	84001a04 	addi	r16,r16,104
   10464:	94801a04 	addi	r18,r18,104
   10468:	8cfff51e 	bne	r17,r19,10440 <__alt_data_end+0xf0010440>
   1046c:	a5000017 	ldw	r20,0(r20)
   10470:	a03fed1e 	bne	r20,zero,10428 <__alt_data_end+0xf0010428>
   10474:	b805883a 	mov	r2,r23
   10478:	dfc00817 	ldw	ra,32(sp)
   1047c:	ddc00717 	ldw	r23,28(sp)
   10480:	dd800617 	ldw	r22,24(sp)
   10484:	dd400517 	ldw	r21,20(sp)
   10488:	dd000417 	ldw	r20,16(sp)
   1048c:	dcc00317 	ldw	r19,12(sp)
   10490:	dc800217 	ldw	r18,8(sp)
   10494:	dc400117 	ldw	r17,4(sp)
   10498:	dc000017 	ldw	r16,0(sp)
   1049c:	dec00904 	addi	sp,sp,36
   104a0:	f800283a 	ret
   104a4:	002f883a 	mov	r23,zero
   104a8:	003ff206 	br	10474 <__alt_data_end+0xf0010474>

000104ac <_fwalk_reent>:
   104ac:	defff704 	addi	sp,sp,-36
   104b0:	dd000415 	stw	r20,16(sp)
   104b4:	dfc00815 	stw	ra,32(sp)
   104b8:	ddc00715 	stw	r23,28(sp)
   104bc:	dd800615 	stw	r22,24(sp)
   104c0:	dd400515 	stw	r21,20(sp)
   104c4:	dcc00315 	stw	r19,12(sp)
   104c8:	dc800215 	stw	r18,8(sp)
   104cc:	dc400115 	stw	r17,4(sp)
   104d0:	dc000015 	stw	r16,0(sp)
   104d4:	2500b804 	addi	r20,r4,736
   104d8:	a0002326 	beq	r20,zero,10568 <_fwalk_reent+0xbc>
   104dc:	282b883a 	mov	r21,r5
   104e0:	2027883a 	mov	r19,r4
   104e4:	002f883a 	mov	r23,zero
   104e8:	05800044 	movi	r22,1
   104ec:	04bfffc4 	movi	r18,-1
   104f0:	a4400117 	ldw	r17,4(r20)
   104f4:	a4000217 	ldw	r16,8(r20)
   104f8:	8c7fffc4 	addi	r17,r17,-1
   104fc:	88000c16 	blt	r17,zero,10530 <_fwalk_reent+0x84>
   10500:	84000304 	addi	r16,r16,12
   10504:	8080000b 	ldhu	r2,0(r16)
   10508:	8c7fffc4 	addi	r17,r17,-1
   1050c:	817ffd04 	addi	r5,r16,-12
   10510:	b080052e 	bgeu	r22,r2,10528 <_fwalk_reent+0x7c>
   10514:	8080008f 	ldh	r2,2(r16)
   10518:	9809883a 	mov	r4,r19
   1051c:	14800226 	beq	r2,r18,10528 <_fwalk_reent+0x7c>
   10520:	a83ee83a 	callr	r21
   10524:	b8aeb03a 	or	r23,r23,r2
   10528:	84001a04 	addi	r16,r16,104
   1052c:	8cbff51e 	bne	r17,r18,10504 <__alt_data_end+0xf0010504>
   10530:	a5000017 	ldw	r20,0(r20)
   10534:	a03fee1e 	bne	r20,zero,104f0 <__alt_data_end+0xf00104f0>
   10538:	b805883a 	mov	r2,r23
   1053c:	dfc00817 	ldw	ra,32(sp)
   10540:	ddc00717 	ldw	r23,28(sp)
   10544:	dd800617 	ldw	r22,24(sp)
   10548:	dd400517 	ldw	r21,20(sp)
   1054c:	dd000417 	ldw	r20,16(sp)
   10550:	dcc00317 	ldw	r19,12(sp)
   10554:	dc800217 	ldw	r18,8(sp)
   10558:	dc400117 	ldw	r17,4(sp)
   1055c:	dc000017 	ldw	r16,0(sp)
   10560:	dec00904 	addi	sp,sp,36
   10564:	f800283a 	ret
   10568:	002f883a 	mov	r23,zero
   1056c:	003ff206 	br	10538 <__alt_data_end+0xf0010538>

00010570 <_setlocale_r>:
   10570:	30001b26 	beq	r6,zero,105e0 <_setlocale_r+0x70>
   10574:	01420034 	movhi	r5,2048
   10578:	defffe04 	addi	sp,sp,-8
   1057c:	2940f504 	addi	r5,r5,980
   10580:	3009883a 	mov	r4,r6
   10584:	dc000015 	stw	r16,0(sp)
   10588:	dfc00115 	stw	ra,4(sp)
   1058c:	3021883a 	mov	r16,r6
   10590:	00129b80 	call	129b8 <strcmp>
   10594:	1000061e 	bne	r2,zero,105b0 <_setlocale_r+0x40>
   10598:	00820034 	movhi	r2,2048
   1059c:	1080f404 	addi	r2,r2,976
   105a0:	dfc00117 	ldw	ra,4(sp)
   105a4:	dc000017 	ldw	r16,0(sp)
   105a8:	dec00204 	addi	sp,sp,8
   105ac:	f800283a 	ret
   105b0:	01420034 	movhi	r5,2048
   105b4:	2940f404 	addi	r5,r5,976
   105b8:	8009883a 	mov	r4,r16
   105bc:	00129b80 	call	129b8 <strcmp>
   105c0:	103ff526 	beq	r2,zero,10598 <__alt_data_end+0xf0010598>
   105c4:	01420034 	movhi	r5,2048
   105c8:	2940d704 	addi	r5,r5,860
   105cc:	8009883a 	mov	r4,r16
   105d0:	00129b80 	call	129b8 <strcmp>
   105d4:	103ff026 	beq	r2,zero,10598 <__alt_data_end+0xf0010598>
   105d8:	0005883a 	mov	r2,zero
   105dc:	003ff006 	br	105a0 <__alt_data_end+0xf00105a0>
   105e0:	00820034 	movhi	r2,2048
   105e4:	1080f404 	addi	r2,r2,976
   105e8:	f800283a 	ret

000105ec <__locale_charset>:
   105ec:	00820034 	movhi	r2,2048
   105f0:	1083cb04 	addi	r2,r2,3884
   105f4:	f800283a 	ret

000105f8 <__locale_mb_cur_max>:
   105f8:	00820034 	movhi	r2,2048
   105fc:	108b0304 	addi	r2,r2,11276
   10600:	10800017 	ldw	r2,0(r2)
   10604:	f800283a 	ret

00010608 <__locale_msgcharset>:
   10608:	00820034 	movhi	r2,2048
   1060c:	1083c304 	addi	r2,r2,3852
   10610:	f800283a 	ret

00010614 <__locale_cjk_lang>:
   10614:	0005883a 	mov	r2,zero
   10618:	f800283a 	ret

0001061c <_localeconv_r>:
   1061c:	00820034 	movhi	r2,2048
   10620:	1083d304 	addi	r2,r2,3916
   10624:	f800283a 	ret

00010628 <setlocale>:
   10628:	00820034 	movhi	r2,2048
   1062c:	108b0204 	addi	r2,r2,11272
   10630:	280d883a 	mov	r6,r5
   10634:	200b883a 	mov	r5,r4
   10638:	11000017 	ldw	r4,0(r2)
   1063c:	00105701 	jmpi	10570 <_setlocale_r>

00010640 <localeconv>:
   10640:	00820034 	movhi	r2,2048
   10644:	1083d304 	addi	r2,r2,3916
   10648:	f800283a 	ret

0001064c <__smakebuf_r>:
   1064c:	2880030b 	ldhu	r2,12(r5)
   10650:	10c0008c 	andi	r3,r2,2
   10654:	1800411e 	bne	r3,zero,1075c <__smakebuf_r+0x110>
   10658:	deffec04 	addi	sp,sp,-80
   1065c:	dc000f15 	stw	r16,60(sp)
   10660:	2821883a 	mov	r16,r5
   10664:	2940038f 	ldh	r5,14(r5)
   10668:	dc401015 	stw	r17,64(sp)
   1066c:	dfc01315 	stw	ra,76(sp)
   10670:	dcc01215 	stw	r19,72(sp)
   10674:	dc801115 	stw	r18,68(sp)
   10678:	2023883a 	mov	r17,r4
   1067c:	28001c16 	blt	r5,zero,106f0 <__smakebuf_r+0xa4>
   10680:	d80d883a 	mov	r6,sp
   10684:	001596c0 	call	1596c <_fstat_r>
   10688:	10001816 	blt	r2,zero,106ec <__smakebuf_r+0xa0>
   1068c:	d8800117 	ldw	r2,4(sp)
   10690:	00e00014 	movui	r3,32768
   10694:	10bc000c 	andi	r2,r2,61440
   10698:	14c80020 	cmpeqi	r19,r2,8192
   1069c:	10c03726 	beq	r2,r3,1077c <__smakebuf_r+0x130>
   106a0:	80c0030b 	ldhu	r3,12(r16)
   106a4:	18c20014 	ori	r3,r3,2048
   106a8:	80c0030d 	sth	r3,12(r16)
   106ac:	00c80004 	movi	r3,8192
   106b0:	10c0521e 	bne	r2,r3,107fc <__smakebuf_r+0x1b0>
   106b4:	8140038f 	ldh	r5,14(r16)
   106b8:	8809883a 	mov	r4,r17
   106bc:	00159c80 	call	159c8 <_isatty_r>
   106c0:	10004c26 	beq	r2,zero,107f4 <__smakebuf_r+0x1a8>
   106c4:	8080030b 	ldhu	r2,12(r16)
   106c8:	80c010c4 	addi	r3,r16,67
   106cc:	80c00015 	stw	r3,0(r16)
   106d0:	10800054 	ori	r2,r2,1
   106d4:	8080030d 	sth	r2,12(r16)
   106d8:	00800044 	movi	r2,1
   106dc:	80c00415 	stw	r3,16(r16)
   106e0:	80800515 	stw	r2,20(r16)
   106e4:	04810004 	movi	r18,1024
   106e8:	00000706 	br	10708 <__smakebuf_r+0xbc>
   106ec:	8080030b 	ldhu	r2,12(r16)
   106f0:	10c0200c 	andi	r3,r2,128
   106f4:	18001f1e 	bne	r3,zero,10774 <__smakebuf_r+0x128>
   106f8:	04810004 	movi	r18,1024
   106fc:	10820014 	ori	r2,r2,2048
   10700:	8080030d 	sth	r2,12(r16)
   10704:	0027883a 	mov	r19,zero
   10708:	900b883a 	mov	r5,r18
   1070c:	8809883a 	mov	r4,r17
   10710:	00108080 	call	10808 <_malloc_r>
   10714:	10002c26 	beq	r2,zero,107c8 <__smakebuf_r+0x17c>
   10718:	80c0030b 	ldhu	r3,12(r16)
   1071c:	01000074 	movhi	r4,1
   10720:	213dd804 	addi	r4,r4,-2208
   10724:	89000f15 	stw	r4,60(r17)
   10728:	18c02014 	ori	r3,r3,128
   1072c:	80c0030d 	sth	r3,12(r16)
   10730:	80800015 	stw	r2,0(r16)
   10734:	80800415 	stw	r2,16(r16)
   10738:	84800515 	stw	r18,20(r16)
   1073c:	98001a1e 	bne	r19,zero,107a8 <__smakebuf_r+0x15c>
   10740:	dfc01317 	ldw	ra,76(sp)
   10744:	dcc01217 	ldw	r19,72(sp)
   10748:	dc801117 	ldw	r18,68(sp)
   1074c:	dc401017 	ldw	r17,64(sp)
   10750:	dc000f17 	ldw	r16,60(sp)
   10754:	dec01404 	addi	sp,sp,80
   10758:	f800283a 	ret
   1075c:	288010c4 	addi	r2,r5,67
   10760:	28800015 	stw	r2,0(r5)
   10764:	28800415 	stw	r2,16(r5)
   10768:	00800044 	movi	r2,1
   1076c:	28800515 	stw	r2,20(r5)
   10770:	f800283a 	ret
   10774:	04801004 	movi	r18,64
   10778:	003fe006 	br	106fc <__alt_data_end+0xf00106fc>
   1077c:	81000a17 	ldw	r4,40(r16)
   10780:	00c00074 	movhi	r3,1
   10784:	18ca5504 	addi	r3,r3,10580
   10788:	20ffc51e 	bne	r4,r3,106a0 <__alt_data_end+0xf00106a0>
   1078c:	8080030b 	ldhu	r2,12(r16)
   10790:	04810004 	movi	r18,1024
   10794:	84801315 	stw	r18,76(r16)
   10798:	1484b03a 	or	r2,r2,r18
   1079c:	8080030d 	sth	r2,12(r16)
   107a0:	0027883a 	mov	r19,zero
   107a4:	003fd806 	br	10708 <__alt_data_end+0xf0010708>
   107a8:	8140038f 	ldh	r5,14(r16)
   107ac:	8809883a 	mov	r4,r17
   107b0:	00159c80 	call	159c8 <_isatty_r>
   107b4:	103fe226 	beq	r2,zero,10740 <__alt_data_end+0xf0010740>
   107b8:	8080030b 	ldhu	r2,12(r16)
   107bc:	10800054 	ori	r2,r2,1
   107c0:	8080030d 	sth	r2,12(r16)
   107c4:	003fde06 	br	10740 <__alt_data_end+0xf0010740>
   107c8:	8080030b 	ldhu	r2,12(r16)
   107cc:	10c0800c 	andi	r3,r2,512
   107d0:	183fdb1e 	bne	r3,zero,10740 <__alt_data_end+0xf0010740>
   107d4:	10800094 	ori	r2,r2,2
   107d8:	80c010c4 	addi	r3,r16,67
   107dc:	8080030d 	sth	r2,12(r16)
   107e0:	00800044 	movi	r2,1
   107e4:	80c00015 	stw	r3,0(r16)
   107e8:	80c00415 	stw	r3,16(r16)
   107ec:	80800515 	stw	r2,20(r16)
   107f0:	003fd306 	br	10740 <__alt_data_end+0xf0010740>
   107f4:	04810004 	movi	r18,1024
   107f8:	003fc306 	br	10708 <__alt_data_end+0xf0010708>
   107fc:	0027883a 	mov	r19,zero
   10800:	04810004 	movi	r18,1024
   10804:	003fc006 	br	10708 <__alt_data_end+0xf0010708>

00010808 <_malloc_r>:
   10808:	defff504 	addi	sp,sp,-44
   1080c:	dc800315 	stw	r18,12(sp)
   10810:	dfc00a15 	stw	ra,40(sp)
   10814:	df000915 	stw	fp,36(sp)
   10818:	ddc00815 	stw	r23,32(sp)
   1081c:	dd800715 	stw	r22,28(sp)
   10820:	dd400615 	stw	r21,24(sp)
   10824:	dd000515 	stw	r20,20(sp)
   10828:	dcc00415 	stw	r19,16(sp)
   1082c:	dc400215 	stw	r17,8(sp)
   10830:	dc000115 	stw	r16,4(sp)
   10834:	288002c4 	addi	r2,r5,11
   10838:	00c00584 	movi	r3,22
   1083c:	2025883a 	mov	r18,r4
   10840:	18807f2e 	bgeu	r3,r2,10a40 <_malloc_r+0x238>
   10844:	047ffe04 	movi	r17,-8
   10848:	1462703a 	and	r17,r2,r17
   1084c:	8800a316 	blt	r17,zero,10adc <_malloc_r+0x2d4>
   10850:	8940a236 	bltu	r17,r5,10adc <_malloc_r+0x2d4>
   10854:	001782c0 	call	1782c <__malloc_lock>
   10858:	00807dc4 	movi	r2,503
   1085c:	1441e92e 	bgeu	r2,r17,11004 <_malloc_r+0x7fc>
   10860:	8804d27a 	srli	r2,r17,9
   10864:	1000a126 	beq	r2,zero,10aec <_malloc_r+0x2e4>
   10868:	00c00104 	movi	r3,4
   1086c:	18811e36 	bltu	r3,r2,10ce8 <_malloc_r+0x4e0>
   10870:	8804d1ba 	srli	r2,r17,6
   10874:	12000e44 	addi	r8,r2,57
   10878:	11c00e04 	addi	r7,r2,56
   1087c:	4209883a 	add	r4,r8,r8
   10880:	04c20034 	movhi	r19,2048
   10884:	2109883a 	add	r4,r4,r4
   10888:	9cc3e104 	addi	r19,r19,3972
   1088c:	2109883a 	add	r4,r4,r4
   10890:	9909883a 	add	r4,r19,r4
   10894:	24000117 	ldw	r16,4(r4)
   10898:	213ffe04 	addi	r4,r4,-8
   1089c:	24009726 	beq	r4,r16,10afc <_malloc_r+0x2f4>
   108a0:	80800117 	ldw	r2,4(r16)
   108a4:	01bfff04 	movi	r6,-4
   108a8:	014003c4 	movi	r5,15
   108ac:	1184703a 	and	r2,r2,r6
   108b0:	1447c83a 	sub	r3,r2,r17
   108b4:	28c00716 	blt	r5,r3,108d4 <_malloc_r+0xcc>
   108b8:	1800920e 	bge	r3,zero,10b04 <_malloc_r+0x2fc>
   108bc:	84000317 	ldw	r16,12(r16)
   108c0:	24008e26 	beq	r4,r16,10afc <_malloc_r+0x2f4>
   108c4:	80800117 	ldw	r2,4(r16)
   108c8:	1184703a 	and	r2,r2,r6
   108cc:	1447c83a 	sub	r3,r2,r17
   108d0:	28fff90e 	bge	r5,r3,108b8 <__alt_data_end+0xf00108b8>
   108d4:	3809883a 	mov	r4,r7
   108d8:	01820034 	movhi	r6,2048
   108dc:	9c000417 	ldw	r16,16(r19)
   108e0:	3183e104 	addi	r6,r6,3972
   108e4:	32000204 	addi	r8,r6,8
   108e8:	82013426 	beq	r16,r8,10dbc <_malloc_r+0x5b4>
   108ec:	80c00117 	ldw	r3,4(r16)
   108f0:	00bfff04 	movi	r2,-4
   108f4:	188e703a 	and	r7,r3,r2
   108f8:	3c45c83a 	sub	r2,r7,r17
   108fc:	00c003c4 	movi	r3,15
   10900:	18811f16 	blt	r3,r2,10d80 <_malloc_r+0x578>
   10904:	32000515 	stw	r8,20(r6)
   10908:	32000415 	stw	r8,16(r6)
   1090c:	10007f0e 	bge	r2,zero,10b0c <_malloc_r+0x304>
   10910:	00807fc4 	movi	r2,511
   10914:	11c0fd36 	bltu	r2,r7,10d0c <_malloc_r+0x504>
   10918:	3806d0fa 	srli	r3,r7,3
   1091c:	01c00044 	movi	r7,1
   10920:	30800117 	ldw	r2,4(r6)
   10924:	19400044 	addi	r5,r3,1
   10928:	294b883a 	add	r5,r5,r5
   1092c:	1807d0ba 	srai	r3,r3,2
   10930:	294b883a 	add	r5,r5,r5
   10934:	294b883a 	add	r5,r5,r5
   10938:	298b883a 	add	r5,r5,r6
   1093c:	38c6983a 	sll	r3,r7,r3
   10940:	29c00017 	ldw	r7,0(r5)
   10944:	2a7ffe04 	addi	r9,r5,-8
   10948:	1886b03a 	or	r3,r3,r2
   1094c:	82400315 	stw	r9,12(r16)
   10950:	81c00215 	stw	r7,8(r16)
   10954:	30c00115 	stw	r3,4(r6)
   10958:	2c000015 	stw	r16,0(r5)
   1095c:	3c000315 	stw	r16,12(r7)
   10960:	2005d0ba 	srai	r2,r4,2
   10964:	01400044 	movi	r5,1
   10968:	288a983a 	sll	r5,r5,r2
   1096c:	19406f36 	bltu	r3,r5,10b2c <_malloc_r+0x324>
   10970:	28c4703a 	and	r2,r5,r3
   10974:	10000a1e 	bne	r2,zero,109a0 <_malloc_r+0x198>
   10978:	00bfff04 	movi	r2,-4
   1097c:	294b883a 	add	r5,r5,r5
   10980:	2088703a 	and	r4,r4,r2
   10984:	28c4703a 	and	r2,r5,r3
   10988:	21000104 	addi	r4,r4,4
   1098c:	1000041e 	bne	r2,zero,109a0 <_malloc_r+0x198>
   10990:	294b883a 	add	r5,r5,r5
   10994:	28c4703a 	and	r2,r5,r3
   10998:	21000104 	addi	r4,r4,4
   1099c:	103ffc26 	beq	r2,zero,10990 <__alt_data_end+0xf0010990>
   109a0:	02bfff04 	movi	r10,-4
   109a4:	024003c4 	movi	r9,15
   109a8:	21800044 	addi	r6,r4,1
   109ac:	318d883a 	add	r6,r6,r6
   109b0:	318d883a 	add	r6,r6,r6
   109b4:	318d883a 	add	r6,r6,r6
   109b8:	998d883a 	add	r6,r19,r6
   109bc:	333ffe04 	addi	r12,r6,-8
   109c0:	2017883a 	mov	r11,r4
   109c4:	31800104 	addi	r6,r6,4
   109c8:	34000017 	ldw	r16,0(r6)
   109cc:	31fffd04 	addi	r7,r6,-12
   109d0:	81c0041e 	bne	r16,r7,109e4 <_malloc_r+0x1dc>
   109d4:	0000fb06 	br	10dc4 <_malloc_r+0x5bc>
   109d8:	1801030e 	bge	r3,zero,10de8 <_malloc_r+0x5e0>
   109dc:	84000317 	ldw	r16,12(r16)
   109e0:	81c0f826 	beq	r16,r7,10dc4 <_malloc_r+0x5bc>
   109e4:	80800117 	ldw	r2,4(r16)
   109e8:	1284703a 	and	r2,r2,r10
   109ec:	1447c83a 	sub	r3,r2,r17
   109f0:	48fff90e 	bge	r9,r3,109d8 <__alt_data_end+0xf00109d8>
   109f4:	80800317 	ldw	r2,12(r16)
   109f8:	81000217 	ldw	r4,8(r16)
   109fc:	89400054 	ori	r5,r17,1
   10a00:	81400115 	stw	r5,4(r16)
   10a04:	20800315 	stw	r2,12(r4)
   10a08:	11000215 	stw	r4,8(r2)
   10a0c:	8463883a 	add	r17,r16,r17
   10a10:	9c400515 	stw	r17,20(r19)
   10a14:	9c400415 	stw	r17,16(r19)
   10a18:	18800054 	ori	r2,r3,1
   10a1c:	88800115 	stw	r2,4(r17)
   10a20:	8a000315 	stw	r8,12(r17)
   10a24:	8a000215 	stw	r8,8(r17)
   10a28:	88e3883a 	add	r17,r17,r3
   10a2c:	88c00015 	stw	r3,0(r17)
   10a30:	9009883a 	mov	r4,r18
   10a34:	00178500 	call	17850 <__malloc_unlock>
   10a38:	80800204 	addi	r2,r16,8
   10a3c:	00001b06 	br	10aac <_malloc_r+0x2a4>
   10a40:	04400404 	movi	r17,16
   10a44:	89402536 	bltu	r17,r5,10adc <_malloc_r+0x2d4>
   10a48:	001782c0 	call	1782c <__malloc_lock>
   10a4c:	00800184 	movi	r2,6
   10a50:	01000084 	movi	r4,2
   10a54:	04c20034 	movhi	r19,2048
   10a58:	1085883a 	add	r2,r2,r2
   10a5c:	9cc3e104 	addi	r19,r19,3972
   10a60:	1085883a 	add	r2,r2,r2
   10a64:	9885883a 	add	r2,r19,r2
   10a68:	14000117 	ldw	r16,4(r2)
   10a6c:	10fffe04 	addi	r3,r2,-8
   10a70:	80c0d926 	beq	r16,r3,10dd8 <_malloc_r+0x5d0>
   10a74:	80c00117 	ldw	r3,4(r16)
   10a78:	81000317 	ldw	r4,12(r16)
   10a7c:	00bfff04 	movi	r2,-4
   10a80:	1884703a 	and	r2,r3,r2
   10a84:	81400217 	ldw	r5,8(r16)
   10a88:	8085883a 	add	r2,r16,r2
   10a8c:	10c00117 	ldw	r3,4(r2)
   10a90:	29000315 	stw	r4,12(r5)
   10a94:	21400215 	stw	r5,8(r4)
   10a98:	18c00054 	ori	r3,r3,1
   10a9c:	10c00115 	stw	r3,4(r2)
   10aa0:	9009883a 	mov	r4,r18
   10aa4:	00178500 	call	17850 <__malloc_unlock>
   10aa8:	80800204 	addi	r2,r16,8
   10aac:	dfc00a17 	ldw	ra,40(sp)
   10ab0:	df000917 	ldw	fp,36(sp)
   10ab4:	ddc00817 	ldw	r23,32(sp)
   10ab8:	dd800717 	ldw	r22,28(sp)
   10abc:	dd400617 	ldw	r21,24(sp)
   10ac0:	dd000517 	ldw	r20,20(sp)
   10ac4:	dcc00417 	ldw	r19,16(sp)
   10ac8:	dc800317 	ldw	r18,12(sp)
   10acc:	dc400217 	ldw	r17,8(sp)
   10ad0:	dc000117 	ldw	r16,4(sp)
   10ad4:	dec00b04 	addi	sp,sp,44
   10ad8:	f800283a 	ret
   10adc:	00800304 	movi	r2,12
   10ae0:	90800015 	stw	r2,0(r18)
   10ae4:	0005883a 	mov	r2,zero
   10ae8:	003ff006 	br	10aac <__alt_data_end+0xf0010aac>
   10aec:	01002004 	movi	r4,128
   10af0:	02001004 	movi	r8,64
   10af4:	01c00fc4 	movi	r7,63
   10af8:	003f6106 	br	10880 <__alt_data_end+0xf0010880>
   10afc:	4009883a 	mov	r4,r8
   10b00:	003f7506 	br	108d8 <__alt_data_end+0xf00108d8>
   10b04:	81000317 	ldw	r4,12(r16)
   10b08:	003fde06 	br	10a84 <__alt_data_end+0xf0010a84>
   10b0c:	81c5883a 	add	r2,r16,r7
   10b10:	11400117 	ldw	r5,4(r2)
   10b14:	9009883a 	mov	r4,r18
   10b18:	29400054 	ori	r5,r5,1
   10b1c:	11400115 	stw	r5,4(r2)
   10b20:	00178500 	call	17850 <__malloc_unlock>
   10b24:	80800204 	addi	r2,r16,8
   10b28:	003fe006 	br	10aac <__alt_data_end+0xf0010aac>
   10b2c:	9c000217 	ldw	r16,8(r19)
   10b30:	00bfff04 	movi	r2,-4
   10b34:	85800117 	ldw	r22,4(r16)
   10b38:	b0ac703a 	and	r22,r22,r2
   10b3c:	b4400336 	bltu	r22,r17,10b4c <_malloc_r+0x344>
   10b40:	b445c83a 	sub	r2,r22,r17
   10b44:	00c003c4 	movi	r3,15
   10b48:	18805d16 	blt	r3,r2,10cc0 <_malloc_r+0x4b8>
   10b4c:	05c20034 	movhi	r23,2048
   10b50:	00820034 	movhi	r2,2048
   10b54:	108b4b04 	addi	r2,r2,11564
   10b58:	bdcb0404 	addi	r23,r23,11280
   10b5c:	15400017 	ldw	r21,0(r2)
   10b60:	b8c00017 	ldw	r3,0(r23)
   10b64:	00bfffc4 	movi	r2,-1
   10b68:	858d883a 	add	r6,r16,r22
   10b6c:	8d6b883a 	add	r21,r17,r21
   10b70:	1880ea26 	beq	r3,r2,10f1c <_malloc_r+0x714>
   10b74:	ad4403c4 	addi	r21,r21,4111
   10b78:	00bc0004 	movi	r2,-4096
   10b7c:	a8aa703a 	and	r21,r21,r2
   10b80:	a80b883a 	mov	r5,r21
   10b84:	9009883a 	mov	r4,r18
   10b88:	d9800015 	stw	r6,0(sp)
   10b8c:	00128280 	call	12828 <_sbrk_r>
   10b90:	1029883a 	mov	r20,r2
   10b94:	00bfffc4 	movi	r2,-1
   10b98:	d9800017 	ldw	r6,0(sp)
   10b9c:	a080e826 	beq	r20,r2,10f40 <_malloc_r+0x738>
   10ba0:	a180a636 	bltu	r20,r6,10e3c <_malloc_r+0x634>
   10ba4:	07020234 	movhi	fp,2056
   10ba8:	e73fc704 	addi	fp,fp,-228
   10bac:	e0800017 	ldw	r2,0(fp)
   10bb0:	a887883a 	add	r3,r21,r2
   10bb4:	e0c00015 	stw	r3,0(fp)
   10bb8:	3500e626 	beq	r6,r20,10f54 <_malloc_r+0x74c>
   10bbc:	b9000017 	ldw	r4,0(r23)
   10bc0:	00bfffc4 	movi	r2,-1
   10bc4:	2080ee26 	beq	r4,r2,10f80 <_malloc_r+0x778>
   10bc8:	a185c83a 	sub	r2,r20,r6
   10bcc:	10c5883a 	add	r2,r2,r3
   10bd0:	e0800015 	stw	r2,0(fp)
   10bd4:	a0c001cc 	andi	r3,r20,7
   10bd8:	1800bc26 	beq	r3,zero,10ecc <_malloc_r+0x6c4>
   10bdc:	a0e9c83a 	sub	r20,r20,r3
   10be0:	00840204 	movi	r2,4104
   10be4:	a5000204 	addi	r20,r20,8
   10be8:	10c7c83a 	sub	r3,r2,r3
   10bec:	a545883a 	add	r2,r20,r21
   10bf0:	1083ffcc 	andi	r2,r2,4095
   10bf4:	18abc83a 	sub	r21,r3,r2
   10bf8:	a80b883a 	mov	r5,r21
   10bfc:	9009883a 	mov	r4,r18
   10c00:	00128280 	call	12828 <_sbrk_r>
   10c04:	00ffffc4 	movi	r3,-1
   10c08:	10c0e126 	beq	r2,r3,10f90 <_malloc_r+0x788>
   10c0c:	1505c83a 	sub	r2,r2,r20
   10c10:	1545883a 	add	r2,r2,r21
   10c14:	10800054 	ori	r2,r2,1
   10c18:	e0c00017 	ldw	r3,0(fp)
   10c1c:	9d000215 	stw	r20,8(r19)
   10c20:	a0800115 	stw	r2,4(r20)
   10c24:	a8c7883a 	add	r3,r21,r3
   10c28:	e0c00015 	stw	r3,0(fp)
   10c2c:	84c00e26 	beq	r16,r19,10c68 <_malloc_r+0x460>
   10c30:	018003c4 	movi	r6,15
   10c34:	3580a72e 	bgeu	r6,r22,10ed4 <_malloc_r+0x6cc>
   10c38:	81400117 	ldw	r5,4(r16)
   10c3c:	013ffe04 	movi	r4,-8
   10c40:	b0bffd04 	addi	r2,r22,-12
   10c44:	1104703a 	and	r2,r2,r4
   10c48:	2900004c 	andi	r4,r5,1
   10c4c:	2088b03a 	or	r4,r4,r2
   10c50:	81000115 	stw	r4,4(r16)
   10c54:	01400144 	movi	r5,5
   10c58:	8089883a 	add	r4,r16,r2
   10c5c:	21400115 	stw	r5,4(r4)
   10c60:	21400215 	stw	r5,8(r4)
   10c64:	3080cd36 	bltu	r6,r2,10f9c <_malloc_r+0x794>
   10c68:	00820034 	movhi	r2,2048
   10c6c:	108b4a04 	addi	r2,r2,11560
   10c70:	11000017 	ldw	r4,0(r2)
   10c74:	20c0012e 	bgeu	r4,r3,10c7c <_malloc_r+0x474>
   10c78:	10c00015 	stw	r3,0(r2)
   10c7c:	00820034 	movhi	r2,2048
   10c80:	108b4904 	addi	r2,r2,11556
   10c84:	11000017 	ldw	r4,0(r2)
   10c88:	9c000217 	ldw	r16,8(r19)
   10c8c:	20c0012e 	bgeu	r4,r3,10c94 <_malloc_r+0x48c>
   10c90:	10c00015 	stw	r3,0(r2)
   10c94:	80c00117 	ldw	r3,4(r16)
   10c98:	00bfff04 	movi	r2,-4
   10c9c:	1886703a 	and	r3,r3,r2
   10ca0:	1c45c83a 	sub	r2,r3,r17
   10ca4:	1c400236 	bltu	r3,r17,10cb0 <_malloc_r+0x4a8>
   10ca8:	00c003c4 	movi	r3,15
   10cac:	18800416 	blt	r3,r2,10cc0 <_malloc_r+0x4b8>
   10cb0:	9009883a 	mov	r4,r18
   10cb4:	00178500 	call	17850 <__malloc_unlock>
   10cb8:	0005883a 	mov	r2,zero
   10cbc:	003f7b06 	br	10aac <__alt_data_end+0xf0010aac>
   10cc0:	88c00054 	ori	r3,r17,1
   10cc4:	80c00115 	stw	r3,4(r16)
   10cc8:	8463883a 	add	r17,r16,r17
   10ccc:	10800054 	ori	r2,r2,1
   10cd0:	9c400215 	stw	r17,8(r19)
   10cd4:	88800115 	stw	r2,4(r17)
   10cd8:	9009883a 	mov	r4,r18
   10cdc:	00178500 	call	17850 <__malloc_unlock>
   10ce0:	80800204 	addi	r2,r16,8
   10ce4:	003f7106 	br	10aac <__alt_data_end+0xf0010aac>
   10ce8:	00c00504 	movi	r3,20
   10cec:	18804a2e 	bgeu	r3,r2,10e18 <_malloc_r+0x610>
   10cf0:	00c01504 	movi	r3,84
   10cf4:	18806e36 	bltu	r3,r2,10eb0 <_malloc_r+0x6a8>
   10cf8:	8804d33a 	srli	r2,r17,12
   10cfc:	12001bc4 	addi	r8,r2,111
   10d00:	11c01b84 	addi	r7,r2,110
   10d04:	4209883a 	add	r4,r8,r8
   10d08:	003edd06 	br	10880 <__alt_data_end+0xf0010880>
   10d0c:	3804d27a 	srli	r2,r7,9
   10d10:	00c00104 	movi	r3,4
   10d14:	1880442e 	bgeu	r3,r2,10e28 <_malloc_r+0x620>
   10d18:	00c00504 	movi	r3,20
   10d1c:	18808136 	bltu	r3,r2,10f24 <_malloc_r+0x71c>
   10d20:	11401704 	addi	r5,r2,92
   10d24:	10c016c4 	addi	r3,r2,91
   10d28:	294b883a 	add	r5,r5,r5
   10d2c:	294b883a 	add	r5,r5,r5
   10d30:	294b883a 	add	r5,r5,r5
   10d34:	994b883a 	add	r5,r19,r5
   10d38:	28800017 	ldw	r2,0(r5)
   10d3c:	01820034 	movhi	r6,2048
   10d40:	297ffe04 	addi	r5,r5,-8
   10d44:	3183e104 	addi	r6,r6,3972
   10d48:	28806526 	beq	r5,r2,10ee0 <_malloc_r+0x6d8>
   10d4c:	01bfff04 	movi	r6,-4
   10d50:	10c00117 	ldw	r3,4(r2)
   10d54:	1986703a 	and	r3,r3,r6
   10d58:	38c0022e 	bgeu	r7,r3,10d64 <_malloc_r+0x55c>
   10d5c:	10800217 	ldw	r2,8(r2)
   10d60:	28bffb1e 	bne	r5,r2,10d50 <__alt_data_end+0xf0010d50>
   10d64:	11400317 	ldw	r5,12(r2)
   10d68:	98c00117 	ldw	r3,4(r19)
   10d6c:	81400315 	stw	r5,12(r16)
   10d70:	80800215 	stw	r2,8(r16)
   10d74:	2c000215 	stw	r16,8(r5)
   10d78:	14000315 	stw	r16,12(r2)
   10d7c:	003ef806 	br	10960 <__alt_data_end+0xf0010960>
   10d80:	88c00054 	ori	r3,r17,1
   10d84:	80c00115 	stw	r3,4(r16)
   10d88:	8463883a 	add	r17,r16,r17
   10d8c:	34400515 	stw	r17,20(r6)
   10d90:	34400415 	stw	r17,16(r6)
   10d94:	10c00054 	ori	r3,r2,1
   10d98:	8a000315 	stw	r8,12(r17)
   10d9c:	8a000215 	stw	r8,8(r17)
   10da0:	88c00115 	stw	r3,4(r17)
   10da4:	88a3883a 	add	r17,r17,r2
   10da8:	88800015 	stw	r2,0(r17)
   10dac:	9009883a 	mov	r4,r18
   10db0:	00178500 	call	17850 <__malloc_unlock>
   10db4:	80800204 	addi	r2,r16,8
   10db8:	003f3c06 	br	10aac <__alt_data_end+0xf0010aac>
   10dbc:	30c00117 	ldw	r3,4(r6)
   10dc0:	003ee706 	br	10960 <__alt_data_end+0xf0010960>
   10dc4:	5ac00044 	addi	r11,r11,1
   10dc8:	588000cc 	andi	r2,r11,3
   10dcc:	31800204 	addi	r6,r6,8
   10dd0:	103efd1e 	bne	r2,zero,109c8 <__alt_data_end+0xf00109c8>
   10dd4:	00002406 	br	10e68 <_malloc_r+0x660>
   10dd8:	14000317 	ldw	r16,12(r2)
   10ddc:	143f251e 	bne	r2,r16,10a74 <__alt_data_end+0xf0010a74>
   10de0:	21000084 	addi	r4,r4,2
   10de4:	003ebc06 	br	108d8 <__alt_data_end+0xf00108d8>
   10de8:	8085883a 	add	r2,r16,r2
   10dec:	10c00117 	ldw	r3,4(r2)
   10df0:	81000317 	ldw	r4,12(r16)
   10df4:	81400217 	ldw	r5,8(r16)
   10df8:	18c00054 	ori	r3,r3,1
   10dfc:	10c00115 	stw	r3,4(r2)
   10e00:	29000315 	stw	r4,12(r5)
   10e04:	21400215 	stw	r5,8(r4)
   10e08:	9009883a 	mov	r4,r18
   10e0c:	00178500 	call	17850 <__malloc_unlock>
   10e10:	80800204 	addi	r2,r16,8
   10e14:	003f2506 	br	10aac <__alt_data_end+0xf0010aac>
   10e18:	12001704 	addi	r8,r2,92
   10e1c:	11c016c4 	addi	r7,r2,91
   10e20:	4209883a 	add	r4,r8,r8
   10e24:	003e9606 	br	10880 <__alt_data_end+0xf0010880>
   10e28:	3804d1ba 	srli	r2,r7,6
   10e2c:	11400e44 	addi	r5,r2,57
   10e30:	10c00e04 	addi	r3,r2,56
   10e34:	294b883a 	add	r5,r5,r5
   10e38:	003fbc06 	br	10d2c <__alt_data_end+0xf0010d2c>
   10e3c:	84ff5926 	beq	r16,r19,10ba4 <__alt_data_end+0xf0010ba4>
   10e40:	00820034 	movhi	r2,2048
   10e44:	1083e104 	addi	r2,r2,3972
   10e48:	14000217 	ldw	r16,8(r2)
   10e4c:	00bfff04 	movi	r2,-4
   10e50:	80c00117 	ldw	r3,4(r16)
   10e54:	1886703a 	and	r3,r3,r2
   10e58:	003f9106 	br	10ca0 <__alt_data_end+0xf0010ca0>
   10e5c:	60800217 	ldw	r2,8(r12)
   10e60:	213fffc4 	addi	r4,r4,-1
   10e64:	1300651e 	bne	r2,r12,10ffc <_malloc_r+0x7f4>
   10e68:	208000cc 	andi	r2,r4,3
   10e6c:	633ffe04 	addi	r12,r12,-8
   10e70:	103ffa1e 	bne	r2,zero,10e5c <__alt_data_end+0xf0010e5c>
   10e74:	98800117 	ldw	r2,4(r19)
   10e78:	0146303a 	nor	r3,zero,r5
   10e7c:	1884703a 	and	r2,r3,r2
   10e80:	98800115 	stw	r2,4(r19)
   10e84:	294b883a 	add	r5,r5,r5
   10e88:	117f2836 	bltu	r2,r5,10b2c <__alt_data_end+0xf0010b2c>
   10e8c:	283f2726 	beq	r5,zero,10b2c <__alt_data_end+0xf0010b2c>
   10e90:	2886703a 	and	r3,r5,r2
   10e94:	5809883a 	mov	r4,r11
   10e98:	183ec31e 	bne	r3,zero,109a8 <__alt_data_end+0xf00109a8>
   10e9c:	294b883a 	add	r5,r5,r5
   10ea0:	2886703a 	and	r3,r5,r2
   10ea4:	21000104 	addi	r4,r4,4
   10ea8:	183ffc26 	beq	r3,zero,10e9c <__alt_data_end+0xf0010e9c>
   10eac:	003ebe06 	br	109a8 <__alt_data_end+0xf00109a8>
   10eb0:	00c05504 	movi	r3,340
   10eb4:	18801236 	bltu	r3,r2,10f00 <_malloc_r+0x6f8>
   10eb8:	8804d3fa 	srli	r2,r17,15
   10ebc:	12001e04 	addi	r8,r2,120
   10ec0:	11c01dc4 	addi	r7,r2,119
   10ec4:	4209883a 	add	r4,r8,r8
   10ec8:	003e6d06 	br	10880 <__alt_data_end+0xf0010880>
   10ecc:	00c40004 	movi	r3,4096
   10ed0:	003f4606 	br	10bec <__alt_data_end+0xf0010bec>
   10ed4:	00800044 	movi	r2,1
   10ed8:	a0800115 	stw	r2,4(r20)
   10edc:	003f7406 	br	10cb0 <__alt_data_end+0xf0010cb0>
   10ee0:	1805d0ba 	srai	r2,r3,2
   10ee4:	01c00044 	movi	r7,1
   10ee8:	30c00117 	ldw	r3,4(r6)
   10eec:	388e983a 	sll	r7,r7,r2
   10ef0:	2805883a 	mov	r2,r5
   10ef4:	38c6b03a 	or	r3,r7,r3
   10ef8:	30c00115 	stw	r3,4(r6)
   10efc:	003f9b06 	br	10d6c <__alt_data_end+0xf0010d6c>
   10f00:	00c15504 	movi	r3,1364
   10f04:	18801a36 	bltu	r3,r2,10f70 <_malloc_r+0x768>
   10f08:	8804d4ba 	srli	r2,r17,18
   10f0c:	12001f44 	addi	r8,r2,125
   10f10:	11c01f04 	addi	r7,r2,124
   10f14:	4209883a 	add	r4,r8,r8
   10f18:	003e5906 	br	10880 <__alt_data_end+0xf0010880>
   10f1c:	ad400404 	addi	r21,r21,16
   10f20:	003f1706 	br	10b80 <__alt_data_end+0xf0010b80>
   10f24:	00c01504 	movi	r3,84
   10f28:	18802336 	bltu	r3,r2,10fb8 <_malloc_r+0x7b0>
   10f2c:	3804d33a 	srli	r2,r7,12
   10f30:	11401bc4 	addi	r5,r2,111
   10f34:	10c01b84 	addi	r3,r2,110
   10f38:	294b883a 	add	r5,r5,r5
   10f3c:	003f7b06 	br	10d2c <__alt_data_end+0xf0010d2c>
   10f40:	9c000217 	ldw	r16,8(r19)
   10f44:	00bfff04 	movi	r2,-4
   10f48:	80c00117 	ldw	r3,4(r16)
   10f4c:	1886703a 	and	r3,r3,r2
   10f50:	003f5306 	br	10ca0 <__alt_data_end+0xf0010ca0>
   10f54:	3083ffcc 	andi	r2,r6,4095
   10f58:	103f181e 	bne	r2,zero,10bbc <__alt_data_end+0xf0010bbc>
   10f5c:	99000217 	ldw	r4,8(r19)
   10f60:	b545883a 	add	r2,r22,r21
   10f64:	10800054 	ori	r2,r2,1
   10f68:	20800115 	stw	r2,4(r4)
   10f6c:	003f3e06 	br	10c68 <__alt_data_end+0xf0010c68>
   10f70:	01003f84 	movi	r4,254
   10f74:	02001fc4 	movi	r8,127
   10f78:	01c01f84 	movi	r7,126
   10f7c:	003e4006 	br	10880 <__alt_data_end+0xf0010880>
   10f80:	00820034 	movhi	r2,2048
   10f84:	108b0404 	addi	r2,r2,11280
   10f88:	15000015 	stw	r20,0(r2)
   10f8c:	003f1106 	br	10bd4 <__alt_data_end+0xf0010bd4>
   10f90:	00800044 	movi	r2,1
   10f94:	002b883a 	mov	r21,zero
   10f98:	003f1f06 	br	10c18 <__alt_data_end+0xf0010c18>
   10f9c:	81400204 	addi	r5,r16,8
   10fa0:	9009883a 	mov	r4,r18
   10fa4:	000fc1c0 	call	fc1c <_free_r>
   10fa8:	00820234 	movhi	r2,2056
   10fac:	10bfc704 	addi	r2,r2,-228
   10fb0:	10c00017 	ldw	r3,0(r2)
   10fb4:	003f2c06 	br	10c68 <__alt_data_end+0xf0010c68>
   10fb8:	00c05504 	movi	r3,340
   10fbc:	18800536 	bltu	r3,r2,10fd4 <_malloc_r+0x7cc>
   10fc0:	3804d3fa 	srli	r2,r7,15
   10fc4:	11401e04 	addi	r5,r2,120
   10fc8:	10c01dc4 	addi	r3,r2,119
   10fcc:	294b883a 	add	r5,r5,r5
   10fd0:	003f5606 	br	10d2c <__alt_data_end+0xf0010d2c>
   10fd4:	00c15504 	movi	r3,1364
   10fd8:	18800536 	bltu	r3,r2,10ff0 <_malloc_r+0x7e8>
   10fdc:	3804d4ba 	srli	r2,r7,18
   10fe0:	11401f44 	addi	r5,r2,125
   10fe4:	10c01f04 	addi	r3,r2,124
   10fe8:	294b883a 	add	r5,r5,r5
   10fec:	003f4f06 	br	10d2c <__alt_data_end+0xf0010d2c>
   10ff0:	01403f84 	movi	r5,254
   10ff4:	00c01f84 	movi	r3,126
   10ff8:	003f4c06 	br	10d2c <__alt_data_end+0xf0010d2c>
   10ffc:	98800117 	ldw	r2,4(r19)
   11000:	003fa006 	br	10e84 <__alt_data_end+0xf0010e84>
   11004:	8808d0fa 	srli	r4,r17,3
   11008:	20800044 	addi	r2,r4,1
   1100c:	1085883a 	add	r2,r2,r2
   11010:	003e9006 	br	10a54 <__alt_data_end+0xf0010a54>

00011014 <memchr>:
   11014:	208000cc 	andi	r2,r4,3
   11018:	280f883a 	mov	r7,r5
   1101c:	10003426 	beq	r2,zero,110f0 <memchr+0xdc>
   11020:	30bfffc4 	addi	r2,r6,-1
   11024:	30001a26 	beq	r6,zero,11090 <memchr+0x7c>
   11028:	20c00003 	ldbu	r3,0(r4)
   1102c:	29803fcc 	andi	r6,r5,255
   11030:	30c0051e 	bne	r6,r3,11048 <memchr+0x34>
   11034:	00001806 	br	11098 <memchr+0x84>
   11038:	10001526 	beq	r2,zero,11090 <memchr+0x7c>
   1103c:	20c00003 	ldbu	r3,0(r4)
   11040:	10bfffc4 	addi	r2,r2,-1
   11044:	30c01426 	beq	r6,r3,11098 <memchr+0x84>
   11048:	21000044 	addi	r4,r4,1
   1104c:	20c000cc 	andi	r3,r4,3
   11050:	183ff91e 	bne	r3,zero,11038 <__alt_data_end+0xf0011038>
   11054:	020000c4 	movi	r8,3
   11058:	40801136 	bltu	r8,r2,110a0 <memchr+0x8c>
   1105c:	10000c26 	beq	r2,zero,11090 <memchr+0x7c>
   11060:	20c00003 	ldbu	r3,0(r4)
   11064:	29403fcc 	andi	r5,r5,255
   11068:	28c00b26 	beq	r5,r3,11098 <memchr+0x84>
   1106c:	20c00044 	addi	r3,r4,1
   11070:	39803fcc 	andi	r6,r7,255
   11074:	2089883a 	add	r4,r4,r2
   11078:	00000306 	br	11088 <memchr+0x74>
   1107c:	18c00044 	addi	r3,r3,1
   11080:	197fffc3 	ldbu	r5,-1(r3)
   11084:	31400526 	beq	r6,r5,1109c <memchr+0x88>
   11088:	1805883a 	mov	r2,r3
   1108c:	20fffb1e 	bne	r4,r3,1107c <__alt_data_end+0xf001107c>
   11090:	0005883a 	mov	r2,zero
   11094:	f800283a 	ret
   11098:	2005883a 	mov	r2,r4
   1109c:	f800283a 	ret
   110a0:	28c03fcc 	andi	r3,r5,255
   110a4:	1812923a 	slli	r9,r3,8
   110a8:	02ffbff4 	movhi	r11,65279
   110ac:	02a02074 	movhi	r10,32897
   110b0:	48d2b03a 	or	r9,r9,r3
   110b4:	4806943a 	slli	r3,r9,16
   110b8:	5affbfc4 	addi	r11,r11,-257
   110bc:	52a02004 	addi	r10,r10,-32640
   110c0:	48d2b03a 	or	r9,r9,r3
   110c4:	20c00017 	ldw	r3,0(r4)
   110c8:	48c6f03a 	xor	r3,r9,r3
   110cc:	1acd883a 	add	r6,r3,r11
   110d0:	00c6303a 	nor	r3,zero,r3
   110d4:	30c6703a 	and	r3,r6,r3
   110d8:	1a86703a 	and	r3,r3,r10
   110dc:	183fe01e 	bne	r3,zero,11060 <__alt_data_end+0xf0011060>
   110e0:	10bfff04 	addi	r2,r2,-4
   110e4:	21000104 	addi	r4,r4,4
   110e8:	40bff636 	bltu	r8,r2,110c4 <__alt_data_end+0xf00110c4>
   110ec:	003fdb06 	br	1105c <__alt_data_end+0xf001105c>
   110f0:	3005883a 	mov	r2,r6
   110f4:	003fd706 	br	11054 <__alt_data_end+0xf0011054>

000110f8 <memmove>:
   110f8:	2005883a 	mov	r2,r4
   110fc:	29000b2e 	bgeu	r5,r4,1112c <memmove+0x34>
   11100:	298f883a 	add	r7,r5,r6
   11104:	21c0092e 	bgeu	r4,r7,1112c <memmove+0x34>
   11108:	2187883a 	add	r3,r4,r6
   1110c:	198bc83a 	sub	r5,r3,r6
   11110:	30004826 	beq	r6,zero,11234 <memmove+0x13c>
   11114:	39ffffc4 	addi	r7,r7,-1
   11118:	39000003 	ldbu	r4,0(r7)
   1111c:	18ffffc4 	addi	r3,r3,-1
   11120:	19000005 	stb	r4,0(r3)
   11124:	28fffb1e 	bne	r5,r3,11114 <__alt_data_end+0xf0011114>
   11128:	f800283a 	ret
   1112c:	00c003c4 	movi	r3,15
   11130:	1980412e 	bgeu	r3,r6,11238 <memmove+0x140>
   11134:	2886b03a 	or	r3,r5,r2
   11138:	18c000cc 	andi	r3,r3,3
   1113c:	1800401e 	bne	r3,zero,11240 <memmove+0x148>
   11140:	33fffc04 	addi	r15,r6,-16
   11144:	781ed13a 	srli	r15,r15,4
   11148:	28c00104 	addi	r3,r5,4
   1114c:	13400104 	addi	r13,r2,4
   11150:	781c913a 	slli	r14,r15,4
   11154:	2b000204 	addi	r12,r5,8
   11158:	12c00204 	addi	r11,r2,8
   1115c:	73800504 	addi	r14,r14,20
   11160:	2a800304 	addi	r10,r5,12
   11164:	12400304 	addi	r9,r2,12
   11168:	2b9d883a 	add	r14,r5,r14
   1116c:	2811883a 	mov	r8,r5
   11170:	100f883a 	mov	r7,r2
   11174:	41000017 	ldw	r4,0(r8)
   11178:	39c00404 	addi	r7,r7,16
   1117c:	18c00404 	addi	r3,r3,16
   11180:	393ffc15 	stw	r4,-16(r7)
   11184:	193ffc17 	ldw	r4,-16(r3)
   11188:	6b400404 	addi	r13,r13,16
   1118c:	5ac00404 	addi	r11,r11,16
   11190:	693ffc15 	stw	r4,-16(r13)
   11194:	61000017 	ldw	r4,0(r12)
   11198:	4a400404 	addi	r9,r9,16
   1119c:	42000404 	addi	r8,r8,16
   111a0:	593ffc15 	stw	r4,-16(r11)
   111a4:	51000017 	ldw	r4,0(r10)
   111a8:	63000404 	addi	r12,r12,16
   111ac:	52800404 	addi	r10,r10,16
   111b0:	493ffc15 	stw	r4,-16(r9)
   111b4:	1bbfef1e 	bne	r3,r14,11174 <__alt_data_end+0xf0011174>
   111b8:	79000044 	addi	r4,r15,1
   111bc:	2008913a 	slli	r4,r4,4
   111c0:	328003cc 	andi	r10,r6,15
   111c4:	02c000c4 	movi	r11,3
   111c8:	1107883a 	add	r3,r2,r4
   111cc:	290b883a 	add	r5,r5,r4
   111d0:	5a801e2e 	bgeu	r11,r10,1124c <memmove+0x154>
   111d4:	1813883a 	mov	r9,r3
   111d8:	2811883a 	mov	r8,r5
   111dc:	500f883a 	mov	r7,r10
   111e0:	41000017 	ldw	r4,0(r8)
   111e4:	4a400104 	addi	r9,r9,4
   111e8:	39ffff04 	addi	r7,r7,-4
   111ec:	493fff15 	stw	r4,-4(r9)
   111f0:	42000104 	addi	r8,r8,4
   111f4:	59fffa36 	bltu	r11,r7,111e0 <__alt_data_end+0xf00111e0>
   111f8:	513fff04 	addi	r4,r10,-4
   111fc:	2008d0ba 	srli	r4,r4,2
   11200:	318000cc 	andi	r6,r6,3
   11204:	21000044 	addi	r4,r4,1
   11208:	2109883a 	add	r4,r4,r4
   1120c:	2109883a 	add	r4,r4,r4
   11210:	1907883a 	add	r3,r3,r4
   11214:	290b883a 	add	r5,r5,r4
   11218:	30000b26 	beq	r6,zero,11248 <memmove+0x150>
   1121c:	198d883a 	add	r6,r3,r6
   11220:	29c00003 	ldbu	r7,0(r5)
   11224:	18c00044 	addi	r3,r3,1
   11228:	29400044 	addi	r5,r5,1
   1122c:	19ffffc5 	stb	r7,-1(r3)
   11230:	19bffb1e 	bne	r3,r6,11220 <__alt_data_end+0xf0011220>
   11234:	f800283a 	ret
   11238:	1007883a 	mov	r3,r2
   1123c:	003ff606 	br	11218 <__alt_data_end+0xf0011218>
   11240:	1007883a 	mov	r3,r2
   11244:	003ff506 	br	1121c <__alt_data_end+0xf001121c>
   11248:	f800283a 	ret
   1124c:	500d883a 	mov	r6,r10
   11250:	003ff106 	br	11218 <__alt_data_end+0xf0011218>

00011254 <_Balloc>:
   11254:	20801317 	ldw	r2,76(r4)
   11258:	defffc04 	addi	sp,sp,-16
   1125c:	dc400115 	stw	r17,4(sp)
   11260:	dc000015 	stw	r16,0(sp)
   11264:	dfc00315 	stw	ra,12(sp)
   11268:	dc800215 	stw	r18,8(sp)
   1126c:	2023883a 	mov	r17,r4
   11270:	2821883a 	mov	r16,r5
   11274:	10000f26 	beq	r2,zero,112b4 <_Balloc+0x60>
   11278:	8407883a 	add	r3,r16,r16
   1127c:	18c7883a 	add	r3,r3,r3
   11280:	10c7883a 	add	r3,r2,r3
   11284:	18800017 	ldw	r2,0(r3)
   11288:	10001126 	beq	r2,zero,112d0 <_Balloc+0x7c>
   1128c:	11000017 	ldw	r4,0(r2)
   11290:	19000015 	stw	r4,0(r3)
   11294:	10000415 	stw	zero,16(r2)
   11298:	10000315 	stw	zero,12(r2)
   1129c:	dfc00317 	ldw	ra,12(sp)
   112a0:	dc800217 	ldw	r18,8(sp)
   112a4:	dc400117 	ldw	r17,4(sp)
   112a8:	dc000017 	ldw	r16,0(sp)
   112ac:	dec00404 	addi	sp,sp,16
   112b0:	f800283a 	ret
   112b4:	01800844 	movi	r6,33
   112b8:	01400104 	movi	r5,4
   112bc:	001559c0 	call	1559c <_calloc_r>
   112c0:	88801315 	stw	r2,76(r17)
   112c4:	103fec1e 	bne	r2,zero,11278 <__alt_data_end+0xf0011278>
   112c8:	0005883a 	mov	r2,zero
   112cc:	003ff306 	br	1129c <__alt_data_end+0xf001129c>
   112d0:	01400044 	movi	r5,1
   112d4:	2c24983a 	sll	r18,r5,r16
   112d8:	8809883a 	mov	r4,r17
   112dc:	91800144 	addi	r6,r18,5
   112e0:	318d883a 	add	r6,r6,r6
   112e4:	318d883a 	add	r6,r6,r6
   112e8:	001559c0 	call	1559c <_calloc_r>
   112ec:	103ff626 	beq	r2,zero,112c8 <__alt_data_end+0xf00112c8>
   112f0:	14000115 	stw	r16,4(r2)
   112f4:	14800215 	stw	r18,8(r2)
   112f8:	003fe606 	br	11294 <__alt_data_end+0xf0011294>

000112fc <_Bfree>:
   112fc:	28000826 	beq	r5,zero,11320 <_Bfree+0x24>
   11300:	28c00117 	ldw	r3,4(r5)
   11304:	20801317 	ldw	r2,76(r4)
   11308:	18c7883a 	add	r3,r3,r3
   1130c:	18c7883a 	add	r3,r3,r3
   11310:	10c5883a 	add	r2,r2,r3
   11314:	10c00017 	ldw	r3,0(r2)
   11318:	28c00015 	stw	r3,0(r5)
   1131c:	11400015 	stw	r5,0(r2)
   11320:	f800283a 	ret

00011324 <__multadd>:
   11324:	defffa04 	addi	sp,sp,-24
   11328:	dc800315 	stw	r18,12(sp)
   1132c:	dc400215 	stw	r17,8(sp)
   11330:	dc000115 	stw	r16,4(sp)
   11334:	2823883a 	mov	r17,r5
   11338:	2c000417 	ldw	r16,16(r5)
   1133c:	dfc00515 	stw	ra,20(sp)
   11340:	dcc00415 	stw	r19,16(sp)
   11344:	2025883a 	mov	r18,r4
   11348:	29400504 	addi	r5,r5,20
   1134c:	0011883a 	mov	r8,zero
   11350:	28c00017 	ldw	r3,0(r5)
   11354:	29400104 	addi	r5,r5,4
   11358:	42000044 	addi	r8,r8,1
   1135c:	18bfffcc 	andi	r2,r3,65535
   11360:	1185383a 	mul	r2,r2,r6
   11364:	1806d43a 	srli	r3,r3,16
   11368:	11cf883a 	add	r7,r2,r7
   1136c:	3808d43a 	srli	r4,r7,16
   11370:	1987383a 	mul	r3,r3,r6
   11374:	38bfffcc 	andi	r2,r7,65535
   11378:	1907883a 	add	r3,r3,r4
   1137c:	1808943a 	slli	r4,r3,16
   11380:	180ed43a 	srli	r7,r3,16
   11384:	2085883a 	add	r2,r4,r2
   11388:	28bfff15 	stw	r2,-4(r5)
   1138c:	443ff016 	blt	r8,r16,11350 <__alt_data_end+0xf0011350>
   11390:	38000926 	beq	r7,zero,113b8 <__multadd+0x94>
   11394:	88800217 	ldw	r2,8(r17)
   11398:	80800f0e 	bge	r16,r2,113d8 <__multadd+0xb4>
   1139c:	80800144 	addi	r2,r16,5
   113a0:	1085883a 	add	r2,r2,r2
   113a4:	1085883a 	add	r2,r2,r2
   113a8:	8885883a 	add	r2,r17,r2
   113ac:	11c00015 	stw	r7,0(r2)
   113b0:	84000044 	addi	r16,r16,1
   113b4:	8c000415 	stw	r16,16(r17)
   113b8:	8805883a 	mov	r2,r17
   113bc:	dfc00517 	ldw	ra,20(sp)
   113c0:	dcc00417 	ldw	r19,16(sp)
   113c4:	dc800317 	ldw	r18,12(sp)
   113c8:	dc400217 	ldw	r17,8(sp)
   113cc:	dc000117 	ldw	r16,4(sp)
   113d0:	dec00604 	addi	sp,sp,24
   113d4:	f800283a 	ret
   113d8:	89400117 	ldw	r5,4(r17)
   113dc:	9009883a 	mov	r4,r18
   113e0:	d9c00015 	stw	r7,0(sp)
   113e4:	29400044 	addi	r5,r5,1
   113e8:	00112540 	call	11254 <_Balloc>
   113ec:	89800417 	ldw	r6,16(r17)
   113f0:	89400304 	addi	r5,r17,12
   113f4:	11000304 	addi	r4,r2,12
   113f8:	31800084 	addi	r6,r6,2
   113fc:	318d883a 	add	r6,r6,r6
   11400:	318d883a 	add	r6,r6,r6
   11404:	1027883a 	mov	r19,r2
   11408:	00091200 	call	9120 <memcpy>
   1140c:	d9c00017 	ldw	r7,0(sp)
   11410:	88000a26 	beq	r17,zero,1143c <__multadd+0x118>
   11414:	88c00117 	ldw	r3,4(r17)
   11418:	90801317 	ldw	r2,76(r18)
   1141c:	18c7883a 	add	r3,r3,r3
   11420:	18c7883a 	add	r3,r3,r3
   11424:	10c5883a 	add	r2,r2,r3
   11428:	10c00017 	ldw	r3,0(r2)
   1142c:	88c00015 	stw	r3,0(r17)
   11430:	14400015 	stw	r17,0(r2)
   11434:	9823883a 	mov	r17,r19
   11438:	003fd806 	br	1139c <__alt_data_end+0xf001139c>
   1143c:	9823883a 	mov	r17,r19
   11440:	003fd606 	br	1139c <__alt_data_end+0xf001139c>

00011444 <__s2b>:
   11444:	defff904 	addi	sp,sp,-28
   11448:	dc400115 	stw	r17,4(sp)
   1144c:	dc000015 	stw	r16,0(sp)
   11450:	2023883a 	mov	r17,r4
   11454:	2821883a 	mov	r16,r5
   11458:	39000204 	addi	r4,r7,8
   1145c:	01400244 	movi	r5,9
   11460:	dcc00315 	stw	r19,12(sp)
   11464:	dc800215 	stw	r18,8(sp)
   11468:	dfc00615 	stw	ra,24(sp)
   1146c:	dd400515 	stw	r21,20(sp)
   11470:	dd000415 	stw	r20,16(sp)
   11474:	3825883a 	mov	r18,r7
   11478:	3027883a 	mov	r19,r6
   1147c:	0008ef00 	call	8ef0 <__divsi3>
   11480:	00c00044 	movi	r3,1
   11484:	000b883a 	mov	r5,zero
   11488:	1880030e 	bge	r3,r2,11498 <__s2b+0x54>
   1148c:	18c7883a 	add	r3,r3,r3
   11490:	29400044 	addi	r5,r5,1
   11494:	18bffd16 	blt	r3,r2,1148c <__alt_data_end+0xf001148c>
   11498:	8809883a 	mov	r4,r17
   1149c:	00112540 	call	11254 <_Balloc>
   114a0:	d8c00717 	ldw	r3,28(sp)
   114a4:	10c00515 	stw	r3,20(r2)
   114a8:	00c00044 	movi	r3,1
   114ac:	10c00415 	stw	r3,16(r2)
   114b0:	00c00244 	movi	r3,9
   114b4:	1cc0210e 	bge	r3,r19,1153c <__s2b+0xf8>
   114b8:	80eb883a 	add	r21,r16,r3
   114bc:	a829883a 	mov	r20,r21
   114c0:	84e1883a 	add	r16,r16,r19
   114c4:	a1c00007 	ldb	r7,0(r20)
   114c8:	01800284 	movi	r6,10
   114cc:	a5000044 	addi	r20,r20,1
   114d0:	100b883a 	mov	r5,r2
   114d4:	39fff404 	addi	r7,r7,-48
   114d8:	8809883a 	mov	r4,r17
   114dc:	00113240 	call	11324 <__multadd>
   114e0:	a43ff81e 	bne	r20,r16,114c4 <__alt_data_end+0xf00114c4>
   114e4:	ace1883a 	add	r16,r21,r19
   114e8:	843ffe04 	addi	r16,r16,-8
   114ec:	9c800a0e 	bge	r19,r18,11518 <__s2b+0xd4>
   114f0:	94e5c83a 	sub	r18,r18,r19
   114f4:	84a5883a 	add	r18,r16,r18
   114f8:	81c00007 	ldb	r7,0(r16)
   114fc:	01800284 	movi	r6,10
   11500:	84000044 	addi	r16,r16,1
   11504:	100b883a 	mov	r5,r2
   11508:	39fff404 	addi	r7,r7,-48
   1150c:	8809883a 	mov	r4,r17
   11510:	00113240 	call	11324 <__multadd>
   11514:	84bff81e 	bne	r16,r18,114f8 <__alt_data_end+0xf00114f8>
   11518:	dfc00617 	ldw	ra,24(sp)
   1151c:	dd400517 	ldw	r21,20(sp)
   11520:	dd000417 	ldw	r20,16(sp)
   11524:	dcc00317 	ldw	r19,12(sp)
   11528:	dc800217 	ldw	r18,8(sp)
   1152c:	dc400117 	ldw	r17,4(sp)
   11530:	dc000017 	ldw	r16,0(sp)
   11534:	dec00704 	addi	sp,sp,28
   11538:	f800283a 	ret
   1153c:	84000284 	addi	r16,r16,10
   11540:	1827883a 	mov	r19,r3
   11544:	003fe906 	br	114ec <__alt_data_end+0xf00114ec>

00011548 <__hi0bits>:
   11548:	20bfffec 	andhi	r2,r4,65535
   1154c:	1000141e 	bne	r2,zero,115a0 <__hi0bits+0x58>
   11550:	2008943a 	slli	r4,r4,16
   11554:	00800404 	movi	r2,16
   11558:	20ffc02c 	andhi	r3,r4,65280
   1155c:	1800021e 	bne	r3,zero,11568 <__hi0bits+0x20>
   11560:	2008923a 	slli	r4,r4,8
   11564:	10800204 	addi	r2,r2,8
   11568:	20fc002c 	andhi	r3,r4,61440
   1156c:	1800021e 	bne	r3,zero,11578 <__hi0bits+0x30>
   11570:	2008913a 	slli	r4,r4,4
   11574:	10800104 	addi	r2,r2,4
   11578:	20f0002c 	andhi	r3,r4,49152
   1157c:	1800031e 	bne	r3,zero,1158c <__hi0bits+0x44>
   11580:	2109883a 	add	r4,r4,r4
   11584:	10800084 	addi	r2,r2,2
   11588:	2109883a 	add	r4,r4,r4
   1158c:	20000316 	blt	r4,zero,1159c <__hi0bits+0x54>
   11590:	2110002c 	andhi	r4,r4,16384
   11594:	2000041e 	bne	r4,zero,115a8 <__hi0bits+0x60>
   11598:	00800804 	movi	r2,32
   1159c:	f800283a 	ret
   115a0:	0005883a 	mov	r2,zero
   115a4:	003fec06 	br	11558 <__alt_data_end+0xf0011558>
   115a8:	10800044 	addi	r2,r2,1
   115ac:	f800283a 	ret

000115b0 <__lo0bits>:
   115b0:	20c00017 	ldw	r3,0(r4)
   115b4:	188001cc 	andi	r2,r3,7
   115b8:	10000826 	beq	r2,zero,115dc <__lo0bits+0x2c>
   115bc:	1880004c 	andi	r2,r3,1
   115c0:	1000211e 	bne	r2,zero,11648 <__lo0bits+0x98>
   115c4:	1880008c 	andi	r2,r3,2
   115c8:	1000211e 	bne	r2,zero,11650 <__lo0bits+0xa0>
   115cc:	1806d0ba 	srli	r3,r3,2
   115d0:	00800084 	movi	r2,2
   115d4:	20c00015 	stw	r3,0(r4)
   115d8:	f800283a 	ret
   115dc:	18bfffcc 	andi	r2,r3,65535
   115e0:	10001326 	beq	r2,zero,11630 <__lo0bits+0x80>
   115e4:	0005883a 	mov	r2,zero
   115e8:	19403fcc 	andi	r5,r3,255
   115ec:	2800021e 	bne	r5,zero,115f8 <__lo0bits+0x48>
   115f0:	1806d23a 	srli	r3,r3,8
   115f4:	10800204 	addi	r2,r2,8
   115f8:	194003cc 	andi	r5,r3,15
   115fc:	2800021e 	bne	r5,zero,11608 <__lo0bits+0x58>
   11600:	1806d13a 	srli	r3,r3,4
   11604:	10800104 	addi	r2,r2,4
   11608:	194000cc 	andi	r5,r3,3
   1160c:	2800021e 	bne	r5,zero,11618 <__lo0bits+0x68>
   11610:	1806d0ba 	srli	r3,r3,2
   11614:	10800084 	addi	r2,r2,2
   11618:	1940004c 	andi	r5,r3,1
   1161c:	2800081e 	bne	r5,zero,11640 <__lo0bits+0x90>
   11620:	1806d07a 	srli	r3,r3,1
   11624:	1800051e 	bne	r3,zero,1163c <__lo0bits+0x8c>
   11628:	00800804 	movi	r2,32
   1162c:	f800283a 	ret
   11630:	1806d43a 	srli	r3,r3,16
   11634:	00800404 	movi	r2,16
   11638:	003feb06 	br	115e8 <__alt_data_end+0xf00115e8>
   1163c:	10800044 	addi	r2,r2,1
   11640:	20c00015 	stw	r3,0(r4)
   11644:	f800283a 	ret
   11648:	0005883a 	mov	r2,zero
   1164c:	f800283a 	ret
   11650:	1806d07a 	srli	r3,r3,1
   11654:	00800044 	movi	r2,1
   11658:	20c00015 	stw	r3,0(r4)
   1165c:	f800283a 	ret

00011660 <__i2b>:
   11660:	defffd04 	addi	sp,sp,-12
   11664:	dc000015 	stw	r16,0(sp)
   11668:	04000044 	movi	r16,1
   1166c:	dc400115 	stw	r17,4(sp)
   11670:	2823883a 	mov	r17,r5
   11674:	800b883a 	mov	r5,r16
   11678:	dfc00215 	stw	ra,8(sp)
   1167c:	00112540 	call	11254 <_Balloc>
   11680:	14400515 	stw	r17,20(r2)
   11684:	14000415 	stw	r16,16(r2)
   11688:	dfc00217 	ldw	ra,8(sp)
   1168c:	dc400117 	ldw	r17,4(sp)
   11690:	dc000017 	ldw	r16,0(sp)
   11694:	dec00304 	addi	sp,sp,12
   11698:	f800283a 	ret

0001169c <__multiply>:
   1169c:	defffa04 	addi	sp,sp,-24
   116a0:	dcc00315 	stw	r19,12(sp)
   116a4:	dc800215 	stw	r18,8(sp)
   116a8:	34c00417 	ldw	r19,16(r6)
   116ac:	2c800417 	ldw	r18,16(r5)
   116b0:	dd000415 	stw	r20,16(sp)
   116b4:	dc400115 	stw	r17,4(sp)
   116b8:	dfc00515 	stw	ra,20(sp)
   116bc:	dc000015 	stw	r16,0(sp)
   116c0:	2829883a 	mov	r20,r5
   116c4:	3023883a 	mov	r17,r6
   116c8:	94c0050e 	bge	r18,r19,116e0 <__multiply+0x44>
   116cc:	9007883a 	mov	r3,r18
   116d0:	3029883a 	mov	r20,r6
   116d4:	9825883a 	mov	r18,r19
   116d8:	2823883a 	mov	r17,r5
   116dc:	1827883a 	mov	r19,r3
   116e0:	a0800217 	ldw	r2,8(r20)
   116e4:	94e1883a 	add	r16,r18,r19
   116e8:	a1400117 	ldw	r5,4(r20)
   116ec:	1400010e 	bge	r2,r16,116f4 <__multiply+0x58>
   116f0:	29400044 	addi	r5,r5,1
   116f4:	00112540 	call	11254 <_Balloc>
   116f8:	8415883a 	add	r10,r16,r16
   116fc:	12c00504 	addi	r11,r2,20
   11700:	5295883a 	add	r10,r10,r10
   11704:	5a95883a 	add	r10,r11,r10
   11708:	5807883a 	mov	r3,r11
   1170c:	5a80032e 	bgeu	r11,r10,1171c <__multiply+0x80>
   11710:	18000015 	stw	zero,0(r3)
   11714:	18c00104 	addi	r3,r3,4
   11718:	1abffd36 	bltu	r3,r10,11710 <__alt_data_end+0xf0011710>
   1171c:	9ce7883a 	add	r19,r19,r19
   11720:	94a5883a 	add	r18,r18,r18
   11724:	89800504 	addi	r6,r17,20
   11728:	9ce7883a 	add	r19,r19,r19
   1172c:	a3400504 	addi	r13,r20,20
   11730:	94a5883a 	add	r18,r18,r18
   11734:	34d9883a 	add	r12,r6,r19
   11738:	6c93883a 	add	r9,r13,r18
   1173c:	3300422e 	bgeu	r6,r12,11848 <__multiply+0x1ac>
   11740:	37c00017 	ldw	ra,0(r6)
   11744:	fbffffcc 	andi	r15,ra,65535
   11748:	78001b26 	beq	r15,zero,117b8 <__multiply+0x11c>
   1174c:	5811883a 	mov	r8,r11
   11750:	681d883a 	mov	r14,r13
   11754:	000f883a 	mov	r7,zero
   11758:	71000017 	ldw	r4,0(r14)
   1175c:	40c00017 	ldw	r3,0(r8)
   11760:	73800104 	addi	r14,r14,4
   11764:	217fffcc 	andi	r5,r4,65535
   11768:	2bcb383a 	mul	r5,r5,r15
   1176c:	2008d43a 	srli	r4,r4,16
   11770:	1c7fffcc 	andi	r17,r3,65535
   11774:	2c4b883a 	add	r5,r5,r17
   11778:	29cb883a 	add	r5,r5,r7
   1177c:	23c9383a 	mul	r4,r4,r15
   11780:	1806d43a 	srli	r3,r3,16
   11784:	280ed43a 	srli	r7,r5,16
   11788:	297fffcc 	andi	r5,r5,65535
   1178c:	20c7883a 	add	r3,r4,r3
   11790:	19c7883a 	add	r3,r3,r7
   11794:	1808943a 	slli	r4,r3,16
   11798:	4023883a 	mov	r17,r8
   1179c:	180ed43a 	srli	r7,r3,16
   117a0:	214ab03a 	or	r5,r4,r5
   117a4:	41400015 	stw	r5,0(r8)
   117a8:	42000104 	addi	r8,r8,4
   117ac:	727fea36 	bltu	r14,r9,11758 <__alt_data_end+0xf0011758>
   117b0:	89c00115 	stw	r7,4(r17)
   117b4:	37c00017 	ldw	ra,0(r6)
   117b8:	f83ed43a 	srli	ra,ra,16
   117bc:	f8001f26 	beq	ra,zero,1183c <__multiply+0x1a0>
   117c0:	58c00017 	ldw	r3,0(r11)
   117c4:	681d883a 	mov	r14,r13
   117c8:	581f883a 	mov	r15,r11
   117cc:	1811883a 	mov	r8,r3
   117d0:	5825883a 	mov	r18,r11
   117d4:	000f883a 	mov	r7,zero
   117d8:	00000106 	br	117e0 <__multiply+0x144>
   117dc:	8825883a 	mov	r18,r17
   117e0:	7140000b 	ldhu	r5,0(r14)
   117e4:	4010d43a 	srli	r8,r8,16
   117e8:	193fffcc 	andi	r4,r3,65535
   117ec:	2fcb383a 	mul	r5,r5,ra
   117f0:	7bc00104 	addi	r15,r15,4
   117f4:	73800104 	addi	r14,r14,4
   117f8:	2a0b883a 	add	r5,r5,r8
   117fc:	29cb883a 	add	r5,r5,r7
   11800:	2806943a 	slli	r3,r5,16
   11804:	94400104 	addi	r17,r18,4
   11808:	280ad43a 	srli	r5,r5,16
   1180c:	1908b03a 	or	r4,r3,r4
   11810:	793fff15 	stw	r4,-4(r15)
   11814:	70ffff17 	ldw	r3,-4(r14)
   11818:	8a000017 	ldw	r8,0(r17)
   1181c:	1806d43a 	srli	r3,r3,16
   11820:	413fffcc 	andi	r4,r8,65535
   11824:	1fc7383a 	mul	r3,r3,ra
   11828:	1907883a 	add	r3,r3,r4
   1182c:	1947883a 	add	r3,r3,r5
   11830:	180ed43a 	srli	r7,r3,16
   11834:	727fe936 	bltu	r14,r9,117dc <__alt_data_end+0xf00117dc>
   11838:	90c00115 	stw	r3,4(r18)
   1183c:	31800104 	addi	r6,r6,4
   11840:	5ac00104 	addi	r11,r11,4
   11844:	333fbe36 	bltu	r6,r12,11740 <__alt_data_end+0xf0011740>
   11848:	0400090e 	bge	zero,r16,11870 <__multiply+0x1d4>
   1184c:	50ffff17 	ldw	r3,-4(r10)
   11850:	52bfff04 	addi	r10,r10,-4
   11854:	18000326 	beq	r3,zero,11864 <__multiply+0x1c8>
   11858:	00000506 	br	11870 <__multiply+0x1d4>
   1185c:	50c00017 	ldw	r3,0(r10)
   11860:	1800031e 	bne	r3,zero,11870 <__multiply+0x1d4>
   11864:	843fffc4 	addi	r16,r16,-1
   11868:	52bfff04 	addi	r10,r10,-4
   1186c:	803ffb1e 	bne	r16,zero,1185c <__alt_data_end+0xf001185c>
   11870:	14000415 	stw	r16,16(r2)
   11874:	dfc00517 	ldw	ra,20(sp)
   11878:	dd000417 	ldw	r20,16(sp)
   1187c:	dcc00317 	ldw	r19,12(sp)
   11880:	dc800217 	ldw	r18,8(sp)
   11884:	dc400117 	ldw	r17,4(sp)
   11888:	dc000017 	ldw	r16,0(sp)
   1188c:	dec00604 	addi	sp,sp,24
   11890:	f800283a 	ret

00011894 <__pow5mult>:
   11894:	defffa04 	addi	sp,sp,-24
   11898:	dcc00315 	stw	r19,12(sp)
   1189c:	dc000015 	stw	r16,0(sp)
   118a0:	dfc00515 	stw	ra,20(sp)
   118a4:	dd000415 	stw	r20,16(sp)
   118a8:	dc800215 	stw	r18,8(sp)
   118ac:	dc400115 	stw	r17,4(sp)
   118b0:	308000cc 	andi	r2,r6,3
   118b4:	3021883a 	mov	r16,r6
   118b8:	2027883a 	mov	r19,r4
   118bc:	10002f1e 	bne	r2,zero,1197c <__pow5mult+0xe8>
   118c0:	2825883a 	mov	r18,r5
   118c4:	8021d0ba 	srai	r16,r16,2
   118c8:	80001a26 	beq	r16,zero,11934 <__pow5mult+0xa0>
   118cc:	9c401217 	ldw	r17,72(r19)
   118d0:	8800061e 	bne	r17,zero,118ec <__pow5mult+0x58>
   118d4:	00003406 	br	119a8 <__pow5mult+0x114>
   118d8:	8021d07a 	srai	r16,r16,1
   118dc:	80001526 	beq	r16,zero,11934 <__pow5mult+0xa0>
   118e0:	88800017 	ldw	r2,0(r17)
   118e4:	10001c26 	beq	r2,zero,11958 <__pow5mult+0xc4>
   118e8:	1023883a 	mov	r17,r2
   118ec:	8080004c 	andi	r2,r16,1
   118f0:	103ff926 	beq	r2,zero,118d8 <__alt_data_end+0xf00118d8>
   118f4:	880d883a 	mov	r6,r17
   118f8:	900b883a 	mov	r5,r18
   118fc:	9809883a 	mov	r4,r19
   11900:	001169c0 	call	1169c <__multiply>
   11904:	90001b26 	beq	r18,zero,11974 <__pow5mult+0xe0>
   11908:	91000117 	ldw	r4,4(r18)
   1190c:	98c01317 	ldw	r3,76(r19)
   11910:	8021d07a 	srai	r16,r16,1
   11914:	2109883a 	add	r4,r4,r4
   11918:	2109883a 	add	r4,r4,r4
   1191c:	1907883a 	add	r3,r3,r4
   11920:	19000017 	ldw	r4,0(r3)
   11924:	91000015 	stw	r4,0(r18)
   11928:	1c800015 	stw	r18,0(r3)
   1192c:	1025883a 	mov	r18,r2
   11930:	803feb1e 	bne	r16,zero,118e0 <__alt_data_end+0xf00118e0>
   11934:	9005883a 	mov	r2,r18
   11938:	dfc00517 	ldw	ra,20(sp)
   1193c:	dd000417 	ldw	r20,16(sp)
   11940:	dcc00317 	ldw	r19,12(sp)
   11944:	dc800217 	ldw	r18,8(sp)
   11948:	dc400117 	ldw	r17,4(sp)
   1194c:	dc000017 	ldw	r16,0(sp)
   11950:	dec00604 	addi	sp,sp,24
   11954:	f800283a 	ret
   11958:	880d883a 	mov	r6,r17
   1195c:	880b883a 	mov	r5,r17
   11960:	9809883a 	mov	r4,r19
   11964:	001169c0 	call	1169c <__multiply>
   11968:	88800015 	stw	r2,0(r17)
   1196c:	10000015 	stw	zero,0(r2)
   11970:	003fdd06 	br	118e8 <__alt_data_end+0xf00118e8>
   11974:	1025883a 	mov	r18,r2
   11978:	003fd706 	br	118d8 <__alt_data_end+0xf00118d8>
   1197c:	10bfffc4 	addi	r2,r2,-1
   11980:	1085883a 	add	r2,r2,r2
   11984:	00c20034 	movhi	r3,2048
   11988:	18c0f804 	addi	r3,r3,992
   1198c:	1085883a 	add	r2,r2,r2
   11990:	1885883a 	add	r2,r3,r2
   11994:	11800017 	ldw	r6,0(r2)
   11998:	000f883a 	mov	r7,zero
   1199c:	00113240 	call	11324 <__multadd>
   119a0:	1025883a 	mov	r18,r2
   119a4:	003fc706 	br	118c4 <__alt_data_end+0xf00118c4>
   119a8:	05000044 	movi	r20,1
   119ac:	a00b883a 	mov	r5,r20
   119b0:	9809883a 	mov	r4,r19
   119b4:	00112540 	call	11254 <_Balloc>
   119b8:	1023883a 	mov	r17,r2
   119bc:	00809c44 	movi	r2,625
   119c0:	88800515 	stw	r2,20(r17)
   119c4:	8d000415 	stw	r20,16(r17)
   119c8:	9c401215 	stw	r17,72(r19)
   119cc:	88000015 	stw	zero,0(r17)
   119d0:	003fc606 	br	118ec <__alt_data_end+0xf00118ec>

000119d4 <__lshift>:
   119d4:	defff904 	addi	sp,sp,-28
   119d8:	dd400515 	stw	r21,20(sp)
   119dc:	dcc00315 	stw	r19,12(sp)
   119e0:	302bd17a 	srai	r21,r6,5
   119e4:	2cc00417 	ldw	r19,16(r5)
   119e8:	28800217 	ldw	r2,8(r5)
   119ec:	dd000415 	stw	r20,16(sp)
   119f0:	ace7883a 	add	r19,r21,r19
   119f4:	dc800215 	stw	r18,8(sp)
   119f8:	dc400115 	stw	r17,4(sp)
   119fc:	dc000015 	stw	r16,0(sp)
   11a00:	dfc00615 	stw	ra,24(sp)
   11a04:	9c000044 	addi	r16,r19,1
   11a08:	2823883a 	mov	r17,r5
   11a0c:	3029883a 	mov	r20,r6
   11a10:	2025883a 	mov	r18,r4
   11a14:	29400117 	ldw	r5,4(r5)
   11a18:	1400030e 	bge	r2,r16,11a28 <__lshift+0x54>
   11a1c:	1085883a 	add	r2,r2,r2
   11a20:	29400044 	addi	r5,r5,1
   11a24:	143ffd16 	blt	r2,r16,11a1c <__alt_data_end+0xf0011a1c>
   11a28:	9009883a 	mov	r4,r18
   11a2c:	00112540 	call	11254 <_Balloc>
   11a30:	10c00504 	addi	r3,r2,20
   11a34:	0540070e 	bge	zero,r21,11a54 <__lshift+0x80>
   11a38:	ad6b883a 	add	r21,r21,r21
   11a3c:	ad6b883a 	add	r21,r21,r21
   11a40:	1809883a 	mov	r4,r3
   11a44:	1d47883a 	add	r3,r3,r21
   11a48:	20000015 	stw	zero,0(r4)
   11a4c:	21000104 	addi	r4,r4,4
   11a50:	193ffd1e 	bne	r3,r4,11a48 <__alt_data_end+0xf0011a48>
   11a54:	8a000417 	ldw	r8,16(r17)
   11a58:	89000504 	addi	r4,r17,20
   11a5c:	a18007cc 	andi	r6,r20,31
   11a60:	4211883a 	add	r8,r8,r8
   11a64:	4211883a 	add	r8,r8,r8
   11a68:	2211883a 	add	r8,r4,r8
   11a6c:	30002326 	beq	r6,zero,11afc <__lshift+0x128>
   11a70:	02400804 	movi	r9,32
   11a74:	4993c83a 	sub	r9,r9,r6
   11a78:	000b883a 	mov	r5,zero
   11a7c:	21c00017 	ldw	r7,0(r4)
   11a80:	1815883a 	mov	r10,r3
   11a84:	18c00104 	addi	r3,r3,4
   11a88:	398e983a 	sll	r7,r7,r6
   11a8c:	21000104 	addi	r4,r4,4
   11a90:	394ab03a 	or	r5,r7,r5
   11a94:	197fff15 	stw	r5,-4(r3)
   11a98:	217fff17 	ldw	r5,-4(r4)
   11a9c:	2a4ad83a 	srl	r5,r5,r9
   11aa0:	223ff636 	bltu	r4,r8,11a7c <__alt_data_end+0xf0011a7c>
   11aa4:	51400115 	stw	r5,4(r10)
   11aa8:	28001a1e 	bne	r5,zero,11b14 <__lshift+0x140>
   11aac:	843fffc4 	addi	r16,r16,-1
   11ab0:	14000415 	stw	r16,16(r2)
   11ab4:	88000826 	beq	r17,zero,11ad8 <__lshift+0x104>
   11ab8:	89000117 	ldw	r4,4(r17)
   11abc:	90c01317 	ldw	r3,76(r18)
   11ac0:	2109883a 	add	r4,r4,r4
   11ac4:	2109883a 	add	r4,r4,r4
   11ac8:	1907883a 	add	r3,r3,r4
   11acc:	19000017 	ldw	r4,0(r3)
   11ad0:	89000015 	stw	r4,0(r17)
   11ad4:	1c400015 	stw	r17,0(r3)
   11ad8:	dfc00617 	ldw	ra,24(sp)
   11adc:	dd400517 	ldw	r21,20(sp)
   11ae0:	dd000417 	ldw	r20,16(sp)
   11ae4:	dcc00317 	ldw	r19,12(sp)
   11ae8:	dc800217 	ldw	r18,8(sp)
   11aec:	dc400117 	ldw	r17,4(sp)
   11af0:	dc000017 	ldw	r16,0(sp)
   11af4:	dec00704 	addi	sp,sp,28
   11af8:	f800283a 	ret
   11afc:	21400017 	ldw	r5,0(r4)
   11b00:	18c00104 	addi	r3,r3,4
   11b04:	21000104 	addi	r4,r4,4
   11b08:	197fff15 	stw	r5,-4(r3)
   11b0c:	223ffb36 	bltu	r4,r8,11afc <__alt_data_end+0xf0011afc>
   11b10:	003fe606 	br	11aac <__alt_data_end+0xf0011aac>
   11b14:	9c000084 	addi	r16,r19,2
   11b18:	003fe406 	br	11aac <__alt_data_end+0xf0011aac>

00011b1c <__mcmp>:
   11b1c:	20800417 	ldw	r2,16(r4)
   11b20:	28c00417 	ldw	r3,16(r5)
   11b24:	10c5c83a 	sub	r2,r2,r3
   11b28:	1000111e 	bne	r2,zero,11b70 <__mcmp+0x54>
   11b2c:	18c7883a 	add	r3,r3,r3
   11b30:	18c7883a 	add	r3,r3,r3
   11b34:	21000504 	addi	r4,r4,20
   11b38:	29400504 	addi	r5,r5,20
   11b3c:	20c5883a 	add	r2,r4,r3
   11b40:	28cb883a 	add	r5,r5,r3
   11b44:	00000106 	br	11b4c <__mcmp+0x30>
   11b48:	20800a2e 	bgeu	r4,r2,11b74 <__mcmp+0x58>
   11b4c:	10bfff04 	addi	r2,r2,-4
   11b50:	297fff04 	addi	r5,r5,-4
   11b54:	11800017 	ldw	r6,0(r2)
   11b58:	28c00017 	ldw	r3,0(r5)
   11b5c:	30fffa26 	beq	r6,r3,11b48 <__alt_data_end+0xf0011b48>
   11b60:	30c00236 	bltu	r6,r3,11b6c <__mcmp+0x50>
   11b64:	00800044 	movi	r2,1
   11b68:	f800283a 	ret
   11b6c:	00bfffc4 	movi	r2,-1
   11b70:	f800283a 	ret
   11b74:	0005883a 	mov	r2,zero
   11b78:	f800283a 	ret

00011b7c <__mdiff>:
   11b7c:	28c00417 	ldw	r3,16(r5)
   11b80:	30800417 	ldw	r2,16(r6)
   11b84:	defffa04 	addi	sp,sp,-24
   11b88:	dcc00315 	stw	r19,12(sp)
   11b8c:	dc800215 	stw	r18,8(sp)
   11b90:	dfc00515 	stw	ra,20(sp)
   11b94:	dd000415 	stw	r20,16(sp)
   11b98:	dc400115 	stw	r17,4(sp)
   11b9c:	dc000015 	stw	r16,0(sp)
   11ba0:	1887c83a 	sub	r3,r3,r2
   11ba4:	2825883a 	mov	r18,r5
   11ba8:	3027883a 	mov	r19,r6
   11bac:	1800141e 	bne	r3,zero,11c00 <__mdiff+0x84>
   11bb0:	1085883a 	add	r2,r2,r2
   11bb4:	1085883a 	add	r2,r2,r2
   11bb8:	2a000504 	addi	r8,r5,20
   11bbc:	34000504 	addi	r16,r6,20
   11bc0:	4087883a 	add	r3,r8,r2
   11bc4:	8085883a 	add	r2,r16,r2
   11bc8:	00000106 	br	11bd0 <__mdiff+0x54>
   11bcc:	40c0592e 	bgeu	r8,r3,11d34 <__mdiff+0x1b8>
   11bd0:	18ffff04 	addi	r3,r3,-4
   11bd4:	10bfff04 	addi	r2,r2,-4
   11bd8:	19c00017 	ldw	r7,0(r3)
   11bdc:	11400017 	ldw	r5,0(r2)
   11be0:	397ffa26 	beq	r7,r5,11bcc <__alt_data_end+0xf0011bcc>
   11be4:	3940592e 	bgeu	r7,r5,11d4c <__mdiff+0x1d0>
   11be8:	9005883a 	mov	r2,r18
   11bec:	4023883a 	mov	r17,r8
   11bf0:	9825883a 	mov	r18,r19
   11bf4:	05000044 	movi	r20,1
   11bf8:	1027883a 	mov	r19,r2
   11bfc:	00000406 	br	11c10 <__mdiff+0x94>
   11c00:	18005616 	blt	r3,zero,11d5c <__mdiff+0x1e0>
   11c04:	34400504 	addi	r17,r6,20
   11c08:	2c000504 	addi	r16,r5,20
   11c0c:	0029883a 	mov	r20,zero
   11c10:	91400117 	ldw	r5,4(r18)
   11c14:	00112540 	call	11254 <_Balloc>
   11c18:	92400417 	ldw	r9,16(r18)
   11c1c:	9b000417 	ldw	r12,16(r19)
   11c20:	12c00504 	addi	r11,r2,20
   11c24:	4a51883a 	add	r8,r9,r9
   11c28:	6319883a 	add	r12,r12,r12
   11c2c:	4211883a 	add	r8,r8,r8
   11c30:	6319883a 	add	r12,r12,r12
   11c34:	15000315 	stw	r20,12(r2)
   11c38:	8211883a 	add	r8,r16,r8
   11c3c:	8b19883a 	add	r12,r17,r12
   11c40:	0007883a 	mov	r3,zero
   11c44:	81400017 	ldw	r5,0(r16)
   11c48:	89c00017 	ldw	r7,0(r17)
   11c4c:	59800104 	addi	r6,r11,4
   11c50:	293fffcc 	andi	r4,r5,65535
   11c54:	20c7883a 	add	r3,r4,r3
   11c58:	393fffcc 	andi	r4,r7,65535
   11c5c:	1909c83a 	sub	r4,r3,r4
   11c60:	280ad43a 	srli	r5,r5,16
   11c64:	380ed43a 	srli	r7,r7,16
   11c68:	2007d43a 	srai	r3,r4,16
   11c6c:	213fffcc 	andi	r4,r4,65535
   11c70:	29cbc83a 	sub	r5,r5,r7
   11c74:	28c7883a 	add	r3,r5,r3
   11c78:	180a943a 	slli	r5,r3,16
   11c7c:	8c400104 	addi	r17,r17,4
   11c80:	84000104 	addi	r16,r16,4
   11c84:	2908b03a 	or	r4,r5,r4
   11c88:	59000015 	stw	r4,0(r11)
   11c8c:	1807d43a 	srai	r3,r3,16
   11c90:	3015883a 	mov	r10,r6
   11c94:	3017883a 	mov	r11,r6
   11c98:	8b3fea36 	bltu	r17,r12,11c44 <__alt_data_end+0xf0011c44>
   11c9c:	8200162e 	bgeu	r16,r8,11cf8 <__mdiff+0x17c>
   11ca0:	8017883a 	mov	r11,r16
   11ca4:	59400017 	ldw	r5,0(r11)
   11ca8:	31800104 	addi	r6,r6,4
   11cac:	5ac00104 	addi	r11,r11,4
   11cb0:	293fffcc 	andi	r4,r5,65535
   11cb4:	20c7883a 	add	r3,r4,r3
   11cb8:	280ed43a 	srli	r7,r5,16
   11cbc:	180bd43a 	srai	r5,r3,16
   11cc0:	193fffcc 	andi	r4,r3,65535
   11cc4:	3947883a 	add	r3,r7,r5
   11cc8:	180a943a 	slli	r5,r3,16
   11ccc:	1807d43a 	srai	r3,r3,16
   11cd0:	2908b03a 	or	r4,r5,r4
   11cd4:	313fff15 	stw	r4,-4(r6)
   11cd8:	5a3ff236 	bltu	r11,r8,11ca4 <__alt_data_end+0xf0011ca4>
   11cdc:	0406303a 	nor	r3,zero,r16
   11ce0:	1a07883a 	add	r3,r3,r8
   11ce4:	1806d0ba 	srli	r3,r3,2
   11ce8:	18c00044 	addi	r3,r3,1
   11cec:	18c7883a 	add	r3,r3,r3
   11cf0:	18c7883a 	add	r3,r3,r3
   11cf4:	50d5883a 	add	r10,r10,r3
   11cf8:	50ffff04 	addi	r3,r10,-4
   11cfc:	2000041e 	bne	r4,zero,11d10 <__mdiff+0x194>
   11d00:	18ffff04 	addi	r3,r3,-4
   11d04:	19000017 	ldw	r4,0(r3)
   11d08:	4a7fffc4 	addi	r9,r9,-1
   11d0c:	203ffc26 	beq	r4,zero,11d00 <__alt_data_end+0xf0011d00>
   11d10:	12400415 	stw	r9,16(r2)
   11d14:	dfc00517 	ldw	ra,20(sp)
   11d18:	dd000417 	ldw	r20,16(sp)
   11d1c:	dcc00317 	ldw	r19,12(sp)
   11d20:	dc800217 	ldw	r18,8(sp)
   11d24:	dc400117 	ldw	r17,4(sp)
   11d28:	dc000017 	ldw	r16,0(sp)
   11d2c:	dec00604 	addi	sp,sp,24
   11d30:	f800283a 	ret
   11d34:	000b883a 	mov	r5,zero
   11d38:	00112540 	call	11254 <_Balloc>
   11d3c:	00c00044 	movi	r3,1
   11d40:	10c00415 	stw	r3,16(r2)
   11d44:	10000515 	stw	zero,20(r2)
   11d48:	003ff206 	br	11d14 <__alt_data_end+0xf0011d14>
   11d4c:	8023883a 	mov	r17,r16
   11d50:	0029883a 	mov	r20,zero
   11d54:	4021883a 	mov	r16,r8
   11d58:	003fad06 	br	11c10 <__alt_data_end+0xf0011c10>
   11d5c:	9005883a 	mov	r2,r18
   11d60:	94400504 	addi	r17,r18,20
   11d64:	9c000504 	addi	r16,r19,20
   11d68:	9825883a 	mov	r18,r19
   11d6c:	05000044 	movi	r20,1
   11d70:	1027883a 	mov	r19,r2
   11d74:	003fa606 	br	11c10 <__alt_data_end+0xf0011c10>

00011d78 <__ulp>:
   11d78:	295ffc2c 	andhi	r5,r5,32752
   11d7c:	00bf3034 	movhi	r2,64704
   11d80:	2887883a 	add	r3,r5,r2
   11d84:	00c0020e 	bge	zero,r3,11d90 <__ulp+0x18>
   11d88:	0005883a 	mov	r2,zero
   11d8c:	f800283a 	ret
   11d90:	00c7c83a 	sub	r3,zero,r3
   11d94:	1807d53a 	srai	r3,r3,20
   11d98:	008004c4 	movi	r2,19
   11d9c:	10c00b0e 	bge	r2,r3,11dcc <__ulp+0x54>
   11da0:	18bffb04 	addi	r2,r3,-20
   11da4:	01000784 	movi	r4,30
   11da8:	0007883a 	mov	r3,zero
   11dac:	20800516 	blt	r4,r2,11dc4 <__ulp+0x4c>
   11db0:	010007c4 	movi	r4,31
   11db4:	2089c83a 	sub	r4,r4,r2
   11db8:	00800044 	movi	r2,1
   11dbc:	1104983a 	sll	r2,r2,r4
   11dc0:	f800283a 	ret
   11dc4:	00800044 	movi	r2,1
   11dc8:	f800283a 	ret
   11dcc:	01400234 	movhi	r5,8
   11dd0:	28c7d83a 	sra	r3,r5,r3
   11dd4:	0005883a 	mov	r2,zero
   11dd8:	f800283a 	ret

00011ddc <__b2d>:
   11ddc:	defffa04 	addi	sp,sp,-24
   11de0:	dc000015 	stw	r16,0(sp)
   11de4:	24000417 	ldw	r16,16(r4)
   11de8:	dc400115 	stw	r17,4(sp)
   11dec:	24400504 	addi	r17,r4,20
   11df0:	8421883a 	add	r16,r16,r16
   11df4:	8421883a 	add	r16,r16,r16
   11df8:	8c21883a 	add	r16,r17,r16
   11dfc:	dc800215 	stw	r18,8(sp)
   11e00:	84bfff17 	ldw	r18,-4(r16)
   11e04:	dd000415 	stw	r20,16(sp)
   11e08:	dcc00315 	stw	r19,12(sp)
   11e0c:	9009883a 	mov	r4,r18
   11e10:	2829883a 	mov	r20,r5
   11e14:	dfc00515 	stw	ra,20(sp)
   11e18:	00115480 	call	11548 <__hi0bits>
   11e1c:	00c00804 	movi	r3,32
   11e20:	1889c83a 	sub	r4,r3,r2
   11e24:	a1000015 	stw	r4,0(r20)
   11e28:	01000284 	movi	r4,10
   11e2c:	84ffff04 	addi	r19,r16,-4
   11e30:	20801216 	blt	r4,r2,11e7c <__b2d+0xa0>
   11e34:	018002c4 	movi	r6,11
   11e38:	308dc83a 	sub	r6,r6,r2
   11e3c:	9186d83a 	srl	r3,r18,r6
   11e40:	18cffc34 	orhi	r3,r3,16368
   11e44:	8cc0212e 	bgeu	r17,r19,11ecc <__b2d+0xf0>
   11e48:	813ffe17 	ldw	r4,-8(r16)
   11e4c:	218cd83a 	srl	r6,r4,r6
   11e50:	10800544 	addi	r2,r2,21
   11e54:	9084983a 	sll	r2,r18,r2
   11e58:	1184b03a 	or	r2,r2,r6
   11e5c:	dfc00517 	ldw	ra,20(sp)
   11e60:	dd000417 	ldw	r20,16(sp)
   11e64:	dcc00317 	ldw	r19,12(sp)
   11e68:	dc800217 	ldw	r18,8(sp)
   11e6c:	dc400117 	ldw	r17,4(sp)
   11e70:	dc000017 	ldw	r16,0(sp)
   11e74:	dec00604 	addi	sp,sp,24
   11e78:	f800283a 	ret
   11e7c:	8cc00f2e 	bgeu	r17,r19,11ebc <__b2d+0xe0>
   11e80:	117ffd44 	addi	r5,r2,-11
   11e84:	80bffe17 	ldw	r2,-8(r16)
   11e88:	28000e26 	beq	r5,zero,11ec4 <__b2d+0xe8>
   11e8c:	1949c83a 	sub	r4,r3,r5
   11e90:	9164983a 	sll	r18,r18,r5
   11e94:	1106d83a 	srl	r3,r2,r4
   11e98:	81bffe04 	addi	r6,r16,-8
   11e9c:	948ffc34 	orhi	r18,r18,16368
   11ea0:	90c6b03a 	or	r3,r18,r3
   11ea4:	89800e2e 	bgeu	r17,r6,11ee0 <__b2d+0x104>
   11ea8:	81bffd17 	ldw	r6,-12(r16)
   11eac:	1144983a 	sll	r2,r2,r5
   11eb0:	310ad83a 	srl	r5,r6,r4
   11eb4:	2884b03a 	or	r2,r5,r2
   11eb8:	003fe806 	br	11e5c <__alt_data_end+0xf0011e5c>
   11ebc:	10bffd44 	addi	r2,r2,-11
   11ec0:	1000041e 	bne	r2,zero,11ed4 <__b2d+0xf8>
   11ec4:	90cffc34 	orhi	r3,r18,16368
   11ec8:	003fe406 	br	11e5c <__alt_data_end+0xf0011e5c>
   11ecc:	000d883a 	mov	r6,zero
   11ed0:	003fdf06 	br	11e50 <__alt_data_end+0xf0011e50>
   11ed4:	90a4983a 	sll	r18,r18,r2
   11ed8:	0005883a 	mov	r2,zero
   11edc:	003ff906 	br	11ec4 <__alt_data_end+0xf0011ec4>
   11ee0:	1144983a 	sll	r2,r2,r5
   11ee4:	003fdd06 	br	11e5c <__alt_data_end+0xf0011e5c>

00011ee8 <__d2b>:
   11ee8:	defff804 	addi	sp,sp,-32
   11eec:	dc000215 	stw	r16,8(sp)
   11ef0:	3021883a 	mov	r16,r6
   11ef4:	dc400315 	stw	r17,12(sp)
   11ef8:	8022907a 	slli	r17,r16,1
   11efc:	dd000615 	stw	r20,24(sp)
   11f00:	2829883a 	mov	r20,r5
   11f04:	01400044 	movi	r5,1
   11f08:	dcc00515 	stw	r19,20(sp)
   11f0c:	dc800415 	stw	r18,16(sp)
   11f10:	dfc00715 	stw	ra,28(sp)
   11f14:	3825883a 	mov	r18,r7
   11f18:	8822d57a 	srli	r17,r17,21
   11f1c:	00112540 	call	11254 <_Balloc>
   11f20:	1027883a 	mov	r19,r2
   11f24:	00800434 	movhi	r2,16
   11f28:	10bfffc4 	addi	r2,r2,-1
   11f2c:	808c703a 	and	r6,r16,r2
   11f30:	88000126 	beq	r17,zero,11f38 <__d2b+0x50>
   11f34:	31800434 	orhi	r6,r6,16
   11f38:	d9800015 	stw	r6,0(sp)
   11f3c:	a0002426 	beq	r20,zero,11fd0 <__d2b+0xe8>
   11f40:	d9000104 	addi	r4,sp,4
   11f44:	dd000115 	stw	r20,4(sp)
   11f48:	00115b00 	call	115b0 <__lo0bits>
   11f4c:	d8c00017 	ldw	r3,0(sp)
   11f50:	10002f1e 	bne	r2,zero,12010 <__d2b+0x128>
   11f54:	d9000117 	ldw	r4,4(sp)
   11f58:	99000515 	stw	r4,20(r19)
   11f5c:	1821003a 	cmpeq	r16,r3,zero
   11f60:	01000084 	movi	r4,2
   11f64:	2421c83a 	sub	r16,r4,r16
   11f68:	98c00615 	stw	r3,24(r19)
   11f6c:	9c000415 	stw	r16,16(r19)
   11f70:	88001f1e 	bne	r17,zero,11ff0 <__d2b+0x108>
   11f74:	10bef384 	addi	r2,r2,-1074
   11f78:	90800015 	stw	r2,0(r18)
   11f7c:	00900034 	movhi	r2,16384
   11f80:	10bfffc4 	addi	r2,r2,-1
   11f84:	8085883a 	add	r2,r16,r2
   11f88:	1085883a 	add	r2,r2,r2
   11f8c:	1085883a 	add	r2,r2,r2
   11f90:	9885883a 	add	r2,r19,r2
   11f94:	11000517 	ldw	r4,20(r2)
   11f98:	8020917a 	slli	r16,r16,5
   11f9c:	00115480 	call	11548 <__hi0bits>
   11fa0:	d8c00817 	ldw	r3,32(sp)
   11fa4:	8085c83a 	sub	r2,r16,r2
   11fa8:	18800015 	stw	r2,0(r3)
   11fac:	9805883a 	mov	r2,r19
   11fb0:	dfc00717 	ldw	ra,28(sp)
   11fb4:	dd000617 	ldw	r20,24(sp)
   11fb8:	dcc00517 	ldw	r19,20(sp)
   11fbc:	dc800417 	ldw	r18,16(sp)
   11fc0:	dc400317 	ldw	r17,12(sp)
   11fc4:	dc000217 	ldw	r16,8(sp)
   11fc8:	dec00804 	addi	sp,sp,32
   11fcc:	f800283a 	ret
   11fd0:	d809883a 	mov	r4,sp
   11fd4:	00115b00 	call	115b0 <__lo0bits>
   11fd8:	d8c00017 	ldw	r3,0(sp)
   11fdc:	04000044 	movi	r16,1
   11fe0:	9c000415 	stw	r16,16(r19)
   11fe4:	98c00515 	stw	r3,20(r19)
   11fe8:	10800804 	addi	r2,r2,32
   11fec:	883fe126 	beq	r17,zero,11f74 <__alt_data_end+0xf0011f74>
   11ff0:	00c00d44 	movi	r3,53
   11ff4:	8c7ef344 	addi	r17,r17,-1075
   11ff8:	88a3883a 	add	r17,r17,r2
   11ffc:	1885c83a 	sub	r2,r3,r2
   12000:	d8c00817 	ldw	r3,32(sp)
   12004:	94400015 	stw	r17,0(r18)
   12008:	18800015 	stw	r2,0(r3)
   1200c:	003fe706 	br	11fac <__alt_data_end+0xf0011fac>
   12010:	01000804 	movi	r4,32
   12014:	2089c83a 	sub	r4,r4,r2
   12018:	1908983a 	sll	r4,r3,r4
   1201c:	d9400117 	ldw	r5,4(sp)
   12020:	1886d83a 	srl	r3,r3,r2
   12024:	2148b03a 	or	r4,r4,r5
   12028:	99000515 	stw	r4,20(r19)
   1202c:	d8c00015 	stw	r3,0(sp)
   12030:	003fca06 	br	11f5c <__alt_data_end+0xf0011f5c>

00012034 <__ratio>:
   12034:	defff904 	addi	sp,sp,-28
   12038:	dc400315 	stw	r17,12(sp)
   1203c:	2823883a 	mov	r17,r5
   12040:	d9400104 	addi	r5,sp,4
   12044:	dfc00615 	stw	ra,24(sp)
   12048:	dcc00515 	stw	r19,20(sp)
   1204c:	dc800415 	stw	r18,16(sp)
   12050:	2027883a 	mov	r19,r4
   12054:	dc000215 	stw	r16,8(sp)
   12058:	0011ddc0 	call	11ddc <__b2d>
   1205c:	d80b883a 	mov	r5,sp
   12060:	8809883a 	mov	r4,r17
   12064:	1025883a 	mov	r18,r2
   12068:	1821883a 	mov	r16,r3
   1206c:	0011ddc0 	call	11ddc <__b2d>
   12070:	8a000417 	ldw	r8,16(r17)
   12074:	99000417 	ldw	r4,16(r19)
   12078:	d9400117 	ldw	r5,4(sp)
   1207c:	2209c83a 	sub	r4,r4,r8
   12080:	2010917a 	slli	r8,r4,5
   12084:	d9000017 	ldw	r4,0(sp)
   12088:	2909c83a 	sub	r4,r5,r4
   1208c:	4109883a 	add	r4,r8,r4
   12090:	01000e0e 	bge	zero,r4,120cc <__ratio+0x98>
   12094:	2008953a 	slli	r4,r4,20
   12098:	2421883a 	add	r16,r4,r16
   1209c:	100d883a 	mov	r6,r2
   120a0:	180f883a 	mov	r7,r3
   120a4:	9009883a 	mov	r4,r18
   120a8:	800b883a 	mov	r5,r16
   120ac:	00070a00 	call	70a0 <__divdf3>
   120b0:	dfc00617 	ldw	ra,24(sp)
   120b4:	dcc00517 	ldw	r19,20(sp)
   120b8:	dc800417 	ldw	r18,16(sp)
   120bc:	dc400317 	ldw	r17,12(sp)
   120c0:	dc000217 	ldw	r16,8(sp)
   120c4:	dec00704 	addi	sp,sp,28
   120c8:	f800283a 	ret
   120cc:	2008953a 	slli	r4,r4,20
   120d0:	1907c83a 	sub	r3,r3,r4
   120d4:	003ff106 	br	1209c <__alt_data_end+0xf001209c>

000120d8 <_mprec_log10>:
   120d8:	defffe04 	addi	sp,sp,-8
   120dc:	dc000015 	stw	r16,0(sp)
   120e0:	dfc00115 	stw	ra,4(sp)
   120e4:	008005c4 	movi	r2,23
   120e8:	2021883a 	mov	r16,r4
   120ec:	11000d0e 	bge	r2,r4,12124 <_mprec_log10+0x4c>
   120f0:	0005883a 	mov	r2,zero
   120f4:	00cffc34 	movhi	r3,16368
   120f8:	843fffc4 	addi	r16,r16,-1
   120fc:	000d883a 	mov	r6,zero
   12100:	01d00934 	movhi	r7,16420
   12104:	1009883a 	mov	r4,r2
   12108:	180b883a 	mov	r5,r3
   1210c:	0007a640 	call	7a64 <__muldf3>
   12110:	803ff91e 	bne	r16,zero,120f8 <__alt_data_end+0xf00120f8>
   12114:	dfc00117 	ldw	ra,4(sp)
   12118:	dc000017 	ldw	r16,0(sp)
   1211c:	dec00204 	addi	sp,sp,8
   12120:	f800283a 	ret
   12124:	202090fa 	slli	r16,r4,3
   12128:	00820034 	movhi	r2,2048
   1212c:	10810f04 	addi	r2,r2,1084
   12130:	1421883a 	add	r16,r2,r16
   12134:	80800017 	ldw	r2,0(r16)
   12138:	80c00117 	ldw	r3,4(r16)
   1213c:	dfc00117 	ldw	ra,4(sp)
   12140:	dc000017 	ldw	r16,0(sp)
   12144:	dec00204 	addi	sp,sp,8
   12148:	f800283a 	ret

0001214c <__copybits>:
   1214c:	297fffc4 	addi	r5,r5,-1
   12150:	280fd17a 	srai	r7,r5,5
   12154:	30c00417 	ldw	r3,16(r6)
   12158:	30800504 	addi	r2,r6,20
   1215c:	39c00044 	addi	r7,r7,1
   12160:	18c7883a 	add	r3,r3,r3
   12164:	39cf883a 	add	r7,r7,r7
   12168:	18c7883a 	add	r3,r3,r3
   1216c:	39cf883a 	add	r7,r7,r7
   12170:	10c7883a 	add	r3,r2,r3
   12174:	21cf883a 	add	r7,r4,r7
   12178:	10c00d2e 	bgeu	r2,r3,121b0 <__copybits+0x64>
   1217c:	200b883a 	mov	r5,r4
   12180:	12000017 	ldw	r8,0(r2)
   12184:	29400104 	addi	r5,r5,4
   12188:	10800104 	addi	r2,r2,4
   1218c:	2a3fff15 	stw	r8,-4(r5)
   12190:	10fffb36 	bltu	r2,r3,12180 <__alt_data_end+0xf0012180>
   12194:	1985c83a 	sub	r2,r3,r6
   12198:	10bffac4 	addi	r2,r2,-21
   1219c:	1004d0ba 	srli	r2,r2,2
   121a0:	10800044 	addi	r2,r2,1
   121a4:	1085883a 	add	r2,r2,r2
   121a8:	1085883a 	add	r2,r2,r2
   121ac:	2089883a 	add	r4,r4,r2
   121b0:	21c0032e 	bgeu	r4,r7,121c0 <__copybits+0x74>
   121b4:	20000015 	stw	zero,0(r4)
   121b8:	21000104 	addi	r4,r4,4
   121bc:	21fffd36 	bltu	r4,r7,121b4 <__alt_data_end+0xf00121b4>
   121c0:	f800283a 	ret

000121c4 <__any_on>:
   121c4:	20c00417 	ldw	r3,16(r4)
   121c8:	2805d17a 	srai	r2,r5,5
   121cc:	21000504 	addi	r4,r4,20
   121d0:	18800d0e 	bge	r3,r2,12208 <__any_on+0x44>
   121d4:	18c7883a 	add	r3,r3,r3
   121d8:	18c7883a 	add	r3,r3,r3
   121dc:	20c7883a 	add	r3,r4,r3
   121e0:	20c0192e 	bgeu	r4,r3,12248 <__any_on+0x84>
   121e4:	18bfff17 	ldw	r2,-4(r3)
   121e8:	18ffff04 	addi	r3,r3,-4
   121ec:	1000041e 	bne	r2,zero,12200 <__any_on+0x3c>
   121f0:	20c0142e 	bgeu	r4,r3,12244 <__any_on+0x80>
   121f4:	18ffff04 	addi	r3,r3,-4
   121f8:	19400017 	ldw	r5,0(r3)
   121fc:	283ffc26 	beq	r5,zero,121f0 <__alt_data_end+0xf00121f0>
   12200:	00800044 	movi	r2,1
   12204:	f800283a 	ret
   12208:	10c00a0e 	bge	r2,r3,12234 <__any_on+0x70>
   1220c:	1085883a 	add	r2,r2,r2
   12210:	1085883a 	add	r2,r2,r2
   12214:	294007cc 	andi	r5,r5,31
   12218:	2087883a 	add	r3,r4,r2
   1221c:	283ff026 	beq	r5,zero,121e0 <__alt_data_end+0xf00121e0>
   12220:	19800017 	ldw	r6,0(r3)
   12224:	3144d83a 	srl	r2,r6,r5
   12228:	114a983a 	sll	r5,r2,r5
   1222c:	317ff41e 	bne	r6,r5,12200 <__alt_data_end+0xf0012200>
   12230:	003feb06 	br	121e0 <__alt_data_end+0xf00121e0>
   12234:	1085883a 	add	r2,r2,r2
   12238:	1085883a 	add	r2,r2,r2
   1223c:	2087883a 	add	r3,r4,r2
   12240:	003fe706 	br	121e0 <__alt_data_end+0xf00121e0>
   12244:	f800283a 	ret
   12248:	0005883a 	mov	r2,zero
   1224c:	f800283a 	ret

00012250 <_realloc_r>:
   12250:	defff604 	addi	sp,sp,-40
   12254:	dc800215 	stw	r18,8(sp)
   12258:	dfc00915 	stw	ra,36(sp)
   1225c:	df000815 	stw	fp,32(sp)
   12260:	ddc00715 	stw	r23,28(sp)
   12264:	dd800615 	stw	r22,24(sp)
   12268:	dd400515 	stw	r21,20(sp)
   1226c:	dd000415 	stw	r20,16(sp)
   12270:	dcc00315 	stw	r19,12(sp)
   12274:	dc400115 	stw	r17,4(sp)
   12278:	dc000015 	stw	r16,0(sp)
   1227c:	3025883a 	mov	r18,r6
   12280:	2800b726 	beq	r5,zero,12560 <_realloc_r+0x310>
   12284:	282b883a 	mov	r21,r5
   12288:	2029883a 	mov	r20,r4
   1228c:	001782c0 	call	1782c <__malloc_lock>
   12290:	a8bfff17 	ldw	r2,-4(r21)
   12294:	043fff04 	movi	r16,-4
   12298:	90c002c4 	addi	r3,r18,11
   1229c:	01000584 	movi	r4,22
   122a0:	acfffe04 	addi	r19,r21,-8
   122a4:	1420703a 	and	r16,r2,r16
   122a8:	20c0332e 	bgeu	r4,r3,12378 <_realloc_r+0x128>
   122ac:	047ffe04 	movi	r17,-8
   122b0:	1c62703a 	and	r17,r3,r17
   122b4:	8807883a 	mov	r3,r17
   122b8:	88005816 	blt	r17,zero,1241c <_realloc_r+0x1cc>
   122bc:	8c805736 	bltu	r17,r18,1241c <_realloc_r+0x1cc>
   122c0:	80c0300e 	bge	r16,r3,12384 <_realloc_r+0x134>
   122c4:	07020034 	movhi	fp,2048
   122c8:	e703e104 	addi	fp,fp,3972
   122cc:	e1c00217 	ldw	r7,8(fp)
   122d0:	9c09883a 	add	r4,r19,r16
   122d4:	22000117 	ldw	r8,4(r4)
   122d8:	21c06326 	beq	r4,r7,12468 <_realloc_r+0x218>
   122dc:	017fff84 	movi	r5,-2
   122e0:	414a703a 	and	r5,r8,r5
   122e4:	214b883a 	add	r5,r4,r5
   122e8:	29800117 	ldw	r6,4(r5)
   122ec:	3180004c 	andi	r6,r6,1
   122f0:	30003f26 	beq	r6,zero,123f0 <_realloc_r+0x1a0>
   122f4:	1080004c 	andi	r2,r2,1
   122f8:	10008326 	beq	r2,zero,12508 <_realloc_r+0x2b8>
   122fc:	900b883a 	mov	r5,r18
   12300:	a009883a 	mov	r4,r20
   12304:	00108080 	call	10808 <_malloc_r>
   12308:	1025883a 	mov	r18,r2
   1230c:	10011e26 	beq	r2,zero,12788 <_realloc_r+0x538>
   12310:	a93fff17 	ldw	r4,-4(r21)
   12314:	10fffe04 	addi	r3,r2,-8
   12318:	00bfff84 	movi	r2,-2
   1231c:	2084703a 	and	r2,r4,r2
   12320:	9885883a 	add	r2,r19,r2
   12324:	1880ee26 	beq	r3,r2,126e0 <_realloc_r+0x490>
   12328:	81bfff04 	addi	r6,r16,-4
   1232c:	00800904 	movi	r2,36
   12330:	1180b836 	bltu	r2,r6,12614 <_realloc_r+0x3c4>
   12334:	00c004c4 	movi	r3,19
   12338:	19809636 	bltu	r3,r6,12594 <_realloc_r+0x344>
   1233c:	9005883a 	mov	r2,r18
   12340:	a807883a 	mov	r3,r21
   12344:	19000017 	ldw	r4,0(r3)
   12348:	11000015 	stw	r4,0(r2)
   1234c:	19000117 	ldw	r4,4(r3)
   12350:	11000115 	stw	r4,4(r2)
   12354:	18c00217 	ldw	r3,8(r3)
   12358:	10c00215 	stw	r3,8(r2)
   1235c:	a80b883a 	mov	r5,r21
   12360:	a009883a 	mov	r4,r20
   12364:	000fc1c0 	call	fc1c <_free_r>
   12368:	a009883a 	mov	r4,r20
   1236c:	00178500 	call	17850 <__malloc_unlock>
   12370:	9005883a 	mov	r2,r18
   12374:	00001206 	br	123c0 <_realloc_r+0x170>
   12378:	00c00404 	movi	r3,16
   1237c:	1823883a 	mov	r17,r3
   12380:	003fce06 	br	122bc <__alt_data_end+0xf00122bc>
   12384:	a825883a 	mov	r18,r21
   12388:	8445c83a 	sub	r2,r16,r17
   1238c:	00c003c4 	movi	r3,15
   12390:	18802636 	bltu	r3,r2,1242c <_realloc_r+0x1dc>
   12394:	99800117 	ldw	r6,4(r19)
   12398:	9c07883a 	add	r3,r19,r16
   1239c:	3180004c 	andi	r6,r6,1
   123a0:	3420b03a 	or	r16,r6,r16
   123a4:	9c000115 	stw	r16,4(r19)
   123a8:	18800117 	ldw	r2,4(r3)
   123ac:	10800054 	ori	r2,r2,1
   123b0:	18800115 	stw	r2,4(r3)
   123b4:	a009883a 	mov	r4,r20
   123b8:	00178500 	call	17850 <__malloc_unlock>
   123bc:	9005883a 	mov	r2,r18
   123c0:	dfc00917 	ldw	ra,36(sp)
   123c4:	df000817 	ldw	fp,32(sp)
   123c8:	ddc00717 	ldw	r23,28(sp)
   123cc:	dd800617 	ldw	r22,24(sp)
   123d0:	dd400517 	ldw	r21,20(sp)
   123d4:	dd000417 	ldw	r20,16(sp)
   123d8:	dcc00317 	ldw	r19,12(sp)
   123dc:	dc800217 	ldw	r18,8(sp)
   123e0:	dc400117 	ldw	r17,4(sp)
   123e4:	dc000017 	ldw	r16,0(sp)
   123e8:	dec00a04 	addi	sp,sp,40
   123ec:	f800283a 	ret
   123f0:	017fff04 	movi	r5,-4
   123f4:	414a703a 	and	r5,r8,r5
   123f8:	814d883a 	add	r6,r16,r5
   123fc:	30c01f16 	blt	r6,r3,1247c <_realloc_r+0x22c>
   12400:	20800317 	ldw	r2,12(r4)
   12404:	20c00217 	ldw	r3,8(r4)
   12408:	a825883a 	mov	r18,r21
   1240c:	3021883a 	mov	r16,r6
   12410:	18800315 	stw	r2,12(r3)
   12414:	10c00215 	stw	r3,8(r2)
   12418:	003fdb06 	br	12388 <__alt_data_end+0xf0012388>
   1241c:	00800304 	movi	r2,12
   12420:	a0800015 	stw	r2,0(r20)
   12424:	0005883a 	mov	r2,zero
   12428:	003fe506 	br	123c0 <__alt_data_end+0xf00123c0>
   1242c:	98c00117 	ldw	r3,4(r19)
   12430:	9c4b883a 	add	r5,r19,r17
   12434:	11000054 	ori	r4,r2,1
   12438:	18c0004c 	andi	r3,r3,1
   1243c:	1c62b03a 	or	r17,r3,r17
   12440:	9c400115 	stw	r17,4(r19)
   12444:	29000115 	stw	r4,4(r5)
   12448:	2885883a 	add	r2,r5,r2
   1244c:	10c00117 	ldw	r3,4(r2)
   12450:	29400204 	addi	r5,r5,8
   12454:	a009883a 	mov	r4,r20
   12458:	18c00054 	ori	r3,r3,1
   1245c:	10c00115 	stw	r3,4(r2)
   12460:	000fc1c0 	call	fc1c <_free_r>
   12464:	003fd306 	br	123b4 <__alt_data_end+0xf00123b4>
   12468:	017fff04 	movi	r5,-4
   1246c:	414a703a 	and	r5,r8,r5
   12470:	89800404 	addi	r6,r17,16
   12474:	8151883a 	add	r8,r16,r5
   12478:	4180590e 	bge	r8,r6,125e0 <_realloc_r+0x390>
   1247c:	1080004c 	andi	r2,r2,1
   12480:	103f9e1e 	bne	r2,zero,122fc <__alt_data_end+0xf00122fc>
   12484:	adbffe17 	ldw	r22,-8(r21)
   12488:	00bfff04 	movi	r2,-4
   1248c:	9dadc83a 	sub	r22,r19,r22
   12490:	b1800117 	ldw	r6,4(r22)
   12494:	3084703a 	and	r2,r6,r2
   12498:	20002026 	beq	r4,zero,1251c <_realloc_r+0x2cc>
   1249c:	80af883a 	add	r23,r16,r2
   124a0:	b96f883a 	add	r23,r23,r5
   124a4:	21c05f26 	beq	r4,r7,12624 <_realloc_r+0x3d4>
   124a8:	b8c01c16 	blt	r23,r3,1251c <_realloc_r+0x2cc>
   124ac:	20800317 	ldw	r2,12(r4)
   124b0:	20c00217 	ldw	r3,8(r4)
   124b4:	81bfff04 	addi	r6,r16,-4
   124b8:	01000904 	movi	r4,36
   124bc:	18800315 	stw	r2,12(r3)
   124c0:	10c00215 	stw	r3,8(r2)
   124c4:	b0c00217 	ldw	r3,8(r22)
   124c8:	b0800317 	ldw	r2,12(r22)
   124cc:	b4800204 	addi	r18,r22,8
   124d0:	18800315 	stw	r2,12(r3)
   124d4:	10c00215 	stw	r3,8(r2)
   124d8:	21801b36 	bltu	r4,r6,12548 <_realloc_r+0x2f8>
   124dc:	008004c4 	movi	r2,19
   124e0:	1180352e 	bgeu	r2,r6,125b8 <_realloc_r+0x368>
   124e4:	a8800017 	ldw	r2,0(r21)
   124e8:	b0800215 	stw	r2,8(r22)
   124ec:	a8800117 	ldw	r2,4(r21)
   124f0:	b0800315 	stw	r2,12(r22)
   124f4:	008006c4 	movi	r2,27
   124f8:	11807f36 	bltu	r2,r6,126f8 <_realloc_r+0x4a8>
   124fc:	b0800404 	addi	r2,r22,16
   12500:	ad400204 	addi	r21,r21,8
   12504:	00002d06 	br	125bc <_realloc_r+0x36c>
   12508:	adbffe17 	ldw	r22,-8(r21)
   1250c:	00bfff04 	movi	r2,-4
   12510:	9dadc83a 	sub	r22,r19,r22
   12514:	b1000117 	ldw	r4,4(r22)
   12518:	2084703a 	and	r2,r4,r2
   1251c:	b03f7726 	beq	r22,zero,122fc <__alt_data_end+0xf00122fc>
   12520:	80af883a 	add	r23,r16,r2
   12524:	b8ff7516 	blt	r23,r3,122fc <__alt_data_end+0xf00122fc>
   12528:	b0800317 	ldw	r2,12(r22)
   1252c:	b0c00217 	ldw	r3,8(r22)
   12530:	81bfff04 	addi	r6,r16,-4
   12534:	01000904 	movi	r4,36
   12538:	18800315 	stw	r2,12(r3)
   1253c:	10c00215 	stw	r3,8(r2)
   12540:	b4800204 	addi	r18,r22,8
   12544:	21bfe52e 	bgeu	r4,r6,124dc <__alt_data_end+0xf00124dc>
   12548:	a80b883a 	mov	r5,r21
   1254c:	9009883a 	mov	r4,r18
   12550:	00110f80 	call	110f8 <memmove>
   12554:	b821883a 	mov	r16,r23
   12558:	b027883a 	mov	r19,r22
   1255c:	003f8a06 	br	12388 <__alt_data_end+0xf0012388>
   12560:	300b883a 	mov	r5,r6
   12564:	dfc00917 	ldw	ra,36(sp)
   12568:	df000817 	ldw	fp,32(sp)
   1256c:	ddc00717 	ldw	r23,28(sp)
   12570:	dd800617 	ldw	r22,24(sp)
   12574:	dd400517 	ldw	r21,20(sp)
   12578:	dd000417 	ldw	r20,16(sp)
   1257c:	dcc00317 	ldw	r19,12(sp)
   12580:	dc800217 	ldw	r18,8(sp)
   12584:	dc400117 	ldw	r17,4(sp)
   12588:	dc000017 	ldw	r16,0(sp)
   1258c:	dec00a04 	addi	sp,sp,40
   12590:	00108081 	jmpi	10808 <_malloc_r>
   12594:	a8c00017 	ldw	r3,0(r21)
   12598:	90c00015 	stw	r3,0(r18)
   1259c:	a8c00117 	ldw	r3,4(r21)
   125a0:	90c00115 	stw	r3,4(r18)
   125a4:	00c006c4 	movi	r3,27
   125a8:	19804536 	bltu	r3,r6,126c0 <_realloc_r+0x470>
   125ac:	90800204 	addi	r2,r18,8
   125b0:	a8c00204 	addi	r3,r21,8
   125b4:	003f6306 	br	12344 <__alt_data_end+0xf0012344>
   125b8:	9005883a 	mov	r2,r18
   125bc:	a8c00017 	ldw	r3,0(r21)
   125c0:	b821883a 	mov	r16,r23
   125c4:	b027883a 	mov	r19,r22
   125c8:	10c00015 	stw	r3,0(r2)
   125cc:	a8c00117 	ldw	r3,4(r21)
   125d0:	10c00115 	stw	r3,4(r2)
   125d4:	a8c00217 	ldw	r3,8(r21)
   125d8:	10c00215 	stw	r3,8(r2)
   125dc:	003f6a06 	br	12388 <__alt_data_end+0xf0012388>
   125e0:	9c67883a 	add	r19,r19,r17
   125e4:	4445c83a 	sub	r2,r8,r17
   125e8:	e4c00215 	stw	r19,8(fp)
   125ec:	10800054 	ori	r2,r2,1
   125f0:	98800115 	stw	r2,4(r19)
   125f4:	a8bfff17 	ldw	r2,-4(r21)
   125f8:	a009883a 	mov	r4,r20
   125fc:	1080004c 	andi	r2,r2,1
   12600:	1462b03a 	or	r17,r2,r17
   12604:	ac7fff15 	stw	r17,-4(r21)
   12608:	00178500 	call	17850 <__malloc_unlock>
   1260c:	a805883a 	mov	r2,r21
   12610:	003f6b06 	br	123c0 <__alt_data_end+0xf00123c0>
   12614:	a80b883a 	mov	r5,r21
   12618:	9009883a 	mov	r4,r18
   1261c:	00110f80 	call	110f8 <memmove>
   12620:	003f4e06 	br	1235c <__alt_data_end+0xf001235c>
   12624:	89000404 	addi	r4,r17,16
   12628:	b93fbc16 	blt	r23,r4,1251c <__alt_data_end+0xf001251c>
   1262c:	b0800317 	ldw	r2,12(r22)
   12630:	b0c00217 	ldw	r3,8(r22)
   12634:	81bfff04 	addi	r6,r16,-4
   12638:	01000904 	movi	r4,36
   1263c:	18800315 	stw	r2,12(r3)
   12640:	10c00215 	stw	r3,8(r2)
   12644:	b4800204 	addi	r18,r22,8
   12648:	21804336 	bltu	r4,r6,12758 <_realloc_r+0x508>
   1264c:	008004c4 	movi	r2,19
   12650:	11803f2e 	bgeu	r2,r6,12750 <_realloc_r+0x500>
   12654:	a8800017 	ldw	r2,0(r21)
   12658:	b0800215 	stw	r2,8(r22)
   1265c:	a8800117 	ldw	r2,4(r21)
   12660:	b0800315 	stw	r2,12(r22)
   12664:	008006c4 	movi	r2,27
   12668:	11803f36 	bltu	r2,r6,12768 <_realloc_r+0x518>
   1266c:	b0800404 	addi	r2,r22,16
   12670:	ad400204 	addi	r21,r21,8
   12674:	a8c00017 	ldw	r3,0(r21)
   12678:	10c00015 	stw	r3,0(r2)
   1267c:	a8c00117 	ldw	r3,4(r21)
   12680:	10c00115 	stw	r3,4(r2)
   12684:	a8c00217 	ldw	r3,8(r21)
   12688:	10c00215 	stw	r3,8(r2)
   1268c:	b447883a 	add	r3,r22,r17
   12690:	bc45c83a 	sub	r2,r23,r17
   12694:	e0c00215 	stw	r3,8(fp)
   12698:	10800054 	ori	r2,r2,1
   1269c:	18800115 	stw	r2,4(r3)
   126a0:	b0800117 	ldw	r2,4(r22)
   126a4:	a009883a 	mov	r4,r20
   126a8:	1080004c 	andi	r2,r2,1
   126ac:	1462b03a 	or	r17,r2,r17
   126b0:	b4400115 	stw	r17,4(r22)
   126b4:	00178500 	call	17850 <__malloc_unlock>
   126b8:	9005883a 	mov	r2,r18
   126bc:	003f4006 	br	123c0 <__alt_data_end+0xf00123c0>
   126c0:	a8c00217 	ldw	r3,8(r21)
   126c4:	90c00215 	stw	r3,8(r18)
   126c8:	a8c00317 	ldw	r3,12(r21)
   126cc:	90c00315 	stw	r3,12(r18)
   126d0:	30801126 	beq	r6,r2,12718 <_realloc_r+0x4c8>
   126d4:	90800404 	addi	r2,r18,16
   126d8:	a8c00404 	addi	r3,r21,16
   126dc:	003f1906 	br	12344 <__alt_data_end+0xf0012344>
   126e0:	90ffff17 	ldw	r3,-4(r18)
   126e4:	00bfff04 	movi	r2,-4
   126e8:	a825883a 	mov	r18,r21
   126ec:	1884703a 	and	r2,r3,r2
   126f0:	80a1883a 	add	r16,r16,r2
   126f4:	003f2406 	br	12388 <__alt_data_end+0xf0012388>
   126f8:	a8800217 	ldw	r2,8(r21)
   126fc:	b0800415 	stw	r2,16(r22)
   12700:	a8800317 	ldw	r2,12(r21)
   12704:	b0800515 	stw	r2,20(r22)
   12708:	31000a26 	beq	r6,r4,12734 <_realloc_r+0x4e4>
   1270c:	b0800604 	addi	r2,r22,24
   12710:	ad400404 	addi	r21,r21,16
   12714:	003fa906 	br	125bc <__alt_data_end+0xf00125bc>
   12718:	a9000417 	ldw	r4,16(r21)
   1271c:	90800604 	addi	r2,r18,24
   12720:	a8c00604 	addi	r3,r21,24
   12724:	91000415 	stw	r4,16(r18)
   12728:	a9000517 	ldw	r4,20(r21)
   1272c:	91000515 	stw	r4,20(r18)
   12730:	003f0406 	br	12344 <__alt_data_end+0xf0012344>
   12734:	a8c00417 	ldw	r3,16(r21)
   12738:	ad400604 	addi	r21,r21,24
   1273c:	b0800804 	addi	r2,r22,32
   12740:	b0c00615 	stw	r3,24(r22)
   12744:	a8ffff17 	ldw	r3,-4(r21)
   12748:	b0c00715 	stw	r3,28(r22)
   1274c:	003f9b06 	br	125bc <__alt_data_end+0xf00125bc>
   12750:	9005883a 	mov	r2,r18
   12754:	003fc706 	br	12674 <__alt_data_end+0xf0012674>
   12758:	a80b883a 	mov	r5,r21
   1275c:	9009883a 	mov	r4,r18
   12760:	00110f80 	call	110f8 <memmove>
   12764:	003fc906 	br	1268c <__alt_data_end+0xf001268c>
   12768:	a8800217 	ldw	r2,8(r21)
   1276c:	b0800415 	stw	r2,16(r22)
   12770:	a8800317 	ldw	r2,12(r21)
   12774:	b0800515 	stw	r2,20(r22)
   12778:	31000726 	beq	r6,r4,12798 <_realloc_r+0x548>
   1277c:	b0800604 	addi	r2,r22,24
   12780:	ad400404 	addi	r21,r21,16
   12784:	003fbb06 	br	12674 <__alt_data_end+0xf0012674>
   12788:	a009883a 	mov	r4,r20
   1278c:	00178500 	call	17850 <__malloc_unlock>
   12790:	0005883a 	mov	r2,zero
   12794:	003f0a06 	br	123c0 <__alt_data_end+0xf00123c0>
   12798:	a8c00417 	ldw	r3,16(r21)
   1279c:	ad400604 	addi	r21,r21,24
   127a0:	b0800804 	addi	r2,r22,32
   127a4:	b0c00615 	stw	r3,24(r22)
   127a8:	a8ffff17 	ldw	r3,-4(r21)
   127ac:	b0c00715 	stw	r3,28(r22)
   127b0:	003fb006 	br	12674 <__alt_data_end+0xf0012674>

000127b4 <__fpclassifyd>:
   127b4:	00a00034 	movhi	r2,32768
   127b8:	10bfffc4 	addi	r2,r2,-1
   127bc:	2884703a 	and	r2,r5,r2
   127c0:	10000726 	beq	r2,zero,127e0 <__fpclassifyd+0x2c>
   127c4:	00fffc34 	movhi	r3,65520
   127c8:	019ff834 	movhi	r6,32736
   127cc:	28c7883a 	add	r3,r5,r3
   127d0:	31bfffc4 	addi	r6,r6,-1
   127d4:	30c00536 	bltu	r6,r3,127ec <__fpclassifyd+0x38>
   127d8:	00800104 	movi	r2,4
   127dc:	f800283a 	ret
   127e0:	2000021e 	bne	r4,zero,127ec <__fpclassifyd+0x38>
   127e4:	00800084 	movi	r2,2
   127e8:	f800283a 	ret
   127ec:	00dffc34 	movhi	r3,32752
   127f0:	019ff834 	movhi	r6,32736
   127f4:	28cb883a 	add	r5,r5,r3
   127f8:	31bfffc4 	addi	r6,r6,-1
   127fc:	317ff62e 	bgeu	r6,r5,127d8 <__alt_data_end+0xf00127d8>
   12800:	01400434 	movhi	r5,16
   12804:	297fffc4 	addi	r5,r5,-1
   12808:	28800236 	bltu	r5,r2,12814 <__fpclassifyd+0x60>
   1280c:	008000c4 	movi	r2,3
   12810:	f800283a 	ret
   12814:	10c00226 	beq	r2,r3,12820 <__fpclassifyd+0x6c>
   12818:	0005883a 	mov	r2,zero
   1281c:	f800283a 	ret
   12820:	2005003a 	cmpeq	r2,r4,zero
   12824:	f800283a 	ret

00012828 <_sbrk_r>:
   12828:	defffd04 	addi	sp,sp,-12
   1282c:	dc000015 	stw	r16,0(sp)
   12830:	04020034 	movhi	r16,2048
   12834:	dc400115 	stw	r17,4(sp)
   12838:	840b4c04 	addi	r16,r16,11568
   1283c:	2023883a 	mov	r17,r4
   12840:	2809883a 	mov	r4,r5
   12844:	dfc00215 	stw	ra,8(sp)
   12848:	80000015 	stw	zero,0(r16)
   1284c:	0017a100 	call	17a10 <sbrk>
   12850:	00ffffc4 	movi	r3,-1
   12854:	10c00526 	beq	r2,r3,1286c <_sbrk_r+0x44>
   12858:	dfc00217 	ldw	ra,8(sp)
   1285c:	dc400117 	ldw	r17,4(sp)
   12860:	dc000017 	ldw	r16,0(sp)
   12864:	dec00304 	addi	sp,sp,12
   12868:	f800283a 	ret
   1286c:	80c00017 	ldw	r3,0(r16)
   12870:	183ff926 	beq	r3,zero,12858 <__alt_data_end+0xf0012858>
   12874:	88c00015 	stw	r3,0(r17)
   12878:	003ff706 	br	12858 <__alt_data_end+0xf0012858>

0001287c <__sread>:
   1287c:	defffe04 	addi	sp,sp,-8
   12880:	dc000015 	stw	r16,0(sp)
   12884:	2821883a 	mov	r16,r5
   12888:	2940038f 	ldh	r5,14(r5)
   1288c:	dfc00115 	stw	ra,4(sp)
   12890:	0015a7c0 	call	15a7c <_read_r>
   12894:	10000716 	blt	r2,zero,128b4 <__sread+0x38>
   12898:	80c01417 	ldw	r3,80(r16)
   1289c:	1887883a 	add	r3,r3,r2
   128a0:	80c01415 	stw	r3,80(r16)
   128a4:	dfc00117 	ldw	ra,4(sp)
   128a8:	dc000017 	ldw	r16,0(sp)
   128ac:	dec00204 	addi	sp,sp,8
   128b0:	f800283a 	ret
   128b4:	80c0030b 	ldhu	r3,12(r16)
   128b8:	18fbffcc 	andi	r3,r3,61439
   128bc:	80c0030d 	sth	r3,12(r16)
   128c0:	dfc00117 	ldw	ra,4(sp)
   128c4:	dc000017 	ldw	r16,0(sp)
   128c8:	dec00204 	addi	sp,sp,8
   128cc:	f800283a 	ret

000128d0 <__seofread>:
   128d0:	0005883a 	mov	r2,zero
   128d4:	f800283a 	ret

000128d8 <__swrite>:
   128d8:	2880030b 	ldhu	r2,12(r5)
   128dc:	defffb04 	addi	sp,sp,-20
   128e0:	dcc00315 	stw	r19,12(sp)
   128e4:	dc800215 	stw	r18,8(sp)
   128e8:	dc400115 	stw	r17,4(sp)
   128ec:	dc000015 	stw	r16,0(sp)
   128f0:	dfc00415 	stw	ra,16(sp)
   128f4:	10c0400c 	andi	r3,r2,256
   128f8:	2821883a 	mov	r16,r5
   128fc:	2023883a 	mov	r17,r4
   12900:	3025883a 	mov	r18,r6
   12904:	3827883a 	mov	r19,r7
   12908:	18000526 	beq	r3,zero,12920 <__swrite+0x48>
   1290c:	2940038f 	ldh	r5,14(r5)
   12910:	01c00084 	movi	r7,2
   12914:	000d883a 	mov	r6,zero
   12918:	0015a1c0 	call	15a1c <_lseek_r>
   1291c:	8080030b 	ldhu	r2,12(r16)
   12920:	8140038f 	ldh	r5,14(r16)
   12924:	10bbffcc 	andi	r2,r2,61439
   12928:	980f883a 	mov	r7,r19
   1292c:	900d883a 	mov	r6,r18
   12930:	8809883a 	mov	r4,r17
   12934:	8080030d 	sth	r2,12(r16)
   12938:	dfc00417 	ldw	ra,16(sp)
   1293c:	dcc00317 	ldw	r19,12(sp)
   12940:	dc800217 	ldw	r18,8(sp)
   12944:	dc400117 	ldw	r17,4(sp)
   12948:	dc000017 	ldw	r16,0(sp)
   1294c:	dec00504 	addi	sp,sp,20
   12950:	00154e81 	jmpi	154e8 <_write_r>

00012954 <__sseek>:
   12954:	defffe04 	addi	sp,sp,-8
   12958:	dc000015 	stw	r16,0(sp)
   1295c:	2821883a 	mov	r16,r5
   12960:	2940038f 	ldh	r5,14(r5)
   12964:	dfc00115 	stw	ra,4(sp)
   12968:	0015a1c0 	call	15a1c <_lseek_r>
   1296c:	00ffffc4 	movi	r3,-1
   12970:	10c00826 	beq	r2,r3,12994 <__sseek+0x40>
   12974:	80c0030b 	ldhu	r3,12(r16)
   12978:	80801415 	stw	r2,80(r16)
   1297c:	18c40014 	ori	r3,r3,4096
   12980:	80c0030d 	sth	r3,12(r16)
   12984:	dfc00117 	ldw	ra,4(sp)
   12988:	dc000017 	ldw	r16,0(sp)
   1298c:	dec00204 	addi	sp,sp,8
   12990:	f800283a 	ret
   12994:	80c0030b 	ldhu	r3,12(r16)
   12998:	18fbffcc 	andi	r3,r3,61439
   1299c:	80c0030d 	sth	r3,12(r16)
   129a0:	dfc00117 	ldw	ra,4(sp)
   129a4:	dc000017 	ldw	r16,0(sp)
   129a8:	dec00204 	addi	sp,sp,8
   129ac:	f800283a 	ret

000129b0 <__sclose>:
   129b0:	2940038f 	ldh	r5,14(r5)
   129b4:	00155481 	jmpi	15548 <_close_r>

000129b8 <strcmp>:
   129b8:	2144b03a 	or	r2,r4,r5
   129bc:	108000cc 	andi	r2,r2,3
   129c0:	1000171e 	bne	r2,zero,12a20 <strcmp+0x68>
   129c4:	20800017 	ldw	r2,0(r4)
   129c8:	28c00017 	ldw	r3,0(r5)
   129cc:	10c0141e 	bne	r2,r3,12a20 <strcmp+0x68>
   129d0:	027fbff4 	movhi	r9,65279
   129d4:	4a7fbfc4 	addi	r9,r9,-257
   129d8:	0086303a 	nor	r3,zero,r2
   129dc:	02202074 	movhi	r8,32897
   129e0:	1245883a 	add	r2,r2,r9
   129e4:	42202004 	addi	r8,r8,-32640
   129e8:	10c4703a 	and	r2,r2,r3
   129ec:	1204703a 	and	r2,r2,r8
   129f0:	10000226 	beq	r2,zero,129fc <strcmp+0x44>
   129f4:	00002306 	br	12a84 <strcmp+0xcc>
   129f8:	1000221e 	bne	r2,zero,12a84 <strcmp+0xcc>
   129fc:	21000104 	addi	r4,r4,4
   12a00:	20c00017 	ldw	r3,0(r4)
   12a04:	29400104 	addi	r5,r5,4
   12a08:	29800017 	ldw	r6,0(r5)
   12a0c:	1a4f883a 	add	r7,r3,r9
   12a10:	00c4303a 	nor	r2,zero,r3
   12a14:	3884703a 	and	r2,r7,r2
   12a18:	1204703a 	and	r2,r2,r8
   12a1c:	19bff626 	beq	r3,r6,129f8 <__alt_data_end+0xf00129f8>
   12a20:	20800003 	ldbu	r2,0(r4)
   12a24:	10c03fcc 	andi	r3,r2,255
   12a28:	18c0201c 	xori	r3,r3,128
   12a2c:	18ffe004 	addi	r3,r3,-128
   12a30:	18000c26 	beq	r3,zero,12a64 <strcmp+0xac>
   12a34:	29800007 	ldb	r6,0(r5)
   12a38:	19800326 	beq	r3,r6,12a48 <strcmp+0x90>
   12a3c:	00001306 	br	12a8c <strcmp+0xd4>
   12a40:	29800007 	ldb	r6,0(r5)
   12a44:	11800b1e 	bne	r2,r6,12a74 <strcmp+0xbc>
   12a48:	21000044 	addi	r4,r4,1
   12a4c:	20c00003 	ldbu	r3,0(r4)
   12a50:	29400044 	addi	r5,r5,1
   12a54:	18803fcc 	andi	r2,r3,255
   12a58:	1080201c 	xori	r2,r2,128
   12a5c:	10bfe004 	addi	r2,r2,-128
   12a60:	103ff71e 	bne	r2,zero,12a40 <__alt_data_end+0xf0012a40>
   12a64:	0007883a 	mov	r3,zero
   12a68:	28800003 	ldbu	r2,0(r5)
   12a6c:	1885c83a 	sub	r2,r3,r2
   12a70:	f800283a 	ret
   12a74:	28800003 	ldbu	r2,0(r5)
   12a78:	18c03fcc 	andi	r3,r3,255
   12a7c:	1885c83a 	sub	r2,r3,r2
   12a80:	f800283a 	ret
   12a84:	0005883a 	mov	r2,zero
   12a88:	f800283a 	ret
   12a8c:	10c03fcc 	andi	r3,r2,255
   12a90:	003ff506 	br	12a68 <__alt_data_end+0xf0012a68>

00012a94 <__ssprint_r>:
   12a94:	30800217 	ldw	r2,8(r6)
   12a98:	defff604 	addi	sp,sp,-40
   12a9c:	dc800215 	stw	r18,8(sp)
   12aa0:	dfc00915 	stw	ra,36(sp)
   12aa4:	df000815 	stw	fp,32(sp)
   12aa8:	ddc00715 	stw	r23,28(sp)
   12aac:	dd800615 	stw	r22,24(sp)
   12ab0:	dd400515 	stw	r21,20(sp)
   12ab4:	dd000415 	stw	r20,16(sp)
   12ab8:	dcc00315 	stw	r19,12(sp)
   12abc:	dc400115 	stw	r17,4(sp)
   12ac0:	dc000015 	stw	r16,0(sp)
   12ac4:	3025883a 	mov	r18,r6
   12ac8:	10005826 	beq	r2,zero,12c2c <__ssprint_r+0x198>
   12acc:	2027883a 	mov	r19,r4
   12ad0:	35c00017 	ldw	r23,0(r6)
   12ad4:	29000017 	ldw	r4,0(r5)
   12ad8:	28800217 	ldw	r2,8(r5)
   12adc:	2823883a 	mov	r17,r5
   12ae0:	0039883a 	mov	fp,zero
   12ae4:	0021883a 	mov	r16,zero
   12ae8:	80003926 	beq	r16,zero,12bd0 <__ssprint_r+0x13c>
   12aec:	102b883a 	mov	r21,r2
   12af0:	102d883a 	mov	r22,r2
   12af4:	80803a36 	bltu	r16,r2,12be0 <__ssprint_r+0x14c>
   12af8:	88c0030b 	ldhu	r3,12(r17)
   12afc:	1881200c 	andi	r2,r3,1152
   12b00:	10002626 	beq	r2,zero,12b9c <__ssprint_r+0x108>
   12b04:	88800517 	ldw	r2,20(r17)
   12b08:	89400417 	ldw	r5,16(r17)
   12b0c:	81800044 	addi	r6,r16,1
   12b10:	108f883a 	add	r7,r2,r2
   12b14:	3885883a 	add	r2,r7,r2
   12b18:	100ed7fa 	srli	r7,r2,31
   12b1c:	216dc83a 	sub	r22,r4,r5
   12b20:	3589883a 	add	r4,r6,r22
   12b24:	3885883a 	add	r2,r7,r2
   12b28:	102bd07a 	srai	r21,r2,1
   12b2c:	a80d883a 	mov	r6,r21
   12b30:	a900022e 	bgeu	r21,r4,12b3c <__ssprint_r+0xa8>
   12b34:	202b883a 	mov	r21,r4
   12b38:	200d883a 	mov	r6,r4
   12b3c:	18c1000c 	andi	r3,r3,1024
   12b40:	18002a26 	beq	r3,zero,12bec <__ssprint_r+0x158>
   12b44:	300b883a 	mov	r5,r6
   12b48:	9809883a 	mov	r4,r19
   12b4c:	00108080 	call	10808 <_malloc_r>
   12b50:	1029883a 	mov	r20,r2
   12b54:	10002c26 	beq	r2,zero,12c08 <__ssprint_r+0x174>
   12b58:	89400417 	ldw	r5,16(r17)
   12b5c:	b00d883a 	mov	r6,r22
   12b60:	1009883a 	mov	r4,r2
   12b64:	00091200 	call	9120 <memcpy>
   12b68:	8880030b 	ldhu	r2,12(r17)
   12b6c:	00fedfc4 	movi	r3,-1153
   12b70:	10c4703a 	and	r2,r2,r3
   12b74:	10802014 	ori	r2,r2,128
   12b78:	8880030d 	sth	r2,12(r17)
   12b7c:	a589883a 	add	r4,r20,r22
   12b80:	adadc83a 	sub	r22,r21,r22
   12b84:	8d400515 	stw	r21,20(r17)
   12b88:	8d800215 	stw	r22,8(r17)
   12b8c:	8d000415 	stw	r20,16(r17)
   12b90:	89000015 	stw	r4,0(r17)
   12b94:	802b883a 	mov	r21,r16
   12b98:	802d883a 	mov	r22,r16
   12b9c:	b00d883a 	mov	r6,r22
   12ba0:	e00b883a 	mov	r5,fp
   12ba4:	00110f80 	call	110f8 <memmove>
   12ba8:	88800217 	ldw	r2,8(r17)
   12bac:	89000017 	ldw	r4,0(r17)
   12bb0:	90c00217 	ldw	r3,8(r18)
   12bb4:	1545c83a 	sub	r2,r2,r21
   12bb8:	2589883a 	add	r4,r4,r22
   12bbc:	88800215 	stw	r2,8(r17)
   12bc0:	89000015 	stw	r4,0(r17)
   12bc4:	1c21c83a 	sub	r16,r3,r16
   12bc8:	94000215 	stw	r16,8(r18)
   12bcc:	80001726 	beq	r16,zero,12c2c <__ssprint_r+0x198>
   12bd0:	bf000017 	ldw	fp,0(r23)
   12bd4:	bc000117 	ldw	r16,4(r23)
   12bd8:	bdc00204 	addi	r23,r23,8
   12bdc:	003fc206 	br	12ae8 <__alt_data_end+0xf0012ae8>
   12be0:	802b883a 	mov	r21,r16
   12be4:	802d883a 	mov	r22,r16
   12be8:	003fec06 	br	12b9c <__alt_data_end+0xf0012b9c>
   12bec:	9809883a 	mov	r4,r19
   12bf0:	00122500 	call	12250 <_realloc_r>
   12bf4:	1029883a 	mov	r20,r2
   12bf8:	103fe01e 	bne	r2,zero,12b7c <__alt_data_end+0xf0012b7c>
   12bfc:	89400417 	ldw	r5,16(r17)
   12c00:	9809883a 	mov	r4,r19
   12c04:	000fc1c0 	call	fc1c <_free_r>
   12c08:	88c0030b 	ldhu	r3,12(r17)
   12c0c:	00800304 	movi	r2,12
   12c10:	98800015 	stw	r2,0(r19)
   12c14:	18c01014 	ori	r3,r3,64
   12c18:	88c0030d 	sth	r3,12(r17)
   12c1c:	00bfffc4 	movi	r2,-1
   12c20:	90000215 	stw	zero,8(r18)
   12c24:	90000115 	stw	zero,4(r18)
   12c28:	00000206 	br	12c34 <__ssprint_r+0x1a0>
   12c2c:	90000115 	stw	zero,4(r18)
   12c30:	0005883a 	mov	r2,zero
   12c34:	dfc00917 	ldw	ra,36(sp)
   12c38:	df000817 	ldw	fp,32(sp)
   12c3c:	ddc00717 	ldw	r23,28(sp)
   12c40:	dd800617 	ldw	r22,24(sp)
   12c44:	dd400517 	ldw	r21,20(sp)
   12c48:	dd000417 	ldw	r20,16(sp)
   12c4c:	dcc00317 	ldw	r19,12(sp)
   12c50:	dc800217 	ldw	r18,8(sp)
   12c54:	dc400117 	ldw	r17,4(sp)
   12c58:	dc000017 	ldw	r16,0(sp)
   12c5c:	dec00a04 	addi	sp,sp,40
   12c60:	f800283a 	ret

00012c64 <___svfiprintf_internal_r>:
   12c64:	2880030b 	ldhu	r2,12(r5)
   12c68:	deffc804 	addi	sp,sp,-224
   12c6c:	dcc03115 	stw	r19,196(sp)
   12c70:	dfc03715 	stw	ra,220(sp)
   12c74:	df003615 	stw	fp,216(sp)
   12c78:	ddc03515 	stw	r23,212(sp)
   12c7c:	dd803415 	stw	r22,208(sp)
   12c80:	dd403315 	stw	r21,204(sp)
   12c84:	dd003215 	stw	r20,200(sp)
   12c88:	dc803015 	stw	r18,192(sp)
   12c8c:	dc402f15 	stw	r17,188(sp)
   12c90:	dc002e15 	stw	r16,184(sp)
   12c94:	d9402715 	stw	r5,156(sp)
   12c98:	d9002a15 	stw	r4,168(sp)
   12c9c:	1080200c 	andi	r2,r2,128
   12ca0:	d9c02315 	stw	r7,140(sp)
   12ca4:	3027883a 	mov	r19,r6
   12ca8:	10000226 	beq	r2,zero,12cb4 <___svfiprintf_internal_r+0x50>
   12cac:	28800417 	ldw	r2,16(r5)
   12cb0:	10041d26 	beq	r2,zero,13d28 <___svfiprintf_internal_r+0x10c4>
   12cb4:	dac01a04 	addi	r11,sp,104
   12cb8:	dac01e15 	stw	r11,120(sp)
   12cbc:	d8801e17 	ldw	r2,120(sp)
   12cc0:	dac019c4 	addi	r11,sp,103
   12cc4:	dd402a17 	ldw	r21,168(sp)
   12cc8:	ddc02717 	ldw	r23,156(sp)
   12ccc:	05820034 	movhi	r22,2048
   12cd0:	05020034 	movhi	r20,2048
   12cd4:	dac01f15 	stw	r11,124(sp)
   12cd8:	12d7c83a 	sub	r11,r2,r11
   12cdc:	b5814504 	addi	r22,r22,1300
   12ce0:	a5014104 	addi	r20,r20,1284
   12ce4:	dec01a15 	stw	sp,104(sp)
   12ce8:	d8001c15 	stw	zero,112(sp)
   12cec:	d8001b15 	stw	zero,108(sp)
   12cf0:	d811883a 	mov	r8,sp
   12cf4:	d8002915 	stw	zero,164(sp)
   12cf8:	d8002515 	stw	zero,148(sp)
   12cfc:	dac02b15 	stw	r11,172(sp)
   12d00:	98800007 	ldb	r2,0(r19)
   12d04:	1002dd26 	beq	r2,zero,1387c <___svfiprintf_internal_r+0xc18>
   12d08:	00c00944 	movi	r3,37
   12d0c:	9823883a 	mov	r17,r19
   12d10:	10c0021e 	bne	r2,r3,12d1c <___svfiprintf_internal_r+0xb8>
   12d14:	00001406 	br	12d68 <___svfiprintf_internal_r+0x104>
   12d18:	10c00326 	beq	r2,r3,12d28 <___svfiprintf_internal_r+0xc4>
   12d1c:	8c400044 	addi	r17,r17,1
   12d20:	88800007 	ldb	r2,0(r17)
   12d24:	103ffc1e 	bne	r2,zero,12d18 <__alt_data_end+0xf0012d18>
   12d28:	8ce1c83a 	sub	r16,r17,r19
   12d2c:	80000e26 	beq	r16,zero,12d68 <___svfiprintf_internal_r+0x104>
   12d30:	d8c01c17 	ldw	r3,112(sp)
   12d34:	d8801b17 	ldw	r2,108(sp)
   12d38:	44c00015 	stw	r19,0(r8)
   12d3c:	1c07883a 	add	r3,r3,r16
   12d40:	10800044 	addi	r2,r2,1
   12d44:	d8c01c15 	stw	r3,112(sp)
   12d48:	44000115 	stw	r16,4(r8)
   12d4c:	d8801b15 	stw	r2,108(sp)
   12d50:	00c001c4 	movi	r3,7
   12d54:	18831e16 	blt	r3,r2,139d0 <___svfiprintf_internal_r+0xd6c>
   12d58:	42000204 	addi	r8,r8,8
   12d5c:	dac02517 	ldw	r11,148(sp)
   12d60:	5c17883a 	add	r11,r11,r16
   12d64:	dac02515 	stw	r11,148(sp)
   12d68:	88800007 	ldb	r2,0(r17)
   12d6c:	1002c526 	beq	r2,zero,13884 <___svfiprintf_internal_r+0xc20>
   12d70:	88c00047 	ldb	r3,1(r17)
   12d74:	8cc00044 	addi	r19,r17,1
   12d78:	d8001d85 	stb	zero,118(sp)
   12d7c:	0009883a 	mov	r4,zero
   12d80:	000f883a 	mov	r7,zero
   12d84:	043fffc4 	movi	r16,-1
   12d88:	d8002415 	stw	zero,144(sp)
   12d8c:	0025883a 	mov	r18,zero
   12d90:	01401604 	movi	r5,88
   12d94:	01800244 	movi	r6,9
   12d98:	02800a84 	movi	r10,42
   12d9c:	02401b04 	movi	r9,108
   12da0:	9cc00044 	addi	r19,r19,1
   12da4:	18bff804 	addi	r2,r3,-32
   12da8:	2881dd36 	bltu	r5,r2,13520 <___svfiprintf_internal_r+0x8bc>
   12dac:	100490ba 	slli	r2,r2,2
   12db0:	02c00074 	movhi	r11,1
   12db4:	5acb7104 	addi	r11,r11,11716
   12db8:	12c5883a 	add	r2,r2,r11
   12dbc:	10800017 	ldw	r2,0(r2)
   12dc0:	1000683a 	jmp	r2
   12dc4:	00012fc0 	call	12fc <prvInsertBlockIntoFreeList+0x2c>
   12dc8:	00013520 	cmpeqi	zero,zero,1236
   12dcc:	00013520 	cmpeqi	zero,zero,1236
   12dd0:	00012fb4 	movhi	zero,1214
   12dd4:	00013520 	cmpeqi	zero,zero,1236
   12dd8:	00013520 	cmpeqi	zero,zero,1236
   12ddc:	00013520 	cmpeqi	zero,zero,1236
   12de0:	00013520 	cmpeqi	zero,zero,1236
   12de4:	00013520 	cmpeqi	zero,zero,1236
   12de8:	00013520 	cmpeqi	zero,zero,1236
   12dec:	00012f28 	cmpgeui	zero,zero,1212
   12df0:	00013104 	movi	zero,1220
   12df4:	00013520 	cmpeqi	zero,zero,1236
   12df8:	00012f54 	movui	zero,1213
   12dfc:	00013554 	movui	zero,1237
   12e00:	00013520 	cmpeqi	zero,zero,1236
   12e04:	00013548 	cmpgei	zero,zero,1237
   12e08:	000134e8 	cmpgeui	zero,zero,1235
   12e0c:	000134e8 	cmpgeui	zero,zero,1235
   12e10:	000134e8 	cmpgeui	zero,zero,1235
   12e14:	000134e8 	cmpgeui	zero,zero,1235
   12e18:	000134e8 	cmpgeui	zero,zero,1235
   12e1c:	000134e8 	cmpgeui	zero,zero,1235
   12e20:	000134e8 	cmpgeui	zero,zero,1235
   12e24:	000134e8 	cmpgeui	zero,zero,1235
   12e28:	000134e8 	cmpgeui	zero,zero,1235
   12e2c:	00013520 	cmpeqi	zero,zero,1236
   12e30:	00013520 	cmpeqi	zero,zero,1236
   12e34:	00013520 	cmpeqi	zero,zero,1236
   12e38:	00013520 	cmpeqi	zero,zero,1236
   12e3c:	00013520 	cmpeqi	zero,zero,1236
   12e40:	00013520 	cmpeqi	zero,zero,1236
   12e44:	00013520 	cmpeqi	zero,zero,1236
   12e48:	00013520 	cmpeqi	zero,zero,1236
   12e4c:	00013520 	cmpeqi	zero,zero,1236
   12e50:	00013520 	cmpeqi	zero,zero,1236
   12e54:	00013484 	movi	zero,1234
   12e58:	00013520 	cmpeqi	zero,zero,1236
   12e5c:	00013520 	cmpeqi	zero,zero,1236
   12e60:	00013520 	cmpeqi	zero,zero,1236
   12e64:	00013520 	cmpeqi	zero,zero,1236
   12e68:	00013520 	cmpeqi	zero,zero,1236
   12e6c:	00013520 	cmpeqi	zero,zero,1236
   12e70:	00013520 	cmpeqi	zero,zero,1236
   12e74:	00013520 	cmpeqi	zero,zero,1236
   12e78:	00013520 	cmpeqi	zero,zero,1236
   12e7c:	00013520 	cmpeqi	zero,zero,1236
   12e80:	000135fc 	xorhi	zero,zero,1239
   12e84:	00013520 	cmpeqi	zero,zero,1236
   12e88:	00013520 	cmpeqi	zero,zero,1236
   12e8c:	00013520 	cmpeqi	zero,zero,1236
   12e90:	00013520 	cmpeqi	zero,zero,1236
   12e94:	00013520 	cmpeqi	zero,zero,1236
   12e98:	00013594 	movui	zero,1238
   12e9c:	00013520 	cmpeqi	zero,zero,1236
   12ea0:	00013520 	cmpeqi	zero,zero,1236
   12ea4:	000132c8 	cmpgei	zero,zero,1227
   12ea8:	00013520 	cmpeqi	zero,zero,1236
   12eac:	00013520 	cmpeqi	zero,zero,1236
   12eb0:	00013520 	cmpeqi	zero,zero,1236
   12eb4:	00013520 	cmpeqi	zero,zero,1236
   12eb8:	00013520 	cmpeqi	zero,zero,1236
   12ebc:	00013520 	cmpeqi	zero,zero,1236
   12ec0:	00013520 	cmpeqi	zero,zero,1236
   12ec4:	00013520 	cmpeqi	zero,zero,1236
   12ec8:	00013520 	cmpeqi	zero,zero,1236
   12ecc:	00013520 	cmpeqi	zero,zero,1236
   12ed0:	000131b8 	rdprs	zero,zero,1222
   12ed4:	00013364 	muli	zero,zero,1229
   12ed8:	00013520 	cmpeqi	zero,zero,1236
   12edc:	00013520 	cmpeqi	zero,zero,1236
   12ee0:	00013520 	cmpeqi	zero,zero,1236
   12ee4:	00013358 	cmpnei	zero,zero,1229
   12ee8:	00013364 	muli	zero,zero,1229
   12eec:	00013520 	cmpeqi	zero,zero,1236
   12ef0:	00013520 	cmpeqi	zero,zero,1236
   12ef4:	00013348 	cmpgei	zero,zero,1229
   12ef8:	00013520 	cmpeqi	zero,zero,1236
   12efc:	0001330c 	andi	zero,zero,1228
   12f00:	00013114 	movui	zero,1220
   12f04:	00012f60 	cmpeqi	zero,zero,1213
   12f08:	00013478 	rdprs	zero,zero,1233
   12f0c:	00013520 	cmpeqi	zero,zero,1236
   12f10:	0001342c 	andhi	zero,zero,1232
   12f14:	00013520 	cmpeqi	zero,zero,1236
   12f18:	00013084 	movi	zero,1218
   12f1c:	00013520 	cmpeqi	zero,zero,1236
   12f20:	00013520 	cmpeqi	zero,zero,1236
   12f24:	00012fe0 	cmpeqi	zero,zero,1215
   12f28:	dac02317 	ldw	r11,140(sp)
   12f2c:	5ac00017 	ldw	r11,0(r11)
   12f30:	dac02415 	stw	r11,144(sp)
   12f34:	dac02317 	ldw	r11,140(sp)
   12f38:	58800104 	addi	r2,r11,4
   12f3c:	dac02417 	ldw	r11,144(sp)
   12f40:	5802e90e 	bge	r11,zero,13ae8 <___svfiprintf_internal_r+0xe84>
   12f44:	dac02417 	ldw	r11,144(sp)
   12f48:	d8802315 	stw	r2,140(sp)
   12f4c:	02d7c83a 	sub	r11,zero,r11
   12f50:	dac02415 	stw	r11,144(sp)
   12f54:	94800114 	ori	r18,r18,4
   12f58:	98c00007 	ldb	r3,0(r19)
   12f5c:	003f9006 	br	12da0 <__alt_data_end+0xf0012da0>
   12f60:	00800c04 	movi	r2,48
   12f64:	dac02317 	ldw	r11,140(sp)
   12f68:	d8801d05 	stb	r2,116(sp)
   12f6c:	00801e04 	movi	r2,120
   12f70:	d8801d45 	stb	r2,117(sp)
   12f74:	d8001d85 	stb	zero,118(sp)
   12f78:	58c00104 	addi	r3,r11,4
   12f7c:	5f000017 	ldw	fp,0(r11)
   12f80:	0013883a 	mov	r9,zero
   12f84:	90800094 	ori	r2,r18,2
   12f88:	80032b16 	blt	r16,zero,13c38 <___svfiprintf_internal_r+0xfd4>
   12f8c:	00bfdfc4 	movi	r2,-129
   12f90:	90a4703a 	and	r18,r18,r2
   12f94:	d8c02315 	stw	r3,140(sp)
   12f98:	94800094 	ori	r18,r18,2
   12f9c:	e002dc26 	beq	fp,zero,13b10 <___svfiprintf_internal_r+0xeac>
   12fa0:	01020034 	movhi	r4,2048
   12fa4:	2100d804 	addi	r4,r4,864
   12fa8:	0015883a 	mov	r10,zero
   12fac:	d9002915 	stw	r4,164(sp)
   12fb0:	00002306 	br	13040 <___svfiprintf_internal_r+0x3dc>
   12fb4:	94800054 	ori	r18,r18,1
   12fb8:	98c00007 	ldb	r3,0(r19)
   12fbc:	003f7806 	br	12da0 <__alt_data_end+0xf0012da0>
   12fc0:	38803fcc 	andi	r2,r7,255
   12fc4:	1080201c 	xori	r2,r2,128
   12fc8:	10bfe004 	addi	r2,r2,-128
   12fcc:	1002f31e 	bne	r2,zero,13b9c <___svfiprintf_internal_r+0xf38>
   12fd0:	01000044 	movi	r4,1
   12fd4:	01c00804 	movi	r7,32
   12fd8:	98c00007 	ldb	r3,0(r19)
   12fdc:	003f7006 	br	12da0 <__alt_data_end+0xf0012da0>
   12fe0:	21003fcc 	andi	r4,r4,255
   12fe4:	2003aa1e 	bne	r4,zero,13e90 <___svfiprintf_internal_r+0x122c>
   12fe8:	00820034 	movhi	r2,2048
   12fec:	1080d804 	addi	r2,r2,864
   12ff0:	d8802915 	stw	r2,164(sp)
   12ff4:	9080080c 	andi	r2,r18,32
   12ff8:	1000ba26 	beq	r2,zero,132e4 <___svfiprintf_internal_r+0x680>
   12ffc:	dac02317 	ldw	r11,140(sp)
   13000:	5f000017 	ldw	fp,0(r11)
   13004:	5a400117 	ldw	r9,4(r11)
   13008:	5ac00204 	addi	r11,r11,8
   1300c:	dac02315 	stw	r11,140(sp)
   13010:	9080004c 	andi	r2,r18,1
   13014:	10029026 	beq	r2,zero,13a58 <___svfiprintf_internal_r+0xdf4>
   13018:	e244b03a 	or	r2,fp,r9
   1301c:	1002d41e 	bne	r2,zero,13b70 <___svfiprintf_internal_r+0xf0c>
   13020:	d8001d85 	stb	zero,118(sp)
   13024:	80030b16 	blt	r16,zero,13c54 <___svfiprintf_internal_r+0xff0>
   13028:	00bfdfc4 	movi	r2,-129
   1302c:	90a4703a 	and	r18,r18,r2
   13030:	0015883a 	mov	r10,zero
   13034:	80002426 	beq	r16,zero,130c8 <___svfiprintf_internal_r+0x464>
   13038:	0039883a 	mov	fp,zero
   1303c:	0013883a 	mov	r9,zero
   13040:	d9002917 	ldw	r4,164(sp)
   13044:	dc401a04 	addi	r17,sp,104
   13048:	e08003cc 	andi	r2,fp,15
   1304c:	4806973a 	slli	r3,r9,28
   13050:	2085883a 	add	r2,r4,r2
   13054:	e038d13a 	srli	fp,fp,4
   13058:	10800003 	ldbu	r2,0(r2)
   1305c:	4812d13a 	srli	r9,r9,4
   13060:	8c7fffc4 	addi	r17,r17,-1
   13064:	1f38b03a 	or	fp,r3,fp
   13068:	88800005 	stb	r2,0(r17)
   1306c:	e244b03a 	or	r2,fp,r9
   13070:	103ff51e 	bne	r2,zero,13048 <__alt_data_end+0xf0013048>
   13074:	dac01e17 	ldw	r11,120(sp)
   13078:	5c57c83a 	sub	r11,r11,r17
   1307c:	dac02115 	stw	r11,132(sp)
   13080:	00001406 	br	130d4 <___svfiprintf_internal_r+0x470>
   13084:	21003fcc 	andi	r4,r4,255
   13088:	2003741e 	bne	r4,zero,13e5c <___svfiprintf_internal_r+0x11f8>
   1308c:	9080080c 	andi	r2,r18,32
   13090:	10014526 	beq	r2,zero,135a8 <___svfiprintf_internal_r+0x944>
   13094:	dac02317 	ldw	r11,140(sp)
   13098:	d8001d85 	stb	zero,118(sp)
   1309c:	58c00204 	addi	r3,r11,8
   130a0:	5f000017 	ldw	fp,0(r11)
   130a4:	5a400117 	ldw	r9,4(r11)
   130a8:	8002d916 	blt	r16,zero,13c10 <___svfiprintf_internal_r+0xfac>
   130ac:	013fdfc4 	movi	r4,-129
   130b0:	e244b03a 	or	r2,fp,r9
   130b4:	d8c02315 	stw	r3,140(sp)
   130b8:	9124703a 	and	r18,r18,r4
   130bc:	0015883a 	mov	r10,zero
   130c0:	1000b91e 	bne	r2,zero,133a8 <___svfiprintf_internal_r+0x744>
   130c4:	8002e61e 	bne	r16,zero,13c60 <___svfiprintf_internal_r+0xffc>
   130c8:	0021883a 	mov	r16,zero
   130cc:	d8002115 	stw	zero,132(sp)
   130d0:	dc401a04 	addi	r17,sp,104
   130d4:	d8c02117 	ldw	r3,132(sp)
   130d8:	dc002015 	stw	r16,128(sp)
   130dc:	80c0010e 	bge	r16,r3,130e4 <___svfiprintf_internal_r+0x480>
   130e0:	d8c02015 	stw	r3,128(sp)
   130e4:	52803fcc 	andi	r10,r10,255
   130e8:	5280201c 	xori	r10,r10,128
   130ec:	52bfe004 	addi	r10,r10,-128
   130f0:	50003c26 	beq	r10,zero,131e4 <___svfiprintf_internal_r+0x580>
   130f4:	dac02017 	ldw	r11,128(sp)
   130f8:	5ac00044 	addi	r11,r11,1
   130fc:	dac02015 	stw	r11,128(sp)
   13100:	00003806 	br	131e4 <___svfiprintf_internal_r+0x580>
   13104:	01000044 	movi	r4,1
   13108:	01c00ac4 	movi	r7,43
   1310c:	98c00007 	ldb	r3,0(r19)
   13110:	003f2306 	br	12da0 <__alt_data_end+0xf0012da0>
   13114:	21003fcc 	andi	r4,r4,255
   13118:	2003481e 	bne	r4,zero,13e3c <___svfiprintf_internal_r+0x11d8>
   1311c:	9080080c 	andi	r2,r18,32
   13120:	10013b26 	beq	r2,zero,13610 <___svfiprintf_internal_r+0x9ac>
   13124:	dac02317 	ldw	r11,140(sp)
   13128:	d8001d85 	stb	zero,118(sp)
   1312c:	58800204 	addi	r2,r11,8
   13130:	5f000017 	ldw	fp,0(r11)
   13134:	5a400117 	ldw	r9,4(r11)
   13138:	8002a816 	blt	r16,zero,13bdc <___svfiprintf_internal_r+0xf78>
   1313c:	013fdfc4 	movi	r4,-129
   13140:	e246b03a 	or	r3,fp,r9
   13144:	d8802315 	stw	r2,140(sp)
   13148:	9124703a 	and	r18,r18,r4
   1314c:	18013c26 	beq	r3,zero,13640 <___svfiprintf_internal_r+0x9dc>
   13150:	0015883a 	mov	r10,zero
   13154:	dc401a04 	addi	r17,sp,104
   13158:	e006d0fa 	srli	r3,fp,3
   1315c:	4808977a 	slli	r4,r9,29
   13160:	4812d0fa 	srli	r9,r9,3
   13164:	e70001cc 	andi	fp,fp,7
   13168:	e0800c04 	addi	r2,fp,48
   1316c:	8c7fffc4 	addi	r17,r17,-1
   13170:	20f8b03a 	or	fp,r4,r3
   13174:	88800005 	stb	r2,0(r17)
   13178:	e246b03a 	or	r3,fp,r9
   1317c:	183ff61e 	bne	r3,zero,13158 <__alt_data_end+0xf0013158>
   13180:	90c0004c 	andi	r3,r18,1
   13184:	1800a526 	beq	r3,zero,1341c <___svfiprintf_internal_r+0x7b8>
   13188:	10803fcc 	andi	r2,r2,255
   1318c:	1080201c 	xori	r2,r2,128
   13190:	10bfe004 	addi	r2,r2,-128
   13194:	00c00c04 	movi	r3,48
   13198:	10ffb626 	beq	r2,r3,13074 <__alt_data_end+0xf0013074>
   1319c:	88ffffc5 	stb	r3,-1(r17)
   131a0:	d8c01e17 	ldw	r3,120(sp)
   131a4:	88bfffc4 	addi	r2,r17,-1
   131a8:	1023883a 	mov	r17,r2
   131ac:	1887c83a 	sub	r3,r3,r2
   131b0:	d8c02115 	stw	r3,132(sp)
   131b4:	003fc706 	br	130d4 <__alt_data_end+0xf00130d4>
   131b8:	dac02317 	ldw	r11,140(sp)
   131bc:	00c00044 	movi	r3,1
   131c0:	d8c02015 	stw	r3,128(sp)
   131c4:	58800017 	ldw	r2,0(r11)
   131c8:	5ac00104 	addi	r11,r11,4
   131cc:	d8001d85 	stb	zero,118(sp)
   131d0:	d8801005 	stb	r2,64(sp)
   131d4:	dac02315 	stw	r11,140(sp)
   131d8:	d8c02115 	stw	r3,132(sp)
   131dc:	dc401004 	addi	r17,sp,64
   131e0:	0021883a 	mov	r16,zero
   131e4:	90c0008c 	andi	r3,r18,2
   131e8:	d8c02215 	stw	r3,136(sp)
   131ec:	18000326 	beq	r3,zero,131fc <___svfiprintf_internal_r+0x598>
   131f0:	dac02017 	ldw	r11,128(sp)
   131f4:	5ac00084 	addi	r11,r11,2
   131f8:	dac02015 	stw	r11,128(sp)
   131fc:	90c0210c 	andi	r3,r18,132
   13200:	d8c02615 	stw	r3,152(sp)
   13204:	1801131e 	bne	r3,zero,13654 <___svfiprintf_internal_r+0x9f0>
   13208:	dac02417 	ldw	r11,144(sp)
   1320c:	d8c02017 	ldw	r3,128(sp)
   13210:	58f9c83a 	sub	fp,r11,r3
   13214:	07010f0e 	bge	zero,fp,13654 <___svfiprintf_internal_r+0x9f0>
   13218:	02400404 	movi	r9,16
   1321c:	d8c01c17 	ldw	r3,112(sp)
   13220:	d8801b17 	ldw	r2,108(sp)
   13224:	4f02d60e 	bge	r9,fp,13d80 <___svfiprintf_internal_r+0x111c>
   13228:	01420034 	movhi	r5,2048
   1322c:	29414504 	addi	r5,r5,1300
   13230:	d9402815 	stw	r5,160(sp)
   13234:	028001c4 	movi	r10,7
   13238:	00000306 	br	13248 <___svfiprintf_internal_r+0x5e4>
   1323c:	e73ffc04 	addi	fp,fp,-16
   13240:	42000204 	addi	r8,r8,8
   13244:	4f00150e 	bge	r9,fp,1329c <___svfiprintf_internal_r+0x638>
   13248:	18c00404 	addi	r3,r3,16
   1324c:	10800044 	addi	r2,r2,1
   13250:	45800015 	stw	r22,0(r8)
   13254:	42400115 	stw	r9,4(r8)
   13258:	d8c01c15 	stw	r3,112(sp)
   1325c:	d8801b15 	stw	r2,108(sp)
   13260:	50bff60e 	bge	r10,r2,1323c <__alt_data_end+0xf001323c>
   13264:	d9801a04 	addi	r6,sp,104
   13268:	b80b883a 	mov	r5,r23
   1326c:	a809883a 	mov	r4,r21
   13270:	da402c15 	stw	r9,176(sp)
   13274:	da802d15 	stw	r10,180(sp)
   13278:	0012a940 	call	12a94 <__ssprint_r>
   1327c:	da402c17 	ldw	r9,176(sp)
   13280:	da802d17 	ldw	r10,180(sp)
   13284:	1001851e 	bne	r2,zero,1389c <___svfiprintf_internal_r+0xc38>
   13288:	e73ffc04 	addi	fp,fp,-16
   1328c:	d8c01c17 	ldw	r3,112(sp)
   13290:	d8801b17 	ldw	r2,108(sp)
   13294:	d811883a 	mov	r8,sp
   13298:	4f3feb16 	blt	r9,fp,13248 <__alt_data_end+0xf0013248>
   1329c:	dac02817 	ldw	r11,160(sp)
   132a0:	e0c7883a 	add	r3,fp,r3
   132a4:	10800044 	addi	r2,r2,1
   132a8:	42c00015 	stw	r11,0(r8)
   132ac:	47000115 	stw	fp,4(r8)
   132b0:	d8c01c15 	stw	r3,112(sp)
   132b4:	d8801b15 	stw	r2,108(sp)
   132b8:	010001c4 	movi	r4,7
   132bc:	2081ee16 	blt	r4,r2,13a78 <___svfiprintf_internal_r+0xe14>
   132c0:	42000204 	addi	r8,r8,8
   132c4:	0000e506 	br	1365c <___svfiprintf_internal_r+0x9f8>
   132c8:	21003fcc 	andi	r4,r4,255
   132cc:	2002dd1e 	bne	r4,zero,13e44 <___svfiprintf_internal_r+0x11e0>
   132d0:	00820034 	movhi	r2,2048
   132d4:	1080d304 	addi	r2,r2,844
   132d8:	d8802915 	stw	r2,164(sp)
   132dc:	9080080c 	andi	r2,r18,32
   132e0:	103f461e 	bne	r2,zero,12ffc <__alt_data_end+0xf0012ffc>
   132e4:	9080040c 	andi	r2,r18,16
   132e8:	10022e1e 	bne	r2,zero,13ba4 <___svfiprintf_internal_r+0xf40>
   132ec:	9080100c 	andi	r2,r18,64
   132f0:	dac02317 	ldw	r11,140(sp)
   132f4:	10027326 	beq	r2,zero,13cc4 <___svfiprintf_internal_r+0x1060>
   132f8:	5f00000b 	ldhu	fp,0(r11)
   132fc:	5ac00104 	addi	r11,r11,4
   13300:	0013883a 	mov	r9,zero
   13304:	dac02315 	stw	r11,140(sp)
   13308:	003f4106 	br	13010 <__alt_data_end+0xf0013010>
   1330c:	21003fcc 	andi	r4,r4,255
   13310:	2002e11e 	bne	r4,zero,13e98 <___svfiprintf_internal_r+0x1234>
   13314:	9080080c 	andi	r2,r18,32
   13318:	1002011e 	bne	r2,zero,13b20 <___svfiprintf_internal_r+0xebc>
   1331c:	9080040c 	andi	r2,r18,16
   13320:	10023e1e 	bne	r2,zero,13c1c <___svfiprintf_internal_r+0xfb8>
   13324:	9480100c 	andi	r18,r18,64
   13328:	90023c26 	beq	r18,zero,13c1c <___svfiprintf_internal_r+0xfb8>
   1332c:	dac02317 	ldw	r11,140(sp)
   13330:	58800017 	ldw	r2,0(r11)
   13334:	5ac00104 	addi	r11,r11,4
   13338:	dac02315 	stw	r11,140(sp)
   1333c:	dac02517 	ldw	r11,148(sp)
   13340:	12c0000d 	sth	r11,0(r2)
   13344:	003e6e06 	br	12d00 <__alt_data_end+0xf0012d00>
   13348:	98c00007 	ldb	r3,0(r19)
   1334c:	1a422926 	beq	r3,r9,13bf4 <___svfiprintf_internal_r+0xf90>
   13350:	94800414 	ori	r18,r18,16
   13354:	003e9206 	br	12da0 <__alt_data_end+0xf0012da0>
   13358:	94801014 	ori	r18,r18,64
   1335c:	98c00007 	ldb	r3,0(r19)
   13360:	003e8f06 	br	12da0 <__alt_data_end+0xf0012da0>
   13364:	21003fcc 	andi	r4,r4,255
   13368:	2002c71e 	bne	r4,zero,13e88 <___svfiprintf_internal_r+0x1224>
   1336c:	9080080c 	andi	r2,r18,32
   13370:	10004926 	beq	r2,zero,13498 <___svfiprintf_internal_r+0x834>
   13374:	dac02317 	ldw	r11,140(sp)
   13378:	58800117 	ldw	r2,4(r11)
   1337c:	5f000017 	ldw	fp,0(r11)
   13380:	5ac00204 	addi	r11,r11,8
   13384:	dac02315 	stw	r11,140(sp)
   13388:	1013883a 	mov	r9,r2
   1338c:	10004b16 	blt	r2,zero,134bc <___svfiprintf_internal_r+0x858>
   13390:	da801d83 	ldbu	r10,118(sp)
   13394:	8001cb16 	blt	r16,zero,13ac4 <___svfiprintf_internal_r+0xe60>
   13398:	00ffdfc4 	movi	r3,-129
   1339c:	e244b03a 	or	r2,fp,r9
   133a0:	90e4703a 	and	r18,r18,r3
   133a4:	103f4726 	beq	r2,zero,130c4 <__alt_data_end+0xf00130c4>
   133a8:	48008c26 	beq	r9,zero,135dc <___svfiprintf_internal_r+0x978>
   133ac:	dc802015 	stw	r18,128(sp)
   133b0:	dc002115 	stw	r16,132(sp)
   133b4:	dc401a04 	addi	r17,sp,104
   133b8:	e021883a 	mov	r16,fp
   133bc:	da002215 	stw	r8,136(sp)
   133c0:	5039883a 	mov	fp,r10
   133c4:	4825883a 	mov	r18,r9
   133c8:	8009883a 	mov	r4,r16
   133cc:	900b883a 	mov	r5,r18
   133d0:	01800284 	movi	r6,10
   133d4:	000f883a 	mov	r7,zero
   133d8:	00163940 	call	16394 <__umoddi3>
   133dc:	10800c04 	addi	r2,r2,48
   133e0:	8c7fffc4 	addi	r17,r17,-1
   133e4:	8009883a 	mov	r4,r16
   133e8:	900b883a 	mov	r5,r18
   133ec:	88800005 	stb	r2,0(r17)
   133f0:	01800284 	movi	r6,10
   133f4:	000f883a 	mov	r7,zero
   133f8:	0015e1c0 	call	15e1c <__udivdi3>
   133fc:	1021883a 	mov	r16,r2
   13400:	10c4b03a 	or	r2,r2,r3
   13404:	1825883a 	mov	r18,r3
   13408:	103fef1e 	bne	r2,zero,133c8 <__alt_data_end+0xf00133c8>
   1340c:	dc802017 	ldw	r18,128(sp)
   13410:	dc002117 	ldw	r16,132(sp)
   13414:	da002217 	ldw	r8,136(sp)
   13418:	e015883a 	mov	r10,fp
   1341c:	d8c01e17 	ldw	r3,120(sp)
   13420:	1c47c83a 	sub	r3,r3,r17
   13424:	d8c02115 	stw	r3,132(sp)
   13428:	003f2a06 	br	130d4 <__alt_data_end+0xf00130d4>
   1342c:	dac02317 	ldw	r11,140(sp)
   13430:	d8001d85 	stb	zero,118(sp)
   13434:	5c400017 	ldw	r17,0(r11)
   13438:	5f000104 	addi	fp,r11,4
   1343c:	88022f26 	beq	r17,zero,13cfc <___svfiprintf_internal_r+0x1098>
   13440:	80022516 	blt	r16,zero,13cd8 <___svfiprintf_internal_r+0x1074>
   13444:	800d883a 	mov	r6,r16
   13448:	000b883a 	mov	r5,zero
   1344c:	8809883a 	mov	r4,r17
   13450:	da002c15 	stw	r8,176(sp)
   13454:	00110140 	call	11014 <memchr>
   13458:	da002c17 	ldw	r8,176(sp)
   1345c:	10026426 	beq	r2,zero,13df0 <___svfiprintf_internal_r+0x118c>
   13460:	1445c83a 	sub	r2,r2,r17
   13464:	d8802115 	stw	r2,132(sp)
   13468:	da801d83 	ldbu	r10,118(sp)
   1346c:	df002315 	stw	fp,140(sp)
   13470:	0021883a 	mov	r16,zero
   13474:	003f1706 	br	130d4 <__alt_data_end+0xf00130d4>
   13478:	94800814 	ori	r18,r18,32
   1347c:	98c00007 	ldb	r3,0(r19)
   13480:	003e4706 	br	12da0 <__alt_data_end+0xf0012da0>
   13484:	21003fcc 	andi	r4,r4,255
   13488:	2002701e 	bne	r4,zero,13e4c <___svfiprintf_internal_r+0x11e8>
   1348c:	94800414 	ori	r18,r18,16
   13490:	9080080c 	andi	r2,r18,32
   13494:	103fb71e 	bne	r2,zero,13374 <__alt_data_end+0xf0013374>
   13498:	9080040c 	andi	r2,r18,16
   1349c:	1001ab26 	beq	r2,zero,13b4c <___svfiprintf_internal_r+0xee8>
   134a0:	dac02317 	ldw	r11,140(sp)
   134a4:	5f000017 	ldw	fp,0(r11)
   134a8:	5ac00104 	addi	r11,r11,4
   134ac:	dac02315 	stw	r11,140(sp)
   134b0:	e013d7fa 	srai	r9,fp,31
   134b4:	4805883a 	mov	r2,r9
   134b8:	103fb50e 	bge	r2,zero,13390 <__alt_data_end+0xf0013390>
   134bc:	0739c83a 	sub	fp,zero,fp
   134c0:	02800b44 	movi	r10,45
   134c4:	e004c03a 	cmpne	r2,fp,zero
   134c8:	0253c83a 	sub	r9,zero,r9
   134cc:	da801d85 	stb	r10,118(sp)
   134d0:	4893c83a 	sub	r9,r9,r2
   134d4:	80023016 	blt	r16,zero,13d98 <___svfiprintf_internal_r+0x1134>
   134d8:	00bfdfc4 	movi	r2,-129
   134dc:	90a4703a 	and	r18,r18,r2
   134e0:	483fb21e 	bne	r9,zero,133ac <__alt_data_end+0xf00133ac>
   134e4:	00003d06 	br	135dc <___svfiprintf_internal_r+0x978>
   134e8:	9817883a 	mov	r11,r19
   134ec:	d8002415 	stw	zero,144(sp)
   134f0:	18bff404 	addi	r2,r3,-48
   134f4:	0019883a 	mov	r12,zero
   134f8:	58c00007 	ldb	r3,0(r11)
   134fc:	630002a4 	muli	r12,r12,10
   13500:	9cc00044 	addi	r19,r19,1
   13504:	9817883a 	mov	r11,r19
   13508:	1319883a 	add	r12,r2,r12
   1350c:	18bff404 	addi	r2,r3,-48
   13510:	30bff92e 	bgeu	r6,r2,134f8 <__alt_data_end+0xf00134f8>
   13514:	db002415 	stw	r12,144(sp)
   13518:	18bff804 	addi	r2,r3,-32
   1351c:	28be232e 	bgeu	r5,r2,12dac <__alt_data_end+0xf0012dac>
   13520:	21003fcc 	andi	r4,r4,255
   13524:	20024b1e 	bne	r4,zero,13e54 <___svfiprintf_internal_r+0x11f0>
   13528:	1800d626 	beq	r3,zero,13884 <___svfiprintf_internal_r+0xc20>
   1352c:	02c00044 	movi	r11,1
   13530:	dac02015 	stw	r11,128(sp)
   13534:	d8c01005 	stb	r3,64(sp)
   13538:	d8001d85 	stb	zero,118(sp)
   1353c:	dac02115 	stw	r11,132(sp)
   13540:	dc401004 	addi	r17,sp,64
   13544:	003f2606 	br	131e0 <__alt_data_end+0xf00131e0>
   13548:	94802014 	ori	r18,r18,128
   1354c:	98c00007 	ldb	r3,0(r19)
   13550:	003e1306 	br	12da0 <__alt_data_end+0xf0012da0>
   13554:	98c00007 	ldb	r3,0(r19)
   13558:	9ac00044 	addi	r11,r19,1
   1355c:	1a822b26 	beq	r3,r10,13e0c <___svfiprintf_internal_r+0x11a8>
   13560:	18bff404 	addi	r2,r3,-48
   13564:	0021883a 	mov	r16,zero
   13568:	30821e36 	bltu	r6,r2,13de4 <___svfiprintf_internal_r+0x1180>
   1356c:	58c00007 	ldb	r3,0(r11)
   13570:	840002a4 	muli	r16,r16,10
   13574:	5cc00044 	addi	r19,r11,1
   13578:	9817883a 	mov	r11,r19
   1357c:	80a1883a 	add	r16,r16,r2
   13580:	18bff404 	addi	r2,r3,-48
   13584:	30bff92e 	bgeu	r6,r2,1356c <__alt_data_end+0xf001356c>
   13588:	803e060e 	bge	r16,zero,12da4 <__alt_data_end+0xf0012da4>
   1358c:	043fffc4 	movi	r16,-1
   13590:	003e0406 	br	12da4 <__alt_data_end+0xf0012da4>
   13594:	21003fcc 	andi	r4,r4,255
   13598:	2002371e 	bne	r4,zero,13e78 <___svfiprintf_internal_r+0x1214>
   1359c:	94800414 	ori	r18,r18,16
   135a0:	9080080c 	andi	r2,r18,32
   135a4:	103ebb1e 	bne	r2,zero,13094 <__alt_data_end+0xf0013094>
   135a8:	9080040c 	andi	r2,r18,16
   135ac:	10013b26 	beq	r2,zero,13a9c <___svfiprintf_internal_r+0xe38>
   135b0:	dac02317 	ldw	r11,140(sp)
   135b4:	d8001d85 	stb	zero,118(sp)
   135b8:	0013883a 	mov	r9,zero
   135bc:	58800104 	addi	r2,r11,4
   135c0:	5f000017 	ldw	fp,0(r11)
   135c4:	80013d16 	blt	r16,zero,13abc <___svfiprintf_internal_r+0xe58>
   135c8:	00ffdfc4 	movi	r3,-129
   135cc:	d8802315 	stw	r2,140(sp)
   135d0:	90e4703a 	and	r18,r18,r3
   135d4:	0015883a 	mov	r10,zero
   135d8:	e03eba26 	beq	fp,zero,130c4 <__alt_data_end+0xf00130c4>
   135dc:	00800244 	movi	r2,9
   135e0:	173f7236 	bltu	r2,fp,133ac <__alt_data_end+0xf00133ac>
   135e4:	dac02b17 	ldw	r11,172(sp)
   135e8:	e7000c04 	addi	fp,fp,48
   135ec:	df0019c5 	stb	fp,103(sp)
   135f0:	dac02115 	stw	r11,132(sp)
   135f4:	dc4019c4 	addi	r17,sp,103
   135f8:	003eb606 	br	130d4 <__alt_data_end+0xf00130d4>
   135fc:	21003fcc 	andi	r4,r4,255
   13600:	20021f1e 	bne	r4,zero,13e80 <___svfiprintf_internal_r+0x121c>
   13604:	94800414 	ori	r18,r18,16
   13608:	9080080c 	andi	r2,r18,32
   1360c:	103ec51e 	bne	r2,zero,13124 <__alt_data_end+0xf0013124>
   13610:	9080040c 	andi	r2,r18,16
   13614:	10016926 	beq	r2,zero,13bbc <___svfiprintf_internal_r+0xf58>
   13618:	dac02317 	ldw	r11,140(sp)
   1361c:	d8001d85 	stb	zero,118(sp)
   13620:	0013883a 	mov	r9,zero
   13624:	58800104 	addi	r2,r11,4
   13628:	5f000017 	ldw	fp,0(r11)
   1362c:	80016b16 	blt	r16,zero,13bdc <___svfiprintf_internal_r+0xf78>
   13630:	00ffdfc4 	movi	r3,-129
   13634:	d8802315 	stw	r2,140(sp)
   13638:	90e4703a 	and	r18,r18,r3
   1363c:	e03ec41e 	bne	fp,zero,13150 <__alt_data_end+0xf0013150>
   13640:	0015883a 	mov	r10,zero
   13644:	8001c226 	beq	r16,zero,13d50 <___svfiprintf_internal_r+0x10ec>
   13648:	0039883a 	mov	fp,zero
   1364c:	0013883a 	mov	r9,zero
   13650:	003ec006 	br	13154 <__alt_data_end+0xf0013154>
   13654:	d8c01c17 	ldw	r3,112(sp)
   13658:	d8801b17 	ldw	r2,108(sp)
   1365c:	d9001d87 	ldb	r4,118(sp)
   13660:	20000b26 	beq	r4,zero,13690 <___svfiprintf_internal_r+0xa2c>
   13664:	d9001d84 	addi	r4,sp,118
   13668:	18c00044 	addi	r3,r3,1
   1366c:	10800044 	addi	r2,r2,1
   13670:	41000015 	stw	r4,0(r8)
   13674:	01000044 	movi	r4,1
   13678:	41000115 	stw	r4,4(r8)
   1367c:	d8c01c15 	stw	r3,112(sp)
   13680:	d8801b15 	stw	r2,108(sp)
   13684:	010001c4 	movi	r4,7
   13688:	2080e116 	blt	r4,r2,13a10 <___svfiprintf_internal_r+0xdac>
   1368c:	42000204 	addi	r8,r8,8
   13690:	dac02217 	ldw	r11,136(sp)
   13694:	58000b26 	beq	r11,zero,136c4 <___svfiprintf_internal_r+0xa60>
   13698:	d9001d04 	addi	r4,sp,116
   1369c:	18c00084 	addi	r3,r3,2
   136a0:	10800044 	addi	r2,r2,1
   136a4:	41000015 	stw	r4,0(r8)
   136a8:	01000084 	movi	r4,2
   136ac:	41000115 	stw	r4,4(r8)
   136b0:	d8c01c15 	stw	r3,112(sp)
   136b4:	d8801b15 	stw	r2,108(sp)
   136b8:	010001c4 	movi	r4,7
   136bc:	2080dd16 	blt	r4,r2,13a34 <___svfiprintf_internal_r+0xdd0>
   136c0:	42000204 	addi	r8,r8,8
   136c4:	dac02617 	ldw	r11,152(sp)
   136c8:	01002004 	movi	r4,128
   136cc:	59008426 	beq	r11,r4,138e0 <___svfiprintf_internal_r+0xc7c>
   136d0:	dac02117 	ldw	r11,132(sp)
   136d4:	82e1c83a 	sub	r16,r16,r11
   136d8:	0400270e 	bge	zero,r16,13778 <___svfiprintf_internal_r+0xb14>
   136dc:	01c00404 	movi	r7,16
   136e0:	3c016a0e 	bge	r7,r16,13c8c <___svfiprintf_internal_r+0x1028>
   136e4:	01420034 	movhi	r5,2048
   136e8:	29414104 	addi	r5,r5,1284
   136ec:	d9402215 	stw	r5,136(sp)
   136f0:	070001c4 	movi	fp,7
   136f4:	00000306 	br	13704 <___svfiprintf_internal_r+0xaa0>
   136f8:	843ffc04 	addi	r16,r16,-16
   136fc:	42000204 	addi	r8,r8,8
   13700:	3c00130e 	bge	r7,r16,13750 <___svfiprintf_internal_r+0xaec>
   13704:	18c00404 	addi	r3,r3,16
   13708:	10800044 	addi	r2,r2,1
   1370c:	45000015 	stw	r20,0(r8)
   13710:	41c00115 	stw	r7,4(r8)
   13714:	d8c01c15 	stw	r3,112(sp)
   13718:	d8801b15 	stw	r2,108(sp)
   1371c:	e0bff60e 	bge	fp,r2,136f8 <__alt_data_end+0xf00136f8>
   13720:	d9801a04 	addi	r6,sp,104
   13724:	b80b883a 	mov	r5,r23
   13728:	a809883a 	mov	r4,r21
   1372c:	d9c02c15 	stw	r7,176(sp)
   13730:	0012a940 	call	12a94 <__ssprint_r>
   13734:	d9c02c17 	ldw	r7,176(sp)
   13738:	1000581e 	bne	r2,zero,1389c <___svfiprintf_internal_r+0xc38>
   1373c:	843ffc04 	addi	r16,r16,-16
   13740:	d8c01c17 	ldw	r3,112(sp)
   13744:	d8801b17 	ldw	r2,108(sp)
   13748:	d811883a 	mov	r8,sp
   1374c:	3c3fed16 	blt	r7,r16,13704 <__alt_data_end+0xf0013704>
   13750:	dac02217 	ldw	r11,136(sp)
   13754:	1c07883a 	add	r3,r3,r16
   13758:	10800044 	addi	r2,r2,1
   1375c:	42c00015 	stw	r11,0(r8)
   13760:	44000115 	stw	r16,4(r8)
   13764:	d8c01c15 	stw	r3,112(sp)
   13768:	d8801b15 	stw	r2,108(sp)
   1376c:	010001c4 	movi	r4,7
   13770:	20809e16 	blt	r4,r2,139ec <___svfiprintf_internal_r+0xd88>
   13774:	42000204 	addi	r8,r8,8
   13778:	dac02117 	ldw	r11,132(sp)
   1377c:	10800044 	addi	r2,r2,1
   13780:	44400015 	stw	r17,0(r8)
   13784:	58c7883a 	add	r3,r11,r3
   13788:	42c00115 	stw	r11,4(r8)
   1378c:	d8c01c15 	stw	r3,112(sp)
   13790:	d8801b15 	stw	r2,108(sp)
   13794:	010001c4 	movi	r4,7
   13798:	20807f16 	blt	r4,r2,13998 <___svfiprintf_internal_r+0xd34>
   1379c:	42000204 	addi	r8,r8,8
   137a0:	9480010c 	andi	r18,r18,4
   137a4:	90002926 	beq	r18,zero,1384c <___svfiprintf_internal_r+0xbe8>
   137a8:	dac02417 	ldw	r11,144(sp)
   137ac:	d8802017 	ldw	r2,128(sp)
   137b0:	58a1c83a 	sub	r16,r11,r2
   137b4:	0400250e 	bge	zero,r16,1384c <___svfiprintf_internal_r+0xbe8>
   137b8:	04400404 	movi	r17,16
   137bc:	d8801b17 	ldw	r2,108(sp)
   137c0:	8c017c0e 	bge	r17,r16,13db4 <___svfiprintf_internal_r+0x1150>
   137c4:	01420034 	movhi	r5,2048
   137c8:	29414504 	addi	r5,r5,1300
   137cc:	d9402815 	stw	r5,160(sp)
   137d0:	048001c4 	movi	r18,7
   137d4:	00000306 	br	137e4 <___svfiprintf_internal_r+0xb80>
   137d8:	843ffc04 	addi	r16,r16,-16
   137dc:	42000204 	addi	r8,r8,8
   137e0:	8c00110e 	bge	r17,r16,13828 <___svfiprintf_internal_r+0xbc4>
   137e4:	18c00404 	addi	r3,r3,16
   137e8:	10800044 	addi	r2,r2,1
   137ec:	45800015 	stw	r22,0(r8)
   137f0:	44400115 	stw	r17,4(r8)
   137f4:	d8c01c15 	stw	r3,112(sp)
   137f8:	d8801b15 	stw	r2,108(sp)
   137fc:	90bff60e 	bge	r18,r2,137d8 <__alt_data_end+0xf00137d8>
   13800:	d9801a04 	addi	r6,sp,104
   13804:	b80b883a 	mov	r5,r23
   13808:	a809883a 	mov	r4,r21
   1380c:	0012a940 	call	12a94 <__ssprint_r>
   13810:	1000221e 	bne	r2,zero,1389c <___svfiprintf_internal_r+0xc38>
   13814:	843ffc04 	addi	r16,r16,-16
   13818:	d8c01c17 	ldw	r3,112(sp)
   1381c:	d8801b17 	ldw	r2,108(sp)
   13820:	d811883a 	mov	r8,sp
   13824:	8c3fef16 	blt	r17,r16,137e4 <__alt_data_end+0xf00137e4>
   13828:	dac02817 	ldw	r11,160(sp)
   1382c:	1c07883a 	add	r3,r3,r16
   13830:	10800044 	addi	r2,r2,1
   13834:	42c00015 	stw	r11,0(r8)
   13838:	44000115 	stw	r16,4(r8)
   1383c:	d8c01c15 	stw	r3,112(sp)
   13840:	d8801b15 	stw	r2,108(sp)
   13844:	010001c4 	movi	r4,7
   13848:	2080aa16 	blt	r4,r2,13af4 <___svfiprintf_internal_r+0xe90>
   1384c:	d8802417 	ldw	r2,144(sp)
   13850:	dac02017 	ldw	r11,128(sp)
   13854:	12c0010e 	bge	r2,r11,1385c <___svfiprintf_internal_r+0xbf8>
   13858:	5805883a 	mov	r2,r11
   1385c:	dac02517 	ldw	r11,148(sp)
   13860:	5897883a 	add	r11,r11,r2
   13864:	dac02515 	stw	r11,148(sp)
   13868:	1800531e 	bne	r3,zero,139b8 <___svfiprintf_internal_r+0xd54>
   1386c:	98800007 	ldb	r2,0(r19)
   13870:	d8001b15 	stw	zero,108(sp)
   13874:	d811883a 	mov	r8,sp
   13878:	103d231e 	bne	r2,zero,12d08 <__alt_data_end+0xf0012d08>
   1387c:	9823883a 	mov	r17,r19
   13880:	003d3906 	br	12d68 <__alt_data_end+0xf0012d68>
   13884:	d8801c17 	ldw	r2,112(sp)
   13888:	10000426 	beq	r2,zero,1389c <___svfiprintf_internal_r+0xc38>
   1388c:	d9402717 	ldw	r5,156(sp)
   13890:	d9002a17 	ldw	r4,168(sp)
   13894:	d9801a04 	addi	r6,sp,104
   13898:	0012a940 	call	12a94 <__ssprint_r>
   1389c:	dac02717 	ldw	r11,156(sp)
   138a0:	d8802517 	ldw	r2,148(sp)
   138a4:	58c0030b 	ldhu	r3,12(r11)
   138a8:	18c0100c 	andi	r3,r3,64
   138ac:	1801381e 	bne	r3,zero,13d90 <___svfiprintf_internal_r+0x112c>
   138b0:	dfc03717 	ldw	ra,220(sp)
   138b4:	df003617 	ldw	fp,216(sp)
   138b8:	ddc03517 	ldw	r23,212(sp)
   138bc:	dd803417 	ldw	r22,208(sp)
   138c0:	dd403317 	ldw	r21,204(sp)
   138c4:	dd003217 	ldw	r20,200(sp)
   138c8:	dcc03117 	ldw	r19,196(sp)
   138cc:	dc803017 	ldw	r18,192(sp)
   138d0:	dc402f17 	ldw	r17,188(sp)
   138d4:	dc002e17 	ldw	r16,184(sp)
   138d8:	dec03804 	addi	sp,sp,224
   138dc:	f800283a 	ret
   138e0:	dac02417 	ldw	r11,144(sp)
   138e4:	d9002017 	ldw	r4,128(sp)
   138e8:	5939c83a 	sub	fp,r11,r4
   138ec:	073f780e 	bge	zero,fp,136d0 <__alt_data_end+0xf00136d0>
   138f0:	02400404 	movi	r9,16
   138f4:	4f01370e 	bge	r9,fp,13dd4 <___svfiprintf_internal_r+0x1170>
   138f8:	02c20034 	movhi	r11,2048
   138fc:	5ac14104 	addi	r11,r11,1284
   13900:	dac02215 	stw	r11,136(sp)
   13904:	028001c4 	movi	r10,7
   13908:	00000306 	br	13918 <___svfiprintf_internal_r+0xcb4>
   1390c:	e73ffc04 	addi	fp,fp,-16
   13910:	42000204 	addi	r8,r8,8
   13914:	4f00150e 	bge	r9,fp,1396c <___svfiprintf_internal_r+0xd08>
   13918:	18c00404 	addi	r3,r3,16
   1391c:	10800044 	addi	r2,r2,1
   13920:	45000015 	stw	r20,0(r8)
   13924:	42400115 	stw	r9,4(r8)
   13928:	d8c01c15 	stw	r3,112(sp)
   1392c:	d8801b15 	stw	r2,108(sp)
   13930:	50bff60e 	bge	r10,r2,1390c <__alt_data_end+0xf001390c>
   13934:	d9801a04 	addi	r6,sp,104
   13938:	b80b883a 	mov	r5,r23
   1393c:	a809883a 	mov	r4,r21
   13940:	da402c15 	stw	r9,176(sp)
   13944:	da802d15 	stw	r10,180(sp)
   13948:	0012a940 	call	12a94 <__ssprint_r>
   1394c:	da402c17 	ldw	r9,176(sp)
   13950:	da802d17 	ldw	r10,180(sp)
   13954:	103fd11e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   13958:	e73ffc04 	addi	fp,fp,-16
   1395c:	d8c01c17 	ldw	r3,112(sp)
   13960:	d8801b17 	ldw	r2,108(sp)
   13964:	d811883a 	mov	r8,sp
   13968:	4f3feb16 	blt	r9,fp,13918 <__alt_data_end+0xf0013918>
   1396c:	dac02217 	ldw	r11,136(sp)
   13970:	1f07883a 	add	r3,r3,fp
   13974:	10800044 	addi	r2,r2,1
   13978:	42c00015 	stw	r11,0(r8)
   1397c:	47000115 	stw	fp,4(r8)
   13980:	d8c01c15 	stw	r3,112(sp)
   13984:	d8801b15 	stw	r2,108(sp)
   13988:	010001c4 	movi	r4,7
   1398c:	2080b616 	blt	r4,r2,13c68 <___svfiprintf_internal_r+0x1004>
   13990:	42000204 	addi	r8,r8,8
   13994:	003f4e06 	br	136d0 <__alt_data_end+0xf00136d0>
   13998:	d9801a04 	addi	r6,sp,104
   1399c:	b80b883a 	mov	r5,r23
   139a0:	a809883a 	mov	r4,r21
   139a4:	0012a940 	call	12a94 <__ssprint_r>
   139a8:	103fbc1e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   139ac:	d8c01c17 	ldw	r3,112(sp)
   139b0:	d811883a 	mov	r8,sp
   139b4:	003f7a06 	br	137a0 <__alt_data_end+0xf00137a0>
   139b8:	d9801a04 	addi	r6,sp,104
   139bc:	b80b883a 	mov	r5,r23
   139c0:	a809883a 	mov	r4,r21
   139c4:	0012a940 	call	12a94 <__ssprint_r>
   139c8:	103fa826 	beq	r2,zero,1386c <__alt_data_end+0xf001386c>
   139cc:	003fb306 	br	1389c <__alt_data_end+0xf001389c>
   139d0:	d9801a04 	addi	r6,sp,104
   139d4:	b80b883a 	mov	r5,r23
   139d8:	a809883a 	mov	r4,r21
   139dc:	0012a940 	call	12a94 <__ssprint_r>
   139e0:	103fae1e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   139e4:	d811883a 	mov	r8,sp
   139e8:	003cdc06 	br	12d5c <__alt_data_end+0xf0012d5c>
   139ec:	d9801a04 	addi	r6,sp,104
   139f0:	b80b883a 	mov	r5,r23
   139f4:	a809883a 	mov	r4,r21
   139f8:	0012a940 	call	12a94 <__ssprint_r>
   139fc:	103fa71e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   13a00:	d8c01c17 	ldw	r3,112(sp)
   13a04:	d8801b17 	ldw	r2,108(sp)
   13a08:	d811883a 	mov	r8,sp
   13a0c:	003f5a06 	br	13778 <__alt_data_end+0xf0013778>
   13a10:	d9801a04 	addi	r6,sp,104
   13a14:	b80b883a 	mov	r5,r23
   13a18:	a809883a 	mov	r4,r21
   13a1c:	0012a940 	call	12a94 <__ssprint_r>
   13a20:	103f9e1e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   13a24:	d8c01c17 	ldw	r3,112(sp)
   13a28:	d8801b17 	ldw	r2,108(sp)
   13a2c:	d811883a 	mov	r8,sp
   13a30:	003f1706 	br	13690 <__alt_data_end+0xf0013690>
   13a34:	d9801a04 	addi	r6,sp,104
   13a38:	b80b883a 	mov	r5,r23
   13a3c:	a809883a 	mov	r4,r21
   13a40:	0012a940 	call	12a94 <__ssprint_r>
   13a44:	103f951e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   13a48:	d8c01c17 	ldw	r3,112(sp)
   13a4c:	d8801b17 	ldw	r2,108(sp)
   13a50:	d811883a 	mov	r8,sp
   13a54:	003f1b06 	br	136c4 <__alt_data_end+0xf00136c4>
   13a58:	d8001d85 	stb	zero,118(sp)
   13a5c:	80007b16 	blt	r16,zero,13c4c <___svfiprintf_internal_r+0xfe8>
   13a60:	00ffdfc4 	movi	r3,-129
   13a64:	e244b03a 	or	r2,fp,r9
   13a68:	90e4703a 	and	r18,r18,r3
   13a6c:	103d7026 	beq	r2,zero,13030 <__alt_data_end+0xf0013030>
   13a70:	0015883a 	mov	r10,zero
   13a74:	003d7206 	br	13040 <__alt_data_end+0xf0013040>
   13a78:	d9801a04 	addi	r6,sp,104
   13a7c:	b80b883a 	mov	r5,r23
   13a80:	a809883a 	mov	r4,r21
   13a84:	0012a940 	call	12a94 <__ssprint_r>
   13a88:	103f841e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   13a8c:	d8c01c17 	ldw	r3,112(sp)
   13a90:	d8801b17 	ldw	r2,108(sp)
   13a94:	d811883a 	mov	r8,sp
   13a98:	003ef006 	br	1365c <__alt_data_end+0xf001365c>
   13a9c:	9080100c 	andi	r2,r18,64
   13aa0:	d8001d85 	stb	zero,118(sp)
   13aa4:	dac02317 	ldw	r11,140(sp)
   13aa8:	10008126 	beq	r2,zero,13cb0 <___svfiprintf_internal_r+0x104c>
   13aac:	58800104 	addi	r2,r11,4
   13ab0:	5f00000b 	ldhu	fp,0(r11)
   13ab4:	0013883a 	mov	r9,zero
   13ab8:	803ec30e 	bge	r16,zero,135c8 <__alt_data_end+0xf00135c8>
   13abc:	d8802315 	stw	r2,140(sp)
   13ac0:	0015883a 	mov	r10,zero
   13ac4:	e244b03a 	or	r2,fp,r9
   13ac8:	103e371e 	bne	r2,zero,133a8 <__alt_data_end+0xf00133a8>
   13acc:	00800044 	movi	r2,1
   13ad0:	10803fcc 	andi	r2,r2,255
   13ad4:	00c00044 	movi	r3,1
   13ad8:	10c06126 	beq	r2,r3,13c60 <___svfiprintf_internal_r+0xffc>
   13adc:	00c00084 	movi	r3,2
   13ae0:	10fd5526 	beq	r2,r3,13038 <__alt_data_end+0xf0013038>
   13ae4:	003ed806 	br	13648 <__alt_data_end+0xf0013648>
   13ae8:	d8802315 	stw	r2,140(sp)
   13aec:	98c00007 	ldb	r3,0(r19)
   13af0:	003cab06 	br	12da0 <__alt_data_end+0xf0012da0>
   13af4:	d9801a04 	addi	r6,sp,104
   13af8:	b80b883a 	mov	r5,r23
   13afc:	a809883a 	mov	r4,r21
   13b00:	0012a940 	call	12a94 <__ssprint_r>
   13b04:	103f651e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   13b08:	d8c01c17 	ldw	r3,112(sp)
   13b0c:	003f4f06 	br	1384c <__alt_data_end+0xf001384c>
   13b10:	00820034 	movhi	r2,2048
   13b14:	1080d804 	addi	r2,r2,864
   13b18:	d8802915 	stw	r2,164(sp)
   13b1c:	003d4406 	br	13030 <__alt_data_end+0xf0013030>
   13b20:	dac02317 	ldw	r11,140(sp)
   13b24:	58800017 	ldw	r2,0(r11)
   13b28:	dac02517 	ldw	r11,148(sp)
   13b2c:	5807d7fa 	srai	r3,r11,31
   13b30:	dac02317 	ldw	r11,140(sp)
   13b34:	10c00115 	stw	r3,4(r2)
   13b38:	5ac00104 	addi	r11,r11,4
   13b3c:	dac02315 	stw	r11,140(sp)
   13b40:	dac02517 	ldw	r11,148(sp)
   13b44:	12c00015 	stw	r11,0(r2)
   13b48:	003c6d06 	br	12d00 <__alt_data_end+0xf0012d00>
   13b4c:	9080100c 	andi	r2,r18,64
   13b50:	dac02317 	ldw	r11,140(sp)
   13b54:	103e5326 	beq	r2,zero,134a4 <__alt_data_end+0xf00134a4>
   13b58:	5f00000f 	ldh	fp,0(r11)
   13b5c:	5ac00104 	addi	r11,r11,4
   13b60:	dac02315 	stw	r11,140(sp)
   13b64:	e013d7fa 	srai	r9,fp,31
   13b68:	4805883a 	mov	r2,r9
   13b6c:	003e0706 	br	1338c <__alt_data_end+0xf001338c>
   13b70:	00800c04 	movi	r2,48
   13b74:	d8801d05 	stb	r2,116(sp)
   13b78:	d8c01d45 	stb	r3,117(sp)
   13b7c:	d8001d85 	stb	zero,118(sp)
   13b80:	90800094 	ori	r2,r18,2
   13b84:	80008f16 	blt	r16,zero,13dc4 <___svfiprintf_internal_r+0x1160>
   13b88:	00bfdfc4 	movi	r2,-129
   13b8c:	90a4703a 	and	r18,r18,r2
   13b90:	94800094 	ori	r18,r18,2
   13b94:	0015883a 	mov	r10,zero
   13b98:	003d2906 	br	13040 <__alt_data_end+0xf0013040>
   13b9c:	98c00007 	ldb	r3,0(r19)
   13ba0:	003c7f06 	br	12da0 <__alt_data_end+0xf0012da0>
   13ba4:	dac02317 	ldw	r11,140(sp)
   13ba8:	0013883a 	mov	r9,zero
   13bac:	5f000017 	ldw	fp,0(r11)
   13bb0:	5ac00104 	addi	r11,r11,4
   13bb4:	dac02315 	stw	r11,140(sp)
   13bb8:	003d1506 	br	13010 <__alt_data_end+0xf0013010>
   13bbc:	9080100c 	andi	r2,r18,64
   13bc0:	d8001d85 	stb	zero,118(sp)
   13bc4:	dac02317 	ldw	r11,140(sp)
   13bc8:	10003426 	beq	r2,zero,13c9c <___svfiprintf_internal_r+0x1038>
   13bcc:	58800104 	addi	r2,r11,4
   13bd0:	5f00000b 	ldhu	fp,0(r11)
   13bd4:	0013883a 	mov	r9,zero
   13bd8:	803e950e 	bge	r16,zero,13630 <__alt_data_end+0xf0013630>
   13bdc:	e246b03a 	or	r3,fp,r9
   13be0:	d8802315 	stw	r2,140(sp)
   13be4:	183d5a1e 	bne	r3,zero,13150 <__alt_data_end+0xf0013150>
   13be8:	0015883a 	mov	r10,zero
   13bec:	0005883a 	mov	r2,zero
   13bf0:	003fb706 	br	13ad0 <__alt_data_end+0xf0013ad0>
   13bf4:	98c00043 	ldbu	r3,1(r19)
   13bf8:	94800814 	ori	r18,r18,32
   13bfc:	9cc00044 	addi	r19,r19,1
   13c00:	18c03fcc 	andi	r3,r3,255
   13c04:	18c0201c 	xori	r3,r3,128
   13c08:	18ffe004 	addi	r3,r3,-128
   13c0c:	003c6406 	br	12da0 <__alt_data_end+0xf0012da0>
   13c10:	d8c02315 	stw	r3,140(sp)
   13c14:	0015883a 	mov	r10,zero
   13c18:	003faa06 	br	13ac4 <__alt_data_end+0xf0013ac4>
   13c1c:	dac02317 	ldw	r11,140(sp)
   13c20:	58800017 	ldw	r2,0(r11)
   13c24:	5ac00104 	addi	r11,r11,4
   13c28:	dac02315 	stw	r11,140(sp)
   13c2c:	dac02517 	ldw	r11,148(sp)
   13c30:	12c00015 	stw	r11,0(r2)
   13c34:	003c3206 	br	12d00 <__alt_data_end+0xf0012d00>
   13c38:	01020034 	movhi	r4,2048
   13c3c:	2100d804 	addi	r4,r4,864
   13c40:	d9002915 	stw	r4,164(sp)
   13c44:	d8c02315 	stw	r3,140(sp)
   13c48:	1025883a 	mov	r18,r2
   13c4c:	e244b03a 	or	r2,fp,r9
   13c50:	103f871e 	bne	r2,zero,13a70 <__alt_data_end+0xf0013a70>
   13c54:	0015883a 	mov	r10,zero
   13c58:	00800084 	movi	r2,2
   13c5c:	003f9c06 	br	13ad0 <__alt_data_end+0xf0013ad0>
   13c60:	0039883a 	mov	fp,zero
   13c64:	003e5f06 	br	135e4 <__alt_data_end+0xf00135e4>
   13c68:	d9801a04 	addi	r6,sp,104
   13c6c:	b80b883a 	mov	r5,r23
   13c70:	a809883a 	mov	r4,r21
   13c74:	0012a940 	call	12a94 <__ssprint_r>
   13c78:	103f081e 	bne	r2,zero,1389c <__alt_data_end+0xf001389c>
   13c7c:	d8c01c17 	ldw	r3,112(sp)
   13c80:	d8801b17 	ldw	r2,108(sp)
   13c84:	d811883a 	mov	r8,sp
   13c88:	003e9106 	br	136d0 <__alt_data_end+0xf00136d0>
   13c8c:	01020034 	movhi	r4,2048
   13c90:	21014104 	addi	r4,r4,1284
   13c94:	d9002215 	stw	r4,136(sp)
   13c98:	003ead06 	br	13750 <__alt_data_end+0xf0013750>
   13c9c:	58800104 	addi	r2,r11,4
   13ca0:	5f000017 	ldw	fp,0(r11)
   13ca4:	0013883a 	mov	r9,zero
   13ca8:	803e610e 	bge	r16,zero,13630 <__alt_data_end+0xf0013630>
   13cac:	003fcb06 	br	13bdc <__alt_data_end+0xf0013bdc>
   13cb0:	58800104 	addi	r2,r11,4
   13cb4:	5f000017 	ldw	fp,0(r11)
   13cb8:	0013883a 	mov	r9,zero
   13cbc:	803e420e 	bge	r16,zero,135c8 <__alt_data_end+0xf00135c8>
   13cc0:	003f7e06 	br	13abc <__alt_data_end+0xf0013abc>
   13cc4:	5f000017 	ldw	fp,0(r11)
   13cc8:	5ac00104 	addi	r11,r11,4
   13ccc:	0013883a 	mov	r9,zero
   13cd0:	dac02315 	stw	r11,140(sp)
   13cd4:	003cce06 	br	13010 <__alt_data_end+0xf0013010>
   13cd8:	8809883a 	mov	r4,r17
   13cdc:	da002c15 	stw	r8,176(sp)
   13ce0:	00095940 	call	9594 <strlen>
   13ce4:	d8802115 	stw	r2,132(sp)
   13ce8:	da801d83 	ldbu	r10,118(sp)
   13cec:	df002315 	stw	fp,140(sp)
   13cf0:	0021883a 	mov	r16,zero
   13cf4:	da002c17 	ldw	r8,176(sp)
   13cf8:	003cf606 	br	130d4 <__alt_data_end+0xf00130d4>
   13cfc:	00800184 	movi	r2,6
   13d00:	1400012e 	bgeu	r2,r16,13d08 <___svfiprintf_internal_r+0x10a4>
   13d04:	1021883a 	mov	r16,r2
   13d08:	dc002115 	stw	r16,132(sp)
   13d0c:	8005883a 	mov	r2,r16
   13d10:	80003c16 	blt	r16,zero,13e04 <___svfiprintf_internal_r+0x11a0>
   13d14:	04420034 	movhi	r17,2048
   13d18:	d8802015 	stw	r2,128(sp)
   13d1c:	df002315 	stw	fp,140(sp)
   13d20:	8c40dd04 	addi	r17,r17,884
   13d24:	003d2e06 	br	131e0 <__alt_data_end+0xf00131e0>
   13d28:	04001004 	movi	r16,64
   13d2c:	800b883a 	mov	r5,r16
   13d30:	00108080 	call	10808 <_malloc_r>
   13d34:	dac02717 	ldw	r11,156(sp)
   13d38:	58800015 	stw	r2,0(r11)
   13d3c:	58800415 	stw	r2,16(r11)
   13d40:	10004826 	beq	r2,zero,13e64 <___svfiprintf_internal_r+0x1200>
   13d44:	dac02717 	ldw	r11,156(sp)
   13d48:	5c000515 	stw	r16,20(r11)
   13d4c:	003bd906 	br	12cb4 <__alt_data_end+0xf0012cb4>
   13d50:	9080004c 	andi	r2,r18,1
   13d54:	0015883a 	mov	r10,zero
   13d58:	10000626 	beq	r2,zero,13d74 <___svfiprintf_internal_r+0x1110>
   13d5c:	dac02b17 	ldw	r11,172(sp)
   13d60:	00800c04 	movi	r2,48
   13d64:	d88019c5 	stb	r2,103(sp)
   13d68:	dac02115 	stw	r11,132(sp)
   13d6c:	dc4019c4 	addi	r17,sp,103
   13d70:	003cd806 	br	130d4 <__alt_data_end+0xf00130d4>
   13d74:	d8002115 	stw	zero,132(sp)
   13d78:	dc401a04 	addi	r17,sp,104
   13d7c:	003cd506 	br	130d4 <__alt_data_end+0xf00130d4>
   13d80:	01020034 	movhi	r4,2048
   13d84:	21014504 	addi	r4,r4,1300
   13d88:	d9002815 	stw	r4,160(sp)
   13d8c:	003d4306 	br	1329c <__alt_data_end+0xf001329c>
   13d90:	00bfffc4 	movi	r2,-1
   13d94:	003ec606 	br	138b0 <__alt_data_end+0xf00138b0>
   13d98:	00800044 	movi	r2,1
   13d9c:	10803fcc 	andi	r2,r2,255
   13da0:	00c00044 	movi	r3,1
   13da4:	10fd8026 	beq	r2,r3,133a8 <__alt_data_end+0xf00133a8>
   13da8:	00c00084 	movi	r3,2
   13dac:	10fca426 	beq	r2,r3,13040 <__alt_data_end+0xf0013040>
   13db0:	003ce806 	br	13154 <__alt_data_end+0xf0013154>
   13db4:	01020034 	movhi	r4,2048
   13db8:	21014504 	addi	r4,r4,1300
   13dbc:	d9002815 	stw	r4,160(sp)
   13dc0:	003e9906 	br	13828 <__alt_data_end+0xf0013828>
   13dc4:	1025883a 	mov	r18,r2
   13dc8:	0015883a 	mov	r10,zero
   13dcc:	00800084 	movi	r2,2
   13dd0:	003ff206 	br	13d9c <__alt_data_end+0xf0013d9c>
   13dd4:	01420034 	movhi	r5,2048
   13dd8:	29414104 	addi	r5,r5,1284
   13ddc:	d9402215 	stw	r5,136(sp)
   13de0:	003ee206 	br	1396c <__alt_data_end+0xf001396c>
   13de4:	5827883a 	mov	r19,r11
   13de8:	0021883a 	mov	r16,zero
   13dec:	003bed06 	br	12da4 <__alt_data_end+0xf0012da4>
   13df0:	dc002115 	stw	r16,132(sp)
   13df4:	da801d83 	ldbu	r10,118(sp)
   13df8:	df002315 	stw	fp,140(sp)
   13dfc:	0021883a 	mov	r16,zero
   13e00:	003cb406 	br	130d4 <__alt_data_end+0xf00130d4>
   13e04:	0005883a 	mov	r2,zero
   13e08:	003fc206 	br	13d14 <__alt_data_end+0xf0013d14>
   13e0c:	d8802317 	ldw	r2,140(sp)
   13e10:	98c00043 	ldbu	r3,1(r19)
   13e14:	5827883a 	mov	r19,r11
   13e18:	14000017 	ldw	r16,0(r2)
   13e1c:	10800104 	addi	r2,r2,4
   13e20:	d8802315 	stw	r2,140(sp)
   13e24:	803f760e 	bge	r16,zero,13c00 <__alt_data_end+0xf0013c00>
   13e28:	18c03fcc 	andi	r3,r3,255
   13e2c:	18c0201c 	xori	r3,r3,128
   13e30:	043fffc4 	movi	r16,-1
   13e34:	18ffe004 	addi	r3,r3,-128
   13e38:	003bd906 	br	12da0 <__alt_data_end+0xf0012da0>
   13e3c:	d9c01d85 	stb	r7,118(sp)
   13e40:	003cb606 	br	1311c <__alt_data_end+0xf001311c>
   13e44:	d9c01d85 	stb	r7,118(sp)
   13e48:	003d2106 	br	132d0 <__alt_data_end+0xf00132d0>
   13e4c:	d9c01d85 	stb	r7,118(sp)
   13e50:	003d8e06 	br	1348c <__alt_data_end+0xf001348c>
   13e54:	d9c01d85 	stb	r7,118(sp)
   13e58:	003db306 	br	13528 <__alt_data_end+0xf0013528>
   13e5c:	d9c01d85 	stb	r7,118(sp)
   13e60:	003c8a06 	br	1308c <__alt_data_end+0xf001308c>
   13e64:	dac02a17 	ldw	r11,168(sp)
   13e68:	00800304 	movi	r2,12
   13e6c:	58800015 	stw	r2,0(r11)
   13e70:	00bfffc4 	movi	r2,-1
   13e74:	003e8e06 	br	138b0 <__alt_data_end+0xf00138b0>
   13e78:	d9c01d85 	stb	r7,118(sp)
   13e7c:	003dc706 	br	1359c <__alt_data_end+0xf001359c>
   13e80:	d9c01d85 	stb	r7,118(sp)
   13e84:	003ddf06 	br	13604 <__alt_data_end+0xf0013604>
   13e88:	d9c01d85 	stb	r7,118(sp)
   13e8c:	003d3706 	br	1336c <__alt_data_end+0xf001336c>
   13e90:	d9c01d85 	stb	r7,118(sp)
   13e94:	003c5406 	br	12fe8 <__alt_data_end+0xf0012fe8>
   13e98:	d9c01d85 	stb	r7,118(sp)
   13e9c:	003d1d06 	br	13314 <__alt_data_end+0xf0013314>

00013ea0 <__sprint_r.part.0>:
   13ea0:	28801917 	ldw	r2,100(r5)
   13ea4:	defff604 	addi	sp,sp,-40
   13ea8:	dd400515 	stw	r21,20(sp)
   13eac:	dfc00915 	stw	ra,36(sp)
   13eb0:	df000815 	stw	fp,32(sp)
   13eb4:	ddc00715 	stw	r23,28(sp)
   13eb8:	dd800615 	stw	r22,24(sp)
   13ebc:	dd000415 	stw	r20,16(sp)
   13ec0:	dcc00315 	stw	r19,12(sp)
   13ec4:	dc800215 	stw	r18,8(sp)
   13ec8:	dc400115 	stw	r17,4(sp)
   13ecc:	dc000015 	stw	r16,0(sp)
   13ed0:	1088000c 	andi	r2,r2,8192
   13ed4:	302b883a 	mov	r21,r6
   13ed8:	10002e26 	beq	r2,zero,13f94 <__sprint_r.part.0+0xf4>
   13edc:	30800217 	ldw	r2,8(r6)
   13ee0:	35800017 	ldw	r22,0(r6)
   13ee4:	10002926 	beq	r2,zero,13f8c <__sprint_r.part.0+0xec>
   13ee8:	2827883a 	mov	r19,r5
   13eec:	2029883a 	mov	r20,r4
   13ef0:	b5c00104 	addi	r23,r22,4
   13ef4:	04bfffc4 	movi	r18,-1
   13ef8:	bc400017 	ldw	r17,0(r23)
   13efc:	b4000017 	ldw	r16,0(r22)
   13f00:	0039883a 	mov	fp,zero
   13f04:	8822d0ba 	srli	r17,r17,2
   13f08:	8800031e 	bne	r17,zero,13f18 <__sprint_r.part.0+0x78>
   13f0c:	00001806 	br	13f70 <__sprint_r.part.0+0xd0>
   13f10:	84000104 	addi	r16,r16,4
   13f14:	8f001526 	beq	r17,fp,13f6c <__sprint_r.part.0+0xcc>
   13f18:	81400017 	ldw	r5,0(r16)
   13f1c:	980d883a 	mov	r6,r19
   13f20:	a009883a 	mov	r4,r20
   13f24:	00158c80 	call	158c8 <_fputwc_r>
   13f28:	e7000044 	addi	fp,fp,1
   13f2c:	14bff81e 	bne	r2,r18,13f10 <__alt_data_end+0xf0013f10>
   13f30:	9005883a 	mov	r2,r18
   13f34:	a8000215 	stw	zero,8(r21)
   13f38:	a8000115 	stw	zero,4(r21)
   13f3c:	dfc00917 	ldw	ra,36(sp)
   13f40:	df000817 	ldw	fp,32(sp)
   13f44:	ddc00717 	ldw	r23,28(sp)
   13f48:	dd800617 	ldw	r22,24(sp)
   13f4c:	dd400517 	ldw	r21,20(sp)
   13f50:	dd000417 	ldw	r20,16(sp)
   13f54:	dcc00317 	ldw	r19,12(sp)
   13f58:	dc800217 	ldw	r18,8(sp)
   13f5c:	dc400117 	ldw	r17,4(sp)
   13f60:	dc000017 	ldw	r16,0(sp)
   13f64:	dec00a04 	addi	sp,sp,40
   13f68:	f800283a 	ret
   13f6c:	a8800217 	ldw	r2,8(r21)
   13f70:	8c63883a 	add	r17,r17,r17
   13f74:	8c63883a 	add	r17,r17,r17
   13f78:	1445c83a 	sub	r2,r2,r17
   13f7c:	a8800215 	stw	r2,8(r21)
   13f80:	b5800204 	addi	r22,r22,8
   13f84:	bdc00204 	addi	r23,r23,8
   13f88:	103fdb1e 	bne	r2,zero,13ef8 <__alt_data_end+0xf0013ef8>
   13f8c:	0005883a 	mov	r2,zero
   13f90:	003fe806 	br	13f34 <__alt_data_end+0xf0013f34>
   13f94:	000ff2c0 	call	ff2c <__sfvwrite_r>
   13f98:	003fe606 	br	13f34 <__alt_data_end+0xf0013f34>

00013f9c <__sprint_r>:
   13f9c:	30c00217 	ldw	r3,8(r6)
   13fa0:	18000126 	beq	r3,zero,13fa8 <__sprint_r+0xc>
   13fa4:	0013ea01 	jmpi	13ea0 <__sprint_r.part.0>
   13fa8:	30000115 	stw	zero,4(r6)
   13fac:	0005883a 	mov	r2,zero
   13fb0:	f800283a 	ret

00013fb4 <___vfiprintf_internal_r>:
   13fb4:	deffc904 	addi	sp,sp,-220
   13fb8:	df003515 	stw	fp,212(sp)
   13fbc:	dd003115 	stw	r20,196(sp)
   13fc0:	dfc03615 	stw	ra,216(sp)
   13fc4:	ddc03415 	stw	r23,208(sp)
   13fc8:	dd803315 	stw	r22,204(sp)
   13fcc:	dd403215 	stw	r21,200(sp)
   13fd0:	dcc03015 	stw	r19,192(sp)
   13fd4:	dc802f15 	stw	r18,188(sp)
   13fd8:	dc402e15 	stw	r17,184(sp)
   13fdc:	dc002d15 	stw	r16,180(sp)
   13fe0:	d9002015 	stw	r4,128(sp)
   13fe4:	d9c02215 	stw	r7,136(sp)
   13fe8:	2829883a 	mov	r20,r5
   13fec:	3039883a 	mov	fp,r6
   13ff0:	20000226 	beq	r4,zero,13ffc <___vfiprintf_internal_r+0x48>
   13ff4:	20800e17 	ldw	r2,56(r4)
   13ff8:	1000cf26 	beq	r2,zero,14338 <___vfiprintf_internal_r+0x384>
   13ffc:	a080030b 	ldhu	r2,12(r20)
   14000:	10c8000c 	andi	r3,r2,8192
   14004:	1800061e 	bne	r3,zero,14020 <___vfiprintf_internal_r+0x6c>
   14008:	a1001917 	ldw	r4,100(r20)
   1400c:	00f7ffc4 	movi	r3,-8193
   14010:	10880014 	ori	r2,r2,8192
   14014:	20c6703a 	and	r3,r4,r3
   14018:	a080030d 	sth	r2,12(r20)
   1401c:	a0c01915 	stw	r3,100(r20)
   14020:	10c0020c 	andi	r3,r2,8
   14024:	1800a926 	beq	r3,zero,142cc <___vfiprintf_internal_r+0x318>
   14028:	a0c00417 	ldw	r3,16(r20)
   1402c:	1800a726 	beq	r3,zero,142cc <___vfiprintf_internal_r+0x318>
   14030:	1080068c 	andi	r2,r2,26
   14034:	00c00284 	movi	r3,10
   14038:	10c0ac26 	beq	r2,r3,142ec <___vfiprintf_internal_r+0x338>
   1403c:	da801a04 	addi	r10,sp,104
   14040:	da801e15 	stw	r10,120(sp)
   14044:	d8801e17 	ldw	r2,120(sp)
   14048:	da8019c4 	addi	r10,sp,103
   1404c:	05820034 	movhi	r22,2048
   14050:	05c20034 	movhi	r23,2048
   14054:	da801f15 	stw	r10,124(sp)
   14058:	1295c83a 	sub	r10,r2,r10
   1405c:	b5814d04 	addi	r22,r22,1332
   14060:	bdc14904 	addi	r23,r23,1316
   14064:	dec01a15 	stw	sp,104(sp)
   14068:	d8001c15 	stw	zero,112(sp)
   1406c:	d8001b15 	stw	zero,108(sp)
   14070:	d8002615 	stw	zero,152(sp)
   14074:	d8002315 	stw	zero,140(sp)
   14078:	da802715 	stw	r10,156(sp)
   1407c:	d811883a 	mov	r8,sp
   14080:	dd002115 	stw	r20,132(sp)
   14084:	e021883a 	mov	r16,fp
   14088:	80800007 	ldb	r2,0(r16)
   1408c:	1003ea26 	beq	r2,zero,15038 <___vfiprintf_internal_r+0x1084>
   14090:	00c00944 	movi	r3,37
   14094:	8025883a 	mov	r18,r16
   14098:	10c0021e 	bne	r2,r3,140a4 <___vfiprintf_internal_r+0xf0>
   1409c:	00001606 	br	140f8 <___vfiprintf_internal_r+0x144>
   140a0:	10c00326 	beq	r2,r3,140b0 <___vfiprintf_internal_r+0xfc>
   140a4:	94800044 	addi	r18,r18,1
   140a8:	90800007 	ldb	r2,0(r18)
   140ac:	103ffc1e 	bne	r2,zero,140a0 <__alt_data_end+0xf00140a0>
   140b0:	9423c83a 	sub	r17,r18,r16
   140b4:	88001026 	beq	r17,zero,140f8 <___vfiprintf_internal_r+0x144>
   140b8:	d8c01c17 	ldw	r3,112(sp)
   140bc:	d8801b17 	ldw	r2,108(sp)
   140c0:	44000015 	stw	r16,0(r8)
   140c4:	88c7883a 	add	r3,r17,r3
   140c8:	10800044 	addi	r2,r2,1
   140cc:	44400115 	stw	r17,4(r8)
   140d0:	d8c01c15 	stw	r3,112(sp)
   140d4:	d8801b15 	stw	r2,108(sp)
   140d8:	010001c4 	movi	r4,7
   140dc:	2080760e 	bge	r4,r2,142b8 <___vfiprintf_internal_r+0x304>
   140e0:	1803821e 	bne	r3,zero,14eec <___vfiprintf_internal_r+0xf38>
   140e4:	da802317 	ldw	r10,140(sp)
   140e8:	d8001b15 	stw	zero,108(sp)
   140ec:	d811883a 	mov	r8,sp
   140f0:	5455883a 	add	r10,r10,r17
   140f4:	da802315 	stw	r10,140(sp)
   140f8:	90800007 	ldb	r2,0(r18)
   140fc:	10044626 	beq	r2,zero,15218 <___vfiprintf_internal_r+0x1264>
   14100:	90c00047 	ldb	r3,1(r18)
   14104:	94000044 	addi	r16,r18,1
   14108:	d8001d85 	stb	zero,118(sp)
   1410c:	0009883a 	mov	r4,zero
   14110:	000f883a 	mov	r7,zero
   14114:	027fffc4 	movi	r9,-1
   14118:	0023883a 	mov	r17,zero
   1411c:	0029883a 	mov	r20,zero
   14120:	01401604 	movi	r5,88
   14124:	01800244 	movi	r6,9
   14128:	03400a84 	movi	r13,42
   1412c:	03001b04 	movi	r12,108
   14130:	84000044 	addi	r16,r16,1
   14134:	18bff804 	addi	r2,r3,-32
   14138:	28827336 	bltu	r5,r2,14b08 <___vfiprintf_internal_r+0xb54>
   1413c:	100490ba 	slli	r2,r2,2
   14140:	02800074 	movhi	r10,1
   14144:	52905504 	addi	r10,r10,16724
   14148:	1285883a 	add	r2,r2,r10
   1414c:	10800017 	ldw	r2,0(r2)
   14150:	1000683a 	jmp	r2
   14154:	0001483c 	xorhi	zero,zero,1312
   14158:	00014b08 	cmpgei	zero,zero,1324
   1415c:	00014b08 	cmpgei	zero,zero,1324
   14160:	0001485c 	xori	zero,zero,1313
   14164:	00014b08 	cmpgei	zero,zero,1324
   14168:	00014b08 	cmpgei	zero,zero,1324
   1416c:	00014b08 	cmpgei	zero,zero,1324
   14170:	00014b08 	cmpgei	zero,zero,1324
   14174:	00014b08 	cmpgei	zero,zero,1324
   14178:	00014b08 	cmpgei	zero,zero,1324
   1417c:	00014a44 	movi	zero,1321
   14180:	00014a60 	cmpeqi	zero,zero,1321
   14184:	00014b08 	cmpgei	zero,zero,1324
   14188:	00014348 	cmpgei	zero,zero,1293
   1418c:	00014a70 	cmpltui	zero,zero,1321
   14190:	00014b08 	cmpgei	zero,zero,1324
   14194:	00014868 	cmpgeui	zero,zero,1313
   14198:	00014874 	movhi	zero,1313
   1419c:	00014874 	movhi	zero,1313
   141a0:	00014874 	movhi	zero,1313
   141a4:	00014874 	movhi	zero,1313
   141a8:	00014874 	movhi	zero,1313
   141ac:	00014874 	movhi	zero,1313
   141b0:	00014874 	movhi	zero,1313
   141b4:	00014874 	movhi	zero,1313
   141b8:	00014874 	movhi	zero,1313
   141bc:	00014b08 	cmpgei	zero,zero,1324
   141c0:	00014b08 	cmpgei	zero,zero,1324
   141c4:	00014b08 	cmpgei	zero,zero,1324
   141c8:	00014b08 	cmpgei	zero,zero,1324
   141cc:	00014b08 	cmpgei	zero,zero,1324
   141d0:	00014b08 	cmpgei	zero,zero,1324
   141d4:	00014b08 	cmpgei	zero,zero,1324
   141d8:	00014b08 	cmpgei	zero,zero,1324
   141dc:	00014b08 	cmpgei	zero,zero,1324
   141e0:	00014b08 	cmpgei	zero,zero,1324
   141e4:	000148a0 	cmpeqi	zero,zero,1314
   141e8:	00014b08 	cmpgei	zero,zero,1324
   141ec:	00014b08 	cmpgei	zero,zero,1324
   141f0:	00014b08 	cmpgei	zero,zero,1324
   141f4:	00014b08 	cmpgei	zero,zero,1324
   141f8:	00014b08 	cmpgei	zero,zero,1324
   141fc:	00014b08 	cmpgei	zero,zero,1324
   14200:	00014b08 	cmpgei	zero,zero,1324
   14204:	00014b08 	cmpgei	zero,zero,1324
   14208:	00014b08 	cmpgei	zero,zero,1324
   1420c:	00014b08 	cmpgei	zero,zero,1324
   14210:	000148d8 	cmpnei	zero,zero,1315
   14214:	00014b08 	cmpgei	zero,zero,1324
   14218:	00014b08 	cmpgei	zero,zero,1324
   1421c:	00014b08 	cmpgei	zero,zero,1324
   14220:	00014b08 	cmpgei	zero,zero,1324
   14224:	00014b08 	cmpgei	zero,zero,1324
   14228:	00014930 	cmpltui	zero,zero,1316
   1422c:	00014b08 	cmpgei	zero,zero,1324
   14230:	00014b08 	cmpgei	zero,zero,1324
   14234:	000149a0 	cmpeqi	zero,zero,1318
   14238:	00014b08 	cmpgei	zero,zero,1324
   1423c:	00014b08 	cmpgei	zero,zero,1324
   14240:	00014b08 	cmpgei	zero,zero,1324
   14244:	00014b08 	cmpgei	zero,zero,1324
   14248:	00014b08 	cmpgei	zero,zero,1324
   1424c:	00014b08 	cmpgei	zero,zero,1324
   14250:	00014b08 	cmpgei	zero,zero,1324
   14254:	00014b08 	cmpgei	zero,zero,1324
   14258:	00014b08 	cmpgei	zero,zero,1324
   1425c:	00014b08 	cmpgei	zero,zero,1324
   14260:	0001474c 	andi	zero,zero,1309
   14264:	00014778 	rdprs	zero,zero,1309
   14268:	00014b08 	cmpgei	zero,zero,1324
   1426c:	00014b08 	cmpgei	zero,zero,1324
   14270:	00014b08 	cmpgei	zero,zero,1324
   14274:	00014ab0 	cmpltui	zero,zero,1322
   14278:	00014778 	rdprs	zero,zero,1309
   1427c:	00014b08 	cmpgei	zero,zero,1324
   14280:	00014b08 	cmpgei	zero,zero,1324
   14284:	0001460c 	andi	zero,zero,1304
   14288:	00014b08 	cmpgei	zero,zero,1324
   1428c:	0001461c 	xori	zero,zero,1304
   14290:	00014658 	cmpnei	zero,zero,1305
   14294:	00014354 	movui	zero,1293
   14298:	00014600 	call	1460 <vListInitialise+0x5c>
   1429c:	00014b08 	cmpgei	zero,zero,1324
   142a0:	000149dc 	xori	zero,zero,1319
   142a4:	00014b08 	cmpgei	zero,zero,1324
   142a8:	00014a34 	movhi	zero,1320
   142ac:	00014b08 	cmpgei	zero,zero,1324
   142b0:	00014b08 	cmpgei	zero,zero,1324
   142b4:	000146f8 	rdprs	zero,zero,1307
   142b8:	42000204 	addi	r8,r8,8
   142bc:	da802317 	ldw	r10,140(sp)
   142c0:	5455883a 	add	r10,r10,r17
   142c4:	da802315 	stw	r10,140(sp)
   142c8:	003f8b06 	br	140f8 <__alt_data_end+0xf00140f8>
   142cc:	d9002017 	ldw	r4,128(sp)
   142d0:	a00b883a 	mov	r5,r20
   142d4:	000dad40 	call	dad4 <__swsetup_r>
   142d8:	1003b11e 	bne	r2,zero,151a0 <___vfiprintf_internal_r+0x11ec>
   142dc:	a080030b 	ldhu	r2,12(r20)
   142e0:	00c00284 	movi	r3,10
   142e4:	1080068c 	andi	r2,r2,26
   142e8:	10ff541e 	bne	r2,r3,1403c <__alt_data_end+0xf001403c>
   142ec:	a080038f 	ldh	r2,14(r20)
   142f0:	103f5216 	blt	r2,zero,1403c <__alt_data_end+0xf001403c>
   142f4:	d9c02217 	ldw	r7,136(sp)
   142f8:	d9002017 	ldw	r4,128(sp)
   142fc:	e00d883a 	mov	r6,fp
   14300:	a00b883a 	mov	r5,r20
   14304:	001542c0 	call	1542c <__sbprintf>
   14308:	dfc03617 	ldw	ra,216(sp)
   1430c:	df003517 	ldw	fp,212(sp)
   14310:	ddc03417 	ldw	r23,208(sp)
   14314:	dd803317 	ldw	r22,204(sp)
   14318:	dd403217 	ldw	r21,200(sp)
   1431c:	dd003117 	ldw	r20,196(sp)
   14320:	dcc03017 	ldw	r19,192(sp)
   14324:	dc802f17 	ldw	r18,188(sp)
   14328:	dc402e17 	ldw	r17,184(sp)
   1432c:	dc002d17 	ldw	r16,180(sp)
   14330:	dec03704 	addi	sp,sp,220
   14334:	f800283a 	ret
   14338:	000faa80 	call	faa8 <__sinit>
   1433c:	003f2f06 	br	13ffc <__alt_data_end+0xf0013ffc>
   14340:	0463c83a 	sub	r17,zero,r17
   14344:	d8802215 	stw	r2,136(sp)
   14348:	a5000114 	ori	r20,r20,4
   1434c:	80c00007 	ldb	r3,0(r16)
   14350:	003f7706 	br	14130 <__alt_data_end+0xf0014130>
   14354:	00800c04 	movi	r2,48
   14358:	da802217 	ldw	r10,136(sp)
   1435c:	d8801d05 	stb	r2,116(sp)
   14360:	00801e04 	movi	r2,120
   14364:	d8801d45 	stb	r2,117(sp)
   14368:	d8001d85 	stb	zero,118(sp)
   1436c:	50c00104 	addi	r3,r10,4
   14370:	54800017 	ldw	r18,0(r10)
   14374:	0027883a 	mov	r19,zero
   14378:	a0800094 	ori	r2,r20,2
   1437c:	48030b16 	blt	r9,zero,14fac <___vfiprintf_internal_r+0xff8>
   14380:	00bfdfc4 	movi	r2,-129
   14384:	a096703a 	and	r11,r20,r2
   14388:	d8c02215 	stw	r3,136(sp)
   1438c:	5d000094 	ori	r20,r11,2
   14390:	90032b1e 	bne	r18,zero,15040 <___vfiprintf_internal_r+0x108c>
   14394:	00820034 	movhi	r2,2048
   14398:	1080d804 	addi	r2,r2,864
   1439c:	d8802615 	stw	r2,152(sp)
   143a0:	0039883a 	mov	fp,zero
   143a4:	48017b1e 	bne	r9,zero,14994 <___vfiprintf_internal_r+0x9e0>
   143a8:	0013883a 	mov	r9,zero
   143ac:	0027883a 	mov	r19,zero
   143b0:	dd401a04 	addi	r21,sp,104
   143b4:	4825883a 	mov	r18,r9
   143b8:	4cc0010e 	bge	r9,r19,143c0 <___vfiprintf_internal_r+0x40c>
   143bc:	9825883a 	mov	r18,r19
   143c0:	e7003fcc 	andi	fp,fp,255
   143c4:	e700201c 	xori	fp,fp,128
   143c8:	e73fe004 	addi	fp,fp,-128
   143cc:	e0000126 	beq	fp,zero,143d4 <___vfiprintf_internal_r+0x420>
   143d0:	94800044 	addi	r18,r18,1
   143d4:	a380008c 	andi	r14,r20,2
   143d8:	70000126 	beq	r14,zero,143e0 <___vfiprintf_internal_r+0x42c>
   143dc:	94800084 	addi	r18,r18,2
   143e0:	a700210c 	andi	fp,r20,132
   143e4:	e001df1e 	bne	fp,zero,14b64 <___vfiprintf_internal_r+0xbb0>
   143e8:	8c87c83a 	sub	r3,r17,r18
   143ec:	00c1dd0e 	bge	zero,r3,14b64 <___vfiprintf_internal_r+0xbb0>
   143f0:	01c00404 	movi	r7,16
   143f4:	d8801c17 	ldw	r2,112(sp)
   143f8:	38c3ad0e 	bge	r7,r3,152b0 <___vfiprintf_internal_r+0x12fc>
   143fc:	02820034 	movhi	r10,2048
   14400:	52814d04 	addi	r10,r10,1332
   14404:	dc002915 	stw	r16,164(sp)
   14408:	d9801b17 	ldw	r6,108(sp)
   1440c:	da802415 	stw	r10,144(sp)
   14410:	03c001c4 	movi	r15,7
   14414:	da402515 	stw	r9,148(sp)
   14418:	db802815 	stw	r14,160(sp)
   1441c:	1821883a 	mov	r16,r3
   14420:	00000506 	br	14438 <___vfiprintf_internal_r+0x484>
   14424:	31400084 	addi	r5,r6,2
   14428:	42000204 	addi	r8,r8,8
   1442c:	200d883a 	mov	r6,r4
   14430:	843ffc04 	addi	r16,r16,-16
   14434:	3c000d0e 	bge	r7,r16,1446c <___vfiprintf_internal_r+0x4b8>
   14438:	10800404 	addi	r2,r2,16
   1443c:	31000044 	addi	r4,r6,1
   14440:	45800015 	stw	r22,0(r8)
   14444:	41c00115 	stw	r7,4(r8)
   14448:	d8801c15 	stw	r2,112(sp)
   1444c:	d9001b15 	stw	r4,108(sp)
   14450:	793ff40e 	bge	r15,r4,14424 <__alt_data_end+0xf0014424>
   14454:	1001b51e 	bne	r2,zero,14b2c <___vfiprintf_internal_r+0xb78>
   14458:	843ffc04 	addi	r16,r16,-16
   1445c:	000d883a 	mov	r6,zero
   14460:	01400044 	movi	r5,1
   14464:	d811883a 	mov	r8,sp
   14468:	3c3ff316 	blt	r7,r16,14438 <__alt_data_end+0xf0014438>
   1446c:	8007883a 	mov	r3,r16
   14470:	da402517 	ldw	r9,148(sp)
   14474:	db802817 	ldw	r14,160(sp)
   14478:	dc002917 	ldw	r16,164(sp)
   1447c:	da802417 	ldw	r10,144(sp)
   14480:	1885883a 	add	r2,r3,r2
   14484:	40c00115 	stw	r3,4(r8)
   14488:	42800015 	stw	r10,0(r8)
   1448c:	d8801c15 	stw	r2,112(sp)
   14490:	d9401b15 	stw	r5,108(sp)
   14494:	00c001c4 	movi	r3,7
   14498:	19426016 	blt	r3,r5,14e1c <___vfiprintf_internal_r+0xe68>
   1449c:	d8c01d87 	ldb	r3,118(sp)
   144a0:	42000204 	addi	r8,r8,8
   144a4:	29000044 	addi	r4,r5,1
   144a8:	1801b31e 	bne	r3,zero,14b78 <___vfiprintf_internal_r+0xbc4>
   144ac:	7001c026 	beq	r14,zero,14bb0 <___vfiprintf_internal_r+0xbfc>
   144b0:	d8c01d04 	addi	r3,sp,116
   144b4:	10800084 	addi	r2,r2,2
   144b8:	40c00015 	stw	r3,0(r8)
   144bc:	00c00084 	movi	r3,2
   144c0:	40c00115 	stw	r3,4(r8)
   144c4:	d8801c15 	stw	r2,112(sp)
   144c8:	d9001b15 	stw	r4,108(sp)
   144cc:	00c001c4 	movi	r3,7
   144d0:	1902650e 	bge	r3,r4,14e68 <___vfiprintf_internal_r+0xeb4>
   144d4:	10029a1e 	bne	r2,zero,14f40 <___vfiprintf_internal_r+0xf8c>
   144d8:	00c02004 	movi	r3,128
   144dc:	01000044 	movi	r4,1
   144e0:	000b883a 	mov	r5,zero
   144e4:	d811883a 	mov	r8,sp
   144e8:	e0c1b31e 	bne	fp,r3,14bb8 <___vfiprintf_internal_r+0xc04>
   144ec:	8cb9c83a 	sub	fp,r17,r18
   144f0:	0701b10e 	bge	zero,fp,14bb8 <___vfiprintf_internal_r+0xc04>
   144f4:	01c00404 	movi	r7,16
   144f8:	3f03890e 	bge	r7,fp,15320 <___vfiprintf_internal_r+0x136c>
   144fc:	00c20034 	movhi	r3,2048
   14500:	18c14904 	addi	r3,r3,1316
   14504:	d8c02415 	stw	r3,144(sp)
   14508:	8007883a 	mov	r3,r16
   1450c:	034001c4 	movi	r13,7
   14510:	e021883a 	mov	r16,fp
   14514:	da402515 	stw	r9,148(sp)
   14518:	1839883a 	mov	fp,r3
   1451c:	00000506 	br	14534 <___vfiprintf_internal_r+0x580>
   14520:	29800084 	addi	r6,r5,2
   14524:	42000204 	addi	r8,r8,8
   14528:	180b883a 	mov	r5,r3
   1452c:	843ffc04 	addi	r16,r16,-16
   14530:	3c000d0e 	bge	r7,r16,14568 <___vfiprintf_internal_r+0x5b4>
   14534:	10800404 	addi	r2,r2,16
   14538:	28c00044 	addi	r3,r5,1
   1453c:	45c00015 	stw	r23,0(r8)
   14540:	41c00115 	stw	r7,4(r8)
   14544:	d8801c15 	stw	r2,112(sp)
   14548:	d8c01b15 	stw	r3,108(sp)
   1454c:	68fff40e 	bge	r13,r3,14520 <__alt_data_end+0xf0014520>
   14550:	1002241e 	bne	r2,zero,14de4 <___vfiprintf_internal_r+0xe30>
   14554:	843ffc04 	addi	r16,r16,-16
   14558:	01800044 	movi	r6,1
   1455c:	000b883a 	mov	r5,zero
   14560:	d811883a 	mov	r8,sp
   14564:	3c3ff316 	blt	r7,r16,14534 <__alt_data_end+0xf0014534>
   14568:	da402517 	ldw	r9,148(sp)
   1456c:	e007883a 	mov	r3,fp
   14570:	8039883a 	mov	fp,r16
   14574:	1821883a 	mov	r16,r3
   14578:	d8c02417 	ldw	r3,144(sp)
   1457c:	1705883a 	add	r2,r2,fp
   14580:	47000115 	stw	fp,4(r8)
   14584:	40c00015 	stw	r3,0(r8)
   14588:	d8801c15 	stw	r2,112(sp)
   1458c:	d9801b15 	stw	r6,108(sp)
   14590:	00c001c4 	movi	r3,7
   14594:	19827616 	blt	r3,r6,14f70 <___vfiprintf_internal_r+0xfbc>
   14598:	4cf9c83a 	sub	fp,r9,r19
   1459c:	42000204 	addi	r8,r8,8
   145a0:	31000044 	addi	r4,r6,1
   145a4:	300b883a 	mov	r5,r6
   145a8:	07018516 	blt	zero,fp,14bc0 <___vfiprintf_internal_r+0xc0c>
   145ac:	9885883a 	add	r2,r19,r2
   145b0:	45400015 	stw	r21,0(r8)
   145b4:	44c00115 	stw	r19,4(r8)
   145b8:	d8801c15 	stw	r2,112(sp)
   145bc:	d9001b15 	stw	r4,108(sp)
   145c0:	00c001c4 	movi	r3,7
   145c4:	1901dd0e 	bge	r3,r4,14d3c <___vfiprintf_internal_r+0xd88>
   145c8:	1002401e 	bne	r2,zero,14ecc <___vfiprintf_internal_r+0xf18>
   145cc:	d8001b15 	stw	zero,108(sp)
   145d0:	a2c0010c 	andi	r11,r20,4
   145d4:	58000226 	beq	r11,zero,145e0 <___vfiprintf_internal_r+0x62c>
   145d8:	8ca7c83a 	sub	r19,r17,r18
   145dc:	04c2f216 	blt	zero,r19,151a8 <___vfiprintf_internal_r+0x11f4>
   145e0:	8c80010e 	bge	r17,r18,145e8 <___vfiprintf_internal_r+0x634>
   145e4:	9023883a 	mov	r17,r18
   145e8:	da802317 	ldw	r10,140(sp)
   145ec:	5455883a 	add	r10,r10,r17
   145f0:	da802315 	stw	r10,140(sp)
   145f4:	d8001b15 	stw	zero,108(sp)
   145f8:	d811883a 	mov	r8,sp
   145fc:	003ea206 	br	14088 <__alt_data_end+0xf0014088>
   14600:	a5000814 	ori	r20,r20,32
   14604:	80c00007 	ldb	r3,0(r16)
   14608:	003ec906 	br	14130 <__alt_data_end+0xf0014130>
   1460c:	80c00007 	ldb	r3,0(r16)
   14610:	1b030926 	beq	r3,r12,15238 <___vfiprintf_internal_r+0x1284>
   14614:	a5000414 	ori	r20,r20,16
   14618:	003ec506 	br	14130 <__alt_data_end+0xf0014130>
   1461c:	21003fcc 	andi	r4,r4,255
   14620:	20035e1e 	bne	r4,zero,1539c <___vfiprintf_internal_r+0x13e8>
   14624:	a080080c 	andi	r2,r20,32
   14628:	1002a526 	beq	r2,zero,150c0 <___vfiprintf_internal_r+0x110c>
   1462c:	da802217 	ldw	r10,136(sp)
   14630:	50800017 	ldw	r2,0(r10)
   14634:	da802317 	ldw	r10,140(sp)
   14638:	5007d7fa 	srai	r3,r10,31
   1463c:	da802217 	ldw	r10,136(sp)
   14640:	10c00115 	stw	r3,4(r2)
   14644:	52800104 	addi	r10,r10,4
   14648:	da802215 	stw	r10,136(sp)
   1464c:	da802317 	ldw	r10,140(sp)
   14650:	12800015 	stw	r10,0(r2)
   14654:	003e8c06 	br	14088 <__alt_data_end+0xf0014088>
   14658:	21003fcc 	andi	r4,r4,255
   1465c:	2003511e 	bne	r4,zero,153a4 <___vfiprintf_internal_r+0x13f0>
   14660:	a080080c 	andi	r2,r20,32
   14664:	1000a126 	beq	r2,zero,148ec <___vfiprintf_internal_r+0x938>
   14668:	da802217 	ldw	r10,136(sp)
   1466c:	d8001d85 	stb	zero,118(sp)
   14670:	50800204 	addi	r2,r10,8
   14674:	54800017 	ldw	r18,0(r10)
   14678:	54c00117 	ldw	r19,4(r10)
   1467c:	4802b416 	blt	r9,zero,15150 <___vfiprintf_internal_r+0x119c>
   14680:	013fdfc4 	movi	r4,-129
   14684:	94c6b03a 	or	r3,r18,r19
   14688:	d8802215 	stw	r2,136(sp)
   1468c:	a128703a 	and	r20,r20,r4
   14690:	1800a226 	beq	r3,zero,1491c <___vfiprintf_internal_r+0x968>
   14694:	0039883a 	mov	fp,zero
   14698:	dd401a04 	addi	r21,sp,104
   1469c:	9006d0fa 	srli	r3,r18,3
   146a0:	9808977a 	slli	r4,r19,29
   146a4:	9826d0fa 	srli	r19,r19,3
   146a8:	948001cc 	andi	r18,r18,7
   146ac:	90800c04 	addi	r2,r18,48
   146b0:	ad7fffc4 	addi	r21,r21,-1
   146b4:	20e4b03a 	or	r18,r4,r3
   146b8:	a8800005 	stb	r2,0(r21)
   146bc:	94c6b03a 	or	r3,r18,r19
   146c0:	183ff61e 	bne	r3,zero,1469c <__alt_data_end+0xf001469c>
   146c4:	a0c0004c 	andi	r3,r20,1
   146c8:	18005926 	beq	r3,zero,14830 <___vfiprintf_internal_r+0x87c>
   146cc:	10803fcc 	andi	r2,r2,255
   146d0:	1080201c 	xori	r2,r2,128
   146d4:	10bfe004 	addi	r2,r2,-128
   146d8:	00c00c04 	movi	r3,48
   146dc:	10c05426 	beq	r2,r3,14830 <___vfiprintf_internal_r+0x87c>
   146e0:	da801e17 	ldw	r10,120(sp)
   146e4:	a8bfffc4 	addi	r2,r21,-1
   146e8:	a8ffffc5 	stb	r3,-1(r21)
   146ec:	50a7c83a 	sub	r19,r10,r2
   146f0:	102b883a 	mov	r21,r2
   146f4:	003f2f06 	br	143b4 <__alt_data_end+0xf00143b4>
   146f8:	21003fcc 	andi	r4,r4,255
   146fc:	2003421e 	bne	r4,zero,15408 <___vfiprintf_internal_r+0x1454>
   14700:	00820034 	movhi	r2,2048
   14704:	1080d804 	addi	r2,r2,864
   14708:	d8802615 	stw	r2,152(sp)
   1470c:	a080080c 	andi	r2,r20,32
   14710:	1000aa26 	beq	r2,zero,149bc <___vfiprintf_internal_r+0xa08>
   14714:	da802217 	ldw	r10,136(sp)
   14718:	54800017 	ldw	r18,0(r10)
   1471c:	54c00117 	ldw	r19,4(r10)
   14720:	52800204 	addi	r10,r10,8
   14724:	da802215 	stw	r10,136(sp)
   14728:	a080004c 	andi	r2,r20,1
   1472c:	1001d226 	beq	r2,zero,14e78 <___vfiprintf_internal_r+0xec4>
   14730:	94c4b03a 	or	r2,r18,r19
   14734:	1002351e 	bne	r2,zero,1500c <___vfiprintf_internal_r+0x1058>
   14738:	d8001d85 	stb	zero,118(sp)
   1473c:	48022216 	blt	r9,zero,14fc8 <___vfiprintf_internal_r+0x1014>
   14740:	00bfdfc4 	movi	r2,-129
   14744:	a0a8703a 	and	r20,r20,r2
   14748:	003f1506 	br	143a0 <__alt_data_end+0xf00143a0>
   1474c:	da802217 	ldw	r10,136(sp)
   14750:	04800044 	movi	r18,1
   14754:	d8001d85 	stb	zero,118(sp)
   14758:	50800017 	ldw	r2,0(r10)
   1475c:	52800104 	addi	r10,r10,4
   14760:	da802215 	stw	r10,136(sp)
   14764:	d8801005 	stb	r2,64(sp)
   14768:	9027883a 	mov	r19,r18
   1476c:	dd401004 	addi	r21,sp,64
   14770:	0013883a 	mov	r9,zero
   14774:	003f1706 	br	143d4 <__alt_data_end+0xf00143d4>
   14778:	21003fcc 	andi	r4,r4,255
   1477c:	2003201e 	bne	r4,zero,15400 <___vfiprintf_internal_r+0x144c>
   14780:	a080080c 	andi	r2,r20,32
   14784:	10004b26 	beq	r2,zero,148b4 <___vfiprintf_internal_r+0x900>
   14788:	da802217 	ldw	r10,136(sp)
   1478c:	50800117 	ldw	r2,4(r10)
   14790:	54800017 	ldw	r18,0(r10)
   14794:	52800204 	addi	r10,r10,8
   14798:	da802215 	stw	r10,136(sp)
   1479c:	1027883a 	mov	r19,r2
   147a0:	10022c16 	blt	r2,zero,15054 <___vfiprintf_internal_r+0x10a0>
   147a4:	df001d83 	ldbu	fp,118(sp)
   147a8:	48007216 	blt	r9,zero,14974 <___vfiprintf_internal_r+0x9c0>
   147ac:	00ffdfc4 	movi	r3,-129
   147b0:	94c4b03a 	or	r2,r18,r19
   147b4:	a0e8703a 	and	r20,r20,r3
   147b8:	1000cc26 	beq	r2,zero,14aec <___vfiprintf_internal_r+0xb38>
   147bc:	98021026 	beq	r19,zero,15000 <___vfiprintf_internal_r+0x104c>
   147c0:	dc402415 	stw	r17,144(sp)
   147c4:	dc002515 	stw	r16,148(sp)
   147c8:	9823883a 	mov	r17,r19
   147cc:	9021883a 	mov	r16,r18
   147d0:	dd401a04 	addi	r21,sp,104
   147d4:	4825883a 	mov	r18,r9
   147d8:	4027883a 	mov	r19,r8
   147dc:	8009883a 	mov	r4,r16
   147e0:	880b883a 	mov	r5,r17
   147e4:	01800284 	movi	r6,10
   147e8:	000f883a 	mov	r7,zero
   147ec:	00163940 	call	16394 <__umoddi3>
   147f0:	10800c04 	addi	r2,r2,48
   147f4:	ad7fffc4 	addi	r21,r21,-1
   147f8:	8009883a 	mov	r4,r16
   147fc:	880b883a 	mov	r5,r17
   14800:	a8800005 	stb	r2,0(r21)
   14804:	01800284 	movi	r6,10
   14808:	000f883a 	mov	r7,zero
   1480c:	0015e1c0 	call	15e1c <__udivdi3>
   14810:	1021883a 	mov	r16,r2
   14814:	10c4b03a 	or	r2,r2,r3
   14818:	1823883a 	mov	r17,r3
   1481c:	103fef1e 	bne	r2,zero,147dc <__alt_data_end+0xf00147dc>
   14820:	dc402417 	ldw	r17,144(sp)
   14824:	dc002517 	ldw	r16,148(sp)
   14828:	9013883a 	mov	r9,r18
   1482c:	9811883a 	mov	r8,r19
   14830:	da801e17 	ldw	r10,120(sp)
   14834:	5567c83a 	sub	r19,r10,r21
   14838:	003ede06 	br	143b4 <__alt_data_end+0xf00143b4>
   1483c:	38803fcc 	andi	r2,r7,255
   14840:	1080201c 	xori	r2,r2,128
   14844:	10bfe004 	addi	r2,r2,-128
   14848:	1002371e 	bne	r2,zero,15128 <___vfiprintf_internal_r+0x1174>
   1484c:	01000044 	movi	r4,1
   14850:	01c00804 	movi	r7,32
   14854:	80c00007 	ldb	r3,0(r16)
   14858:	003e3506 	br	14130 <__alt_data_end+0xf0014130>
   1485c:	a5000054 	ori	r20,r20,1
   14860:	80c00007 	ldb	r3,0(r16)
   14864:	003e3206 	br	14130 <__alt_data_end+0xf0014130>
   14868:	a5002014 	ori	r20,r20,128
   1486c:	80c00007 	ldb	r3,0(r16)
   14870:	003e2f06 	br	14130 <__alt_data_end+0xf0014130>
   14874:	8015883a 	mov	r10,r16
   14878:	0023883a 	mov	r17,zero
   1487c:	18bff404 	addi	r2,r3,-48
   14880:	50c00007 	ldb	r3,0(r10)
   14884:	8c4002a4 	muli	r17,r17,10
   14888:	84000044 	addi	r16,r16,1
   1488c:	8015883a 	mov	r10,r16
   14890:	1463883a 	add	r17,r2,r17
   14894:	18bff404 	addi	r2,r3,-48
   14898:	30bff92e 	bgeu	r6,r2,14880 <__alt_data_end+0xf0014880>
   1489c:	003e2506 	br	14134 <__alt_data_end+0xf0014134>
   148a0:	21003fcc 	andi	r4,r4,255
   148a4:	2002d41e 	bne	r4,zero,153f8 <___vfiprintf_internal_r+0x1444>
   148a8:	a5000414 	ori	r20,r20,16
   148ac:	a080080c 	andi	r2,r20,32
   148b0:	103fb51e 	bne	r2,zero,14788 <__alt_data_end+0xf0014788>
   148b4:	a080040c 	andi	r2,r20,16
   148b8:	1001f826 	beq	r2,zero,1509c <___vfiprintf_internal_r+0x10e8>
   148bc:	da802217 	ldw	r10,136(sp)
   148c0:	54800017 	ldw	r18,0(r10)
   148c4:	52800104 	addi	r10,r10,4
   148c8:	da802215 	stw	r10,136(sp)
   148cc:	9027d7fa 	srai	r19,r18,31
   148d0:	9805883a 	mov	r2,r19
   148d4:	003fb206 	br	147a0 <__alt_data_end+0xf00147a0>
   148d8:	21003fcc 	andi	r4,r4,255
   148dc:	2002c41e 	bne	r4,zero,153f0 <___vfiprintf_internal_r+0x143c>
   148e0:	a5000414 	ori	r20,r20,16
   148e4:	a080080c 	andi	r2,r20,32
   148e8:	103f5f1e 	bne	r2,zero,14668 <__alt_data_end+0xf0014668>
   148ec:	a080040c 	andi	r2,r20,16
   148f0:	10020f26 	beq	r2,zero,15130 <___vfiprintf_internal_r+0x117c>
   148f4:	da802217 	ldw	r10,136(sp)
   148f8:	d8001d85 	stb	zero,118(sp)
   148fc:	0027883a 	mov	r19,zero
   14900:	50800104 	addi	r2,r10,4
   14904:	54800017 	ldw	r18,0(r10)
   14908:	48021116 	blt	r9,zero,15150 <___vfiprintf_internal_r+0x119c>
   1490c:	00ffdfc4 	movi	r3,-129
   14910:	d8802215 	stw	r2,136(sp)
   14914:	a0e8703a 	and	r20,r20,r3
   14918:	903f5e1e 	bne	r18,zero,14694 <__alt_data_end+0xf0014694>
   1491c:	0039883a 	mov	fp,zero
   14920:	4802a626 	beq	r9,zero,153bc <___vfiprintf_internal_r+0x1408>
   14924:	0025883a 	mov	r18,zero
   14928:	0027883a 	mov	r19,zero
   1492c:	003f5a06 	br	14698 <__alt_data_end+0xf0014698>
   14930:	21003fcc 	andi	r4,r4,255
   14934:	20029f1e 	bne	r4,zero,153b4 <___vfiprintf_internal_r+0x1400>
   14938:	a5000414 	ori	r20,r20,16
   1493c:	a080080c 	andi	r2,r20,32
   14940:	10005e1e 	bne	r2,zero,14abc <___vfiprintf_internal_r+0xb08>
   14944:	a080040c 	andi	r2,r20,16
   14948:	1001a21e 	bne	r2,zero,14fd4 <___vfiprintf_internal_r+0x1020>
   1494c:	a080100c 	andi	r2,r20,64
   14950:	d8001d85 	stb	zero,118(sp)
   14954:	da802217 	ldw	r10,136(sp)
   14958:	1002231e 	bne	r2,zero,151e8 <___vfiprintf_internal_r+0x1234>
   1495c:	50800104 	addi	r2,r10,4
   14960:	54800017 	ldw	r18,0(r10)
   14964:	0027883a 	mov	r19,zero
   14968:	4801a00e 	bge	r9,zero,14fec <___vfiprintf_internal_r+0x1038>
   1496c:	d8802215 	stw	r2,136(sp)
   14970:	0039883a 	mov	fp,zero
   14974:	94c4b03a 	or	r2,r18,r19
   14978:	103f901e 	bne	r2,zero,147bc <__alt_data_end+0xf00147bc>
   1497c:	00800044 	movi	r2,1
   14980:	10803fcc 	andi	r2,r2,255
   14984:	00c00044 	movi	r3,1
   14988:	10c05926 	beq	r2,r3,14af0 <___vfiprintf_internal_r+0xb3c>
   1498c:	00c00084 	movi	r3,2
   14990:	10ffe41e 	bne	r2,r3,14924 <__alt_data_end+0xf0014924>
   14994:	0025883a 	mov	r18,zero
   14998:	0027883a 	mov	r19,zero
   1499c:	00013d06 	br	14e94 <___vfiprintf_internal_r+0xee0>
   149a0:	21003fcc 	andi	r4,r4,255
   149a4:	2002811e 	bne	r4,zero,153ac <___vfiprintf_internal_r+0x13f8>
   149a8:	00820034 	movhi	r2,2048
   149ac:	1080d304 	addi	r2,r2,844
   149b0:	d8802615 	stw	r2,152(sp)
   149b4:	a080080c 	andi	r2,r20,32
   149b8:	103f561e 	bne	r2,zero,14714 <__alt_data_end+0xf0014714>
   149bc:	a080040c 	andi	r2,r20,16
   149c0:	1001d126 	beq	r2,zero,15108 <___vfiprintf_internal_r+0x1154>
   149c4:	da802217 	ldw	r10,136(sp)
   149c8:	0027883a 	mov	r19,zero
   149cc:	54800017 	ldw	r18,0(r10)
   149d0:	52800104 	addi	r10,r10,4
   149d4:	da802215 	stw	r10,136(sp)
   149d8:	003f5306 	br	14728 <__alt_data_end+0xf0014728>
   149dc:	da802217 	ldw	r10,136(sp)
   149e0:	d8001d85 	stb	zero,118(sp)
   149e4:	55400017 	ldw	r21,0(r10)
   149e8:	50c00104 	addi	r3,r10,4
   149ec:	a8024226 	beq	r21,zero,152f8 <___vfiprintf_internal_r+0x1344>
   149f0:	48021816 	blt	r9,zero,15254 <___vfiprintf_internal_r+0x12a0>
   149f4:	480d883a 	mov	r6,r9
   149f8:	000b883a 	mov	r5,zero
   149fc:	a809883a 	mov	r4,r21
   14a00:	d8c02a15 	stw	r3,168(sp)
   14a04:	da002b15 	stw	r8,172(sp)
   14a08:	da402c15 	stw	r9,176(sp)
   14a0c:	00110140 	call	11014 <memchr>
   14a10:	d8c02a17 	ldw	r3,168(sp)
   14a14:	da002b17 	ldw	r8,172(sp)
   14a18:	da402c17 	ldw	r9,176(sp)
   14a1c:	10024826 	beq	r2,zero,15340 <___vfiprintf_internal_r+0x138c>
   14a20:	1567c83a 	sub	r19,r2,r21
   14a24:	df001d83 	ldbu	fp,118(sp)
   14a28:	d8c02215 	stw	r3,136(sp)
   14a2c:	0013883a 	mov	r9,zero
   14a30:	003e6006 	br	143b4 <__alt_data_end+0xf00143b4>
   14a34:	21003fcc 	andi	r4,r4,255
   14a38:	203fc026 	beq	r4,zero,1493c <__alt_data_end+0xf001493c>
   14a3c:	d9c01d85 	stb	r7,118(sp)
   14a40:	003fbe06 	br	1493c <__alt_data_end+0xf001493c>
   14a44:	da802217 	ldw	r10,136(sp)
   14a48:	54400017 	ldw	r17,0(r10)
   14a4c:	50800104 	addi	r2,r10,4
   14a50:	883e3b16 	blt	r17,zero,14340 <__alt_data_end+0xf0014340>
   14a54:	d8802215 	stw	r2,136(sp)
   14a58:	80c00007 	ldb	r3,0(r16)
   14a5c:	003db406 	br	14130 <__alt_data_end+0xf0014130>
   14a60:	01000044 	movi	r4,1
   14a64:	01c00ac4 	movi	r7,43
   14a68:	80c00007 	ldb	r3,0(r16)
   14a6c:	003db006 	br	14130 <__alt_data_end+0xf0014130>
   14a70:	80c00007 	ldb	r3,0(r16)
   14a74:	82800044 	addi	r10,r16,1
   14a78:	1b423c26 	beq	r3,r13,1536c <___vfiprintf_internal_r+0x13b8>
   14a7c:	18bff404 	addi	r2,r3,-48
   14a80:	0013883a 	mov	r9,zero
   14a84:	30822b36 	bltu	r6,r2,15334 <___vfiprintf_internal_r+0x1380>
   14a88:	50c00007 	ldb	r3,0(r10)
   14a8c:	4a4002a4 	muli	r9,r9,10
   14a90:	54000044 	addi	r16,r10,1
   14a94:	8015883a 	mov	r10,r16
   14a98:	4893883a 	add	r9,r9,r2
   14a9c:	18bff404 	addi	r2,r3,-48
   14aa0:	30bff92e 	bgeu	r6,r2,14a88 <__alt_data_end+0xf0014a88>
   14aa4:	483da30e 	bge	r9,zero,14134 <__alt_data_end+0xf0014134>
   14aa8:	027fffc4 	movi	r9,-1
   14aac:	003da106 	br	14134 <__alt_data_end+0xf0014134>
   14ab0:	a5001014 	ori	r20,r20,64
   14ab4:	80c00007 	ldb	r3,0(r16)
   14ab8:	003d9d06 	br	14130 <__alt_data_end+0xf0014130>
   14abc:	da802217 	ldw	r10,136(sp)
   14ac0:	d8001d85 	stb	zero,118(sp)
   14ac4:	50c00204 	addi	r3,r10,8
   14ac8:	54800017 	ldw	r18,0(r10)
   14acc:	54c00117 	ldw	r19,4(r10)
   14ad0:	4801ca16 	blt	r9,zero,151fc <___vfiprintf_internal_r+0x1248>
   14ad4:	013fdfc4 	movi	r4,-129
   14ad8:	94c4b03a 	or	r2,r18,r19
   14adc:	d8c02215 	stw	r3,136(sp)
   14ae0:	a128703a 	and	r20,r20,r4
   14ae4:	0039883a 	mov	fp,zero
   14ae8:	103f341e 	bne	r2,zero,147bc <__alt_data_end+0xf00147bc>
   14aec:	483e2e26 	beq	r9,zero,143a8 <__alt_data_end+0xf00143a8>
   14af0:	0025883a 	mov	r18,zero
   14af4:	94800c04 	addi	r18,r18,48
   14af8:	dc8019c5 	stb	r18,103(sp)
   14afc:	dcc02717 	ldw	r19,156(sp)
   14b00:	dd4019c4 	addi	r21,sp,103
   14b04:	003e2b06 	br	143b4 <__alt_data_end+0xf00143b4>
   14b08:	21003fcc 	andi	r4,r4,255
   14b0c:	2002361e 	bne	r4,zero,153e8 <___vfiprintf_internal_r+0x1434>
   14b10:	1801c126 	beq	r3,zero,15218 <___vfiprintf_internal_r+0x1264>
   14b14:	04800044 	movi	r18,1
   14b18:	d8c01005 	stb	r3,64(sp)
   14b1c:	d8001d85 	stb	zero,118(sp)
   14b20:	9027883a 	mov	r19,r18
   14b24:	dd401004 	addi	r21,sp,64
   14b28:	003f1106 	br	14770 <__alt_data_end+0xf0014770>
   14b2c:	d9402117 	ldw	r5,132(sp)
   14b30:	d9002017 	ldw	r4,128(sp)
   14b34:	d9801a04 	addi	r6,sp,104
   14b38:	d9c02b15 	stw	r7,172(sp)
   14b3c:	dbc02a15 	stw	r15,168(sp)
   14b40:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14b44:	d9c02b17 	ldw	r7,172(sp)
   14b48:	dbc02a17 	ldw	r15,168(sp)
   14b4c:	10006d1e 	bne	r2,zero,14d04 <___vfiprintf_internal_r+0xd50>
   14b50:	d9801b17 	ldw	r6,108(sp)
   14b54:	d8801c17 	ldw	r2,112(sp)
   14b58:	d811883a 	mov	r8,sp
   14b5c:	31400044 	addi	r5,r6,1
   14b60:	003e3306 	br	14430 <__alt_data_end+0xf0014430>
   14b64:	d9401b17 	ldw	r5,108(sp)
   14b68:	d8801c17 	ldw	r2,112(sp)
   14b6c:	29000044 	addi	r4,r5,1
   14b70:	d8c01d87 	ldb	r3,118(sp)
   14b74:	183e4d26 	beq	r3,zero,144ac <__alt_data_end+0xf00144ac>
   14b78:	00c00044 	movi	r3,1
   14b7c:	d9401d84 	addi	r5,sp,118
   14b80:	10c5883a 	add	r2,r2,r3
   14b84:	41400015 	stw	r5,0(r8)
   14b88:	40c00115 	stw	r3,4(r8)
   14b8c:	d8801c15 	stw	r2,112(sp)
   14b90:	d9001b15 	stw	r4,108(sp)
   14b94:	014001c4 	movi	r5,7
   14b98:	2900a90e 	bge	r5,r4,14e40 <___vfiprintf_internal_r+0xe8c>
   14b9c:	1000da1e 	bne	r2,zero,14f08 <___vfiprintf_internal_r+0xf54>
   14ba0:	7000ab1e 	bne	r14,zero,14e50 <___vfiprintf_internal_r+0xe9c>
   14ba4:	000b883a 	mov	r5,zero
   14ba8:	1809883a 	mov	r4,r3
   14bac:	d811883a 	mov	r8,sp
   14bb0:	00c02004 	movi	r3,128
   14bb4:	e0fe4d26 	beq	fp,r3,144ec <__alt_data_end+0xf00144ec>
   14bb8:	4cf9c83a 	sub	fp,r9,r19
   14bbc:	073e7b0e 	bge	zero,fp,145ac <__alt_data_end+0xf00145ac>
   14bc0:	01c00404 	movi	r7,16
   14bc4:	3f01900e 	bge	r7,fp,15208 <___vfiprintf_internal_r+0x1254>
   14bc8:	00c20034 	movhi	r3,2048
   14bcc:	18c14904 	addi	r3,r3,1316
   14bd0:	d8c02415 	stw	r3,144(sp)
   14bd4:	034001c4 	movi	r13,7
   14bd8:	00000506 	br	14bf0 <___vfiprintf_internal_r+0xc3c>
   14bdc:	29000084 	addi	r4,r5,2
   14be0:	42000204 	addi	r8,r8,8
   14be4:	180b883a 	mov	r5,r3
   14be8:	e73ffc04 	addi	fp,fp,-16
   14bec:	3f000d0e 	bge	r7,fp,14c24 <___vfiprintf_internal_r+0xc70>
   14bf0:	10800404 	addi	r2,r2,16
   14bf4:	28c00044 	addi	r3,r5,1
   14bf8:	45c00015 	stw	r23,0(r8)
   14bfc:	41c00115 	stw	r7,4(r8)
   14c00:	d8801c15 	stw	r2,112(sp)
   14c04:	d8c01b15 	stw	r3,108(sp)
   14c08:	68fff40e 	bge	r13,r3,14bdc <__alt_data_end+0xf0014bdc>
   14c0c:	1000101e 	bne	r2,zero,14c50 <___vfiprintf_internal_r+0xc9c>
   14c10:	e73ffc04 	addi	fp,fp,-16
   14c14:	01000044 	movi	r4,1
   14c18:	000b883a 	mov	r5,zero
   14c1c:	d811883a 	mov	r8,sp
   14c20:	3f3ff316 	blt	r7,fp,14bf0 <__alt_data_end+0xf0014bf0>
   14c24:	da802417 	ldw	r10,144(sp)
   14c28:	1705883a 	add	r2,r2,fp
   14c2c:	47000115 	stw	fp,4(r8)
   14c30:	42800015 	stw	r10,0(r8)
   14c34:	d8801c15 	stw	r2,112(sp)
   14c38:	d9001b15 	stw	r4,108(sp)
   14c3c:	00c001c4 	movi	r3,7
   14c40:	19003616 	blt	r3,r4,14d1c <___vfiprintf_internal_r+0xd68>
   14c44:	42000204 	addi	r8,r8,8
   14c48:	21000044 	addi	r4,r4,1
   14c4c:	003e5706 	br	145ac <__alt_data_end+0xf00145ac>
   14c50:	d9402117 	ldw	r5,132(sp)
   14c54:	d9002017 	ldw	r4,128(sp)
   14c58:	d9801a04 	addi	r6,sp,104
   14c5c:	d9c02b15 	stw	r7,172(sp)
   14c60:	db402a15 	stw	r13,168(sp)
   14c64:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14c68:	d9c02b17 	ldw	r7,172(sp)
   14c6c:	db402a17 	ldw	r13,168(sp)
   14c70:	1000241e 	bne	r2,zero,14d04 <___vfiprintf_internal_r+0xd50>
   14c74:	d9401b17 	ldw	r5,108(sp)
   14c78:	d8801c17 	ldw	r2,112(sp)
   14c7c:	d811883a 	mov	r8,sp
   14c80:	29000044 	addi	r4,r5,1
   14c84:	003fd806 	br	14be8 <__alt_data_end+0xf0014be8>
   14c88:	d9401b17 	ldw	r5,108(sp)
   14c8c:	00c20034 	movhi	r3,2048
   14c90:	18c14d04 	addi	r3,r3,1332
   14c94:	d8c02415 	stw	r3,144(sp)
   14c98:	29400044 	addi	r5,r5,1
   14c9c:	d8c02417 	ldw	r3,144(sp)
   14ca0:	14c5883a 	add	r2,r2,r19
   14ca4:	44c00115 	stw	r19,4(r8)
   14ca8:	40c00015 	stw	r3,0(r8)
   14cac:	d8801c15 	stw	r2,112(sp)
   14cb0:	d9401b15 	stw	r5,108(sp)
   14cb4:	00c001c4 	movi	r3,7
   14cb8:	1940070e 	bge	r3,r5,14cd8 <___vfiprintf_internal_r+0xd24>
   14cbc:	103e4826 	beq	r2,zero,145e0 <__alt_data_end+0xf00145e0>
   14cc0:	d9402117 	ldw	r5,132(sp)
   14cc4:	d9002017 	ldw	r4,128(sp)
   14cc8:	d9801a04 	addi	r6,sp,104
   14ccc:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14cd0:	10000c1e 	bne	r2,zero,14d04 <___vfiprintf_internal_r+0xd50>
   14cd4:	d8801c17 	ldw	r2,112(sp)
   14cd8:	8c80010e 	bge	r17,r18,14ce0 <___vfiprintf_internal_r+0xd2c>
   14cdc:	9023883a 	mov	r17,r18
   14ce0:	da802317 	ldw	r10,140(sp)
   14ce4:	5455883a 	add	r10,r10,r17
   14ce8:	da802315 	stw	r10,140(sp)
   14cec:	103e4126 	beq	r2,zero,145f4 <__alt_data_end+0xf00145f4>
   14cf0:	d9402117 	ldw	r5,132(sp)
   14cf4:	d9002017 	ldw	r4,128(sp)
   14cf8:	d9801a04 	addi	r6,sp,104
   14cfc:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14d00:	103e3c26 	beq	r2,zero,145f4 <__alt_data_end+0xf00145f4>
   14d04:	dd002117 	ldw	r20,132(sp)
   14d08:	a080030b 	ldhu	r2,12(r20)
   14d0c:	1080100c 	andi	r2,r2,64
   14d10:	1001231e 	bne	r2,zero,151a0 <___vfiprintf_internal_r+0x11ec>
   14d14:	d8802317 	ldw	r2,140(sp)
   14d18:	003d7b06 	br	14308 <__alt_data_end+0xf0014308>
   14d1c:	1000991e 	bne	r2,zero,14f84 <___vfiprintf_internal_r+0xfd0>
   14d20:	00c00044 	movi	r3,1
   14d24:	9805883a 	mov	r2,r19
   14d28:	dd400015 	stw	r21,0(sp)
   14d2c:	dcc00115 	stw	r19,4(sp)
   14d30:	dcc01c15 	stw	r19,112(sp)
   14d34:	d8c01b15 	stw	r3,108(sp)
   14d38:	d811883a 	mov	r8,sp
   14d3c:	42000204 	addi	r8,r8,8
   14d40:	a2c0010c 	andi	r11,r20,4
   14d44:	583fe426 	beq	r11,zero,14cd8 <__alt_data_end+0xf0014cd8>
   14d48:	8ca7c83a 	sub	r19,r17,r18
   14d4c:	04ffe20e 	bge	zero,r19,14cd8 <__alt_data_end+0xf0014cd8>
   14d50:	01c00404 	movi	r7,16
   14d54:	3cffcc0e 	bge	r7,r19,14c88 <__alt_data_end+0xf0014c88>
   14d58:	02820034 	movhi	r10,2048
   14d5c:	52814d04 	addi	r10,r10,1332
   14d60:	d9001b17 	ldw	r4,108(sp)
   14d64:	da802415 	stw	r10,144(sp)
   14d68:	382b883a 	mov	r21,r7
   14d6c:	050001c4 	movi	r20,7
   14d70:	df002017 	ldw	fp,128(sp)
   14d74:	00000506 	br	14d8c <___vfiprintf_internal_r+0xdd8>
   14d78:	21400084 	addi	r5,r4,2
   14d7c:	42000204 	addi	r8,r8,8
   14d80:	1809883a 	mov	r4,r3
   14d84:	9cfffc04 	addi	r19,r19,-16
   14d88:	acffc40e 	bge	r21,r19,14c9c <__alt_data_end+0xf0014c9c>
   14d8c:	10800404 	addi	r2,r2,16
   14d90:	20c00044 	addi	r3,r4,1
   14d94:	45800015 	stw	r22,0(r8)
   14d98:	45400115 	stw	r21,4(r8)
   14d9c:	d8801c15 	stw	r2,112(sp)
   14da0:	d8c01b15 	stw	r3,108(sp)
   14da4:	a0fff40e 	bge	r20,r3,14d78 <__alt_data_end+0xf0014d78>
   14da8:	1000041e 	bne	r2,zero,14dbc <___vfiprintf_internal_r+0xe08>
   14dac:	01400044 	movi	r5,1
   14db0:	0009883a 	mov	r4,zero
   14db4:	d811883a 	mov	r8,sp
   14db8:	003ff206 	br	14d84 <__alt_data_end+0xf0014d84>
   14dbc:	d9402117 	ldw	r5,132(sp)
   14dc0:	d9801a04 	addi	r6,sp,104
   14dc4:	e009883a 	mov	r4,fp
   14dc8:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14dcc:	103fcd1e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   14dd0:	d9001b17 	ldw	r4,108(sp)
   14dd4:	d8801c17 	ldw	r2,112(sp)
   14dd8:	d811883a 	mov	r8,sp
   14ddc:	21400044 	addi	r5,r4,1
   14de0:	003fe806 	br	14d84 <__alt_data_end+0xf0014d84>
   14de4:	d9402117 	ldw	r5,132(sp)
   14de8:	d9002017 	ldw	r4,128(sp)
   14dec:	d9801a04 	addi	r6,sp,104
   14df0:	d9c02b15 	stw	r7,172(sp)
   14df4:	db402a15 	stw	r13,168(sp)
   14df8:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14dfc:	d9c02b17 	ldw	r7,172(sp)
   14e00:	db402a17 	ldw	r13,168(sp)
   14e04:	103fbf1e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   14e08:	d9401b17 	ldw	r5,108(sp)
   14e0c:	d8801c17 	ldw	r2,112(sp)
   14e10:	d811883a 	mov	r8,sp
   14e14:	29800044 	addi	r6,r5,1
   14e18:	003dc406 	br	1452c <__alt_data_end+0xf001452c>
   14e1c:	1000d21e 	bne	r2,zero,15168 <___vfiprintf_internal_r+0x11b4>
   14e20:	d8c01d87 	ldb	r3,118(sp)
   14e24:	18009526 	beq	r3,zero,1507c <___vfiprintf_internal_r+0x10c8>
   14e28:	00800044 	movi	r2,1
   14e2c:	d8c01d84 	addi	r3,sp,118
   14e30:	1009883a 	mov	r4,r2
   14e34:	d8c00015 	stw	r3,0(sp)
   14e38:	d8800115 	stw	r2,4(sp)
   14e3c:	d811883a 	mov	r8,sp
   14e40:	200b883a 	mov	r5,r4
   14e44:	42000204 	addi	r8,r8,8
   14e48:	21000044 	addi	r4,r4,1
   14e4c:	003d9706 	br	144ac <__alt_data_end+0xf00144ac>
   14e50:	d9001d04 	addi	r4,sp,116
   14e54:	00800084 	movi	r2,2
   14e58:	d9000015 	stw	r4,0(sp)
   14e5c:	d8800115 	stw	r2,4(sp)
   14e60:	1809883a 	mov	r4,r3
   14e64:	d811883a 	mov	r8,sp
   14e68:	200b883a 	mov	r5,r4
   14e6c:	42000204 	addi	r8,r8,8
   14e70:	21000044 	addi	r4,r4,1
   14e74:	003f4e06 	br	14bb0 <__alt_data_end+0xf0014bb0>
   14e78:	d8001d85 	stb	zero,118(sp)
   14e7c:	48005016 	blt	r9,zero,14fc0 <___vfiprintf_internal_r+0x100c>
   14e80:	00ffdfc4 	movi	r3,-129
   14e84:	94c4b03a 	or	r2,r18,r19
   14e88:	a0e8703a 	and	r20,r20,r3
   14e8c:	103d4426 	beq	r2,zero,143a0 <__alt_data_end+0xf00143a0>
   14e90:	0039883a 	mov	fp,zero
   14e94:	d9002617 	ldw	r4,152(sp)
   14e98:	dd401a04 	addi	r21,sp,104
   14e9c:	908003cc 	andi	r2,r18,15
   14ea0:	9806973a 	slli	r3,r19,28
   14ea4:	2085883a 	add	r2,r4,r2
   14ea8:	9024d13a 	srli	r18,r18,4
   14eac:	10800003 	ldbu	r2,0(r2)
   14eb0:	9826d13a 	srli	r19,r19,4
   14eb4:	ad7fffc4 	addi	r21,r21,-1
   14eb8:	1ca4b03a 	or	r18,r3,r18
   14ebc:	a8800005 	stb	r2,0(r21)
   14ec0:	94c4b03a 	or	r2,r18,r19
   14ec4:	103ff51e 	bne	r2,zero,14e9c <__alt_data_end+0xf0014e9c>
   14ec8:	003e5906 	br	14830 <__alt_data_end+0xf0014830>
   14ecc:	d9402117 	ldw	r5,132(sp)
   14ed0:	d9002017 	ldw	r4,128(sp)
   14ed4:	d9801a04 	addi	r6,sp,104
   14ed8:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14edc:	103f891e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   14ee0:	d8801c17 	ldw	r2,112(sp)
   14ee4:	d811883a 	mov	r8,sp
   14ee8:	003f9506 	br	14d40 <__alt_data_end+0xf0014d40>
   14eec:	d9402117 	ldw	r5,132(sp)
   14ef0:	d9002017 	ldw	r4,128(sp)
   14ef4:	d9801a04 	addi	r6,sp,104
   14ef8:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14efc:	103f811e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   14f00:	d811883a 	mov	r8,sp
   14f04:	003ced06 	br	142bc <__alt_data_end+0xf00142bc>
   14f08:	d9402117 	ldw	r5,132(sp)
   14f0c:	d9002017 	ldw	r4,128(sp)
   14f10:	d9801a04 	addi	r6,sp,104
   14f14:	da402c15 	stw	r9,176(sp)
   14f18:	db802a15 	stw	r14,168(sp)
   14f1c:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14f20:	da402c17 	ldw	r9,176(sp)
   14f24:	db802a17 	ldw	r14,168(sp)
   14f28:	103f761e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   14f2c:	d9401b17 	ldw	r5,108(sp)
   14f30:	d8801c17 	ldw	r2,112(sp)
   14f34:	d811883a 	mov	r8,sp
   14f38:	29000044 	addi	r4,r5,1
   14f3c:	003d5b06 	br	144ac <__alt_data_end+0xf00144ac>
   14f40:	d9402117 	ldw	r5,132(sp)
   14f44:	d9002017 	ldw	r4,128(sp)
   14f48:	d9801a04 	addi	r6,sp,104
   14f4c:	da402c15 	stw	r9,176(sp)
   14f50:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14f54:	da402c17 	ldw	r9,176(sp)
   14f58:	103f6a1e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   14f5c:	d9401b17 	ldw	r5,108(sp)
   14f60:	d8801c17 	ldw	r2,112(sp)
   14f64:	d811883a 	mov	r8,sp
   14f68:	29000044 	addi	r4,r5,1
   14f6c:	003f1006 	br	14bb0 <__alt_data_end+0xf0014bb0>
   14f70:	1000c31e 	bne	r2,zero,15280 <___vfiprintf_internal_r+0x12cc>
   14f74:	01000044 	movi	r4,1
   14f78:	000b883a 	mov	r5,zero
   14f7c:	d811883a 	mov	r8,sp
   14f80:	003f0d06 	br	14bb8 <__alt_data_end+0xf0014bb8>
   14f84:	d9402117 	ldw	r5,132(sp)
   14f88:	d9002017 	ldw	r4,128(sp)
   14f8c:	d9801a04 	addi	r6,sp,104
   14f90:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   14f94:	103f5b1e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   14f98:	d9001b17 	ldw	r4,108(sp)
   14f9c:	d8801c17 	ldw	r2,112(sp)
   14fa0:	d811883a 	mov	r8,sp
   14fa4:	21000044 	addi	r4,r4,1
   14fa8:	003d8006 	br	145ac <__alt_data_end+0xf00145ac>
   14fac:	01020034 	movhi	r4,2048
   14fb0:	2100d804 	addi	r4,r4,864
   14fb4:	d9002615 	stw	r4,152(sp)
   14fb8:	d8c02215 	stw	r3,136(sp)
   14fbc:	1029883a 	mov	r20,r2
   14fc0:	94c4b03a 	or	r2,r18,r19
   14fc4:	103fb21e 	bne	r2,zero,14e90 <__alt_data_end+0xf0014e90>
   14fc8:	0039883a 	mov	fp,zero
   14fcc:	00800084 	movi	r2,2
   14fd0:	003e6b06 	br	14980 <__alt_data_end+0xf0014980>
   14fd4:	da802217 	ldw	r10,136(sp)
   14fd8:	d8001d85 	stb	zero,118(sp)
   14fdc:	0027883a 	mov	r19,zero
   14fe0:	50800104 	addi	r2,r10,4
   14fe4:	54800017 	ldw	r18,0(r10)
   14fe8:	483e6016 	blt	r9,zero,1496c <__alt_data_end+0xf001496c>
   14fec:	00ffdfc4 	movi	r3,-129
   14ff0:	d8802215 	stw	r2,136(sp)
   14ff4:	a0e8703a 	and	r20,r20,r3
   14ff8:	0039883a 	mov	fp,zero
   14ffc:	903ebb26 	beq	r18,zero,14aec <__alt_data_end+0xf0014aec>
   15000:	00800244 	movi	r2,9
   15004:	14bdee36 	bltu	r2,r18,147c0 <__alt_data_end+0xf00147c0>
   15008:	003eba06 	br	14af4 <__alt_data_end+0xf0014af4>
   1500c:	00800c04 	movi	r2,48
   15010:	d8c01d45 	stb	r3,117(sp)
   15014:	d8801d05 	stb	r2,116(sp)
   15018:	d8001d85 	stb	zero,118(sp)
   1501c:	a0c00094 	ori	r3,r20,2
   15020:	4800a916 	blt	r9,zero,152c8 <___vfiprintf_internal_r+0x1314>
   15024:	00bfdfc4 	movi	r2,-129
   15028:	a096703a 	and	r11,r20,r2
   1502c:	5d000094 	ori	r20,r11,2
   15030:	0039883a 	mov	fp,zero
   15034:	003f9706 	br	14e94 <__alt_data_end+0xf0014e94>
   15038:	8025883a 	mov	r18,r16
   1503c:	003c2e06 	br	140f8 <__alt_data_end+0xf00140f8>
   15040:	00820034 	movhi	r2,2048
   15044:	1080d804 	addi	r2,r2,864
   15048:	0039883a 	mov	fp,zero
   1504c:	d8802615 	stw	r2,152(sp)
   15050:	003f9006 	br	14e94 <__alt_data_end+0xf0014e94>
   15054:	04a5c83a 	sub	r18,zero,r18
   15058:	07000b44 	movi	fp,45
   1505c:	9004c03a 	cmpne	r2,r18,zero
   15060:	04e7c83a 	sub	r19,zero,r19
   15064:	df001d85 	stb	fp,118(sp)
   15068:	98a7c83a 	sub	r19,r19,r2
   1506c:	48009f16 	blt	r9,zero,152ec <___vfiprintf_internal_r+0x1338>
   15070:	00bfdfc4 	movi	r2,-129
   15074:	a0a8703a 	and	r20,r20,r2
   15078:	003dd006 	br	147bc <__alt_data_end+0xf00147bc>
   1507c:	70004c26 	beq	r14,zero,151b0 <___vfiprintf_internal_r+0x11fc>
   15080:	00800084 	movi	r2,2
   15084:	d8c01d04 	addi	r3,sp,116
   15088:	d8c00015 	stw	r3,0(sp)
   1508c:	d8800115 	stw	r2,4(sp)
   15090:	01000044 	movi	r4,1
   15094:	d811883a 	mov	r8,sp
   15098:	003f7306 	br	14e68 <__alt_data_end+0xf0014e68>
   1509c:	a080100c 	andi	r2,r20,64
   150a0:	da802217 	ldw	r10,136(sp)
   150a4:	103e0626 	beq	r2,zero,148c0 <__alt_data_end+0xf00148c0>
   150a8:	5480000f 	ldh	r18,0(r10)
   150ac:	52800104 	addi	r10,r10,4
   150b0:	da802215 	stw	r10,136(sp)
   150b4:	9027d7fa 	srai	r19,r18,31
   150b8:	9805883a 	mov	r2,r19
   150bc:	003db806 	br	147a0 <__alt_data_end+0xf00147a0>
   150c0:	a080040c 	andi	r2,r20,16
   150c4:	1000091e 	bne	r2,zero,150ec <___vfiprintf_internal_r+0x1138>
   150c8:	a2c0100c 	andi	r11,r20,64
   150cc:	58000726 	beq	r11,zero,150ec <___vfiprintf_internal_r+0x1138>
   150d0:	da802217 	ldw	r10,136(sp)
   150d4:	50800017 	ldw	r2,0(r10)
   150d8:	52800104 	addi	r10,r10,4
   150dc:	da802215 	stw	r10,136(sp)
   150e0:	da802317 	ldw	r10,140(sp)
   150e4:	1280000d 	sth	r10,0(r2)
   150e8:	003be706 	br	14088 <__alt_data_end+0xf0014088>
   150ec:	da802217 	ldw	r10,136(sp)
   150f0:	50800017 	ldw	r2,0(r10)
   150f4:	52800104 	addi	r10,r10,4
   150f8:	da802215 	stw	r10,136(sp)
   150fc:	da802317 	ldw	r10,140(sp)
   15100:	12800015 	stw	r10,0(r2)
   15104:	003be006 	br	14088 <__alt_data_end+0xf0014088>
   15108:	a080100c 	andi	r2,r20,64
   1510c:	da802217 	ldw	r10,136(sp)
   15110:	10003026 	beq	r2,zero,151d4 <___vfiprintf_internal_r+0x1220>
   15114:	5480000b 	ldhu	r18,0(r10)
   15118:	52800104 	addi	r10,r10,4
   1511c:	0027883a 	mov	r19,zero
   15120:	da802215 	stw	r10,136(sp)
   15124:	003d8006 	br	14728 <__alt_data_end+0xf0014728>
   15128:	80c00007 	ldb	r3,0(r16)
   1512c:	003c0006 	br	14130 <__alt_data_end+0xf0014130>
   15130:	a080100c 	andi	r2,r20,64
   15134:	d8001d85 	stb	zero,118(sp)
   15138:	da802217 	ldw	r10,136(sp)
   1513c:	1000201e 	bne	r2,zero,151c0 <___vfiprintf_internal_r+0x120c>
   15140:	50800104 	addi	r2,r10,4
   15144:	54800017 	ldw	r18,0(r10)
   15148:	0027883a 	mov	r19,zero
   1514c:	483def0e 	bge	r9,zero,1490c <__alt_data_end+0xf001490c>
   15150:	94c6b03a 	or	r3,r18,r19
   15154:	d8802215 	stw	r2,136(sp)
   15158:	183d4e1e 	bne	r3,zero,14694 <__alt_data_end+0xf0014694>
   1515c:	0039883a 	mov	fp,zero
   15160:	0005883a 	mov	r2,zero
   15164:	003e0606 	br	14980 <__alt_data_end+0xf0014980>
   15168:	d9402117 	ldw	r5,132(sp)
   1516c:	d9002017 	ldw	r4,128(sp)
   15170:	d9801a04 	addi	r6,sp,104
   15174:	da402c15 	stw	r9,176(sp)
   15178:	db802a15 	stw	r14,168(sp)
   1517c:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   15180:	da402c17 	ldw	r9,176(sp)
   15184:	db802a17 	ldw	r14,168(sp)
   15188:	103ede1e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   1518c:	d9401b17 	ldw	r5,108(sp)
   15190:	d8801c17 	ldw	r2,112(sp)
   15194:	d811883a 	mov	r8,sp
   15198:	29000044 	addi	r4,r5,1
   1519c:	003e7406 	br	14b70 <__alt_data_end+0xf0014b70>
   151a0:	00bfffc4 	movi	r2,-1
   151a4:	003c5806 	br	14308 <__alt_data_end+0xf0014308>
   151a8:	d811883a 	mov	r8,sp
   151ac:	003ee806 	br	14d50 <__alt_data_end+0xf0014d50>
   151b0:	000b883a 	mov	r5,zero
   151b4:	01000044 	movi	r4,1
   151b8:	d811883a 	mov	r8,sp
   151bc:	003e7c06 	br	14bb0 <__alt_data_end+0xf0014bb0>
   151c0:	50800104 	addi	r2,r10,4
   151c4:	5480000b 	ldhu	r18,0(r10)
   151c8:	0027883a 	mov	r19,zero
   151cc:	483dcf0e 	bge	r9,zero,1490c <__alt_data_end+0xf001490c>
   151d0:	003fdf06 	br	15150 <__alt_data_end+0xf0015150>
   151d4:	54800017 	ldw	r18,0(r10)
   151d8:	52800104 	addi	r10,r10,4
   151dc:	0027883a 	mov	r19,zero
   151e0:	da802215 	stw	r10,136(sp)
   151e4:	003d5006 	br	14728 <__alt_data_end+0xf0014728>
   151e8:	50800104 	addi	r2,r10,4
   151ec:	5480000b 	ldhu	r18,0(r10)
   151f0:	0027883a 	mov	r19,zero
   151f4:	483f7d0e 	bge	r9,zero,14fec <__alt_data_end+0xf0014fec>
   151f8:	003ddc06 	br	1496c <__alt_data_end+0xf001496c>
   151fc:	d8c02215 	stw	r3,136(sp)
   15200:	0039883a 	mov	fp,zero
   15204:	003ddb06 	br	14974 <__alt_data_end+0xf0014974>
   15208:	02820034 	movhi	r10,2048
   1520c:	52814904 	addi	r10,r10,1316
   15210:	da802415 	stw	r10,144(sp)
   15214:	003e8306 	br	14c24 <__alt_data_end+0xf0014c24>
   15218:	d8801c17 	ldw	r2,112(sp)
   1521c:	dd002117 	ldw	r20,132(sp)
   15220:	103eb926 	beq	r2,zero,14d08 <__alt_data_end+0xf0014d08>
   15224:	d9002017 	ldw	r4,128(sp)
   15228:	d9801a04 	addi	r6,sp,104
   1522c:	a00b883a 	mov	r5,r20
   15230:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   15234:	003eb406 	br	14d08 <__alt_data_end+0xf0014d08>
   15238:	80c00043 	ldbu	r3,1(r16)
   1523c:	a5000814 	ori	r20,r20,32
   15240:	84000044 	addi	r16,r16,1
   15244:	18c03fcc 	andi	r3,r3,255
   15248:	18c0201c 	xori	r3,r3,128
   1524c:	18ffe004 	addi	r3,r3,-128
   15250:	003bb706 	br	14130 <__alt_data_end+0xf0014130>
   15254:	a809883a 	mov	r4,r21
   15258:	d8c02a15 	stw	r3,168(sp)
   1525c:	da002b15 	stw	r8,172(sp)
   15260:	00095940 	call	9594 <strlen>
   15264:	d8c02a17 	ldw	r3,168(sp)
   15268:	1027883a 	mov	r19,r2
   1526c:	df001d83 	ldbu	fp,118(sp)
   15270:	d8c02215 	stw	r3,136(sp)
   15274:	0013883a 	mov	r9,zero
   15278:	da002b17 	ldw	r8,172(sp)
   1527c:	003c4d06 	br	143b4 <__alt_data_end+0xf00143b4>
   15280:	d9402117 	ldw	r5,132(sp)
   15284:	d9002017 	ldw	r4,128(sp)
   15288:	d9801a04 	addi	r6,sp,104
   1528c:	da402c15 	stw	r9,176(sp)
   15290:	0013ea00 	call	13ea0 <__sprint_r.part.0>
   15294:	da402c17 	ldw	r9,176(sp)
   15298:	103e9a1e 	bne	r2,zero,14d04 <__alt_data_end+0xf0014d04>
   1529c:	d9401b17 	ldw	r5,108(sp)
   152a0:	d8801c17 	ldw	r2,112(sp)
   152a4:	d811883a 	mov	r8,sp
   152a8:	29000044 	addi	r4,r5,1
   152ac:	003e4206 	br	14bb8 <__alt_data_end+0xf0014bb8>
   152b0:	d9401b17 	ldw	r5,108(sp)
   152b4:	01020034 	movhi	r4,2048
   152b8:	21014d04 	addi	r4,r4,1332
   152bc:	d9002415 	stw	r4,144(sp)
   152c0:	29400044 	addi	r5,r5,1
   152c4:	003c6d06 	br	1447c <__alt_data_end+0xf001447c>
   152c8:	0039883a 	mov	fp,zero
   152cc:	00800084 	movi	r2,2
   152d0:	10803fcc 	andi	r2,r2,255
   152d4:	01000044 	movi	r4,1
   152d8:	11001e26 	beq	r2,r4,15354 <___vfiprintf_internal_r+0x13a0>
   152dc:	01000084 	movi	r4,2
   152e0:	11001e1e 	bne	r2,r4,1535c <___vfiprintf_internal_r+0x13a8>
   152e4:	1829883a 	mov	r20,r3
   152e8:	003eea06 	br	14e94 <__alt_data_end+0xf0014e94>
   152ec:	a007883a 	mov	r3,r20
   152f0:	00800044 	movi	r2,1
   152f4:	003ff606 	br	152d0 <__alt_data_end+0xf00152d0>
   152f8:	00800184 	movi	r2,6
   152fc:	1240012e 	bgeu	r2,r9,15304 <___vfiprintf_internal_r+0x1350>
   15300:	1013883a 	mov	r9,r2
   15304:	4827883a 	mov	r19,r9
   15308:	4825883a 	mov	r18,r9
   1530c:	48001516 	blt	r9,zero,15364 <___vfiprintf_internal_r+0x13b0>
   15310:	05420034 	movhi	r21,2048
   15314:	d8c02215 	stw	r3,136(sp)
   15318:	ad40dd04 	addi	r21,r21,884
   1531c:	003d1406 	br	14770 <__alt_data_end+0xf0014770>
   15320:	02820034 	movhi	r10,2048
   15324:	52814904 	addi	r10,r10,1316
   15328:	da802415 	stw	r10,144(sp)
   1532c:	200d883a 	mov	r6,r4
   15330:	003c9106 	br	14578 <__alt_data_end+0xf0014578>
   15334:	5021883a 	mov	r16,r10
   15338:	0013883a 	mov	r9,zero
   1533c:	003b7d06 	br	14134 <__alt_data_end+0xf0014134>
   15340:	4827883a 	mov	r19,r9
   15344:	df001d83 	ldbu	fp,118(sp)
   15348:	d8c02215 	stw	r3,136(sp)
   1534c:	0013883a 	mov	r9,zero
   15350:	003c1806 	br	143b4 <__alt_data_end+0xf00143b4>
   15354:	1829883a 	mov	r20,r3
   15358:	003d1806 	br	147bc <__alt_data_end+0xf00147bc>
   1535c:	1829883a 	mov	r20,r3
   15360:	003ccd06 	br	14698 <__alt_data_end+0xf0014698>
   15364:	0025883a 	mov	r18,zero
   15368:	003fe906 	br	15310 <__alt_data_end+0xf0015310>
   1536c:	d8802217 	ldw	r2,136(sp)
   15370:	80c00043 	ldbu	r3,1(r16)
   15374:	5021883a 	mov	r16,r10
   15378:	12400017 	ldw	r9,0(r2)
   1537c:	10800104 	addi	r2,r2,4
   15380:	d8802215 	stw	r2,136(sp)
   15384:	483faf0e 	bge	r9,zero,15244 <__alt_data_end+0xf0015244>
   15388:	18c03fcc 	andi	r3,r3,255
   1538c:	18c0201c 	xori	r3,r3,128
   15390:	027fffc4 	movi	r9,-1
   15394:	18ffe004 	addi	r3,r3,-128
   15398:	003b6506 	br	14130 <__alt_data_end+0xf0014130>
   1539c:	d9c01d85 	stb	r7,118(sp)
   153a0:	003ca006 	br	14624 <__alt_data_end+0xf0014624>
   153a4:	d9c01d85 	stb	r7,118(sp)
   153a8:	003cad06 	br	14660 <__alt_data_end+0xf0014660>
   153ac:	d9c01d85 	stb	r7,118(sp)
   153b0:	003d7d06 	br	149a8 <__alt_data_end+0xf00149a8>
   153b4:	d9c01d85 	stb	r7,118(sp)
   153b8:	003d5f06 	br	14938 <__alt_data_end+0xf0014938>
   153bc:	a080004c 	andi	r2,r20,1
   153c0:	0039883a 	mov	fp,zero
   153c4:	10000526 	beq	r2,zero,153dc <___vfiprintf_internal_r+0x1428>
   153c8:	00800c04 	movi	r2,48
   153cc:	d88019c5 	stb	r2,103(sp)
   153d0:	dcc02717 	ldw	r19,156(sp)
   153d4:	dd4019c4 	addi	r21,sp,103
   153d8:	003bf606 	br	143b4 <__alt_data_end+0xf00143b4>
   153dc:	0027883a 	mov	r19,zero
   153e0:	dd401a04 	addi	r21,sp,104
   153e4:	003bf306 	br	143b4 <__alt_data_end+0xf00143b4>
   153e8:	d9c01d85 	stb	r7,118(sp)
   153ec:	003dc806 	br	14b10 <__alt_data_end+0xf0014b10>
   153f0:	d9c01d85 	stb	r7,118(sp)
   153f4:	003d3a06 	br	148e0 <__alt_data_end+0xf00148e0>
   153f8:	d9c01d85 	stb	r7,118(sp)
   153fc:	003d2a06 	br	148a8 <__alt_data_end+0xf00148a8>
   15400:	d9c01d85 	stb	r7,118(sp)
   15404:	003cde06 	br	14780 <__alt_data_end+0xf0014780>
   15408:	d9c01d85 	stb	r7,118(sp)
   1540c:	003cbc06 	br	14700 <__alt_data_end+0xf0014700>

00015410 <__vfiprintf_internal>:
   15410:	00820034 	movhi	r2,2048
   15414:	108b0204 	addi	r2,r2,11272
   15418:	300f883a 	mov	r7,r6
   1541c:	280d883a 	mov	r6,r5
   15420:	200b883a 	mov	r5,r4
   15424:	11000017 	ldw	r4,0(r2)
   15428:	0013fb41 	jmpi	13fb4 <___vfiprintf_internal_r>

0001542c <__sbprintf>:
   1542c:	2880030b 	ldhu	r2,12(r5)
   15430:	2ac01917 	ldw	r11,100(r5)
   15434:	2a80038b 	ldhu	r10,14(r5)
   15438:	2a400717 	ldw	r9,28(r5)
   1543c:	2a000917 	ldw	r8,36(r5)
   15440:	defee204 	addi	sp,sp,-1144
   15444:	00c10004 	movi	r3,1024
   15448:	dc011a15 	stw	r16,1128(sp)
   1544c:	10bfff4c 	andi	r2,r2,65533
   15450:	2821883a 	mov	r16,r5
   15454:	d8cb883a 	add	r5,sp,r3
   15458:	dc811c15 	stw	r18,1136(sp)
   1545c:	dc411b15 	stw	r17,1132(sp)
   15460:	dfc11d15 	stw	ra,1140(sp)
   15464:	2025883a 	mov	r18,r4
   15468:	d881030d 	sth	r2,1036(sp)
   1546c:	dac11915 	stw	r11,1124(sp)
   15470:	da81038d 	sth	r10,1038(sp)
   15474:	da410715 	stw	r9,1052(sp)
   15478:	da010915 	stw	r8,1060(sp)
   1547c:	dec10015 	stw	sp,1024(sp)
   15480:	dec10415 	stw	sp,1040(sp)
   15484:	d8c10215 	stw	r3,1032(sp)
   15488:	d8c10515 	stw	r3,1044(sp)
   1548c:	d8010615 	stw	zero,1048(sp)
   15490:	0013fb40 	call	13fb4 <___vfiprintf_internal_r>
   15494:	1023883a 	mov	r17,r2
   15498:	10000416 	blt	r2,zero,154ac <__sbprintf+0x80>
   1549c:	d9410004 	addi	r5,sp,1024
   154a0:	9009883a 	mov	r4,r18
   154a4:	000f6cc0 	call	f6cc <_fflush_r>
   154a8:	10000d1e 	bne	r2,zero,154e0 <__sbprintf+0xb4>
   154ac:	d881030b 	ldhu	r2,1036(sp)
   154b0:	1080100c 	andi	r2,r2,64
   154b4:	10000326 	beq	r2,zero,154c4 <__sbprintf+0x98>
   154b8:	8080030b 	ldhu	r2,12(r16)
   154bc:	10801014 	ori	r2,r2,64
   154c0:	8080030d 	sth	r2,12(r16)
   154c4:	8805883a 	mov	r2,r17
   154c8:	dfc11d17 	ldw	ra,1140(sp)
   154cc:	dc811c17 	ldw	r18,1136(sp)
   154d0:	dc411b17 	ldw	r17,1132(sp)
   154d4:	dc011a17 	ldw	r16,1128(sp)
   154d8:	dec11e04 	addi	sp,sp,1144
   154dc:	f800283a 	ret
   154e0:	047fffc4 	movi	r17,-1
   154e4:	003ff106 	br	154ac <__alt_data_end+0xf00154ac>

000154e8 <_write_r>:
   154e8:	defffd04 	addi	sp,sp,-12
   154ec:	2805883a 	mov	r2,r5
   154f0:	dc000015 	stw	r16,0(sp)
   154f4:	04020034 	movhi	r16,2048
   154f8:	dc400115 	stw	r17,4(sp)
   154fc:	300b883a 	mov	r5,r6
   15500:	840b4c04 	addi	r16,r16,11568
   15504:	2023883a 	mov	r17,r4
   15508:	380d883a 	mov	r6,r7
   1550c:	1009883a 	mov	r4,r2
   15510:	dfc00215 	stw	ra,8(sp)
   15514:	80000015 	stw	zero,0(r16)
   15518:	0017afc0 	call	17afc <write>
   1551c:	00ffffc4 	movi	r3,-1
   15520:	10c00526 	beq	r2,r3,15538 <_write_r+0x50>
   15524:	dfc00217 	ldw	ra,8(sp)
   15528:	dc400117 	ldw	r17,4(sp)
   1552c:	dc000017 	ldw	r16,0(sp)
   15530:	dec00304 	addi	sp,sp,12
   15534:	f800283a 	ret
   15538:	80c00017 	ldw	r3,0(r16)
   1553c:	183ff926 	beq	r3,zero,15524 <__alt_data_end+0xf0015524>
   15540:	88c00015 	stw	r3,0(r17)
   15544:	003ff706 	br	15524 <__alt_data_end+0xf0015524>

00015548 <_close_r>:
   15548:	defffd04 	addi	sp,sp,-12
   1554c:	dc000015 	stw	r16,0(sp)
   15550:	04020034 	movhi	r16,2048
   15554:	dc400115 	stw	r17,4(sp)
   15558:	840b4c04 	addi	r16,r16,11568
   1555c:	2023883a 	mov	r17,r4
   15560:	2809883a 	mov	r4,r5
   15564:	dfc00215 	stw	ra,8(sp)
   15568:	80000015 	stw	zero,0(r16)
   1556c:	00173d80 	call	173d8 <close>
   15570:	00ffffc4 	movi	r3,-1
   15574:	10c00526 	beq	r2,r3,1558c <_close_r+0x44>
   15578:	dfc00217 	ldw	ra,8(sp)
   1557c:	dc400117 	ldw	r17,4(sp)
   15580:	dc000017 	ldw	r16,0(sp)
   15584:	dec00304 	addi	sp,sp,12
   15588:	f800283a 	ret
   1558c:	80c00017 	ldw	r3,0(r16)
   15590:	183ff926 	beq	r3,zero,15578 <__alt_data_end+0xf0015578>
   15594:	88c00015 	stw	r3,0(r17)
   15598:	003ff706 	br	15578 <__alt_data_end+0xf0015578>

0001559c <_calloc_r>:
   1559c:	298b383a 	mul	r5,r5,r6
   155a0:	defffe04 	addi	sp,sp,-8
   155a4:	dfc00115 	stw	ra,4(sp)
   155a8:	dc000015 	stw	r16,0(sp)
   155ac:	00108080 	call	10808 <_malloc_r>
   155b0:	10002926 	beq	r2,zero,15658 <_calloc_r+0xbc>
   155b4:	11bfff17 	ldw	r6,-4(r2)
   155b8:	1021883a 	mov	r16,r2
   155bc:	00bfff04 	movi	r2,-4
   155c0:	308c703a 	and	r6,r6,r2
   155c4:	00c00904 	movi	r3,36
   155c8:	308d883a 	add	r6,r6,r2
   155cc:	19801636 	bltu	r3,r6,15628 <_calloc_r+0x8c>
   155d0:	008004c4 	movi	r2,19
   155d4:	11800b2e 	bgeu	r2,r6,15604 <_calloc_r+0x68>
   155d8:	80000015 	stw	zero,0(r16)
   155dc:	80000115 	stw	zero,4(r16)
   155e0:	008006c4 	movi	r2,27
   155e4:	11801a2e 	bgeu	r2,r6,15650 <_calloc_r+0xb4>
   155e8:	80000215 	stw	zero,8(r16)
   155ec:	80000315 	stw	zero,12(r16)
   155f0:	30c0151e 	bne	r6,r3,15648 <_calloc_r+0xac>
   155f4:	80000415 	stw	zero,16(r16)
   155f8:	80800604 	addi	r2,r16,24
   155fc:	80000515 	stw	zero,20(r16)
   15600:	00000106 	br	15608 <_calloc_r+0x6c>
   15604:	8005883a 	mov	r2,r16
   15608:	10000015 	stw	zero,0(r2)
   1560c:	10000115 	stw	zero,4(r2)
   15610:	10000215 	stw	zero,8(r2)
   15614:	8005883a 	mov	r2,r16
   15618:	dfc00117 	ldw	ra,4(sp)
   1561c:	dc000017 	ldw	r16,0(sp)
   15620:	dec00204 	addi	sp,sp,8
   15624:	f800283a 	ret
   15628:	000b883a 	mov	r5,zero
   1562c:	8009883a 	mov	r4,r16
   15630:	00092680 	call	9268 <memset>
   15634:	8005883a 	mov	r2,r16
   15638:	dfc00117 	ldw	ra,4(sp)
   1563c:	dc000017 	ldw	r16,0(sp)
   15640:	dec00204 	addi	sp,sp,8
   15644:	f800283a 	ret
   15648:	80800404 	addi	r2,r16,16
   1564c:	003fee06 	br	15608 <__alt_data_end+0xf0015608>
   15650:	80800204 	addi	r2,r16,8
   15654:	003fec06 	br	15608 <__alt_data_end+0xf0015608>
   15658:	0005883a 	mov	r2,zero
   1565c:	003fee06 	br	15618 <__alt_data_end+0xf0015618>

00015660 <_fclose_r>:
   15660:	28003926 	beq	r5,zero,15748 <_fclose_r+0xe8>
   15664:	defffc04 	addi	sp,sp,-16
   15668:	dc400115 	stw	r17,4(sp)
   1566c:	dc000015 	stw	r16,0(sp)
   15670:	dfc00315 	stw	ra,12(sp)
   15674:	dc800215 	stw	r18,8(sp)
   15678:	2023883a 	mov	r17,r4
   1567c:	2821883a 	mov	r16,r5
   15680:	20000226 	beq	r4,zero,1568c <_fclose_r+0x2c>
   15684:	20800e17 	ldw	r2,56(r4)
   15688:	10002726 	beq	r2,zero,15728 <_fclose_r+0xc8>
   1568c:	8080030f 	ldh	r2,12(r16)
   15690:	1000071e 	bne	r2,zero,156b0 <_fclose_r+0x50>
   15694:	0005883a 	mov	r2,zero
   15698:	dfc00317 	ldw	ra,12(sp)
   1569c:	dc800217 	ldw	r18,8(sp)
   156a0:	dc400117 	ldw	r17,4(sp)
   156a4:	dc000017 	ldw	r16,0(sp)
   156a8:	dec00404 	addi	sp,sp,16
   156ac:	f800283a 	ret
   156b0:	800b883a 	mov	r5,r16
   156b4:	8809883a 	mov	r4,r17
   156b8:	000f4b00 	call	f4b0 <__sflush_r>
   156bc:	1025883a 	mov	r18,r2
   156c0:	80800b17 	ldw	r2,44(r16)
   156c4:	10000426 	beq	r2,zero,156d8 <_fclose_r+0x78>
   156c8:	81400717 	ldw	r5,28(r16)
   156cc:	8809883a 	mov	r4,r17
   156d0:	103ee83a 	callr	r2
   156d4:	10001616 	blt	r2,zero,15730 <_fclose_r+0xd0>
   156d8:	8080030b 	ldhu	r2,12(r16)
   156dc:	1080200c 	andi	r2,r2,128
   156e0:	1000151e 	bne	r2,zero,15738 <_fclose_r+0xd8>
   156e4:	81400c17 	ldw	r5,48(r16)
   156e8:	28000526 	beq	r5,zero,15700 <_fclose_r+0xa0>
   156ec:	80801004 	addi	r2,r16,64
   156f0:	28800226 	beq	r5,r2,156fc <_fclose_r+0x9c>
   156f4:	8809883a 	mov	r4,r17
   156f8:	000fc1c0 	call	fc1c <_free_r>
   156fc:	80000c15 	stw	zero,48(r16)
   15700:	81401117 	ldw	r5,68(r16)
   15704:	28000326 	beq	r5,zero,15714 <_fclose_r+0xb4>
   15708:	8809883a 	mov	r4,r17
   1570c:	000fc1c0 	call	fc1c <_free_r>
   15710:	80001115 	stw	zero,68(r16)
   15714:	000fab80 	call	fab8 <__sfp_lock_acquire>
   15718:	8000030d 	sth	zero,12(r16)
   1571c:	000fabc0 	call	fabc <__sfp_lock_release>
   15720:	9005883a 	mov	r2,r18
   15724:	003fdc06 	br	15698 <__alt_data_end+0xf0015698>
   15728:	000faa80 	call	faa8 <__sinit>
   1572c:	003fd706 	br	1568c <__alt_data_end+0xf001568c>
   15730:	04bfffc4 	movi	r18,-1
   15734:	003fe806 	br	156d8 <__alt_data_end+0xf00156d8>
   15738:	81400417 	ldw	r5,16(r16)
   1573c:	8809883a 	mov	r4,r17
   15740:	000fc1c0 	call	fc1c <_free_r>
   15744:	003fe706 	br	156e4 <__alt_data_end+0xf00156e4>
   15748:	0005883a 	mov	r2,zero
   1574c:	f800283a 	ret

00015750 <fclose>:
   15750:	00820034 	movhi	r2,2048
   15754:	108b0204 	addi	r2,r2,11272
   15758:	200b883a 	mov	r5,r4
   1575c:	11000017 	ldw	r4,0(r2)
   15760:	00156601 	jmpi	15660 <_fclose_r>

00015764 <__fputwc>:
   15764:	defff804 	addi	sp,sp,-32
   15768:	dcc00415 	stw	r19,16(sp)
   1576c:	dc800315 	stw	r18,12(sp)
   15770:	dc000115 	stw	r16,4(sp)
   15774:	dfc00715 	stw	ra,28(sp)
   15778:	dd400615 	stw	r21,24(sp)
   1577c:	dd000515 	stw	r20,20(sp)
   15780:	dc400215 	stw	r17,8(sp)
   15784:	2027883a 	mov	r19,r4
   15788:	2825883a 	mov	r18,r5
   1578c:	3021883a 	mov	r16,r6
   15790:	00105f80 	call	105f8 <__locale_mb_cur_max>
   15794:	00c00044 	movi	r3,1
   15798:	10c03e26 	beq	r2,r3,15894 <__fputwc+0x130>
   1579c:	81c01704 	addi	r7,r16,92
   157a0:	900d883a 	mov	r6,r18
   157a4:	d80b883a 	mov	r5,sp
   157a8:	9809883a 	mov	r4,r19
   157ac:	0015c340 	call	15c34 <_wcrtomb_r>
   157b0:	1029883a 	mov	r20,r2
   157b4:	00bfffc4 	movi	r2,-1
   157b8:	a0802026 	beq	r20,r2,1583c <__fputwc+0xd8>
   157bc:	d9400003 	ldbu	r5,0(sp)
   157c0:	a0001c26 	beq	r20,zero,15834 <__fputwc+0xd0>
   157c4:	0023883a 	mov	r17,zero
   157c8:	05400284 	movi	r21,10
   157cc:	00000906 	br	157f4 <__fputwc+0x90>
   157d0:	80800017 	ldw	r2,0(r16)
   157d4:	11400005 	stb	r5,0(r2)
   157d8:	80c00017 	ldw	r3,0(r16)
   157dc:	18c00044 	addi	r3,r3,1
   157e0:	80c00015 	stw	r3,0(r16)
   157e4:	8c400044 	addi	r17,r17,1
   157e8:	dc45883a 	add	r2,sp,r17
   157ec:	8d00112e 	bgeu	r17,r20,15834 <__fputwc+0xd0>
   157f0:	11400003 	ldbu	r5,0(r2)
   157f4:	80c00217 	ldw	r3,8(r16)
   157f8:	18ffffc4 	addi	r3,r3,-1
   157fc:	80c00215 	stw	r3,8(r16)
   15800:	183ff30e 	bge	r3,zero,157d0 <__alt_data_end+0xf00157d0>
   15804:	80800617 	ldw	r2,24(r16)
   15808:	18801916 	blt	r3,r2,15870 <__fputwc+0x10c>
   1580c:	80800017 	ldw	r2,0(r16)
   15810:	11400005 	stb	r5,0(r2)
   15814:	80800017 	ldw	r2,0(r16)
   15818:	10c00003 	ldbu	r3,0(r2)
   1581c:	10800044 	addi	r2,r2,1
   15820:	1d402326 	beq	r3,r21,158b0 <__fputwc+0x14c>
   15824:	80800015 	stw	r2,0(r16)
   15828:	8c400044 	addi	r17,r17,1
   1582c:	dc45883a 	add	r2,sp,r17
   15830:	8d3fef36 	bltu	r17,r20,157f0 <__alt_data_end+0xf00157f0>
   15834:	9005883a 	mov	r2,r18
   15838:	00000406 	br	1584c <__fputwc+0xe8>
   1583c:	80c0030b 	ldhu	r3,12(r16)
   15840:	a005883a 	mov	r2,r20
   15844:	18c01014 	ori	r3,r3,64
   15848:	80c0030d 	sth	r3,12(r16)
   1584c:	dfc00717 	ldw	ra,28(sp)
   15850:	dd400617 	ldw	r21,24(sp)
   15854:	dd000517 	ldw	r20,20(sp)
   15858:	dcc00417 	ldw	r19,16(sp)
   1585c:	dc800317 	ldw	r18,12(sp)
   15860:	dc400217 	ldw	r17,8(sp)
   15864:	dc000117 	ldw	r16,4(sp)
   15868:	dec00804 	addi	sp,sp,32
   1586c:	f800283a 	ret
   15870:	800d883a 	mov	r6,r16
   15874:	29403fcc 	andi	r5,r5,255
   15878:	9809883a 	mov	r4,r19
   1587c:	0015adc0 	call	15adc <__swbuf_r>
   15880:	10bfffe0 	cmpeqi	r2,r2,-1
   15884:	10803fcc 	andi	r2,r2,255
   15888:	103fd626 	beq	r2,zero,157e4 <__alt_data_end+0xf00157e4>
   1588c:	00bfffc4 	movi	r2,-1
   15890:	003fee06 	br	1584c <__alt_data_end+0xf001584c>
   15894:	90ffffc4 	addi	r3,r18,-1
   15898:	01003f84 	movi	r4,254
   1589c:	20ffbf36 	bltu	r4,r3,1579c <__alt_data_end+0xf001579c>
   158a0:	900b883a 	mov	r5,r18
   158a4:	dc800005 	stb	r18,0(sp)
   158a8:	1029883a 	mov	r20,r2
   158ac:	003fc506 	br	157c4 <__alt_data_end+0xf00157c4>
   158b0:	800d883a 	mov	r6,r16
   158b4:	a80b883a 	mov	r5,r21
   158b8:	9809883a 	mov	r4,r19
   158bc:	0015adc0 	call	15adc <__swbuf_r>
   158c0:	10bfffe0 	cmpeqi	r2,r2,-1
   158c4:	003fef06 	br	15884 <__alt_data_end+0xf0015884>

000158c8 <_fputwc_r>:
   158c8:	3080030b 	ldhu	r2,12(r6)
   158cc:	10c8000c 	andi	r3,r2,8192
   158d0:	1800051e 	bne	r3,zero,158e8 <_fputwc_r+0x20>
   158d4:	30c01917 	ldw	r3,100(r6)
   158d8:	10880014 	ori	r2,r2,8192
   158dc:	3080030d 	sth	r2,12(r6)
   158e0:	18880014 	ori	r2,r3,8192
   158e4:	30801915 	stw	r2,100(r6)
   158e8:	00157641 	jmpi	15764 <__fputwc>

000158ec <fputwc>:
   158ec:	00820034 	movhi	r2,2048
   158f0:	defffc04 	addi	sp,sp,-16
   158f4:	108b0204 	addi	r2,r2,11272
   158f8:	dc000115 	stw	r16,4(sp)
   158fc:	14000017 	ldw	r16,0(r2)
   15900:	dc400215 	stw	r17,8(sp)
   15904:	dfc00315 	stw	ra,12(sp)
   15908:	2023883a 	mov	r17,r4
   1590c:	80000226 	beq	r16,zero,15918 <fputwc+0x2c>
   15910:	80800e17 	ldw	r2,56(r16)
   15914:	10001026 	beq	r2,zero,15958 <fputwc+0x6c>
   15918:	2880030b 	ldhu	r2,12(r5)
   1591c:	10c8000c 	andi	r3,r2,8192
   15920:	1800051e 	bne	r3,zero,15938 <fputwc+0x4c>
   15924:	28c01917 	ldw	r3,100(r5)
   15928:	10880014 	ori	r2,r2,8192
   1592c:	2880030d 	sth	r2,12(r5)
   15930:	18880014 	ori	r2,r3,8192
   15934:	28801915 	stw	r2,100(r5)
   15938:	280d883a 	mov	r6,r5
   1593c:	8009883a 	mov	r4,r16
   15940:	880b883a 	mov	r5,r17
   15944:	dfc00317 	ldw	ra,12(sp)
   15948:	dc400217 	ldw	r17,8(sp)
   1594c:	dc000117 	ldw	r16,4(sp)
   15950:	dec00404 	addi	sp,sp,16
   15954:	00157641 	jmpi	15764 <__fputwc>
   15958:	8009883a 	mov	r4,r16
   1595c:	d9400015 	stw	r5,0(sp)
   15960:	000faa80 	call	faa8 <__sinit>
   15964:	d9400017 	ldw	r5,0(sp)
   15968:	003feb06 	br	15918 <__alt_data_end+0xf0015918>

0001596c <_fstat_r>:
   1596c:	defffd04 	addi	sp,sp,-12
   15970:	2805883a 	mov	r2,r5
   15974:	dc000015 	stw	r16,0(sp)
   15978:	04020034 	movhi	r16,2048
   1597c:	dc400115 	stw	r17,4(sp)
   15980:	840b4c04 	addi	r16,r16,11568
   15984:	2023883a 	mov	r17,r4
   15988:	300b883a 	mov	r5,r6
   1598c:	1009883a 	mov	r4,r2
   15990:	dfc00215 	stw	ra,8(sp)
   15994:	80000015 	stw	zero,0(r16)
   15998:	00175100 	call	17510 <fstat>
   1599c:	00ffffc4 	movi	r3,-1
   159a0:	10c00526 	beq	r2,r3,159b8 <_fstat_r+0x4c>
   159a4:	dfc00217 	ldw	ra,8(sp)
   159a8:	dc400117 	ldw	r17,4(sp)
   159ac:	dc000017 	ldw	r16,0(sp)
   159b0:	dec00304 	addi	sp,sp,12
   159b4:	f800283a 	ret
   159b8:	80c00017 	ldw	r3,0(r16)
   159bc:	183ff926 	beq	r3,zero,159a4 <__alt_data_end+0xf00159a4>
   159c0:	88c00015 	stw	r3,0(r17)
   159c4:	003ff706 	br	159a4 <__alt_data_end+0xf00159a4>

000159c8 <_isatty_r>:
   159c8:	defffd04 	addi	sp,sp,-12
   159cc:	dc000015 	stw	r16,0(sp)
   159d0:	04020034 	movhi	r16,2048
   159d4:	dc400115 	stw	r17,4(sp)
   159d8:	840b4c04 	addi	r16,r16,11568
   159dc:	2023883a 	mov	r17,r4
   159e0:	2809883a 	mov	r4,r5
   159e4:	dfc00215 	stw	ra,8(sp)
   159e8:	80000015 	stw	zero,0(r16)
   159ec:	00175fc0 	call	175fc <isatty>
   159f0:	00ffffc4 	movi	r3,-1
   159f4:	10c00526 	beq	r2,r3,15a0c <_isatty_r+0x44>
   159f8:	dfc00217 	ldw	ra,8(sp)
   159fc:	dc400117 	ldw	r17,4(sp)
   15a00:	dc000017 	ldw	r16,0(sp)
   15a04:	dec00304 	addi	sp,sp,12
   15a08:	f800283a 	ret
   15a0c:	80c00017 	ldw	r3,0(r16)
   15a10:	183ff926 	beq	r3,zero,159f8 <__alt_data_end+0xf00159f8>
   15a14:	88c00015 	stw	r3,0(r17)
   15a18:	003ff706 	br	159f8 <__alt_data_end+0xf00159f8>

00015a1c <_lseek_r>:
   15a1c:	defffd04 	addi	sp,sp,-12
   15a20:	2805883a 	mov	r2,r5
   15a24:	dc000015 	stw	r16,0(sp)
   15a28:	04020034 	movhi	r16,2048
   15a2c:	dc400115 	stw	r17,4(sp)
   15a30:	300b883a 	mov	r5,r6
   15a34:	840b4c04 	addi	r16,r16,11568
   15a38:	2023883a 	mov	r17,r4
   15a3c:	380d883a 	mov	r6,r7
   15a40:	1009883a 	mov	r4,r2
   15a44:	dfc00215 	stw	ra,8(sp)
   15a48:	80000015 	stw	zero,0(r16)
   15a4c:	00176dc0 	call	176dc <lseek>
   15a50:	00ffffc4 	movi	r3,-1
   15a54:	10c00526 	beq	r2,r3,15a6c <_lseek_r+0x50>
   15a58:	dfc00217 	ldw	ra,8(sp)
   15a5c:	dc400117 	ldw	r17,4(sp)
   15a60:	dc000017 	ldw	r16,0(sp)
   15a64:	dec00304 	addi	sp,sp,12
   15a68:	f800283a 	ret
   15a6c:	80c00017 	ldw	r3,0(r16)
   15a70:	183ff926 	beq	r3,zero,15a58 <__alt_data_end+0xf0015a58>
   15a74:	88c00015 	stw	r3,0(r17)
   15a78:	003ff706 	br	15a58 <__alt_data_end+0xf0015a58>

00015a7c <_read_r>:
   15a7c:	defffd04 	addi	sp,sp,-12
   15a80:	2805883a 	mov	r2,r5
   15a84:	dc000015 	stw	r16,0(sp)
   15a88:	04020034 	movhi	r16,2048
   15a8c:	dc400115 	stw	r17,4(sp)
   15a90:	300b883a 	mov	r5,r6
   15a94:	840b4c04 	addi	r16,r16,11568
   15a98:	2023883a 	mov	r17,r4
   15a9c:	380d883a 	mov	r6,r7
   15aa0:	1009883a 	mov	r4,r2
   15aa4:	dfc00215 	stw	ra,8(sp)
   15aa8:	80000015 	stw	zero,0(r16)
   15aac:	00178b00 	call	178b0 <read>
   15ab0:	00ffffc4 	movi	r3,-1
   15ab4:	10c00526 	beq	r2,r3,15acc <_read_r+0x50>
   15ab8:	dfc00217 	ldw	ra,8(sp)
   15abc:	dc400117 	ldw	r17,4(sp)
   15ac0:	dc000017 	ldw	r16,0(sp)
   15ac4:	dec00304 	addi	sp,sp,12
   15ac8:	f800283a 	ret
   15acc:	80c00017 	ldw	r3,0(r16)
   15ad0:	183ff926 	beq	r3,zero,15ab8 <__alt_data_end+0xf0015ab8>
   15ad4:	88c00015 	stw	r3,0(r17)
   15ad8:	003ff706 	br	15ab8 <__alt_data_end+0xf0015ab8>

00015adc <__swbuf_r>:
   15adc:	defffb04 	addi	sp,sp,-20
   15ae0:	dcc00315 	stw	r19,12(sp)
   15ae4:	dc800215 	stw	r18,8(sp)
   15ae8:	dc000015 	stw	r16,0(sp)
   15aec:	dfc00415 	stw	ra,16(sp)
   15af0:	dc400115 	stw	r17,4(sp)
   15af4:	2025883a 	mov	r18,r4
   15af8:	2827883a 	mov	r19,r5
   15afc:	3021883a 	mov	r16,r6
   15b00:	20000226 	beq	r4,zero,15b0c <__swbuf_r+0x30>
   15b04:	20800e17 	ldw	r2,56(r4)
   15b08:	10004226 	beq	r2,zero,15c14 <__swbuf_r+0x138>
   15b0c:	80800617 	ldw	r2,24(r16)
   15b10:	8100030b 	ldhu	r4,12(r16)
   15b14:	80800215 	stw	r2,8(r16)
   15b18:	2080020c 	andi	r2,r4,8
   15b1c:	10003626 	beq	r2,zero,15bf8 <__swbuf_r+0x11c>
   15b20:	80c00417 	ldw	r3,16(r16)
   15b24:	18003426 	beq	r3,zero,15bf8 <__swbuf_r+0x11c>
   15b28:	2088000c 	andi	r2,r4,8192
   15b2c:	9c403fcc 	andi	r17,r19,255
   15b30:	10001a26 	beq	r2,zero,15b9c <__swbuf_r+0xc0>
   15b34:	80800017 	ldw	r2,0(r16)
   15b38:	81000517 	ldw	r4,20(r16)
   15b3c:	10c7c83a 	sub	r3,r2,r3
   15b40:	1900200e 	bge	r3,r4,15bc4 <__swbuf_r+0xe8>
   15b44:	18c00044 	addi	r3,r3,1
   15b48:	81000217 	ldw	r4,8(r16)
   15b4c:	11400044 	addi	r5,r2,1
   15b50:	81400015 	stw	r5,0(r16)
   15b54:	213fffc4 	addi	r4,r4,-1
   15b58:	81000215 	stw	r4,8(r16)
   15b5c:	14c00005 	stb	r19,0(r2)
   15b60:	80800517 	ldw	r2,20(r16)
   15b64:	10c01e26 	beq	r2,r3,15be0 <__swbuf_r+0x104>
   15b68:	8080030b 	ldhu	r2,12(r16)
   15b6c:	1080004c 	andi	r2,r2,1
   15b70:	10000226 	beq	r2,zero,15b7c <__swbuf_r+0xa0>
   15b74:	00800284 	movi	r2,10
   15b78:	88801926 	beq	r17,r2,15be0 <__swbuf_r+0x104>
   15b7c:	8805883a 	mov	r2,r17
   15b80:	dfc00417 	ldw	ra,16(sp)
   15b84:	dcc00317 	ldw	r19,12(sp)
   15b88:	dc800217 	ldw	r18,8(sp)
   15b8c:	dc400117 	ldw	r17,4(sp)
   15b90:	dc000017 	ldw	r16,0(sp)
   15b94:	dec00504 	addi	sp,sp,20
   15b98:	f800283a 	ret
   15b9c:	81401917 	ldw	r5,100(r16)
   15ba0:	00b7ffc4 	movi	r2,-8193
   15ba4:	21080014 	ori	r4,r4,8192
   15ba8:	2884703a 	and	r2,r5,r2
   15bac:	80801915 	stw	r2,100(r16)
   15bb0:	80800017 	ldw	r2,0(r16)
   15bb4:	8100030d 	sth	r4,12(r16)
   15bb8:	81000517 	ldw	r4,20(r16)
   15bbc:	10c7c83a 	sub	r3,r2,r3
   15bc0:	193fe016 	blt	r3,r4,15b44 <__alt_data_end+0xf0015b44>
   15bc4:	800b883a 	mov	r5,r16
   15bc8:	9009883a 	mov	r4,r18
   15bcc:	000f6cc0 	call	f6cc <_fflush_r>
   15bd0:	1000071e 	bne	r2,zero,15bf0 <__swbuf_r+0x114>
   15bd4:	80800017 	ldw	r2,0(r16)
   15bd8:	00c00044 	movi	r3,1
   15bdc:	003fda06 	br	15b48 <__alt_data_end+0xf0015b48>
   15be0:	800b883a 	mov	r5,r16
   15be4:	9009883a 	mov	r4,r18
   15be8:	000f6cc0 	call	f6cc <_fflush_r>
   15bec:	103fe326 	beq	r2,zero,15b7c <__alt_data_end+0xf0015b7c>
   15bf0:	00bfffc4 	movi	r2,-1
   15bf4:	003fe206 	br	15b80 <__alt_data_end+0xf0015b80>
   15bf8:	800b883a 	mov	r5,r16
   15bfc:	9009883a 	mov	r4,r18
   15c00:	000dad40 	call	dad4 <__swsetup_r>
   15c04:	103ffa1e 	bne	r2,zero,15bf0 <__alt_data_end+0xf0015bf0>
   15c08:	8100030b 	ldhu	r4,12(r16)
   15c0c:	80c00417 	ldw	r3,16(r16)
   15c10:	003fc506 	br	15b28 <__alt_data_end+0xf0015b28>
   15c14:	000faa80 	call	faa8 <__sinit>
   15c18:	003fbc06 	br	15b0c <__alt_data_end+0xf0015b0c>

00015c1c <__swbuf>:
   15c1c:	00820034 	movhi	r2,2048
   15c20:	108b0204 	addi	r2,r2,11272
   15c24:	280d883a 	mov	r6,r5
   15c28:	200b883a 	mov	r5,r4
   15c2c:	11000017 	ldw	r4,0(r2)
   15c30:	0015adc1 	jmpi	15adc <__swbuf_r>

00015c34 <_wcrtomb_r>:
   15c34:	defff604 	addi	sp,sp,-40
   15c38:	00820034 	movhi	r2,2048
   15c3c:	dc800815 	stw	r18,32(sp)
   15c40:	dc400715 	stw	r17,28(sp)
   15c44:	dc000615 	stw	r16,24(sp)
   15c48:	108b0604 	addi	r2,r2,11288
   15c4c:	dfc00915 	stw	ra,36(sp)
   15c50:	2021883a 	mov	r16,r4
   15c54:	3823883a 	mov	r17,r7
   15c58:	14800017 	ldw	r18,0(r2)
   15c5c:	28001426 	beq	r5,zero,15cb0 <_wcrtomb_r+0x7c>
   15c60:	d9400415 	stw	r5,16(sp)
   15c64:	d9800515 	stw	r6,20(sp)
   15c68:	00105ec0 	call	105ec <__locale_charset>
   15c6c:	d9800517 	ldw	r6,20(sp)
   15c70:	d9400417 	ldw	r5,16(sp)
   15c74:	100f883a 	mov	r7,r2
   15c78:	dc400015 	stw	r17,0(sp)
   15c7c:	8009883a 	mov	r4,r16
   15c80:	903ee83a 	callr	r18
   15c84:	00ffffc4 	movi	r3,-1
   15c88:	10c0031e 	bne	r2,r3,15c98 <_wcrtomb_r+0x64>
   15c8c:	88000015 	stw	zero,0(r17)
   15c90:	00c02284 	movi	r3,138
   15c94:	80c00015 	stw	r3,0(r16)
   15c98:	dfc00917 	ldw	ra,36(sp)
   15c9c:	dc800817 	ldw	r18,32(sp)
   15ca0:	dc400717 	ldw	r17,28(sp)
   15ca4:	dc000617 	ldw	r16,24(sp)
   15ca8:	dec00a04 	addi	sp,sp,40
   15cac:	f800283a 	ret
   15cb0:	00105ec0 	call	105ec <__locale_charset>
   15cb4:	100f883a 	mov	r7,r2
   15cb8:	dc400015 	stw	r17,0(sp)
   15cbc:	000d883a 	mov	r6,zero
   15cc0:	d9400104 	addi	r5,sp,4
   15cc4:	8009883a 	mov	r4,r16
   15cc8:	903ee83a 	callr	r18
   15ccc:	003fed06 	br	15c84 <__alt_data_end+0xf0015c84>

00015cd0 <wcrtomb>:
   15cd0:	defff604 	addi	sp,sp,-40
   15cd4:	00820034 	movhi	r2,2048
   15cd8:	dc800615 	stw	r18,24(sp)
   15cdc:	dc400515 	stw	r17,20(sp)
   15ce0:	108b0204 	addi	r2,r2,11272
   15ce4:	dfc00915 	stw	ra,36(sp)
   15ce8:	dd000815 	stw	r20,32(sp)
   15cec:	dcc00715 	stw	r19,28(sp)
   15cf0:	dc000415 	stw	r16,16(sp)
   15cf4:	3025883a 	mov	r18,r6
   15cf8:	14400017 	ldw	r17,0(r2)
   15cfc:	20001926 	beq	r4,zero,15d64 <wcrtomb+0x94>
   15d00:	00820034 	movhi	r2,2048
   15d04:	108b0604 	addi	r2,r2,11288
   15d08:	15000017 	ldw	r20,0(r2)
   15d0c:	2021883a 	mov	r16,r4
   15d10:	2827883a 	mov	r19,r5
   15d14:	00105ec0 	call	105ec <__locale_charset>
   15d18:	100f883a 	mov	r7,r2
   15d1c:	dc800015 	stw	r18,0(sp)
   15d20:	980d883a 	mov	r6,r19
   15d24:	800b883a 	mov	r5,r16
   15d28:	8809883a 	mov	r4,r17
   15d2c:	a03ee83a 	callr	r20
   15d30:	00ffffc4 	movi	r3,-1
   15d34:	10c0031e 	bne	r2,r3,15d44 <wcrtomb+0x74>
   15d38:	90000015 	stw	zero,0(r18)
   15d3c:	00c02284 	movi	r3,138
   15d40:	88c00015 	stw	r3,0(r17)
   15d44:	dfc00917 	ldw	ra,36(sp)
   15d48:	dd000817 	ldw	r20,32(sp)
   15d4c:	dcc00717 	ldw	r19,28(sp)
   15d50:	dc800617 	ldw	r18,24(sp)
   15d54:	dc400517 	ldw	r17,20(sp)
   15d58:	dc000417 	ldw	r16,16(sp)
   15d5c:	dec00a04 	addi	sp,sp,40
   15d60:	f800283a 	ret
   15d64:	00820034 	movhi	r2,2048
   15d68:	108b0604 	addi	r2,r2,11288
   15d6c:	14000017 	ldw	r16,0(r2)
   15d70:	00105ec0 	call	105ec <__locale_charset>
   15d74:	100f883a 	mov	r7,r2
   15d78:	dc800015 	stw	r18,0(sp)
   15d7c:	000d883a 	mov	r6,zero
   15d80:	d9400104 	addi	r5,sp,4
   15d84:	8809883a 	mov	r4,r17
   15d88:	803ee83a 	callr	r16
   15d8c:	003fe806 	br	15d30 <__alt_data_end+0xf0015d30>

00015d90 <__ascii_wctomb>:
   15d90:	28000526 	beq	r5,zero,15da8 <__ascii_wctomb+0x18>
   15d94:	00803fc4 	movi	r2,255
   15d98:	11800536 	bltu	r2,r6,15db0 <__ascii_wctomb+0x20>
   15d9c:	29800005 	stb	r6,0(r5)
   15da0:	00800044 	movi	r2,1
   15da4:	f800283a 	ret
   15da8:	0005883a 	mov	r2,zero
   15dac:	f800283a 	ret
   15db0:	00802284 	movi	r2,138
   15db4:	20800015 	stw	r2,0(r4)
   15db8:	00bfffc4 	movi	r2,-1
   15dbc:	f800283a 	ret

00015dc0 <_wctomb_r>:
   15dc0:	00820034 	movhi	r2,2048
   15dc4:	defff904 	addi	sp,sp,-28
   15dc8:	108b0604 	addi	r2,r2,11288
   15dcc:	dfc00615 	stw	ra,24(sp)
   15dd0:	dc400515 	stw	r17,20(sp)
   15dd4:	dc000415 	stw	r16,16(sp)
   15dd8:	3823883a 	mov	r17,r7
   15ddc:	14000017 	ldw	r16,0(r2)
   15de0:	d9000115 	stw	r4,4(sp)
   15de4:	d9400215 	stw	r5,8(sp)
   15de8:	d9800315 	stw	r6,12(sp)
   15dec:	00105ec0 	call	105ec <__locale_charset>
   15df0:	d9800317 	ldw	r6,12(sp)
   15df4:	d9400217 	ldw	r5,8(sp)
   15df8:	d9000117 	ldw	r4,4(sp)
   15dfc:	100f883a 	mov	r7,r2
   15e00:	dc400015 	stw	r17,0(sp)
   15e04:	803ee83a 	callr	r16
   15e08:	dfc00617 	ldw	ra,24(sp)
   15e0c:	dc400517 	ldw	r17,20(sp)
   15e10:	dc000417 	ldw	r16,16(sp)
   15e14:	dec00704 	addi	sp,sp,28
   15e18:	f800283a 	ret

00015e1c <__udivdi3>:
   15e1c:	defff504 	addi	sp,sp,-44
   15e20:	dcc00415 	stw	r19,16(sp)
   15e24:	dc000115 	stw	r16,4(sp)
   15e28:	dfc00a15 	stw	ra,40(sp)
   15e2c:	df000915 	stw	fp,36(sp)
   15e30:	ddc00815 	stw	r23,32(sp)
   15e34:	dd800715 	stw	r22,28(sp)
   15e38:	dd400615 	stw	r21,24(sp)
   15e3c:	dd000515 	stw	r20,20(sp)
   15e40:	dc800315 	stw	r18,12(sp)
   15e44:	dc400215 	stw	r17,8(sp)
   15e48:	2027883a 	mov	r19,r4
   15e4c:	2821883a 	mov	r16,r5
   15e50:	3800411e 	bne	r7,zero,15f58 <__udivdi3+0x13c>
   15e54:	3023883a 	mov	r17,r6
   15e58:	2025883a 	mov	r18,r4
   15e5c:	2980522e 	bgeu	r5,r6,15fa8 <__udivdi3+0x18c>
   15e60:	00bfffd4 	movui	r2,65535
   15e64:	282d883a 	mov	r22,r5
   15e68:	1180a836 	bltu	r2,r6,1610c <__udivdi3+0x2f0>
   15e6c:	00803fc4 	movi	r2,255
   15e70:	1185803a 	cmpltu	r2,r2,r6
   15e74:	100490fa 	slli	r2,r2,3
   15e78:	3086d83a 	srl	r3,r6,r2
   15e7c:	01020034 	movhi	r4,2048
   15e80:	21008dc4 	addi	r4,r4,567
   15e84:	20c7883a 	add	r3,r4,r3
   15e88:	18c00003 	ldbu	r3,0(r3)
   15e8c:	1885883a 	add	r2,r3,r2
   15e90:	00c00804 	movi	r3,32
   15e94:	1887c83a 	sub	r3,r3,r2
   15e98:	18000526 	beq	r3,zero,15eb0 <__udivdi3+0x94>
   15e9c:	80e0983a 	sll	r16,r16,r3
   15ea0:	9884d83a 	srl	r2,r19,r2
   15ea4:	30e2983a 	sll	r17,r6,r3
   15ea8:	98e4983a 	sll	r18,r19,r3
   15eac:	142cb03a 	or	r22,r2,r16
   15eb0:	882ad43a 	srli	r21,r17,16
   15eb4:	b009883a 	mov	r4,r22
   15eb8:	8d3fffcc 	andi	r20,r17,65535
   15ebc:	a80b883a 	mov	r5,r21
   15ec0:	000904c0 	call	904c <__umodsi3>
   15ec4:	b009883a 	mov	r4,r22
   15ec8:	a80b883a 	mov	r5,r21
   15ecc:	1027883a 	mov	r19,r2
   15ed0:	0008fe80 	call	8fe8 <__udivsi3>
   15ed4:	102d883a 	mov	r22,r2
   15ed8:	9826943a 	slli	r19,r19,16
   15edc:	9004d43a 	srli	r2,r18,16
   15ee0:	a5a1383a 	mul	r16,r20,r22
   15ee4:	14c4b03a 	or	r2,r2,r19
   15ee8:	1400052e 	bgeu	r2,r16,15f00 <__udivdi3+0xe4>
   15eec:	1445883a 	add	r2,r2,r17
   15ef0:	b0ffffc4 	addi	r3,r22,-1
   15ef4:	14400136 	bltu	r2,r17,15efc <__udivdi3+0xe0>
   15ef8:	14012336 	bltu	r2,r16,16388 <__udivdi3+0x56c>
   15efc:	182d883a 	mov	r22,r3
   15f00:	1421c83a 	sub	r16,r2,r16
   15f04:	a80b883a 	mov	r5,r21
   15f08:	8009883a 	mov	r4,r16
   15f0c:	000904c0 	call	904c <__umodsi3>
   15f10:	1027883a 	mov	r19,r2
   15f14:	a80b883a 	mov	r5,r21
   15f18:	8009883a 	mov	r4,r16
   15f1c:	0008fe80 	call	8fe8 <__udivsi3>
   15f20:	9826943a 	slli	r19,r19,16
   15f24:	a0a9383a 	mul	r20,r20,r2
   15f28:	94bfffcc 	andi	r18,r18,65535
   15f2c:	94e4b03a 	or	r18,r18,r19
   15f30:	9500052e 	bgeu	r18,r20,15f48 <__udivdi3+0x12c>
   15f34:	8ca5883a 	add	r18,r17,r18
   15f38:	10ffffc4 	addi	r3,r2,-1
   15f3c:	9440f136 	bltu	r18,r17,16304 <__udivdi3+0x4e8>
   15f40:	9500f02e 	bgeu	r18,r20,16304 <__udivdi3+0x4e8>
   15f44:	10bfff84 	addi	r2,r2,-2
   15f48:	b00c943a 	slli	r6,r22,16
   15f4c:	0007883a 	mov	r3,zero
   15f50:	3084b03a 	or	r2,r6,r2
   15f54:	00005906 	br	160bc <__udivdi3+0x2a0>
   15f58:	29c05636 	bltu	r5,r7,160b4 <__udivdi3+0x298>
   15f5c:	00bfffd4 	movui	r2,65535
   15f60:	11c0622e 	bgeu	r2,r7,160ec <__udivdi3+0x2d0>
   15f64:	00804034 	movhi	r2,256
   15f68:	10bfffc4 	addi	r2,r2,-1
   15f6c:	11c0ee36 	bltu	r2,r7,16328 <__udivdi3+0x50c>
   15f70:	00800404 	movi	r2,16
   15f74:	3886d83a 	srl	r3,r7,r2
   15f78:	01020034 	movhi	r4,2048
   15f7c:	21008dc4 	addi	r4,r4,567
   15f80:	20c7883a 	add	r3,r4,r3
   15f84:	18c00003 	ldbu	r3,0(r3)
   15f88:	05400804 	movi	r21,32
   15f8c:	1885883a 	add	r2,r3,r2
   15f90:	a8abc83a 	sub	r21,r21,r2
   15f94:	a800621e 	bne	r21,zero,16120 <__udivdi3+0x304>
   15f98:	3c00e936 	bltu	r7,r16,16340 <__udivdi3+0x524>
   15f9c:	9985403a 	cmpgeu	r2,r19,r6
   15fa0:	0007883a 	mov	r3,zero
   15fa4:	00004506 	br	160bc <__udivdi3+0x2a0>
   15fa8:	3000041e 	bne	r6,zero,15fbc <__udivdi3+0x1a0>
   15fac:	000b883a 	mov	r5,zero
   15fb0:	01000044 	movi	r4,1
   15fb4:	0008fe80 	call	8fe8 <__udivsi3>
   15fb8:	1023883a 	mov	r17,r2
   15fbc:	00bfffd4 	movui	r2,65535
   15fc0:	14404e2e 	bgeu	r2,r17,160fc <__udivdi3+0x2e0>
   15fc4:	00804034 	movhi	r2,256
   15fc8:	10bfffc4 	addi	r2,r2,-1
   15fcc:	1440d836 	bltu	r2,r17,16330 <__udivdi3+0x514>
   15fd0:	00800404 	movi	r2,16
   15fd4:	8886d83a 	srl	r3,r17,r2
   15fd8:	01020034 	movhi	r4,2048
   15fdc:	21008dc4 	addi	r4,r4,567
   15fe0:	20c7883a 	add	r3,r4,r3
   15fe4:	18c00003 	ldbu	r3,0(r3)
   15fe8:	1885883a 	add	r2,r3,r2
   15fec:	00c00804 	movi	r3,32
   15ff0:	1887c83a 	sub	r3,r3,r2
   15ff4:	18008f1e 	bne	r3,zero,16234 <__udivdi3+0x418>
   15ff8:	882ad43a 	srli	r21,r17,16
   15ffc:	8461c83a 	sub	r16,r16,r17
   16000:	8d3fffcc 	andi	r20,r17,65535
   16004:	00c00044 	movi	r3,1
   16008:	8009883a 	mov	r4,r16
   1600c:	a80b883a 	mov	r5,r21
   16010:	d8c00015 	stw	r3,0(sp)
   16014:	000904c0 	call	904c <__umodsi3>
   16018:	8009883a 	mov	r4,r16
   1601c:	a80b883a 	mov	r5,r21
   16020:	1027883a 	mov	r19,r2
   16024:	0008fe80 	call	8fe8 <__udivsi3>
   16028:	9826943a 	slli	r19,r19,16
   1602c:	9008d43a 	srli	r4,r18,16
   16030:	1521383a 	mul	r16,r2,r20
   16034:	102d883a 	mov	r22,r2
   16038:	24c8b03a 	or	r4,r4,r19
   1603c:	d8c00017 	ldw	r3,0(sp)
   16040:	2400052e 	bgeu	r4,r16,16058 <__udivdi3+0x23c>
   16044:	2449883a 	add	r4,r4,r17
   16048:	b0bfffc4 	addi	r2,r22,-1
   1604c:	24400136 	bltu	r4,r17,16054 <__udivdi3+0x238>
   16050:	2400ca36 	bltu	r4,r16,1637c <__udivdi3+0x560>
   16054:	102d883a 	mov	r22,r2
   16058:	2421c83a 	sub	r16,r4,r16
   1605c:	a80b883a 	mov	r5,r21
   16060:	8009883a 	mov	r4,r16
   16064:	d8c00015 	stw	r3,0(sp)
   16068:	000904c0 	call	904c <__umodsi3>
   1606c:	1027883a 	mov	r19,r2
   16070:	a80b883a 	mov	r5,r21
   16074:	8009883a 	mov	r4,r16
   16078:	0008fe80 	call	8fe8 <__udivsi3>
   1607c:	9826943a 	slli	r19,r19,16
   16080:	1529383a 	mul	r20,r2,r20
   16084:	94bfffcc 	andi	r18,r18,65535
   16088:	94e4b03a 	or	r18,r18,r19
   1608c:	d8c00017 	ldw	r3,0(sp)
   16090:	9500052e 	bgeu	r18,r20,160a8 <__udivdi3+0x28c>
   16094:	8ca5883a 	add	r18,r17,r18
   16098:	113fffc4 	addi	r4,r2,-1
   1609c:	94409736 	bltu	r18,r17,162fc <__udivdi3+0x4e0>
   160a0:	9500962e 	bgeu	r18,r20,162fc <__udivdi3+0x4e0>
   160a4:	10bfff84 	addi	r2,r2,-2
   160a8:	b00c943a 	slli	r6,r22,16
   160ac:	3084b03a 	or	r2,r6,r2
   160b0:	00000206 	br	160bc <__udivdi3+0x2a0>
   160b4:	0007883a 	mov	r3,zero
   160b8:	0005883a 	mov	r2,zero
   160bc:	dfc00a17 	ldw	ra,40(sp)
   160c0:	df000917 	ldw	fp,36(sp)
   160c4:	ddc00817 	ldw	r23,32(sp)
   160c8:	dd800717 	ldw	r22,28(sp)
   160cc:	dd400617 	ldw	r21,24(sp)
   160d0:	dd000517 	ldw	r20,20(sp)
   160d4:	dcc00417 	ldw	r19,16(sp)
   160d8:	dc800317 	ldw	r18,12(sp)
   160dc:	dc400217 	ldw	r17,8(sp)
   160e0:	dc000117 	ldw	r16,4(sp)
   160e4:	dec00b04 	addi	sp,sp,44
   160e8:	f800283a 	ret
   160ec:	00803fc4 	movi	r2,255
   160f0:	11c5803a 	cmpltu	r2,r2,r7
   160f4:	100490fa 	slli	r2,r2,3
   160f8:	003f9e06 	br	15f74 <__alt_data_end+0xf0015f74>
   160fc:	00803fc4 	movi	r2,255
   16100:	1445803a 	cmpltu	r2,r2,r17
   16104:	100490fa 	slli	r2,r2,3
   16108:	003fb206 	br	15fd4 <__alt_data_end+0xf0015fd4>
   1610c:	00804034 	movhi	r2,256
   16110:	10bfffc4 	addi	r2,r2,-1
   16114:	11808836 	bltu	r2,r6,16338 <__udivdi3+0x51c>
   16118:	00800404 	movi	r2,16
   1611c:	003f5606 	br	15e78 <__alt_data_end+0xf0015e78>
   16120:	30aed83a 	srl	r23,r6,r2
   16124:	3d4e983a 	sll	r7,r7,r21
   16128:	80acd83a 	srl	r22,r16,r2
   1612c:	9884d83a 	srl	r2,r19,r2
   16130:	3deeb03a 	or	r23,r7,r23
   16134:	b824d43a 	srli	r18,r23,16
   16138:	8560983a 	sll	r16,r16,r21
   1613c:	b009883a 	mov	r4,r22
   16140:	900b883a 	mov	r5,r18
   16144:	3568983a 	sll	r20,r6,r21
   16148:	1420b03a 	or	r16,r2,r16
   1614c:	000904c0 	call	904c <__umodsi3>
   16150:	b009883a 	mov	r4,r22
   16154:	900b883a 	mov	r5,r18
   16158:	1023883a 	mov	r17,r2
   1615c:	0008fe80 	call	8fe8 <__udivsi3>
   16160:	8808943a 	slli	r4,r17,16
   16164:	bf3fffcc 	andi	fp,r23,65535
   16168:	8006d43a 	srli	r3,r16,16
   1616c:	e0a3383a 	mul	r17,fp,r2
   16170:	100d883a 	mov	r6,r2
   16174:	1906b03a 	or	r3,r3,r4
   16178:	1c40042e 	bgeu	r3,r17,1618c <__udivdi3+0x370>
   1617c:	1dc7883a 	add	r3,r3,r23
   16180:	10bfffc4 	addi	r2,r2,-1
   16184:	1dc0752e 	bgeu	r3,r23,1635c <__udivdi3+0x540>
   16188:	100d883a 	mov	r6,r2
   1618c:	1c63c83a 	sub	r17,r3,r17
   16190:	900b883a 	mov	r5,r18
   16194:	8809883a 	mov	r4,r17
   16198:	d9800015 	stw	r6,0(sp)
   1619c:	000904c0 	call	904c <__umodsi3>
   161a0:	102d883a 	mov	r22,r2
   161a4:	8809883a 	mov	r4,r17
   161a8:	900b883a 	mov	r5,r18
   161ac:	0008fe80 	call	8fe8 <__udivsi3>
   161b0:	b02c943a 	slli	r22,r22,16
   161b4:	e089383a 	mul	r4,fp,r2
   161b8:	843fffcc 	andi	r16,r16,65535
   161bc:	85a0b03a 	or	r16,r16,r22
   161c0:	d9800017 	ldw	r6,0(sp)
   161c4:	8100042e 	bgeu	r16,r4,161d8 <__udivdi3+0x3bc>
   161c8:	85e1883a 	add	r16,r16,r23
   161cc:	10ffffc4 	addi	r3,r2,-1
   161d0:	85c05e2e 	bgeu	r16,r23,1634c <__udivdi3+0x530>
   161d4:	1805883a 	mov	r2,r3
   161d8:	300c943a 	slli	r6,r6,16
   161dc:	a17fffcc 	andi	r5,r20,65535
   161e0:	a028d43a 	srli	r20,r20,16
   161e4:	3084b03a 	or	r2,r6,r2
   161e8:	10ffffcc 	andi	r3,r2,65535
   161ec:	100cd43a 	srli	r6,r2,16
   161f0:	194f383a 	mul	r7,r3,r5
   161f4:	1d07383a 	mul	r3,r3,r20
   161f8:	314b383a 	mul	r5,r6,r5
   161fc:	3810d43a 	srli	r8,r7,16
   16200:	8121c83a 	sub	r16,r16,r4
   16204:	1947883a 	add	r3,r3,r5
   16208:	40c7883a 	add	r3,r8,r3
   1620c:	350d383a 	mul	r6,r6,r20
   16210:	1940022e 	bgeu	r3,r5,1621c <__udivdi3+0x400>
   16214:	01000074 	movhi	r4,1
   16218:	310d883a 	add	r6,r6,r4
   1621c:	1828d43a 	srli	r20,r3,16
   16220:	a18d883a 	add	r6,r20,r6
   16224:	81803e36 	bltu	r16,r6,16320 <__udivdi3+0x504>
   16228:	81803826 	beq	r16,r6,1630c <__udivdi3+0x4f0>
   1622c:	0007883a 	mov	r3,zero
   16230:	003fa206 	br	160bc <__alt_data_end+0xf00160bc>
   16234:	88e2983a 	sll	r17,r17,r3
   16238:	80a8d83a 	srl	r20,r16,r2
   1623c:	80e0983a 	sll	r16,r16,r3
   16240:	882ad43a 	srli	r21,r17,16
   16244:	9884d83a 	srl	r2,r19,r2
   16248:	a009883a 	mov	r4,r20
   1624c:	a80b883a 	mov	r5,r21
   16250:	142eb03a 	or	r23,r2,r16
   16254:	98e4983a 	sll	r18,r19,r3
   16258:	000904c0 	call	904c <__umodsi3>
   1625c:	a009883a 	mov	r4,r20
   16260:	a80b883a 	mov	r5,r21
   16264:	1021883a 	mov	r16,r2
   16268:	0008fe80 	call	8fe8 <__udivsi3>
   1626c:	1039883a 	mov	fp,r2
   16270:	8d3fffcc 	andi	r20,r17,65535
   16274:	8020943a 	slli	r16,r16,16
   16278:	b804d43a 	srli	r2,r23,16
   1627c:	a72d383a 	mul	r22,r20,fp
   16280:	1404b03a 	or	r2,r2,r16
   16284:	1580062e 	bgeu	r2,r22,162a0 <__udivdi3+0x484>
   16288:	1445883a 	add	r2,r2,r17
   1628c:	e0ffffc4 	addi	r3,fp,-1
   16290:	14403836 	bltu	r2,r17,16374 <__udivdi3+0x558>
   16294:	1580372e 	bgeu	r2,r22,16374 <__udivdi3+0x558>
   16298:	e73fff84 	addi	fp,fp,-2
   1629c:	1445883a 	add	r2,r2,r17
   162a0:	15adc83a 	sub	r22,r2,r22
   162a4:	a80b883a 	mov	r5,r21
   162a8:	b009883a 	mov	r4,r22
   162ac:	000904c0 	call	904c <__umodsi3>
   162b0:	1027883a 	mov	r19,r2
   162b4:	b009883a 	mov	r4,r22
   162b8:	a80b883a 	mov	r5,r21
   162bc:	0008fe80 	call	8fe8 <__udivsi3>
   162c0:	9826943a 	slli	r19,r19,16
   162c4:	a0a1383a 	mul	r16,r20,r2
   162c8:	b93fffcc 	andi	r4,r23,65535
   162cc:	24c8b03a 	or	r4,r4,r19
   162d0:	2400062e 	bgeu	r4,r16,162ec <__udivdi3+0x4d0>
   162d4:	2449883a 	add	r4,r4,r17
   162d8:	10ffffc4 	addi	r3,r2,-1
   162dc:	24402336 	bltu	r4,r17,1636c <__udivdi3+0x550>
   162e0:	2400222e 	bgeu	r4,r16,1636c <__udivdi3+0x550>
   162e4:	10bfff84 	addi	r2,r2,-2
   162e8:	2449883a 	add	r4,r4,r17
   162ec:	e038943a 	slli	fp,fp,16
   162f0:	2421c83a 	sub	r16,r4,r16
   162f4:	e086b03a 	or	r3,fp,r2
   162f8:	003f4306 	br	16008 <__alt_data_end+0xf0016008>
   162fc:	2005883a 	mov	r2,r4
   16300:	003f6906 	br	160a8 <__alt_data_end+0xf00160a8>
   16304:	1805883a 	mov	r2,r3
   16308:	003f0f06 	br	15f48 <__alt_data_end+0xf0015f48>
   1630c:	1806943a 	slli	r3,r3,16
   16310:	9d66983a 	sll	r19,r19,r21
   16314:	39ffffcc 	andi	r7,r7,65535
   16318:	19c7883a 	add	r3,r3,r7
   1631c:	98ffc32e 	bgeu	r19,r3,1622c <__alt_data_end+0xf001622c>
   16320:	10bfffc4 	addi	r2,r2,-1
   16324:	003fc106 	br	1622c <__alt_data_end+0xf001622c>
   16328:	00800604 	movi	r2,24
   1632c:	003f1106 	br	15f74 <__alt_data_end+0xf0015f74>
   16330:	00800604 	movi	r2,24
   16334:	003f2706 	br	15fd4 <__alt_data_end+0xf0015fd4>
   16338:	00800604 	movi	r2,24
   1633c:	003ece06 	br	15e78 <__alt_data_end+0xf0015e78>
   16340:	0007883a 	mov	r3,zero
   16344:	00800044 	movi	r2,1
   16348:	003f5c06 	br	160bc <__alt_data_end+0xf00160bc>
   1634c:	813fa12e 	bgeu	r16,r4,161d4 <__alt_data_end+0xf00161d4>
   16350:	10bfff84 	addi	r2,r2,-2
   16354:	85e1883a 	add	r16,r16,r23
   16358:	003f9f06 	br	161d8 <__alt_data_end+0xf00161d8>
   1635c:	1c7f8a2e 	bgeu	r3,r17,16188 <__alt_data_end+0xf0016188>
   16360:	31bfff84 	addi	r6,r6,-2
   16364:	1dc7883a 	add	r3,r3,r23
   16368:	003f8806 	br	1618c <__alt_data_end+0xf001618c>
   1636c:	1805883a 	mov	r2,r3
   16370:	003fde06 	br	162ec <__alt_data_end+0xf00162ec>
   16374:	1839883a 	mov	fp,r3
   16378:	003fc906 	br	162a0 <__alt_data_end+0xf00162a0>
   1637c:	b5bfff84 	addi	r22,r22,-2
   16380:	2449883a 	add	r4,r4,r17
   16384:	003f3406 	br	16058 <__alt_data_end+0xf0016058>
   16388:	b5bfff84 	addi	r22,r22,-2
   1638c:	1445883a 	add	r2,r2,r17
   16390:	003edb06 	br	15f00 <__alt_data_end+0xf0015f00>

00016394 <__umoddi3>:
   16394:	defff404 	addi	sp,sp,-48
   16398:	df000a15 	stw	fp,40(sp)
   1639c:	dc400315 	stw	r17,12(sp)
   163a0:	dc000215 	stw	r16,8(sp)
   163a4:	dfc00b15 	stw	ra,44(sp)
   163a8:	ddc00915 	stw	r23,36(sp)
   163ac:	dd800815 	stw	r22,32(sp)
   163b0:	dd400715 	stw	r21,28(sp)
   163b4:	dd000615 	stw	r20,24(sp)
   163b8:	dcc00515 	stw	r19,20(sp)
   163bc:	dc800415 	stw	r18,16(sp)
   163c0:	2021883a 	mov	r16,r4
   163c4:	2823883a 	mov	r17,r5
   163c8:	2839883a 	mov	fp,r5
   163cc:	38003c1e 	bne	r7,zero,164c0 <__umoddi3+0x12c>
   163d0:	3027883a 	mov	r19,r6
   163d4:	2029883a 	mov	r20,r4
   163d8:	2980512e 	bgeu	r5,r6,16520 <__umoddi3+0x18c>
   163dc:	00bfffd4 	movui	r2,65535
   163e0:	11809a36 	bltu	r2,r6,1664c <__umoddi3+0x2b8>
   163e4:	01003fc4 	movi	r4,255
   163e8:	2189803a 	cmpltu	r4,r4,r6
   163ec:	200890fa 	slli	r4,r4,3
   163f0:	3104d83a 	srl	r2,r6,r4
   163f4:	00c20034 	movhi	r3,2048
   163f8:	18c08dc4 	addi	r3,r3,567
   163fc:	1885883a 	add	r2,r3,r2
   16400:	10c00003 	ldbu	r3,0(r2)
   16404:	00800804 	movi	r2,32
   16408:	1909883a 	add	r4,r3,r4
   1640c:	1125c83a 	sub	r18,r2,r4
   16410:	90000526 	beq	r18,zero,16428 <__umoddi3+0x94>
   16414:	8ca2983a 	sll	r17,r17,r18
   16418:	8108d83a 	srl	r4,r16,r4
   1641c:	34a6983a 	sll	r19,r6,r18
   16420:	84a8983a 	sll	r20,r16,r18
   16424:	2478b03a 	or	fp,r4,r17
   16428:	982ed43a 	srli	r23,r19,16
   1642c:	e009883a 	mov	r4,fp
   16430:	9dbfffcc 	andi	r22,r19,65535
   16434:	b80b883a 	mov	r5,r23
   16438:	000904c0 	call	904c <__umodsi3>
   1643c:	e009883a 	mov	r4,fp
   16440:	b80b883a 	mov	r5,r23
   16444:	102b883a 	mov	r21,r2
   16448:	0008fe80 	call	8fe8 <__udivsi3>
   1644c:	a806943a 	slli	r3,r21,16
   16450:	a008d43a 	srli	r4,r20,16
   16454:	b085383a 	mul	r2,r22,r2
   16458:	20c8b03a 	or	r4,r4,r3
   1645c:	2080032e 	bgeu	r4,r2,1646c <__umoddi3+0xd8>
   16460:	24c9883a 	add	r4,r4,r19
   16464:	24c00136 	bltu	r4,r19,1646c <__umoddi3+0xd8>
   16468:	20811036 	bltu	r4,r2,168ac <__umoddi3+0x518>
   1646c:	20abc83a 	sub	r21,r4,r2
   16470:	b80b883a 	mov	r5,r23
   16474:	a809883a 	mov	r4,r21
   16478:	000904c0 	call	904c <__umodsi3>
   1647c:	1023883a 	mov	r17,r2
   16480:	b80b883a 	mov	r5,r23
   16484:	a809883a 	mov	r4,r21
   16488:	0008fe80 	call	8fe8 <__udivsi3>
   1648c:	8822943a 	slli	r17,r17,16
   16490:	b085383a 	mul	r2,r22,r2
   16494:	a0ffffcc 	andi	r3,r20,65535
   16498:	1c46b03a 	or	r3,r3,r17
   1649c:	1880042e 	bgeu	r3,r2,164b0 <__umoddi3+0x11c>
   164a0:	1cc7883a 	add	r3,r3,r19
   164a4:	1cc00236 	bltu	r3,r19,164b0 <__umoddi3+0x11c>
   164a8:	1880012e 	bgeu	r3,r2,164b0 <__umoddi3+0x11c>
   164ac:	1cc7883a 	add	r3,r3,r19
   164b0:	1885c83a 	sub	r2,r3,r2
   164b4:	1484d83a 	srl	r2,r2,r18
   164b8:	0007883a 	mov	r3,zero
   164bc:	00004f06 	br	165fc <__umoddi3+0x268>
   164c0:	29c04c36 	bltu	r5,r7,165f4 <__umoddi3+0x260>
   164c4:	00bfffd4 	movui	r2,65535
   164c8:	11c0582e 	bgeu	r2,r7,1662c <__umoddi3+0x298>
   164cc:	00804034 	movhi	r2,256
   164d0:	10bfffc4 	addi	r2,r2,-1
   164d4:	11c0e736 	bltu	r2,r7,16874 <__umoddi3+0x4e0>
   164d8:	01000404 	movi	r4,16
   164dc:	3904d83a 	srl	r2,r7,r4
   164e0:	00c20034 	movhi	r3,2048
   164e4:	18c08dc4 	addi	r3,r3,567
   164e8:	1885883a 	add	r2,r3,r2
   164ec:	14c00003 	ldbu	r19,0(r2)
   164f0:	00c00804 	movi	r3,32
   164f4:	9927883a 	add	r19,r19,r4
   164f8:	1ce9c83a 	sub	r20,r3,r19
   164fc:	a000581e 	bne	r20,zero,16660 <__umoddi3+0x2cc>
   16500:	3c400136 	bltu	r7,r17,16508 <__umoddi3+0x174>
   16504:	8180eb36 	bltu	r16,r6,168b4 <__umoddi3+0x520>
   16508:	8185c83a 	sub	r2,r16,r6
   1650c:	89e3c83a 	sub	r17,r17,r7
   16510:	8089803a 	cmpltu	r4,r16,r2
   16514:	8939c83a 	sub	fp,r17,r4
   16518:	e007883a 	mov	r3,fp
   1651c:	00003706 	br	165fc <__umoddi3+0x268>
   16520:	3000041e 	bne	r6,zero,16534 <__umoddi3+0x1a0>
   16524:	000b883a 	mov	r5,zero
   16528:	01000044 	movi	r4,1
   1652c:	0008fe80 	call	8fe8 <__udivsi3>
   16530:	1027883a 	mov	r19,r2
   16534:	00bfffd4 	movui	r2,65535
   16538:	14c0402e 	bgeu	r2,r19,1663c <__umoddi3+0x2a8>
   1653c:	00804034 	movhi	r2,256
   16540:	10bfffc4 	addi	r2,r2,-1
   16544:	14c0cd36 	bltu	r2,r19,1687c <__umoddi3+0x4e8>
   16548:	00800404 	movi	r2,16
   1654c:	9886d83a 	srl	r3,r19,r2
   16550:	01020034 	movhi	r4,2048
   16554:	21008dc4 	addi	r4,r4,567
   16558:	20c7883a 	add	r3,r4,r3
   1655c:	18c00003 	ldbu	r3,0(r3)
   16560:	1887883a 	add	r3,r3,r2
   16564:	00800804 	movi	r2,32
   16568:	10e5c83a 	sub	r18,r2,r3
   1656c:	9000901e 	bne	r18,zero,167b0 <__umoddi3+0x41c>
   16570:	982cd43a 	srli	r22,r19,16
   16574:	8ce3c83a 	sub	r17,r17,r19
   16578:	9d7fffcc 	andi	r21,r19,65535
   1657c:	b00b883a 	mov	r5,r22
   16580:	8809883a 	mov	r4,r17
   16584:	000904c0 	call	904c <__umodsi3>
   16588:	8809883a 	mov	r4,r17
   1658c:	b00b883a 	mov	r5,r22
   16590:	1021883a 	mov	r16,r2
   16594:	0008fe80 	call	8fe8 <__udivsi3>
   16598:	8006943a 	slli	r3,r16,16
   1659c:	a008d43a 	srli	r4,r20,16
   165a0:	1545383a 	mul	r2,r2,r21
   165a4:	20c8b03a 	or	r4,r4,r3
   165a8:	2080042e 	bgeu	r4,r2,165bc <__umoddi3+0x228>
   165ac:	24c9883a 	add	r4,r4,r19
   165b0:	24c00236 	bltu	r4,r19,165bc <__umoddi3+0x228>
   165b4:	2080012e 	bgeu	r4,r2,165bc <__umoddi3+0x228>
   165b8:	24c9883a 	add	r4,r4,r19
   165bc:	20a1c83a 	sub	r16,r4,r2
   165c0:	b00b883a 	mov	r5,r22
   165c4:	8009883a 	mov	r4,r16
   165c8:	000904c0 	call	904c <__umodsi3>
   165cc:	1023883a 	mov	r17,r2
   165d0:	b00b883a 	mov	r5,r22
   165d4:	8009883a 	mov	r4,r16
   165d8:	0008fe80 	call	8fe8 <__udivsi3>
   165dc:	8822943a 	slli	r17,r17,16
   165e0:	1545383a 	mul	r2,r2,r21
   165e4:	a53fffcc 	andi	r20,r20,65535
   165e8:	a446b03a 	or	r3,r20,r17
   165ec:	18bfb02e 	bgeu	r3,r2,164b0 <__alt_data_end+0xf00164b0>
   165f0:	003fab06 	br	164a0 <__alt_data_end+0xf00164a0>
   165f4:	2005883a 	mov	r2,r4
   165f8:	2807883a 	mov	r3,r5
   165fc:	dfc00b17 	ldw	ra,44(sp)
   16600:	df000a17 	ldw	fp,40(sp)
   16604:	ddc00917 	ldw	r23,36(sp)
   16608:	dd800817 	ldw	r22,32(sp)
   1660c:	dd400717 	ldw	r21,28(sp)
   16610:	dd000617 	ldw	r20,24(sp)
   16614:	dcc00517 	ldw	r19,20(sp)
   16618:	dc800417 	ldw	r18,16(sp)
   1661c:	dc400317 	ldw	r17,12(sp)
   16620:	dc000217 	ldw	r16,8(sp)
   16624:	dec00c04 	addi	sp,sp,48
   16628:	f800283a 	ret
   1662c:	04c03fc4 	movi	r19,255
   16630:	99c9803a 	cmpltu	r4,r19,r7
   16634:	200890fa 	slli	r4,r4,3
   16638:	003fa806 	br	164dc <__alt_data_end+0xf00164dc>
   1663c:	00803fc4 	movi	r2,255
   16640:	14c5803a 	cmpltu	r2,r2,r19
   16644:	100490fa 	slli	r2,r2,3
   16648:	003fc006 	br	1654c <__alt_data_end+0xf001654c>
   1664c:	00804034 	movhi	r2,256
   16650:	10bfffc4 	addi	r2,r2,-1
   16654:	11808b36 	bltu	r2,r6,16884 <__umoddi3+0x4f0>
   16658:	01000404 	movi	r4,16
   1665c:	003f6406 	br	163f0 <__alt_data_end+0xf00163f0>
   16660:	34c4d83a 	srl	r2,r6,r19
   16664:	3d0e983a 	sll	r7,r7,r20
   16668:	8cf8d83a 	srl	fp,r17,r19
   1666c:	8d10983a 	sll	r8,r17,r20
   16670:	38aab03a 	or	r21,r7,r2
   16674:	a82cd43a 	srli	r22,r21,16
   16678:	84e2d83a 	srl	r17,r16,r19
   1667c:	e009883a 	mov	r4,fp
   16680:	b00b883a 	mov	r5,r22
   16684:	8a22b03a 	or	r17,r17,r8
   16688:	3524983a 	sll	r18,r6,r20
   1668c:	000904c0 	call	904c <__umodsi3>
   16690:	e009883a 	mov	r4,fp
   16694:	b00b883a 	mov	r5,r22
   16698:	102f883a 	mov	r23,r2
   1669c:	0008fe80 	call	8fe8 <__udivsi3>
   166a0:	100d883a 	mov	r6,r2
   166a4:	b808943a 	slli	r4,r23,16
   166a8:	aa3fffcc 	andi	r8,r21,65535
   166ac:	8804d43a 	srli	r2,r17,16
   166b0:	41af383a 	mul	r23,r8,r6
   166b4:	8520983a 	sll	r16,r16,r20
   166b8:	1104b03a 	or	r2,r2,r4
   166bc:	15c0042e 	bgeu	r2,r23,166d0 <__umoddi3+0x33c>
   166c0:	1545883a 	add	r2,r2,r21
   166c4:	30ffffc4 	addi	r3,r6,-1
   166c8:	1540742e 	bgeu	r2,r21,1689c <__umoddi3+0x508>
   166cc:	180d883a 	mov	r6,r3
   166d0:	15efc83a 	sub	r23,r2,r23
   166d4:	b00b883a 	mov	r5,r22
   166d8:	b809883a 	mov	r4,r23
   166dc:	d9800115 	stw	r6,4(sp)
   166e0:	da000015 	stw	r8,0(sp)
   166e4:	000904c0 	call	904c <__umodsi3>
   166e8:	b00b883a 	mov	r5,r22
   166ec:	b809883a 	mov	r4,r23
   166f0:	1039883a 	mov	fp,r2
   166f4:	0008fe80 	call	8fe8 <__udivsi3>
   166f8:	da000017 	ldw	r8,0(sp)
   166fc:	e038943a 	slli	fp,fp,16
   16700:	100b883a 	mov	r5,r2
   16704:	4089383a 	mul	r4,r8,r2
   16708:	8a3fffcc 	andi	r8,r17,65535
   1670c:	4710b03a 	or	r8,r8,fp
   16710:	d9800117 	ldw	r6,4(sp)
   16714:	4100042e 	bgeu	r8,r4,16728 <__umoddi3+0x394>
   16718:	4551883a 	add	r8,r8,r21
   1671c:	10bfffc4 	addi	r2,r2,-1
   16720:	45405a2e 	bgeu	r8,r21,1688c <__umoddi3+0x4f8>
   16724:	100b883a 	mov	r5,r2
   16728:	300c943a 	slli	r6,r6,16
   1672c:	91ffffcc 	andi	r7,r18,65535
   16730:	9004d43a 	srli	r2,r18,16
   16734:	314cb03a 	or	r6,r6,r5
   16738:	317fffcc 	andi	r5,r6,65535
   1673c:	300cd43a 	srli	r6,r6,16
   16740:	29d3383a 	mul	r9,r5,r7
   16744:	288b383a 	mul	r5,r5,r2
   16748:	31cf383a 	mul	r7,r6,r7
   1674c:	4806d43a 	srli	r3,r9,16
   16750:	4111c83a 	sub	r8,r8,r4
   16754:	29cb883a 	add	r5,r5,r7
   16758:	194b883a 	add	r5,r3,r5
   1675c:	3085383a 	mul	r2,r6,r2
   16760:	29c0022e 	bgeu	r5,r7,1676c <__umoddi3+0x3d8>
   16764:	00c00074 	movhi	r3,1
   16768:	10c5883a 	add	r2,r2,r3
   1676c:	2808d43a 	srli	r4,r5,16
   16770:	280a943a 	slli	r5,r5,16
   16774:	4a7fffcc 	andi	r9,r9,65535
   16778:	2085883a 	add	r2,r4,r2
   1677c:	2a4b883a 	add	r5,r5,r9
   16780:	40803636 	bltu	r8,r2,1685c <__umoddi3+0x4c8>
   16784:	40804d26 	beq	r8,r2,168bc <__umoddi3+0x528>
   16788:	4089c83a 	sub	r4,r8,r2
   1678c:	280f883a 	mov	r7,r5
   16790:	81cfc83a 	sub	r7,r16,r7
   16794:	81c7803a 	cmpltu	r3,r16,r7
   16798:	20c7c83a 	sub	r3,r4,r3
   1679c:	1cc4983a 	sll	r2,r3,r19
   167a0:	3d0ed83a 	srl	r7,r7,r20
   167a4:	1d06d83a 	srl	r3,r3,r20
   167a8:	11c4b03a 	or	r2,r2,r7
   167ac:	003f9306 	br	165fc <__alt_data_end+0xf00165fc>
   167b0:	9ca6983a 	sll	r19,r19,r18
   167b4:	88e8d83a 	srl	r20,r17,r3
   167b8:	80c4d83a 	srl	r2,r16,r3
   167bc:	982cd43a 	srli	r22,r19,16
   167c0:	8ca2983a 	sll	r17,r17,r18
   167c4:	a009883a 	mov	r4,r20
   167c8:	b00b883a 	mov	r5,r22
   167cc:	1478b03a 	or	fp,r2,r17
   167d0:	000904c0 	call	904c <__umodsi3>
   167d4:	a009883a 	mov	r4,r20
   167d8:	b00b883a 	mov	r5,r22
   167dc:	1023883a 	mov	r17,r2
   167e0:	0008fe80 	call	8fe8 <__udivsi3>
   167e4:	9d7fffcc 	andi	r21,r19,65535
   167e8:	880a943a 	slli	r5,r17,16
   167ec:	e008d43a 	srli	r4,fp,16
   167f0:	a885383a 	mul	r2,r21,r2
   167f4:	84a8983a 	sll	r20,r16,r18
   167f8:	2148b03a 	or	r4,r4,r5
   167fc:	2080042e 	bgeu	r4,r2,16810 <__umoddi3+0x47c>
   16800:	24c9883a 	add	r4,r4,r19
   16804:	24c00236 	bltu	r4,r19,16810 <__umoddi3+0x47c>
   16808:	2080012e 	bgeu	r4,r2,16810 <__umoddi3+0x47c>
   1680c:	24c9883a 	add	r4,r4,r19
   16810:	20a3c83a 	sub	r17,r4,r2
   16814:	b00b883a 	mov	r5,r22
   16818:	8809883a 	mov	r4,r17
   1681c:	000904c0 	call	904c <__umodsi3>
   16820:	102f883a 	mov	r23,r2
   16824:	8809883a 	mov	r4,r17
   16828:	b00b883a 	mov	r5,r22
   1682c:	0008fe80 	call	8fe8 <__udivsi3>
   16830:	b82e943a 	slli	r23,r23,16
   16834:	a885383a 	mul	r2,r21,r2
   16838:	e13fffcc 	andi	r4,fp,65535
   1683c:	25c8b03a 	or	r4,r4,r23
   16840:	2080042e 	bgeu	r4,r2,16854 <__umoddi3+0x4c0>
   16844:	24c9883a 	add	r4,r4,r19
   16848:	24c00236 	bltu	r4,r19,16854 <__umoddi3+0x4c0>
   1684c:	2080012e 	bgeu	r4,r2,16854 <__umoddi3+0x4c0>
   16850:	24c9883a 	add	r4,r4,r19
   16854:	20a3c83a 	sub	r17,r4,r2
   16858:	003f4806 	br	1657c <__alt_data_end+0xf001657c>
   1685c:	2c8fc83a 	sub	r7,r5,r18
   16860:	1545c83a 	sub	r2,r2,r21
   16864:	29cb803a 	cmpltu	r5,r5,r7
   16868:	1145c83a 	sub	r2,r2,r5
   1686c:	4089c83a 	sub	r4,r8,r2
   16870:	003fc706 	br	16790 <__alt_data_end+0xf0016790>
   16874:	01000604 	movi	r4,24
   16878:	003f1806 	br	164dc <__alt_data_end+0xf00164dc>
   1687c:	00800604 	movi	r2,24
   16880:	003f3206 	br	1654c <__alt_data_end+0xf001654c>
   16884:	01000604 	movi	r4,24
   16888:	003ed906 	br	163f0 <__alt_data_end+0xf00163f0>
   1688c:	413fa52e 	bgeu	r8,r4,16724 <__alt_data_end+0xf0016724>
   16890:	297fff84 	addi	r5,r5,-2
   16894:	4551883a 	add	r8,r8,r21
   16898:	003fa306 	br	16728 <__alt_data_end+0xf0016728>
   1689c:	15ff8b2e 	bgeu	r2,r23,166cc <__alt_data_end+0xf00166cc>
   168a0:	31bfff84 	addi	r6,r6,-2
   168a4:	1545883a 	add	r2,r2,r21
   168a8:	003f8906 	br	166d0 <__alt_data_end+0xf00166d0>
   168ac:	24c9883a 	add	r4,r4,r19
   168b0:	003eee06 	br	1646c <__alt_data_end+0xf001646c>
   168b4:	8005883a 	mov	r2,r16
   168b8:	003f1706 	br	16518 <__alt_data_end+0xf0016518>
   168bc:	817fe736 	bltu	r16,r5,1685c <__alt_data_end+0xf001685c>
   168c0:	280f883a 	mov	r7,r5
   168c4:	0009883a 	mov	r4,zero
   168c8:	003fb106 	br	16790 <__alt_data_end+0xf0016790>

000168cc <__adddf3>:
   168cc:	02c00434 	movhi	r11,16
   168d0:	5affffc4 	addi	r11,r11,-1
   168d4:	2806d7fa 	srli	r3,r5,31
   168d8:	2ad4703a 	and	r10,r5,r11
   168dc:	3ad2703a 	and	r9,r7,r11
   168e0:	3804d53a 	srli	r2,r7,20
   168e4:	3018d77a 	srli	r12,r6,29
   168e8:	280ad53a 	srli	r5,r5,20
   168ec:	501490fa 	slli	r10,r10,3
   168f0:	2010d77a 	srli	r8,r4,29
   168f4:	481290fa 	slli	r9,r9,3
   168f8:	380ed7fa 	srli	r7,r7,31
   168fc:	defffb04 	addi	sp,sp,-20
   16900:	dc800215 	stw	r18,8(sp)
   16904:	dc400115 	stw	r17,4(sp)
   16908:	dc000015 	stw	r16,0(sp)
   1690c:	dfc00415 	stw	ra,16(sp)
   16910:	dcc00315 	stw	r19,12(sp)
   16914:	1c803fcc 	andi	r18,r3,255
   16918:	2c01ffcc 	andi	r16,r5,2047
   1691c:	5210b03a 	or	r8,r10,r8
   16920:	202290fa 	slli	r17,r4,3
   16924:	1081ffcc 	andi	r2,r2,2047
   16928:	4b12b03a 	or	r9,r9,r12
   1692c:	300c90fa 	slli	r6,r6,3
   16930:	91c07526 	beq	r18,r7,16b08 <__adddf3+0x23c>
   16934:	8087c83a 	sub	r3,r16,r2
   16938:	00c0ab0e 	bge	zero,r3,16be8 <__adddf3+0x31c>
   1693c:	10002a1e 	bne	r2,zero,169e8 <__adddf3+0x11c>
   16940:	4984b03a 	or	r2,r9,r6
   16944:	1000961e 	bne	r2,zero,16ba0 <__adddf3+0x2d4>
   16948:	888001cc 	andi	r2,r17,7
   1694c:	10000726 	beq	r2,zero,1696c <__adddf3+0xa0>
   16950:	888003cc 	andi	r2,r17,15
   16954:	00c00104 	movi	r3,4
   16958:	10c00426 	beq	r2,r3,1696c <__adddf3+0xa0>
   1695c:	88c7883a 	add	r3,r17,r3
   16960:	1c63803a 	cmpltu	r17,r3,r17
   16964:	4451883a 	add	r8,r8,r17
   16968:	1823883a 	mov	r17,r3
   1696c:	4080202c 	andhi	r2,r8,128
   16970:	10005926 	beq	r2,zero,16ad8 <__adddf3+0x20c>
   16974:	84000044 	addi	r16,r16,1
   16978:	0081ffc4 	movi	r2,2047
   1697c:	8080ba26 	beq	r16,r2,16c68 <__adddf3+0x39c>
   16980:	00bfe034 	movhi	r2,65408
   16984:	10bfffc4 	addi	r2,r2,-1
   16988:	4090703a 	and	r8,r8,r2
   1698c:	4004977a 	slli	r2,r8,29
   16990:	4010927a 	slli	r8,r8,9
   16994:	8822d0fa 	srli	r17,r17,3
   16998:	8401ffcc 	andi	r16,r16,2047
   1699c:	4010d33a 	srli	r8,r8,12
   169a0:	9007883a 	mov	r3,r18
   169a4:	1444b03a 	or	r2,r2,r17
   169a8:	8401ffcc 	andi	r16,r16,2047
   169ac:	8020953a 	slli	r16,r16,20
   169b0:	18c03fcc 	andi	r3,r3,255
   169b4:	01000434 	movhi	r4,16
   169b8:	213fffc4 	addi	r4,r4,-1
   169bc:	180697fa 	slli	r3,r3,31
   169c0:	4110703a 	and	r8,r8,r4
   169c4:	4410b03a 	or	r8,r8,r16
   169c8:	40c6b03a 	or	r3,r8,r3
   169cc:	dfc00417 	ldw	ra,16(sp)
   169d0:	dcc00317 	ldw	r19,12(sp)
   169d4:	dc800217 	ldw	r18,8(sp)
   169d8:	dc400117 	ldw	r17,4(sp)
   169dc:	dc000017 	ldw	r16,0(sp)
   169e0:	dec00504 	addi	sp,sp,20
   169e4:	f800283a 	ret
   169e8:	0081ffc4 	movi	r2,2047
   169ec:	80bfd626 	beq	r16,r2,16948 <__alt_data_end+0xf0016948>
   169f0:	4a402034 	orhi	r9,r9,128
   169f4:	00800e04 	movi	r2,56
   169f8:	10c09f16 	blt	r2,r3,16c78 <__adddf3+0x3ac>
   169fc:	008007c4 	movi	r2,31
   16a00:	10c0c216 	blt	r2,r3,16d0c <__adddf3+0x440>
   16a04:	00800804 	movi	r2,32
   16a08:	10c5c83a 	sub	r2,r2,r3
   16a0c:	488a983a 	sll	r5,r9,r2
   16a10:	30c8d83a 	srl	r4,r6,r3
   16a14:	3084983a 	sll	r2,r6,r2
   16a18:	48c6d83a 	srl	r3,r9,r3
   16a1c:	290cb03a 	or	r6,r5,r4
   16a20:	1004c03a 	cmpne	r2,r2,zero
   16a24:	308cb03a 	or	r6,r6,r2
   16a28:	898dc83a 	sub	r6,r17,r6
   16a2c:	89a3803a 	cmpltu	r17,r17,r6
   16a30:	40d1c83a 	sub	r8,r8,r3
   16a34:	4451c83a 	sub	r8,r8,r17
   16a38:	3023883a 	mov	r17,r6
   16a3c:	4080202c 	andhi	r2,r8,128
   16a40:	10002326 	beq	r2,zero,16ad0 <__adddf3+0x204>
   16a44:	04c02034 	movhi	r19,128
   16a48:	9cffffc4 	addi	r19,r19,-1
   16a4c:	44e6703a 	and	r19,r8,r19
   16a50:	98007626 	beq	r19,zero,16c2c <__adddf3+0x360>
   16a54:	9809883a 	mov	r4,r19
   16a58:	0008e8c0 	call	8e8c <__clzsi2>
   16a5c:	10fffe04 	addi	r3,r2,-8
   16a60:	010007c4 	movi	r4,31
   16a64:	20c07716 	blt	r4,r3,16c44 <__adddf3+0x378>
   16a68:	00800804 	movi	r2,32
   16a6c:	10c5c83a 	sub	r2,r2,r3
   16a70:	8884d83a 	srl	r2,r17,r2
   16a74:	98d0983a 	sll	r8,r19,r3
   16a78:	88e2983a 	sll	r17,r17,r3
   16a7c:	1204b03a 	or	r2,r2,r8
   16a80:	1c007416 	blt	r3,r16,16c54 <__adddf3+0x388>
   16a84:	1c21c83a 	sub	r16,r3,r16
   16a88:	82000044 	addi	r8,r16,1
   16a8c:	00c007c4 	movi	r3,31
   16a90:	1a009116 	blt	r3,r8,16cd8 <__adddf3+0x40c>
   16a94:	00c00804 	movi	r3,32
   16a98:	1a07c83a 	sub	r3,r3,r8
   16a9c:	8a08d83a 	srl	r4,r17,r8
   16aa0:	88e2983a 	sll	r17,r17,r3
   16aa4:	10c6983a 	sll	r3,r2,r3
   16aa8:	1210d83a 	srl	r8,r2,r8
   16aac:	8804c03a 	cmpne	r2,r17,zero
   16ab0:	1906b03a 	or	r3,r3,r4
   16ab4:	18a2b03a 	or	r17,r3,r2
   16ab8:	0021883a 	mov	r16,zero
   16abc:	003fa206 	br	16948 <__alt_data_end+0xf0016948>
   16ac0:	1890b03a 	or	r8,r3,r2
   16ac4:	40017d26 	beq	r8,zero,170bc <__adddf3+0x7f0>
   16ac8:	1011883a 	mov	r8,r2
   16acc:	1823883a 	mov	r17,r3
   16ad0:	888001cc 	andi	r2,r17,7
   16ad4:	103f9e1e 	bne	r2,zero,16950 <__alt_data_end+0xf0016950>
   16ad8:	4004977a 	slli	r2,r8,29
   16adc:	8822d0fa 	srli	r17,r17,3
   16ae0:	4010d0fa 	srli	r8,r8,3
   16ae4:	9007883a 	mov	r3,r18
   16ae8:	1444b03a 	or	r2,r2,r17
   16aec:	0101ffc4 	movi	r4,2047
   16af0:	81002426 	beq	r16,r4,16b84 <__adddf3+0x2b8>
   16af4:	8120703a 	and	r16,r16,r4
   16af8:	01000434 	movhi	r4,16
   16afc:	213fffc4 	addi	r4,r4,-1
   16b00:	4110703a 	and	r8,r8,r4
   16b04:	003fa806 	br	169a8 <__alt_data_end+0xf00169a8>
   16b08:	8089c83a 	sub	r4,r16,r2
   16b0c:	01005e0e 	bge	zero,r4,16c88 <__adddf3+0x3bc>
   16b10:	10002b26 	beq	r2,zero,16bc0 <__adddf3+0x2f4>
   16b14:	0081ffc4 	movi	r2,2047
   16b18:	80bf8b26 	beq	r16,r2,16948 <__alt_data_end+0xf0016948>
   16b1c:	4a402034 	orhi	r9,r9,128
   16b20:	00800e04 	movi	r2,56
   16b24:	1100a40e 	bge	r2,r4,16db8 <__adddf3+0x4ec>
   16b28:	498cb03a 	or	r6,r9,r6
   16b2c:	300ac03a 	cmpne	r5,r6,zero
   16b30:	0013883a 	mov	r9,zero
   16b34:	2c4b883a 	add	r5,r5,r17
   16b38:	2c63803a 	cmpltu	r17,r5,r17
   16b3c:	4a11883a 	add	r8,r9,r8
   16b40:	8a11883a 	add	r8,r17,r8
   16b44:	2823883a 	mov	r17,r5
   16b48:	4080202c 	andhi	r2,r8,128
   16b4c:	103fe026 	beq	r2,zero,16ad0 <__alt_data_end+0xf0016ad0>
   16b50:	84000044 	addi	r16,r16,1
   16b54:	0081ffc4 	movi	r2,2047
   16b58:	8080d226 	beq	r16,r2,16ea4 <__adddf3+0x5d8>
   16b5c:	00bfe034 	movhi	r2,65408
   16b60:	10bfffc4 	addi	r2,r2,-1
   16b64:	4090703a 	and	r8,r8,r2
   16b68:	880ad07a 	srli	r5,r17,1
   16b6c:	400897fa 	slli	r4,r8,31
   16b70:	88c0004c 	andi	r3,r17,1
   16b74:	28e2b03a 	or	r17,r5,r3
   16b78:	4010d07a 	srli	r8,r8,1
   16b7c:	2462b03a 	or	r17,r4,r17
   16b80:	003f7106 	br	16948 <__alt_data_end+0xf0016948>
   16b84:	4088b03a 	or	r4,r8,r2
   16b88:	20014526 	beq	r4,zero,170a0 <__adddf3+0x7d4>
   16b8c:	01000434 	movhi	r4,16
   16b90:	42000234 	orhi	r8,r8,8
   16b94:	213fffc4 	addi	r4,r4,-1
   16b98:	4110703a 	and	r8,r8,r4
   16b9c:	003f8206 	br	169a8 <__alt_data_end+0xf00169a8>
   16ba0:	18ffffc4 	addi	r3,r3,-1
   16ba4:	1800491e 	bne	r3,zero,16ccc <__adddf3+0x400>
   16ba8:	898bc83a 	sub	r5,r17,r6
   16bac:	8963803a 	cmpltu	r17,r17,r5
   16bb0:	4251c83a 	sub	r8,r8,r9
   16bb4:	4451c83a 	sub	r8,r8,r17
   16bb8:	2823883a 	mov	r17,r5
   16bbc:	003f9f06 	br	16a3c <__alt_data_end+0xf0016a3c>
   16bc0:	4984b03a 	or	r2,r9,r6
   16bc4:	103f6026 	beq	r2,zero,16948 <__alt_data_end+0xf0016948>
   16bc8:	213fffc4 	addi	r4,r4,-1
   16bcc:	2000931e 	bne	r4,zero,16e1c <__adddf3+0x550>
   16bd0:	898d883a 	add	r6,r17,r6
   16bd4:	3463803a 	cmpltu	r17,r6,r17
   16bd8:	4251883a 	add	r8,r8,r9
   16bdc:	8a11883a 	add	r8,r17,r8
   16be0:	3023883a 	mov	r17,r6
   16be4:	003fd806 	br	16b48 <__alt_data_end+0xf0016b48>
   16be8:	1800541e 	bne	r3,zero,16d3c <__adddf3+0x470>
   16bec:	80800044 	addi	r2,r16,1
   16bf0:	1081ffcc 	andi	r2,r2,2047
   16bf4:	00c00044 	movi	r3,1
   16bf8:	1880a00e 	bge	r3,r2,16e7c <__adddf3+0x5b0>
   16bfc:	8989c83a 	sub	r4,r17,r6
   16c00:	8905803a 	cmpltu	r2,r17,r4
   16c04:	4267c83a 	sub	r19,r8,r9
   16c08:	98a7c83a 	sub	r19,r19,r2
   16c0c:	9880202c 	andhi	r2,r19,128
   16c10:	10006326 	beq	r2,zero,16da0 <__adddf3+0x4d4>
   16c14:	3463c83a 	sub	r17,r6,r17
   16c18:	4a07c83a 	sub	r3,r9,r8
   16c1c:	344d803a 	cmpltu	r6,r6,r17
   16c20:	19a7c83a 	sub	r19,r3,r6
   16c24:	3825883a 	mov	r18,r7
   16c28:	983f8a1e 	bne	r19,zero,16a54 <__alt_data_end+0xf0016a54>
   16c2c:	8809883a 	mov	r4,r17
   16c30:	0008e8c0 	call	8e8c <__clzsi2>
   16c34:	10800804 	addi	r2,r2,32
   16c38:	10fffe04 	addi	r3,r2,-8
   16c3c:	010007c4 	movi	r4,31
   16c40:	20ff890e 	bge	r4,r3,16a68 <__alt_data_end+0xf0016a68>
   16c44:	10bff604 	addi	r2,r2,-40
   16c48:	8884983a 	sll	r2,r17,r2
   16c4c:	0023883a 	mov	r17,zero
   16c50:	1c3f8c0e 	bge	r3,r16,16a84 <__alt_data_end+0xf0016a84>
   16c54:	023fe034 	movhi	r8,65408
   16c58:	423fffc4 	addi	r8,r8,-1
   16c5c:	80e1c83a 	sub	r16,r16,r3
   16c60:	1210703a 	and	r8,r2,r8
   16c64:	003f3806 	br	16948 <__alt_data_end+0xf0016948>
   16c68:	9007883a 	mov	r3,r18
   16c6c:	0011883a 	mov	r8,zero
   16c70:	0005883a 	mov	r2,zero
   16c74:	003f4c06 	br	169a8 <__alt_data_end+0xf00169a8>
   16c78:	498cb03a 	or	r6,r9,r6
   16c7c:	300cc03a 	cmpne	r6,r6,zero
   16c80:	0007883a 	mov	r3,zero
   16c84:	003f6806 	br	16a28 <__alt_data_end+0xf0016a28>
   16c88:	20009c1e 	bne	r4,zero,16efc <__adddf3+0x630>
   16c8c:	80800044 	addi	r2,r16,1
   16c90:	1141ffcc 	andi	r5,r2,2047
   16c94:	01000044 	movi	r4,1
   16c98:	2140670e 	bge	r4,r5,16e38 <__adddf3+0x56c>
   16c9c:	0101ffc4 	movi	r4,2047
   16ca0:	11007f26 	beq	r2,r4,16ea0 <__adddf3+0x5d4>
   16ca4:	898d883a 	add	r6,r17,r6
   16ca8:	4247883a 	add	r3,r8,r9
   16cac:	3451803a 	cmpltu	r8,r6,r17
   16cb0:	40d1883a 	add	r8,r8,r3
   16cb4:	402297fa 	slli	r17,r8,31
   16cb8:	300cd07a 	srli	r6,r6,1
   16cbc:	4010d07a 	srli	r8,r8,1
   16cc0:	1021883a 	mov	r16,r2
   16cc4:	89a2b03a 	or	r17,r17,r6
   16cc8:	003f1f06 	br	16948 <__alt_data_end+0xf0016948>
   16ccc:	0081ffc4 	movi	r2,2047
   16cd0:	80bf481e 	bne	r16,r2,169f4 <__alt_data_end+0xf00169f4>
   16cd4:	003f1c06 	br	16948 <__alt_data_end+0xf0016948>
   16cd8:	843ff844 	addi	r16,r16,-31
   16cdc:	01000804 	movi	r4,32
   16ce0:	1406d83a 	srl	r3,r2,r16
   16ce4:	41005026 	beq	r8,r4,16e28 <__adddf3+0x55c>
   16ce8:	01001004 	movi	r4,64
   16cec:	2211c83a 	sub	r8,r4,r8
   16cf0:	1204983a 	sll	r2,r2,r8
   16cf4:	88a2b03a 	or	r17,r17,r2
   16cf8:	8822c03a 	cmpne	r17,r17,zero
   16cfc:	1c62b03a 	or	r17,r3,r17
   16d00:	0011883a 	mov	r8,zero
   16d04:	0021883a 	mov	r16,zero
   16d08:	003f7106 	br	16ad0 <__alt_data_end+0xf0016ad0>
   16d0c:	193ff804 	addi	r4,r3,-32
   16d10:	00800804 	movi	r2,32
   16d14:	4908d83a 	srl	r4,r9,r4
   16d18:	18804526 	beq	r3,r2,16e30 <__adddf3+0x564>
   16d1c:	00801004 	movi	r2,64
   16d20:	10c5c83a 	sub	r2,r2,r3
   16d24:	4886983a 	sll	r3,r9,r2
   16d28:	198cb03a 	or	r6,r3,r6
   16d2c:	300cc03a 	cmpne	r6,r6,zero
   16d30:	218cb03a 	or	r6,r4,r6
   16d34:	0007883a 	mov	r3,zero
   16d38:	003f3b06 	br	16a28 <__alt_data_end+0xf0016a28>
   16d3c:	80002a26 	beq	r16,zero,16de8 <__adddf3+0x51c>
   16d40:	0101ffc4 	movi	r4,2047
   16d44:	11006826 	beq	r2,r4,16ee8 <__adddf3+0x61c>
   16d48:	00c7c83a 	sub	r3,zero,r3
   16d4c:	42002034 	orhi	r8,r8,128
   16d50:	01000e04 	movi	r4,56
   16d54:	20c07c16 	blt	r4,r3,16f48 <__adddf3+0x67c>
   16d58:	010007c4 	movi	r4,31
   16d5c:	20c0da16 	blt	r4,r3,170c8 <__adddf3+0x7fc>
   16d60:	01000804 	movi	r4,32
   16d64:	20c9c83a 	sub	r4,r4,r3
   16d68:	4114983a 	sll	r10,r8,r4
   16d6c:	88cad83a 	srl	r5,r17,r3
   16d70:	8908983a 	sll	r4,r17,r4
   16d74:	40c6d83a 	srl	r3,r8,r3
   16d78:	5162b03a 	or	r17,r10,r5
   16d7c:	2008c03a 	cmpne	r4,r4,zero
   16d80:	8922b03a 	or	r17,r17,r4
   16d84:	3463c83a 	sub	r17,r6,r17
   16d88:	48c7c83a 	sub	r3,r9,r3
   16d8c:	344d803a 	cmpltu	r6,r6,r17
   16d90:	1991c83a 	sub	r8,r3,r6
   16d94:	1021883a 	mov	r16,r2
   16d98:	3825883a 	mov	r18,r7
   16d9c:	003f2706 	br	16a3c <__alt_data_end+0xf0016a3c>
   16da0:	24d0b03a 	or	r8,r4,r19
   16da4:	40001b1e 	bne	r8,zero,16e14 <__adddf3+0x548>
   16da8:	0005883a 	mov	r2,zero
   16dac:	0007883a 	mov	r3,zero
   16db0:	0021883a 	mov	r16,zero
   16db4:	003f4d06 	br	16aec <__alt_data_end+0xf0016aec>
   16db8:	008007c4 	movi	r2,31
   16dbc:	11003c16 	blt	r2,r4,16eb0 <__adddf3+0x5e4>
   16dc0:	00800804 	movi	r2,32
   16dc4:	1105c83a 	sub	r2,r2,r4
   16dc8:	488e983a 	sll	r7,r9,r2
   16dcc:	310ad83a 	srl	r5,r6,r4
   16dd0:	3084983a 	sll	r2,r6,r2
   16dd4:	4912d83a 	srl	r9,r9,r4
   16dd8:	394ab03a 	or	r5,r7,r5
   16ddc:	1004c03a 	cmpne	r2,r2,zero
   16de0:	288ab03a 	or	r5,r5,r2
   16de4:	003f5306 	br	16b34 <__alt_data_end+0xf0016b34>
   16de8:	4448b03a 	or	r4,r8,r17
   16dec:	20003e26 	beq	r4,zero,16ee8 <__adddf3+0x61c>
   16df0:	00c6303a 	nor	r3,zero,r3
   16df4:	18003a1e 	bne	r3,zero,16ee0 <__adddf3+0x614>
   16df8:	3463c83a 	sub	r17,r6,r17
   16dfc:	4a07c83a 	sub	r3,r9,r8
   16e00:	344d803a 	cmpltu	r6,r6,r17
   16e04:	1991c83a 	sub	r8,r3,r6
   16e08:	1021883a 	mov	r16,r2
   16e0c:	3825883a 	mov	r18,r7
   16e10:	003f0a06 	br	16a3c <__alt_data_end+0xf0016a3c>
   16e14:	2023883a 	mov	r17,r4
   16e18:	003f0d06 	br	16a50 <__alt_data_end+0xf0016a50>
   16e1c:	0081ffc4 	movi	r2,2047
   16e20:	80bf3f1e 	bne	r16,r2,16b20 <__alt_data_end+0xf0016b20>
   16e24:	003ec806 	br	16948 <__alt_data_end+0xf0016948>
   16e28:	0005883a 	mov	r2,zero
   16e2c:	003fb106 	br	16cf4 <__alt_data_end+0xf0016cf4>
   16e30:	0007883a 	mov	r3,zero
   16e34:	003fbc06 	br	16d28 <__alt_data_end+0xf0016d28>
   16e38:	4444b03a 	or	r2,r8,r17
   16e3c:	8000871e 	bne	r16,zero,1705c <__adddf3+0x790>
   16e40:	1000ba26 	beq	r2,zero,1712c <__adddf3+0x860>
   16e44:	4984b03a 	or	r2,r9,r6
   16e48:	103ebf26 	beq	r2,zero,16948 <__alt_data_end+0xf0016948>
   16e4c:	8985883a 	add	r2,r17,r6
   16e50:	4247883a 	add	r3,r8,r9
   16e54:	1451803a 	cmpltu	r8,r2,r17
   16e58:	40d1883a 	add	r8,r8,r3
   16e5c:	40c0202c 	andhi	r3,r8,128
   16e60:	1023883a 	mov	r17,r2
   16e64:	183f1a26 	beq	r3,zero,16ad0 <__alt_data_end+0xf0016ad0>
   16e68:	00bfe034 	movhi	r2,65408
   16e6c:	10bfffc4 	addi	r2,r2,-1
   16e70:	2021883a 	mov	r16,r4
   16e74:	4090703a 	and	r8,r8,r2
   16e78:	003eb306 	br	16948 <__alt_data_end+0xf0016948>
   16e7c:	4444b03a 	or	r2,r8,r17
   16e80:	8000291e 	bne	r16,zero,16f28 <__adddf3+0x65c>
   16e84:	10004b1e 	bne	r2,zero,16fb4 <__adddf3+0x6e8>
   16e88:	4990b03a 	or	r8,r9,r6
   16e8c:	40008b26 	beq	r8,zero,170bc <__adddf3+0x7f0>
   16e90:	4811883a 	mov	r8,r9
   16e94:	3023883a 	mov	r17,r6
   16e98:	3825883a 	mov	r18,r7
   16e9c:	003eaa06 	br	16948 <__alt_data_end+0xf0016948>
   16ea0:	1021883a 	mov	r16,r2
   16ea4:	0011883a 	mov	r8,zero
   16ea8:	0005883a 	mov	r2,zero
   16eac:	003f0f06 	br	16aec <__alt_data_end+0xf0016aec>
   16eb0:	217ff804 	addi	r5,r4,-32
   16eb4:	00800804 	movi	r2,32
   16eb8:	494ad83a 	srl	r5,r9,r5
   16ebc:	20807d26 	beq	r4,r2,170b4 <__adddf3+0x7e8>
   16ec0:	00801004 	movi	r2,64
   16ec4:	1109c83a 	sub	r4,r2,r4
   16ec8:	4912983a 	sll	r9,r9,r4
   16ecc:	498cb03a 	or	r6,r9,r6
   16ed0:	300cc03a 	cmpne	r6,r6,zero
   16ed4:	298ab03a 	or	r5,r5,r6
   16ed8:	0013883a 	mov	r9,zero
   16edc:	003f1506 	br	16b34 <__alt_data_end+0xf0016b34>
   16ee0:	0101ffc4 	movi	r4,2047
   16ee4:	113f9a1e 	bne	r2,r4,16d50 <__alt_data_end+0xf0016d50>
   16ee8:	4811883a 	mov	r8,r9
   16eec:	3023883a 	mov	r17,r6
   16ef0:	1021883a 	mov	r16,r2
   16ef4:	3825883a 	mov	r18,r7
   16ef8:	003e9306 	br	16948 <__alt_data_end+0xf0016948>
   16efc:	8000161e 	bne	r16,zero,16f58 <__adddf3+0x68c>
   16f00:	444ab03a 	or	r5,r8,r17
   16f04:	28005126 	beq	r5,zero,1704c <__adddf3+0x780>
   16f08:	0108303a 	nor	r4,zero,r4
   16f0c:	20004d1e 	bne	r4,zero,17044 <__adddf3+0x778>
   16f10:	89a3883a 	add	r17,r17,r6
   16f14:	4253883a 	add	r9,r8,r9
   16f18:	898d803a 	cmpltu	r6,r17,r6
   16f1c:	3251883a 	add	r8,r6,r9
   16f20:	1021883a 	mov	r16,r2
   16f24:	003f0806 	br	16b48 <__alt_data_end+0xf0016b48>
   16f28:	1000301e 	bne	r2,zero,16fec <__adddf3+0x720>
   16f2c:	4984b03a 	or	r2,r9,r6
   16f30:	10007126 	beq	r2,zero,170f8 <__adddf3+0x82c>
   16f34:	4811883a 	mov	r8,r9
   16f38:	3023883a 	mov	r17,r6
   16f3c:	3825883a 	mov	r18,r7
   16f40:	0401ffc4 	movi	r16,2047
   16f44:	003e8006 	br	16948 <__alt_data_end+0xf0016948>
   16f48:	4462b03a 	or	r17,r8,r17
   16f4c:	8822c03a 	cmpne	r17,r17,zero
   16f50:	0007883a 	mov	r3,zero
   16f54:	003f8b06 	br	16d84 <__alt_data_end+0xf0016d84>
   16f58:	0141ffc4 	movi	r5,2047
   16f5c:	11403b26 	beq	r2,r5,1704c <__adddf3+0x780>
   16f60:	0109c83a 	sub	r4,zero,r4
   16f64:	42002034 	orhi	r8,r8,128
   16f68:	01400e04 	movi	r5,56
   16f6c:	29006716 	blt	r5,r4,1710c <__adddf3+0x840>
   16f70:	014007c4 	movi	r5,31
   16f74:	29007016 	blt	r5,r4,17138 <__adddf3+0x86c>
   16f78:	01400804 	movi	r5,32
   16f7c:	290bc83a 	sub	r5,r5,r4
   16f80:	4154983a 	sll	r10,r8,r5
   16f84:	890ed83a 	srl	r7,r17,r4
   16f88:	894a983a 	sll	r5,r17,r5
   16f8c:	4108d83a 	srl	r4,r8,r4
   16f90:	51e2b03a 	or	r17,r10,r7
   16f94:	280ac03a 	cmpne	r5,r5,zero
   16f98:	8962b03a 	or	r17,r17,r5
   16f9c:	89a3883a 	add	r17,r17,r6
   16fa0:	2253883a 	add	r9,r4,r9
   16fa4:	898d803a 	cmpltu	r6,r17,r6
   16fa8:	3251883a 	add	r8,r6,r9
   16fac:	1021883a 	mov	r16,r2
   16fb0:	003ee506 	br	16b48 <__alt_data_end+0xf0016b48>
   16fb4:	4984b03a 	or	r2,r9,r6
   16fb8:	103e6326 	beq	r2,zero,16948 <__alt_data_end+0xf0016948>
   16fbc:	8987c83a 	sub	r3,r17,r6
   16fc0:	88c9803a 	cmpltu	r4,r17,r3
   16fc4:	4245c83a 	sub	r2,r8,r9
   16fc8:	1105c83a 	sub	r2,r2,r4
   16fcc:	1100202c 	andhi	r4,r2,128
   16fd0:	203ebb26 	beq	r4,zero,16ac0 <__alt_data_end+0xf0016ac0>
   16fd4:	3463c83a 	sub	r17,r6,r17
   16fd8:	4a07c83a 	sub	r3,r9,r8
   16fdc:	344d803a 	cmpltu	r6,r6,r17
   16fe0:	1991c83a 	sub	r8,r3,r6
   16fe4:	3825883a 	mov	r18,r7
   16fe8:	003e5706 	br	16948 <__alt_data_end+0xf0016948>
   16fec:	4984b03a 	or	r2,r9,r6
   16ff0:	10002e26 	beq	r2,zero,170ac <__adddf3+0x7e0>
   16ff4:	4004d0fa 	srli	r2,r8,3
   16ff8:	8822d0fa 	srli	r17,r17,3
   16ffc:	4010977a 	slli	r8,r8,29
   17000:	10c0022c 	andhi	r3,r2,8
   17004:	4462b03a 	or	r17,r8,r17
   17008:	18000826 	beq	r3,zero,1702c <__adddf3+0x760>
   1700c:	4808d0fa 	srli	r4,r9,3
   17010:	20c0022c 	andhi	r3,r4,8
   17014:	1800051e 	bne	r3,zero,1702c <__adddf3+0x760>
   17018:	300cd0fa 	srli	r6,r6,3
   1701c:	4806977a 	slli	r3,r9,29
   17020:	2005883a 	mov	r2,r4
   17024:	3825883a 	mov	r18,r7
   17028:	19a2b03a 	or	r17,r3,r6
   1702c:	8810d77a 	srli	r8,r17,29
   17030:	100490fa 	slli	r2,r2,3
   17034:	882290fa 	slli	r17,r17,3
   17038:	0401ffc4 	movi	r16,2047
   1703c:	4090b03a 	or	r8,r8,r2
   17040:	003e4106 	br	16948 <__alt_data_end+0xf0016948>
   17044:	0141ffc4 	movi	r5,2047
   17048:	117fc71e 	bne	r2,r5,16f68 <__alt_data_end+0xf0016f68>
   1704c:	4811883a 	mov	r8,r9
   17050:	3023883a 	mov	r17,r6
   17054:	1021883a 	mov	r16,r2
   17058:	003e3b06 	br	16948 <__alt_data_end+0xf0016948>
   1705c:	10002f26 	beq	r2,zero,1711c <__adddf3+0x850>
   17060:	4984b03a 	or	r2,r9,r6
   17064:	10001126 	beq	r2,zero,170ac <__adddf3+0x7e0>
   17068:	4004d0fa 	srli	r2,r8,3
   1706c:	8822d0fa 	srli	r17,r17,3
   17070:	4010977a 	slli	r8,r8,29
   17074:	10c0022c 	andhi	r3,r2,8
   17078:	4462b03a 	or	r17,r8,r17
   1707c:	183feb26 	beq	r3,zero,1702c <__alt_data_end+0xf001702c>
   17080:	4808d0fa 	srli	r4,r9,3
   17084:	20c0022c 	andhi	r3,r4,8
   17088:	183fe81e 	bne	r3,zero,1702c <__alt_data_end+0xf001702c>
   1708c:	300cd0fa 	srli	r6,r6,3
   17090:	4806977a 	slli	r3,r9,29
   17094:	2005883a 	mov	r2,r4
   17098:	19a2b03a 	or	r17,r3,r6
   1709c:	003fe306 	br	1702c <__alt_data_end+0xf001702c>
   170a0:	0011883a 	mov	r8,zero
   170a4:	0005883a 	mov	r2,zero
   170a8:	003e3f06 	br	169a8 <__alt_data_end+0xf00169a8>
   170ac:	0401ffc4 	movi	r16,2047
   170b0:	003e2506 	br	16948 <__alt_data_end+0xf0016948>
   170b4:	0013883a 	mov	r9,zero
   170b8:	003f8406 	br	16ecc <__alt_data_end+0xf0016ecc>
   170bc:	0005883a 	mov	r2,zero
   170c0:	0007883a 	mov	r3,zero
   170c4:	003e8906 	br	16aec <__alt_data_end+0xf0016aec>
   170c8:	197ff804 	addi	r5,r3,-32
   170cc:	01000804 	movi	r4,32
   170d0:	414ad83a 	srl	r5,r8,r5
   170d4:	19002426 	beq	r3,r4,17168 <__adddf3+0x89c>
   170d8:	01001004 	movi	r4,64
   170dc:	20c7c83a 	sub	r3,r4,r3
   170e0:	40c6983a 	sll	r3,r8,r3
   170e4:	1c46b03a 	or	r3,r3,r17
   170e8:	1806c03a 	cmpne	r3,r3,zero
   170ec:	28e2b03a 	or	r17,r5,r3
   170f0:	0007883a 	mov	r3,zero
   170f4:	003f2306 	br	16d84 <__alt_data_end+0xf0016d84>
   170f8:	0007883a 	mov	r3,zero
   170fc:	5811883a 	mov	r8,r11
   17100:	00bfffc4 	movi	r2,-1
   17104:	0401ffc4 	movi	r16,2047
   17108:	003e7806 	br	16aec <__alt_data_end+0xf0016aec>
   1710c:	4462b03a 	or	r17,r8,r17
   17110:	8822c03a 	cmpne	r17,r17,zero
   17114:	0009883a 	mov	r4,zero
   17118:	003fa006 	br	16f9c <__alt_data_end+0xf0016f9c>
   1711c:	4811883a 	mov	r8,r9
   17120:	3023883a 	mov	r17,r6
   17124:	0401ffc4 	movi	r16,2047
   17128:	003e0706 	br	16948 <__alt_data_end+0xf0016948>
   1712c:	4811883a 	mov	r8,r9
   17130:	3023883a 	mov	r17,r6
   17134:	003e0406 	br	16948 <__alt_data_end+0xf0016948>
   17138:	21fff804 	addi	r7,r4,-32
   1713c:	01400804 	movi	r5,32
   17140:	41ced83a 	srl	r7,r8,r7
   17144:	21400a26 	beq	r4,r5,17170 <__adddf3+0x8a4>
   17148:	01401004 	movi	r5,64
   1714c:	2909c83a 	sub	r4,r5,r4
   17150:	4108983a 	sll	r4,r8,r4
   17154:	2448b03a 	or	r4,r4,r17
   17158:	2008c03a 	cmpne	r4,r4,zero
   1715c:	3922b03a 	or	r17,r7,r4
   17160:	0009883a 	mov	r4,zero
   17164:	003f8d06 	br	16f9c <__alt_data_end+0xf0016f9c>
   17168:	0007883a 	mov	r3,zero
   1716c:	003fdd06 	br	170e4 <__alt_data_end+0xf00170e4>
   17170:	0009883a 	mov	r4,zero
   17174:	003ff706 	br	17154 <__alt_data_end+0xf0017154>

00017178 <__eqdf2>:
   17178:	2804d53a 	srli	r2,r5,20
   1717c:	3806d53a 	srli	r3,r7,20
   17180:	02000434 	movhi	r8,16
   17184:	423fffc4 	addi	r8,r8,-1
   17188:	1081ffcc 	andi	r2,r2,2047
   1718c:	0281ffc4 	movi	r10,2047
   17190:	2a12703a 	and	r9,r5,r8
   17194:	18c1ffcc 	andi	r3,r3,2047
   17198:	3a10703a 	and	r8,r7,r8
   1719c:	280ad7fa 	srli	r5,r5,31
   171a0:	380ed7fa 	srli	r7,r7,31
   171a4:	12801026 	beq	r2,r10,171e8 <__eqdf2+0x70>
   171a8:	0281ffc4 	movi	r10,2047
   171ac:	1a800a26 	beq	r3,r10,171d8 <__eqdf2+0x60>
   171b0:	10c00226 	beq	r2,r3,171bc <__eqdf2+0x44>
   171b4:	00800044 	movi	r2,1
   171b8:	f800283a 	ret
   171bc:	4a3ffd1e 	bne	r9,r8,171b4 <__alt_data_end+0xf00171b4>
   171c0:	21bffc1e 	bne	r4,r6,171b4 <__alt_data_end+0xf00171b4>
   171c4:	29c00c26 	beq	r5,r7,171f8 <__eqdf2+0x80>
   171c8:	103ffa1e 	bne	r2,zero,171b4 <__alt_data_end+0xf00171b4>
   171cc:	2244b03a 	or	r2,r4,r9
   171d0:	1004c03a 	cmpne	r2,r2,zero
   171d4:	f800283a 	ret
   171d8:	3214b03a 	or	r10,r6,r8
   171dc:	503ff426 	beq	r10,zero,171b0 <__alt_data_end+0xf00171b0>
   171e0:	00800044 	movi	r2,1
   171e4:	f800283a 	ret
   171e8:	2254b03a 	or	r10,r4,r9
   171ec:	503fee26 	beq	r10,zero,171a8 <__alt_data_end+0xf00171a8>
   171f0:	00800044 	movi	r2,1
   171f4:	f800283a 	ret
   171f8:	0005883a 	mov	r2,zero
   171fc:	f800283a 	ret

00017200 <__ledf2>:
   17200:	2804d53a 	srli	r2,r5,20
   17204:	3810d53a 	srli	r8,r7,20
   17208:	00c00434 	movhi	r3,16
   1720c:	18ffffc4 	addi	r3,r3,-1
   17210:	1081ffcc 	andi	r2,r2,2047
   17214:	0241ffc4 	movi	r9,2047
   17218:	28d4703a 	and	r10,r5,r3
   1721c:	4201ffcc 	andi	r8,r8,2047
   17220:	38c6703a 	and	r3,r7,r3
   17224:	280ad7fa 	srli	r5,r5,31
   17228:	380ed7fa 	srli	r7,r7,31
   1722c:	12401f26 	beq	r2,r9,172ac <__ledf2+0xac>
   17230:	0241ffc4 	movi	r9,2047
   17234:	42401426 	beq	r8,r9,17288 <__ledf2+0x88>
   17238:	1000091e 	bne	r2,zero,17260 <__ledf2+0x60>
   1723c:	2296b03a 	or	r11,r4,r10
   17240:	5813003a 	cmpeq	r9,r11,zero
   17244:	29403fcc 	andi	r5,r5,255
   17248:	40000a1e 	bne	r8,zero,17274 <__ledf2+0x74>
   1724c:	30d8b03a 	or	r12,r6,r3
   17250:	6000081e 	bne	r12,zero,17274 <__ledf2+0x74>
   17254:	0005883a 	mov	r2,zero
   17258:	5800111e 	bne	r11,zero,172a0 <__ledf2+0xa0>
   1725c:	f800283a 	ret
   17260:	29403fcc 	andi	r5,r5,255
   17264:	40000c1e 	bne	r8,zero,17298 <__ledf2+0x98>
   17268:	30d2b03a 	or	r9,r6,r3
   1726c:	48000c26 	beq	r9,zero,172a0 <__ledf2+0xa0>
   17270:	0013883a 	mov	r9,zero
   17274:	39c03fcc 	andi	r7,r7,255
   17278:	48000826 	beq	r9,zero,1729c <__ledf2+0x9c>
   1727c:	38001126 	beq	r7,zero,172c4 <__ledf2+0xc4>
   17280:	00800044 	movi	r2,1
   17284:	f800283a 	ret
   17288:	30d2b03a 	or	r9,r6,r3
   1728c:	483fea26 	beq	r9,zero,17238 <__alt_data_end+0xf0017238>
   17290:	00800084 	movi	r2,2
   17294:	f800283a 	ret
   17298:	39c03fcc 	andi	r7,r7,255
   1729c:	39400726 	beq	r7,r5,172bc <__ledf2+0xbc>
   172a0:	2800081e 	bne	r5,zero,172c4 <__ledf2+0xc4>
   172a4:	00800044 	movi	r2,1
   172a8:	f800283a 	ret
   172ac:	2292b03a 	or	r9,r4,r10
   172b0:	483fdf26 	beq	r9,zero,17230 <__alt_data_end+0xf0017230>
   172b4:	00800084 	movi	r2,2
   172b8:	f800283a 	ret
   172bc:	4080030e 	bge	r8,r2,172cc <__ledf2+0xcc>
   172c0:	383fef26 	beq	r7,zero,17280 <__alt_data_end+0xf0017280>
   172c4:	00bfffc4 	movi	r2,-1
   172c8:	f800283a 	ret
   172cc:	123feb16 	blt	r2,r8,1727c <__alt_data_end+0xf001727c>
   172d0:	1abff336 	bltu	r3,r10,172a0 <__alt_data_end+0xf00172a0>
   172d4:	50c00326 	beq	r10,r3,172e4 <__ledf2+0xe4>
   172d8:	50c0042e 	bgeu	r10,r3,172ec <__ledf2+0xec>
   172dc:	283fe81e 	bne	r5,zero,17280 <__alt_data_end+0xf0017280>
   172e0:	003ff806 	br	172c4 <__alt_data_end+0xf00172c4>
   172e4:	313fee36 	bltu	r6,r4,172a0 <__alt_data_end+0xf00172a0>
   172e8:	21bffc36 	bltu	r4,r6,172dc <__alt_data_end+0xf00172dc>
   172ec:	0005883a 	mov	r2,zero
   172f0:	f800283a 	ret

000172f4 <__floatunsidf>:
   172f4:	defffe04 	addi	sp,sp,-8
   172f8:	dc000015 	stw	r16,0(sp)
   172fc:	dfc00115 	stw	ra,4(sp)
   17300:	2021883a 	mov	r16,r4
   17304:	20002226 	beq	r4,zero,17390 <__floatunsidf+0x9c>
   17308:	0008e8c0 	call	8e8c <__clzsi2>
   1730c:	01010784 	movi	r4,1054
   17310:	2089c83a 	sub	r4,r4,r2
   17314:	01810cc4 	movi	r6,1075
   17318:	310dc83a 	sub	r6,r6,r4
   1731c:	00c007c4 	movi	r3,31
   17320:	1980120e 	bge	r3,r6,1736c <__floatunsidf+0x78>
   17324:	00c104c4 	movi	r3,1043
   17328:	1907c83a 	sub	r3,r3,r4
   1732c:	80ca983a 	sll	r5,r16,r3
   17330:	00800434 	movhi	r2,16
   17334:	10bfffc4 	addi	r2,r2,-1
   17338:	2101ffcc 	andi	r4,r4,2047
   1733c:	0021883a 	mov	r16,zero
   17340:	288a703a 	and	r5,r5,r2
   17344:	2008953a 	slli	r4,r4,20
   17348:	00c00434 	movhi	r3,16
   1734c:	18ffffc4 	addi	r3,r3,-1
   17350:	28c6703a 	and	r3,r5,r3
   17354:	8005883a 	mov	r2,r16
   17358:	1906b03a 	or	r3,r3,r4
   1735c:	dfc00117 	ldw	ra,4(sp)
   17360:	dc000017 	ldw	r16,0(sp)
   17364:	dec00204 	addi	sp,sp,8
   17368:	f800283a 	ret
   1736c:	00c002c4 	movi	r3,11
   17370:	188bc83a 	sub	r5,r3,r2
   17374:	814ad83a 	srl	r5,r16,r5
   17378:	00c00434 	movhi	r3,16
   1737c:	18ffffc4 	addi	r3,r3,-1
   17380:	81a0983a 	sll	r16,r16,r6
   17384:	2101ffcc 	andi	r4,r4,2047
   17388:	28ca703a 	and	r5,r5,r3
   1738c:	003fed06 	br	17344 <__alt_data_end+0xf0017344>
   17390:	0009883a 	mov	r4,zero
   17394:	000b883a 	mov	r5,zero
   17398:	003fea06 	br	17344 <__alt_data_end+0xf0017344>

0001739c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1739c:	defffe04 	addi	sp,sp,-8
   173a0:	dfc00115 	stw	ra,4(sp)
   173a4:	df000015 	stw	fp,0(sp)
   173a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   173ac:	d0a00f97 	ldw	r2,-32706(gp)
   173b0:	10000326 	beq	r2,zero,173c0 <alt_get_errno+0x24>
   173b4:	d0a00f97 	ldw	r2,-32706(gp)
   173b8:	103ee83a 	callr	r2
   173bc:	00000106 	br	173c4 <alt_get_errno+0x28>
   173c0:	d0a04f84 	addi	r2,gp,-32450
}
   173c4:	e037883a 	mov	sp,fp
   173c8:	dfc00117 	ldw	ra,4(sp)
   173cc:	df000017 	ldw	fp,0(sp)
   173d0:	dec00204 	addi	sp,sp,8
   173d4:	f800283a 	ret

000173d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   173d8:	defffb04 	addi	sp,sp,-20
   173dc:	dfc00415 	stw	ra,16(sp)
   173e0:	df000315 	stw	fp,12(sp)
   173e4:	df000304 	addi	fp,sp,12
   173e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   173ec:	e0bfff17 	ldw	r2,-4(fp)
   173f0:	10000616 	blt	r2,zero,1740c <close+0x34>
   173f4:	e0bfff17 	ldw	r2,-4(fp)
   173f8:	10c00324 	muli	r3,r2,12
   173fc:	00820034 	movhi	r2,2048
   17400:	1084ed04 	addi	r2,r2,5044
   17404:	1885883a 	add	r2,r3,r2
   17408:	00000106 	br	17410 <close+0x38>
   1740c:	0005883a 	mov	r2,zero
   17410:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   17414:	e0bffd17 	ldw	r2,-12(fp)
   17418:	10001926 	beq	r2,zero,17480 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1741c:	e0bffd17 	ldw	r2,-12(fp)
   17420:	10800017 	ldw	r2,0(r2)
   17424:	10800417 	ldw	r2,16(r2)
   17428:	10000626 	beq	r2,zero,17444 <close+0x6c>
   1742c:	e0bffd17 	ldw	r2,-12(fp)
   17430:	10800017 	ldw	r2,0(r2)
   17434:	10800417 	ldw	r2,16(r2)
   17438:	e13ffd17 	ldw	r4,-12(fp)
   1743c:	103ee83a 	callr	r2
   17440:	00000106 	br	17448 <close+0x70>
   17444:	0005883a 	mov	r2,zero
   17448:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1744c:	e13fff17 	ldw	r4,-4(fp)
   17450:	00179ac0 	call	179ac <alt_release_fd>
    if (rval < 0)
   17454:	e0bffe17 	ldw	r2,-8(fp)
   17458:	1000070e 	bge	r2,zero,17478 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1745c:	001739c0 	call	1739c <alt_get_errno>
   17460:	1007883a 	mov	r3,r2
   17464:	e0bffe17 	ldw	r2,-8(fp)
   17468:	0085c83a 	sub	r2,zero,r2
   1746c:	18800015 	stw	r2,0(r3)
      return -1;
   17470:	00bfffc4 	movi	r2,-1
   17474:	00000706 	br	17494 <close+0xbc>
    }
    return 0;
   17478:	0005883a 	mov	r2,zero
   1747c:	00000506 	br	17494 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17480:	001739c0 	call	1739c <alt_get_errno>
   17484:	1007883a 	mov	r3,r2
   17488:	00801444 	movi	r2,81
   1748c:	18800015 	stw	r2,0(r3)
    return -1;
   17490:	00bfffc4 	movi	r2,-1
  }
}
   17494:	e037883a 	mov	sp,fp
   17498:	dfc00117 	ldw	ra,4(sp)
   1749c:	df000017 	ldw	fp,0(sp)
   174a0:	dec00204 	addi	sp,sp,8
   174a4:	f800283a 	ret

000174a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   174a8:	defffc04 	addi	sp,sp,-16
   174ac:	df000315 	stw	fp,12(sp)
   174b0:	df000304 	addi	fp,sp,12
   174b4:	e13ffd15 	stw	r4,-12(fp)
   174b8:	e17ffe15 	stw	r5,-8(fp)
   174bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   174c0:	e0bfff17 	ldw	r2,-4(fp)
}
   174c4:	e037883a 	mov	sp,fp
   174c8:	df000017 	ldw	fp,0(sp)
   174cc:	dec00104 	addi	sp,sp,4
   174d0:	f800283a 	ret

000174d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   174d4:	defffe04 	addi	sp,sp,-8
   174d8:	dfc00115 	stw	ra,4(sp)
   174dc:	df000015 	stw	fp,0(sp)
   174e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   174e4:	d0a00f97 	ldw	r2,-32706(gp)
   174e8:	10000326 	beq	r2,zero,174f8 <alt_get_errno+0x24>
   174ec:	d0a00f97 	ldw	r2,-32706(gp)
   174f0:	103ee83a 	callr	r2
   174f4:	00000106 	br	174fc <alt_get_errno+0x28>
   174f8:	d0a04f84 	addi	r2,gp,-32450
}
   174fc:	e037883a 	mov	sp,fp
   17500:	dfc00117 	ldw	ra,4(sp)
   17504:	df000017 	ldw	fp,0(sp)
   17508:	dec00204 	addi	sp,sp,8
   1750c:	f800283a 	ret

00017510 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   17510:	defffb04 	addi	sp,sp,-20
   17514:	dfc00415 	stw	ra,16(sp)
   17518:	df000315 	stw	fp,12(sp)
   1751c:	df000304 	addi	fp,sp,12
   17520:	e13ffe15 	stw	r4,-8(fp)
   17524:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17528:	e0bffe17 	ldw	r2,-8(fp)
   1752c:	10000616 	blt	r2,zero,17548 <fstat+0x38>
   17530:	e0bffe17 	ldw	r2,-8(fp)
   17534:	10c00324 	muli	r3,r2,12
   17538:	00820034 	movhi	r2,2048
   1753c:	1084ed04 	addi	r2,r2,5044
   17540:	1885883a 	add	r2,r3,r2
   17544:	00000106 	br	1754c <fstat+0x3c>
   17548:	0005883a 	mov	r2,zero
   1754c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   17550:	e0bffd17 	ldw	r2,-12(fp)
   17554:	10001026 	beq	r2,zero,17598 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   17558:	e0bffd17 	ldw	r2,-12(fp)
   1755c:	10800017 	ldw	r2,0(r2)
   17560:	10800817 	ldw	r2,32(r2)
   17564:	10000726 	beq	r2,zero,17584 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   17568:	e0bffd17 	ldw	r2,-12(fp)
   1756c:	10800017 	ldw	r2,0(r2)
   17570:	10800817 	ldw	r2,32(r2)
   17574:	e17fff17 	ldw	r5,-4(fp)
   17578:	e13ffd17 	ldw	r4,-12(fp)
   1757c:	103ee83a 	callr	r2
   17580:	00000a06 	br	175ac <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   17584:	e0bfff17 	ldw	r2,-4(fp)
   17588:	00c80004 	movi	r3,8192
   1758c:	10c00115 	stw	r3,4(r2)
      return 0;
   17590:	0005883a 	mov	r2,zero
   17594:	00000506 	br	175ac <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17598:	00174d40 	call	174d4 <alt_get_errno>
   1759c:	1007883a 	mov	r3,r2
   175a0:	00801444 	movi	r2,81
   175a4:	18800015 	stw	r2,0(r3)
    return -1;
   175a8:	00bfffc4 	movi	r2,-1
  }
}
   175ac:	e037883a 	mov	sp,fp
   175b0:	dfc00117 	ldw	ra,4(sp)
   175b4:	df000017 	ldw	fp,0(sp)
   175b8:	dec00204 	addi	sp,sp,8
   175bc:	f800283a 	ret

000175c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   175c0:	defffe04 	addi	sp,sp,-8
   175c4:	dfc00115 	stw	ra,4(sp)
   175c8:	df000015 	stw	fp,0(sp)
   175cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   175d0:	d0a00f97 	ldw	r2,-32706(gp)
   175d4:	10000326 	beq	r2,zero,175e4 <alt_get_errno+0x24>
   175d8:	d0a00f97 	ldw	r2,-32706(gp)
   175dc:	103ee83a 	callr	r2
   175e0:	00000106 	br	175e8 <alt_get_errno+0x28>
   175e4:	d0a04f84 	addi	r2,gp,-32450
}
   175e8:	e037883a 	mov	sp,fp
   175ec:	dfc00117 	ldw	ra,4(sp)
   175f0:	df000017 	ldw	fp,0(sp)
   175f4:	dec00204 	addi	sp,sp,8
   175f8:	f800283a 	ret

000175fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   175fc:	deffed04 	addi	sp,sp,-76
   17600:	dfc01215 	stw	ra,72(sp)
   17604:	df001115 	stw	fp,68(sp)
   17608:	df001104 	addi	fp,sp,68
   1760c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17610:	e0bfff17 	ldw	r2,-4(fp)
   17614:	10000616 	blt	r2,zero,17630 <isatty+0x34>
   17618:	e0bfff17 	ldw	r2,-4(fp)
   1761c:	10c00324 	muli	r3,r2,12
   17620:	00820034 	movhi	r2,2048
   17624:	1084ed04 	addi	r2,r2,5044
   17628:	1885883a 	add	r2,r3,r2
   1762c:	00000106 	br	17634 <isatty+0x38>
   17630:	0005883a 	mov	r2,zero
   17634:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   17638:	e0bfef17 	ldw	r2,-68(fp)
   1763c:	10000e26 	beq	r2,zero,17678 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   17640:	e0bfef17 	ldw	r2,-68(fp)
   17644:	10800017 	ldw	r2,0(r2)
   17648:	10800817 	ldw	r2,32(r2)
   1764c:	1000021e 	bne	r2,zero,17658 <isatty+0x5c>
    {
      return 1;
   17650:	00800044 	movi	r2,1
   17654:	00000d06 	br	1768c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   17658:	e0bff004 	addi	r2,fp,-64
   1765c:	100b883a 	mov	r5,r2
   17660:	e13fff17 	ldw	r4,-4(fp)
   17664:	00175100 	call	17510 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   17668:	e0bff117 	ldw	r2,-60(fp)
   1766c:	10880020 	cmpeqi	r2,r2,8192
   17670:	10803fcc 	andi	r2,r2,255
   17674:	00000506 	br	1768c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17678:	00175c00 	call	175c0 <alt_get_errno>
   1767c:	1007883a 	mov	r3,r2
   17680:	00801444 	movi	r2,81
   17684:	18800015 	stw	r2,0(r3)
    return 0;
   17688:	0005883a 	mov	r2,zero
  }
}
   1768c:	e037883a 	mov	sp,fp
   17690:	dfc00117 	ldw	ra,4(sp)
   17694:	df000017 	ldw	fp,0(sp)
   17698:	dec00204 	addi	sp,sp,8
   1769c:	f800283a 	ret

000176a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   176a0:	defffe04 	addi	sp,sp,-8
   176a4:	dfc00115 	stw	ra,4(sp)
   176a8:	df000015 	stw	fp,0(sp)
   176ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   176b0:	d0a00f97 	ldw	r2,-32706(gp)
   176b4:	10000326 	beq	r2,zero,176c4 <alt_get_errno+0x24>
   176b8:	d0a00f97 	ldw	r2,-32706(gp)
   176bc:	103ee83a 	callr	r2
   176c0:	00000106 	br	176c8 <alt_get_errno+0x28>
   176c4:	d0a04f84 	addi	r2,gp,-32450
}
   176c8:	e037883a 	mov	sp,fp
   176cc:	dfc00117 	ldw	ra,4(sp)
   176d0:	df000017 	ldw	fp,0(sp)
   176d4:	dec00204 	addi	sp,sp,8
   176d8:	f800283a 	ret

000176dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   176dc:	defff904 	addi	sp,sp,-28
   176e0:	dfc00615 	stw	ra,24(sp)
   176e4:	df000515 	stw	fp,20(sp)
   176e8:	df000504 	addi	fp,sp,20
   176ec:	e13ffd15 	stw	r4,-12(fp)
   176f0:	e17ffe15 	stw	r5,-8(fp)
   176f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   176f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   176fc:	e0bffd17 	ldw	r2,-12(fp)
   17700:	10000616 	blt	r2,zero,1771c <lseek+0x40>
   17704:	e0bffd17 	ldw	r2,-12(fp)
   17708:	10c00324 	muli	r3,r2,12
   1770c:	00820034 	movhi	r2,2048
   17710:	1084ed04 	addi	r2,r2,5044
   17714:	1885883a 	add	r2,r3,r2
   17718:	00000106 	br	17720 <lseek+0x44>
   1771c:	0005883a 	mov	r2,zero
   17720:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   17724:	e0bffc17 	ldw	r2,-16(fp)
   17728:	10001026 	beq	r2,zero,1776c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1772c:	e0bffc17 	ldw	r2,-16(fp)
   17730:	10800017 	ldw	r2,0(r2)
   17734:	10800717 	ldw	r2,28(r2)
   17738:	10000926 	beq	r2,zero,17760 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1773c:	e0bffc17 	ldw	r2,-16(fp)
   17740:	10800017 	ldw	r2,0(r2)
   17744:	10800717 	ldw	r2,28(r2)
   17748:	e1bfff17 	ldw	r6,-4(fp)
   1774c:	e17ffe17 	ldw	r5,-8(fp)
   17750:	e13ffc17 	ldw	r4,-16(fp)
   17754:	103ee83a 	callr	r2
   17758:	e0bffb15 	stw	r2,-20(fp)
   1775c:	00000506 	br	17774 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   17760:	00bfde84 	movi	r2,-134
   17764:	e0bffb15 	stw	r2,-20(fp)
   17768:	00000206 	br	17774 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1776c:	00bfebc4 	movi	r2,-81
   17770:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   17774:	e0bffb17 	ldw	r2,-20(fp)
   17778:	1000070e 	bge	r2,zero,17798 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1777c:	00176a00 	call	176a0 <alt_get_errno>
   17780:	1007883a 	mov	r3,r2
   17784:	e0bffb17 	ldw	r2,-20(fp)
   17788:	0085c83a 	sub	r2,zero,r2
   1778c:	18800015 	stw	r2,0(r3)
    rc = -1;
   17790:	00bfffc4 	movi	r2,-1
   17794:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   17798:	e0bffb17 	ldw	r2,-20(fp)
}
   1779c:	e037883a 	mov	sp,fp
   177a0:	dfc00117 	ldw	ra,4(sp)
   177a4:	df000017 	ldw	fp,0(sp)
   177a8:	dec00204 	addi	sp,sp,8
   177ac:	f800283a 	ret

000177b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   177b0:	defffd04 	addi	sp,sp,-12
   177b4:	dfc00215 	stw	ra,8(sp)
   177b8:	df000115 	stw	fp,4(sp)
   177bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   177c0:	0009883a 	mov	r4,zero
   177c4:	0017c280 	call	17c28 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   177c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   177cc:	0017c600 	call	17c60 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   177d0:	01820034 	movhi	r6,2048
   177d4:	31815404 	addi	r6,r6,1360
   177d8:	01420034 	movhi	r5,2048
   177dc:	29415404 	addi	r5,r5,1360
   177e0:	01020034 	movhi	r4,2048
   177e4:	21015404 	addi	r4,r4,1360
   177e8:	001e3040 	call	1e304 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   177ec:	001e0340 	call	1e034 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   177f0:	010000b4 	movhi	r4,2
   177f4:	21382504 	addi	r4,r4,-8044
   177f8:	001f35c0 	call	1f35c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   177fc:	d0a05197 	ldw	r2,-32442(gp)
   17800:	d0e05297 	ldw	r3,-32438(gp)
   17804:	d1205397 	ldw	r4,-32434(gp)
   17808:	200d883a 	mov	r6,r4
   1780c:	180b883a 	mov	r5,r3
   17810:	1009883a 	mov	r4,r2
   17814:	00052780 	call	5278 <main>
   17818:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1781c:	01000044 	movi	r4,1
   17820:	00173d80 	call	173d8 <close>
  exit (result);
   17824:	e13fff17 	ldw	r4,-4(fp)
   17828:	001f3700 	call	1f370 <exit>

0001782c <__malloc_lock>:
   1782c:	defffe04 	addi	sp,sp,-8
   17830:	df000115 	stw	fp,4(sp)
   17834:	df000104 	addi	fp,sp,4
   17838:	e13fff15 	stw	r4,-4(fp)
   1783c:	0001883a 	nop
   17840:	e037883a 	mov	sp,fp
   17844:	df000017 	ldw	fp,0(sp)
   17848:	dec00104 	addi	sp,sp,4
   1784c:	f800283a 	ret

00017850 <__malloc_unlock>:
   17850:	defffe04 	addi	sp,sp,-8
   17854:	df000115 	stw	fp,4(sp)
   17858:	df000104 	addi	fp,sp,4
   1785c:	e13fff15 	stw	r4,-4(fp)
   17860:	0001883a 	nop
   17864:	e037883a 	mov	sp,fp
   17868:	df000017 	ldw	fp,0(sp)
   1786c:	dec00104 	addi	sp,sp,4
   17870:	f800283a 	ret

00017874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17874:	defffe04 	addi	sp,sp,-8
   17878:	dfc00115 	stw	ra,4(sp)
   1787c:	df000015 	stw	fp,0(sp)
   17880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17884:	d0a00f97 	ldw	r2,-32706(gp)
   17888:	10000326 	beq	r2,zero,17898 <alt_get_errno+0x24>
   1788c:	d0a00f97 	ldw	r2,-32706(gp)
   17890:	103ee83a 	callr	r2
   17894:	00000106 	br	1789c <alt_get_errno+0x28>
   17898:	d0a04f84 	addi	r2,gp,-32450
}
   1789c:	e037883a 	mov	sp,fp
   178a0:	dfc00117 	ldw	ra,4(sp)
   178a4:	df000017 	ldw	fp,0(sp)
   178a8:	dec00204 	addi	sp,sp,8
   178ac:	f800283a 	ret

000178b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   178b0:	defff904 	addi	sp,sp,-28
   178b4:	dfc00615 	stw	ra,24(sp)
   178b8:	df000515 	stw	fp,20(sp)
   178bc:	df000504 	addi	fp,sp,20
   178c0:	e13ffd15 	stw	r4,-12(fp)
   178c4:	e17ffe15 	stw	r5,-8(fp)
   178c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   178cc:	e0bffd17 	ldw	r2,-12(fp)
   178d0:	10000616 	blt	r2,zero,178ec <read+0x3c>
   178d4:	e0bffd17 	ldw	r2,-12(fp)
   178d8:	10c00324 	muli	r3,r2,12
   178dc:	00820034 	movhi	r2,2048
   178e0:	1084ed04 	addi	r2,r2,5044
   178e4:	1885883a 	add	r2,r3,r2
   178e8:	00000106 	br	178f0 <read+0x40>
   178ec:	0005883a 	mov	r2,zero
   178f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   178f4:	e0bffb17 	ldw	r2,-20(fp)
   178f8:	10002226 	beq	r2,zero,17984 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   178fc:	e0bffb17 	ldw	r2,-20(fp)
   17900:	10800217 	ldw	r2,8(r2)
   17904:	108000cc 	andi	r2,r2,3
   17908:	10800060 	cmpeqi	r2,r2,1
   1790c:	1000181e 	bne	r2,zero,17970 <read+0xc0>
        (fd->dev->read))
   17910:	e0bffb17 	ldw	r2,-20(fp)
   17914:	10800017 	ldw	r2,0(r2)
   17918:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1791c:	10001426 	beq	r2,zero,17970 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   17920:	e0bffb17 	ldw	r2,-20(fp)
   17924:	10800017 	ldw	r2,0(r2)
   17928:	10800517 	ldw	r2,20(r2)
   1792c:	e0ffff17 	ldw	r3,-4(fp)
   17930:	180d883a 	mov	r6,r3
   17934:	e17ffe17 	ldw	r5,-8(fp)
   17938:	e13ffb17 	ldw	r4,-20(fp)
   1793c:	103ee83a 	callr	r2
   17940:	e0bffc15 	stw	r2,-16(fp)
   17944:	e0bffc17 	ldw	r2,-16(fp)
   17948:	1000070e 	bge	r2,zero,17968 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1794c:	00178740 	call	17874 <alt_get_errno>
   17950:	1007883a 	mov	r3,r2
   17954:	e0bffc17 	ldw	r2,-16(fp)
   17958:	0085c83a 	sub	r2,zero,r2
   1795c:	18800015 	stw	r2,0(r3)
          return -1;
   17960:	00bfffc4 	movi	r2,-1
   17964:	00000c06 	br	17998 <read+0xe8>
        }
        return rval;
   17968:	e0bffc17 	ldw	r2,-16(fp)
   1796c:	00000a06 	br	17998 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   17970:	00178740 	call	17874 <alt_get_errno>
   17974:	1007883a 	mov	r3,r2
   17978:	00800344 	movi	r2,13
   1797c:	18800015 	stw	r2,0(r3)
   17980:	00000406 	br	17994 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   17984:	00178740 	call	17874 <alt_get_errno>
   17988:	1007883a 	mov	r3,r2
   1798c:	00801444 	movi	r2,81
   17990:	18800015 	stw	r2,0(r3)
  }
  return -1;
   17994:	00bfffc4 	movi	r2,-1
}
   17998:	e037883a 	mov	sp,fp
   1799c:	dfc00117 	ldw	ra,4(sp)
   179a0:	df000017 	ldw	fp,0(sp)
   179a4:	dec00204 	addi	sp,sp,8
   179a8:	f800283a 	ret

000179ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   179ac:	defffe04 	addi	sp,sp,-8
   179b0:	df000115 	stw	fp,4(sp)
   179b4:	df000104 	addi	fp,sp,4
   179b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   179bc:	e0bfff17 	ldw	r2,-4(fp)
   179c0:	108000d0 	cmplti	r2,r2,3
   179c4:	10000d1e 	bne	r2,zero,179fc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   179c8:	00820034 	movhi	r2,2048
   179cc:	1084ed04 	addi	r2,r2,5044
   179d0:	e0ffff17 	ldw	r3,-4(fp)
   179d4:	18c00324 	muli	r3,r3,12
   179d8:	10c5883a 	add	r2,r2,r3
   179dc:	10800204 	addi	r2,r2,8
   179e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   179e4:	00820034 	movhi	r2,2048
   179e8:	1084ed04 	addi	r2,r2,5044
   179ec:	e0ffff17 	ldw	r3,-4(fp)
   179f0:	18c00324 	muli	r3,r3,12
   179f4:	10c5883a 	add	r2,r2,r3
   179f8:	10000015 	stw	zero,0(r2)
  }
}
   179fc:	0001883a 	nop
   17a00:	e037883a 	mov	sp,fp
   17a04:	df000017 	ldw	fp,0(sp)
   17a08:	dec00104 	addi	sp,sp,4
   17a0c:	f800283a 	ret

00017a10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   17a10:	defff904 	addi	sp,sp,-28
   17a14:	df000615 	stw	fp,24(sp)
   17a18:	df000604 	addi	fp,sp,24
   17a1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a20:	0005303a 	rdctl	r2,status
   17a24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a28:	e0fffe17 	ldw	r3,-8(fp)
   17a2c:	00bfff84 	movi	r2,-2
   17a30:	1884703a 	and	r2,r3,r2
   17a34:	1001703a 	wrctl	status,r2
  
  return context;
   17a38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   17a3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   17a40:	d0a01197 	ldw	r2,-32698(gp)
   17a44:	10c000c4 	addi	r3,r2,3
   17a48:	00bfff04 	movi	r2,-4
   17a4c:	1884703a 	and	r2,r3,r2
   17a50:	d0a01195 	stw	r2,-32698(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   17a54:	d0e01197 	ldw	r3,-32698(gp)
   17a58:	e0bfff17 	ldw	r2,-4(fp)
   17a5c:	1887883a 	add	r3,r3,r2
   17a60:	00840034 	movhi	r2,4096
   17a64:	10800004 	addi	r2,r2,0
   17a68:	10c0062e 	bgeu	r2,r3,17a84 <sbrk+0x74>
   17a6c:	e0bffb17 	ldw	r2,-20(fp)
   17a70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a74:	e0bffa17 	ldw	r2,-24(fp)
   17a78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   17a7c:	00bfffc4 	movi	r2,-1
   17a80:	00000b06 	br	17ab0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   17a84:	d0a01197 	ldw	r2,-32698(gp)
   17a88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   17a8c:	d0e01197 	ldw	r3,-32698(gp)
   17a90:	e0bfff17 	ldw	r2,-4(fp)
   17a94:	1885883a 	add	r2,r3,r2
   17a98:	d0a01195 	stw	r2,-32698(gp)
   17a9c:	e0bffb17 	ldw	r2,-20(fp)
   17aa0:	e0bffc15 	stw	r2,-16(fp)
   17aa4:	e0bffc17 	ldw	r2,-16(fp)
   17aa8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   17aac:	e0bffd17 	ldw	r2,-12(fp)
} 
   17ab0:	e037883a 	mov	sp,fp
   17ab4:	df000017 	ldw	fp,0(sp)
   17ab8:	dec00104 	addi	sp,sp,4
   17abc:	f800283a 	ret

00017ac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17ac0:	defffe04 	addi	sp,sp,-8
   17ac4:	dfc00115 	stw	ra,4(sp)
   17ac8:	df000015 	stw	fp,0(sp)
   17acc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17ad0:	d0a00f97 	ldw	r2,-32706(gp)
   17ad4:	10000326 	beq	r2,zero,17ae4 <alt_get_errno+0x24>
   17ad8:	d0a00f97 	ldw	r2,-32706(gp)
   17adc:	103ee83a 	callr	r2
   17ae0:	00000106 	br	17ae8 <alt_get_errno+0x28>
   17ae4:	d0a04f84 	addi	r2,gp,-32450
}
   17ae8:	e037883a 	mov	sp,fp
   17aec:	dfc00117 	ldw	ra,4(sp)
   17af0:	df000017 	ldw	fp,0(sp)
   17af4:	dec00204 	addi	sp,sp,8
   17af8:	f800283a 	ret

00017afc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   17afc:	defff904 	addi	sp,sp,-28
   17b00:	dfc00615 	stw	ra,24(sp)
   17b04:	df000515 	stw	fp,20(sp)
   17b08:	df000504 	addi	fp,sp,20
   17b0c:	e13ffd15 	stw	r4,-12(fp)
   17b10:	e17ffe15 	stw	r5,-8(fp)
   17b14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17b18:	e0bffd17 	ldw	r2,-12(fp)
   17b1c:	10000616 	blt	r2,zero,17b38 <write+0x3c>
   17b20:	e0bffd17 	ldw	r2,-12(fp)
   17b24:	10c00324 	muli	r3,r2,12
   17b28:	00820034 	movhi	r2,2048
   17b2c:	1084ed04 	addi	r2,r2,5044
   17b30:	1885883a 	add	r2,r3,r2
   17b34:	00000106 	br	17b3c <write+0x40>
   17b38:	0005883a 	mov	r2,zero
   17b3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   17b40:	e0bffb17 	ldw	r2,-20(fp)
   17b44:	10002126 	beq	r2,zero,17bcc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   17b48:	e0bffb17 	ldw	r2,-20(fp)
   17b4c:	10800217 	ldw	r2,8(r2)
   17b50:	108000cc 	andi	r2,r2,3
   17b54:	10001826 	beq	r2,zero,17bb8 <write+0xbc>
   17b58:	e0bffb17 	ldw	r2,-20(fp)
   17b5c:	10800017 	ldw	r2,0(r2)
   17b60:	10800617 	ldw	r2,24(r2)
   17b64:	10001426 	beq	r2,zero,17bb8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   17b68:	e0bffb17 	ldw	r2,-20(fp)
   17b6c:	10800017 	ldw	r2,0(r2)
   17b70:	10800617 	ldw	r2,24(r2)
   17b74:	e0ffff17 	ldw	r3,-4(fp)
   17b78:	180d883a 	mov	r6,r3
   17b7c:	e17ffe17 	ldw	r5,-8(fp)
   17b80:	e13ffb17 	ldw	r4,-20(fp)
   17b84:	103ee83a 	callr	r2
   17b88:	e0bffc15 	stw	r2,-16(fp)
   17b8c:	e0bffc17 	ldw	r2,-16(fp)
   17b90:	1000070e 	bge	r2,zero,17bb0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   17b94:	0017ac00 	call	17ac0 <alt_get_errno>
   17b98:	1007883a 	mov	r3,r2
   17b9c:	e0bffc17 	ldw	r2,-16(fp)
   17ba0:	0085c83a 	sub	r2,zero,r2
   17ba4:	18800015 	stw	r2,0(r3)
        return -1;
   17ba8:	00bfffc4 	movi	r2,-1
   17bac:	00000c06 	br	17be0 <write+0xe4>
      }
      return rval;
   17bb0:	e0bffc17 	ldw	r2,-16(fp)
   17bb4:	00000a06 	br	17be0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   17bb8:	0017ac00 	call	17ac0 <alt_get_errno>
   17bbc:	1007883a 	mov	r3,r2
   17bc0:	00800344 	movi	r2,13
   17bc4:	18800015 	stw	r2,0(r3)
   17bc8:	00000406 	br	17bdc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   17bcc:	0017ac00 	call	17ac0 <alt_get_errno>
   17bd0:	1007883a 	mov	r3,r2
   17bd4:	00801444 	movi	r2,81
   17bd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   17bdc:	00bfffc4 	movi	r2,-1
}
   17be0:	e037883a 	mov	sp,fp
   17be4:	dfc00117 	ldw	ra,4(sp)
   17be8:	df000017 	ldw	fp,0(sp)
   17bec:	dec00204 	addi	sp,sp,8
   17bf0:	f800283a 	ret

00017bf4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   17bf4:	defffd04 	addi	sp,sp,-12
   17bf8:	dfc00215 	stw	ra,8(sp)
   17bfc:	df000115 	stw	fp,4(sp)
   17c00:	df000104 	addi	fp,sp,4
   17c04:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17c08:	d1600c84 	addi	r5,gp,-32718
   17c0c:	e13fff17 	ldw	r4,-4(fp)
   17c10:	001df900 	call	1df90 <alt_dev_llist_insert>
}
   17c14:	e037883a 	mov	sp,fp
   17c18:	dfc00117 	ldw	ra,4(sp)
   17c1c:	df000017 	ldw	fp,0(sp)
   17c20:	dec00204 	addi	sp,sp,8
   17c24:	f800283a 	ret

00017c28 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   17c28:	defffd04 	addi	sp,sp,-12
   17c2c:	dfc00215 	stw	ra,8(sp)
   17c30:	df000115 	stw	fp,4(sp)
   17c34:	df000104 	addi	fp,sp,4
   17c38:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   17c3c:	001e7a80 	call	1e7a8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17c40:	00800044 	movi	r2,1
   17c44:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   17c48:	0001883a 	nop
   17c4c:	e037883a 	mov	sp,fp
   17c50:	dfc00117 	ldw	ra,4(sp)
   17c54:	df000017 	ldw	fp,0(sp)
   17c58:	dec00204 	addi	sp,sp,8
   17c5c:	f800283a 	ret

00017c60 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   17c60:	defffd04 	addi	sp,sp,-12
   17c64:	dfc00215 	stw	ra,8(sp)
   17c68:	df000115 	stw	fp,4(sp)
   17c6c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER1MS, timer1ms);
   17c70:	01c0fa04 	movi	r7,1000
   17c74:	000d883a 	mov	r6,zero
   17c78:	000b883a 	mov	r5,zero
   17c7c:	01000134 	movhi	r4,4
   17c80:	210c1004 	addi	r4,r4,12352
   17c84:	001b6480 	call	1b648 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1US, timer1us);
    ALTERA_AVALON_CFI_FLASH_INIT ( FLASH_CONTROLLER, flash_controller);
   17c88:	01020034 	movhi	r4,2048
   17c8c:	21054d04 	addi	r4,r4,5428
   17c90:	0017fe80 	call	17fe8 <alt_flash_cfi_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   17c94:	01800144 	movi	r6,5
   17c98:	000b883a 	mov	r5,zero
   17c9c:	01020034 	movhi	r4,2048
   17ca0:	21058e04 	addi	r4,r4,5688
   17ca4:	0019df80 	call	19df8 <altera_avalon_jtag_uart_init>
   17ca8:	01020034 	movhi	r4,2048
   17cac:	21058404 	addi	r4,r4,5648
   17cb0:	0017bf40 	call	17bf4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( CHARACTER_LCD, character_lcd);
   17cb4:	01020034 	movhi	r4,2048
   17cb8:	2109a604 	addi	r4,r4,9880
   17cbc:	001b43c0 	call	1b43c <altera_avalon_lcd_16207_init>
   17cc0:	01020034 	movhi	r4,2048
   17cc4:	21099c04 	addi	r4,r4,9840
   17cc8:	0017bf40 	call	17bf4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
   17ccc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   17cd0:	018000c4 	movi	r6,3
   17cd4:	000b883a 	mov	r5,zero
   17cd8:	01020034 	movhi	r4,2048
   17cdc:	2109ee04 	addi	r4,r4,10168
   17ce0:	001b7cc0 	call	1b7cc <altera_avalon_uart_init>
   17ce4:	01020034 	movhi	r4,2048
   17ce8:	2109e404 	addi	r4,r4,10128
   17cec:	0017bf40 	call	17bf4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2, ps2);
   17cf0:	01020034 	movhi	r4,2048
   17cf4:	210a1504 	addi	r4,r4,10324
   17cf8:	001c0b80 	call	1c0b8 <alt_up_ps2_init>
   17cfc:	01020034 	movhi	r4,2048
   17d00:	210a1504 	addi	r4,r4,10324
   17d04:	0017bf40 	call	17bf4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA, video_character_buffer_with_dma);
   17d08:	00820034 	movhi	r2,2048
   17d0c:	108a2304 	addi	r2,r2,10380
   17d10:	10800a17 	ldw	r2,40(r2)
   17d14:	10800104 	addi	r2,r2,4
   17d18:	10800017 	ldw	r2,0(r2)
   17d1c:	10ffffcc 	andi	r3,r2,65535
   17d20:	00820034 	movhi	r2,2048
   17d24:	108a2304 	addi	r2,r2,10380
   17d28:	10c00c15 	stw	r3,48(r2)
   17d2c:	00820034 	movhi	r2,2048
   17d30:	108a2304 	addi	r2,r2,10380
   17d34:	10800a17 	ldw	r2,40(r2)
   17d38:	10800104 	addi	r2,r2,4
   17d3c:	10800017 	ldw	r2,0(r2)
   17d40:	1006d43a 	srli	r3,r2,16
   17d44:	00820034 	movhi	r2,2048
   17d48:	108a2304 	addi	r2,r2,10380
   17d4c:	10c00d15 	stw	r3,52(r2)
   17d50:	00820034 	movhi	r2,2048
   17d54:	108a2304 	addi	r2,r2,10380
   17d58:	10800c17 	ldw	r2,48(r2)
   17d5c:	10801068 	cmpgeui	r2,r2,65
   17d60:	1000081e 	bne	r2,zero,17d84 <alt_sys_init+0x124>
   17d64:	00820034 	movhi	r2,2048
   17d68:	108a2304 	addi	r2,r2,10380
   17d6c:	00c00fc4 	movi	r3,63
   17d70:	10c00f15 	stw	r3,60(r2)
   17d74:	00820034 	movhi	r2,2048
   17d78:	108a2304 	addi	r2,r2,10380
   17d7c:	00c00184 	movi	r3,6
   17d80:	10c01015 	stw	r3,64(r2)
   17d84:	00820034 	movhi	r2,2048
   17d88:	108a2304 	addi	r2,r2,10380
   17d8c:	10800d17 	ldw	r2,52(r2)
   17d90:	10800868 	cmpgeui	r2,r2,33
   17d94:	1000041e 	bne	r2,zero,17da8 <alt_sys_init+0x148>
   17d98:	00820034 	movhi	r2,2048
   17d9c:	108a2304 	addi	r2,r2,10380
   17da0:	00c007c4 	movi	r3,31
   17da4:	10c01115 	stw	r3,68(r2)
   17da8:	01020034 	movhi	r4,2048
   17dac:	210a2304 	addi	r4,r4,10380
   17db0:	001c6400 	call	1c640 <alt_up_char_buffer_init>
   17db4:	01020034 	movhi	r4,2048
   17db8:	210a2304 	addi	r4,r4,10380
   17dbc:	0017bf40 	call	17bf4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
   17dc0:	00820034 	movhi	r2,2048
   17dc4:	108a3504 	addi	r2,r2,10452
   17dc8:	10800a17 	ldw	r2,40(r2)
   17dcc:	10800017 	ldw	r2,0(r2)
   17dd0:	1007883a 	mov	r3,r2
   17dd4:	00820034 	movhi	r2,2048
   17dd8:	108a3504 	addi	r2,r2,10452
   17ddc:	10c00b15 	stw	r3,44(r2)
   17de0:	00820034 	movhi	r2,2048
   17de4:	108a3504 	addi	r2,r2,10452
   17de8:	10800a17 	ldw	r2,40(r2)
   17dec:	10800104 	addi	r2,r2,4
   17df0:	10800017 	ldw	r2,0(r2)
   17df4:	1007883a 	mov	r3,r2
   17df8:	00820034 	movhi	r2,2048
   17dfc:	108a3504 	addi	r2,r2,10452
   17e00:	10c00c15 	stw	r3,48(r2)
   17e04:	00820034 	movhi	r2,2048
   17e08:	108a3504 	addi	r2,r2,10452
   17e0c:	10800a17 	ldw	r2,40(r2)
   17e10:	10800204 	addi	r2,r2,8
   17e14:	10800017 	ldw	r2,0(r2)
   17e18:	10ffffcc 	andi	r3,r2,65535
   17e1c:	00820034 	movhi	r2,2048
   17e20:	108a3504 	addi	r2,r2,10452
   17e24:	10c00f15 	stw	r3,60(r2)
   17e28:	00820034 	movhi	r2,2048
   17e2c:	108a3504 	addi	r2,r2,10452
   17e30:	10800a17 	ldw	r2,40(r2)
   17e34:	10800204 	addi	r2,r2,8
   17e38:	10800017 	ldw	r2,0(r2)
   17e3c:	1006d43a 	srli	r3,r2,16
   17e40:	00820034 	movhi	r2,2048
   17e44:	108a3504 	addi	r2,r2,10452
   17e48:	10c01015 	stw	r3,64(r2)
   17e4c:	00820034 	movhi	r2,2048
   17e50:	108a3504 	addi	r2,r2,10452
   17e54:	10800a17 	ldw	r2,40(r2)
   17e58:	10800304 	addi	r2,r2,12
   17e5c:	10800017 	ldw	r2,0(r2)
   17e60:	1005d07a 	srai	r2,r2,1
   17e64:	10c0004c 	andi	r3,r2,1
   17e68:	00820034 	movhi	r2,2048
   17e6c:	108a3504 	addi	r2,r2,10452
   17e70:	10c00d15 	stw	r3,52(r2)
   17e74:	00820034 	movhi	r2,2048
   17e78:	108a3504 	addi	r2,r2,10452
   17e7c:	10800a17 	ldw	r2,40(r2)
   17e80:	10800304 	addi	r2,r2,12
   17e84:	10800017 	ldw	r2,0(r2)
   17e88:	1005d13a 	srai	r2,r2,4
   17e8c:	10c003cc 	andi	r3,r2,15
   17e90:	00820034 	movhi	r2,2048
   17e94:	108a3504 	addi	r2,r2,10452
   17e98:	10c00e15 	stw	r3,56(r2)
   17e9c:	00820034 	movhi	r2,2048
   17ea0:	108a3504 	addi	r2,r2,10452
   17ea4:	10800a17 	ldw	r2,40(r2)
   17ea8:	10800304 	addi	r2,r2,12
   17eac:	10800017 	ldw	r2,0(r2)
   17eb0:	1005d43a 	srai	r2,r2,16
   17eb4:	e0bfff05 	stb	r2,-4(fp)
   17eb8:	00820034 	movhi	r2,2048
   17ebc:	108a3504 	addi	r2,r2,10452
   17ec0:	10800a17 	ldw	r2,40(r2)
   17ec4:	10800304 	addi	r2,r2,12
   17ec8:	10800017 	ldw	r2,0(r2)
   17ecc:	1004d63a 	srli	r2,r2,24
   17ed0:	e0bfff45 	stb	r2,-3(fp)
   17ed4:	00820034 	movhi	r2,2048
   17ed8:	108a3504 	addi	r2,r2,10452
   17edc:	10800e17 	ldw	r2,56(r2)
   17ee0:	10800058 	cmpnei	r2,r2,1
   17ee4:	1000041e 	bne	r2,zero,17ef8 <alt_sys_init+0x298>
   17ee8:	00820034 	movhi	r2,2048
   17eec:	108a3504 	addi	r2,r2,10452
   17ef0:	10001115 	stw	zero,68(r2)
   17ef4:	00000e06 	br	17f30 <alt_sys_init+0x2d0>
   17ef8:	00820034 	movhi	r2,2048
   17efc:	108a3504 	addi	r2,r2,10452
   17f00:	10800e17 	ldw	r2,56(r2)
   17f04:	10800098 	cmpnei	r2,r2,2
   17f08:	1000051e 	bne	r2,zero,17f20 <alt_sys_init+0x2c0>
   17f0c:	00820034 	movhi	r2,2048
   17f10:	108a3504 	addi	r2,r2,10452
   17f14:	00c00044 	movi	r3,1
   17f18:	10c01115 	stw	r3,68(r2)
   17f1c:	00000406 	br	17f30 <alt_sys_init+0x2d0>
   17f20:	00820034 	movhi	r2,2048
   17f24:	108a3504 	addi	r2,r2,10452
   17f28:	00c00084 	movi	r3,2
   17f2c:	10c01115 	stw	r3,68(r2)
   17f30:	e0bfff03 	ldbu	r2,-4(fp)
   17f34:	00c00804 	movi	r3,32
   17f38:	1885c83a 	sub	r2,r3,r2
   17f3c:	00ffffc4 	movi	r3,-1
   17f40:	1886d83a 	srl	r3,r3,r2
   17f44:	00820034 	movhi	r2,2048
   17f48:	108a3504 	addi	r2,r2,10452
   17f4c:	10c01215 	stw	r3,72(r2)
   17f50:	e0ffff03 	ldbu	r3,-4(fp)
   17f54:	00820034 	movhi	r2,2048
   17f58:	108a3504 	addi	r2,r2,10452
   17f5c:	10801117 	ldw	r2,68(r2)
   17f60:	1887883a 	add	r3,r3,r2
   17f64:	00820034 	movhi	r2,2048
   17f68:	108a3504 	addi	r2,r2,10452
   17f6c:	10c01315 	stw	r3,76(r2)
   17f70:	e0bfff43 	ldbu	r2,-3(fp)
   17f74:	00c00804 	movi	r3,32
   17f78:	1885c83a 	sub	r2,r3,r2
   17f7c:	00ffffc4 	movi	r3,-1
   17f80:	1886d83a 	srl	r3,r3,r2
   17f84:	00820034 	movhi	r2,2048
   17f88:	108a3504 	addi	r2,r2,10452
   17f8c:	10c01415 	stw	r3,80(r2)
   17f90:	01020034 	movhi	r4,2048
   17f94:	210a3504 	addi	r4,r4,10452
   17f98:	0017bf40 	call	17bf4 <alt_dev_reg>
}
   17f9c:	0001883a 	nop
   17fa0:	e037883a 	mov	sp,fp
   17fa4:	dfc00117 	ldw	ra,4(sp)
   17fa8:	df000017 	ldw	fp,0(sp)
   17fac:	dec00204 	addi	sp,sp,8
   17fb0:	f800283a 	ret

00017fb4 <alt_flash_device_register>:
   17fb4:	defffd04 	addi	sp,sp,-12
   17fb8:	dfc00215 	stw	ra,8(sp)
   17fbc:	df000115 	stw	fp,4(sp)
   17fc0:	df000104 	addi	fp,sp,4
   17fc4:	e13fff15 	stw	r4,-4(fp)
   17fc8:	d1601384 	addi	r5,gp,-32690
   17fcc:	e13fff17 	ldw	r4,-4(fp)
   17fd0:	001df900 	call	1df90 <alt_dev_llist_insert>
   17fd4:	e037883a 	mov	sp,fp
   17fd8:	dfc00117 	ldw	ra,4(sp)
   17fdc:	df000017 	ldw	fp,0(sp)
   17fe0:	dec00204 	addi	sp,sp,8
   17fe4:	f800283a 	ret

00017fe8 <alt_flash_cfi_init>:
   17fe8:	defffc04 	addi	sp,sp,-16
   17fec:	dfc00315 	stw	ra,12(sp)
   17ff0:	df000215 	stw	fp,8(sp)
   17ff4:	df000204 	addi	fp,sp,8
   17ff8:	e13fff15 	stw	r4,-4(fp)
   17ffc:	e03ffe15 	stw	zero,-8(fp)
   18000:	e13fff17 	ldw	r4,-4(fp)
   18004:	001944c0 	call	1944c <alt_read_cfi_width>
   18008:	e0bffe15 	stw	r2,-8(fp)
   1800c:	e0bffe17 	ldw	r2,-8(fp)
   18010:	1000031e 	bne	r2,zero,18020 <alt_flash_cfi_init+0x38>
   18014:	e13fff17 	ldw	r4,-4(fp)
   18018:	0018ba40 	call	18ba4 <alt_set_flash_width_func>
   1801c:	e0bffe15 	stw	r2,-8(fp)
   18020:	e0bffe17 	ldw	r2,-8(fp)
   18024:	1000031e 	bne	r2,zero,18034 <alt_flash_cfi_init+0x4c>
   18028:	e13fff17 	ldw	r4,-4(fp)
   1802c:	0018e840 	call	18e84 <alt_read_cfi_table>
   18030:	e0bffe15 	stw	r2,-8(fp)
   18034:	e0bffe17 	ldw	r2,-8(fp)
   18038:	1000031e 	bne	r2,zero,18048 <alt_flash_cfi_init+0x60>
   1803c:	e13fff17 	ldw	r4,-4(fp)
   18040:	0018d680 	call	18d68 <alt_set_flash_algorithm_func>
   18044:	e0bffe15 	stw	r2,-8(fp)
   18048:	e0bffe17 	ldw	r2,-8(fp)
   1804c:	1000041e 	bne	r2,zero,18060 <alt_flash_cfi_init+0x78>
   18050:	e0bfff17 	ldw	r2,-4(fp)
   18054:	1009883a 	mov	r4,r2
   18058:	0017fb40 	call	17fb4 <alt_flash_device_register>
   1805c:	e0bffe15 	stw	r2,-8(fp)
   18060:	e0bffe17 	ldw	r2,-8(fp)
   18064:	e037883a 	mov	sp,fp
   18068:	dfc00117 	ldw	ra,4(sp)
   1806c:	df000017 	ldw	fp,0(sp)
   18070:	dec00204 	addi	sp,sp,8
   18074:	f800283a 	ret

00018078 <alt_flash_cfi_write>:
   18078:	defff104 	addi	sp,sp,-60
   1807c:	dfc00e15 	stw	ra,56(sp)
   18080:	df000d15 	stw	fp,52(sp)
   18084:	df000d04 	addi	fp,sp,52
   18088:	e13ffc15 	stw	r4,-16(fp)
   1808c:	e17ffd15 	stw	r5,-12(fp)
   18090:	e1bffe15 	stw	r6,-8(fp)
   18094:	e1ffff15 	stw	r7,-4(fp)
   18098:	e03ff415 	stw	zero,-48(fp)
   1809c:	e0bfff17 	ldw	r2,-4(fp)
   180a0:	e0bff815 	stw	r2,-32(fp)
   180a4:	e0bffd17 	ldw	r2,-12(fp)
   180a8:	e0bff915 	stw	r2,-28(fp)
   180ac:	e0bffc17 	ldw	r2,-16(fp)
   180b0:	e0bffa15 	stw	r2,-24(fp)
   180b4:	e03ff515 	stw	zero,-44(fp)
   180b8:	00008706 	br	182d8 <alt_flash_cfi_write+0x260>
   180bc:	e0fffa17 	ldw	r3,-24(fp)
   180c0:	e0bff517 	ldw	r2,-44(fp)
   180c4:	1004913a 	slli	r2,r2,4
   180c8:	1885883a 	add	r2,r3,r2
   180cc:	10800d04 	addi	r2,r2,52
   180d0:	10800017 	ldw	r2,0(r2)
   180d4:	e0fffd17 	ldw	r3,-12(fp)
   180d8:	18807c16 	blt	r3,r2,182cc <alt_flash_cfi_write+0x254>
   180dc:	e0fffa17 	ldw	r3,-24(fp)
   180e0:	e0bff517 	ldw	r2,-44(fp)
   180e4:	1004913a 	slli	r2,r2,4
   180e8:	1885883a 	add	r2,r3,r2
   180ec:	10800d04 	addi	r2,r2,52
   180f0:	10c00017 	ldw	r3,0(r2)
   180f4:	e13ffa17 	ldw	r4,-24(fp)
   180f8:	e0bff517 	ldw	r2,-44(fp)
   180fc:	1004913a 	slli	r2,r2,4
   18100:	2085883a 	add	r2,r4,r2
   18104:	10800e04 	addi	r2,r2,56
   18108:	10800017 	ldw	r2,0(r2)
   1810c:	1885883a 	add	r2,r3,r2
   18110:	e0fffd17 	ldw	r3,-12(fp)
   18114:	18806d0e 	bge	r3,r2,182cc <alt_flash_cfi_write+0x254>
   18118:	e0fffa17 	ldw	r3,-24(fp)
   1811c:	e0bff517 	ldw	r2,-44(fp)
   18120:	1004913a 	slli	r2,r2,4
   18124:	1885883a 	add	r2,r3,r2
   18128:	10800d04 	addi	r2,r2,52
   1812c:	10800017 	ldw	r2,0(r2)
   18130:	e0bff715 	stw	r2,-36(fp)
   18134:	e03ff615 	stw	zero,-40(fp)
   18138:	00005c06 	br	182ac <alt_flash_cfi_write+0x234>
   1813c:	e0fffd17 	ldw	r3,-12(fp)
   18140:	e0bff717 	ldw	r2,-36(fp)
   18144:	18804d16 	blt	r3,r2,1827c <alt_flash_cfi_write+0x204>
   18148:	e0fffa17 	ldw	r3,-24(fp)
   1814c:	e0bff517 	ldw	r2,-44(fp)
   18150:	10800104 	addi	r2,r2,4
   18154:	1004913a 	slli	r2,r2,4
   18158:	1885883a 	add	r2,r3,r2
   1815c:	10c00017 	ldw	r3,0(r2)
   18160:	e0bff717 	ldw	r2,-36(fp)
   18164:	1885883a 	add	r2,r3,r2
   18168:	e0fffd17 	ldw	r3,-12(fp)
   1816c:	1880430e 	bge	r3,r2,1827c <alt_flash_cfi_write+0x204>
   18170:	e0fffa17 	ldw	r3,-24(fp)
   18174:	e0bff517 	ldw	r2,-44(fp)
   18178:	10800104 	addi	r2,r2,4
   1817c:	1004913a 	slli	r2,r2,4
   18180:	1885883a 	add	r2,r3,r2
   18184:	10c00017 	ldw	r3,0(r2)
   18188:	e0bff717 	ldw	r2,-36(fp)
   1818c:	1887883a 	add	r3,r3,r2
   18190:	e0bffd17 	ldw	r2,-12(fp)
   18194:	1885c83a 	sub	r2,r3,r2
   18198:	e0bffb15 	stw	r2,-20(fp)
   1819c:	e0fffb17 	ldw	r3,-20(fp)
   181a0:	e0bfff17 	ldw	r2,-4(fp)
   181a4:	1880010e 	bge	r3,r2,181ac <alt_flash_cfi_write+0x134>
   181a8:	1805883a 	mov	r2,r3
   181ac:	e0bffb15 	stw	r2,-20(fp)
   181b0:	e0bffa17 	ldw	r2,-24(fp)
   181b4:	10c00a17 	ldw	r3,40(r2)
   181b8:	e0bffd17 	ldw	r2,-12(fp)
   181bc:	1885883a 	add	r2,r3,r2
   181c0:	e0fffb17 	ldw	r3,-20(fp)
   181c4:	180d883a 	mov	r6,r3
   181c8:	100b883a 	mov	r5,r2
   181cc:	e13ffe17 	ldw	r4,-8(fp)
   181d0:	00090a40 	call	90a4 <memcmp>
   181d4:	10001326 	beq	r2,zero,18224 <alt_flash_cfi_write+0x1ac>
   181d8:	e0bffa17 	ldw	r2,-24(fp)
   181dc:	10800817 	ldw	r2,32(r2)
   181e0:	e0fffa17 	ldw	r3,-24(fp)
   181e4:	e17ff717 	ldw	r5,-36(fp)
   181e8:	1809883a 	mov	r4,r3
   181ec:	103ee83a 	callr	r2
   181f0:	e0bff415 	stw	r2,-48(fp)
   181f4:	e0bff417 	ldw	r2,-48(fp)
   181f8:	10000a1e 	bne	r2,zero,18224 <alt_flash_cfi_write+0x1ac>
   181fc:	e0bffa17 	ldw	r2,-24(fp)
   18200:	10800917 	ldw	r2,36(r2)
   18204:	e13ffa17 	ldw	r4,-24(fp)
   18208:	e0fffb17 	ldw	r3,-20(fp)
   1820c:	d8c00015 	stw	r3,0(sp)
   18210:	e1fffe17 	ldw	r7,-8(fp)
   18214:	e1bffd17 	ldw	r6,-12(fp)
   18218:	e17ff717 	ldw	r5,-36(fp)
   1821c:	103ee83a 	callr	r2
   18220:	e0bff415 	stw	r2,-48(fp)
   18224:	e0ffff17 	ldw	r3,-4(fp)
   18228:	e0bffb17 	ldw	r2,-20(fp)
   1822c:	18802e26 	beq	r3,r2,182e8 <alt_flash_cfi_write+0x270>
   18230:	e0bff417 	ldw	r2,-48(fp)
   18234:	10002c1e 	bne	r2,zero,182e8 <alt_flash_cfi_write+0x270>
   18238:	e0ffff17 	ldw	r3,-4(fp)
   1823c:	e0bffb17 	ldw	r2,-20(fp)
   18240:	1885c83a 	sub	r2,r3,r2
   18244:	e0bfff15 	stw	r2,-4(fp)
   18248:	e0fffa17 	ldw	r3,-24(fp)
   1824c:	e0bff517 	ldw	r2,-44(fp)
   18250:	10800104 	addi	r2,r2,4
   18254:	1004913a 	slli	r2,r2,4
   18258:	1885883a 	add	r2,r3,r2
   1825c:	10c00017 	ldw	r3,0(r2)
   18260:	e0bff717 	ldw	r2,-36(fp)
   18264:	1885883a 	add	r2,r3,r2
   18268:	e0bffd15 	stw	r2,-12(fp)
   1826c:	e0bffb17 	ldw	r2,-20(fp)
   18270:	e0fffe17 	ldw	r3,-8(fp)
   18274:	1885883a 	add	r2,r3,r2
   18278:	e0bffe15 	stw	r2,-8(fp)
   1827c:	e0fffa17 	ldw	r3,-24(fp)
   18280:	e0bff517 	ldw	r2,-44(fp)
   18284:	10800104 	addi	r2,r2,4
   18288:	1004913a 	slli	r2,r2,4
   1828c:	1885883a 	add	r2,r3,r2
   18290:	10800017 	ldw	r2,0(r2)
   18294:	e0fff717 	ldw	r3,-36(fp)
   18298:	1885883a 	add	r2,r3,r2
   1829c:	e0bff715 	stw	r2,-36(fp)
   182a0:	e0bff617 	ldw	r2,-40(fp)
   182a4:	10800044 	addi	r2,r2,1
   182a8:	e0bff615 	stw	r2,-40(fp)
   182ac:	e0fffa17 	ldw	r3,-24(fp)
   182b0:	e0bff517 	ldw	r2,-44(fp)
   182b4:	1004913a 	slli	r2,r2,4
   182b8:	1885883a 	add	r2,r3,r2
   182bc:	10800f04 	addi	r2,r2,60
   182c0:	10800017 	ldw	r2,0(r2)
   182c4:	e0fff617 	ldw	r3,-40(fp)
   182c8:	18bf9c16 	blt	r3,r2,1813c <__alt_data_end+0xf001813c>
   182cc:	e0bff517 	ldw	r2,-44(fp)
   182d0:	10800044 	addi	r2,r2,1
   182d4:	e0bff515 	stw	r2,-44(fp)
   182d8:	e0bffa17 	ldw	r2,-24(fp)
   182dc:	10800c17 	ldw	r2,48(r2)
   182e0:	e0fff517 	ldw	r3,-44(fp)
   182e4:	18bf7516 	blt	r3,r2,180bc <__alt_data_end+0xf00180bc>
   182e8:	e0bffa17 	ldw	r2,-24(fp)
   182ec:	10c00a17 	ldw	r3,40(r2)
   182f0:	e0bff917 	ldw	r2,-28(fp)
   182f4:	1885883a 	add	r2,r3,r2
   182f8:	e0fff817 	ldw	r3,-32(fp)
   182fc:	180b883a 	mov	r5,r3
   18300:	1009883a 	mov	r4,r2
   18304:	001dedc0 	call	1dedc <alt_dcache_flush>
   18308:	e0bff417 	ldw	r2,-48(fp)
   1830c:	e037883a 	mov	sp,fp
   18310:	dfc00117 	ldw	ra,4(sp)
   18314:	df000017 	ldw	fp,0(sp)
   18318:	dec00204 	addi	sp,sp,8
   1831c:	f800283a 	ret

00018320 <alt_flash_cfi_get_info>:
   18320:	defffa04 	addi	sp,sp,-24
   18324:	df000515 	stw	fp,20(sp)
   18328:	df000504 	addi	fp,sp,20
   1832c:	e13ffd15 	stw	r4,-12(fp)
   18330:	e17ffe15 	stw	r5,-8(fp)
   18334:	e1bfff15 	stw	r6,-4(fp)
   18338:	e03ffb15 	stw	zero,-20(fp)
   1833c:	e0bffd17 	ldw	r2,-12(fp)
   18340:	e0bffc15 	stw	r2,-16(fp)
   18344:	e0bffc17 	ldw	r2,-16(fp)
   18348:	10c00c17 	ldw	r3,48(r2)
   1834c:	e0bfff17 	ldw	r2,-4(fp)
   18350:	10c00015 	stw	r3,0(r2)
   18354:	e0bffc17 	ldw	r2,-16(fp)
   18358:	10800c17 	ldw	r2,48(r2)
   1835c:	1000031e 	bne	r2,zero,1836c <alt_flash_cfi_get_info+0x4c>
   18360:	00bffec4 	movi	r2,-5
   18364:	e0bffb15 	stw	r2,-20(fp)
   18368:	00000b06 	br	18398 <alt_flash_cfi_get_info+0x78>
   1836c:	e0bffc17 	ldw	r2,-16(fp)
   18370:	10800c17 	ldw	r2,48(r2)
   18374:	10800250 	cmplti	r2,r2,9
   18378:	1000031e 	bne	r2,zero,18388 <alt_flash_cfi_get_info+0x68>
   1837c:	00bffd04 	movi	r2,-12
   18380:	e0bffb15 	stw	r2,-20(fp)
   18384:	00000406 	br	18398 <alt_flash_cfi_get_info+0x78>
   18388:	e0bffc17 	ldw	r2,-16(fp)
   1838c:	10c00d04 	addi	r3,r2,52
   18390:	e0bffe17 	ldw	r2,-8(fp)
   18394:	10c00015 	stw	r3,0(r2)
   18398:	e0bffb17 	ldw	r2,-20(fp)
   1839c:	e037883a 	mov	sp,fp
   183a0:	df000017 	ldw	fp,0(sp)
   183a4:	dec00104 	addi	sp,sp,4
   183a8:	f800283a 	ret

000183ac <alt_flash_cfi_read>:
   183ac:	defff904 	addi	sp,sp,-28
   183b0:	dfc00615 	stw	ra,24(sp)
   183b4:	df000515 	stw	fp,20(sp)
   183b8:	df000504 	addi	fp,sp,20
   183bc:	e13ffc15 	stw	r4,-16(fp)
   183c0:	e17ffd15 	stw	r5,-12(fp)
   183c4:	e1bffe15 	stw	r6,-8(fp)
   183c8:	e1ffff15 	stw	r7,-4(fp)
   183cc:	e0bffc17 	ldw	r2,-16(fp)
   183d0:	e0bffb15 	stw	r2,-20(fp)
   183d4:	e0bffb17 	ldw	r2,-20(fp)
   183d8:	10c00a17 	ldw	r3,40(r2)
   183dc:	e0bffd17 	ldw	r2,-12(fp)
   183e0:	1885883a 	add	r2,r3,r2
   183e4:	e0ffff17 	ldw	r3,-4(fp)
   183e8:	180d883a 	mov	r6,r3
   183ec:	100b883a 	mov	r5,r2
   183f0:	e13ffe17 	ldw	r4,-8(fp)
   183f4:	00091200 	call	9120 <memcpy>
   183f8:	0005883a 	mov	r2,zero
   183fc:	e037883a 	mov	sp,fp
   18400:	dfc00117 	ldw	ra,4(sp)
   18404:	df000017 	ldw	fp,0(sp)
   18408:	dec00204 	addi	sp,sp,8
   1840c:	f800283a 	ret

00018410 <alt_write_value_to_flash>:
   18410:	defffa04 	addi	sp,sp,-24
   18414:	df000515 	stw	fp,20(sp)
   18418:	df000504 	addi	fp,sp,20
   1841c:	e13ffd15 	stw	r4,-12(fp)
   18420:	e17ffe15 	stw	r5,-8(fp)
   18424:	e1bfff15 	stw	r6,-4(fp)
   18428:	e0bffd17 	ldw	r2,-12(fp)
   1842c:	10802f17 	ldw	r2,188(r2)
   18430:	10800058 	cmpnei	r2,r2,1
   18434:	1000091e 	bne	r2,zero,1845c <alt_write_value_to_flash+0x4c>
   18438:	e0bffd17 	ldw	r2,-12(fp)
   1843c:	10c00a17 	ldw	r3,40(r2)
   18440:	e0bffe17 	ldw	r2,-8(fp)
   18444:	1885883a 	add	r2,r3,r2
   18448:	e0ffff17 	ldw	r3,-4(fp)
   1844c:	18c00003 	ldbu	r3,0(r3)
   18450:	18c03fcc 	andi	r3,r3,255
   18454:	10c00025 	stbio	r3,0(r2)
   18458:	00003f06 	br	18558 <alt_write_value_to_flash+0x148>
   1845c:	e0bffd17 	ldw	r2,-12(fp)
   18460:	10802f17 	ldw	r2,188(r2)
   18464:	10800098 	cmpnei	r2,r2,2
   18468:	1000141e 	bne	r2,zero,184bc <alt_write_value_to_flash+0xac>
   1846c:	e0bfff17 	ldw	r2,-4(fp)
   18470:	10800003 	ldbu	r2,0(r2)
   18474:	10803fcc 	andi	r2,r2,255
   18478:	e0bffb0d 	sth	r2,-20(fp)
   1847c:	e0bfff17 	ldw	r2,-4(fp)
   18480:	10800044 	addi	r2,r2,1
   18484:	10800003 	ldbu	r2,0(r2)
   18488:	10803fcc 	andi	r2,r2,255
   1848c:	1004923a 	slli	r2,r2,8
   18490:	1007883a 	mov	r3,r2
   18494:	e0bffb0b 	ldhu	r2,-20(fp)
   18498:	1884b03a 	or	r2,r3,r2
   1849c:	e0bffb0d 	sth	r2,-20(fp)
   184a0:	e0bffd17 	ldw	r2,-12(fp)
   184a4:	10c00a17 	ldw	r3,40(r2)
   184a8:	e0bffe17 	ldw	r2,-8(fp)
   184ac:	1885883a 	add	r2,r3,r2
   184b0:	e0fffb0b 	ldhu	r3,-20(fp)
   184b4:	10c0002d 	sthio	r3,0(r2)
   184b8:	00002706 	br	18558 <alt_write_value_to_flash+0x148>
   184bc:	e0bffd17 	ldw	r2,-12(fp)
   184c0:	10802f17 	ldw	r2,188(r2)
   184c4:	10800118 	cmpnei	r2,r2,4
   184c8:	1000231e 	bne	r2,zero,18558 <alt_write_value_to_flash+0x148>
   184cc:	e0bfff17 	ldw	r2,-4(fp)
   184d0:	10800003 	ldbu	r2,0(r2)
   184d4:	10803fcc 	andi	r2,r2,255
   184d8:	e0bffc15 	stw	r2,-16(fp)
   184dc:	e0bfff17 	ldw	r2,-4(fp)
   184e0:	10800044 	addi	r2,r2,1
   184e4:	10800003 	ldbu	r2,0(r2)
   184e8:	10803fcc 	andi	r2,r2,255
   184ec:	1004923a 	slli	r2,r2,8
   184f0:	e0fffc17 	ldw	r3,-16(fp)
   184f4:	1884b03a 	or	r2,r3,r2
   184f8:	e0bffc15 	stw	r2,-16(fp)
   184fc:	e0bfff17 	ldw	r2,-4(fp)
   18500:	10800084 	addi	r2,r2,2
   18504:	10800003 	ldbu	r2,0(r2)
   18508:	10803fcc 	andi	r2,r2,255
   1850c:	1004943a 	slli	r2,r2,16
   18510:	e0fffc17 	ldw	r3,-16(fp)
   18514:	1884b03a 	or	r2,r3,r2
   18518:	e0bffc15 	stw	r2,-16(fp)
   1851c:	e0bfff17 	ldw	r2,-4(fp)
   18520:	108000c4 	addi	r2,r2,3
   18524:	10800003 	ldbu	r2,0(r2)
   18528:	10803fcc 	andi	r2,r2,255
   1852c:	1004963a 	slli	r2,r2,24
   18530:	e0fffc17 	ldw	r3,-16(fp)
   18534:	1884b03a 	or	r2,r3,r2
   18538:	e0bffc15 	stw	r2,-16(fp)
   1853c:	e0bffd17 	ldw	r2,-12(fp)
   18540:	10c00a17 	ldw	r3,40(r2)
   18544:	e0bffe17 	ldw	r2,-8(fp)
   18548:	1885883a 	add	r2,r3,r2
   1854c:	e0fffc17 	ldw	r3,-16(fp)
   18550:	10c00035 	stwio	r3,0(r2)
   18554:	0001883a 	nop
   18558:	0001883a 	nop
   1855c:	e037883a 	mov	sp,fp
   18560:	df000017 	ldw	fp,0(sp)
   18564:	dec00104 	addi	sp,sp,4
   18568:	f800283a 	ret

0001856c <alt_flash_program_block>:
   1856c:	defff304 	addi	sp,sp,-52
   18570:	dfc00c15 	stw	ra,48(sp)
   18574:	df000b15 	stw	fp,44(sp)
   18578:	df000b04 	addi	fp,sp,44
   1857c:	e13ffc15 	stw	r4,-16(fp)
   18580:	e17ffd15 	stw	r5,-12(fp)
   18584:	e1bffe15 	stw	r6,-8(fp)
   18588:	e1ffff15 	stw	r7,-4(fp)
   1858c:	e03ff515 	stw	zero,-44(fp)
   18590:	e0bffc17 	ldw	r2,-16(fp)
   18594:	10c00a17 	ldw	r3,40(r2)
   18598:	e0bffd17 	ldw	r2,-12(fp)
   1859c:	1885883a 	add	r2,r3,r2
   185a0:	1007883a 	mov	r3,r2
   185a4:	e0bffc17 	ldw	r2,-16(fp)
   185a8:	10802f17 	ldw	r2,188(r2)
   185ac:	1889283a 	div	r4,r3,r2
   185b0:	2085383a 	mul	r2,r4,r2
   185b4:	1885c83a 	sub	r2,r3,r2
   185b8:	e0bff815 	stw	r2,-32(fp)
   185bc:	e0bff817 	ldw	r2,-32(fp)
   185c0:	10003b26 	beq	r2,zero,186b0 <alt_flash_program_block+0x144>
   185c4:	e0bffc17 	ldw	r2,-16(fp)
   185c8:	10c02f17 	ldw	r3,188(r2)
   185cc:	e0bff817 	ldw	r2,-32(fp)
   185d0:	1885c83a 	sub	r2,r3,r2
   185d4:	e0bff915 	stw	r2,-28(fp)
   185d8:	e03ff615 	stw	zero,-40(fp)
   185dc:	00001206 	br	18628 <alt_flash_program_block+0xbc>
   185e0:	e0bffc17 	ldw	r2,-16(fp)
   185e4:	10800a17 	ldw	r2,40(r2)
   185e8:	e13ffd17 	ldw	r4,-12(fp)
   185ec:	e0fff817 	ldw	r3,-32(fp)
   185f0:	20c9c83a 	sub	r4,r4,r3
   185f4:	e0fff617 	ldw	r3,-40(fp)
   185f8:	20c7883a 	add	r3,r4,r3
   185fc:	10c5883a 	add	r2,r2,r3
   18600:	10800023 	ldbuio	r2,0(r2)
   18604:	10803fcc 	andi	r2,r2,255
   18608:	1009883a 	mov	r4,r2
   1860c:	e0fffb04 	addi	r3,fp,-20
   18610:	e0bff617 	ldw	r2,-40(fp)
   18614:	1885883a 	add	r2,r3,r2
   18618:	11000005 	stb	r4,0(r2)
   1861c:	e0bff617 	ldw	r2,-40(fp)
   18620:	10800044 	addi	r2,r2,1
   18624:	e0bff615 	stw	r2,-40(fp)
   18628:	e0fff617 	ldw	r3,-40(fp)
   1862c:	e0bff817 	ldw	r2,-32(fp)
   18630:	18bfeb16 	blt	r3,r2,185e0 <__alt_data_end+0xf00185e0>
   18634:	e03ff615 	stw	zero,-40(fp)
   18638:	00000d06 	br	18670 <alt_flash_program_block+0x104>
   1863c:	e0fff817 	ldw	r3,-32(fp)
   18640:	e0bff617 	ldw	r2,-40(fp)
   18644:	1885883a 	add	r2,r3,r2
   18648:	e0fff617 	ldw	r3,-40(fp)
   1864c:	e13ffe17 	ldw	r4,-8(fp)
   18650:	20c7883a 	add	r3,r4,r3
   18654:	18c00003 	ldbu	r3,0(r3)
   18658:	e13ffb04 	addi	r4,fp,-20
   1865c:	2085883a 	add	r2,r4,r2
   18660:	10c00005 	stb	r3,0(r2)
   18664:	e0bff617 	ldw	r2,-40(fp)
   18668:	10800044 	addi	r2,r2,1
   1866c:	e0bff615 	stw	r2,-40(fp)
   18670:	e0fff617 	ldw	r3,-40(fp)
   18674:	e0bff917 	ldw	r2,-28(fp)
   18678:	18bff016 	blt	r3,r2,1863c <__alt_data_end+0xf001863c>
   1867c:	e0fffd17 	ldw	r3,-12(fp)
   18680:	e0bff817 	ldw	r2,-32(fp)
   18684:	1887c83a 	sub	r3,r3,r2
   18688:	e13ffb04 	addi	r4,fp,-20
   1868c:	e0800217 	ldw	r2,8(fp)
   18690:	200d883a 	mov	r6,r4
   18694:	180b883a 	mov	r5,r3
   18698:	e13ffc17 	ldw	r4,-16(fp)
   1869c:	103ee83a 	callr	r2
   186a0:	e0bff515 	stw	r2,-44(fp)
   186a4:	e0bff917 	ldw	r2,-28(fp)
   186a8:	e0bff615 	stw	r2,-40(fp)
   186ac:	00000106 	br	186b4 <alt_flash_program_block+0x148>
   186b0:	e03ff615 	stw	zero,-40(fp)
   186b4:	e0fffd17 	ldw	r3,-12(fp)
   186b8:	e0bfff17 	ldw	r2,-4(fp)
   186bc:	1885883a 	add	r2,r3,r2
   186c0:	e0fffc17 	ldw	r3,-16(fp)
   186c4:	18c02f17 	ldw	r3,188(r3)
   186c8:	10c9283a 	div	r4,r2,r3
   186cc:	20c7383a 	mul	r3,r4,r3
   186d0:	10c5c83a 	sub	r2,r2,r3
   186d4:	e0bffa15 	stw	r2,-24(fp)
   186d8:	00001106 	br	18720 <alt_flash_program_block+0x1b4>
   186dc:	e0fffd17 	ldw	r3,-12(fp)
   186e0:	e0bff617 	ldw	r2,-40(fp)
   186e4:	1889883a 	add	r4,r3,r2
   186e8:	e0bff617 	ldw	r2,-40(fp)
   186ec:	e0fffe17 	ldw	r3,-8(fp)
   186f0:	1887883a 	add	r3,r3,r2
   186f4:	e0800217 	ldw	r2,8(fp)
   186f8:	180d883a 	mov	r6,r3
   186fc:	200b883a 	mov	r5,r4
   18700:	e13ffc17 	ldw	r4,-16(fp)
   18704:	103ee83a 	callr	r2
   18708:	e0bff515 	stw	r2,-44(fp)
   1870c:	e0bffc17 	ldw	r2,-16(fp)
   18710:	10802f17 	ldw	r2,188(r2)
   18714:	e0fff617 	ldw	r3,-40(fp)
   18718:	1885883a 	add	r2,r3,r2
   1871c:	e0bff615 	stw	r2,-40(fp)
   18720:	e0bff517 	ldw	r2,-44(fp)
   18724:	1000051e 	bne	r2,zero,1873c <alt_flash_program_block+0x1d0>
   18728:	e0ffff17 	ldw	r3,-4(fp)
   1872c:	e0bffa17 	ldw	r2,-24(fp)
   18730:	1885c83a 	sub	r2,r3,r2
   18734:	e0fff617 	ldw	r3,-40(fp)
   18738:	18bfe816 	blt	r3,r2,186dc <__alt_data_end+0xf00186dc>
   1873c:	e0bffa17 	ldw	r2,-24(fp)
   18740:	10003c26 	beq	r2,zero,18834 <alt_flash_program_block+0x2c8>
   18744:	e0bff517 	ldw	r2,-44(fp)
   18748:	10003a1e 	bne	r2,zero,18834 <alt_flash_program_block+0x2c8>
   1874c:	e0bffc17 	ldw	r2,-16(fp)
   18750:	10c02f17 	ldw	r3,188(r2)
   18754:	e0bffa17 	ldw	r2,-24(fp)
   18758:	1885c83a 	sub	r2,r3,r2
   1875c:	e0bff815 	stw	r2,-32(fp)
   18760:	e03ff715 	stw	zero,-36(fp)
   18764:	00000d06 	br	1879c <alt_flash_program_block+0x230>
   18768:	e0fff617 	ldw	r3,-40(fp)
   1876c:	e0bff717 	ldw	r2,-36(fp)
   18770:	1885883a 	add	r2,r3,r2
   18774:	e0fffe17 	ldw	r3,-8(fp)
   18778:	1885883a 	add	r2,r3,r2
   1877c:	10c00003 	ldbu	r3,0(r2)
   18780:	e13ffb04 	addi	r4,fp,-20
   18784:	e0bff717 	ldw	r2,-36(fp)
   18788:	2085883a 	add	r2,r4,r2
   1878c:	10c00005 	stb	r3,0(r2)
   18790:	e0bff717 	ldw	r2,-36(fp)
   18794:	10800044 	addi	r2,r2,1
   18798:	e0bff715 	stw	r2,-36(fp)
   1879c:	e0fff717 	ldw	r3,-36(fp)
   187a0:	e0bffa17 	ldw	r2,-24(fp)
   187a4:	18bff016 	blt	r3,r2,18768 <__alt_data_end+0xf0018768>
   187a8:	e03ff715 	stw	zero,-36(fp)
   187ac:	00001406 	br	18800 <alt_flash_program_block+0x294>
   187b0:	e0fffa17 	ldw	r3,-24(fp)
   187b4:	e0bff717 	ldw	r2,-36(fp)
   187b8:	1885883a 	add	r2,r3,r2
   187bc:	e0fffc17 	ldw	r3,-16(fp)
   187c0:	18c00a17 	ldw	r3,40(r3)
   187c4:	e17ffd17 	ldw	r5,-12(fp)
   187c8:	e13fff17 	ldw	r4,-4(fp)
   187cc:	290b883a 	add	r5,r5,r4
   187d0:	e13ff717 	ldw	r4,-36(fp)
   187d4:	2909883a 	add	r4,r5,r4
   187d8:	1907883a 	add	r3,r3,r4
   187dc:	18c00023 	ldbuio	r3,0(r3)
   187e0:	18c03fcc 	andi	r3,r3,255
   187e4:	1809883a 	mov	r4,r3
   187e8:	e0fffb04 	addi	r3,fp,-20
   187ec:	1885883a 	add	r2,r3,r2
   187f0:	11000005 	stb	r4,0(r2)
   187f4:	e0bff717 	ldw	r2,-36(fp)
   187f8:	10800044 	addi	r2,r2,1
   187fc:	e0bff715 	stw	r2,-36(fp)
   18800:	e0fff717 	ldw	r3,-36(fp)
   18804:	e0bff817 	ldw	r2,-32(fp)
   18808:	18bfe916 	blt	r3,r2,187b0 <__alt_data_end+0xf00187b0>
   1880c:	e0fffd17 	ldw	r3,-12(fp)
   18810:	e0bff617 	ldw	r2,-40(fp)
   18814:	1887883a 	add	r3,r3,r2
   18818:	e13ffb04 	addi	r4,fp,-20
   1881c:	e0800217 	ldw	r2,8(fp)
   18820:	200d883a 	mov	r6,r4
   18824:	180b883a 	mov	r5,r3
   18828:	e13ffc17 	ldw	r4,-16(fp)
   1882c:	103ee83a 	callr	r2
   18830:	e0bff515 	stw	r2,-44(fp)
   18834:	e0bff517 	ldw	r2,-44(fp)
   18838:	e037883a 	mov	sp,fp
   1883c:	dfc00117 	ldw	ra,4(sp)
   18840:	df000017 	ldw	fp,0(sp)
   18844:	dec00204 	addi	sp,sp,8
   18848:	f800283a 	ret

0001884c <alt_read_query_entry_8bit>:
   1884c:	defffd04 	addi	sp,sp,-12
   18850:	df000215 	stw	fp,8(sp)
   18854:	df000204 	addi	fp,sp,8
   18858:	e13ffe15 	stw	r4,-8(fp)
   1885c:	e17fff15 	stw	r5,-4(fp)
   18860:	e0bffe17 	ldw	r2,-8(fp)
   18864:	10c00a17 	ldw	r3,40(r2)
   18868:	e0bfff17 	ldw	r2,-4(fp)
   1886c:	1885883a 	add	r2,r3,r2
   18870:	10800023 	ldbuio	r2,0(r2)
   18874:	10803fcc 	andi	r2,r2,255
   18878:	e037883a 	mov	sp,fp
   1887c:	df000017 	ldw	fp,0(sp)
   18880:	dec00104 	addi	sp,sp,4
   18884:	f800283a 	ret

00018888 <alt_read_query_entry_16bit>:
   18888:	defffd04 	addi	sp,sp,-12
   1888c:	df000215 	stw	fp,8(sp)
   18890:	df000204 	addi	fp,sp,8
   18894:	e13ffe15 	stw	r4,-8(fp)
   18898:	e17fff15 	stw	r5,-4(fp)
   1889c:	e0bffe17 	ldw	r2,-8(fp)
   188a0:	10c00a17 	ldw	r3,40(r2)
   188a4:	e0bfff17 	ldw	r2,-4(fp)
   188a8:	1085883a 	add	r2,r2,r2
   188ac:	1885883a 	add	r2,r3,r2
   188b0:	1080002b 	ldhuio	r2,0(r2)
   188b4:	10bfffcc 	andi	r2,r2,65535
   188b8:	e037883a 	mov	sp,fp
   188bc:	df000017 	ldw	fp,0(sp)
   188c0:	dec00104 	addi	sp,sp,4
   188c4:	f800283a 	ret

000188c8 <alt_read_query_entry_32bit>:
   188c8:	defffd04 	addi	sp,sp,-12
   188cc:	df000215 	stw	fp,8(sp)
   188d0:	df000204 	addi	fp,sp,8
   188d4:	e13ffe15 	stw	r4,-8(fp)
   188d8:	e17fff15 	stw	r5,-4(fp)
   188dc:	e0bffe17 	ldw	r2,-8(fp)
   188e0:	10c00a17 	ldw	r3,40(r2)
   188e4:	e0bfff17 	ldw	r2,-4(fp)
   188e8:	1085883a 	add	r2,r2,r2
   188ec:	1085883a 	add	r2,r2,r2
   188f0:	1885883a 	add	r2,r3,r2
   188f4:	10800037 	ldwio	r2,0(r2)
   188f8:	e037883a 	mov	sp,fp
   188fc:	df000017 	ldw	fp,0(sp)
   18900:	dec00104 	addi	sp,sp,4
   18904:	f800283a 	ret

00018908 <alt_write_flash_command_8bit_device_8bit_mode>:
   18908:	defffc04 	addi	sp,sp,-16
   1890c:	df000315 	stw	fp,12(sp)
   18910:	df000304 	addi	fp,sp,12
   18914:	e13ffd15 	stw	r4,-12(fp)
   18918:	e17ffe15 	stw	r5,-8(fp)
   1891c:	3005883a 	mov	r2,r6
   18920:	e0bfff05 	stb	r2,-4(fp)
   18924:	e0bffe17 	ldw	r2,-8(fp)
   18928:	e0fffd17 	ldw	r3,-12(fp)
   1892c:	1885883a 	add	r2,r3,r2
   18930:	e0ffff03 	ldbu	r3,-4(fp)
   18934:	10c00025 	stbio	r3,0(r2)
   18938:	0001883a 	nop
   1893c:	e037883a 	mov	sp,fp
   18940:	df000017 	ldw	fp,0(sp)
   18944:	dec00104 	addi	sp,sp,4
   18948:	f800283a 	ret

0001894c <alt_write_flash_command_16bit_device_8bit_mode>:
   1894c:	defffc04 	addi	sp,sp,-16
   18950:	df000315 	stw	fp,12(sp)
   18954:	df000304 	addi	fp,sp,12
   18958:	e13ffd15 	stw	r4,-12(fp)
   1895c:	e17ffe15 	stw	r5,-8(fp)
   18960:	3005883a 	mov	r2,r6
   18964:	e0bfff05 	stb	r2,-4(fp)
   18968:	e0bffe17 	ldw	r2,-8(fp)
   1896c:	1080004c 	andi	r2,r2,1
   18970:	10000826 	beq	r2,zero,18994 <alt_write_flash_command_16bit_device_8bit_mode+0x48>
   18974:	e0bffe17 	ldw	r2,-8(fp)
   18978:	1085883a 	add	r2,r2,r2
   1897c:	1007883a 	mov	r3,r2
   18980:	e0bffd17 	ldw	r2,-12(fp)
   18984:	10c5883a 	add	r2,r2,r3
   18988:	e0ffff03 	ldbu	r3,-4(fp)
   1898c:	10c00025 	stbio	r3,0(r2)
   18990:	00000806 	br	189b4 <alt_write_flash_command_16bit_device_8bit_mode+0x68>
   18994:	e0bffe17 	ldw	r2,-8(fp)
   18998:	1085883a 	add	r2,r2,r2
   1899c:	10800044 	addi	r2,r2,1
   189a0:	e0fffd17 	ldw	r3,-12(fp)
   189a4:	1885883a 	add	r2,r3,r2
   189a8:	e0ffff03 	ldbu	r3,-4(fp)
   189ac:	10c00025 	stbio	r3,0(r2)
   189b0:	0001883a 	nop
   189b4:	e037883a 	mov	sp,fp
   189b8:	df000017 	ldw	fp,0(sp)
   189bc:	dec00104 	addi	sp,sp,4
   189c0:	f800283a 	ret

000189c4 <alt_write_flash_command_32bit_device_8bit_mode>:
   189c4:	defffc04 	addi	sp,sp,-16
   189c8:	df000315 	stw	fp,12(sp)
   189cc:	df000304 	addi	fp,sp,12
   189d0:	e13ffd15 	stw	r4,-12(fp)
   189d4:	e17ffe15 	stw	r5,-8(fp)
   189d8:	3005883a 	mov	r2,r6
   189dc:	e0bfff05 	stb	r2,-4(fp)
   189e0:	e0bffe17 	ldw	r2,-8(fp)
   189e4:	1085883a 	add	r2,r2,r2
   189e8:	1085883a 	add	r2,r2,r2
   189ec:	1007883a 	mov	r3,r2
   189f0:	e0bffd17 	ldw	r2,-12(fp)
   189f4:	10c5883a 	add	r2,r2,r3
   189f8:	e0ffff03 	ldbu	r3,-4(fp)
   189fc:	10c00025 	stbio	r3,0(r2)
   18a00:	0001883a 	nop
   18a04:	e037883a 	mov	sp,fp
   18a08:	df000017 	ldw	fp,0(sp)
   18a0c:	dec00104 	addi	sp,sp,4
   18a10:	f800283a 	ret

00018a14 <alt_write_flash_command_16bit_device_16bit_mode>:
   18a14:	defffc04 	addi	sp,sp,-16
   18a18:	df000315 	stw	fp,12(sp)
   18a1c:	df000304 	addi	fp,sp,12
   18a20:	e13ffd15 	stw	r4,-12(fp)
   18a24:	e17ffe15 	stw	r5,-8(fp)
   18a28:	3005883a 	mov	r2,r6
   18a2c:	e0bfff05 	stb	r2,-4(fp)
   18a30:	e0bffe17 	ldw	r2,-8(fp)
   18a34:	1085883a 	add	r2,r2,r2
   18a38:	1007883a 	mov	r3,r2
   18a3c:	e0bffd17 	ldw	r2,-12(fp)
   18a40:	10c5883a 	add	r2,r2,r3
   18a44:	e0ffff03 	ldbu	r3,-4(fp)
   18a48:	10c0002d 	sthio	r3,0(r2)
   18a4c:	0001883a 	nop
   18a50:	e037883a 	mov	sp,fp
   18a54:	df000017 	ldw	fp,0(sp)
   18a58:	dec00104 	addi	sp,sp,4
   18a5c:	f800283a 	ret

00018a60 <alt_write_flash_command_32bit_device_16bit_mode>:
   18a60:	defffc04 	addi	sp,sp,-16
   18a64:	df000315 	stw	fp,12(sp)
   18a68:	df000304 	addi	fp,sp,12
   18a6c:	e13ffd15 	stw	r4,-12(fp)
   18a70:	e17ffe15 	stw	r5,-8(fp)
   18a74:	3005883a 	mov	r2,r6
   18a78:	e0bfff05 	stb	r2,-4(fp)
   18a7c:	e0bffe17 	ldw	r2,-8(fp)
   18a80:	1085883a 	add	r2,r2,r2
   18a84:	1085883a 	add	r2,r2,r2
   18a88:	1007883a 	mov	r3,r2
   18a8c:	e0bffd17 	ldw	r2,-12(fp)
   18a90:	10c5883a 	add	r2,r2,r3
   18a94:	e0ffff03 	ldbu	r3,-4(fp)
   18a98:	10c0002d 	sthio	r3,0(r2)
   18a9c:	0001883a 	nop
   18aa0:	e037883a 	mov	sp,fp
   18aa4:	df000017 	ldw	fp,0(sp)
   18aa8:	dec00104 	addi	sp,sp,4
   18aac:	f800283a 	ret

00018ab0 <alt_write_flash_command_32bit_device_32bit_mode>:
   18ab0:	defffc04 	addi	sp,sp,-16
   18ab4:	df000315 	stw	fp,12(sp)
   18ab8:	df000304 	addi	fp,sp,12
   18abc:	e13ffd15 	stw	r4,-12(fp)
   18ac0:	e17ffe15 	stw	r5,-8(fp)
   18ac4:	3005883a 	mov	r2,r6
   18ac8:	e0bfff05 	stb	r2,-4(fp)
   18acc:	e0bffe17 	ldw	r2,-8(fp)
   18ad0:	1085883a 	add	r2,r2,r2
   18ad4:	1085883a 	add	r2,r2,r2
   18ad8:	1007883a 	mov	r3,r2
   18adc:	e0bffd17 	ldw	r2,-12(fp)
   18ae0:	10c5883a 	add	r2,r2,r3
   18ae4:	e0ffff03 	ldbu	r3,-4(fp)
   18ae8:	10c00035 	stwio	r3,0(r2)
   18aec:	0001883a 	nop
   18af0:	e037883a 	mov	sp,fp
   18af4:	df000017 	ldw	fp,0(sp)
   18af8:	dec00104 	addi	sp,sp,4
   18afc:	f800283a 	ret

00018b00 <alt_write_native_8bit>:
   18b00:	defffd04 	addi	sp,sp,-12
   18b04:	df000215 	stw	fp,8(sp)
   18b08:	df000204 	addi	fp,sp,8
   18b0c:	e13ffe15 	stw	r4,-8(fp)
   18b10:	e17fff15 	stw	r5,-4(fp)
   18b14:	e0bfff17 	ldw	r2,-4(fp)
   18b18:	10c03fcc 	andi	r3,r2,255
   18b1c:	e0bffe17 	ldw	r2,-8(fp)
   18b20:	10c00025 	stbio	r3,0(r2)
   18b24:	0001883a 	nop
   18b28:	e037883a 	mov	sp,fp
   18b2c:	df000017 	ldw	fp,0(sp)
   18b30:	dec00104 	addi	sp,sp,4
   18b34:	f800283a 	ret

00018b38 <alt_write_native_16bit>:
   18b38:	defffd04 	addi	sp,sp,-12
   18b3c:	df000215 	stw	fp,8(sp)
   18b40:	df000204 	addi	fp,sp,8
   18b44:	e13ffe15 	stw	r4,-8(fp)
   18b48:	e17fff15 	stw	r5,-4(fp)
   18b4c:	e0bfff17 	ldw	r2,-4(fp)
   18b50:	10ffffcc 	andi	r3,r2,65535
   18b54:	e0bffe17 	ldw	r2,-8(fp)
   18b58:	10c0002d 	sthio	r3,0(r2)
   18b5c:	0001883a 	nop
   18b60:	e037883a 	mov	sp,fp
   18b64:	df000017 	ldw	fp,0(sp)
   18b68:	dec00104 	addi	sp,sp,4
   18b6c:	f800283a 	ret

00018b70 <alt_write_native_32bit>:
   18b70:	defffd04 	addi	sp,sp,-12
   18b74:	df000215 	stw	fp,8(sp)
   18b78:	df000204 	addi	fp,sp,8
   18b7c:	e13ffe15 	stw	r4,-8(fp)
   18b80:	e17fff15 	stw	r5,-4(fp)
   18b84:	e0ffff17 	ldw	r3,-4(fp)
   18b88:	e0bffe17 	ldw	r2,-8(fp)
   18b8c:	10c00035 	stwio	r3,0(r2)
   18b90:	0001883a 	nop
   18b94:	e037883a 	mov	sp,fp
   18b98:	df000017 	ldw	fp,0(sp)
   18b9c:	dec00104 	addi	sp,sp,4
   18ba0:	f800283a 	ret

00018ba4 <alt_set_flash_width_func>:
   18ba4:	defffd04 	addi	sp,sp,-12
   18ba8:	df000215 	stw	fp,8(sp)
   18bac:	df000204 	addi	fp,sp,8
   18bb0:	e13fff15 	stw	r4,-4(fp)
   18bb4:	e03ffe15 	stw	zero,-8(fp)
   18bb8:	e0bfff17 	ldw	r2,-4(fp)
   18bbc:	10802f17 	ldw	r2,188(r2)
   18bc0:	10c000a0 	cmpeqi	r3,r2,2
   18bc4:	1800231e 	bne	r3,zero,18c54 <alt_set_flash_width_func+0xb0>
   18bc8:	10c00120 	cmpeqi	r3,r2,4
   18bcc:	1800371e 	bne	r3,zero,18cac <alt_set_flash_width_func+0x108>
   18bd0:	10800060 	cmpeqi	r2,r2,1
   18bd4:	10003e26 	beq	r2,zero,18cd0 <alt_set_flash_width_func+0x12c>
   18bd8:	e0ffff17 	ldw	r3,-4(fp)
   18bdc:	008000b4 	movhi	r2,2
   18be0:	10a2c004 	addi	r2,r2,-29952
   18be4:	18803615 	stw	r2,216(r3)
   18be8:	e0bfff17 	ldw	r2,-4(fp)
   18bec:	10803017 	ldw	r2,192(r2)
   18bf0:	10800058 	cmpnei	r2,r2,1
   18bf4:	1000051e 	bne	r2,zero,18c0c <alt_set_flash_width_func+0x68>
   18bf8:	e0ffff17 	ldw	r3,-4(fp)
   18bfc:	008000b4 	movhi	r2,2
   18c00:	10a24204 	addi	r2,r2,-30456
   18c04:	18803415 	stw	r2,208(r3)
   18c08:	00003406 	br	18cdc <alt_set_flash_width_func+0x138>
   18c0c:	e0bfff17 	ldw	r2,-4(fp)
   18c10:	10803017 	ldw	r2,192(r2)
   18c14:	10800098 	cmpnei	r2,r2,2
   18c18:	1000051e 	bne	r2,zero,18c30 <alt_set_flash_width_func+0x8c>
   18c1c:	e0ffff17 	ldw	r3,-4(fp)
   18c20:	008000b4 	movhi	r2,2
   18c24:	10a25304 	addi	r2,r2,-30388
   18c28:	18803415 	stw	r2,208(r3)
   18c2c:	00002b06 	br	18cdc <alt_set_flash_width_func+0x138>
   18c30:	e0bfff17 	ldw	r2,-4(fp)
   18c34:	10803017 	ldw	r2,192(r2)
   18c38:	10800118 	cmpnei	r2,r2,4
   18c3c:	1000271e 	bne	r2,zero,18cdc <alt_set_flash_width_func+0x138>
   18c40:	e0ffff17 	ldw	r3,-4(fp)
   18c44:	008000b4 	movhi	r2,2
   18c48:	10a27104 	addi	r2,r2,-30268
   18c4c:	18803415 	stw	r2,208(r3)
   18c50:	00002206 	br	18cdc <alt_set_flash_width_func+0x138>
   18c54:	e0ffff17 	ldw	r3,-4(fp)
   18c58:	008000b4 	movhi	r2,2
   18c5c:	10a2ce04 	addi	r2,r2,-29896
   18c60:	18803615 	stw	r2,216(r3)
   18c64:	e0bfff17 	ldw	r2,-4(fp)
   18c68:	10803017 	ldw	r2,192(r2)
   18c6c:	10800098 	cmpnei	r2,r2,2
   18c70:	1000051e 	bne	r2,zero,18c88 <alt_set_flash_width_func+0xe4>
   18c74:	e0ffff17 	ldw	r3,-4(fp)
   18c78:	008000b4 	movhi	r2,2
   18c7c:	10a28504 	addi	r2,r2,-30188
   18c80:	18803415 	stw	r2,208(r3)
   18c84:	00001706 	br	18ce4 <alt_set_flash_width_func+0x140>
   18c88:	e0bfff17 	ldw	r2,-4(fp)
   18c8c:	10803017 	ldw	r2,192(r2)
   18c90:	10800118 	cmpnei	r2,r2,4
   18c94:	1000131e 	bne	r2,zero,18ce4 <alt_set_flash_width_func+0x140>
   18c98:	e0ffff17 	ldw	r3,-4(fp)
   18c9c:	008000b4 	movhi	r2,2
   18ca0:	10a29804 	addi	r2,r2,-30112
   18ca4:	18803415 	stw	r2,208(r3)
   18ca8:	00000e06 	br	18ce4 <alt_set_flash_width_func+0x140>
   18cac:	e0ffff17 	ldw	r3,-4(fp)
   18cb0:	008000b4 	movhi	r2,2
   18cb4:	10a2dc04 	addi	r2,r2,-29840
   18cb8:	18803615 	stw	r2,216(r3)
   18cbc:	e0ffff17 	ldw	r3,-4(fp)
   18cc0:	008000b4 	movhi	r2,2
   18cc4:	10a2ac04 	addi	r2,r2,-30032
   18cc8:	18803415 	stw	r2,208(r3)
   18ccc:	00000606 	br	18ce8 <alt_set_flash_width_func+0x144>
   18cd0:	00bffcc4 	movi	r2,-13
   18cd4:	e0bffe15 	stw	r2,-8(fp)
   18cd8:	00000306 	br	18ce8 <alt_set_flash_width_func+0x144>
   18cdc:	0001883a 	nop
   18ce0:	00000106 	br	18ce8 <alt_set_flash_width_func+0x144>
   18ce4:	0001883a 	nop
   18ce8:	e0bffe17 	ldw	r2,-8(fp)
   18cec:	1000191e 	bne	r2,zero,18d54 <alt_set_flash_width_func+0x1b0>
   18cf0:	e0bfff17 	ldw	r2,-4(fp)
   18cf4:	10803017 	ldw	r2,192(r2)
   18cf8:	10c000a0 	cmpeqi	r3,r2,2
   18cfc:	1800091e 	bne	r3,zero,18d24 <alt_set_flash_width_func+0x180>
   18d00:	10c00120 	cmpeqi	r3,r2,4
   18d04:	18000c1e 	bne	r3,zero,18d38 <alt_set_flash_width_func+0x194>
   18d08:	10800060 	cmpeqi	r2,r2,1
   18d0c:	10000f26 	beq	r2,zero,18d4c <alt_set_flash_width_func+0x1a8>
   18d10:	e0ffff17 	ldw	r3,-4(fp)
   18d14:	008000b4 	movhi	r2,2
   18d18:	10a21304 	addi	r2,r2,-30644
   18d1c:	18803515 	stw	r2,212(r3)
   18d20:	00000c06 	br	18d54 <alt_set_flash_width_func+0x1b0>
   18d24:	e0ffff17 	ldw	r3,-4(fp)
   18d28:	008000b4 	movhi	r2,2
   18d2c:	10a22204 	addi	r2,r2,-30584
   18d30:	18803515 	stw	r2,212(r3)
   18d34:	00000706 	br	18d54 <alt_set_flash_width_func+0x1b0>
   18d38:	e0ffff17 	ldw	r3,-4(fp)
   18d3c:	008000b4 	movhi	r2,2
   18d40:	10a23204 	addi	r2,r2,-30520
   18d44:	18803515 	stw	r2,212(r3)
   18d48:	00000206 	br	18d54 <alt_set_flash_width_func+0x1b0>
   18d4c:	00bffcc4 	movi	r2,-13
   18d50:	e0bffe15 	stw	r2,-8(fp)
   18d54:	e0bffe17 	ldw	r2,-8(fp)
   18d58:	e037883a 	mov	sp,fp
   18d5c:	df000017 	ldw	fp,0(sp)
   18d60:	dec00104 	addi	sp,sp,4
   18d64:	f800283a 	ret

00018d68 <alt_set_flash_algorithm_func>:
   18d68:	defffd04 	addi	sp,sp,-12
   18d6c:	df000215 	stw	fp,8(sp)
   18d70:	df000204 	addi	fp,sp,8
   18d74:	e13fff15 	stw	r4,-4(fp)
   18d78:	e03ffe15 	stw	zero,-8(fp)
   18d7c:	e0bfff17 	ldw	r2,-4(fp)
   18d80:	10802e17 	ldw	r2,184(r2)
   18d84:	10c000a0 	cmpeqi	r3,r2,2
   18d88:	1800051e 	bne	r3,zero,18da0 <alt_set_flash_algorithm_func+0x38>
   18d8c:	10c000e0 	cmpeqi	r3,r2,3
   18d90:	18000c1e 	bne	r3,zero,18dc4 <alt_set_flash_algorithm_func+0x5c>
   18d94:	10800060 	cmpeqi	r2,r2,1
   18d98:	10000a1e 	bne	r2,zero,18dc4 <alt_set_flash_algorithm_func+0x5c>
   18d9c:	00001206 	br	18de8 <alt_set_flash_algorithm_func+0x80>
   18da0:	e0ffff17 	ldw	r3,-4(fp)
   18da4:	008000b4 	movhi	r2,2
   18da8:	10ba0d04 	addi	r2,r2,-6092
   18dac:	18800815 	stw	r2,32(r3)
   18db0:	e0ffff17 	ldw	r3,-4(fp)
   18db4:	008000b4 	movhi	r2,2
   18db8:	10b9f304 	addi	r2,r2,-6196
   18dbc:	18800915 	stw	r2,36(r3)
   18dc0:	00000b06 	br	18df0 <alt_set_flash_algorithm_func+0x88>
   18dc4:	e0ffff17 	ldw	r3,-4(fp)
   18dc8:	008000b4 	movhi	r2,2
   18dcc:	10bb2b04 	addi	r2,r2,-4948
   18dd0:	18800815 	stw	r2,32(r3)
   18dd4:	e0ffff17 	ldw	r3,-4(fp)
   18dd8:	008000b4 	movhi	r2,2
   18ddc:	10bb0b04 	addi	r2,r2,-5076
   18de0:	18800915 	stw	r2,36(r3)
   18de4:	00000206 	br	18df0 <alt_set_flash_algorithm_func+0x88>
   18de8:	00bffec4 	movi	r2,-5
   18dec:	e0bffe15 	stw	r2,-8(fp)
   18df0:	e0bffe17 	ldw	r2,-8(fp)
   18df4:	e037883a 	mov	sp,fp
   18df8:	df000017 	ldw	fp,0(sp)
   18dfc:	dec00104 	addi	sp,sp,4
   18e00:	f800283a 	ret

00018e04 <alt_read_16bit_query_entry>:
   18e04:	defffb04 	addi	sp,sp,-20
   18e08:	dfc00415 	stw	ra,16(sp)
   18e0c:	df000315 	stw	fp,12(sp)
   18e10:	df000304 	addi	fp,sp,12
   18e14:	e13ffe15 	stw	r4,-8(fp)
   18e18:	e17fff15 	stw	r5,-4(fp)
   18e1c:	e0bffe17 	ldw	r2,-8(fp)
   18e20:	10803517 	ldw	r2,212(r2)
   18e24:	e17fff17 	ldw	r5,-4(fp)
   18e28:	e13ffe17 	ldw	r4,-8(fp)
   18e2c:	103ee83a 	callr	r2
   18e30:	10803fcc 	andi	r2,r2,255
   18e34:	e0bffd0d 	sth	r2,-12(fp)
   18e38:	e0bffe17 	ldw	r2,-8(fp)
   18e3c:	10803517 	ldw	r2,212(r2)
   18e40:	e0ffff17 	ldw	r3,-4(fp)
   18e44:	18c00044 	addi	r3,r3,1
   18e48:	180b883a 	mov	r5,r3
   18e4c:	e13ffe17 	ldw	r4,-8(fp)
   18e50:	103ee83a 	callr	r2
   18e54:	10803fcc 	andi	r2,r2,255
   18e58:	1004923a 	slli	r2,r2,8
   18e5c:	1007883a 	mov	r3,r2
   18e60:	e0bffd0b 	ldhu	r2,-12(fp)
   18e64:	1884b03a 	or	r2,r3,r2
   18e68:	e0bffd0d 	sth	r2,-12(fp)
   18e6c:	e0bffd0b 	ldhu	r2,-12(fp)
   18e70:	e037883a 	mov	sp,fp
   18e74:	dfc00117 	ldw	ra,4(sp)
   18e78:	df000017 	ldw	fp,0(sp)
   18e7c:	dec00204 	addi	sp,sp,8
   18e80:	f800283a 	ret

00018e84 <alt_read_cfi_table>:
   18e84:	defff304 	addi	sp,sp,-52
   18e88:	dfc00c15 	stw	ra,48(sp)
   18e8c:	df000b15 	stw	fp,44(sp)
   18e90:	df000b04 	addi	fp,sp,44
   18e94:	e13fff15 	stw	r4,-4(fp)
   18e98:	e03ff715 	stw	zero,-36(fp)
   18e9c:	e03ff815 	stw	zero,-32(fp)
   18ea0:	e03ff915 	stw	zero,-28(fp)
   18ea4:	e13fff17 	ldw	r4,-4(fp)
   18ea8:	0019bbc0 	call	19bbc <alt_check_primary_table>
   18eac:	e0bff715 	stw	r2,-36(fp)
   18eb0:	e0bff717 	ldw	r2,-36(fp)
   18eb4:	10015f1e 	bne	r2,zero,19434 <alt_read_cfi_table+0x5b0>
   18eb8:	e0bfff17 	ldw	r2,-4(fp)
   18ebc:	10803517 	ldw	r2,212(r2)
   18ec0:	014004c4 	movi	r5,19
   18ec4:	e13fff17 	ldw	r4,-4(fp)
   18ec8:	103ee83a 	callr	r2
   18ecc:	10c03fcc 	andi	r3,r2,255
   18ed0:	e0bfff17 	ldw	r2,-4(fp)
   18ed4:	10c02e15 	stw	r3,184(r2)
   18ed8:	e0bfff17 	ldw	r2,-4(fp)
   18edc:	10803517 	ldw	r2,212(r2)
   18ee0:	014007c4 	movi	r5,31
   18ee4:	e13fff17 	ldw	r4,-4(fp)
   18ee8:	103ee83a 	callr	r2
   18eec:	10803fcc 	andi	r2,r2,255
   18ef0:	e0bffa15 	stw	r2,-24(fp)
   18ef4:	e0bfff17 	ldw	r2,-4(fp)
   18ef8:	10803517 	ldw	r2,212(r2)
   18efc:	014008c4 	movi	r5,35
   18f00:	e13fff17 	ldw	r4,-4(fp)
   18f04:	103ee83a 	callr	r2
   18f08:	10803fcc 	andi	r2,r2,255
   18f0c:	e0bffb15 	stw	r2,-20(fp)
   18f10:	e0bffa17 	ldw	r2,-24(fp)
   18f14:	10000226 	beq	r2,zero,18f20 <alt_read_cfi_table+0x9c>
   18f18:	e0bffb17 	ldw	r2,-20(fp)
   18f1c:	1000041e 	bne	r2,zero,18f30 <alt_read_cfi_table+0xac>
   18f20:	e0bfff17 	ldw	r2,-4(fp)
   18f24:	00c0fa04 	movi	r3,1000
   18f28:	10c03115 	stw	r3,196(r2)
   18f2c:	00000706 	br	18f4c <alt_read_cfi_table+0xc8>
   18f30:	00c00044 	movi	r3,1
   18f34:	e0bffa17 	ldw	r2,-24(fp)
   18f38:	1886983a 	sll	r3,r3,r2
   18f3c:	e0bffb17 	ldw	r2,-20(fp)
   18f40:	1886983a 	sll	r3,r3,r2
   18f44:	e0bfff17 	ldw	r2,-4(fp)
   18f48:	10c03115 	stw	r3,196(r2)
   18f4c:	e0bfff17 	ldw	r2,-4(fp)
   18f50:	10803517 	ldw	r2,212(r2)
   18f54:	01400844 	movi	r5,33
   18f58:	e13fff17 	ldw	r4,-4(fp)
   18f5c:	103ee83a 	callr	r2
   18f60:	10803fcc 	andi	r2,r2,255
   18f64:	e0bffa15 	stw	r2,-24(fp)
   18f68:	e0bfff17 	ldw	r2,-4(fp)
   18f6c:	10803517 	ldw	r2,212(r2)
   18f70:	01400944 	movi	r5,37
   18f74:	e13fff17 	ldw	r4,-4(fp)
   18f78:	103ee83a 	callr	r2
   18f7c:	10803fcc 	andi	r2,r2,255
   18f80:	e0bffb15 	stw	r2,-20(fp)
   18f84:	e0bffa17 	ldw	r2,-24(fp)
   18f88:	10000226 	beq	r2,zero,18f94 <alt_read_cfi_table+0x110>
   18f8c:	e0bffb17 	ldw	r2,-20(fp)
   18f90:	1000051e 	bne	r2,zero,18fa8 <alt_read_cfi_table+0x124>
   18f94:	e0ffff17 	ldw	r3,-4(fp)
   18f98:	00804c74 	movhi	r2,305
   18f9c:	108b4004 	addi	r2,r2,11520
   18fa0:	18803215 	stw	r2,200(r3)
   18fa4:	00000806 	br	18fc8 <alt_read_cfi_table+0x144>
   18fa8:	00c00044 	movi	r3,1
   18fac:	e0bffa17 	ldw	r2,-24(fp)
   18fb0:	1886983a 	sll	r3,r3,r2
   18fb4:	e0bffb17 	ldw	r2,-20(fp)
   18fb8:	1884983a 	sll	r2,r3,r2
   18fbc:	10c0fa24 	muli	r3,r2,1000
   18fc0:	e0bfff17 	ldw	r2,-4(fp)
   18fc4:	10c03215 	stw	r3,200(r2)
   18fc8:	e0bfff17 	ldw	r2,-4(fp)
   18fcc:	10803517 	ldw	r2,212(r2)
   18fd0:	014009c4 	movi	r5,39
   18fd4:	e13fff17 	ldw	r4,-4(fp)
   18fd8:	103ee83a 	callr	r2
   18fdc:	10803fcc 	andi	r2,r2,255
   18fe0:	00c00044 	movi	r3,1
   18fe4:	1884983a 	sll	r2,r3,r2
   18fe8:	e0bffc15 	stw	r2,-16(fp)
   18fec:	e0bfff17 	ldw	r2,-4(fp)
   18ff0:	10803517 	ldw	r2,212(r2)
   18ff4:	01400b04 	movi	r5,44
   18ff8:	e13fff17 	ldw	r4,-4(fp)
   18ffc:	103ee83a 	callr	r2
   19000:	10c03fcc 	andi	r3,r2,255
   19004:	e0bfff17 	ldw	r2,-4(fp)
   19008:	10c00c15 	stw	r3,48(r2)
   1900c:	e0bfff17 	ldw	r2,-4(fp)
   19010:	10800c17 	ldw	r2,48(r2)
   19014:	10800250 	cmplti	r2,r2,9
   19018:	1000031e 	bne	r2,zero,19028 <alt_read_cfi_table+0x1a4>
   1901c:	00bffd04 	movi	r2,-12
   19020:	e0bff715 	stw	r2,-36(fp)
   19024:	00006006 	br	191a8 <alt_read_cfi_table+0x324>
   19028:	e03ff515 	stw	zero,-44(fp)
   1902c:	00005506 	br	19184 <alt_read_cfi_table+0x300>
   19030:	e0bff517 	ldw	r2,-44(fp)
   19034:	1085883a 	add	r2,r2,r2
   19038:	1085883a 	add	r2,r2,r2
   1903c:	10800b44 	addi	r2,r2,45
   19040:	100b883a 	mov	r5,r2
   19044:	e13fff17 	ldw	r4,-4(fp)
   19048:	0018e040 	call	18e04 <alt_read_16bit_query_entry>
   1904c:	10ffffcc 	andi	r3,r2,65535
   19050:	e13fff17 	ldw	r4,-4(fp)
   19054:	e0bff517 	ldw	r2,-44(fp)
   19058:	1004913a 	slli	r2,r2,4
   1905c:	2085883a 	add	r2,r4,r2
   19060:	10800f04 	addi	r2,r2,60
   19064:	10c00015 	stw	r3,0(r2)
   19068:	e0ffff17 	ldw	r3,-4(fp)
   1906c:	e0bff517 	ldw	r2,-44(fp)
   19070:	1004913a 	slli	r2,r2,4
   19074:	1885883a 	add	r2,r3,r2
   19078:	10800f04 	addi	r2,r2,60
   1907c:	10800017 	ldw	r2,0(r2)
   19080:	10c00044 	addi	r3,r2,1
   19084:	e13fff17 	ldw	r4,-4(fp)
   19088:	e0bff517 	ldw	r2,-44(fp)
   1908c:	1004913a 	slli	r2,r2,4
   19090:	2085883a 	add	r2,r4,r2
   19094:	10800f04 	addi	r2,r2,60
   19098:	10c00015 	stw	r3,0(r2)
   1909c:	e0bff517 	ldw	r2,-44(fp)
   190a0:	1085883a 	add	r2,r2,r2
   190a4:	1085883a 	add	r2,r2,r2
   190a8:	10800bc4 	addi	r2,r2,47
   190ac:	100b883a 	mov	r5,r2
   190b0:	e13fff17 	ldw	r4,-4(fp)
   190b4:	0018e040 	call	18e04 <alt_read_16bit_query_entry>
   190b8:	10ffffcc 	andi	r3,r2,65535
   190bc:	e13fff17 	ldw	r4,-4(fp)
   190c0:	e0bff517 	ldw	r2,-44(fp)
   190c4:	10800104 	addi	r2,r2,4
   190c8:	1004913a 	slli	r2,r2,4
   190cc:	2085883a 	add	r2,r4,r2
   190d0:	10c00015 	stw	r3,0(r2)
   190d4:	e0ffff17 	ldw	r3,-4(fp)
   190d8:	e0bff517 	ldw	r2,-44(fp)
   190dc:	10800104 	addi	r2,r2,4
   190e0:	1004913a 	slli	r2,r2,4
   190e4:	1885883a 	add	r2,r3,r2
   190e8:	10800017 	ldw	r2,0(r2)
   190ec:	1006923a 	slli	r3,r2,8
   190f0:	e13fff17 	ldw	r4,-4(fp)
   190f4:	e0bff517 	ldw	r2,-44(fp)
   190f8:	10800104 	addi	r2,r2,4
   190fc:	1004913a 	slli	r2,r2,4
   19100:	2085883a 	add	r2,r4,r2
   19104:	10c00015 	stw	r3,0(r2)
   19108:	e0ffff17 	ldw	r3,-4(fp)
   1910c:	e0bff517 	ldw	r2,-44(fp)
   19110:	1004913a 	slli	r2,r2,4
   19114:	1885883a 	add	r2,r3,r2
   19118:	10800f04 	addi	r2,r2,60
   1911c:	10c00017 	ldw	r3,0(r2)
   19120:	e13fff17 	ldw	r4,-4(fp)
   19124:	e0bff517 	ldw	r2,-44(fp)
   19128:	10800104 	addi	r2,r2,4
   1912c:	1004913a 	slli	r2,r2,4
   19130:	2085883a 	add	r2,r4,r2
   19134:	10800017 	ldw	r2,0(r2)
   19138:	1887383a 	mul	r3,r3,r2
   1913c:	e13fff17 	ldw	r4,-4(fp)
   19140:	e0bff517 	ldw	r2,-44(fp)
   19144:	1004913a 	slli	r2,r2,4
   19148:	2085883a 	add	r2,r4,r2
   1914c:	10800e04 	addi	r2,r2,56
   19150:	10c00015 	stw	r3,0(r2)
   19154:	e0ffff17 	ldw	r3,-4(fp)
   19158:	e0bff517 	ldw	r2,-44(fp)
   1915c:	1004913a 	slli	r2,r2,4
   19160:	1885883a 	add	r2,r3,r2
   19164:	10800e04 	addi	r2,r2,56
   19168:	10800017 	ldw	r2,0(r2)
   1916c:	e0fff817 	ldw	r3,-32(fp)
   19170:	1885883a 	add	r2,r3,r2
   19174:	e0bff815 	stw	r2,-32(fp)
   19178:	e0bff517 	ldw	r2,-44(fp)
   1917c:	10800044 	addi	r2,r2,1
   19180:	e0bff515 	stw	r2,-44(fp)
   19184:	e0bfff17 	ldw	r2,-4(fp)
   19188:	10800c17 	ldw	r2,48(r2)
   1918c:	e0fff517 	ldw	r3,-44(fp)
   19190:	18bfa716 	blt	r3,r2,19030 <__alt_data_end+0xf0019030>
   19194:	e0fff817 	ldw	r3,-32(fp)
   19198:	e0bffc17 	ldw	r2,-16(fp)
   1919c:	18800226 	beq	r3,r2,191a8 <alt_read_cfi_table+0x324>
   191a0:	00bffb44 	movi	r2,-19
   191a4:	e0bff715 	stw	r2,-36(fp)
   191a8:	e0bfff17 	ldw	r2,-4(fp)
   191ac:	10803517 	ldw	r2,212(r2)
   191b0:	e0ffff17 	ldw	r3,-4(fp)
   191b4:	18c03317 	ldw	r3,204(r3)
   191b8:	18c003c4 	addi	r3,r3,15
   191bc:	180b883a 	mov	r5,r3
   191c0:	e13fff17 	ldw	r4,-4(fp)
   191c4:	103ee83a 	callr	r2
   191c8:	e0bffd05 	stb	r2,-12(fp)
   191cc:	e0bfff17 	ldw	r2,-4(fp)
   191d0:	10802e17 	ldw	r2,184(r2)
   191d4:	10800098 	cmpnei	r2,r2,2
   191d8:	1000601e 	bne	r2,zero,1935c <alt_read_cfi_table+0x4d8>
   191dc:	e0bffd03 	ldbu	r2,-12(fp)
   191e0:	108000d8 	cmpnei	r2,r2,3
   191e4:	10005d1e 	bne	r2,zero,1935c <alt_read_cfi_table+0x4d8>
   191e8:	e0bfff17 	ldw	r2,-4(fp)
   191ec:	10800c17 	ldw	r2,48(r2)
   191f0:	10bfffc4 	addi	r2,r2,-1
   191f4:	e0bff515 	stw	r2,-44(fp)
   191f8:	e03ff615 	stw	zero,-40(fp)
   191fc:	00005406 	br	19350 <alt_read_cfi_table+0x4cc>
   19200:	e0ffff17 	ldw	r3,-4(fp)
   19204:	e0bff517 	ldw	r2,-44(fp)
   19208:	1004913a 	slli	r2,r2,4
   1920c:	1885883a 	add	r2,r3,r2
   19210:	10800e04 	addi	r2,r2,56
   19214:	10800017 	ldw	r2,0(r2)
   19218:	e0bffe15 	stw	r2,-8(fp)
   1921c:	e0ffff17 	ldw	r3,-4(fp)
   19220:	e0bff617 	ldw	r2,-40(fp)
   19224:	1004913a 	slli	r2,r2,4
   19228:	1885883a 	add	r2,r3,r2
   1922c:	10800e04 	addi	r2,r2,56
   19230:	10c00017 	ldw	r3,0(r2)
   19234:	e13fff17 	ldw	r4,-4(fp)
   19238:	e0bff517 	ldw	r2,-44(fp)
   1923c:	1004913a 	slli	r2,r2,4
   19240:	2085883a 	add	r2,r4,r2
   19244:	10800e04 	addi	r2,r2,56
   19248:	10c00015 	stw	r3,0(r2)
   1924c:	e0ffff17 	ldw	r3,-4(fp)
   19250:	e0bff617 	ldw	r2,-40(fp)
   19254:	1004913a 	slli	r2,r2,4
   19258:	1885883a 	add	r2,r3,r2
   1925c:	10800e04 	addi	r2,r2,56
   19260:	e0fffe17 	ldw	r3,-8(fp)
   19264:	10c00015 	stw	r3,0(r2)
   19268:	e0ffff17 	ldw	r3,-4(fp)
   1926c:	e0bff517 	ldw	r2,-44(fp)
   19270:	10800104 	addi	r2,r2,4
   19274:	1004913a 	slli	r2,r2,4
   19278:	1885883a 	add	r2,r3,r2
   1927c:	10800017 	ldw	r2,0(r2)
   19280:	e0bffe15 	stw	r2,-8(fp)
   19284:	e0ffff17 	ldw	r3,-4(fp)
   19288:	e0bff617 	ldw	r2,-40(fp)
   1928c:	10800104 	addi	r2,r2,4
   19290:	1004913a 	slli	r2,r2,4
   19294:	1885883a 	add	r2,r3,r2
   19298:	10c00017 	ldw	r3,0(r2)
   1929c:	e13fff17 	ldw	r4,-4(fp)
   192a0:	e0bff517 	ldw	r2,-44(fp)
   192a4:	10800104 	addi	r2,r2,4
   192a8:	1004913a 	slli	r2,r2,4
   192ac:	2085883a 	add	r2,r4,r2
   192b0:	10c00015 	stw	r3,0(r2)
   192b4:	e0ffff17 	ldw	r3,-4(fp)
   192b8:	e0bff617 	ldw	r2,-40(fp)
   192bc:	10800104 	addi	r2,r2,4
   192c0:	1004913a 	slli	r2,r2,4
   192c4:	1885883a 	add	r2,r3,r2
   192c8:	e0fffe17 	ldw	r3,-8(fp)
   192cc:	10c00015 	stw	r3,0(r2)
   192d0:	e0ffff17 	ldw	r3,-4(fp)
   192d4:	e0bff517 	ldw	r2,-44(fp)
   192d8:	1004913a 	slli	r2,r2,4
   192dc:	1885883a 	add	r2,r3,r2
   192e0:	10800f04 	addi	r2,r2,60
   192e4:	10800017 	ldw	r2,0(r2)
   192e8:	e0bffe15 	stw	r2,-8(fp)
   192ec:	e0ffff17 	ldw	r3,-4(fp)
   192f0:	e0bff617 	ldw	r2,-40(fp)
   192f4:	1004913a 	slli	r2,r2,4
   192f8:	1885883a 	add	r2,r3,r2
   192fc:	10800f04 	addi	r2,r2,60
   19300:	10c00017 	ldw	r3,0(r2)
   19304:	e13fff17 	ldw	r4,-4(fp)
   19308:	e0bff517 	ldw	r2,-44(fp)
   1930c:	1004913a 	slli	r2,r2,4
   19310:	2085883a 	add	r2,r4,r2
   19314:	10800f04 	addi	r2,r2,60
   19318:	10c00015 	stw	r3,0(r2)
   1931c:	e0ffff17 	ldw	r3,-4(fp)
   19320:	e0bff617 	ldw	r2,-40(fp)
   19324:	1004913a 	slli	r2,r2,4
   19328:	1885883a 	add	r2,r3,r2
   1932c:	10800f04 	addi	r2,r2,60
   19330:	e0fffe17 	ldw	r3,-8(fp)
   19334:	10c00015 	stw	r3,0(r2)
   19338:	e0bff517 	ldw	r2,-44(fp)
   1933c:	10bfffc4 	addi	r2,r2,-1
   19340:	e0bff515 	stw	r2,-44(fp)
   19344:	e0bff617 	ldw	r2,-40(fp)
   19348:	10800044 	addi	r2,r2,1
   1934c:	e0bff615 	stw	r2,-40(fp)
   19350:	e0bff617 	ldw	r2,-40(fp)
   19354:	e0fff517 	ldw	r3,-44(fp)
   19358:	18bfa90e 	bge	r3,r2,19200 <__alt_data_end+0xf0019200>
   1935c:	e03ff515 	stw	zero,-44(fp)
   19360:	00001306 	br	193b0 <alt_read_cfi_table+0x52c>
   19364:	e0ffff17 	ldw	r3,-4(fp)
   19368:	e0bff517 	ldw	r2,-44(fp)
   1936c:	1004913a 	slli	r2,r2,4
   19370:	1885883a 	add	r2,r3,r2
   19374:	10800d04 	addi	r2,r2,52
   19378:	e0fff917 	ldw	r3,-28(fp)
   1937c:	10c00015 	stw	r3,0(r2)
   19380:	e0ffff17 	ldw	r3,-4(fp)
   19384:	e0bff517 	ldw	r2,-44(fp)
   19388:	1004913a 	slli	r2,r2,4
   1938c:	1885883a 	add	r2,r3,r2
   19390:	10800e04 	addi	r2,r2,56
   19394:	10800017 	ldw	r2,0(r2)
   19398:	e0fff917 	ldw	r3,-28(fp)
   1939c:	1885883a 	add	r2,r3,r2
   193a0:	e0bff915 	stw	r2,-28(fp)
   193a4:	e0bff517 	ldw	r2,-44(fp)
   193a8:	10800044 	addi	r2,r2,1
   193ac:	e0bff515 	stw	r2,-44(fp)
   193b0:	e0bfff17 	ldw	r2,-4(fp)
   193b4:	10800c17 	ldw	r2,48(r2)
   193b8:	e0fff517 	ldw	r3,-44(fp)
   193bc:	18bfe916 	blt	r3,r2,19364 <__alt_data_end+0xf0019364>
   193c0:	e0bfff17 	ldw	r2,-4(fp)
   193c4:	10802e17 	ldw	r2,184(r2)
   193c8:	10c000a0 	cmpeqi	r3,r2,2
   193cc:	1800051e 	bne	r3,zero,193e4 <alt_read_cfi_table+0x560>
   193d0:	10c000e0 	cmpeqi	r3,r2,3
   193d4:	18000c1e 	bne	r3,zero,19408 <alt_read_cfi_table+0x584>
   193d8:	10800060 	cmpeqi	r2,r2,1
   193dc:	10000a1e 	bne	r2,zero,19408 <alt_read_cfi_table+0x584>
   193e0:	00001206 	br	1942c <alt_read_cfi_table+0x5a8>
   193e4:	e0bfff17 	ldw	r2,-4(fp)
   193e8:	10803417 	ldw	r2,208(r2)
   193ec:	e0ffff17 	ldw	r3,-4(fp)
   193f0:	18c00a17 	ldw	r3,40(r3)
   193f4:	01803c04 	movi	r6,240
   193f8:	01401544 	movi	r5,85
   193fc:	1809883a 	mov	r4,r3
   19400:	103ee83a 	callr	r2
   19404:	00000b06 	br	19434 <alt_read_cfi_table+0x5b0>
   19408:	e0bfff17 	ldw	r2,-4(fp)
   1940c:	10803417 	ldw	r2,208(r2)
   19410:	e0ffff17 	ldw	r3,-4(fp)
   19414:	18c00a17 	ldw	r3,40(r3)
   19418:	01803fc4 	movi	r6,255
   1941c:	01401544 	movi	r5,85
   19420:	1809883a 	mov	r4,r3
   19424:	103ee83a 	callr	r2
   19428:	00000206 	br	19434 <alt_read_cfi_table+0x5b0>
   1942c:	00bffec4 	movi	r2,-5
   19430:	e0bff715 	stw	r2,-36(fp)
   19434:	e0bff717 	ldw	r2,-36(fp)
   19438:	e037883a 	mov	sp,fp
   1943c:	dfc00117 	ldw	ra,4(sp)
   19440:	df000017 	ldw	fp,0(sp)
   19444:	dec00204 	addi	sp,sp,8
   19448:	f800283a 	ret

0001944c <alt_read_cfi_width>:
   1944c:	defff704 	addi	sp,sp,-36
   19450:	dfc00815 	stw	ra,32(sp)
   19454:	df000715 	stw	fp,28(sp)
   19458:	df000704 	addi	fp,sp,28
   1945c:	e13fff15 	stw	r4,-4(fp)
   19460:	e03ffa15 	stw	zero,-24(fp)
   19464:	e0bfff17 	ldw	r2,-4(fp)
   19468:	10800a17 	ldw	r2,40(r2)
   1946c:	01802604 	movi	r6,152
   19470:	01401544 	movi	r5,85
   19474:	1009883a 	mov	r4,r2
   19478:	00189080 	call	18908 <alt_write_flash_command_8bit_device_8bit_mode>
   1947c:	e03ff915 	stw	zero,-28(fp)
   19480:	00000f06 	br	194c0 <alt_read_cfi_width+0x74>
   19484:	e0bfff17 	ldw	r2,-4(fp)
   19488:	10800a17 	ldw	r2,40(r2)
   1948c:	e0fff917 	ldw	r3,-28(fp)
   19490:	18c00404 	addi	r3,r3,16
   19494:	10c5883a 	add	r2,r2,r3
   19498:	10800023 	ldbuio	r2,0(r2)
   1949c:	10803fcc 	andi	r2,r2,255
   194a0:	1009883a 	mov	r4,r2
   194a4:	e0fffb84 	addi	r3,fp,-18
   194a8:	e0bff917 	ldw	r2,-28(fp)
   194ac:	1885883a 	add	r2,r3,r2
   194b0:	11000005 	stb	r4,0(r2)
   194b4:	e0bff917 	ldw	r2,-28(fp)
   194b8:	10800044 	addi	r2,r2,1
   194bc:	e0bff915 	stw	r2,-28(fp)
   194c0:	e0bff917 	ldw	r2,-28(fp)
   194c4:	108000d0 	cmplti	r2,r2,3
   194c8:	103fee1e 	bne	r2,zero,19484 <__alt_data_end+0xf0019484>
   194cc:	e0bffb83 	ldbu	r2,-18(fp)
   194d0:	10803fcc 	andi	r2,r2,255
   194d4:	10801458 	cmpnei	r2,r2,81
   194d8:	10001d1e 	bne	r2,zero,19550 <alt_read_cfi_width+0x104>
   194dc:	e0bffbc3 	ldbu	r2,-17(fp)
   194e0:	10803fcc 	andi	r2,r2,255
   194e4:	10801498 	cmpnei	r2,r2,82
   194e8:	1000191e 	bne	r2,zero,19550 <alt_read_cfi_width+0x104>
   194ec:	e0bffc03 	ldbu	r2,-16(fp)
   194f0:	10803fcc 	andi	r2,r2,255
   194f4:	10801658 	cmpnei	r2,r2,89
   194f8:	1000151e 	bne	r2,zero,19550 <alt_read_cfi_width+0x104>
   194fc:	e0bfff17 	ldw	r2,-4(fp)
   19500:	00c00044 	movi	r3,1
   19504:	10c02f15 	stw	r3,188(r2)
   19508:	e0bfff17 	ldw	r2,-4(fp)
   1950c:	00c00044 	movi	r3,1
   19510:	10c03015 	stw	r3,192(r2)
   19514:	e0bfff17 	ldw	r2,-4(fp)
   19518:	10800a17 	ldw	r2,40(r2)
   1951c:	10800a04 	addi	r2,r2,40
   19520:	1080002b 	ldhuio	r2,0(r2)
   19524:	10bfffcc 	andi	r2,r2,65535
   19528:	e0bffb0d 	sth	r2,-20(fp)
   1952c:	e0bffb0b 	ldhu	r2,-20(fp)
   19530:	10800044 	addi	r2,r2,1
   19534:	e0bffb0d 	sth	r2,-20(fp)
   19538:	e0bffb0b 	ldhu	r2,-20(fp)
   1953c:	1080004c 	andi	r2,r2,1
   19540:	1001981e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19544:	00bffb44 	movi	r2,-19
   19548:	e0bffa15 	stw	r2,-24(fp)
   1954c:	00019506 	br	19ba4 <alt_read_cfi_width+0x758>
   19550:	e0bfff17 	ldw	r2,-4(fp)
   19554:	10800a17 	ldw	r2,40(r2)
   19558:	01802604 	movi	r6,152
   1955c:	01401544 	movi	r5,85
   19560:	1009883a 	mov	r4,r2
   19564:	001894c0 	call	1894c <alt_write_flash_command_16bit_device_8bit_mode>
   19568:	e03ff915 	stw	zero,-28(fp)
   1956c:	00000f06 	br	195ac <alt_read_cfi_width+0x160>
   19570:	e0bfff17 	ldw	r2,-4(fp)
   19574:	10800a17 	ldw	r2,40(r2)
   19578:	e0fff917 	ldw	r3,-28(fp)
   1957c:	18c00804 	addi	r3,r3,32
   19580:	10c5883a 	add	r2,r2,r3
   19584:	10800023 	ldbuio	r2,0(r2)
   19588:	10803fcc 	andi	r2,r2,255
   1958c:	1009883a 	mov	r4,r2
   19590:	e0fffb84 	addi	r3,fp,-18
   19594:	e0bff917 	ldw	r2,-28(fp)
   19598:	1885883a 	add	r2,r3,r2
   1959c:	11000005 	stb	r4,0(r2)
   195a0:	e0bff917 	ldw	r2,-28(fp)
   195a4:	10800044 	addi	r2,r2,1
   195a8:	e0bff915 	stw	r2,-28(fp)
   195ac:	e0bff917 	ldw	r2,-28(fp)
   195b0:	10800190 	cmplti	r2,r2,6
   195b4:	103fee1e 	bne	r2,zero,19570 <__alt_data_end+0xf0019570>
   195b8:	e0bffb83 	ldbu	r2,-18(fp)
   195bc:	10803fcc 	andi	r2,r2,255
   195c0:	10801458 	cmpnei	r2,r2,81
   195c4:	1000291e 	bne	r2,zero,1966c <alt_read_cfi_width+0x220>
   195c8:	e0bffbc3 	ldbu	r2,-17(fp)
   195cc:	10803fcc 	andi	r2,r2,255
   195d0:	10801458 	cmpnei	r2,r2,81
   195d4:	1000251e 	bne	r2,zero,1966c <alt_read_cfi_width+0x220>
   195d8:	e0bffc03 	ldbu	r2,-16(fp)
   195dc:	10803fcc 	andi	r2,r2,255
   195e0:	10801498 	cmpnei	r2,r2,82
   195e4:	1000211e 	bne	r2,zero,1966c <alt_read_cfi_width+0x220>
   195e8:	e0bffc43 	ldbu	r2,-15(fp)
   195ec:	10803fcc 	andi	r2,r2,255
   195f0:	10801498 	cmpnei	r2,r2,82
   195f4:	10001d1e 	bne	r2,zero,1966c <alt_read_cfi_width+0x220>
   195f8:	e0bffc83 	ldbu	r2,-14(fp)
   195fc:	10803fcc 	andi	r2,r2,255
   19600:	10801658 	cmpnei	r2,r2,89
   19604:	1000191e 	bne	r2,zero,1966c <alt_read_cfi_width+0x220>
   19608:	e0bffcc3 	ldbu	r2,-13(fp)
   1960c:	10803fcc 	andi	r2,r2,255
   19610:	10801658 	cmpnei	r2,r2,89
   19614:	1000151e 	bne	r2,zero,1966c <alt_read_cfi_width+0x220>
   19618:	e0bfff17 	ldw	r2,-4(fp)
   1961c:	00c00044 	movi	r3,1
   19620:	10c02f15 	stw	r3,188(r2)
   19624:	e0bfff17 	ldw	r2,-4(fp)
   19628:	00c00084 	movi	r3,2
   1962c:	10c03015 	stw	r3,192(r2)
   19630:	e0bfff17 	ldw	r2,-4(fp)
   19634:	10800a17 	ldw	r2,40(r2)
   19638:	10801404 	addi	r2,r2,80
   1963c:	1080002b 	ldhuio	r2,0(r2)
   19640:	10bfffcc 	andi	r2,r2,65535
   19644:	e0bffb0d 	sth	r2,-20(fp)
   19648:	e0bffb0b 	ldhu	r2,-20(fp)
   1964c:	10800044 	addi	r2,r2,1
   19650:	e0bffb0d 	sth	r2,-20(fp)
   19654:	e0bffb0b 	ldhu	r2,-20(fp)
   19658:	1080004c 	andi	r2,r2,1
   1965c:	1001511e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19660:	00bffb44 	movi	r2,-19
   19664:	e0bffa15 	stw	r2,-24(fp)
   19668:	00014e06 	br	19ba4 <alt_read_cfi_width+0x758>
   1966c:	e0bfff17 	ldw	r2,-4(fp)
   19670:	10800a17 	ldw	r2,40(r2)
   19674:	01802604 	movi	r6,152
   19678:	01401544 	movi	r5,85
   1967c:	1009883a 	mov	r4,r2
   19680:	0018a140 	call	18a14 <alt_write_flash_command_16bit_device_16bit_mode>
   19684:	e03ff915 	stw	zero,-28(fp)
   19688:	00000f06 	br	196c8 <alt_read_cfi_width+0x27c>
   1968c:	e0bfff17 	ldw	r2,-4(fp)
   19690:	10800a17 	ldw	r2,40(r2)
   19694:	e0fff917 	ldw	r3,-28(fp)
   19698:	18c00804 	addi	r3,r3,32
   1969c:	10c5883a 	add	r2,r2,r3
   196a0:	10800023 	ldbuio	r2,0(r2)
   196a4:	10803fcc 	andi	r2,r2,255
   196a8:	1009883a 	mov	r4,r2
   196ac:	e0fffb84 	addi	r3,fp,-18
   196b0:	e0bff917 	ldw	r2,-28(fp)
   196b4:	1885883a 	add	r2,r3,r2
   196b8:	11000005 	stb	r4,0(r2)
   196bc:	e0bff917 	ldw	r2,-28(fp)
   196c0:	10800044 	addi	r2,r2,1
   196c4:	e0bff915 	stw	r2,-28(fp)
   196c8:	e0bff917 	ldw	r2,-28(fp)
   196cc:	10800190 	cmplti	r2,r2,6
   196d0:	103fee1e 	bne	r2,zero,1968c <__alt_data_end+0xf001968c>
   196d4:	e0bffb83 	ldbu	r2,-18(fp)
   196d8:	10803fcc 	andi	r2,r2,255
   196dc:	10801458 	cmpnei	r2,r2,81
   196e0:	1000261e 	bne	r2,zero,1977c <alt_read_cfi_width+0x330>
   196e4:	e0bffbc3 	ldbu	r2,-17(fp)
   196e8:	10803fcc 	andi	r2,r2,255
   196ec:	1000231e 	bne	r2,zero,1977c <alt_read_cfi_width+0x330>
   196f0:	e0bffc03 	ldbu	r2,-16(fp)
   196f4:	10803fcc 	andi	r2,r2,255
   196f8:	10801498 	cmpnei	r2,r2,82
   196fc:	10001f1e 	bne	r2,zero,1977c <alt_read_cfi_width+0x330>
   19700:	e0bffc43 	ldbu	r2,-15(fp)
   19704:	10803fcc 	andi	r2,r2,255
   19708:	10001c1e 	bne	r2,zero,1977c <alt_read_cfi_width+0x330>
   1970c:	e0bffc83 	ldbu	r2,-14(fp)
   19710:	10803fcc 	andi	r2,r2,255
   19714:	10801658 	cmpnei	r2,r2,89
   19718:	1000181e 	bne	r2,zero,1977c <alt_read_cfi_width+0x330>
   1971c:	e0bffcc3 	ldbu	r2,-13(fp)
   19720:	10803fcc 	andi	r2,r2,255
   19724:	1000151e 	bne	r2,zero,1977c <alt_read_cfi_width+0x330>
   19728:	e0bfff17 	ldw	r2,-4(fp)
   1972c:	00c00084 	movi	r3,2
   19730:	10c02f15 	stw	r3,188(r2)
   19734:	e0bfff17 	ldw	r2,-4(fp)
   19738:	00c00084 	movi	r3,2
   1973c:	10c03015 	stw	r3,192(r2)
   19740:	e0bfff17 	ldw	r2,-4(fp)
   19744:	10800a17 	ldw	r2,40(r2)
   19748:	10801404 	addi	r2,r2,80
   1974c:	1080002b 	ldhuio	r2,0(r2)
   19750:	10bfffcc 	andi	r2,r2,65535
   19754:	e0bffb0d 	sth	r2,-20(fp)
   19758:	e0bffb0b 	ldhu	r2,-20(fp)
   1975c:	10800044 	addi	r2,r2,1
   19760:	e0bffb0d 	sth	r2,-20(fp)
   19764:	e0bffb0b 	ldhu	r2,-20(fp)
   19768:	1080008c 	andi	r2,r2,2
   1976c:	10010d1e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19770:	00bffb44 	movi	r2,-19
   19774:	e0bffa15 	stw	r2,-24(fp)
   19778:	00010a06 	br	19ba4 <alt_read_cfi_width+0x758>
   1977c:	e0bfff17 	ldw	r2,-4(fp)
   19780:	10800a17 	ldw	r2,40(r2)
   19784:	01802604 	movi	r6,152
   19788:	01401544 	movi	r5,85
   1978c:	1009883a 	mov	r4,r2
   19790:	0018ab00 	call	18ab0 <alt_write_flash_command_32bit_device_32bit_mode>
   19794:	e03ff915 	stw	zero,-28(fp)
   19798:	00000f06 	br	197d8 <alt_read_cfi_width+0x38c>
   1979c:	e0bfff17 	ldw	r2,-4(fp)
   197a0:	10800a17 	ldw	r2,40(r2)
   197a4:	e0fff917 	ldw	r3,-28(fp)
   197a8:	18c01004 	addi	r3,r3,64
   197ac:	10c5883a 	add	r2,r2,r3
   197b0:	10800023 	ldbuio	r2,0(r2)
   197b4:	10803fcc 	andi	r2,r2,255
   197b8:	1009883a 	mov	r4,r2
   197bc:	e0fffb84 	addi	r3,fp,-18
   197c0:	e0bff917 	ldw	r2,-28(fp)
   197c4:	1885883a 	add	r2,r3,r2
   197c8:	11000005 	stb	r4,0(r2)
   197cc:	e0bff917 	ldw	r2,-28(fp)
   197d0:	10800044 	addi	r2,r2,1
   197d4:	e0bff915 	stw	r2,-28(fp)
   197d8:	e0bff917 	ldw	r2,-28(fp)
   197dc:	10800310 	cmplti	r2,r2,12
   197e0:	103fee1e 	bne	r2,zero,1979c <__alt_data_end+0xf001979c>
   197e4:	e0bffb83 	ldbu	r2,-18(fp)
   197e8:	10803fcc 	andi	r2,r2,255
   197ec:	10801458 	cmpnei	r2,r2,81
   197f0:	1000371e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   197f4:	e0bffbc3 	ldbu	r2,-17(fp)
   197f8:	10803fcc 	andi	r2,r2,255
   197fc:	1000341e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19800:	e0bffc03 	ldbu	r2,-16(fp)
   19804:	10803fcc 	andi	r2,r2,255
   19808:	1000311e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   1980c:	e0bffc43 	ldbu	r2,-15(fp)
   19810:	10803fcc 	andi	r2,r2,255
   19814:	10002e1e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19818:	e0bffc83 	ldbu	r2,-14(fp)
   1981c:	10803fcc 	andi	r2,r2,255
   19820:	10801498 	cmpnei	r2,r2,82
   19824:	10002a1e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19828:	e0bffcc3 	ldbu	r2,-13(fp)
   1982c:	10803fcc 	andi	r2,r2,255
   19830:	1000271e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19834:	e0bffd03 	ldbu	r2,-12(fp)
   19838:	10803fcc 	andi	r2,r2,255
   1983c:	1000241e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19840:	e0bffd43 	ldbu	r2,-11(fp)
   19844:	10803fcc 	andi	r2,r2,255
   19848:	1000211e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   1984c:	e0bffd83 	ldbu	r2,-10(fp)
   19850:	10803fcc 	andi	r2,r2,255
   19854:	10801658 	cmpnei	r2,r2,89
   19858:	10001d1e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   1985c:	e0bffdc3 	ldbu	r2,-9(fp)
   19860:	10803fcc 	andi	r2,r2,255
   19864:	10001a1e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19868:	e0bffe03 	ldbu	r2,-8(fp)
   1986c:	10803fcc 	andi	r2,r2,255
   19870:	1000171e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19874:	e0bffe43 	ldbu	r2,-7(fp)
   19878:	10803fcc 	andi	r2,r2,255
   1987c:	1000141e 	bne	r2,zero,198d0 <alt_read_cfi_width+0x484>
   19880:	e0bfff17 	ldw	r2,-4(fp)
   19884:	00c00104 	movi	r3,4
   19888:	10c02f15 	stw	r3,188(r2)
   1988c:	e0bfff17 	ldw	r2,-4(fp)
   19890:	00c00104 	movi	r3,4
   19894:	10c03015 	stw	r3,192(r2)
   19898:	e0bfff17 	ldw	r2,-4(fp)
   1989c:	10800a17 	ldw	r2,40(r2)
   198a0:	10802804 	addi	r2,r2,160
   198a4:	10800037 	ldwio	r2,0(r2)
   198a8:	e0bffb0d 	sth	r2,-20(fp)
   198ac:	e0bffb0b 	ldhu	r2,-20(fp)
   198b0:	10800044 	addi	r2,r2,1
   198b4:	e0bffb0d 	sth	r2,-20(fp)
   198b8:	e0bffb0b 	ldhu	r2,-20(fp)
   198bc:	1080010c 	andi	r2,r2,4
   198c0:	1000b81e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   198c4:	00bffb44 	movi	r2,-19
   198c8:	e0bffa15 	stw	r2,-24(fp)
   198cc:	0000b506 	br	19ba4 <alt_read_cfi_width+0x758>
   198d0:	e0bfff17 	ldw	r2,-4(fp)
   198d4:	10800a17 	ldw	r2,40(r2)
   198d8:	01802604 	movi	r6,152
   198dc:	01401544 	movi	r5,85
   198e0:	1009883a 	mov	r4,r2
   198e4:	0018a600 	call	18a60 <alt_write_flash_command_32bit_device_16bit_mode>
   198e8:	e03ff915 	stw	zero,-28(fp)
   198ec:	00000f06 	br	1992c <alt_read_cfi_width+0x4e0>
   198f0:	e0bfff17 	ldw	r2,-4(fp)
   198f4:	10800a17 	ldw	r2,40(r2)
   198f8:	e0fff917 	ldw	r3,-28(fp)
   198fc:	18c01004 	addi	r3,r3,64
   19900:	10c5883a 	add	r2,r2,r3
   19904:	10800023 	ldbuio	r2,0(r2)
   19908:	10803fcc 	andi	r2,r2,255
   1990c:	1009883a 	mov	r4,r2
   19910:	e0fffb84 	addi	r3,fp,-18
   19914:	e0bff917 	ldw	r2,-28(fp)
   19918:	1885883a 	add	r2,r3,r2
   1991c:	11000005 	stb	r4,0(r2)
   19920:	e0bff917 	ldw	r2,-28(fp)
   19924:	10800044 	addi	r2,r2,1
   19928:	e0bff915 	stw	r2,-28(fp)
   1992c:	e0bff917 	ldw	r2,-28(fp)
   19930:	10800310 	cmplti	r2,r2,12
   19934:	103fee1e 	bne	r2,zero,198f0 <__alt_data_end+0xf00198f0>
   19938:	e0bffb83 	ldbu	r2,-18(fp)
   1993c:	10803fcc 	andi	r2,r2,255
   19940:	10801458 	cmpnei	r2,r2,81
   19944:	10003a1e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   19948:	e0bffbc3 	ldbu	r2,-17(fp)
   1994c:	10803fcc 	andi	r2,r2,255
   19950:	1000371e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   19954:	e0bffc03 	ldbu	r2,-16(fp)
   19958:	10803fcc 	andi	r2,r2,255
   1995c:	10801458 	cmpnei	r2,r2,81
   19960:	1000331e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   19964:	e0bffc43 	ldbu	r2,-15(fp)
   19968:	10803fcc 	andi	r2,r2,255
   1996c:	1000301e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   19970:	e0bffc83 	ldbu	r2,-14(fp)
   19974:	10803fcc 	andi	r2,r2,255
   19978:	10801498 	cmpnei	r2,r2,82
   1997c:	10002c1e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   19980:	e0bffcc3 	ldbu	r2,-13(fp)
   19984:	10803fcc 	andi	r2,r2,255
   19988:	1000291e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   1998c:	e0bffd03 	ldbu	r2,-12(fp)
   19990:	10803fcc 	andi	r2,r2,255
   19994:	10801498 	cmpnei	r2,r2,82
   19998:	1000251e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   1999c:	e0bffd43 	ldbu	r2,-11(fp)
   199a0:	10803fcc 	andi	r2,r2,255
   199a4:	1000221e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   199a8:	e0bffd83 	ldbu	r2,-10(fp)
   199ac:	10803fcc 	andi	r2,r2,255
   199b0:	10801658 	cmpnei	r2,r2,89
   199b4:	10001e1e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   199b8:	e0bffdc3 	ldbu	r2,-9(fp)
   199bc:	10803fcc 	andi	r2,r2,255
   199c0:	10001b1e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   199c4:	e0bffe03 	ldbu	r2,-8(fp)
   199c8:	10803fcc 	andi	r2,r2,255
   199cc:	10801658 	cmpnei	r2,r2,89
   199d0:	1000171e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   199d4:	e0bffe43 	ldbu	r2,-7(fp)
   199d8:	10803fcc 	andi	r2,r2,255
   199dc:	1000141e 	bne	r2,zero,19a30 <alt_read_cfi_width+0x5e4>
   199e0:	e0bfff17 	ldw	r2,-4(fp)
   199e4:	00c00084 	movi	r3,2
   199e8:	10c02f15 	stw	r3,188(r2)
   199ec:	e0bfff17 	ldw	r2,-4(fp)
   199f0:	00c00104 	movi	r3,4
   199f4:	10c03015 	stw	r3,192(r2)
   199f8:	e0bfff17 	ldw	r2,-4(fp)
   199fc:	10800a17 	ldw	r2,40(r2)
   19a00:	10802804 	addi	r2,r2,160
   19a04:	10800037 	ldwio	r2,0(r2)
   19a08:	e0bffb0d 	sth	r2,-20(fp)
   19a0c:	e0bffb0b 	ldhu	r2,-20(fp)
   19a10:	10800044 	addi	r2,r2,1
   19a14:	e0bffb0d 	sth	r2,-20(fp)
   19a18:	e0bffb0b 	ldhu	r2,-20(fp)
   19a1c:	1080010c 	andi	r2,r2,4
   19a20:	1000601e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19a24:	00bffb44 	movi	r2,-19
   19a28:	e0bffa15 	stw	r2,-24(fp)
   19a2c:	00005d06 	br	19ba4 <alt_read_cfi_width+0x758>
   19a30:	e0bfff17 	ldw	r2,-4(fp)
   19a34:	10800a17 	ldw	r2,40(r2)
   19a38:	01802604 	movi	r6,152
   19a3c:	01401544 	movi	r5,85
   19a40:	1009883a 	mov	r4,r2
   19a44:	00189c40 	call	189c4 <alt_write_flash_command_32bit_device_8bit_mode>
   19a48:	e03ff915 	stw	zero,-28(fp)
   19a4c:	00000f06 	br	19a8c <alt_read_cfi_width+0x640>
   19a50:	e0bfff17 	ldw	r2,-4(fp)
   19a54:	10800a17 	ldw	r2,40(r2)
   19a58:	e0fff917 	ldw	r3,-28(fp)
   19a5c:	18c01004 	addi	r3,r3,64
   19a60:	10c5883a 	add	r2,r2,r3
   19a64:	10800023 	ldbuio	r2,0(r2)
   19a68:	10803fcc 	andi	r2,r2,255
   19a6c:	1009883a 	mov	r4,r2
   19a70:	e0fffb84 	addi	r3,fp,-18
   19a74:	e0bff917 	ldw	r2,-28(fp)
   19a78:	1885883a 	add	r2,r3,r2
   19a7c:	11000005 	stb	r4,0(r2)
   19a80:	e0bff917 	ldw	r2,-28(fp)
   19a84:	10800044 	addi	r2,r2,1
   19a88:	e0bff915 	stw	r2,-28(fp)
   19a8c:	e0bff917 	ldw	r2,-28(fp)
   19a90:	10800310 	cmplti	r2,r2,12
   19a94:	103fee1e 	bne	r2,zero,19a50 <__alt_data_end+0xf0019a50>
   19a98:	e0bffb83 	ldbu	r2,-18(fp)
   19a9c:	10803fcc 	andi	r2,r2,255
   19aa0:	10801458 	cmpnei	r2,r2,81
   19aa4:	10003f1e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19aa8:	e0bffbc3 	ldbu	r2,-17(fp)
   19aac:	10803fcc 	andi	r2,r2,255
   19ab0:	10801458 	cmpnei	r2,r2,81
   19ab4:	10003b1e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19ab8:	e0bffc03 	ldbu	r2,-16(fp)
   19abc:	10803fcc 	andi	r2,r2,255
   19ac0:	10801458 	cmpnei	r2,r2,81
   19ac4:	1000371e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19ac8:	e0bffc43 	ldbu	r2,-15(fp)
   19acc:	10803fcc 	andi	r2,r2,255
   19ad0:	10801458 	cmpnei	r2,r2,81
   19ad4:	1000331e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19ad8:	e0bffc83 	ldbu	r2,-14(fp)
   19adc:	10803fcc 	andi	r2,r2,255
   19ae0:	10801498 	cmpnei	r2,r2,82
   19ae4:	10002f1e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19ae8:	e0bffcc3 	ldbu	r2,-13(fp)
   19aec:	10803fcc 	andi	r2,r2,255
   19af0:	10801498 	cmpnei	r2,r2,82
   19af4:	10002b1e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19af8:	e0bffd03 	ldbu	r2,-12(fp)
   19afc:	10803fcc 	andi	r2,r2,255
   19b00:	10801498 	cmpnei	r2,r2,82
   19b04:	1000271e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19b08:	e0bffd43 	ldbu	r2,-11(fp)
   19b0c:	10803fcc 	andi	r2,r2,255
   19b10:	10801498 	cmpnei	r2,r2,82
   19b14:	1000231e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19b18:	e0bffd83 	ldbu	r2,-10(fp)
   19b1c:	10803fcc 	andi	r2,r2,255
   19b20:	10801658 	cmpnei	r2,r2,89
   19b24:	10001f1e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19b28:	e0bffdc3 	ldbu	r2,-9(fp)
   19b2c:	10803fcc 	andi	r2,r2,255
   19b30:	10801658 	cmpnei	r2,r2,89
   19b34:	10001b1e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19b38:	e0bffe03 	ldbu	r2,-8(fp)
   19b3c:	10803fcc 	andi	r2,r2,255
   19b40:	10801658 	cmpnei	r2,r2,89
   19b44:	1000171e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19b48:	e0bffe43 	ldbu	r2,-7(fp)
   19b4c:	10803fcc 	andi	r2,r2,255
   19b50:	10801658 	cmpnei	r2,r2,89
   19b54:	1000131e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19b58:	e0bfff17 	ldw	r2,-4(fp)
   19b5c:	00c00044 	movi	r3,1
   19b60:	10c02f15 	stw	r3,188(r2)
   19b64:	e0bfff17 	ldw	r2,-4(fp)
   19b68:	00c00104 	movi	r3,4
   19b6c:	10c03015 	stw	r3,192(r2)
   19b70:	e0bfff17 	ldw	r2,-4(fp)
   19b74:	10800a17 	ldw	r2,40(r2)
   19b78:	10802804 	addi	r2,r2,160
   19b7c:	10800037 	ldwio	r2,0(r2)
   19b80:	e0bffb0d 	sth	r2,-20(fp)
   19b84:	e0bffb0b 	ldhu	r2,-20(fp)
   19b88:	10800044 	addi	r2,r2,1
   19b8c:	e0bffb0d 	sth	r2,-20(fp)
   19b90:	e0bffb0b 	ldhu	r2,-20(fp)
   19b94:	1080010c 	andi	r2,r2,4
   19b98:	1000021e 	bne	r2,zero,19ba4 <alt_read_cfi_width+0x758>
   19b9c:	00bffb44 	movi	r2,-19
   19ba0:	e0bffa15 	stw	r2,-24(fp)
   19ba4:	e0bffa17 	ldw	r2,-24(fp)
   19ba8:	e037883a 	mov	sp,fp
   19bac:	dfc00117 	ldw	ra,4(sp)
   19bb0:	df000017 	ldw	fp,0(sp)
   19bb4:	dec00204 	addi	sp,sp,8
   19bb8:	f800283a 	ret

00019bbc <alt_check_primary_table>:
   19bbc:	defffa04 	addi	sp,sp,-24
   19bc0:	dfc00515 	stw	ra,20(sp)
   19bc4:	df000415 	stw	fp,16(sp)
   19bc8:	df000404 	addi	fp,sp,16
   19bcc:	e13fff15 	stw	r4,-4(fp)
   19bd0:	e03ffd15 	stw	zero,-12(fp)
   19bd4:	01400544 	movi	r5,21
   19bd8:	e13fff17 	ldw	r4,-4(fp)
   19bdc:	0018e040 	call	18e04 <alt_read_16bit_query_entry>
   19be0:	10ffffcc 	andi	r3,r2,65535
   19be4:	e0bfff17 	ldw	r2,-4(fp)
   19be8:	10c03315 	stw	r3,204(r2)
   19bec:	e03ffc15 	stw	zero,-16(fp)
   19bf0:	00001106 	br	19c38 <alt_check_primary_table+0x7c>
   19bf4:	e0bfff17 	ldw	r2,-4(fp)
   19bf8:	10803517 	ldw	r2,212(r2)
   19bfc:	e0ffff17 	ldw	r3,-4(fp)
   19c00:	19003317 	ldw	r4,204(r3)
   19c04:	e0fffc17 	ldw	r3,-16(fp)
   19c08:	20c7883a 	add	r3,r4,r3
   19c0c:	180b883a 	mov	r5,r3
   19c10:	e13fff17 	ldw	r4,-4(fp)
   19c14:	103ee83a 	callr	r2
   19c18:	1009883a 	mov	r4,r2
   19c1c:	e0fffe04 	addi	r3,fp,-8
   19c20:	e0bffc17 	ldw	r2,-16(fp)
   19c24:	1885883a 	add	r2,r3,r2
   19c28:	11000005 	stb	r4,0(r2)
   19c2c:	e0bffc17 	ldw	r2,-16(fp)
   19c30:	10800044 	addi	r2,r2,1
   19c34:	e0bffc15 	stw	r2,-16(fp)
   19c38:	e0bffc17 	ldw	r2,-16(fp)
   19c3c:	108000d0 	cmplti	r2,r2,3
   19c40:	103fec1e 	bne	r2,zero,19bf4 <__alt_data_end+0xf0019bf4>
   19c44:	e0bffe03 	ldbu	r2,-8(fp)
   19c48:	10803fcc 	andi	r2,r2,255
   19c4c:	10801418 	cmpnei	r2,r2,80
   19c50:	1000081e 	bne	r2,zero,19c74 <alt_check_primary_table+0xb8>
   19c54:	e0bffe43 	ldbu	r2,-7(fp)
   19c58:	10803fcc 	andi	r2,r2,255
   19c5c:	10801498 	cmpnei	r2,r2,82
   19c60:	1000041e 	bne	r2,zero,19c74 <alt_check_primary_table+0xb8>
   19c64:	e0bffe83 	ldbu	r2,-6(fp)
   19c68:	10803fcc 	andi	r2,r2,255
   19c6c:	10801260 	cmpeqi	r2,r2,73
   19c70:	1000021e 	bne	r2,zero,19c7c <alt_check_primary_table+0xc0>
   19c74:	00bffb44 	movi	r2,-19
   19c78:	e0bffd15 	stw	r2,-12(fp)
   19c7c:	e0bffd17 	ldw	r2,-12(fp)
   19c80:	e037883a 	mov	sp,fp
   19c84:	dfc00117 	ldw	ra,4(sp)
   19c88:	df000017 	ldw	fp,0(sp)
   19c8c:	dec00204 	addi	sp,sp,8
   19c90:	f800283a 	ret

00019c94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   19c94:	defffa04 	addi	sp,sp,-24
   19c98:	dfc00515 	stw	ra,20(sp)
   19c9c:	df000415 	stw	fp,16(sp)
   19ca0:	df000404 	addi	fp,sp,16
   19ca4:	e13ffd15 	stw	r4,-12(fp)
   19ca8:	e17ffe15 	stw	r5,-8(fp)
   19cac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   19cb0:	e0bffd17 	ldw	r2,-12(fp)
   19cb4:	10800017 	ldw	r2,0(r2)
   19cb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   19cbc:	e0bffc17 	ldw	r2,-16(fp)
   19cc0:	10c00a04 	addi	r3,r2,40
   19cc4:	e0bffd17 	ldw	r2,-12(fp)
   19cc8:	10800217 	ldw	r2,8(r2)
   19ccc:	100f883a 	mov	r7,r2
   19cd0:	e1bfff17 	ldw	r6,-4(fp)
   19cd4:	e17ffe17 	ldw	r5,-8(fp)
   19cd8:	1809883a 	mov	r4,r3
   19cdc:	001a2b40 	call	1a2b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   19ce0:	e037883a 	mov	sp,fp
   19ce4:	dfc00117 	ldw	ra,4(sp)
   19ce8:	df000017 	ldw	fp,0(sp)
   19cec:	dec00204 	addi	sp,sp,8
   19cf0:	f800283a 	ret

00019cf4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   19cf4:	defffa04 	addi	sp,sp,-24
   19cf8:	dfc00515 	stw	ra,20(sp)
   19cfc:	df000415 	stw	fp,16(sp)
   19d00:	df000404 	addi	fp,sp,16
   19d04:	e13ffd15 	stw	r4,-12(fp)
   19d08:	e17ffe15 	stw	r5,-8(fp)
   19d0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   19d10:	e0bffd17 	ldw	r2,-12(fp)
   19d14:	10800017 	ldw	r2,0(r2)
   19d18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   19d1c:	e0bffc17 	ldw	r2,-16(fp)
   19d20:	10c00a04 	addi	r3,r2,40
   19d24:	e0bffd17 	ldw	r2,-12(fp)
   19d28:	10800217 	ldw	r2,8(r2)
   19d2c:	100f883a 	mov	r7,r2
   19d30:	e1bfff17 	ldw	r6,-4(fp)
   19d34:	e17ffe17 	ldw	r5,-8(fp)
   19d38:	1809883a 	mov	r4,r3
   19d3c:	001a4d00 	call	1a4d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   19d40:	e037883a 	mov	sp,fp
   19d44:	dfc00117 	ldw	ra,4(sp)
   19d48:	df000017 	ldw	fp,0(sp)
   19d4c:	dec00204 	addi	sp,sp,8
   19d50:	f800283a 	ret

00019d54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   19d54:	defffc04 	addi	sp,sp,-16
   19d58:	dfc00315 	stw	ra,12(sp)
   19d5c:	df000215 	stw	fp,8(sp)
   19d60:	df000204 	addi	fp,sp,8
   19d64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   19d68:	e0bfff17 	ldw	r2,-4(fp)
   19d6c:	10800017 	ldw	r2,0(r2)
   19d70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   19d74:	e0bffe17 	ldw	r2,-8(fp)
   19d78:	10c00a04 	addi	r3,r2,40
   19d7c:	e0bfff17 	ldw	r2,-4(fp)
   19d80:	10800217 	ldw	r2,8(r2)
   19d84:	100b883a 	mov	r5,r2
   19d88:	1809883a 	mov	r4,r3
   19d8c:	001a15c0 	call	1a15c <altera_avalon_jtag_uart_close>
}
   19d90:	e037883a 	mov	sp,fp
   19d94:	dfc00117 	ldw	ra,4(sp)
   19d98:	df000017 	ldw	fp,0(sp)
   19d9c:	dec00204 	addi	sp,sp,8
   19da0:	f800283a 	ret

00019da4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   19da4:	defffa04 	addi	sp,sp,-24
   19da8:	dfc00515 	stw	ra,20(sp)
   19dac:	df000415 	stw	fp,16(sp)
   19db0:	df000404 	addi	fp,sp,16
   19db4:	e13ffd15 	stw	r4,-12(fp)
   19db8:	e17ffe15 	stw	r5,-8(fp)
   19dbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   19dc0:	e0bffd17 	ldw	r2,-12(fp)
   19dc4:	10800017 	ldw	r2,0(r2)
   19dc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   19dcc:	e0bffc17 	ldw	r2,-16(fp)
   19dd0:	10800a04 	addi	r2,r2,40
   19dd4:	e1bfff17 	ldw	r6,-4(fp)
   19dd8:	e17ffe17 	ldw	r5,-8(fp)
   19ddc:	1009883a 	mov	r4,r2
   19de0:	001a1c40 	call	1a1c4 <altera_avalon_jtag_uart_ioctl>
}
   19de4:	e037883a 	mov	sp,fp
   19de8:	dfc00117 	ldw	ra,4(sp)
   19dec:	df000017 	ldw	fp,0(sp)
   19df0:	dec00204 	addi	sp,sp,8
   19df4:	f800283a 	ret

00019df8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   19df8:	defffb04 	addi	sp,sp,-20
   19dfc:	dfc00415 	stw	ra,16(sp)
   19e00:	df000315 	stw	fp,12(sp)
   19e04:	df000304 	addi	fp,sp,12
   19e08:	e13ffd15 	stw	r4,-12(fp)
   19e0c:	e17ffe15 	stw	r5,-8(fp)
   19e10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   19e14:	e0bffd17 	ldw	r2,-12(fp)
   19e18:	00c00044 	movi	r3,1
   19e1c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   19e20:	e0bffd17 	ldw	r2,-12(fp)
   19e24:	10800017 	ldw	r2,0(r2)
   19e28:	10800104 	addi	r2,r2,4
   19e2c:	1007883a 	mov	r3,r2
   19e30:	e0bffd17 	ldw	r2,-12(fp)
   19e34:	10800817 	ldw	r2,32(r2)
   19e38:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   19e3c:	e0bfff17 	ldw	r2,-4(fp)
   19e40:	018000b4 	movhi	r6,2
   19e44:	31a7ab04 	addi	r6,r6,-24916
   19e48:	e17ffd17 	ldw	r5,-12(fp)
   19e4c:	1009883a 	mov	r4,r2
   19e50:	00019200 	call	1920 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   19e54:	e0bffd17 	ldw	r2,-12(fp)
   19e58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   19e5c:	e0bffd17 	ldw	r2,-12(fp)
   19e60:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   19e64:	d0e05597 	ldw	r3,-32426(gp)
   19e68:	e1fffd17 	ldw	r7,-12(fp)
   19e6c:	018000b4 	movhi	r6,2
   19e70:	31a82f04 	addi	r6,r6,-24388
   19e74:	180b883a 	mov	r5,r3
   19e78:	1009883a 	mov	r4,r2
   19e7c:	001ddb00 	call	1ddb0 <alt_alarm_start>
   19e80:	1000040e 	bge	r2,zero,19e94 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   19e84:	e0fffd17 	ldw	r3,-12(fp)
   19e88:	00a00034 	movhi	r2,32768
   19e8c:	10bfffc4 	addi	r2,r2,-1
   19e90:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   19e94:	0001883a 	nop
   19e98:	e037883a 	mov	sp,fp
   19e9c:	dfc00117 	ldw	ra,4(sp)
   19ea0:	df000017 	ldw	fp,0(sp)
   19ea4:	dec00204 	addi	sp,sp,8
   19ea8:	f800283a 	ret

00019eac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   19eac:	defff704 	addi	sp,sp,-36
   19eb0:	df000815 	stw	fp,32(sp)
   19eb4:	df000804 	addi	fp,sp,32
   19eb8:	e13ffe15 	stw	r4,-8(fp)
   19ebc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   19ec0:	e0bffe17 	ldw	r2,-8(fp)
   19ec4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   19ec8:	e0bffa17 	ldw	r2,-24(fp)
   19ecc:	10800017 	ldw	r2,0(r2)
   19ed0:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   19ed4:	e0bffb17 	ldw	r2,-20(fp)
   19ed8:	10800104 	addi	r2,r2,4
   19edc:	10800037 	ldwio	r2,0(r2)
   19ee0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   19ee4:	e0bffc17 	ldw	r2,-16(fp)
   19ee8:	1080c00c 	andi	r2,r2,768
   19eec:	10006d26 	beq	r2,zero,1a0a4 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   19ef0:	e0bffc17 	ldw	r2,-16(fp)
   19ef4:	1080400c 	andi	r2,r2,256
   19ef8:	10003526 	beq	r2,zero,19fd0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   19efc:	00800074 	movhi	r2,1
   19f00:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19f04:	e0bffa17 	ldw	r2,-24(fp)
   19f08:	10800a17 	ldw	r2,40(r2)
   19f0c:	10800044 	addi	r2,r2,1
   19f10:	1081ffcc 	andi	r2,r2,2047
   19f14:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   19f18:	e0bffa17 	ldw	r2,-24(fp)
   19f1c:	10c00b17 	ldw	r3,44(r2)
   19f20:	e0bffd17 	ldw	r2,-12(fp)
   19f24:	18801526 	beq	r3,r2,19f7c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   19f28:	e0bffb17 	ldw	r2,-20(fp)
   19f2c:	10800037 	ldwio	r2,0(r2)
   19f30:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   19f34:	e0bff817 	ldw	r2,-32(fp)
   19f38:	10a0000c 	andi	r2,r2,32768
   19f3c:	10001126 	beq	r2,zero,19f84 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   19f40:	e0bffa17 	ldw	r2,-24(fp)
   19f44:	10800a17 	ldw	r2,40(r2)
   19f48:	e0fff817 	ldw	r3,-32(fp)
   19f4c:	1809883a 	mov	r4,r3
   19f50:	e0fffa17 	ldw	r3,-24(fp)
   19f54:	1885883a 	add	r2,r3,r2
   19f58:	10800e04 	addi	r2,r2,56
   19f5c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19f60:	e0bffa17 	ldw	r2,-24(fp)
   19f64:	10800a17 	ldw	r2,40(r2)
   19f68:	10800044 	addi	r2,r2,1
   19f6c:	10c1ffcc 	andi	r3,r2,2047
   19f70:	e0bffa17 	ldw	r2,-24(fp)
   19f74:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   19f78:	003fe206 	br	19f04 <__alt_data_end+0xf0019f04>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   19f7c:	0001883a 	nop
   19f80:	00000106 	br	19f88 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   19f84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   19f88:	e0bff817 	ldw	r2,-32(fp)
   19f8c:	10bfffec 	andhi	r2,r2,65535
   19f90:	10000f26 	beq	r2,zero,19fd0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   19f94:	e0bffa17 	ldw	r2,-24(fp)
   19f98:	10c00817 	ldw	r3,32(r2)
   19f9c:	00bfff84 	movi	r2,-2
   19fa0:	1886703a 	and	r3,r3,r2
   19fa4:	e0bffa17 	ldw	r2,-24(fp)
   19fa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   19fac:	e0bffb17 	ldw	r2,-20(fp)
   19fb0:	10800104 	addi	r2,r2,4
   19fb4:	1007883a 	mov	r3,r2
   19fb8:	e0bffa17 	ldw	r2,-24(fp)
   19fbc:	10800817 	ldw	r2,32(r2)
   19fc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   19fc4:	e0bffb17 	ldw	r2,-20(fp)
   19fc8:	10800104 	addi	r2,r2,4
   19fcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   19fd0:	e0bffc17 	ldw	r2,-16(fp)
   19fd4:	1080800c 	andi	r2,r2,512
   19fd8:	103fbe26 	beq	r2,zero,19ed4 <__alt_data_end+0xf0019ed4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   19fdc:	e0bffc17 	ldw	r2,-16(fp)
   19fe0:	1004d43a 	srli	r2,r2,16
   19fe4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   19fe8:	00001406 	br	1a03c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   19fec:	e0bffb17 	ldw	r2,-20(fp)
   19ff0:	e0fffa17 	ldw	r3,-24(fp)
   19ff4:	18c00d17 	ldw	r3,52(r3)
   19ff8:	e13ffa17 	ldw	r4,-24(fp)
   19ffc:	20c7883a 	add	r3,r4,r3
   1a000:	18c20e04 	addi	r3,r3,2104
   1a004:	18c00003 	ldbu	r3,0(r3)
   1a008:	18c03fcc 	andi	r3,r3,255
   1a00c:	18c0201c 	xori	r3,r3,128
   1a010:	18ffe004 	addi	r3,r3,-128
   1a014:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a018:	e0bffa17 	ldw	r2,-24(fp)
   1a01c:	10800d17 	ldw	r2,52(r2)
   1a020:	10800044 	addi	r2,r2,1
   1a024:	10c1ffcc 	andi	r3,r2,2047
   1a028:	e0bffa17 	ldw	r2,-24(fp)
   1a02c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1a030:	e0bff917 	ldw	r2,-28(fp)
   1a034:	10bfffc4 	addi	r2,r2,-1
   1a038:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a03c:	e0bff917 	ldw	r2,-28(fp)
   1a040:	10000526 	beq	r2,zero,1a058 <altera_avalon_jtag_uart_irq+0x1ac>
   1a044:	e0bffa17 	ldw	r2,-24(fp)
   1a048:	10c00d17 	ldw	r3,52(r2)
   1a04c:	e0bffa17 	ldw	r2,-24(fp)
   1a050:	10800c17 	ldw	r2,48(r2)
   1a054:	18bfe51e 	bne	r3,r2,19fec <__alt_data_end+0xf0019fec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1a058:	e0bff917 	ldw	r2,-28(fp)
   1a05c:	103f9d26 	beq	r2,zero,19ed4 <__alt_data_end+0xf0019ed4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a060:	e0bffa17 	ldw	r2,-24(fp)
   1a064:	10c00817 	ldw	r3,32(r2)
   1a068:	00bfff44 	movi	r2,-3
   1a06c:	1886703a 	and	r3,r3,r2
   1a070:	e0bffa17 	ldw	r2,-24(fp)
   1a074:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a078:	e0bffa17 	ldw	r2,-24(fp)
   1a07c:	10800017 	ldw	r2,0(r2)
   1a080:	10800104 	addi	r2,r2,4
   1a084:	1007883a 	mov	r3,r2
   1a088:	e0bffa17 	ldw	r2,-24(fp)
   1a08c:	10800817 	ldw	r2,32(r2)
   1a090:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a094:	e0bffb17 	ldw	r2,-20(fp)
   1a098:	10800104 	addi	r2,r2,4
   1a09c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1a0a0:	003f8c06 	br	19ed4 <__alt_data_end+0xf0019ed4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1a0a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1a0a8:	0001883a 	nop
   1a0ac:	e037883a 	mov	sp,fp
   1a0b0:	df000017 	ldw	fp,0(sp)
   1a0b4:	dec00104 	addi	sp,sp,4
   1a0b8:	f800283a 	ret

0001a0bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1a0bc:	defff804 	addi	sp,sp,-32
   1a0c0:	df000715 	stw	fp,28(sp)
   1a0c4:	df000704 	addi	fp,sp,28
   1a0c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1a0cc:	e0bffb17 	ldw	r2,-20(fp)
   1a0d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1a0d4:	e0bff917 	ldw	r2,-28(fp)
   1a0d8:	10800017 	ldw	r2,0(r2)
   1a0dc:	10800104 	addi	r2,r2,4
   1a0e0:	10800037 	ldwio	r2,0(r2)
   1a0e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1a0e8:	e0bffa17 	ldw	r2,-24(fp)
   1a0ec:	1081000c 	andi	r2,r2,1024
   1a0f0:	10000b26 	beq	r2,zero,1a120 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1a0f4:	e0bff917 	ldw	r2,-28(fp)
   1a0f8:	10800017 	ldw	r2,0(r2)
   1a0fc:	10800104 	addi	r2,r2,4
   1a100:	1007883a 	mov	r3,r2
   1a104:	e0bff917 	ldw	r2,-28(fp)
   1a108:	10800817 	ldw	r2,32(r2)
   1a10c:	10810014 	ori	r2,r2,1024
   1a110:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1a114:	e0bff917 	ldw	r2,-28(fp)
   1a118:	10000915 	stw	zero,36(r2)
   1a11c:	00000a06 	br	1a148 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1a120:	e0bff917 	ldw	r2,-28(fp)
   1a124:	10c00917 	ldw	r3,36(r2)
   1a128:	00a00034 	movhi	r2,32768
   1a12c:	10bfff04 	addi	r2,r2,-4
   1a130:	10c00536 	bltu	r2,r3,1a148 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1a134:	e0bff917 	ldw	r2,-28(fp)
   1a138:	10800917 	ldw	r2,36(r2)
   1a13c:	10c00044 	addi	r3,r2,1
   1a140:	e0bff917 	ldw	r2,-28(fp)
   1a144:	10c00915 	stw	r3,36(r2)
   1a148:	d0a05597 	ldw	r2,-32426(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1a14c:	e037883a 	mov	sp,fp
   1a150:	df000017 	ldw	fp,0(sp)
   1a154:	dec00104 	addi	sp,sp,4
   1a158:	f800283a 	ret

0001a15c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1a15c:	defffd04 	addi	sp,sp,-12
   1a160:	df000215 	stw	fp,8(sp)
   1a164:	df000204 	addi	fp,sp,8
   1a168:	e13ffe15 	stw	r4,-8(fp)
   1a16c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a170:	00000506 	br	1a188 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1a174:	e0bfff17 	ldw	r2,-4(fp)
   1a178:	1090000c 	andi	r2,r2,16384
   1a17c:	10000226 	beq	r2,zero,1a188 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1a180:	00bffd44 	movi	r2,-11
   1a184:	00000b06 	br	1a1b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a188:	e0bffe17 	ldw	r2,-8(fp)
   1a18c:	10c00d17 	ldw	r3,52(r2)
   1a190:	e0bffe17 	ldw	r2,-8(fp)
   1a194:	10800c17 	ldw	r2,48(r2)
   1a198:	18800526 	beq	r3,r2,1a1b0 <altera_avalon_jtag_uart_close+0x54>
   1a19c:	e0bffe17 	ldw	r2,-8(fp)
   1a1a0:	10c00917 	ldw	r3,36(r2)
   1a1a4:	e0bffe17 	ldw	r2,-8(fp)
   1a1a8:	10800117 	ldw	r2,4(r2)
   1a1ac:	18bff136 	bltu	r3,r2,1a174 <__alt_data_end+0xf001a174>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1a1b0:	0005883a 	mov	r2,zero
}
   1a1b4:	e037883a 	mov	sp,fp
   1a1b8:	df000017 	ldw	fp,0(sp)
   1a1bc:	dec00104 	addi	sp,sp,4
   1a1c0:	f800283a 	ret

0001a1c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1a1c4:	defffa04 	addi	sp,sp,-24
   1a1c8:	df000515 	stw	fp,20(sp)
   1a1cc:	df000504 	addi	fp,sp,20
   1a1d0:	e13ffd15 	stw	r4,-12(fp)
   1a1d4:	e17ffe15 	stw	r5,-8(fp)
   1a1d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1a1dc:	00bff9c4 	movi	r2,-25
   1a1e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1a1e4:	e0bffe17 	ldw	r2,-8(fp)
   1a1e8:	10da8060 	cmpeqi	r3,r2,27137
   1a1ec:	1800031e 	bne	r3,zero,1a1fc <altera_avalon_jtag_uart_ioctl+0x38>
   1a1f0:	109a80a0 	cmpeqi	r2,r2,27138
   1a1f4:	1000181e 	bne	r2,zero,1a258 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1a1f8:	00002906 	br	1a2a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1a1fc:	e0bffd17 	ldw	r2,-12(fp)
   1a200:	10c00117 	ldw	r3,4(r2)
   1a204:	00a00034 	movhi	r2,32768
   1a208:	10bfffc4 	addi	r2,r2,-1
   1a20c:	18802126 	beq	r3,r2,1a294 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1a210:	e0bfff17 	ldw	r2,-4(fp)
   1a214:	10800017 	ldw	r2,0(r2)
   1a218:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1a21c:	e0bffc17 	ldw	r2,-16(fp)
   1a220:	10800090 	cmplti	r2,r2,2
   1a224:	1000061e 	bne	r2,zero,1a240 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a228:	e0fffc17 	ldw	r3,-16(fp)
   1a22c:	00a00034 	movhi	r2,32768
   1a230:	10bfffc4 	addi	r2,r2,-1
   1a234:	18800226 	beq	r3,r2,1a240 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a238:	e0bffc17 	ldw	r2,-16(fp)
   1a23c:	00000206 	br	1a248 <altera_avalon_jtag_uart_ioctl+0x84>
   1a240:	00a00034 	movhi	r2,32768
   1a244:	10bfff84 	addi	r2,r2,-2
   1a248:	e0fffd17 	ldw	r3,-12(fp)
   1a24c:	18800115 	stw	r2,4(r3)
      rc = 0;
   1a250:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a254:	00000f06 	br	1a294 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1a258:	e0bffd17 	ldw	r2,-12(fp)
   1a25c:	10c00117 	ldw	r3,4(r2)
   1a260:	00a00034 	movhi	r2,32768
   1a264:	10bfffc4 	addi	r2,r2,-1
   1a268:	18800c26 	beq	r3,r2,1a29c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1a26c:	e0bffd17 	ldw	r2,-12(fp)
   1a270:	10c00917 	ldw	r3,36(r2)
   1a274:	e0bffd17 	ldw	r2,-12(fp)
   1a278:	10800117 	ldw	r2,4(r2)
   1a27c:	1885803a 	cmpltu	r2,r3,r2
   1a280:	10c03fcc 	andi	r3,r2,255
   1a284:	e0bfff17 	ldw	r2,-4(fp)
   1a288:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1a28c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a290:	00000206 	br	1a29c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1a294:	0001883a 	nop
   1a298:	00000106 	br	1a2a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1a29c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1a2a0:	e0bffb17 	ldw	r2,-20(fp)
}
   1a2a4:	e037883a 	mov	sp,fp
   1a2a8:	df000017 	ldw	fp,0(sp)
   1a2ac:	dec00104 	addi	sp,sp,4
   1a2b0:	f800283a 	ret

0001a2b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1a2b4:	defff304 	addi	sp,sp,-52
   1a2b8:	dfc00c15 	stw	ra,48(sp)
   1a2bc:	df000b15 	stw	fp,44(sp)
   1a2c0:	df000b04 	addi	fp,sp,44
   1a2c4:	e13ffc15 	stw	r4,-16(fp)
   1a2c8:	e17ffd15 	stw	r5,-12(fp)
   1a2cc:	e1bffe15 	stw	r6,-8(fp)
   1a2d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1a2d4:	e0bffd17 	ldw	r2,-12(fp)
   1a2d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1a2dc:	00004706 	br	1a3fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1a2e0:	e0bffc17 	ldw	r2,-16(fp)
   1a2e4:	10800a17 	ldw	r2,40(r2)
   1a2e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1a2ec:	e0bffc17 	ldw	r2,-16(fp)
   1a2f0:	10800b17 	ldw	r2,44(r2)
   1a2f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1a2f8:	e0fff717 	ldw	r3,-36(fp)
   1a2fc:	e0bff817 	ldw	r2,-32(fp)
   1a300:	18800536 	bltu	r3,r2,1a318 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1a304:	e0fff717 	ldw	r3,-36(fp)
   1a308:	e0bff817 	ldw	r2,-32(fp)
   1a30c:	1885c83a 	sub	r2,r3,r2
   1a310:	e0bff615 	stw	r2,-40(fp)
   1a314:	00000406 	br	1a328 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1a318:	00c20004 	movi	r3,2048
   1a31c:	e0bff817 	ldw	r2,-32(fp)
   1a320:	1885c83a 	sub	r2,r3,r2
   1a324:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1a328:	e0bff617 	ldw	r2,-40(fp)
   1a32c:	10001e26 	beq	r2,zero,1a3a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1a330:	e0fffe17 	ldw	r3,-8(fp)
   1a334:	e0bff617 	ldw	r2,-40(fp)
   1a338:	1880022e 	bgeu	r3,r2,1a344 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1a33c:	e0bffe17 	ldw	r2,-8(fp)
   1a340:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1a344:	e0bffc17 	ldw	r2,-16(fp)
   1a348:	10c00e04 	addi	r3,r2,56
   1a34c:	e0bff817 	ldw	r2,-32(fp)
   1a350:	1885883a 	add	r2,r3,r2
   1a354:	e1bff617 	ldw	r6,-40(fp)
   1a358:	100b883a 	mov	r5,r2
   1a35c:	e13ff517 	ldw	r4,-44(fp)
   1a360:	00091200 	call	9120 <memcpy>
      ptr   += n;
   1a364:	e0fff517 	ldw	r3,-44(fp)
   1a368:	e0bff617 	ldw	r2,-40(fp)
   1a36c:	1885883a 	add	r2,r3,r2
   1a370:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1a374:	e0fffe17 	ldw	r3,-8(fp)
   1a378:	e0bff617 	ldw	r2,-40(fp)
   1a37c:	1885c83a 	sub	r2,r3,r2
   1a380:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a384:	e0fff817 	ldw	r3,-32(fp)
   1a388:	e0bff617 	ldw	r2,-40(fp)
   1a38c:	1885883a 	add	r2,r3,r2
   1a390:	10c1ffcc 	andi	r3,r2,2047
   1a394:	e0bffc17 	ldw	r2,-16(fp)
   1a398:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1a39c:	e0bffe17 	ldw	r2,-8(fp)
   1a3a0:	00bfcf16 	blt	zero,r2,1a2e0 <__alt_data_end+0xf001a2e0>
   1a3a4:	00000106 	br	1a3ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1a3a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1a3ac:	e0fff517 	ldw	r3,-44(fp)
   1a3b0:	e0bffd17 	ldw	r2,-12(fp)
   1a3b4:	1880141e 	bne	r3,r2,1a408 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1a3b8:	e0bfff17 	ldw	r2,-4(fp)
   1a3bc:	1090000c 	andi	r2,r2,16384
   1a3c0:	1000131e 	bne	r2,zero,1a410 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1a3c4:	0001883a 	nop
   1a3c8:	e0bffc17 	ldw	r2,-16(fp)
   1a3cc:	10c00a17 	ldw	r3,40(r2)
   1a3d0:	e0bff717 	ldw	r2,-36(fp)
   1a3d4:	1880051e 	bne	r3,r2,1a3ec <altera_avalon_jtag_uart_read+0x138>
   1a3d8:	e0bffc17 	ldw	r2,-16(fp)
   1a3dc:	10c00917 	ldw	r3,36(r2)
   1a3e0:	e0bffc17 	ldw	r2,-16(fp)
   1a3e4:	10800117 	ldw	r2,4(r2)
   1a3e8:	18bff736 	bltu	r3,r2,1a3c8 <__alt_data_end+0xf001a3c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1a3ec:	e0bffc17 	ldw	r2,-16(fp)
   1a3f0:	10c00a17 	ldw	r3,40(r2)
   1a3f4:	e0bff717 	ldw	r2,-36(fp)
   1a3f8:	18800726 	beq	r3,r2,1a418 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1a3fc:	e0bffe17 	ldw	r2,-8(fp)
   1a400:	00bfb716 	blt	zero,r2,1a2e0 <__alt_data_end+0xf001a2e0>
   1a404:	00000506 	br	1a41c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1a408:	0001883a 	nop
   1a40c:	00000306 	br	1a41c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1a410:	0001883a 	nop
   1a414:	00000106 	br	1a41c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1a418:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1a41c:	e0fff517 	ldw	r3,-44(fp)
   1a420:	e0bffd17 	ldw	r2,-12(fp)
   1a424:	18801826 	beq	r3,r2,1a488 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a428:	0005303a 	rdctl	r2,status
   1a42c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a430:	e0fffb17 	ldw	r3,-20(fp)
   1a434:	00bfff84 	movi	r2,-2
   1a438:	1884703a 	and	r2,r3,r2
   1a43c:	1001703a 	wrctl	status,r2
  
  return context;
   1a440:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1a444:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a448:	e0bffc17 	ldw	r2,-16(fp)
   1a44c:	10800817 	ldw	r2,32(r2)
   1a450:	10c00054 	ori	r3,r2,1
   1a454:	e0bffc17 	ldw	r2,-16(fp)
   1a458:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a45c:	e0bffc17 	ldw	r2,-16(fp)
   1a460:	10800017 	ldw	r2,0(r2)
   1a464:	10800104 	addi	r2,r2,4
   1a468:	1007883a 	mov	r3,r2
   1a46c:	e0bffc17 	ldw	r2,-16(fp)
   1a470:	10800817 	ldw	r2,32(r2)
   1a474:	18800035 	stwio	r2,0(r3)
   1a478:	e0bffa17 	ldw	r2,-24(fp)
   1a47c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a480:	e0bff917 	ldw	r2,-28(fp)
   1a484:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1a488:	e0fff517 	ldw	r3,-44(fp)
   1a48c:	e0bffd17 	ldw	r2,-12(fp)
   1a490:	18800426 	beq	r3,r2,1a4a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1a494:	e0fff517 	ldw	r3,-44(fp)
   1a498:	e0bffd17 	ldw	r2,-12(fp)
   1a49c:	1885c83a 	sub	r2,r3,r2
   1a4a0:	00000606 	br	1a4bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1a4a4:	e0bfff17 	ldw	r2,-4(fp)
   1a4a8:	1090000c 	andi	r2,r2,16384
   1a4ac:	10000226 	beq	r2,zero,1a4b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1a4b0:	00bffd44 	movi	r2,-11
   1a4b4:	00000106 	br	1a4bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1a4b8:	00bffec4 	movi	r2,-5
}
   1a4bc:	e037883a 	mov	sp,fp
   1a4c0:	dfc00117 	ldw	ra,4(sp)
   1a4c4:	df000017 	ldw	fp,0(sp)
   1a4c8:	dec00204 	addi	sp,sp,8
   1a4cc:	f800283a 	ret

0001a4d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1a4d0:	defff304 	addi	sp,sp,-52
   1a4d4:	dfc00c15 	stw	ra,48(sp)
   1a4d8:	df000b15 	stw	fp,44(sp)
   1a4dc:	df000b04 	addi	fp,sp,44
   1a4e0:	e13ffc15 	stw	r4,-16(fp)
   1a4e4:	e17ffd15 	stw	r5,-12(fp)
   1a4e8:	e1bffe15 	stw	r6,-8(fp)
   1a4ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1a4f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1a4f4:	e0bffd17 	ldw	r2,-12(fp)
   1a4f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1a4fc:	00003706 	br	1a5dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1a500:	e0bffc17 	ldw	r2,-16(fp)
   1a504:	10800c17 	ldw	r2,48(r2)
   1a508:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1a50c:	e0bffc17 	ldw	r2,-16(fp)
   1a510:	10800d17 	ldw	r2,52(r2)
   1a514:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1a518:	e0fff917 	ldw	r3,-28(fp)
   1a51c:	e0bff517 	ldw	r2,-44(fp)
   1a520:	1880062e 	bgeu	r3,r2,1a53c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1a524:	e0fff517 	ldw	r3,-44(fp)
   1a528:	e0bff917 	ldw	r2,-28(fp)
   1a52c:	1885c83a 	sub	r2,r3,r2
   1a530:	10bfffc4 	addi	r2,r2,-1
   1a534:	e0bff615 	stw	r2,-40(fp)
   1a538:	00000b06 	br	1a568 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1a53c:	e0bff517 	ldw	r2,-44(fp)
   1a540:	10000526 	beq	r2,zero,1a558 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1a544:	00c20004 	movi	r3,2048
   1a548:	e0bff917 	ldw	r2,-28(fp)
   1a54c:	1885c83a 	sub	r2,r3,r2
   1a550:	e0bff615 	stw	r2,-40(fp)
   1a554:	00000406 	br	1a568 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1a558:	00c1ffc4 	movi	r3,2047
   1a55c:	e0bff917 	ldw	r2,-28(fp)
   1a560:	1885c83a 	sub	r2,r3,r2
   1a564:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1a568:	e0bff617 	ldw	r2,-40(fp)
   1a56c:	10001e26 	beq	r2,zero,1a5e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1a570:	e0fffe17 	ldw	r3,-8(fp)
   1a574:	e0bff617 	ldw	r2,-40(fp)
   1a578:	1880022e 	bgeu	r3,r2,1a584 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1a57c:	e0bffe17 	ldw	r2,-8(fp)
   1a580:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1a584:	e0bffc17 	ldw	r2,-16(fp)
   1a588:	10c20e04 	addi	r3,r2,2104
   1a58c:	e0bff917 	ldw	r2,-28(fp)
   1a590:	1885883a 	add	r2,r3,r2
   1a594:	e1bff617 	ldw	r6,-40(fp)
   1a598:	e17ffd17 	ldw	r5,-12(fp)
   1a59c:	1009883a 	mov	r4,r2
   1a5a0:	00091200 	call	9120 <memcpy>
      ptr   += n;
   1a5a4:	e0fffd17 	ldw	r3,-12(fp)
   1a5a8:	e0bff617 	ldw	r2,-40(fp)
   1a5ac:	1885883a 	add	r2,r3,r2
   1a5b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1a5b4:	e0fffe17 	ldw	r3,-8(fp)
   1a5b8:	e0bff617 	ldw	r2,-40(fp)
   1a5bc:	1885c83a 	sub	r2,r3,r2
   1a5c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a5c4:	e0fff917 	ldw	r3,-28(fp)
   1a5c8:	e0bff617 	ldw	r2,-40(fp)
   1a5cc:	1885883a 	add	r2,r3,r2
   1a5d0:	10c1ffcc 	andi	r3,r2,2047
   1a5d4:	e0bffc17 	ldw	r2,-16(fp)
   1a5d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1a5dc:	e0bffe17 	ldw	r2,-8(fp)
   1a5e0:	00bfc716 	blt	zero,r2,1a500 <__alt_data_end+0xf001a500>
   1a5e4:	00000106 	br	1a5ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1a5e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a5ec:	0005303a 	rdctl	r2,status
   1a5f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a5f4:	e0fffb17 	ldw	r3,-20(fp)
   1a5f8:	00bfff84 	movi	r2,-2
   1a5fc:	1884703a 	and	r2,r3,r2
   1a600:	1001703a 	wrctl	status,r2
  
  return context;
   1a604:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1a608:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a60c:	e0bffc17 	ldw	r2,-16(fp)
   1a610:	10800817 	ldw	r2,32(r2)
   1a614:	10c00094 	ori	r3,r2,2
   1a618:	e0bffc17 	ldw	r2,-16(fp)
   1a61c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a620:	e0bffc17 	ldw	r2,-16(fp)
   1a624:	10800017 	ldw	r2,0(r2)
   1a628:	10800104 	addi	r2,r2,4
   1a62c:	1007883a 	mov	r3,r2
   1a630:	e0bffc17 	ldw	r2,-16(fp)
   1a634:	10800817 	ldw	r2,32(r2)
   1a638:	18800035 	stwio	r2,0(r3)
   1a63c:	e0bffa17 	ldw	r2,-24(fp)
   1a640:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a644:	e0bff817 	ldw	r2,-32(fp)
   1a648:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1a64c:	e0bffe17 	ldw	r2,-8(fp)
   1a650:	0080100e 	bge	zero,r2,1a694 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1a654:	e0bfff17 	ldw	r2,-4(fp)
   1a658:	1090000c 	andi	r2,r2,16384
   1a65c:	1000101e 	bne	r2,zero,1a6a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1a660:	0001883a 	nop
   1a664:	e0bffc17 	ldw	r2,-16(fp)
   1a668:	10c00d17 	ldw	r3,52(r2)
   1a66c:	e0bff517 	ldw	r2,-44(fp)
   1a670:	1880051e 	bne	r3,r2,1a688 <altera_avalon_jtag_uart_write+0x1b8>
   1a674:	e0bffc17 	ldw	r2,-16(fp)
   1a678:	10c00917 	ldw	r3,36(r2)
   1a67c:	e0bffc17 	ldw	r2,-16(fp)
   1a680:	10800117 	ldw	r2,4(r2)
   1a684:	18bff736 	bltu	r3,r2,1a664 <__alt_data_end+0xf001a664>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1a688:	e0bffc17 	ldw	r2,-16(fp)
   1a68c:	10800917 	ldw	r2,36(r2)
   1a690:	1000051e 	bne	r2,zero,1a6a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1a694:	e0bffe17 	ldw	r2,-8(fp)
   1a698:	00bfd016 	blt	zero,r2,1a5dc <__alt_data_end+0xf001a5dc>
   1a69c:	00000306 	br	1a6ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1a6a0:	0001883a 	nop
   1a6a4:	00000106 	br	1a6ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1a6a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1a6ac:	e0fffd17 	ldw	r3,-12(fp)
   1a6b0:	e0bff717 	ldw	r2,-36(fp)
   1a6b4:	18800426 	beq	r3,r2,1a6c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1a6b8:	e0fffd17 	ldw	r3,-12(fp)
   1a6bc:	e0bff717 	ldw	r2,-36(fp)
   1a6c0:	1885c83a 	sub	r2,r3,r2
   1a6c4:	00000606 	br	1a6e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1a6c8:	e0bfff17 	ldw	r2,-4(fp)
   1a6cc:	1090000c 	andi	r2,r2,16384
   1a6d0:	10000226 	beq	r2,zero,1a6dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1a6d4:	00bffd44 	movi	r2,-11
   1a6d8:	00000106 	br	1a6e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1a6dc:	00bffec4 	movi	r2,-5
}
   1a6e0:	e037883a 	mov	sp,fp
   1a6e4:	dfc00117 	ldw	ra,4(sp)
   1a6e8:	df000017 	ldw	fp,0(sp)
   1a6ec:	dec00204 	addi	sp,sp,8
   1a6f0:	f800283a 	ret

0001a6f4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   1a6f4:	defffa04 	addi	sp,sp,-24
   1a6f8:	dfc00515 	stw	ra,20(sp)
   1a6fc:	df000415 	stw	fp,16(sp)
   1a700:	df000404 	addi	fp,sp,16
   1a704:	e13ffe15 	stw	r4,-8(fp)
   1a708:	2805883a 	mov	r2,r5
   1a70c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   1a710:	e0bffe17 	ldw	r2,-8(fp)
   1a714:	10800017 	ldw	r2,0(r2)
   1a718:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   1a71c:	008003f4 	movhi	r2,15
   1a720:	10909004 	addi	r2,r2,16960
   1a724:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   1a728:	e0bffe17 	ldw	r2,-8(fp)
   1a72c:	10800803 	ldbu	r2,32(r2)
   1a730:	10803fcc 	andi	r2,r2,255
   1a734:	1080201c 	xori	r2,r2,128
   1a738:	10bfe004 	addi	r2,r2,-128
   1a73c:	1000151e 	bne	r2,zero,1a794 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1a740:	00000906 	br	1a768 <lcd_write_command+0x74>
    if (--i == 0)
   1a744:	e0bffc17 	ldw	r2,-16(fp)
   1a748:	10bfffc4 	addi	r2,r2,-1
   1a74c:	e0bffc15 	stw	r2,-16(fp)
   1a750:	e0bffc17 	ldw	r2,-16(fp)
   1a754:	1000041e 	bne	r2,zero,1a768 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   1a758:	e0bffe17 	ldw	r2,-8(fp)
   1a75c:	00c00044 	movi	r3,1
   1a760:	10c00805 	stb	r3,32(r2)
      return;
   1a764:	00000c06 	br	1a798 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1a768:	e0bffd17 	ldw	r2,-12(fp)
   1a76c:	10800104 	addi	r2,r2,4
   1a770:	10800037 	ldwio	r2,0(r2)
   1a774:	1080200c 	andi	r2,r2,128
   1a778:	103ff21e 	bne	r2,zero,1a744 <__alt_data_end+0xf001a744>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   1a77c:	01001904 	movi	r4,100
   1a780:	001e7780 	call	1e778 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   1a784:	e0bffd17 	ldw	r2,-12(fp)
   1a788:	e0ffff03 	ldbu	r3,-4(fp)
   1a78c:	10c00035 	stwio	r3,0(r2)
   1a790:	00000106 	br	1a798 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   1a794:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   1a798:	e037883a 	mov	sp,fp
   1a79c:	dfc00117 	ldw	ra,4(sp)
   1a7a0:	df000017 	ldw	fp,0(sp)
   1a7a4:	dec00204 	addi	sp,sp,8
   1a7a8:	f800283a 	ret

0001a7ac <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   1a7ac:	defffa04 	addi	sp,sp,-24
   1a7b0:	dfc00515 	stw	ra,20(sp)
   1a7b4:	df000415 	stw	fp,16(sp)
   1a7b8:	df000404 	addi	fp,sp,16
   1a7bc:	e13ffe15 	stw	r4,-8(fp)
   1a7c0:	2805883a 	mov	r2,r5
   1a7c4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   1a7c8:	e0bffe17 	ldw	r2,-8(fp)
   1a7cc:	10800017 	ldw	r2,0(r2)
   1a7d0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   1a7d4:	008003f4 	movhi	r2,15
   1a7d8:	10909004 	addi	r2,r2,16960
   1a7dc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   1a7e0:	e0bffe17 	ldw	r2,-8(fp)
   1a7e4:	10800803 	ldbu	r2,32(r2)
   1a7e8:	10803fcc 	andi	r2,r2,255
   1a7ec:	1080201c 	xori	r2,r2,128
   1a7f0:	10bfe004 	addi	r2,r2,-128
   1a7f4:	10001d1e 	bne	r2,zero,1a86c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1a7f8:	00000906 	br	1a820 <lcd_write_data+0x74>
    if (--i == 0)
   1a7fc:	e0bffc17 	ldw	r2,-16(fp)
   1a800:	10bfffc4 	addi	r2,r2,-1
   1a804:	e0bffc15 	stw	r2,-16(fp)
   1a808:	e0bffc17 	ldw	r2,-16(fp)
   1a80c:	1000041e 	bne	r2,zero,1a820 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   1a810:	e0bffe17 	ldw	r2,-8(fp)
   1a814:	00c00044 	movi	r3,1
   1a818:	10c00805 	stb	r3,32(r2)
      return;
   1a81c:	00001406 	br	1a870 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   1a820:	e0bffd17 	ldw	r2,-12(fp)
   1a824:	10800104 	addi	r2,r2,4
   1a828:	10800037 	ldwio	r2,0(r2)
   1a82c:	1080200c 	andi	r2,r2,128
   1a830:	103ff21e 	bne	r2,zero,1a7fc <__alt_data_end+0xf001a7fc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   1a834:	01001904 	movi	r4,100
   1a838:	001e7780 	call	1e778 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   1a83c:	e0bffd17 	ldw	r2,-12(fp)
   1a840:	10800204 	addi	r2,r2,8
   1a844:	1007883a 	mov	r3,r2
   1a848:	e0bfff03 	ldbu	r2,-4(fp)
   1a84c:	18800035 	stwio	r2,0(r3)

  sp->address++;
   1a850:	e0bffe17 	ldw	r2,-8(fp)
   1a854:	108008c3 	ldbu	r2,35(r2)
   1a858:	10800044 	addi	r2,r2,1
   1a85c:	1007883a 	mov	r3,r2
   1a860:	e0bffe17 	ldw	r2,-8(fp)
   1a864:	10c008c5 	stb	r3,35(r2)
   1a868:	00000106 	br	1a870 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   1a86c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   1a870:	e037883a 	mov	sp,fp
   1a874:	dfc00117 	ldw	ra,4(sp)
   1a878:	df000017 	ldw	fp,0(sp)
   1a87c:	dec00204 	addi	sp,sp,8
   1a880:	f800283a 	ret

0001a884 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   1a884:	defffc04 	addi	sp,sp,-16
   1a888:	dfc00315 	stw	ra,12(sp)
   1a88c:	df000215 	stw	fp,8(sp)
   1a890:	df000204 	addi	fp,sp,8
   1a894:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   1a898:	01400044 	movi	r5,1
   1a89c:	e13fff17 	ldw	r4,-4(fp)
   1a8a0:	001a6f40 	call	1a6f4 <lcd_write_command>

  sp->x = 0;
   1a8a4:	e0bfff17 	ldw	r2,-4(fp)
   1a8a8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   1a8ac:	e0bfff17 	ldw	r2,-4(fp)
   1a8b0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   1a8b4:	e0bfff17 	ldw	r2,-4(fp)
   1a8b8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1a8bc:	e03ffe15 	stw	zero,-8(fp)
   1a8c0:	00001b06 	br	1a930 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   1a8c4:	e0bffe17 	ldw	r2,-8(fp)
   1a8c8:	108018e4 	muli	r2,r2,99
   1a8cc:	10801004 	addi	r2,r2,64
   1a8d0:	e0ffff17 	ldw	r3,-4(fp)
   1a8d4:	1885883a 	add	r2,r3,r2
   1a8d8:	01801444 	movi	r6,81
   1a8dc:	01400804 	movi	r5,32
   1a8e0:	1009883a 	mov	r4,r2
   1a8e4:	00092680 	call	9268 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   1a8e8:	e0bffe17 	ldw	r2,-8(fp)
   1a8ec:	108018e4 	muli	r2,r2,99
   1a8f0:	10800c04 	addi	r2,r2,48
   1a8f4:	e0ffff17 	ldw	r3,-4(fp)
   1a8f8:	1885883a 	add	r2,r3,r2
   1a8fc:	01800404 	movi	r6,16
   1a900:	01400804 	movi	r5,32
   1a904:	1009883a 	mov	r4,r2
   1a908:	00092680 	call	9268 <memset>
    sp->line[y].width = 0;
   1a90c:	e0ffff17 	ldw	r3,-4(fp)
   1a910:	e0bffe17 	ldw	r2,-8(fp)
   1a914:	108018e4 	muli	r2,r2,99
   1a918:	1885883a 	add	r2,r3,r2
   1a91c:	10802444 	addi	r2,r2,145
   1a920:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1a924:	e0bffe17 	ldw	r2,-8(fp)
   1a928:	10800044 	addi	r2,r2,1
   1a92c:	e0bffe15 	stw	r2,-8(fp)
   1a930:	e0bffe17 	ldw	r2,-8(fp)
   1a934:	10800090 	cmplti	r2,r2,2
   1a938:	103fe21e 	bne	r2,zero,1a8c4 <__alt_data_end+0xf001a8c4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   1a93c:	0001883a 	nop
   1a940:	e037883a 	mov	sp,fp
   1a944:	dfc00117 	ldw	ra,4(sp)
   1a948:	df000017 	ldw	fp,0(sp)
   1a94c:	dec00204 	addi	sp,sp,8
   1a950:	f800283a 	ret

0001a954 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   1a954:	defff704 	addi	sp,sp,-36
   1a958:	dfc00815 	stw	ra,32(sp)
   1a95c:	df000715 	stw	fp,28(sp)
   1a960:	df000704 	addi	fp,sp,28
   1a964:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   1a968:	e0bfff17 	ldw	r2,-4(fp)
   1a96c:	10800943 	ldbu	r2,37(r2)
   1a970:	10803fcc 	andi	r2,r2,255
   1a974:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1a978:	e03ff915 	stw	zero,-28(fp)
   1a97c:	00006806 	br	1ab20 <lcd_repaint_screen+0x1cc>
  {
    int width  = sp->line[y].width;
   1a980:	e0ffff17 	ldw	r3,-4(fp)
   1a984:	e0bff917 	ldw	r2,-28(fp)
   1a988:	108018e4 	muli	r2,r2,99
   1a98c:	1885883a 	add	r2,r3,r2
   1a990:	10802444 	addi	r2,r2,145
   1a994:	10800003 	ldbu	r2,0(r2)
   1a998:	10803fcc 	andi	r2,r2,255
   1a99c:	1080201c 	xori	r2,r2,128
   1a9a0:	10bfe004 	addi	r2,r2,-128
   1a9a4:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   1a9a8:	e0ffff17 	ldw	r3,-4(fp)
   1a9ac:	e0bff917 	ldw	r2,-28(fp)
   1a9b0:	108018e4 	muli	r2,r2,99
   1a9b4:	1885883a 	add	r2,r3,r2
   1a9b8:	10802484 	addi	r2,r2,146
   1a9bc:	10800003 	ldbu	r2,0(r2)
   1a9c0:	10c03fcc 	andi	r3,r2,255
   1a9c4:	e0bffc17 	ldw	r2,-16(fp)
   1a9c8:	1885383a 	mul	r2,r3,r2
   1a9cc:	1005d23a 	srai	r2,r2,8
   1a9d0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
   1a9d4:	e0fffb17 	ldw	r3,-20(fp)
   1a9d8:	e0bffd17 	ldw	r2,-12(fp)
   1a9dc:	18800116 	blt	r3,r2,1a9e4 <lcd_repaint_screen+0x90>
      offset = 0;
   1a9e0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   1a9e4:	e03ffa15 	stw	zero,-24(fp)
   1a9e8:	00004706 	br	1ab08 <lcd_repaint_screen+0x1b4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   1a9ec:	e0fffa17 	ldw	r3,-24(fp)
   1a9f0:	e0bffb17 	ldw	r2,-20(fp)
   1a9f4:	1885883a 	add	r2,r3,r2
   1a9f8:	e0fffd17 	ldw	r3,-12(fp)
   1a9fc:	10c9283a 	div	r4,r2,r3
   1aa00:	e0fffd17 	ldw	r3,-12(fp)
   1aa04:	20c7383a 	mul	r3,r4,r3
   1aa08:	10c5c83a 	sub	r2,r2,r3
   1aa0c:	e13fff17 	ldw	r4,-4(fp)
   1aa10:	e0fff917 	ldw	r3,-28(fp)
   1aa14:	18c018e4 	muli	r3,r3,99
   1aa18:	20c7883a 	add	r3,r4,r3
   1aa1c:	1885883a 	add	r2,r3,r2
   1aa20:	10801004 	addi	r2,r2,64
   1aa24:	10800003 	ldbu	r2,0(r2)
   1aa28:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   1aa2c:	e0ffff17 	ldw	r3,-4(fp)
   1aa30:	e0bff917 	ldw	r2,-28(fp)
   1aa34:	108018e4 	muli	r2,r2,99
   1aa38:	1887883a 	add	r3,r3,r2
   1aa3c:	e0bffa17 	ldw	r2,-24(fp)
   1aa40:	1885883a 	add	r2,r3,r2
   1aa44:	10800c04 	addi	r2,r2,48
   1aa48:	10800003 	ldbu	r2,0(r2)
   1aa4c:	10c03fcc 	andi	r3,r2,255
   1aa50:	18c0201c 	xori	r3,r3,128
   1aa54:	18ffe004 	addi	r3,r3,-128
   1aa58:	e0bffe07 	ldb	r2,-8(fp)
   1aa5c:	18802726 	beq	r3,r2,1aafc <lcd_repaint_screen+0x1a8>
      {
        unsigned char address = x + colstart[y];
   1aa60:	e0fff917 	ldw	r3,-28(fp)
   1aa64:	d0a01284 	addi	r2,gp,-32694
   1aa68:	1885883a 	add	r2,r3,r2
   1aa6c:	10800003 	ldbu	r2,0(r2)
   1aa70:	1007883a 	mov	r3,r2
   1aa74:	e0bffa17 	ldw	r2,-24(fp)
   1aa78:	1885883a 	add	r2,r3,r2
   1aa7c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
   1aa80:	e0fffe43 	ldbu	r3,-7(fp)
   1aa84:	e0bfff17 	ldw	r2,-4(fp)
   1aa88:	108008c3 	ldbu	r2,35(r2)
   1aa8c:	10803fcc 	andi	r2,r2,255
   1aa90:	1080201c 	xori	r2,r2,128
   1aa94:	10bfe004 	addi	r2,r2,-128
   1aa98:	18800a26 	beq	r3,r2,1aac4 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   1aa9c:	e0fffe43 	ldbu	r3,-7(fp)
   1aaa0:	00bfe004 	movi	r2,-128
   1aaa4:	1884b03a 	or	r2,r3,r2
   1aaa8:	10803fcc 	andi	r2,r2,255
   1aaac:	100b883a 	mov	r5,r2
   1aab0:	e13fff17 	ldw	r4,-4(fp)
   1aab4:	001a6f40 	call	1a6f4 <lcd_write_command>
          sp->address = address;
   1aab8:	e0fffe43 	ldbu	r3,-7(fp)
   1aabc:	e0bfff17 	ldw	r2,-4(fp)
   1aac0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   1aac4:	e0bffe03 	ldbu	r2,-8(fp)
   1aac8:	10803fcc 	andi	r2,r2,255
   1aacc:	100b883a 	mov	r5,r2
   1aad0:	e13fff17 	ldw	r4,-4(fp)
   1aad4:	001a7ac0 	call	1a7ac <lcd_write_data>
        sp->line[y].visible[x] = c;
   1aad8:	e0ffff17 	ldw	r3,-4(fp)
   1aadc:	e0bff917 	ldw	r2,-28(fp)
   1aae0:	108018e4 	muli	r2,r2,99
   1aae4:	1887883a 	add	r3,r3,r2
   1aae8:	e0bffa17 	ldw	r2,-24(fp)
   1aaec:	1885883a 	add	r2,r3,r2
   1aaf0:	10800c04 	addi	r2,r2,48
   1aaf4:	e0fffe03 	ldbu	r3,-8(fp)
   1aaf8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   1aafc:	e0bffa17 	ldw	r2,-24(fp)
   1ab00:	10800044 	addi	r2,r2,1
   1ab04:	e0bffa15 	stw	r2,-24(fp)
   1ab08:	e0bffa17 	ldw	r2,-24(fp)
   1ab0c:	10800410 	cmplti	r2,r2,16
   1ab10:	103fb61e 	bne	r2,zero,1a9ec <__alt_data_end+0xf001a9ec>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1ab14:	e0bff917 	ldw	r2,-28(fp)
   1ab18:	10800044 	addi	r2,r2,1
   1ab1c:	e0bff915 	stw	r2,-28(fp)
   1ab20:	e0bff917 	ldw	r2,-28(fp)
   1ab24:	10800090 	cmplti	r2,r2,2
   1ab28:	103f951e 	bne	r2,zero,1a980 <__alt_data_end+0xf001a980>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   1ab2c:	0001883a 	nop
   1ab30:	e037883a 	mov	sp,fp
   1ab34:	dfc00117 	ldw	ra,4(sp)
   1ab38:	df000017 	ldw	fp,0(sp)
   1ab3c:	dec00204 	addi	sp,sp,8
   1ab40:	f800283a 	ret

0001ab44 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   1ab44:	defffc04 	addi	sp,sp,-16
   1ab48:	dfc00315 	stw	ra,12(sp)
   1ab4c:	df000215 	stw	fp,8(sp)
   1ab50:	df000204 	addi	fp,sp,8
   1ab54:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1ab58:	e03ffe15 	stw	zero,-8(fp)
   1ab5c:	00001d06 	br	1abd4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
   1ab60:	e0bffe17 	ldw	r2,-8(fp)
   1ab64:	00800f16 	blt	zero,r2,1aba4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   1ab68:	e0bffe17 	ldw	r2,-8(fp)
   1ab6c:	108018e4 	muli	r2,r2,99
   1ab70:	10801004 	addi	r2,r2,64
   1ab74:	e0ffff17 	ldw	r3,-4(fp)
   1ab78:	1889883a 	add	r4,r3,r2
   1ab7c:	e0bffe17 	ldw	r2,-8(fp)
   1ab80:	10800044 	addi	r2,r2,1
   1ab84:	108018e4 	muli	r2,r2,99
   1ab88:	10801004 	addi	r2,r2,64
   1ab8c:	e0ffff17 	ldw	r3,-4(fp)
   1ab90:	1885883a 	add	r2,r3,r2
   1ab94:	01801404 	movi	r6,80
   1ab98:	100b883a 	mov	r5,r2
   1ab9c:	00091200 	call	9120 <memcpy>
   1aba0:	00000906 	br	1abc8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   1aba4:	e0bffe17 	ldw	r2,-8(fp)
   1aba8:	108018e4 	muli	r2,r2,99
   1abac:	10801004 	addi	r2,r2,64
   1abb0:	e0ffff17 	ldw	r3,-4(fp)
   1abb4:	1885883a 	add	r2,r3,r2
   1abb8:	01801404 	movi	r6,80
   1abbc:	01400804 	movi	r5,32
   1abc0:	1009883a 	mov	r4,r2
   1abc4:	00092680 	call	9268 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1abc8:	e0bffe17 	ldw	r2,-8(fp)
   1abcc:	10800044 	addi	r2,r2,1
   1abd0:	e0bffe15 	stw	r2,-8(fp)
   1abd4:	e0bffe17 	ldw	r2,-8(fp)
   1abd8:	10800090 	cmplti	r2,r2,2
   1abdc:	103fe01e 	bne	r2,zero,1ab60 <__alt_data_end+0xf001ab60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   1abe0:	e0bfff17 	ldw	r2,-4(fp)
   1abe4:	10800883 	ldbu	r2,34(r2)
   1abe8:	10bfffc4 	addi	r2,r2,-1
   1abec:	1007883a 	mov	r3,r2
   1abf0:	e0bfff17 	ldw	r2,-4(fp)
   1abf4:	10c00885 	stb	r3,34(r2)
}
   1abf8:	0001883a 	nop
   1abfc:	e037883a 	mov	sp,fp
   1ac00:	dfc00117 	ldw	ra,4(sp)
   1ac04:	df000017 	ldw	fp,0(sp)
   1ac08:	dec00204 	addi	sp,sp,8
   1ac0c:	f800283a 	ret

0001ac10 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   1ac10:	defff904 	addi	sp,sp,-28
   1ac14:	dfc00615 	stw	ra,24(sp)
   1ac18:	df000515 	stw	fp,20(sp)
   1ac1c:	df000504 	addi	fp,sp,20
   1ac20:	e13ffe15 	stw	r4,-8(fp)
   1ac24:	2805883a 	mov	r2,r5
   1ac28:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   1ac2c:	e03ffb15 	stw	zero,-20(fp)
   1ac30:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   1ac34:	e0bffe17 	ldw	r2,-8(fp)
   1ac38:	10800a03 	ldbu	r2,40(r2)
   1ac3c:	10803fcc 	andi	r2,r2,255
   1ac40:	1080201c 	xori	r2,r2,128
   1ac44:	10bfe004 	addi	r2,r2,-128
   1ac48:	108016d8 	cmpnei	r2,r2,91
   1ac4c:	1000411e 	bne	r2,zero,1ad54 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
   1ac50:	e0bffe17 	ldw	r2,-8(fp)
   1ac54:	10800a04 	addi	r2,r2,40
   1ac58:	10800044 	addi	r2,r2,1
   1ac5c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   1ac60:	00000c06 	br	1ac94 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   1ac64:	e0bffb17 	ldw	r2,-20(fp)
   1ac68:	10c002a4 	muli	r3,r2,10
   1ac6c:	e0bffd17 	ldw	r2,-12(fp)
   1ac70:	11000044 	addi	r4,r2,1
   1ac74:	e13ffd15 	stw	r4,-12(fp)
   1ac78:	10800003 	ldbu	r2,0(r2)
   1ac7c:	10803fcc 	andi	r2,r2,255
   1ac80:	1080201c 	xori	r2,r2,128
   1ac84:	10bfe004 	addi	r2,r2,-128
   1ac88:	10bff404 	addi	r2,r2,-48
   1ac8c:	1885883a 	add	r2,r3,r2
   1ac90:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   1ac94:	d0e01797 	ldw	r3,-32674(gp)
   1ac98:	e0bffd17 	ldw	r2,-12(fp)
   1ac9c:	10800003 	ldbu	r2,0(r2)
   1aca0:	10803fcc 	andi	r2,r2,255
   1aca4:	1080201c 	xori	r2,r2,128
   1aca8:	10bfe004 	addi	r2,r2,-128
   1acac:	10800044 	addi	r2,r2,1
   1acb0:	1885883a 	add	r2,r3,r2
   1acb4:	10800003 	ldbu	r2,0(r2)
   1acb8:	10803fcc 	andi	r2,r2,255
   1acbc:	1080010c 	andi	r2,r2,4
   1acc0:	103fe81e 	bne	r2,zero,1ac64 <__alt_data_end+0xf001ac64>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   1acc4:	e0bffd17 	ldw	r2,-12(fp)
   1acc8:	10800003 	ldbu	r2,0(r2)
   1accc:	10803fcc 	andi	r2,r2,255
   1acd0:	1080201c 	xori	r2,r2,128
   1acd4:	10bfe004 	addi	r2,r2,-128
   1acd8:	10800ed8 	cmpnei	r2,r2,59
   1acdc:	10001f1e 	bne	r2,zero,1ad5c <lcd_handle_escape+0x14c>
    {
      ptr++;
   1ace0:	e0bffd17 	ldw	r2,-12(fp)
   1ace4:	10800044 	addi	r2,r2,1
   1ace8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   1acec:	00000c06 	br	1ad20 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   1acf0:	e0bffc17 	ldw	r2,-16(fp)
   1acf4:	10c002a4 	muli	r3,r2,10
   1acf8:	e0bffd17 	ldw	r2,-12(fp)
   1acfc:	11000044 	addi	r4,r2,1
   1ad00:	e13ffd15 	stw	r4,-12(fp)
   1ad04:	10800003 	ldbu	r2,0(r2)
   1ad08:	10803fcc 	andi	r2,r2,255
   1ad0c:	1080201c 	xori	r2,r2,128
   1ad10:	10bfe004 	addi	r2,r2,-128
   1ad14:	10bff404 	addi	r2,r2,-48
   1ad18:	1885883a 	add	r2,r3,r2
   1ad1c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   1ad20:	d0e01797 	ldw	r3,-32674(gp)
   1ad24:	e0bffd17 	ldw	r2,-12(fp)
   1ad28:	10800003 	ldbu	r2,0(r2)
   1ad2c:	10803fcc 	andi	r2,r2,255
   1ad30:	1080201c 	xori	r2,r2,128
   1ad34:	10bfe004 	addi	r2,r2,-128
   1ad38:	10800044 	addi	r2,r2,1
   1ad3c:	1885883a 	add	r2,r3,r2
   1ad40:	10800003 	ldbu	r2,0(r2)
   1ad44:	10803fcc 	andi	r2,r2,255
   1ad48:	1080010c 	andi	r2,r2,4
   1ad4c:	103fe81e 	bne	r2,zero,1acf0 <__alt_data_end+0xf001acf0>
   1ad50:	00000206 	br	1ad5c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   1ad54:	00bfffc4 	movi	r2,-1
   1ad58:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   1ad5c:	e0bfff07 	ldb	r2,-4(fp)
   1ad60:	10c012a0 	cmpeqi	r3,r2,74
   1ad64:	1800291e 	bne	r3,zero,1ae0c <lcd_handle_escape+0x1fc>
   1ad68:	10c012c8 	cmpgei	r3,r2,75
   1ad6c:	1800031e 	bne	r3,zero,1ad7c <lcd_handle_escape+0x16c>
   1ad70:	10801220 	cmpeqi	r2,r2,72
   1ad74:	1000061e 	bne	r2,zero,1ad90 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   1ad78:	00004a06 	br	1aea4 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
   1ad7c:	10c012e0 	cmpeqi	r3,r2,75
   1ad80:	1800281e 	bne	r3,zero,1ae24 <lcd_handle_escape+0x214>
   1ad84:	108019a0 	cmpeqi	r2,r2,102
   1ad88:	1000011e 	bne	r2,zero,1ad90 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   1ad8c:	00004506 	br	1aea4 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   1ad90:	e0bffc17 	ldw	r2,-16(fp)
   1ad94:	0080050e 	bge	zero,r2,1adac <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
   1ad98:	e0bffc17 	ldw	r2,-16(fp)
   1ad9c:	10bfffc4 	addi	r2,r2,-1
   1ada0:	1007883a 	mov	r3,r2
   1ada4:	e0bffe17 	ldw	r2,-8(fp)
   1ada8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   1adac:	e0bffb17 	ldw	r2,-20(fp)
   1adb0:	0080370e 	bge	zero,r2,1ae90 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
   1adb4:	e0bffb17 	ldw	r2,-20(fp)
   1adb8:	10bfffc4 	addi	r2,r2,-1
   1adbc:	1007883a 	mov	r3,r2
   1adc0:	e0bffe17 	ldw	r2,-8(fp)
   1adc4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   1adc8:	e0bffe17 	ldw	r2,-8(fp)
   1adcc:	10800883 	ldbu	r2,34(r2)
   1add0:	10803fcc 	andi	r2,r2,255
   1add4:	10800170 	cmpltui	r2,r2,5
   1add8:	1000061e 	bne	r2,zero,1adf4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
   1addc:	e0bffe17 	ldw	r2,-8(fp)
   1ade0:	00c00104 	movi	r3,4
   1ade4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   1ade8:	00000206 	br	1adf4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
   1adec:	e13ffe17 	ldw	r4,-8(fp)
   1adf0:	001ab440 	call	1ab44 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   1adf4:	e0bffe17 	ldw	r2,-8(fp)
   1adf8:	10800883 	ldbu	r2,34(r2)
   1adfc:	10803fcc 	andi	r2,r2,255
   1ae00:	108000e8 	cmpgeui	r2,r2,3
   1ae04:	103ff91e 	bne	r2,zero,1adec <__alt_data_end+0xf001adec>
        lcd_scroll_up(sp);
    }
    break;
   1ae08:	00002106 	br	1ae90 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   1ae0c:	e0bffb17 	ldw	r2,-20(fp)
   1ae10:	10800098 	cmpnei	r2,r2,2
   1ae14:	1000201e 	bne	r2,zero,1ae98 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
   1ae18:	e13ffe17 	ldw	r4,-8(fp)
   1ae1c:	001a8840 	call	1a884 <lcd_clear_screen>
    break;
   1ae20:	00001d06 	br	1ae98 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   1ae24:	e0bffb17 	ldw	r2,-20(fp)
   1ae28:	00801d16 	blt	zero,r2,1aea0 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   1ae2c:	e0bffe17 	ldw	r2,-8(fp)
   1ae30:	10800843 	ldbu	r2,33(r2)
   1ae34:	10803fcc 	andi	r2,r2,255
   1ae38:	10801428 	cmpgeui	r2,r2,80
   1ae3c:	1000181e 	bne	r2,zero,1aea0 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   1ae40:	e0bffe17 	ldw	r2,-8(fp)
   1ae44:	10800883 	ldbu	r2,34(r2)
   1ae48:	10803fcc 	andi	r2,r2,255
   1ae4c:	108018e4 	muli	r2,r2,99
   1ae50:	10801004 	addi	r2,r2,64
   1ae54:	e0fffe17 	ldw	r3,-8(fp)
   1ae58:	1887883a 	add	r3,r3,r2
   1ae5c:	e0bffe17 	ldw	r2,-8(fp)
   1ae60:	10800843 	ldbu	r2,33(r2)
   1ae64:	10803fcc 	andi	r2,r2,255
   1ae68:	1889883a 	add	r4,r3,r2
   1ae6c:	e0bffe17 	ldw	r2,-8(fp)
   1ae70:	10800843 	ldbu	r2,33(r2)
   1ae74:	10803fcc 	andi	r2,r2,255
   1ae78:	00c01404 	movi	r3,80
   1ae7c:	1885c83a 	sub	r2,r3,r2
   1ae80:	100d883a 	mov	r6,r2
   1ae84:	01400804 	movi	r5,32
   1ae88:	00092680 	call	9268 <memset>
    }
    break;
   1ae8c:	00000406 	br	1aea0 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   1ae90:	0001883a 	nop
   1ae94:	00000306 	br	1aea4 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   1ae98:	0001883a 	nop
   1ae9c:	00000106 	br	1aea4 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   1aea0:	0001883a 	nop
  }
}
   1aea4:	0001883a 	nop
   1aea8:	e037883a 	mov	sp,fp
   1aeac:	dfc00117 	ldw	ra,4(sp)
   1aeb0:	df000017 	ldw	fp,0(sp)
   1aeb4:	dec00204 	addi	sp,sp,8
   1aeb8:	f800283a 	ret

0001aebc <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   1aebc:	defff304 	addi	sp,sp,-52
   1aec0:	dfc00c15 	stw	ra,48(sp)
   1aec4:	df000b15 	stw	fp,44(sp)
   1aec8:	df000b04 	addi	fp,sp,44
   1aecc:	e13ffc15 	stw	r4,-16(fp)
   1aed0:	e17ffd15 	stw	r5,-12(fp)
   1aed4:	e1bffe15 	stw	r6,-8(fp)
   1aed8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   1aedc:	e0bffe17 	ldw	r2,-8(fp)
   1aee0:	e0fffd17 	ldw	r3,-12(fp)
   1aee4:	1885883a 	add	r2,r3,r2
   1aee8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   1aeec:	e0bffc17 	ldw	r2,-16(fp)
   1aef0:	00c00044 	movi	r3,1
   1aef4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   1aef8:	00009906 	br	1b160 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
   1aefc:	e0bffd17 	ldw	r2,-12(fp)
   1af00:	10800003 	ldbu	r2,0(r2)
   1af04:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
   1af08:	e0bffc17 	ldw	r2,-16(fp)
   1af0c:	10800903 	ldbu	r2,36(r2)
   1af10:	10803fcc 	andi	r2,r2,255
   1af14:	1080201c 	xori	r2,r2,128
   1af18:	10bfe004 	addi	r2,r2,-128
   1af1c:	10003716 	blt	r2,zero,1affc <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
   1af20:	e0bffc17 	ldw	r2,-16(fp)
   1af24:	10800903 	ldbu	r2,36(r2)
   1af28:	10803fcc 	andi	r2,r2,255
   1af2c:	1080201c 	xori	r2,r2,128
   1af30:	10bfe004 	addi	r2,r2,-128
   1af34:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   1af38:	e0bffa17 	ldw	r2,-24(fp)
   1af3c:	1000031e 	bne	r2,zero,1af4c <altera_avalon_lcd_16207_write+0x90>
   1af40:	e0bff907 	ldb	r2,-28(fp)
   1af44:	108016d8 	cmpnei	r2,r2,91
   1af48:	10000d1e 	bne	r2,zero,1af80 <altera_avalon_lcd_16207_write+0xc4>
   1af4c:	e0bffa17 	ldw	r2,-24(fp)
   1af50:	10001826 	beq	r2,zero,1afb4 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
   1af54:	d0e01797 	ldw	r3,-32674(gp)
   1af58:	e0bff907 	ldb	r2,-28(fp)
   1af5c:	10800044 	addi	r2,r2,1
   1af60:	1885883a 	add	r2,r3,r2
   1af64:	10800003 	ldbu	r2,0(r2)
   1af68:	10803fcc 	andi	r2,r2,255
   1af6c:	1080010c 	andi	r2,r2,4
   1af70:	1000101e 	bne	r2,zero,1afb4 <altera_avalon_lcd_16207_write+0xf8>
   1af74:	e0bff907 	ldb	r2,-28(fp)
   1af78:	10800ee0 	cmpeqi	r2,r2,59
   1af7c:	10000d1e 	bne	r2,zero,1afb4 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
   1af80:	e0fffc17 	ldw	r3,-16(fp)
   1af84:	e0bffa17 	ldw	r2,-24(fp)
   1af88:	1885883a 	add	r2,r3,r2
   1af8c:	10800a04 	addi	r2,r2,40
   1af90:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   1af94:	e0bff907 	ldb	r2,-28(fp)
   1af98:	100b883a 	mov	r5,r2
   1af9c:	e13ffc17 	ldw	r4,-16(fp)
   1afa0:	001ac100 	call	1ac10 <lcd_handle_escape>

        sp->esccount = -1;
   1afa4:	e0bffc17 	ldw	r2,-16(fp)
   1afa8:	00ffffc4 	movi	r3,-1
   1afac:	10c00905 	stb	r3,36(r2)
   1afb0:	00006806 	br	1b154 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   1afb4:	e0bffc17 	ldw	r2,-16(fp)
   1afb8:	10800903 	ldbu	r2,36(r2)
   1afbc:	10803fcc 	andi	r2,r2,255
   1afc0:	108001e8 	cmpgeui	r2,r2,7
   1afc4:	1000631e 	bne	r2,zero,1b154 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
   1afc8:	e0fffc17 	ldw	r3,-16(fp)
   1afcc:	e0bffa17 	ldw	r2,-24(fp)
   1afd0:	1885883a 	add	r2,r3,r2
   1afd4:	10800a04 	addi	r2,r2,40
   1afd8:	e0fff903 	ldbu	r3,-28(fp)
   1afdc:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   1afe0:	e0bffc17 	ldw	r2,-16(fp)
   1afe4:	10800903 	ldbu	r2,36(r2)
   1afe8:	10800044 	addi	r2,r2,1
   1afec:	1007883a 	mov	r3,r2
   1aff0:	e0bffc17 	ldw	r2,-16(fp)
   1aff4:	10c00905 	stb	r3,36(r2)
   1aff8:	00005606 	br	1b154 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
   1affc:	e0bff907 	ldb	r2,-28(fp)
   1b000:	108006d8 	cmpnei	r2,r2,27
   1b004:	1000031e 	bne	r2,zero,1b014 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
   1b008:	e0bffc17 	ldw	r2,-16(fp)
   1b00c:	10000905 	stb	zero,36(r2)
   1b010:	00005006 	br	1b154 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
   1b014:	e0bff907 	ldb	r2,-28(fp)
   1b018:	10800358 	cmpnei	r2,r2,13
   1b01c:	1000031e 	bne	r2,zero,1b02c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
   1b020:	e0bffc17 	ldw	r2,-16(fp)
   1b024:	10000845 	stb	zero,33(r2)
   1b028:	00004a06 	br	1b154 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
   1b02c:	e0bff907 	ldb	r2,-28(fp)
   1b030:	10800298 	cmpnei	r2,r2,10
   1b034:	1000101e 	bne	r2,zero,1b078 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
   1b038:	e0bffc17 	ldw	r2,-16(fp)
   1b03c:	10000845 	stb	zero,33(r2)
      sp->y++;
   1b040:	e0bffc17 	ldw	r2,-16(fp)
   1b044:	10800883 	ldbu	r2,34(r2)
   1b048:	10800044 	addi	r2,r2,1
   1b04c:	1007883a 	mov	r3,r2
   1b050:	e0bffc17 	ldw	r2,-16(fp)
   1b054:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   1b058:	e0bffc17 	ldw	r2,-16(fp)
   1b05c:	10800883 	ldbu	r2,34(r2)
   1b060:	10803fcc 	andi	r2,r2,255
   1b064:	108000f0 	cmpltui	r2,r2,3
   1b068:	10003a1e 	bne	r2,zero,1b154 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
   1b06c:	e13ffc17 	ldw	r4,-16(fp)
   1b070:	001ab440 	call	1ab44 <lcd_scroll_up>
   1b074:	00003706 	br	1b154 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
   1b078:	e0bff907 	ldb	r2,-28(fp)
   1b07c:	10800218 	cmpnei	r2,r2,8
   1b080:	10000b1e 	bne	r2,zero,1b0b0 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
   1b084:	e0bffc17 	ldw	r2,-16(fp)
   1b088:	10800843 	ldbu	r2,33(r2)
   1b08c:	10803fcc 	andi	r2,r2,255
   1b090:	10003026 	beq	r2,zero,1b154 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
   1b094:	e0bffc17 	ldw	r2,-16(fp)
   1b098:	10800843 	ldbu	r2,33(r2)
   1b09c:	10bfffc4 	addi	r2,r2,-1
   1b0a0:	1007883a 	mov	r3,r2
   1b0a4:	e0bffc17 	ldw	r2,-16(fp)
   1b0a8:	10c00845 	stb	r3,33(r2)
   1b0ac:	00002906 	br	1b154 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
   1b0b0:	d0e01797 	ldw	r3,-32674(gp)
   1b0b4:	e0bff907 	ldb	r2,-28(fp)
   1b0b8:	10800044 	addi	r2,r2,1
   1b0bc:	1885883a 	add	r2,r3,r2
   1b0c0:	10800003 	ldbu	r2,0(r2)
   1b0c4:	10803fcc 	andi	r2,r2,255
   1b0c8:	1080201c 	xori	r2,r2,128
   1b0cc:	10bfe004 	addi	r2,r2,-128
   1b0d0:	108025cc 	andi	r2,r2,151
   1b0d4:	10001f26 	beq	r2,zero,1b154 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   1b0d8:	e0bffc17 	ldw	r2,-16(fp)
   1b0dc:	10800883 	ldbu	r2,34(r2)
   1b0e0:	10803fcc 	andi	r2,r2,255
   1b0e4:	108000b0 	cmpltui	r2,r2,2
   1b0e8:	1000021e 	bne	r2,zero,1b0f4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
   1b0ec:	e13ffc17 	ldw	r4,-16(fp)
   1b0f0:	001ab440 	call	1ab44 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   1b0f4:	e0bffc17 	ldw	r2,-16(fp)
   1b0f8:	10800843 	ldbu	r2,33(r2)
   1b0fc:	10803fcc 	andi	r2,r2,255
   1b100:	10801428 	cmpgeui	r2,r2,80
   1b104:	10000d1e 	bne	r2,zero,1b13c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
   1b108:	e0bffc17 	ldw	r2,-16(fp)
   1b10c:	10800883 	ldbu	r2,34(r2)
   1b110:	10c03fcc 	andi	r3,r2,255
   1b114:	e0bffc17 	ldw	r2,-16(fp)
   1b118:	10800843 	ldbu	r2,33(r2)
   1b11c:	10803fcc 	andi	r2,r2,255
   1b120:	e13ffc17 	ldw	r4,-16(fp)
   1b124:	18c018e4 	muli	r3,r3,99
   1b128:	20c7883a 	add	r3,r4,r3
   1b12c:	1885883a 	add	r2,r3,r2
   1b130:	10801004 	addi	r2,r2,64
   1b134:	e0fff903 	ldbu	r3,-28(fp)
   1b138:	10c00005 	stb	r3,0(r2)

      sp->x++;
   1b13c:	e0bffc17 	ldw	r2,-16(fp)
   1b140:	10800843 	ldbu	r2,33(r2)
   1b144:	10800044 	addi	r2,r2,1
   1b148:	1007883a 	mov	r3,r2
   1b14c:	e0bffc17 	ldw	r2,-16(fp)
   1b150:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   1b154:	e0bffd17 	ldw	r2,-12(fp)
   1b158:	10800044 	addi	r2,r2,1
   1b15c:	e0bffd15 	stw	r2,-12(fp)
   1b160:	e0fffd17 	ldw	r3,-12(fp)
   1b164:	e0bff817 	ldw	r2,-32(fp)
   1b168:	18bf6436 	bltu	r3,r2,1aefc <__alt_data_end+0xf001aefc>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   1b16c:	00800404 	movi	r2,16
   1b170:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b174:	e03ff515 	stw	zero,-44(fp)
   1b178:	00003706 	br	1b258 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   1b17c:	00801404 	movi	r2,80
   1b180:	e0bff715 	stw	r2,-36(fp)
   1b184:	00001106 	br	1b1cc <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
   1b188:	e0bff717 	ldw	r2,-36(fp)
   1b18c:	10bfffc4 	addi	r2,r2,-1
   1b190:	e13ffc17 	ldw	r4,-16(fp)
   1b194:	e0fff517 	ldw	r3,-44(fp)
   1b198:	18c018e4 	muli	r3,r3,99
   1b19c:	20c7883a 	add	r3,r4,r3
   1b1a0:	1885883a 	add	r2,r3,r2
   1b1a4:	10801004 	addi	r2,r2,64
   1b1a8:	10800003 	ldbu	r2,0(r2)
   1b1ac:	10803fcc 	andi	r2,r2,255
   1b1b0:	1080201c 	xori	r2,r2,128
   1b1b4:	10bfe004 	addi	r2,r2,-128
   1b1b8:	10800820 	cmpeqi	r2,r2,32
   1b1bc:	10000626 	beq	r2,zero,1b1d8 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   1b1c0:	e0bff717 	ldw	r2,-36(fp)
   1b1c4:	10bfffc4 	addi	r2,r2,-1
   1b1c8:	e0bff715 	stw	r2,-36(fp)
   1b1cc:	e0bff717 	ldw	r2,-36(fp)
   1b1d0:	00bfed16 	blt	zero,r2,1b188 <__alt_data_end+0xf001b188>
   1b1d4:	00000106 	br	1b1dc <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
   1b1d8:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   1b1dc:	e0bff717 	ldw	r2,-36(fp)
   1b1e0:	10800448 	cmpgei	r2,r2,17
   1b1e4:	1000031e 	bne	r2,zero,1b1f4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
   1b1e8:	00800404 	movi	r2,16
   1b1ec:	e0bff715 	stw	r2,-36(fp)
   1b1f0:	00000306 	br	1b200 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
   1b1f4:	e0bff717 	ldw	r2,-36(fp)
   1b1f8:	10800044 	addi	r2,r2,1
   1b1fc:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
   1b200:	e0bff717 	ldw	r2,-36(fp)
   1b204:	1009883a 	mov	r4,r2
   1b208:	e0fffc17 	ldw	r3,-16(fp)
   1b20c:	e0bff517 	ldw	r2,-44(fp)
   1b210:	108018e4 	muli	r2,r2,99
   1b214:	1885883a 	add	r2,r3,r2
   1b218:	10802444 	addi	r2,r2,145
   1b21c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
   1b220:	e0fff617 	ldw	r3,-40(fp)
   1b224:	e0bff717 	ldw	r2,-36(fp)
   1b228:	1880020e 	bge	r3,r2,1b234 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
   1b22c:	e0bff717 	ldw	r2,-36(fp)
   1b230:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   1b234:	e0fffc17 	ldw	r3,-16(fp)
   1b238:	e0bff517 	ldw	r2,-44(fp)
   1b23c:	108018e4 	muli	r2,r2,99
   1b240:	1885883a 	add	r2,r3,r2
   1b244:	10802484 	addi	r2,r2,146
   1b248:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b24c:	e0bff517 	ldw	r2,-44(fp)
   1b250:	10800044 	addi	r2,r2,1
   1b254:	e0bff515 	stw	r2,-44(fp)
   1b258:	e0bff517 	ldw	r2,-44(fp)
   1b25c:	10800090 	cmplti	r2,r2,2
   1b260:	103fc61e 	bne	r2,zero,1b17c <__alt_data_end+0xf001b17c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   1b264:	e0bff617 	ldw	r2,-40(fp)
   1b268:	10800448 	cmpgei	r2,r2,17
   1b26c:	1000031e 	bne	r2,zero,1b27c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
   1b270:	e0bffc17 	ldw	r2,-16(fp)
   1b274:	10000985 	stb	zero,38(r2)
   1b278:	00002d06 	br	1b330 <altera_avalon_lcd_16207_write+0x474>
  else
  {
    widthmax *= 2;
   1b27c:	e0bff617 	ldw	r2,-40(fp)
   1b280:	1085883a 	add	r2,r2,r2
   1b284:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
   1b288:	e0bff617 	ldw	r2,-40(fp)
   1b28c:	1007883a 	mov	r3,r2
   1b290:	e0bffc17 	ldw	r2,-16(fp)
   1b294:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b298:	e03ff515 	stw	zero,-44(fp)
   1b29c:	00002106 	br	1b324 <altera_avalon_lcd_16207_write+0x468>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   1b2a0:	e0fffc17 	ldw	r3,-16(fp)
   1b2a4:	e0bff517 	ldw	r2,-44(fp)
   1b2a8:	108018e4 	muli	r2,r2,99
   1b2ac:	1885883a 	add	r2,r3,r2
   1b2b0:	10802444 	addi	r2,r2,145
   1b2b4:	10800003 	ldbu	r2,0(r2)
   1b2b8:	10803fcc 	andi	r2,r2,255
   1b2bc:	1080201c 	xori	r2,r2,128
   1b2c0:	10bfe004 	addi	r2,r2,-128
   1b2c4:	10800450 	cmplti	r2,r2,17
   1b2c8:	1000131e 	bne	r2,zero,1b318 <altera_avalon_lcd_16207_write+0x45c>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   1b2cc:	e0fffc17 	ldw	r3,-16(fp)
   1b2d0:	e0bff517 	ldw	r2,-44(fp)
   1b2d4:	108018e4 	muli	r2,r2,99
   1b2d8:	1885883a 	add	r2,r3,r2
   1b2dc:	10802444 	addi	r2,r2,145
   1b2e0:	10800003 	ldbu	r2,0(r2)
   1b2e4:	10803fcc 	andi	r2,r2,255
   1b2e8:	1080201c 	xori	r2,r2,128
   1b2ec:	10bfe004 	addi	r2,r2,-128
   1b2f0:	1006923a 	slli	r3,r2,8
   1b2f4:	e0bff617 	ldw	r2,-40(fp)
   1b2f8:	1885283a 	div	r2,r3,r2
   1b2fc:	1009883a 	mov	r4,r2
   1b300:	e0fffc17 	ldw	r3,-16(fp)
   1b304:	e0bff517 	ldw	r2,-44(fp)
   1b308:	108018e4 	muli	r2,r2,99
   1b30c:	1885883a 	add	r2,r3,r2
   1b310:	10802484 	addi	r2,r2,146
   1b314:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1b318:	e0bff517 	ldw	r2,-44(fp)
   1b31c:	10800044 	addi	r2,r2,1
   1b320:	e0bff515 	stw	r2,-44(fp)
   1b324:	e0bff517 	ldw	r2,-44(fp)
   1b328:	10800090 	cmplti	r2,r2,2
   1b32c:	103fdc1e 	bne	r2,zero,1b2a0 <__alt_data_end+0xf001b2a0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   1b330:	e0bffc17 	ldw	r2,-16(fp)
   1b334:	10800943 	ldbu	r2,37(r2)
   1b338:	10803fcc 	andi	r2,r2,255
   1b33c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
   1b340:	e13ffc17 	ldw	r4,-16(fp)
   1b344:	001a9540 	call	1a954 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   1b348:	e0bffc17 	ldw	r2,-16(fp)
   1b34c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   1b350:	e0bffc17 	ldw	r2,-16(fp)
   1b354:	10800943 	ldbu	r2,37(r2)
   1b358:	10c03fcc 	andi	r3,r2,255
   1b35c:	e0bffb17 	ldw	r2,-20(fp)
   1b360:	18800426 	beq	r3,r2,1b374 <altera_avalon_lcd_16207_write+0x4b8>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   1b364:	e0bffc17 	ldw	r2,-16(fp)
   1b368:	00c00044 	movi	r3,1
   1b36c:	10c009c5 	stb	r3,39(r2)
  }
   1b370:	003fef06 	br	1b330 <__alt_data_end+0xf001b330>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   1b374:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   1b378:	e0bffe17 	ldw	r2,-8(fp)
}
   1b37c:	e037883a 	mov	sp,fp
   1b380:	dfc00117 	ldw	ra,4(sp)
   1b384:	df000017 	ldw	fp,0(sp)
   1b388:	dec00204 	addi	sp,sp,8
   1b38c:	f800283a 	ret

0001b390 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   1b390:	defffc04 	addi	sp,sp,-16
   1b394:	dfc00315 	stw	ra,12(sp)
   1b398:	df000215 	stw	fp,8(sp)
   1b39c:	df000204 	addi	fp,sp,8
   1b3a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   1b3a4:	e0bfff17 	ldw	r2,-4(fp)
   1b3a8:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   1b3ac:	e0bffe17 	ldw	r2,-8(fp)
   1b3b0:	10800943 	ldbu	r2,37(r2)
   1b3b4:	10803fcc 	andi	r2,r2,255
   1b3b8:	10c00044 	addi	r3,r2,1
   1b3bc:	e0bffe17 	ldw	r2,-8(fp)
   1b3c0:	10800983 	ldbu	r2,38(r2)
   1b3c4:	10803fcc 	andi	r2,r2,255
   1b3c8:	18800316 	blt	r3,r2,1b3d8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   1b3cc:	e0bffe17 	ldw	r2,-8(fp)
   1b3d0:	10000945 	stb	zero,37(r2)
   1b3d4:	00000606 	br	1b3f0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   1b3d8:	e0bffe17 	ldw	r2,-8(fp)
   1b3dc:	10800943 	ldbu	r2,37(r2)
   1b3e0:	10800044 	addi	r2,r2,1
   1b3e4:	1007883a 	mov	r3,r2
   1b3e8:	e0bffe17 	ldw	r2,-8(fp)
   1b3ec:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   1b3f0:	e0bffe17 	ldw	r2,-8(fp)
   1b3f4:	10800983 	ldbu	r2,38(r2)
   1b3f8:	10803fcc 	andi	r2,r2,255
   1b3fc:	10000826 	beq	r2,zero,1b420 <alt_lcd_16207_timeout+0x90>
   1b400:	e0bffe17 	ldw	r2,-8(fp)
   1b404:	108009c3 	ldbu	r2,39(r2)
   1b408:	10803fcc 	andi	r2,r2,255
   1b40c:	1080201c 	xori	r2,r2,128
   1b410:	10bfe004 	addi	r2,r2,-128
   1b414:	1000021e 	bne	r2,zero,1b420 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   1b418:	e13ffe17 	ldw	r4,-8(fp)
   1b41c:	001a9540 	call	1a954 <lcd_repaint_screen>

  return sp->period;
   1b420:	e0bffe17 	ldw	r2,-8(fp)
   1b424:	10800717 	ldw	r2,28(r2)
}
   1b428:	e037883a 	mov	sp,fp
   1b42c:	dfc00117 	ldw	ra,4(sp)
   1b430:	df000017 	ldw	fp,0(sp)
   1b434:	dec00204 	addi	sp,sp,8
   1b438:	f800283a 	ret

0001b43c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   1b43c:	defffc04 	addi	sp,sp,-16
   1b440:	dfc00315 	stw	ra,12(sp)
   1b444:	df000215 	stw	fp,8(sp)
   1b448:	df000204 	addi	fp,sp,8
   1b44c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   1b450:	e0bfff17 	ldw	r2,-4(fp)
   1b454:	10800017 	ldw	r2,0(r2)
   1b458:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   1b45c:	e0bfff17 	ldw	r2,-4(fp)
   1b460:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   1b464:	010ea604 	movi	r4,15000
   1b468:	001e7780 	call	1e778 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1b46c:	e0bffe17 	ldw	r2,-8(fp)
   1b470:	00c00c04 	movi	r3,48
   1b474:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   1b478:	01040104 	movi	r4,4100
   1b47c:	001e7780 	call	1e778 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1b480:	e0bffe17 	ldw	r2,-8(fp)
   1b484:	00c00c04 	movi	r3,48
   1b488:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   1b48c:	0100fa04 	movi	r4,1000
   1b490:	001e7780 	call	1e778 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   1b494:	e0bffe17 	ldw	r2,-8(fp)
   1b498:	00c00c04 	movi	r3,48
   1b49c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   1b4a0:	01400e04 	movi	r5,56
   1b4a4:	e13fff17 	ldw	r4,-4(fp)
   1b4a8:	001a6f40 	call	1a6f4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   1b4ac:	01400204 	movi	r5,8
   1b4b0:	e13fff17 	ldw	r4,-4(fp)
   1b4b4:	001a6f40 	call	1a6f4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   1b4b8:	e13fff17 	ldw	r4,-4(fp)
   1b4bc:	001a8840 	call	1a884 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   1b4c0:	01400184 	movi	r5,6
   1b4c4:	e13fff17 	ldw	r4,-4(fp)
   1b4c8:	001a6f40 	call	1a6f4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   1b4cc:	01400304 	movi	r5,12
   1b4d0:	e13fff17 	ldw	r4,-4(fp)
   1b4d4:	001a6f40 	call	1a6f4 <lcd_write_command>

  sp->esccount = -1;
   1b4d8:	e0bfff17 	ldw	r2,-4(fp)
   1b4dc:	00ffffc4 	movi	r3,-1
   1b4e0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   1b4e4:	e0bfff17 	ldw	r2,-4(fp)
   1b4e8:	10800a04 	addi	r2,r2,40
   1b4ec:	01800204 	movi	r6,8
   1b4f0:	000b883a 	mov	r5,zero
   1b4f4:	1009883a 	mov	r4,r2
   1b4f8:	00092680 	call	9268 <memset>

  sp->scrollpos = 0;
   1b4fc:	e0bfff17 	ldw	r2,-4(fp)
   1b500:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   1b504:	e0bfff17 	ldw	r2,-4(fp)
   1b508:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   1b50c:	e0bfff17 	ldw	r2,-4(fp)
   1b510:	100009c5 	stb	zero,39(r2)
   1b514:	d0e05597 	ldw	r3,-32426(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   1b518:	00800284 	movi	r2,10
   1b51c:	1885203a 	divu	r2,r3,r2
   1b520:	1007883a 	mov	r3,r2
   1b524:	e0bfff17 	ldw	r2,-4(fp)
   1b528:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   1b52c:	e0bfff17 	ldw	r2,-4(fp)
   1b530:	10c00104 	addi	r3,r2,4
   1b534:	e0bfff17 	ldw	r2,-4(fp)
   1b538:	10800717 	ldw	r2,28(r2)
   1b53c:	e1ffff17 	ldw	r7,-4(fp)
   1b540:	018000b4 	movhi	r6,2
   1b544:	31ace404 	addi	r6,r6,-19568
   1b548:	100b883a 	mov	r5,r2
   1b54c:	1809883a 	mov	r4,r3
   1b550:	001ddb00 	call	1ddb0 <alt_alarm_start>
}
   1b554:	0001883a 	nop
   1b558:	e037883a 	mov	sp,fp
   1b55c:	dfc00117 	ldw	ra,4(sp)
   1b560:	df000017 	ldw	fp,0(sp)
   1b564:	dec00204 	addi	sp,sp,8
   1b568:	f800283a 	ret

0001b56c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1b56c:	defffa04 	addi	sp,sp,-24
   1b570:	dfc00515 	stw	ra,20(sp)
   1b574:	df000415 	stw	fp,16(sp)
   1b578:	df000404 	addi	fp,sp,16
   1b57c:	e13ffd15 	stw	r4,-12(fp)
   1b580:	e17ffe15 	stw	r5,-8(fp)
   1b584:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   1b588:	e0bffd17 	ldw	r2,-12(fp)
   1b58c:	10800017 	ldw	r2,0(r2)
   1b590:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   1b594:	e0bffc17 	ldw	r2,-16(fp)
   1b598:	10c00a04 	addi	r3,r2,40
   1b59c:	e0bffd17 	ldw	r2,-12(fp)
   1b5a0:	10800217 	ldw	r2,8(r2)
   1b5a4:	100f883a 	mov	r7,r2
   1b5a8:	e1bfff17 	ldw	r6,-4(fp)
   1b5ac:	e17ffe17 	ldw	r5,-8(fp)
   1b5b0:	1809883a 	mov	r4,r3
   1b5b4:	001aebc0 	call	1aebc <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   1b5b8:	e037883a 	mov	sp,fp
   1b5bc:	dfc00117 	ldw	ra,4(sp)
   1b5c0:	df000017 	ldw	fp,0(sp)
   1b5c4:	dec00204 	addi	sp,sp,8
   1b5c8:	f800283a 	ret

0001b5cc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b5cc:	defff904 	addi	sp,sp,-28
   1b5d0:	dfc00615 	stw	ra,24(sp)
   1b5d4:	df000515 	stw	fp,20(sp)
   1b5d8:	df000504 	addi	fp,sp,20
   1b5dc:	e13ffe15 	stw	r4,-8(fp)
   1b5e0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b5e4:	0007883a 	mov	r3,zero
   1b5e8:	e0bffe17 	ldw	r2,-8(fp)
   1b5ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b5f0:	e0bffe17 	ldw	r2,-8(fp)
   1b5f4:	10800104 	addi	r2,r2,4
   1b5f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b5fc:	0005303a 	rdctl	r2,status
   1b600:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b604:	e0fffc17 	ldw	r3,-16(fp)
   1b608:	00bfff84 	movi	r2,-2
   1b60c:	1884703a 	and	r2,r3,r2
   1b610:	1001703a 	wrctl	status,r2
  
  return context;
   1b614:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b618:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1b61c:	001e6700 	call	1e670 <alt_tick>
   1b620:	e0bffb17 	ldw	r2,-20(fp)
   1b624:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b628:	e0bffd17 	ldw	r2,-12(fp)
   1b62c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b630:	0001883a 	nop
   1b634:	e037883a 	mov	sp,fp
   1b638:	dfc00117 	ldw	ra,4(sp)
   1b63c:	df000017 	ldw	fp,0(sp)
   1b640:	dec00204 	addi	sp,sp,8
   1b644:	f800283a 	ret

0001b648 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b648:	defff904 	addi	sp,sp,-28
   1b64c:	dfc00615 	stw	ra,24(sp)
   1b650:	df000515 	stw	fp,20(sp)
   1b654:	df000504 	addi	fp,sp,20
   1b658:	e13ffc15 	stw	r4,-16(fp)
   1b65c:	e17ffd15 	stw	r5,-12(fp)
   1b660:	e1bffe15 	stw	r6,-8(fp)
   1b664:	e1ffff15 	stw	r7,-4(fp)
   1b668:	e0bfff17 	ldw	r2,-4(fp)
   1b66c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b670:	d0a05597 	ldw	r2,-32426(gp)
   1b674:	1000021e 	bne	r2,zero,1b680 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1b678:	e0bffb17 	ldw	r2,-20(fp)
   1b67c:	d0a05595 	stw	r2,-32426(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b680:	e0bffc17 	ldw	r2,-16(fp)
   1b684:	10800104 	addi	r2,r2,4
   1b688:	00c001c4 	movi	r3,7
   1b68c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1b690:	018000b4 	movhi	r6,2
   1b694:	31ad7304 	addi	r6,r6,-18996
   1b698:	e17ffc17 	ldw	r5,-16(fp)
   1b69c:	e13ffe17 	ldw	r4,-8(fp)
   1b6a0:	00019200 	call	1920 <alt_irq_register>
#endif  
}
   1b6a4:	0001883a 	nop
   1b6a8:	e037883a 	mov	sp,fp
   1b6ac:	dfc00117 	ldw	ra,4(sp)
   1b6b0:	df000017 	ldw	fp,0(sp)
   1b6b4:	dec00204 	addi	sp,sp,8
   1b6b8:	f800283a 	ret

0001b6bc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1b6bc:	defffa04 	addi	sp,sp,-24
   1b6c0:	dfc00515 	stw	ra,20(sp)
   1b6c4:	df000415 	stw	fp,16(sp)
   1b6c8:	df000404 	addi	fp,sp,16
   1b6cc:	e13ffd15 	stw	r4,-12(fp)
   1b6d0:	e17ffe15 	stw	r5,-8(fp)
   1b6d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1b6d8:	e0bffd17 	ldw	r2,-12(fp)
   1b6dc:	10800017 	ldw	r2,0(r2)
   1b6e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   1b6e4:	e0bffc17 	ldw	r2,-16(fp)
   1b6e8:	10c00a04 	addi	r3,r2,40
   1b6ec:	e0bffd17 	ldw	r2,-12(fp)
   1b6f0:	10800217 	ldw	r2,8(r2)
   1b6f4:	100f883a 	mov	r7,r2
   1b6f8:	e1bfff17 	ldw	r6,-4(fp)
   1b6fc:	e17ffe17 	ldw	r5,-8(fp)
   1b700:	1809883a 	mov	r4,r3
   1b704:	001bbcc0 	call	1bbcc <altera_avalon_uart_read>
      fd->fd_flags);
}
   1b708:	e037883a 	mov	sp,fp
   1b70c:	dfc00117 	ldw	ra,4(sp)
   1b710:	df000017 	ldw	fp,0(sp)
   1b714:	dec00204 	addi	sp,sp,8
   1b718:	f800283a 	ret

0001b71c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1b71c:	defffa04 	addi	sp,sp,-24
   1b720:	dfc00515 	stw	ra,20(sp)
   1b724:	df000415 	stw	fp,16(sp)
   1b728:	df000404 	addi	fp,sp,16
   1b72c:	e13ffd15 	stw	r4,-12(fp)
   1b730:	e17ffe15 	stw	r5,-8(fp)
   1b734:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1b738:	e0bffd17 	ldw	r2,-12(fp)
   1b73c:	10800017 	ldw	r2,0(r2)
   1b740:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   1b744:	e0bffc17 	ldw	r2,-16(fp)
   1b748:	10c00a04 	addi	r3,r2,40
   1b74c:	e0bffd17 	ldw	r2,-12(fp)
   1b750:	10800217 	ldw	r2,8(r2)
   1b754:	100f883a 	mov	r7,r2
   1b758:	e1bfff17 	ldw	r6,-4(fp)
   1b75c:	e17ffe17 	ldw	r5,-8(fp)
   1b760:	1809883a 	mov	r4,r3
   1b764:	001bde40 	call	1bde4 <altera_avalon_uart_write>
      fd->fd_flags);
}
   1b768:	e037883a 	mov	sp,fp
   1b76c:	dfc00117 	ldw	ra,4(sp)
   1b770:	df000017 	ldw	fp,0(sp)
   1b774:	dec00204 	addi	sp,sp,8
   1b778:	f800283a 	ret

0001b77c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   1b77c:	defffc04 	addi	sp,sp,-16
   1b780:	dfc00315 	stw	ra,12(sp)
   1b784:	df000215 	stw	fp,8(sp)
   1b788:	df000204 	addi	fp,sp,8
   1b78c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1b790:	e0bfff17 	ldw	r2,-4(fp)
   1b794:	10800017 	ldw	r2,0(r2)
   1b798:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   1b79c:	e0bffe17 	ldw	r2,-8(fp)
   1b7a0:	10c00a04 	addi	r3,r2,40
   1b7a4:	e0bfff17 	ldw	r2,-4(fp)
   1b7a8:	10800217 	ldw	r2,8(r2)
   1b7ac:	100b883a 	mov	r5,r2
   1b7b0:	1809883a 	mov	r4,r3
   1b7b4:	001bb3c0 	call	1bb3c <altera_avalon_uart_close>
}
   1b7b8:	e037883a 	mov	sp,fp
   1b7bc:	dfc00117 	ldw	ra,4(sp)
   1b7c0:	df000017 	ldw	fp,0(sp)
   1b7c4:	dec00204 	addi	sp,sp,8
   1b7c8:	f800283a 	ret

0001b7cc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   1b7cc:	defff904 	addi	sp,sp,-28
   1b7d0:	dfc00615 	stw	ra,24(sp)
   1b7d4:	df000515 	stw	fp,20(sp)
   1b7d8:	df000504 	addi	fp,sp,20
   1b7dc:	e13ffd15 	stw	r4,-12(fp)
   1b7e0:	e17ffe15 	stw	r5,-8(fp)
   1b7e4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   1b7e8:	e0bffd17 	ldw	r2,-12(fp)
   1b7ec:	10800017 	ldw	r2,0(r2)
   1b7f0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1b7f4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1b7f8:	1000041e 	bne	r2,zero,1b80c <altera_avalon_uart_init+0x40>
   1b7fc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1b800:	1000021e 	bne	r2,zero,1b80c <altera_avalon_uart_init+0x40>
   1b804:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1b808:	10000226 	beq	r2,zero,1b814 <altera_avalon_uart_init+0x48>
   1b80c:	00800044 	movi	r2,1
   1b810:	00000106 	br	1b818 <altera_avalon_uart_init+0x4c>
   1b814:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1b818:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   1b81c:	e0bffc17 	ldw	r2,-16(fp)
   1b820:	10000d1e 	bne	r2,zero,1b858 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   1b824:	e0bffd17 	ldw	r2,-12(fp)
   1b828:	00c32004 	movi	r3,3200
   1b82c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   1b830:	e0bffb17 	ldw	r2,-20(fp)
   1b834:	10800304 	addi	r2,r2,12
   1b838:	e0fffd17 	ldw	r3,-12(fp)
   1b83c:	18c00117 	ldw	r3,4(r3)
   1b840:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
   1b844:	018000b4 	movhi	r6,2
   1b848:	31ae1c04 	addi	r6,r6,-18320
   1b84c:	e17ffd17 	ldw	r5,-12(fp)
   1b850:	e13fff17 	ldw	r4,-4(fp)
   1b854:	00019200 	call	1920 <alt_irq_register>
#endif  
  }
}
   1b858:	0001883a 	nop
   1b85c:	e037883a 	mov	sp,fp
   1b860:	dfc00117 	ldw	ra,4(sp)
   1b864:	df000017 	ldw	fp,0(sp)
   1b868:	dec00204 	addi	sp,sp,8
   1b86c:	f800283a 	ret

0001b870 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   1b870:	defff904 	addi	sp,sp,-28
   1b874:	dfc00615 	stw	ra,24(sp)
   1b878:	df000515 	stw	fp,20(sp)
   1b87c:	df000504 	addi	fp,sp,20
   1b880:	e13ffe15 	stw	r4,-8(fp)
   1b884:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   1b888:	e0bffe17 	ldw	r2,-8(fp)
   1b88c:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
   1b890:	e0bffb17 	ldw	r2,-20(fp)
   1b894:	10800017 	ldw	r2,0(r2)
   1b898:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   1b89c:	e0bffc17 	ldw	r2,-16(fp)
   1b8a0:	10800204 	addi	r2,r2,8
   1b8a4:	10800037 	ldwio	r2,0(r2)
   1b8a8:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   1b8ac:	e0bffc17 	ldw	r2,-16(fp)
   1b8b0:	10800204 	addi	r2,r2,8
   1b8b4:	0007883a 	mov	r3,zero
   1b8b8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   1b8bc:	e0bffc17 	ldw	r2,-16(fp)
   1b8c0:	10800204 	addi	r2,r2,8
   1b8c4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   1b8c8:	e0bffd17 	ldw	r2,-12(fp)
   1b8cc:	1080200c 	andi	r2,r2,128
   1b8d0:	10000326 	beq	r2,zero,1b8e0 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
   1b8d4:	e17ffd17 	ldw	r5,-12(fp)
   1b8d8:	e13ffb17 	ldw	r4,-20(fp)
   1b8dc:	001b9100 	call	1b910 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   1b8e0:	e0bffd17 	ldw	r2,-12(fp)
   1b8e4:	1081100c 	andi	r2,r2,1088
   1b8e8:	10000326 	beq	r2,zero,1b8f8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   1b8ec:	e17ffd17 	ldw	r5,-12(fp)
   1b8f0:	e13ffb17 	ldw	r4,-20(fp)
   1b8f4:	001b9f40 	call	1b9f4 <altera_avalon_uart_txirq>
  }
  

}
   1b8f8:	0001883a 	nop
   1b8fc:	e037883a 	mov	sp,fp
   1b900:	dfc00117 	ldw	ra,4(sp)
   1b904:	df000017 	ldw	fp,0(sp)
   1b908:	dec00204 	addi	sp,sp,8
   1b90c:	f800283a 	ret

0001b910 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   1b910:	defffc04 	addi	sp,sp,-16
   1b914:	df000315 	stw	fp,12(sp)
   1b918:	df000304 	addi	fp,sp,12
   1b91c:	e13ffe15 	stw	r4,-8(fp)
   1b920:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   1b924:	e0bfff17 	ldw	r2,-4(fp)
   1b928:	108000cc 	andi	r2,r2,3
   1b92c:	10002c1e 	bne	r2,zero,1b9e0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   1b930:	e0bffe17 	ldw	r2,-8(fp)
   1b934:	10800317 	ldw	r2,12(r2)
   1b938:	e0bffe17 	ldw	r2,-8(fp)
   1b93c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1b940:	e0bffe17 	ldw	r2,-8(fp)
   1b944:	10800317 	ldw	r2,12(r2)
   1b948:	10800044 	addi	r2,r2,1
   1b94c:	10800fcc 	andi	r2,r2,63
   1b950:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   1b954:	e0bffe17 	ldw	r2,-8(fp)
   1b958:	10800317 	ldw	r2,12(r2)
   1b95c:	e0fffe17 	ldw	r3,-8(fp)
   1b960:	18c00017 	ldw	r3,0(r3)
   1b964:	18c00037 	ldwio	r3,0(r3)
   1b968:	1809883a 	mov	r4,r3
   1b96c:	e0fffe17 	ldw	r3,-8(fp)
   1b970:	1885883a 	add	r2,r3,r2
   1b974:	10800704 	addi	r2,r2,28
   1b978:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   1b97c:	e0bffe17 	ldw	r2,-8(fp)
   1b980:	e0fffd17 	ldw	r3,-12(fp)
   1b984:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1b988:	e0bffe17 	ldw	r2,-8(fp)
   1b98c:	10800317 	ldw	r2,12(r2)
   1b990:	10800044 	addi	r2,r2,1
   1b994:	10800fcc 	andi	r2,r2,63
   1b998:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   1b99c:	e0bffe17 	ldw	r2,-8(fp)
   1b9a0:	10c00217 	ldw	r3,8(r2)
   1b9a4:	e0bffd17 	ldw	r2,-12(fp)
   1b9a8:	18800e1e 	bne	r3,r2,1b9e4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1b9ac:	e0bffe17 	ldw	r2,-8(fp)
   1b9b0:	10c00117 	ldw	r3,4(r2)
   1b9b4:	00bfdfc4 	movi	r2,-129
   1b9b8:	1886703a 	and	r3,r3,r2
   1b9bc:	e0bffe17 	ldw	r2,-8(fp)
   1b9c0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   1b9c4:	e0bffe17 	ldw	r2,-8(fp)
   1b9c8:	10800017 	ldw	r2,0(r2)
   1b9cc:	10800304 	addi	r2,r2,12
   1b9d0:	e0fffe17 	ldw	r3,-8(fp)
   1b9d4:	18c00117 	ldw	r3,4(r3)
   1b9d8:	10c00035 	stwio	r3,0(r2)
   1b9dc:	00000106 	br	1b9e4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   1b9e0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   1b9e4:	e037883a 	mov	sp,fp
   1b9e8:	df000017 	ldw	fp,0(sp)
   1b9ec:	dec00104 	addi	sp,sp,4
   1b9f0:	f800283a 	ret

0001b9f4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   1b9f4:	defffb04 	addi	sp,sp,-20
   1b9f8:	df000415 	stw	fp,16(sp)
   1b9fc:	df000404 	addi	fp,sp,16
   1ba00:	e13ffc15 	stw	r4,-16(fp)
   1ba04:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   1ba08:	e0bffc17 	ldw	r2,-16(fp)
   1ba0c:	10c00417 	ldw	r3,16(r2)
   1ba10:	e0bffc17 	ldw	r2,-16(fp)
   1ba14:	10800517 	ldw	r2,20(r2)
   1ba18:	18803226 	beq	r3,r2,1bae4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1ba1c:	e0bffc17 	ldw	r2,-16(fp)
   1ba20:	10800617 	ldw	r2,24(r2)
   1ba24:	1080008c 	andi	r2,r2,2
   1ba28:	10000326 	beq	r2,zero,1ba38 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1ba2c:	e0bffd17 	ldw	r2,-12(fp)
   1ba30:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1ba34:	10001d26 	beq	r2,zero,1baac <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   1ba38:	e0bffc17 	ldw	r2,-16(fp)
   1ba3c:	10800417 	ldw	r2,16(r2)
   1ba40:	e0bffc17 	ldw	r2,-16(fp)
   1ba44:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   1ba48:	e0bffc17 	ldw	r2,-16(fp)
   1ba4c:	10800017 	ldw	r2,0(r2)
   1ba50:	10800104 	addi	r2,r2,4
   1ba54:	e0fffc17 	ldw	r3,-16(fp)
   1ba58:	18c00417 	ldw	r3,16(r3)
   1ba5c:	e13ffc17 	ldw	r4,-16(fp)
   1ba60:	20c7883a 	add	r3,r4,r3
   1ba64:	18c01704 	addi	r3,r3,92
   1ba68:	18c00003 	ldbu	r3,0(r3)
   1ba6c:	18c03fcc 	andi	r3,r3,255
   1ba70:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   1ba74:	e0bffc17 	ldw	r2,-16(fp)
   1ba78:	10800417 	ldw	r2,16(r2)
   1ba7c:	10800044 	addi	r2,r2,1
   1ba80:	e0fffc17 	ldw	r3,-16(fp)
   1ba84:	18800415 	stw	r2,16(r3)
   1ba88:	10c00fcc 	andi	r3,r2,63
   1ba8c:	e0bffc17 	ldw	r2,-16(fp)
   1ba90:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1ba94:	e0bffc17 	ldw	r2,-16(fp)
   1ba98:	10800117 	ldw	r2,4(r2)
   1ba9c:	10c01014 	ori	r3,r2,64
   1baa0:	e0bffc17 	ldw	r2,-16(fp)
   1baa4:	10c00115 	stw	r3,4(r2)
   1baa8:	00000e06 	br	1bae4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   1baac:	e0bffc17 	ldw	r2,-16(fp)
   1bab0:	10800017 	ldw	r2,0(r2)
   1bab4:	10800204 	addi	r2,r2,8
   1bab8:	10800037 	ldwio	r2,0(r2)
   1babc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1bac0:	e0bffd17 	ldw	r2,-12(fp)
   1bac4:	1082000c 	andi	r2,r2,2048
   1bac8:	1000061e 	bne	r2,zero,1bae4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1bacc:	e0bffc17 	ldw	r2,-16(fp)
   1bad0:	10c00117 	ldw	r3,4(r2)
   1bad4:	00bfefc4 	movi	r2,-65
   1bad8:	1886703a 	and	r3,r3,r2
   1badc:	e0bffc17 	ldw	r2,-16(fp)
   1bae0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   1bae4:	e0bffc17 	ldw	r2,-16(fp)
   1bae8:	10c00417 	ldw	r3,16(r2)
   1baec:	e0bffc17 	ldw	r2,-16(fp)
   1baf0:	10800517 	ldw	r2,20(r2)
   1baf4:	1880061e 	bne	r3,r2,1bb10 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1baf8:	e0bffc17 	ldw	r2,-16(fp)
   1bafc:	10c00117 	ldw	r3,4(r2)
   1bb00:	00beefc4 	movi	r2,-1089
   1bb04:	1886703a 	and	r3,r3,r2
   1bb08:	e0bffc17 	ldw	r2,-16(fp)
   1bb0c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1bb10:	e0bffc17 	ldw	r2,-16(fp)
   1bb14:	10800017 	ldw	r2,0(r2)
   1bb18:	10800304 	addi	r2,r2,12
   1bb1c:	e0fffc17 	ldw	r3,-16(fp)
   1bb20:	18c00117 	ldw	r3,4(r3)
   1bb24:	10c00035 	stwio	r3,0(r2)
}
   1bb28:	0001883a 	nop
   1bb2c:	e037883a 	mov	sp,fp
   1bb30:	df000017 	ldw	fp,0(sp)
   1bb34:	dec00104 	addi	sp,sp,4
   1bb38:	f800283a 	ret

0001bb3c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   1bb3c:	defffd04 	addi	sp,sp,-12
   1bb40:	df000215 	stw	fp,8(sp)
   1bb44:	df000204 	addi	fp,sp,8
   1bb48:	e13ffe15 	stw	r4,-8(fp)
   1bb4c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   1bb50:	00000506 	br	1bb68 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1bb54:	e0bfff17 	ldw	r2,-4(fp)
   1bb58:	1090000c 	andi	r2,r2,16384
   1bb5c:	10000226 	beq	r2,zero,1bb68 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1bb60:	00bffd44 	movi	r2,-11
   1bb64:	00000606 	br	1bb80 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   1bb68:	e0bffe17 	ldw	r2,-8(fp)
   1bb6c:	10c00417 	ldw	r3,16(r2)
   1bb70:	e0bffe17 	ldw	r2,-8(fp)
   1bb74:	10800517 	ldw	r2,20(r2)
   1bb78:	18bff61e 	bne	r3,r2,1bb54 <__alt_data_end+0xf001bb54>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1bb7c:	0005883a 	mov	r2,zero
}
   1bb80:	e037883a 	mov	sp,fp
   1bb84:	df000017 	ldw	fp,0(sp)
   1bb88:	dec00104 	addi	sp,sp,4
   1bb8c:	f800283a 	ret

0001bb90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bb90:	defffe04 	addi	sp,sp,-8
   1bb94:	dfc00115 	stw	ra,4(sp)
   1bb98:	df000015 	stw	fp,0(sp)
   1bb9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1bba0:	d0a00f97 	ldw	r2,-32706(gp)
   1bba4:	10000326 	beq	r2,zero,1bbb4 <alt_get_errno+0x24>
   1bba8:	d0a00f97 	ldw	r2,-32706(gp)
   1bbac:	103ee83a 	callr	r2
   1bbb0:	00000106 	br	1bbb8 <alt_get_errno+0x28>
   1bbb4:	d0a04f84 	addi	r2,gp,-32450
}
   1bbb8:	e037883a 	mov	sp,fp
   1bbbc:	dfc00117 	ldw	ra,4(sp)
   1bbc0:	df000017 	ldw	fp,0(sp)
   1bbc4:	dec00204 	addi	sp,sp,8
   1bbc8:	f800283a 	ret

0001bbcc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   1bbcc:	defff204 	addi	sp,sp,-56
   1bbd0:	dfc00d15 	stw	ra,52(sp)
   1bbd4:	df000c15 	stw	fp,48(sp)
   1bbd8:	df000c04 	addi	fp,sp,48
   1bbdc:	e13ffc15 	stw	r4,-16(fp)
   1bbe0:	e17ffd15 	stw	r5,-12(fp)
   1bbe4:	e1bffe15 	stw	r6,-8(fp)
   1bbe8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   1bbec:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   1bbf0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   1bbf4:	e0bfff17 	ldw	r2,-4(fp)
   1bbf8:	1090000c 	andi	r2,r2,16384
   1bbfc:	1005003a 	cmpeq	r2,r2,zero
   1bc00:	10803fcc 	andi	r2,r2,255
   1bc04:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   1bc08:	00001306 	br	1bc58 <altera_avalon_uart_read+0x8c>
    {
      count++;
   1bc0c:	e0bff517 	ldw	r2,-44(fp)
   1bc10:	10800044 	addi	r2,r2,1
   1bc14:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   1bc18:	e0bffd17 	ldw	r2,-12(fp)
   1bc1c:	10c00044 	addi	r3,r2,1
   1bc20:	e0fffd15 	stw	r3,-12(fp)
   1bc24:	e0fffc17 	ldw	r3,-16(fp)
   1bc28:	18c00217 	ldw	r3,8(r3)
   1bc2c:	e13ffc17 	ldw	r4,-16(fp)
   1bc30:	20c7883a 	add	r3,r4,r3
   1bc34:	18c00704 	addi	r3,r3,28
   1bc38:	18c00003 	ldbu	r3,0(r3)
   1bc3c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   1bc40:	e0bffc17 	ldw	r2,-16(fp)
   1bc44:	10800217 	ldw	r2,8(r2)
   1bc48:	10800044 	addi	r2,r2,1
   1bc4c:	10c00fcc 	andi	r3,r2,63
   1bc50:	e0bffc17 	ldw	r2,-16(fp)
   1bc54:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   1bc58:	e0fff517 	ldw	r3,-44(fp)
   1bc5c:	e0bffe17 	ldw	r2,-8(fp)
   1bc60:	1880050e 	bge	r3,r2,1bc78 <altera_avalon_uart_read+0xac>
   1bc64:	e0bffc17 	ldw	r2,-16(fp)
   1bc68:	10c00217 	ldw	r3,8(r2)
   1bc6c:	e0bffc17 	ldw	r2,-16(fp)
   1bc70:	10800317 	ldw	r2,12(r2)
   1bc74:	18bfe51e 	bne	r3,r2,1bc0c <__alt_data_end+0xf001bc0c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   1bc78:	e0bff517 	ldw	r2,-44(fp)
   1bc7c:	1000251e 	bne	r2,zero,1bd14 <altera_avalon_uart_read+0x148>
   1bc80:	e0bffc17 	ldw	r2,-16(fp)
   1bc84:	10c00217 	ldw	r3,8(r2)
   1bc88:	e0bffc17 	ldw	r2,-16(fp)
   1bc8c:	10800317 	ldw	r2,12(r2)
   1bc90:	1880201e 	bne	r3,r2,1bd14 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   1bc94:	e0bff617 	ldw	r2,-40(fp)
   1bc98:	1000071e 	bne	r2,zero,1bcb8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   1bc9c:	001bb900 	call	1bb90 <alt_get_errno>
   1bca0:	1007883a 	mov	r3,r2
   1bca4:	008002c4 	movi	r2,11
   1bca8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   1bcac:	00800044 	movi	r2,1
   1bcb0:	e0bff405 	stb	r2,-48(fp)
        break;
   1bcb4:	00001b06 	br	1bd24 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bcb8:	0005303a 	rdctl	r2,status
   1bcbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bcc0:	e0fff917 	ldw	r3,-28(fp)
   1bcc4:	00bfff84 	movi	r2,-2
   1bcc8:	1884703a 	and	r2,r3,r2
   1bccc:	1001703a 	wrctl	status,r2
  
  return context;
   1bcd0:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   1bcd4:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1bcd8:	e0bffc17 	ldw	r2,-16(fp)
   1bcdc:	10800117 	ldw	r2,4(r2)
   1bce0:	10c02014 	ori	r3,r2,128
   1bce4:	e0bffc17 	ldw	r2,-16(fp)
   1bce8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1bcec:	e0bffc17 	ldw	r2,-16(fp)
   1bcf0:	10800017 	ldw	r2,0(r2)
   1bcf4:	10800304 	addi	r2,r2,12
   1bcf8:	e0fffc17 	ldw	r3,-16(fp)
   1bcfc:	18c00117 	ldw	r3,4(r3)
   1bd00:	10c00035 	stwio	r3,0(r2)
   1bd04:	e0bff817 	ldw	r2,-32(fp)
   1bd08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd0c:	e0bffa17 	ldw	r2,-24(fp)
   1bd10:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   1bd14:	e0bff517 	ldw	r2,-44(fp)
   1bd18:	1000021e 	bne	r2,zero,1bd24 <altera_avalon_uart_read+0x158>
   1bd1c:	e0bffe17 	ldw	r2,-8(fp)
   1bd20:	103fcd1e 	bne	r2,zero,1bc58 <__alt_data_end+0xf001bc58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bd24:	0005303a 	rdctl	r2,status
   1bd28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bd2c:	e0fffb17 	ldw	r3,-20(fp)
   1bd30:	00bfff84 	movi	r2,-2
   1bd34:	1884703a 	and	r2,r3,r2
   1bd38:	1001703a 	wrctl	status,r2
  
  return context;
   1bd3c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   1bd40:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1bd44:	e0bffc17 	ldw	r2,-16(fp)
   1bd48:	10800117 	ldw	r2,4(r2)
   1bd4c:	10c02014 	ori	r3,r2,128
   1bd50:	e0bffc17 	ldw	r2,-16(fp)
   1bd54:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1bd58:	e0bffc17 	ldw	r2,-16(fp)
   1bd5c:	10800017 	ldw	r2,0(r2)
   1bd60:	10800304 	addi	r2,r2,12
   1bd64:	e0fffc17 	ldw	r3,-16(fp)
   1bd68:	18c00117 	ldw	r3,4(r3)
   1bd6c:	10c00035 	stwio	r3,0(r2)
   1bd70:	e0bff817 	ldw	r2,-32(fp)
   1bd74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd78:	e0bff717 	ldw	r2,-36(fp)
   1bd7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   1bd80:	e0bff403 	ldbu	r2,-48(fp)
   1bd84:	10000226 	beq	r2,zero,1bd90 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   1bd88:	00bffd44 	movi	r2,-11
   1bd8c:	00000106 	br	1bd94 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   1bd90:	e0bff517 	ldw	r2,-44(fp)
  }
}
   1bd94:	e037883a 	mov	sp,fp
   1bd98:	dfc00117 	ldw	ra,4(sp)
   1bd9c:	df000017 	ldw	fp,0(sp)
   1bda0:	dec00204 	addi	sp,sp,8
   1bda4:	f800283a 	ret

0001bda8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bda8:	defffe04 	addi	sp,sp,-8
   1bdac:	dfc00115 	stw	ra,4(sp)
   1bdb0:	df000015 	stw	fp,0(sp)
   1bdb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1bdb8:	d0a00f97 	ldw	r2,-32706(gp)
   1bdbc:	10000326 	beq	r2,zero,1bdcc <alt_get_errno+0x24>
   1bdc0:	d0a00f97 	ldw	r2,-32706(gp)
   1bdc4:	103ee83a 	callr	r2
   1bdc8:	00000106 	br	1bdd0 <alt_get_errno+0x28>
   1bdcc:	d0a04f84 	addi	r2,gp,-32450
}
   1bdd0:	e037883a 	mov	sp,fp
   1bdd4:	dfc00117 	ldw	ra,4(sp)
   1bdd8:	df000017 	ldw	fp,0(sp)
   1bddc:	dec00204 	addi	sp,sp,8
   1bde0:	f800283a 	ret

0001bde4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   1bde4:	defff204 	addi	sp,sp,-56
   1bde8:	dfc00d15 	stw	ra,52(sp)
   1bdec:	df000c15 	stw	fp,48(sp)
   1bdf0:	df000c04 	addi	fp,sp,48
   1bdf4:	e13ffc15 	stw	r4,-16(fp)
   1bdf8:	e17ffd15 	stw	r5,-12(fp)
   1bdfc:	e1bffe15 	stw	r6,-8(fp)
   1be00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   1be04:	e0bffe17 	ldw	r2,-8(fp)
   1be08:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   1be0c:	e0bfff17 	ldw	r2,-4(fp)
   1be10:	1090000c 	andi	r2,r2,16384
   1be14:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1be18:	00003c06 	br	1bf0c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1be1c:	e0bffc17 	ldw	r2,-16(fp)
   1be20:	10800517 	ldw	r2,20(r2)
   1be24:	10800044 	addi	r2,r2,1
   1be28:	10800fcc 	andi	r2,r2,63
   1be2c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   1be30:	e0bffc17 	ldw	r2,-16(fp)
   1be34:	10c00417 	ldw	r3,16(r2)
   1be38:	e0bff717 	ldw	r2,-36(fp)
   1be3c:	1880221e 	bne	r3,r2,1bec8 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   1be40:	e0bff517 	ldw	r2,-44(fp)
   1be44:	10000526 	beq	r2,zero,1be5c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   1be48:	001bda80 	call	1bda8 <alt_get_errno>
   1be4c:	1007883a 	mov	r3,r2
   1be50:	008002c4 	movi	r2,11
   1be54:	18800015 	stw	r2,0(r3)
        break;
   1be58:	00002e06 	br	1bf14 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be5c:	0005303a 	rdctl	r2,status
   1be60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be64:	e0fff917 	ldw	r3,-28(fp)
   1be68:	00bfff84 	movi	r2,-2
   1be6c:	1884703a 	and	r2,r3,r2
   1be70:	1001703a 	wrctl	status,r2
  
  return context;
   1be74:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   1be78:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1be7c:	e0bffc17 	ldw	r2,-16(fp)
   1be80:	10800117 	ldw	r2,4(r2)
   1be84:	10c11014 	ori	r3,r2,1088
   1be88:	e0bffc17 	ldw	r2,-16(fp)
   1be8c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1be90:	e0bffc17 	ldw	r2,-16(fp)
   1be94:	10800017 	ldw	r2,0(r2)
   1be98:	10800304 	addi	r2,r2,12
   1be9c:	e0fffc17 	ldw	r3,-16(fp)
   1bea0:	18c00117 	ldw	r3,4(r3)
   1bea4:	10c00035 	stwio	r3,0(r2)
   1bea8:	e0bff817 	ldw	r2,-32(fp)
   1beac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1beb0:	e0bff617 	ldw	r2,-40(fp)
   1beb4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   1beb8:	e0bffc17 	ldw	r2,-16(fp)
   1bebc:	10c00417 	ldw	r3,16(r2)
   1bec0:	e0bff717 	ldw	r2,-36(fp)
   1bec4:	18bffc26 	beq	r3,r2,1beb8 <__alt_data_end+0xf001beb8>
      }
    }

    count--;
   1bec8:	e0bff417 	ldw	r2,-48(fp)
   1becc:	10bfffc4 	addi	r2,r2,-1
   1bed0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   1bed4:	e0bffc17 	ldw	r2,-16(fp)
   1bed8:	10c00517 	ldw	r3,20(r2)
   1bedc:	e0bffd17 	ldw	r2,-12(fp)
   1bee0:	11000044 	addi	r4,r2,1
   1bee4:	e13ffd15 	stw	r4,-12(fp)
   1bee8:	10800003 	ldbu	r2,0(r2)
   1beec:	1009883a 	mov	r4,r2
   1bef0:	e0bffc17 	ldw	r2,-16(fp)
   1bef4:	10c5883a 	add	r2,r2,r3
   1bef8:	10801704 	addi	r2,r2,92
   1befc:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   1bf00:	e0bffc17 	ldw	r2,-16(fp)
   1bf04:	e0fff717 	ldw	r3,-36(fp)
   1bf08:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1bf0c:	e0bff417 	ldw	r2,-48(fp)
   1bf10:	103fc21e 	bne	r2,zero,1be1c <__alt_data_end+0xf001be1c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bf14:	0005303a 	rdctl	r2,status
   1bf18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bf1c:	e0fffb17 	ldw	r3,-20(fp)
   1bf20:	00bfff84 	movi	r2,-2
   1bf24:	1884703a 	and	r2,r3,r2
   1bf28:	1001703a 	wrctl	status,r2
  
  return context;
   1bf2c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   1bf30:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1bf34:	e0bffc17 	ldw	r2,-16(fp)
   1bf38:	10800117 	ldw	r2,4(r2)
   1bf3c:	10c11014 	ori	r3,r2,1088
   1bf40:	e0bffc17 	ldw	r2,-16(fp)
   1bf44:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1bf48:	e0bffc17 	ldw	r2,-16(fp)
   1bf4c:	10800017 	ldw	r2,0(r2)
   1bf50:	10800304 	addi	r2,r2,12
   1bf54:	e0fffc17 	ldw	r3,-16(fp)
   1bf58:	18c00117 	ldw	r3,4(r3)
   1bf5c:	10c00035 	stwio	r3,0(r2)
   1bf60:	e0bff817 	ldw	r2,-32(fp)
   1bf64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf68:	e0bffa17 	ldw	r2,-24(fp)
   1bf6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   1bf70:	e0fffe17 	ldw	r3,-8(fp)
   1bf74:	e0bff417 	ldw	r2,-48(fp)
   1bf78:	1885c83a 	sub	r2,r3,r2
}
   1bf7c:	e037883a 	mov	sp,fp
   1bf80:	dfc00117 	ldw	ra,4(sp)
   1bf84:	df000017 	ldw	fp,0(sp)
   1bf88:	dec00204 	addi	sp,sp,8
   1bf8c:	f800283a 	ret

0001bf90 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1bf90:	defffd04 	addi	sp,sp,-12
   1bf94:	df000215 	stw	fp,8(sp)
   1bf98:	df000204 	addi	fp,sp,8
   1bf9c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1bfa0:	e0bfff17 	ldw	r2,-4(fp)
   1bfa4:	1080400c 	andi	r2,r2,256
   1bfa8:	1004d23a 	srli	r2,r2,8
   1bfac:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1bfb0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1bfb4:	e037883a 	mov	sp,fp
   1bfb8:	df000017 	ldw	fp,0(sp)
   1bfbc:	dec00104 	addi	sp,sp,4
   1bfc0:	f800283a 	ret

0001bfc4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1bfc4:	defffd04 	addi	sp,sp,-12
   1bfc8:	df000215 	stw	fp,8(sp)
   1bfcc:	df000204 	addi	fp,sp,8
   1bfd0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1bfd4:	e0bfff17 	ldw	r2,-4(fp)
   1bfd8:	1080004c 	andi	r2,r2,1
   1bfdc:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1bfe0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1bfe4:	e037883a 	mov	sp,fp
   1bfe8:	df000017 	ldw	fp,0(sp)
   1bfec:	dec00104 	addi	sp,sp,4
   1bff0:	f800283a 	ret

0001bff4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1bff4:	defffd04 	addi	sp,sp,-12
   1bff8:	df000215 	stw	fp,8(sp)
   1bffc:	df000204 	addi	fp,sp,8
   1c000:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1c004:	e0bfff17 	ldw	r2,-4(fp)
   1c008:	1081000c 	andi	r2,r2,1024
   1c00c:	1004d2ba 	srli	r2,r2,10
   1c010:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1c014:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c018:	e037883a 	mov	sp,fp
   1c01c:	df000017 	ldw	fp,0(sp)
   1c020:	dec00104 	addi	sp,sp,4
   1c024:	f800283a 	ret

0001c028 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1c028:	defffd04 	addi	sp,sp,-12
   1c02c:	df000215 	stw	fp,8(sp)
   1c030:	df000204 	addi	fp,sp,8
   1c034:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1c038:	e0bfff17 	ldw	r2,-4(fp)
   1c03c:	1004d43a 	srli	r2,r2,16
   1c040:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1c044:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c048:	e037883a 	mov	sp,fp
   1c04c:	df000017 	ldw	fp,0(sp)
   1c050:	dec00104 	addi	sp,sp,4
   1c054:	f800283a 	ret

0001c058 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1c058:	defffd04 	addi	sp,sp,-12
   1c05c:	df000215 	stw	fp,8(sp)
   1c060:	df000204 	addi	fp,sp,8
   1c064:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1c068:	e0bfff17 	ldw	r2,-4(fp)
   1c06c:	10a0000c 	andi	r2,r2,32768
   1c070:	1004d3fa 	srli	r2,r2,15
   1c074:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1c078:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c07c:	e037883a 	mov	sp,fp
   1c080:	df000017 	ldw	fp,0(sp)
   1c084:	dec00104 	addi	sp,sp,4
   1c088:	f800283a 	ret

0001c08c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1c08c:	defffd04 	addi	sp,sp,-12
   1c090:	df000215 	stw	fp,8(sp)
   1c094:	df000204 	addi	fp,sp,8
   1c098:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1c09c:	e0bfff17 	ldw	r2,-4(fp)
   1c0a0:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1c0a4:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c0a8:	e037883a 	mov	sp,fp
   1c0ac:	df000017 	ldw	fp,0(sp)
   1c0b0:	dec00104 	addi	sp,sp,4
   1c0b4:	f800283a 	ret

0001c0b8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1c0b8:	defffb04 	addi	sp,sp,-20
   1c0bc:	dfc00415 	stw	ra,16(sp)
   1c0c0:	df000315 	stw	fp,12(sp)
   1c0c4:	df000304 	addi	fp,sp,12
   1c0c8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1c0cc:	01403fc4 	movi	r5,255
   1c0d0:	e13fff17 	ldw	r4,-4(fp)
   1c0d4:	001c3180 	call	1c318 <alt_up_ps2_write_data_byte_with_ack>
   1c0d8:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1c0dc:	e0bffd17 	ldw	r2,-12(fp)
   1c0e0:	1000211e 	bne	r2,zero,1c168 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c0e4:	e0bffe04 	addi	r2,fp,-8
   1c0e8:	100b883a 	mov	r5,r2
   1c0ec:	e13fff17 	ldw	r4,-4(fp)
   1c0f0:	001c37c0 	call	1c37c <alt_up_ps2_read_data_byte_timeout>
   1c0f4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1c0f8:	e0bffd17 	ldw	r2,-12(fp)
   1c0fc:	10001a1e 	bne	r2,zero,1c168 <alt_up_ps2_init+0xb0>
   1c100:	e0bffe03 	ldbu	r2,-8(fp)
   1c104:	10803fcc 	andi	r2,r2,255
   1c108:	10802a98 	cmpnei	r2,r2,170
   1c10c:	1000161e 	bne	r2,zero,1c168 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1c110:	e0bffe04 	addi	r2,fp,-8
   1c114:	100b883a 	mov	r5,r2
   1c118:	e13fff17 	ldw	r4,-4(fp)
   1c11c:	001c37c0 	call	1c37c <alt_up_ps2_read_data_byte_timeout>
   1c120:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1c124:	e0bffd17 	ldw	r2,-12(fp)
   1c128:	10bfe318 	cmpnei	r2,r2,-116
   1c12c:	1000041e 	bne	r2,zero,1c140 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1c130:	e0bfff17 	ldw	r2,-4(fp)
   1c134:	00c00044 	movi	r3,1
   1c138:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   1c13c:	00000a06 	br	1c168 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1c140:	e0bffd17 	ldw	r2,-12(fp)
   1c144:	1000081e 	bne	r2,zero,1c168 <alt_up_ps2_init+0xb0>
   1c148:	e0bffe03 	ldbu	r2,-8(fp)
   1c14c:	10803fcc 	andi	r2,r2,255
   1c150:	1000051e 	bne	r2,zero,1c168 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1c154:	e0bfff17 	ldw	r2,-4(fp)
   1c158:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1c15c:	01403d04 	movi	r5,244
   1c160:	e13fff17 	ldw	r4,-4(fp)
   1c164:	001c23c0 	call	1c23c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1c168:	0001883a 	nop
   1c16c:	e037883a 	mov	sp,fp
   1c170:	dfc00117 	ldw	ra,4(sp)
   1c174:	df000017 	ldw	fp,0(sp)
   1c178:	dec00204 	addi	sp,sp,8
   1c17c:	f800283a 	ret

0001c180 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c180:	defffd04 	addi	sp,sp,-12
   1c184:	df000215 	stw	fp,8(sp)
   1c188:	df000204 	addi	fp,sp,8
   1c18c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c190:	e0bfff17 	ldw	r2,-4(fp)
   1c194:	10800a17 	ldw	r2,40(r2)
   1c198:	10800104 	addi	r2,r2,4
   1c19c:	10800037 	ldwio	r2,0(r2)
   1c1a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c1a4:	e0bffe17 	ldw	r2,-8(fp)
   1c1a8:	10800054 	ori	r2,r2,1
   1c1ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c1b0:	e0bfff17 	ldw	r2,-4(fp)
   1c1b4:	10800a17 	ldw	r2,40(r2)
   1c1b8:	10800104 	addi	r2,r2,4
   1c1bc:	1007883a 	mov	r3,r2
   1c1c0:	e0bffe17 	ldw	r2,-8(fp)
   1c1c4:	18800035 	stwio	r2,0(r3)
}
   1c1c8:	0001883a 	nop
   1c1cc:	e037883a 	mov	sp,fp
   1c1d0:	df000017 	ldw	fp,0(sp)
   1c1d4:	dec00104 	addi	sp,sp,4
   1c1d8:	f800283a 	ret

0001c1dc <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1c1dc:	defffd04 	addi	sp,sp,-12
   1c1e0:	df000215 	stw	fp,8(sp)
   1c1e4:	df000204 	addi	fp,sp,8
   1c1e8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1c1ec:	e0bfff17 	ldw	r2,-4(fp)
   1c1f0:	10800a17 	ldw	r2,40(r2)
   1c1f4:	10800104 	addi	r2,r2,4
   1c1f8:	10800037 	ldwio	r2,0(r2)
   1c1fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1c200:	e0fffe17 	ldw	r3,-8(fp)
   1c204:	00bfff84 	movi	r2,-2
   1c208:	1884703a 	and	r2,r3,r2
   1c20c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1c210:	e0bfff17 	ldw	r2,-4(fp)
   1c214:	10800a17 	ldw	r2,40(r2)
   1c218:	10800104 	addi	r2,r2,4
   1c21c:	1007883a 	mov	r3,r2
   1c220:	e0bffe17 	ldw	r2,-8(fp)
   1c224:	18800035 	stwio	r2,0(r3)
}
   1c228:	0001883a 	nop
   1c22c:	e037883a 	mov	sp,fp
   1c230:	df000017 	ldw	fp,0(sp)
   1c234:	dec00104 	addi	sp,sp,4
   1c238:	f800283a 	ret

0001c23c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c23c:	defffb04 	addi	sp,sp,-20
   1c240:	dfc00415 	stw	ra,16(sp)
   1c244:	df000315 	stw	fp,12(sp)
   1c248:	df000304 	addi	fp,sp,12
   1c24c:	e13ffe15 	stw	r4,-8(fp)
   1c250:	2805883a 	mov	r2,r5
   1c254:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1c258:	e0bffe17 	ldw	r2,-8(fp)
   1c25c:	10800a17 	ldw	r2,40(r2)
   1c260:	1007883a 	mov	r3,r2
   1c264:	e0bfff03 	ldbu	r2,-4(fp)
   1c268:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1c26c:	e0bffe17 	ldw	r2,-8(fp)
   1c270:	10800a17 	ldw	r2,40(r2)
   1c274:	10800104 	addi	r2,r2,4
   1c278:	10800037 	ldwio	r2,0(r2)
   1c27c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1c280:	e13ffd17 	ldw	r4,-12(fp)
   1c284:	001bff40 	call	1bff4 <read_CE_bit>
   1c288:	10803fcc 	andi	r2,r2,255
   1c28c:	10000226 	beq	r2,zero,1c298 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1c290:	00bffec4 	movi	r2,-5
   1c294:	00000106 	br	1c29c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1c298:	0005883a 	mov	r2,zero
}
   1c29c:	e037883a 	mov	sp,fp
   1c2a0:	dfc00117 	ldw	ra,4(sp)
   1c2a4:	df000017 	ldw	fp,0(sp)
   1c2a8:	dec00204 	addi	sp,sp,8
   1c2ac:	f800283a 	ret

0001c2b0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1c2b0:	defffc04 	addi	sp,sp,-16
   1c2b4:	dfc00315 	stw	ra,12(sp)
   1c2b8:	df000215 	stw	fp,8(sp)
   1c2bc:	df000204 	addi	fp,sp,8
   1c2c0:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1c2c4:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1c2c8:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1c2cc:	e0bffe44 	addi	r2,fp,-7
   1c2d0:	100b883a 	mov	r5,r2
   1c2d4:	e13fff17 	ldw	r4,-4(fp)
   1c2d8:	001c37c0 	call	1c37c <alt_up_ps2_read_data_byte_timeout>
   1c2dc:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1c2e0:	e0bffe03 	ldbu	r2,-8(fp)
   1c2e4:	1000061e 	bne	r2,zero,1c300 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1c2e8:	e0bffe43 	ldbu	r2,-7(fp)
   1c2ec:	10803fcc 	andi	r2,r2,255
   1c2f0:	10803e98 	cmpnei	r2,r2,250
   1c2f4:	103ff51e 	bne	r2,zero,1c2cc <__alt_data_end+0xf001c2cc>
				return 0;
   1c2f8:	0005883a 	mov	r2,zero
   1c2fc:	00000106 	br	1c304 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1c300:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1c304:	e037883a 	mov	sp,fp
   1c308:	dfc00117 	ldw	ra,4(sp)
   1c30c:	df000017 	ldw	fp,0(sp)
   1c310:	dec00204 	addi	sp,sp,8
   1c314:	f800283a 	ret

0001c318 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1c318:	defffa04 	addi	sp,sp,-24
   1c31c:	dfc00515 	stw	ra,20(sp)
   1c320:	df000415 	stw	fp,16(sp)
   1c324:	df000404 	addi	fp,sp,16
   1c328:	e13ffe15 	stw	r4,-8(fp)
   1c32c:	2805883a 	mov	r2,r5
   1c330:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1c334:	e0bfff03 	ldbu	r2,-4(fp)
   1c338:	100b883a 	mov	r5,r2
   1c33c:	e13ffe17 	ldw	r4,-8(fp)
   1c340:	001c23c0 	call	1c23c <alt_up_ps2_write_data_byte>
   1c344:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1c348:	e0bffc17 	ldw	r2,-16(fp)
   1c34c:	10000226 	beq	r2,zero,1c358 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1c350:	e0bffc17 	ldw	r2,-16(fp)
   1c354:	00000406 	br	1c368 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1c358:	e13ffe17 	ldw	r4,-8(fp)
   1c35c:	001c2b00 	call	1c2b0 <alt_up_ps2_wait_for_ack>
   1c360:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1c364:	e0bffd17 	ldw	r2,-12(fp)
}
   1c368:	e037883a 	mov	sp,fp
   1c36c:	dfc00117 	ldw	ra,4(sp)
   1c370:	df000017 	ldw	fp,0(sp)
   1c374:	dec00204 	addi	sp,sp,8
   1c378:	f800283a 	ret

0001c37c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1c37c:	defffa04 	addi	sp,sp,-24
   1c380:	dfc00515 	stw	ra,20(sp)
   1c384:	df000415 	stw	fp,16(sp)
   1c388:	df000404 	addi	fp,sp,16
   1c38c:	e13ffe15 	stw	r4,-8(fp)
   1c390:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1c394:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1c398:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1c39c:	e0bffc17 	ldw	r2,-16(fp)
   1c3a0:	10800044 	addi	r2,r2,1
   1c3a4:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c3a8:	e0bffe17 	ldw	r2,-8(fp)
   1c3ac:	10800a17 	ldw	r2,40(r2)
   1c3b0:	10800037 	ldwio	r2,0(r2)
   1c3b4:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1c3b8:	e13ffd17 	ldw	r4,-12(fp)
   1c3bc:	001c0580 	call	1c058 <read_data_valid>
   1c3c0:	10803fcc 	andi	r2,r2,255
   1c3c4:	10000726 	beq	r2,zero,1c3e4 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1c3c8:	e13ffd17 	ldw	r4,-12(fp)
   1c3cc:	001c08c0 	call	1c08c <read_data_byte>
   1c3d0:	1007883a 	mov	r3,r2
   1c3d4:	e0bfff17 	ldw	r2,-4(fp)
   1c3d8:	10c00005 	stb	r3,0(r2)
			return 0;
   1c3dc:	0005883a 	mov	r2,zero
   1c3e0:	00000806 	br	1c404 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1c3e4:	e0bffe17 	ldw	r2,-8(fp)
   1c3e8:	10800c17 	ldw	r2,48(r2)
   1c3ec:	103feb26 	beq	r2,zero,1c39c <__alt_data_end+0xf001c39c>
   1c3f0:	e0bffe17 	ldw	r2,-8(fp)
   1c3f4:	10c00c17 	ldw	r3,48(r2)
   1c3f8:	e0bffc17 	ldw	r2,-16(fp)
   1c3fc:	18bfe72e 	bgeu	r3,r2,1c39c <__alt_data_end+0xf001c39c>
		{
			return -ETIMEDOUT;
   1c400:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1c404:	e037883a 	mov	sp,fp
   1c408:	dfc00117 	ldw	ra,4(sp)
   1c40c:	df000017 	ldw	fp,0(sp)
   1c410:	dec00204 	addi	sp,sp,8
   1c414:	f800283a 	ret

0001c418 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1c418:	defffb04 	addi	sp,sp,-20
   1c41c:	dfc00415 	stw	ra,16(sp)
   1c420:	df000315 	stw	fp,12(sp)
   1c424:	df000304 	addi	fp,sp,12
   1c428:	e13ffe15 	stw	r4,-8(fp)
   1c42c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1c430:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c434:	e0bffe17 	ldw	r2,-8(fp)
   1c438:	10800a17 	ldw	r2,40(r2)
   1c43c:	10800037 	ldwio	r2,0(r2)
   1c440:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1c444:	e13ffd17 	ldw	r4,-12(fp)
   1c448:	001c0580 	call	1c058 <read_data_valid>
   1c44c:	10803fcc 	andi	r2,r2,255
   1c450:	10000726 	beq	r2,zero,1c470 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1c454:	e13ffd17 	ldw	r4,-12(fp)
   1c458:	001c08c0 	call	1c08c <read_data_byte>
   1c45c:	1007883a 	mov	r3,r2
   1c460:	e0bfff17 	ldw	r2,-4(fp)
   1c464:	10c00005 	stb	r3,0(r2)
		return 0;
   1c468:	0005883a 	mov	r2,zero
   1c46c:	00000106 	br	1c474 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1c470:	00bfffc4 	movi	r2,-1
}
   1c474:	e037883a 	mov	sp,fp
   1c478:	dfc00117 	ldw	ra,4(sp)
   1c47c:	df000017 	ldw	fp,0(sp)
   1c480:	dec00204 	addi	sp,sp,8
   1c484:	f800283a 	ret

0001c488 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1c488:	defffb04 	addi	sp,sp,-20
   1c48c:	dfc00415 	stw	ra,16(sp)
   1c490:	df000315 	stw	fp,12(sp)
   1c494:	df000304 	addi	fp,sp,12
   1c498:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1c49c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1c4a0:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1c4a4:	e0bfff17 	ldw	r2,-4(fp)
   1c4a8:	10800a17 	ldw	r2,40(r2)
   1c4ac:	10800037 	ldwio	r2,0(r2)
   1c4b0:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1c4b4:	e13ffe17 	ldw	r4,-8(fp)
   1c4b8:	001c0280 	call	1c028 <read_num_bytes_available>
   1c4bc:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1c4c0:	e0bffd0b 	ldhu	r2,-12(fp)
   1c4c4:	103ff71e 	bne	r2,zero,1c4a4 <__alt_data_end+0xf001c4a4>
}
   1c4c8:	0001883a 	nop
   1c4cc:	e037883a 	mov	sp,fp
   1c4d0:	dfc00117 	ldw	ra,4(sp)
   1c4d4:	df000017 	ldw	fp,0(sp)
   1c4d8:	dec00204 	addi	sp,sp,8
   1c4dc:	f800283a 	ret

0001c4e0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c4e0:	defff804 	addi	sp,sp,-32
   1c4e4:	dfc00715 	stw	ra,28(sp)
   1c4e8:	df000615 	stw	fp,24(sp)
   1c4ec:	df000604 	addi	fp,sp,24
   1c4f0:	e13ffd15 	stw	r4,-12(fp)
   1c4f4:	e17ffe15 	stw	r5,-8(fp)
   1c4f8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1c4fc:	e0bffd17 	ldw	r2,-12(fp)
   1c500:	10800017 	ldw	r2,0(r2)
   1c504:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1c508:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1c50c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1c510:	e0fffc17 	ldw	r3,-16(fp)
   1c514:	e0bfff17 	ldw	r2,-4(fp)
   1c518:	18bffd16 	blt	r3,r2,1c510 <__alt_data_end+0xf001c510>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1c51c:	e0bffe17 	ldw	r2,-8(fp)
   1c520:	10c00044 	addi	r3,r2,1
   1c524:	e0fffe15 	stw	r3,-8(fp)
   1c528:	100b883a 	mov	r5,r2
   1c52c:	e13ffa17 	ldw	r4,-24(fp)
   1c530:	001c37c0 	call	1c37c <alt_up_ps2_read_data_byte_timeout>
   1c534:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1c538:	e0bffb17 	ldw	r2,-20(fp)
   1c53c:	10000226 	beq	r2,zero,1c548 <alt_up_ps2_read_fd+0x68>
			return count;
   1c540:	e0bffc17 	ldw	r2,-16(fp)
   1c544:	00000406 	br	1c558 <alt_up_ps2_read_fd+0x78>
		count++;
   1c548:	e0bffc17 	ldw	r2,-16(fp)
   1c54c:	10800044 	addi	r2,r2,1
   1c550:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1c554:	e0bffc17 	ldw	r2,-16(fp)
}
   1c558:	e037883a 	mov	sp,fp
   1c55c:	dfc00117 	ldw	ra,4(sp)
   1c560:	df000017 	ldw	fp,0(sp)
   1c564:	dec00204 	addi	sp,sp,8
   1c568:	f800283a 	ret

0001c56c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1c56c:	defff804 	addi	sp,sp,-32
   1c570:	dfc00715 	stw	ra,28(sp)
   1c574:	df000615 	stw	fp,24(sp)
   1c578:	df000604 	addi	fp,sp,24
   1c57c:	e13ffd15 	stw	r4,-12(fp)
   1c580:	e17ffe15 	stw	r5,-8(fp)
   1c584:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1c588:	e0bffd17 	ldw	r2,-12(fp)
   1c58c:	10800017 	ldw	r2,0(r2)
   1c590:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1c594:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1c598:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1c59c:	00001006 	br	1c5e0 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1c5a0:	e0bffe17 	ldw	r2,-8(fp)
   1c5a4:	10c00044 	addi	r3,r2,1
   1c5a8:	e0fffe15 	stw	r3,-8(fp)
   1c5ac:	10800003 	ldbu	r2,0(r2)
   1c5b0:	10803fcc 	andi	r2,r2,255
   1c5b4:	100b883a 	mov	r5,r2
   1c5b8:	e13ffb17 	ldw	r4,-20(fp)
   1c5bc:	001c23c0 	call	1c23c <alt_up_ps2_write_data_byte>
   1c5c0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1c5c4:	e0bffc17 	ldw	r2,-16(fp)
   1c5c8:	10000226 	beq	r2,zero,1c5d4 <alt_up_ps2_write_fd+0x68>
			return count;
   1c5cc:	e0bffa17 	ldw	r2,-24(fp)
   1c5d0:	00000706 	br	1c5f0 <alt_up_ps2_write_fd+0x84>
		count++;
   1c5d4:	e0bffa17 	ldw	r2,-24(fp)
   1c5d8:	10800044 	addi	r2,r2,1
   1c5dc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1c5e0:	e0fffa17 	ldw	r3,-24(fp)
   1c5e4:	e0bfff17 	ldw	r2,-4(fp)
   1c5e8:	18bfed16 	blt	r3,r2,1c5a0 <__alt_data_end+0xf001c5a0>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1c5ec:	e0bffa17 	ldw	r2,-24(fp)
}
   1c5f0:	e037883a 	mov	sp,fp
   1c5f4:	dfc00117 	ldw	ra,4(sp)
   1c5f8:	df000017 	ldw	fp,0(sp)
   1c5fc:	dec00204 	addi	sp,sp,8
   1c600:	f800283a 	ret

0001c604 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1c604:	defffc04 	addi	sp,sp,-16
   1c608:	dfc00315 	stw	ra,12(sp)
   1c60c:	df000215 	stw	fp,8(sp)
   1c610:	df000204 	addi	fp,sp,8
   1c614:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1c618:	d1600c84 	addi	r5,gp,-32718
   1c61c:	e13fff17 	ldw	r4,-4(fp)
   1c620:	001e0f40 	call	1e0f4 <alt_find_dev>
   1c624:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c628:	e0bffe17 	ldw	r2,-8(fp)
}
   1c62c:	e037883a 	mov	sp,fp
   1c630:	dfc00117 	ldw	ra,4(sp)
   1c634:	df000017 	ldw	fp,0(sp)
   1c638:	dec00204 	addi	sp,sp,8
   1c63c:	f800283a 	ret

0001c640 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1c640:	defffc04 	addi	sp,sp,-16
   1c644:	dfc00315 	stw	ra,12(sp)
   1c648:	df000215 	stw	fp,8(sp)
   1c64c:	df000204 	addi	fp,sp,8
   1c650:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1c654:	e0bfff17 	ldw	r2,-4(fp)
   1c658:	10800217 	ldw	r2,8(r2)
   1c65c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1c660:	00000b06 	br	1c690 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1c664:	01420034 	movhi	r5,2048
   1c668:	29418404 	addi	r5,r5,1552
   1c66c:	e13ffe17 	ldw	r4,-8(fp)
   1c670:	00129b80 	call	129b8 <strcmp>
   1c674:	1000031e 	bne	r2,zero,1c684 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1c678:	e0bffe17 	ldw	r2,-8(fp)
   1c67c:	10000005 	stb	zero,0(r2)
			break;
   1c680:	00000906 	br	1c6a8 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1c684:	e0bffe17 	ldw	r2,-8(fp)
   1c688:	10800044 	addi	r2,r2,1
   1c68c:	e0bffe15 	stw	r2,-8(fp)
   1c690:	e0bffe17 	ldw	r2,-8(fp)
   1c694:	10800003 	ldbu	r2,0(r2)
   1c698:	10803fcc 	andi	r2,r2,255
   1c69c:	1080201c 	xori	r2,r2,128
   1c6a0:	10bfe004 	addi	r2,r2,-128
   1c6a4:	103fef1e 	bne	r2,zero,1c664 <__alt_data_end+0xf001c664>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1c6a8:	0001883a 	nop
}
   1c6ac:	e037883a 	mov	sp,fp
   1c6b0:	dfc00117 	ldw	ra,4(sp)
   1c6b4:	df000017 	ldw	fp,0(sp)
   1c6b8:	dec00204 	addi	sp,sp,8
   1c6bc:	f800283a 	ret

0001c6c0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1c6c0:	defffc04 	addi	sp,sp,-16
   1c6c4:	dfc00315 	stw	ra,12(sp)
   1c6c8:	df000215 	stw	fp,8(sp)
   1c6cc:	df000204 	addi	fp,sp,8
   1c6d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1c6d4:	d1600c84 	addi	r5,gp,-32718
   1c6d8:	e13fff17 	ldw	r4,-4(fp)
   1c6dc:	001e0f40 	call	1e0f4 <alt_find_dev>
   1c6e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c6e4:	e0bffe17 	ldw	r2,-8(fp)
}
   1c6e8:	e037883a 	mov	sp,fp
   1c6ec:	dfc00117 	ldw	ra,4(sp)
   1c6f0:	df000017 	ldw	fp,0(sp)
   1c6f4:	dec00204 	addi	sp,sp,8
   1c6f8:	f800283a 	ret

0001c6fc <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1c6fc:	defffa04 	addi	sp,sp,-24
   1c700:	df000515 	stw	fp,20(sp)
   1c704:	df000504 	addi	fp,sp,20
   1c708:	e13ffc15 	stw	r4,-16(fp)
   1c70c:	2805883a 	mov	r2,r5
   1c710:	e1bffe15 	stw	r6,-8(fp)
   1c714:	e1ffff15 	stw	r7,-4(fp)
   1c718:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1c71c:	e0bffc17 	ldw	r2,-16(fp)
   1c720:	10800c17 	ldw	r2,48(r2)
   1c724:	e0fffe17 	ldw	r3,-8(fp)
   1c728:	1880042e 	bgeu	r3,r2,1c73c <alt_up_char_buffer_draw+0x40>
   1c72c:	e0bffc17 	ldw	r2,-16(fp)
   1c730:	10800d17 	ldw	r2,52(r2)
   1c734:	e0ffff17 	ldw	r3,-4(fp)
   1c738:	18800236 	bltu	r3,r2,1c744 <alt_up_char_buffer_draw+0x48>
		return -1;
   1c73c:	00bfffc4 	movi	r2,-1
   1c740:	00001d06 	br	1c7b8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1c744:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1c748:	e0bffc17 	ldw	r2,-16(fp)
   1c74c:	10c00f17 	ldw	r3,60(r2)
   1c750:	e0bffe17 	ldw	r2,-8(fp)
   1c754:	1886703a 	and	r3,r3,r2
   1c758:	e0bffc17 	ldw	r2,-16(fp)
   1c75c:	10800e17 	ldw	r2,56(r2)
   1c760:	1884983a 	sll	r2,r3,r2
   1c764:	e0fffb17 	ldw	r3,-20(fp)
   1c768:	1884b03a 	or	r2,r3,r2
   1c76c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1c770:	e0bffc17 	ldw	r2,-16(fp)
   1c774:	10c01117 	ldw	r3,68(r2)
   1c778:	e0bfff17 	ldw	r2,-4(fp)
   1c77c:	1886703a 	and	r3,r3,r2
   1c780:	e0bffc17 	ldw	r2,-16(fp)
   1c784:	10801017 	ldw	r2,64(r2)
   1c788:	1884983a 	sll	r2,r3,r2
   1c78c:	e0fffb17 	ldw	r3,-20(fp)
   1c790:	1884b03a 	or	r2,r3,r2
   1c794:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1c798:	e0bffc17 	ldw	r2,-16(fp)
   1c79c:	10c00b17 	ldw	r3,44(r2)
   1c7a0:	e0bffb17 	ldw	r2,-20(fp)
   1c7a4:	1885883a 	add	r2,r3,r2
   1c7a8:	1007883a 	mov	r3,r2
   1c7ac:	e0bffd03 	ldbu	r2,-12(fp)
   1c7b0:	18800025 	stbio	r2,0(r3)

	return 0;
   1c7b4:	0005883a 	mov	r2,zero
}
   1c7b8:	e037883a 	mov	sp,fp
   1c7bc:	df000017 	ldw	fp,0(sp)
   1c7c0:	dec00104 	addi	sp,sp,4
   1c7c4:	f800283a 	ret

0001c7c8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1c7c8:	defffa04 	addi	sp,sp,-24
   1c7cc:	df000515 	stw	fp,20(sp)
   1c7d0:	df000504 	addi	fp,sp,20
   1c7d4:	e13ffc15 	stw	r4,-16(fp)
   1c7d8:	e17ffd15 	stw	r5,-12(fp)
   1c7dc:	e1bffe15 	stw	r6,-8(fp)
   1c7e0:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1c7e4:	e0bffc17 	ldw	r2,-16(fp)
   1c7e8:	10800c17 	ldw	r2,48(r2)
   1c7ec:	e0fffe17 	ldw	r3,-8(fp)
   1c7f0:	1880042e 	bgeu	r3,r2,1c804 <alt_up_char_buffer_string+0x3c>
   1c7f4:	e0bffc17 	ldw	r2,-16(fp)
   1c7f8:	10800d17 	ldw	r2,52(r2)
   1c7fc:	e0ffff17 	ldw	r3,-4(fp)
   1c800:	18800236 	bltu	r3,r2,1c80c <alt_up_char_buffer_string+0x44>
		return -1;
   1c804:	00bfffc4 	movi	r2,-1
   1c808:	00002a06 	br	1c8b4 <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
   1c80c:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1c810:	e0bffc17 	ldw	r2,-16(fp)
   1c814:	10801017 	ldw	r2,64(r2)
   1c818:	e0ffff17 	ldw	r3,-4(fp)
   1c81c:	1886983a 	sll	r3,r3,r2
   1c820:	e0bffe17 	ldw	r2,-8(fp)
   1c824:	1885883a 	add	r2,r3,r2
   1c828:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1c82c:	00001a06 	br	1c898 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1c830:	e0bffc17 	ldw	r2,-16(fp)
   1c834:	10c00b17 	ldw	r3,44(r2)
   1c838:	e0bffb17 	ldw	r2,-20(fp)
   1c83c:	1885883a 	add	r2,r3,r2
   1c840:	1007883a 	mov	r3,r2
   1c844:	e0bffd17 	ldw	r2,-12(fp)
   1c848:	10800003 	ldbu	r2,0(r2)
   1c84c:	10803fcc 	andi	r2,r2,255
   1c850:	1080201c 	xori	r2,r2,128
   1c854:	10bfe004 	addi	r2,r2,-128
   1c858:	18800025 	stbio	r2,0(r3)
		++ptr;
   1c85c:	e0bffd17 	ldw	r2,-12(fp)
   1c860:	10800044 	addi	r2,r2,1
   1c864:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1c868:	e0bffe17 	ldw	r2,-8(fp)
   1c86c:	10800044 	addi	r2,r2,1
   1c870:	e0bffe15 	stw	r2,-8(fp)
   1c874:	e0bffc17 	ldw	r2,-16(fp)
   1c878:	10800c17 	ldw	r2,48(r2)
   1c87c:	e0fffe17 	ldw	r3,-8(fp)
   1c880:	18800236 	bltu	r3,r2,1c88c <alt_up_char_buffer_string+0xc4>
			return -1;
   1c884:	00bfffc4 	movi	r2,-1
   1c888:	00000a06 	br	1c8b4 <alt_up_char_buffer_string+0xec>
		++offset;
   1c88c:	e0bffb17 	ldw	r2,-20(fp)
   1c890:	10800044 	addi	r2,r2,1
   1c894:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1c898:	e0bffd17 	ldw	r2,-12(fp)
   1c89c:	10800003 	ldbu	r2,0(r2)
   1c8a0:	10803fcc 	andi	r2,r2,255
   1c8a4:	1080201c 	xori	r2,r2,128
   1c8a8:	10bfe004 	addi	r2,r2,-128
   1c8ac:	103fe01e 	bne	r2,zero,1c830 <__alt_data_end+0xf001c830>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1c8b0:	0005883a 	mov	r2,zero
}
   1c8b4:	e037883a 	mov	sp,fp
   1c8b8:	df000017 	ldw	fp,0(sp)
   1c8bc:	dec00104 	addi	sp,sp,4
   1c8c0:	f800283a 	ret

0001c8c4 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1c8c4:	defffe04 	addi	sp,sp,-8
   1c8c8:	df000115 	stw	fp,4(sp)
   1c8cc:	df000104 	addi	fp,sp,4
   1c8d0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1c8d4:	e0bfff17 	ldw	r2,-4(fp)
   1c8d8:	10800a17 	ldw	r2,40(r2)
   1c8dc:	10800084 	addi	r2,r2,2
   1c8e0:	1007883a 	mov	r3,r2
   1c8e4:	00800044 	movi	r2,1
   1c8e8:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1c8ec:	0001883a 	nop
   1c8f0:	e0bfff17 	ldw	r2,-4(fp)
   1c8f4:	10800a17 	ldw	r2,40(r2)
   1c8f8:	10800084 	addi	r2,r2,2
   1c8fc:	10800023 	ldbuio	r2,0(r2)
   1c900:	10803fcc 	andi	r2,r2,255
   1c904:	1080004c 	andi	r2,r2,1
   1c908:	103ff91e 	bne	r2,zero,1c8f0 <__alt_data_end+0xf001c8f0>
	return 0;
   1c90c:	0005883a 	mov	r2,zero
}
   1c910:	e037883a 	mov	sp,fp
   1c914:	df000017 	ldw	fp,0(sp)
   1c918:	dec00104 	addi	sp,sp,4
   1c91c:	f800283a 	ret

0001c920 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   1c920:	defffc04 	addi	sp,sp,-16
   1c924:	dfc00315 	stw	ra,12(sp)
   1c928:	df000215 	stw	fp,8(sp)
   1c92c:	df000204 	addi	fp,sp,8
   1c930:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   1c934:	d1600c84 	addi	r5,gp,-32718
   1c938:	e13fff17 	ldw	r4,-4(fp)
   1c93c:	001e0f40 	call	1e0f4 <alt_find_dev>
   1c940:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c944:	e0bffe17 	ldw	r2,-8(fp)
}
   1c948:	e037883a 	mov	sp,fp
   1c94c:	dfc00117 	ldw	ra,4(sp)
   1c950:	df000017 	ldw	fp,0(sp)
   1c954:	dec00204 	addi	sp,sp,8
   1c958:	f800283a 	ret

0001c95c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   1c95c:	defffa04 	addi	sp,sp,-24
   1c960:	df000515 	stw	fp,20(sp)
   1c964:	df000504 	addi	fp,sp,20
   1c968:	e13ffc15 	stw	r4,-16(fp)
   1c96c:	e17ffd15 	stw	r5,-12(fp)
   1c970:	e1bffe15 	stw	r6,-8(fp)
   1c974:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   1c978:	e0bffc17 	ldw	r2,-16(fp)
   1c97c:	10800f17 	ldw	r2,60(r2)
   1c980:	e0fffe17 	ldw	r3,-8(fp)
   1c984:	1880042e 	bgeu	r3,r2,1c998 <alt_up_pixel_buffer_dma_draw+0x3c>
   1c988:	e0bffc17 	ldw	r2,-16(fp)
   1c98c:	10801017 	ldw	r2,64(r2)
   1c990:	e0ffff17 	ldw	r3,-4(fp)
   1c994:	18800236 	bltu	r3,r2,1c9a0 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
   1c998:	00bfffc4 	movi	r2,-1
   1c99c:	00005006 	br	1cae0 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
   1c9a0:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1c9a4:	e0bffc17 	ldw	r2,-16(fp)
   1c9a8:	10800d17 	ldw	r2,52(r2)
   1c9ac:	1000151e 	bne	r2,zero,1ca04 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   1c9b0:	e0bffc17 	ldw	r2,-16(fp)
   1c9b4:	10c01217 	ldw	r3,72(r2)
   1c9b8:	e0bffe17 	ldw	r2,-8(fp)
   1c9bc:	1886703a 	and	r3,r3,r2
   1c9c0:	e0bffc17 	ldw	r2,-16(fp)
   1c9c4:	10801117 	ldw	r2,68(r2)
   1c9c8:	1884983a 	sll	r2,r3,r2
   1c9cc:	e0fffb17 	ldw	r3,-20(fp)
   1c9d0:	1885883a 	add	r2,r3,r2
   1c9d4:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   1c9d8:	e0bffc17 	ldw	r2,-16(fp)
   1c9dc:	10c01417 	ldw	r3,80(r2)
   1c9e0:	e0bfff17 	ldw	r2,-4(fp)
   1c9e4:	1886703a 	and	r3,r3,r2
   1c9e8:	e0bffc17 	ldw	r2,-16(fp)
   1c9ec:	10801317 	ldw	r2,76(r2)
   1c9f0:	1884983a 	sll	r2,r3,r2
   1c9f4:	e0fffb17 	ldw	r3,-20(fp)
   1c9f8:	1885883a 	add	r2,r3,r2
   1c9fc:	e0bffb15 	stw	r2,-20(fp)
   1ca00:	00001706 	br	1ca60 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   1ca04:	e0bffc17 	ldw	r2,-16(fp)
   1ca08:	10c01217 	ldw	r3,72(r2)
   1ca0c:	e0bffe17 	ldw	r2,-8(fp)
   1ca10:	1886703a 	and	r3,r3,r2
   1ca14:	e0bffc17 	ldw	r2,-16(fp)
   1ca18:	10801117 	ldw	r2,68(r2)
   1ca1c:	1884983a 	sll	r2,r3,r2
   1ca20:	e0fffb17 	ldw	r3,-20(fp)
   1ca24:	1885883a 	add	r2,r3,r2
   1ca28:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   1ca2c:	e0bffc17 	ldw	r2,-16(fp)
   1ca30:	10c01417 	ldw	r3,80(r2)
   1ca34:	e0bfff17 	ldw	r2,-4(fp)
   1ca38:	1886703a 	and	r3,r3,r2
   1ca3c:	e0bffc17 	ldw	r2,-16(fp)
   1ca40:	10800f17 	ldw	r2,60(r2)
   1ca44:	1887383a 	mul	r3,r3,r2
   1ca48:	e0bffc17 	ldw	r2,-16(fp)
   1ca4c:	10801117 	ldw	r2,68(r2)
   1ca50:	1884983a 	sll	r2,r3,r2
   1ca54:	e0fffb17 	ldw	r3,-20(fp)
   1ca58:	1885883a 	add	r2,r3,r2
   1ca5c:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1ca60:	e0bffc17 	ldw	r2,-16(fp)
   1ca64:	10800e17 	ldw	r2,56(r2)
   1ca68:	10800058 	cmpnei	r2,r2,1
   1ca6c:	1000081e 	bne	r2,zero,1ca90 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   1ca70:	e0bffc17 	ldw	r2,-16(fp)
   1ca74:	10c00c17 	ldw	r3,48(r2)
   1ca78:	e0bffb17 	ldw	r2,-20(fp)
   1ca7c:	1885883a 	add	r2,r3,r2
   1ca80:	1007883a 	mov	r3,r2
   1ca84:	e0bffd17 	ldw	r2,-12(fp)
   1ca88:	18800025 	stbio	r2,0(r3)
   1ca8c:	00001306 	br	1cadc <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1ca90:	e0bffc17 	ldw	r2,-16(fp)
   1ca94:	10800e17 	ldw	r2,56(r2)
   1ca98:	10800098 	cmpnei	r2,r2,2
   1ca9c:	1000081e 	bne	r2,zero,1cac0 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   1caa0:	e0bffc17 	ldw	r2,-16(fp)
   1caa4:	10c00c17 	ldw	r3,48(r2)
   1caa8:	e0bffb17 	ldw	r2,-20(fp)
   1caac:	1885883a 	add	r2,r3,r2
   1cab0:	1007883a 	mov	r3,r2
   1cab4:	e0bffd17 	ldw	r2,-12(fp)
   1cab8:	1880002d 	sthio	r2,0(r3)
   1cabc:	00000706 	br	1cadc <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   1cac0:	e0bffc17 	ldw	r2,-16(fp)
   1cac4:	10c00c17 	ldw	r3,48(r2)
   1cac8:	e0bffb17 	ldw	r2,-20(fp)
   1cacc:	1885883a 	add	r2,r3,r2
   1cad0:	1007883a 	mov	r3,r2
   1cad4:	e0bffd17 	ldw	r2,-12(fp)
   1cad8:	18800035 	stwio	r2,0(r3)
	}

	return 0;
   1cadc:	0005883a 	mov	r2,zero
}
   1cae0:	e037883a 	mov	sp,fp
   1cae4:	df000017 	ldw	fp,0(sp)
   1cae8:	dec00104 	addi	sp,sp,4
   1caec:	f800283a 	ret

0001caf0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   1caf0:	defffd04 	addi	sp,sp,-12
   1caf4:	df000215 	stw	fp,8(sp)
   1caf8:	df000204 	addi	fp,sp,8
   1cafc:	e13ffe15 	stw	r4,-8(fp)
   1cb00:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   1cb04:	e0bffe17 	ldw	r2,-8(fp)
   1cb08:	10800a17 	ldw	r2,40(r2)
   1cb0c:	10800104 	addi	r2,r2,4
   1cb10:	1007883a 	mov	r3,r2
   1cb14:	e0bfff17 	ldw	r2,-4(fp)
   1cb18:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   1cb1c:	e0bffe17 	ldw	r2,-8(fp)
   1cb20:	10800a17 	ldw	r2,40(r2)
   1cb24:	10800104 	addi	r2,r2,4
   1cb28:	10800037 	ldwio	r2,0(r2)
   1cb2c:	1007883a 	mov	r3,r2
   1cb30:	e0bffe17 	ldw	r2,-8(fp)
   1cb34:	10c00c15 	stw	r3,48(r2)
	return 0;
   1cb38:	0005883a 	mov	r2,zero
}
   1cb3c:	e037883a 	mov	sp,fp
   1cb40:	df000017 	ldw	fp,0(sp)
   1cb44:	dec00104 	addi	sp,sp,4
   1cb48:	f800283a 	ret

0001cb4c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   1cb4c:	defffd04 	addi	sp,sp,-12
   1cb50:	df000215 	stw	fp,8(sp)
   1cb54:	dc000115 	stw	r16,4(sp)
   1cb58:	df000204 	addi	fp,sp,8
   1cb5c:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   1cb60:	e0bffe17 	ldw	r2,-8(fp)
   1cb64:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   1cb68:	e0bffe17 	ldw	r2,-8(fp)
   1cb6c:	10800a17 	ldw	r2,40(r2)
   1cb70:	1007883a 	mov	r3,r2
   1cb74:	00800044 	movi	r2,1
   1cb78:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   1cb7c:	e0bffe17 	ldw	r2,-8(fp)
   1cb80:	10c00b17 	ldw	r3,44(r2)
   1cb84:	e0bffe17 	ldw	r2,-8(fp)
   1cb88:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   1cb8c:	e0bffe17 	ldw	r2,-8(fp)
   1cb90:	14000b15 	stw	r16,44(r2)
	return 0;
   1cb94:	0005883a 	mov	r2,zero
}
   1cb98:	e6ffff04 	addi	sp,fp,-4
   1cb9c:	df000117 	ldw	fp,4(sp)
   1cba0:	dc000017 	ldw	r16,0(sp)
   1cba4:	dec00204 	addi	sp,sp,8
   1cba8:	f800283a 	ret

0001cbac <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   1cbac:	defffe04 	addi	sp,sp,-8
   1cbb0:	df000115 	stw	fp,4(sp)
   1cbb4:	df000104 	addi	fp,sp,4
   1cbb8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   1cbbc:	e0bfff17 	ldw	r2,-4(fp)
   1cbc0:	10800a17 	ldw	r2,40(r2)
   1cbc4:	10800304 	addi	r2,r2,12
   1cbc8:	10800037 	ldwio	r2,0(r2)
   1cbcc:	1080004c 	andi	r2,r2,1
}
   1cbd0:	e037883a 	mov	sp,fp
   1cbd4:	df000017 	ldw	fp,0(sp)
   1cbd8:	dec00104 	addi	sp,sp,4
   1cbdc:	f800283a 	ret

0001cbe0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   1cbe0:	defff704 	addi	sp,sp,-36
   1cbe4:	df000815 	stw	fp,32(sp)
   1cbe8:	dd400715 	stw	r21,28(sp)
   1cbec:	dd000615 	stw	r20,24(sp)
   1cbf0:	dcc00515 	stw	r19,20(sp)
   1cbf4:	dc800415 	stw	r18,16(sp)
   1cbf8:	dc400315 	stw	r17,12(sp)
   1cbfc:	dc000215 	stw	r16,8(sp)
   1cc00:	df000804 	addi	fp,sp,32
   1cc04:	e13ff815 	stw	r4,-32(fp)
   1cc08:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1cc0c:	e0bff917 	ldw	r2,-28(fp)
   1cc10:	10800058 	cmpnei	r2,r2,1
   1cc14:	1000031e 	bne	r2,zero,1cc24 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
   1cc18:	e0bff817 	ldw	r2,-32(fp)
   1cc1c:	14400c17 	ldw	r17,48(r2)
   1cc20:	00000206 	br	1cc2c <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
   1cc24:	e0bff817 	ldw	r2,-32(fp)
   1cc28:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
   1cc2c:	e0bff817 	ldw	r2,-32(fp)
   1cc30:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1cc34:	e0bff817 	ldw	r2,-32(fp)
   1cc38:	10800e17 	ldw	r2,56(r2)
   1cc3c:	10800098 	cmpnei	r2,r2,2
   1cc40:	1000031e 	bne	r2,zero,1cc50 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
   1cc44:	8405883a 	add	r2,r16,r16
   1cc48:	1021883a 	mov	r16,r2
   1cc4c:	00000306 	br	1cc5c <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
   1cc50:	8405883a 	add	r2,r16,r16
   1cc54:	1085883a 	add	r2,r2,r2
   1cc58:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   1cc5c:	e0bff817 	ldw	r2,-32(fp)
   1cc60:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1cc64:	e0bff817 	ldw	r2,-32(fp)
   1cc68:	10800d17 	ldw	r2,52(r2)
   1cc6c:	1000111e 	bne	r2,zero,1ccb4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1cc70:	e0bff817 	ldw	r2,-32(fp)
   1cc74:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
   1cc78:	0029883a 	mov	r20,zero
   1cc7c:	00000b06 	br	1ccac <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
   1cc80:	0027883a 	mov	r19,zero
   1cc84:	00000406 	br	1cc98 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
   1cc88:	9c45883a 	add	r2,r19,r17
   1cc8c:	0007883a 	mov	r3,zero
   1cc90:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   1cc94:	9cc00104 	addi	r19,r19,4
   1cc98:	9c3ffb36 	bltu	r19,r16,1cc88 <__alt_data_end+0xf001cc88>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   1cc9c:	00800044 	movi	r2,1
   1cca0:	1544983a 	sll	r2,r2,r21
   1cca4:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   1cca8:	a5000044 	addi	r20,r20,1
   1ccac:	a4bff436 	bltu	r20,r18,1cc80 <__alt_data_end+0xf001cc80>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   1ccb0:	00000a06 	br	1ccdc <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   1ccb4:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
   1ccb8:	0021883a 	mov	r16,zero
   1ccbc:	00000506 	br	1ccd4 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
   1ccc0:	8005883a 	mov	r2,r16
   1ccc4:	1445883a 	add	r2,r2,r17
   1ccc8:	0007883a 	mov	r3,zero
   1cccc:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   1ccd0:	84000104 	addi	r16,r16,4
   1ccd4:	8005883a 	mov	r2,r16
   1ccd8:	14bff936 	bltu	r2,r18,1ccc0 <__alt_data_end+0xf001ccc0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   1ccdc:	0001883a 	nop
   1cce0:	e6fffa04 	addi	sp,fp,-24
   1cce4:	df000617 	ldw	fp,24(sp)
   1cce8:	dd400517 	ldw	r21,20(sp)
   1ccec:	dd000417 	ldw	r20,16(sp)
   1ccf0:	dcc00317 	ldw	r19,12(sp)
   1ccf4:	dc800217 	ldw	r18,8(sp)
   1ccf8:	dc400117 	ldw	r17,4(sp)
   1ccfc:	dc000017 	ldw	r16,0(sp)
   1cd00:	dec00704 	addi	sp,sp,28
   1cd04:	f800283a 	ret

0001cd08 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   1cd08:	defff304 	addi	sp,sp,-52
   1cd0c:	df000c15 	stw	fp,48(sp)
   1cd10:	ddc00b15 	stw	r23,44(sp)
   1cd14:	dd800a15 	stw	r22,40(sp)
   1cd18:	dd400915 	stw	r21,36(sp)
   1cd1c:	dd000815 	stw	r20,32(sp)
   1cd20:	dcc00715 	stw	r19,28(sp)
   1cd24:	dc800615 	stw	r18,24(sp)
   1cd28:	dc400515 	stw	r17,20(sp)
   1cd2c:	dc000415 	stw	r16,16(sp)
   1cd30:	df000c04 	addi	fp,sp,48
   1cd34:	e13ff415 	stw	r4,-48(fp)
   1cd38:	e17ff515 	stw	r5,-44(fp)
   1cd3c:	e1bff615 	stw	r6,-40(fp)
   1cd40:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1cd44:	e0bff417 	ldw	r2,-48(fp)
   1cd48:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1cd4c:	e0bff417 	ldw	r2,-48(fp)
   1cd50:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   1cd54:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
   1cd58:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
   1cd5c:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
   1cd60:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
   1cd64:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   1cd68:	a580032e 	bgeu	r20,r22,1cd78 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
   1cd6c:	b02b883a 	mov	r21,r22
		l_x = r_x;
   1cd70:	a02d883a 	mov	r22,r20
		r_x = temp;
   1cd74:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
   1cd78:	9c40032e 	bgeu	r19,r17,1cd88 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
   1cd7c:	882b883a 	mov	r21,r17
		t_y = b_y;
   1cd80:	9823883a 	mov	r17,r19
		b_y = temp;
   1cd84:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   1cd88:	b480892e 	bgeu	r22,r18,1cfb0 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
   1cd8c:	8c00882e 	bgeu	r17,r16,1cfb0 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1cd90:	a4800136 	bltu	r20,r18,1cd98 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
   1cd94:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1cd98:	9c000136 	bltu	r19,r16,1cda0 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
   1cd9c:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1cda0:	e0800317 	ldw	r2,12(fp)
   1cda4:	10800058 	cmpnei	r2,r2,1
   1cda8:	1000031e 	bne	r2,zero,1cdb8 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
   1cdac:	e0bff417 	ldw	r2,-48(fp)
   1cdb0:	14000c17 	ldw	r16,48(r2)
   1cdb4:	00000206 	br	1cdc0 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
   1cdb8:	e0bff417 	ldw	r2,-48(fp)
   1cdbc:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1cdc0:	e0bff417 	ldw	r2,-48(fp)
   1cdc4:	10800d17 	ldw	r2,52(r2)
   1cdc8:	10003c1e 	bne	r2,zero,1cebc <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1cdcc:	e0bff417 	ldw	r2,-48(fp)
   1cdd0:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   1cdd4:	8d44983a 	sll	r2,r17,r21
   1cdd8:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1cddc:	e0bff417 	ldw	r2,-48(fp)
   1cde0:	10800e17 	ldw	r2,56(r2)
   1cde4:	10800058 	cmpnei	r2,r2,1
   1cde8:	10000f1e 	bne	r2,zero,1ce28 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
   1cdec:	8825883a 	mov	r18,r17
   1cdf0:	00000b06 	br	1ce20 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
   1cdf4:	b023883a 	mov	r17,r22
   1cdf8:	00000406 	br	1ce0c <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
   1cdfc:	8c05883a 	add	r2,r17,r16
   1ce00:	b807883a 	mov	r3,r23
   1ce04:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1ce08:	8c400044 	addi	r17,r17,1
   1ce0c:	a47ffb2e 	bgeu	r20,r17,1cdfc <__alt_data_end+0xf001cdfc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   1ce10:	00800044 	movi	r2,1
   1ce14:	1544983a 	sll	r2,r2,r21
   1ce18:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1ce1c:	94800044 	addi	r18,r18,1
   1ce20:	9cbff42e 	bgeu	r19,r18,1cdf4 <__alt_data_end+0xf001cdf4>
   1ce24:	00006306 	br	1cfb4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1ce28:	e0bff417 	ldw	r2,-48(fp)
   1ce2c:	10800e17 	ldw	r2,56(r2)
   1ce30:	10800098 	cmpnei	r2,r2,2
   1ce34:	1000101e 	bne	r2,zero,1ce78 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
   1ce38:	8825883a 	mov	r18,r17
   1ce3c:	00000c06 	br	1ce70 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
   1ce40:	b023883a 	mov	r17,r22
   1ce44:	00000506 	br	1ce5c <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   1ce48:	8c45883a 	add	r2,r17,r17
   1ce4c:	1405883a 	add	r2,r2,r16
   1ce50:	b807883a 	mov	r3,r23
   1ce54:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1ce58:	8c400044 	addi	r17,r17,1
   1ce5c:	a47ffa2e 	bgeu	r20,r17,1ce48 <__alt_data_end+0xf001ce48>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   1ce60:	00800044 	movi	r2,1
   1ce64:	1544983a 	sll	r2,r2,r21
   1ce68:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1ce6c:	94800044 	addi	r18,r18,1
   1ce70:	9cbff32e 	bgeu	r19,r18,1ce40 <__alt_data_end+0xf001ce40>
   1ce74:	00004f06 	br	1cfb4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1ce78:	8825883a 	mov	r18,r17
   1ce7c:	00000d06 	br	1ceb4 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
   1ce80:	b023883a 	mov	r17,r22
   1ce84:	00000606 	br	1cea0 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1ce88:	8c45883a 	add	r2,r17,r17
   1ce8c:	1085883a 	add	r2,r2,r2
   1ce90:	1405883a 	add	r2,r2,r16
   1ce94:	b807883a 	mov	r3,r23
   1ce98:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1ce9c:	8c400044 	addi	r17,r17,1
   1cea0:	a47ff92e 	bgeu	r20,r17,1ce88 <__alt_data_end+0xf001ce88>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   1cea4:	00800044 	movi	r2,1
   1cea8:	1544983a 	sll	r2,r2,r21
   1ceac:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1ceb0:	94800044 	addi	r18,r18,1
   1ceb4:	9cbff22e 	bgeu	r19,r18,1ce80 <__alt_data_end+0xf001ce80>
   1ceb8:	00003e06 	br	1cfb4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1cebc:	e0bff417 	ldw	r2,-48(fp)
   1cec0:	10800e17 	ldw	r2,56(r2)
   1cec4:	10800058 	cmpnei	r2,r2,1
   1cec8:	10000f1e 	bne	r2,zero,1cf08 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
   1cecc:	8c85383a 	mul	r2,r17,r18
   1ced0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1ced4:	882b883a 	mov	r21,r17
   1ced8:	00000906 	br	1cf00 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
   1cedc:	b023883a 	mov	r17,r22
   1cee0:	00000406 	br	1cef4 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
   1cee4:	8c05883a 	add	r2,r17,r16
   1cee8:	b807883a 	mov	r3,r23
   1ceec:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1cef0:	8c400044 	addi	r17,r17,1
   1cef4:	a47ffb2e 	bgeu	r20,r17,1cee4 <__alt_data_end+0xf001cee4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   1cef8:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1cefc:	ad400044 	addi	r21,r21,1
   1cf00:	9d7ff62e 	bgeu	r19,r21,1cedc <__alt_data_end+0xf001cedc>
   1cf04:	00002b06 	br	1cfb4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1cf08:	e0bff417 	ldw	r2,-48(fp)
   1cf0c:	10800e17 	ldw	r2,56(r2)
   1cf10:	10800098 	cmpnei	r2,r2,2
   1cf14:	1000121e 	bne	r2,zero,1cf60 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
   1cf18:	9485883a 	add	r2,r18,r18
   1cf1c:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   1cf20:	8c85383a 	mul	r2,r17,r18
   1cf24:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1cf28:	882b883a 	mov	r21,r17
   1cf2c:	00000a06 	br	1cf58 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
   1cf30:	b023883a 	mov	r17,r22
   1cf34:	00000506 	br	1cf4c <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   1cf38:	8c45883a 	add	r2,r17,r17
   1cf3c:	1405883a 	add	r2,r2,r16
   1cf40:	b807883a 	mov	r3,r23
   1cf44:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1cf48:	8c400044 	addi	r17,r17,1
   1cf4c:	a47ffa2e 	bgeu	r20,r17,1cf38 <__alt_data_end+0xf001cf38>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   1cf50:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1cf54:	ad400044 	addi	r21,r21,1
   1cf58:	9d7ff52e 	bgeu	r19,r21,1cf30 <__alt_data_end+0xf001cf30>
   1cf5c:	00001506 	br	1cfb4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1cf60:	9485883a 	add	r2,r18,r18
   1cf64:	1085883a 	add	r2,r2,r2
   1cf68:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   1cf6c:	8c85383a 	mul	r2,r17,r18
   1cf70:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1cf74:	882b883a 	mov	r21,r17
   1cf78:	00000b06 	br	1cfa8 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
   1cf7c:	b023883a 	mov	r17,r22
   1cf80:	00000606 	br	1cf9c <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1cf84:	8c45883a 	add	r2,r17,r17
   1cf88:	1085883a 	add	r2,r2,r2
   1cf8c:	1405883a 	add	r2,r2,r16
   1cf90:	b807883a 	mov	r3,r23
   1cf94:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1cf98:	8c400044 	addi	r17,r17,1
   1cf9c:	a47ff92e 	bgeu	r20,r17,1cf84 <__alt_data_end+0xf001cf84>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   1cfa0:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1cfa4:	ad400044 	addi	r21,r21,1
   1cfa8:	9d7ff42e 	bgeu	r19,r21,1cf7c <__alt_data_end+0xf001cf7c>
   1cfac:	00000106 	br	1cfb4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1cfb0:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
   1cfb4:	e6fff804 	addi	sp,fp,-32
   1cfb8:	df000817 	ldw	fp,32(sp)
   1cfbc:	ddc00717 	ldw	r23,28(sp)
   1cfc0:	dd800617 	ldw	r22,24(sp)
   1cfc4:	dd400517 	ldw	r21,20(sp)
   1cfc8:	dd000417 	ldw	r20,16(sp)
   1cfcc:	dcc00317 	ldw	r19,12(sp)
   1cfd0:	dc800217 	ldw	r18,8(sp)
   1cfd4:	dc400117 	ldw	r17,4(sp)
   1cfd8:	dc000017 	ldw	r16,0(sp)
   1cfdc:	dec00904 	addi	sp,sp,36
   1cfe0:	f800283a 	ret

0001cfe4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   1cfe4:	defff404 	addi	sp,sp,-48
   1cfe8:	df000b15 	stw	fp,44(sp)
   1cfec:	dd800a15 	stw	r22,40(sp)
   1cff0:	dd400915 	stw	r21,36(sp)
   1cff4:	dd000815 	stw	r20,32(sp)
   1cff8:	dcc00715 	stw	r19,28(sp)
   1cffc:	dc800615 	stw	r18,24(sp)
   1d000:	dc400515 	stw	r17,20(sp)
   1d004:	dc000415 	stw	r16,16(sp)
   1d008:	df000b04 	addi	fp,sp,44
   1d00c:	e13ff515 	stw	r4,-44(fp)
   1d010:	e17ff615 	stw	r5,-40(fp)
   1d014:	e1bff715 	stw	r6,-36(fp)
   1d018:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1d01c:	e0bff517 	ldw	r2,-44(fp)
   1d020:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1d024:	e0bff517 	ldw	r2,-44(fp)
   1d028:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   1d02c:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
   1d030:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
   1d034:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
   1d038:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   1d03c:	9c40032e 	bgeu	r19,r17,1d04c <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
   1d040:	882d883a 	mov	r22,r17
		l_x = r_x;
   1d044:	9823883a 	mov	r17,r19
		r_x = temp;
   1d048:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   1d04c:	8c805d2e 	bgeu	r17,r18,1d1c4 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
   1d050:	a4005c2e 	bgeu	r20,r16,1d1c4 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1d054:	9c800136 	bltu	r19,r18,1d05c <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
   1d058:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1d05c:	e0800217 	ldw	r2,8(fp)
   1d060:	10800058 	cmpnei	r2,r2,1
   1d064:	1000031e 	bne	r2,zero,1d074 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   1d068:	e0bff517 	ldw	r2,-44(fp)
   1d06c:	14000c17 	ldw	r16,48(r2)
   1d070:	00000206 	br	1d07c <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   1d074:	e0bff517 	ldw	r2,-44(fp)
   1d078:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1d07c:	e0bff517 	ldw	r2,-44(fp)
   1d080:	10800d17 	ldw	r2,52(r2)
   1d084:	1000231e 	bne	r2,zero,1d114 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1d088:	e0bff517 	ldw	r2,-44(fp)
   1d08c:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
   1d090:	a484983a 	sll	r2,r20,r18
   1d094:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d098:	e0bff517 	ldw	r2,-44(fp)
   1d09c:	10800e17 	ldw	r2,56(r2)
   1d0a0:	10800058 	cmpnei	r2,r2,1
   1d0a4:	1000071e 	bne	r2,zero,1d0c4 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
   1d0a8:	00000406 	br	1d0bc <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
   1d0ac:	8c05883a 	add	r2,r17,r16
   1d0b0:	a807883a 	mov	r3,r21
   1d0b4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   1d0b8:	8c400044 	addi	r17,r17,1
   1d0bc:	9c7ffb2e 	bgeu	r19,r17,1d0ac <__alt_data_end+0xf001d0ac>
   1d0c0:	00004106 	br	1d1c8 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d0c4:	e0bff517 	ldw	r2,-44(fp)
   1d0c8:	10800e17 	ldw	r2,56(r2)
   1d0cc:	10800098 	cmpnei	r2,r2,2
   1d0d0:	10000e1e 	bne	r2,zero,1d10c <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
   1d0d4:	00000506 	br	1d0ec <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   1d0d8:	8c45883a 	add	r2,r17,r17
   1d0dc:	1405883a 	add	r2,r2,r16
   1d0e0:	a807883a 	mov	r3,r21
   1d0e4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   1d0e8:	8c400044 	addi	r17,r17,1
   1d0ec:	9c7ffa2e 	bgeu	r19,r17,1d0d8 <__alt_data_end+0xf001d0d8>
   1d0f0:	00003506 	br	1d1c8 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   1d0f4:	8c45883a 	add	r2,r17,r17
   1d0f8:	1085883a 	add	r2,r2,r2
   1d0fc:	1405883a 	add	r2,r2,r16
   1d100:	a807883a 	mov	r3,r21
   1d104:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1d108:	8c400044 	addi	r17,r17,1
   1d10c:	9c7ff92e 	bgeu	r19,r17,1d0f4 <__alt_data_end+0xf001d0f4>
   1d110:	00002d06 	br	1d1c8 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d114:	e0bff517 	ldw	r2,-44(fp)
   1d118:	10800e17 	ldw	r2,56(r2)
   1d11c:	10800058 	cmpnei	r2,r2,1
   1d120:	1000091e 	bne	r2,zero,1d148 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
   1d124:	a485383a 	mul	r2,r20,r18
   1d128:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   1d12c:	00000406 	br	1d140 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   1d130:	8c05883a 	add	r2,r17,r16
   1d134:	a807883a 	mov	r3,r21
   1d138:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   1d13c:	8c400044 	addi	r17,r17,1
   1d140:	9c7ffb2e 	bgeu	r19,r17,1d130 <__alt_data_end+0xf001d130>
   1d144:	00002006 	br	1d1c8 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d148:	e0bff517 	ldw	r2,-44(fp)
   1d14c:	10800e17 	ldw	r2,56(r2)
   1d150:	10800098 	cmpnei	r2,r2,2
   1d154:	10000c1e 	bne	r2,zero,1d188 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
   1d158:	9485883a 	add	r2,r18,r18
   1d15c:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   1d160:	a485383a 	mul	r2,r20,r18
   1d164:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   1d168:	00000506 	br	1d180 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   1d16c:	8c45883a 	add	r2,r17,r17
   1d170:	1405883a 	add	r2,r2,r16
   1d174:	a807883a 	mov	r3,r21
   1d178:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   1d17c:	8c400044 	addi	r17,r17,1
   1d180:	9c7ffa2e 	bgeu	r19,r17,1d16c <__alt_data_end+0xf001d16c>
   1d184:	00001006 	br	1d1c8 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1d188:	9485883a 	add	r2,r18,r18
   1d18c:	1085883a 	add	r2,r2,r2
   1d190:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   1d194:	a485383a 	mul	r2,r20,r18
   1d198:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   1d19c:	00000606 	br	1d1b8 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   1d1a0:	8c45883a 	add	r2,r17,r17
   1d1a4:	1085883a 	add	r2,r2,r2
   1d1a8:	1405883a 	add	r2,r2,r16
   1d1ac:	a807883a 	mov	r3,r21
   1d1b0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   1d1b4:	8c400044 	addi	r17,r17,1
   1d1b8:	9c7ff92e 	bgeu	r19,r17,1d1a0 <__alt_data_end+0xf001d1a0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
   1d1bc:	84a1883a 	add	r16,r16,r18
   1d1c0:	00000106 	br	1d1c8 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1d1c4:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   1d1c8:	e6fff904 	addi	sp,fp,-28
   1d1cc:	df000717 	ldw	fp,28(sp)
   1d1d0:	dd800617 	ldw	r22,24(sp)
   1d1d4:	dd400517 	ldw	r21,20(sp)
   1d1d8:	dd000417 	ldw	r20,16(sp)
   1d1dc:	dcc00317 	ldw	r19,12(sp)
   1d1e0:	dc800217 	ldw	r18,8(sp)
   1d1e4:	dc400117 	ldw	r17,4(sp)
   1d1e8:	dc000017 	ldw	r16,0(sp)
   1d1ec:	dec00804 	addi	sp,sp,32
   1d1f0:	f800283a 	ret

0001d1f4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   1d1f4:	defff404 	addi	sp,sp,-48
   1d1f8:	df000b15 	stw	fp,44(sp)
   1d1fc:	dd800a15 	stw	r22,40(sp)
   1d200:	dd400915 	stw	r21,36(sp)
   1d204:	dd000815 	stw	r20,32(sp)
   1d208:	dcc00715 	stw	r19,28(sp)
   1d20c:	dc800615 	stw	r18,24(sp)
   1d210:	dc400515 	stw	r17,20(sp)
   1d214:	dc000415 	stw	r16,16(sp)
   1d218:	df000b04 	addi	fp,sp,44
   1d21c:	e13ff515 	stw	r4,-44(fp)
   1d220:	e17ff615 	stw	r5,-40(fp)
   1d224:	e1bff715 	stw	r6,-36(fp)
   1d228:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1d22c:	e0bff517 	ldw	r2,-44(fp)
   1d230:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1d234:	e0bff517 	ldw	r2,-44(fp)
   1d238:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
   1d23c:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
   1d240:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
   1d244:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
   1d248:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   1d24c:	9d00032e 	bgeu	r19,r20,1d25c <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
   1d250:	a02b883a 	mov	r21,r20
		t_y = b_y;
   1d254:	9829883a 	mov	r20,r19
		b_y = temp;
   1d258:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   1d25c:	94406c2e 	bgeu	r18,r17,1d410 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
   1d260:	a4006b2e 	bgeu	r20,r16,1d410 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1d264:	9c000136 	bltu	r19,r16,1d26c <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
   1d268:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1d26c:	e0800217 	ldw	r2,8(fp)
   1d270:	10800058 	cmpnei	r2,r2,1
   1d274:	1000031e 	bne	r2,zero,1d284 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   1d278:	e0bff517 	ldw	r2,-44(fp)
   1d27c:	14000c17 	ldw	r16,48(r2)
   1d280:	00000206 	br	1d28c <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   1d284:	e0bff517 	ldw	r2,-44(fp)
   1d288:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1d28c:	e0bff517 	ldw	r2,-44(fp)
   1d290:	10800d17 	ldw	r2,52(r2)
   1d294:	1000301e 	bne	r2,zero,1d358 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1d298:	e0bff517 	ldw	r2,-44(fp)
   1d29c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   1d2a0:	a544983a 	sll	r2,r20,r21
   1d2a4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d2a8:	e0bff517 	ldw	r2,-44(fp)
   1d2ac:	10800e17 	ldw	r2,56(r2)
   1d2b0:	10800058 	cmpnei	r2,r2,1
   1d2b4:	10000b1e 	bne	r2,zero,1d2e4 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
   1d2b8:	a023883a 	mov	r17,r20
   1d2bc:	00000706 	br	1d2dc <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1d2c0:	9405883a 	add	r2,r18,r16
   1d2c4:	b007883a 	mov	r3,r22
   1d2c8:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   1d2cc:	00800044 	movi	r2,1
   1d2d0:	1544983a 	sll	r2,r2,r21
   1d2d4:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1d2d8:	8c400044 	addi	r17,r17,1
   1d2dc:	9c7ff82e 	bgeu	r19,r17,1d2c0 <__alt_data_end+0xf001d2c0>
   1d2e0:	00004c06 	br	1d414 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d2e4:	e0bff517 	ldw	r2,-44(fp)
   1d2e8:	10800e17 	ldw	r2,56(r2)
   1d2ec:	10800098 	cmpnei	r2,r2,2
   1d2f0:	10000c1e 	bne	r2,zero,1d324 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
   1d2f4:	a023883a 	mov	r17,r20
   1d2f8:	00000806 	br	1d31c <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   1d2fc:	9485883a 	add	r2,r18,r18
   1d300:	1405883a 	add	r2,r2,r16
   1d304:	b007883a 	mov	r3,r22
   1d308:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   1d30c:	00800044 	movi	r2,1
   1d310:	1544983a 	sll	r2,r2,r21
   1d314:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1d318:	8c400044 	addi	r17,r17,1
   1d31c:	9c7ff72e 	bgeu	r19,r17,1d2fc <__alt_data_end+0xf001d2fc>
   1d320:	00003c06 	br	1d414 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1d324:	a023883a 	mov	r17,r20
   1d328:	00000906 	br	1d350 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   1d32c:	9485883a 	add	r2,r18,r18
   1d330:	1085883a 	add	r2,r2,r2
   1d334:	1405883a 	add	r2,r2,r16
   1d338:	b007883a 	mov	r3,r22
   1d33c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   1d340:	00800044 	movi	r2,1
   1d344:	1544983a 	sll	r2,r2,r21
   1d348:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1d34c:	8c400044 	addi	r17,r17,1
   1d350:	9c7ff62e 	bgeu	r19,r17,1d32c <__alt_data_end+0xf001d32c>
   1d354:	00002f06 	br	1d414 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1d358:	e0bff517 	ldw	r2,-44(fp)
   1d35c:	10800e17 	ldw	r2,56(r2)
   1d360:	10800058 	cmpnei	r2,r2,1
   1d364:	10000a1e 	bne	r2,zero,1d390 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
   1d368:	a445383a 	mul	r2,r20,r17
   1d36c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d370:	00000506 	br	1d388 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1d374:	9405883a 	add	r2,r18,r16
   1d378:	b007883a 	mov	r3,r22
   1d37c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   1d380:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d384:	a5000044 	addi	r20,r20,1
   1d388:	9d3ffa2e 	bgeu	r19,r20,1d374 <__alt_data_end+0xf001d374>
   1d38c:	00002106 	br	1d414 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1d390:	e0bff517 	ldw	r2,-44(fp)
   1d394:	10800e17 	ldw	r2,56(r2)
   1d398:	10800098 	cmpnei	r2,r2,2
   1d39c:	10000d1e 	bne	r2,zero,1d3d4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
   1d3a0:	8c45883a 	add	r2,r17,r17
   1d3a4:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   1d3a8:	a445383a 	mul	r2,r20,r17
   1d3ac:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d3b0:	00000606 	br	1d3cc <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   1d3b4:	9485883a 	add	r2,r18,r18
   1d3b8:	1405883a 	add	r2,r2,r16
   1d3bc:	b007883a 	mov	r3,r22
   1d3c0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   1d3c4:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d3c8:	a5000044 	addi	r20,r20,1
   1d3cc:	9d3ff92e 	bgeu	r19,r20,1d3b4 <__alt_data_end+0xf001d3b4>
   1d3d0:	00001006 	br	1d414 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1d3d4:	8c45883a 	add	r2,r17,r17
   1d3d8:	1085883a 	add	r2,r2,r2
   1d3dc:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   1d3e0:	a445383a 	mul	r2,r20,r17
   1d3e4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1d3e8:	00000706 	br	1d408 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   1d3ec:	9485883a 	add	r2,r18,r18
   1d3f0:	1085883a 	add	r2,r2,r2
   1d3f4:	1405883a 	add	r2,r2,r16
   1d3f8:	b007883a 	mov	r3,r22
   1d3fc:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   1d400:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1d404:	a5000044 	addi	r20,r20,1
   1d408:	9d3ff82e 	bgeu	r19,r20,1d3ec <__alt_data_end+0xf001d3ec>
   1d40c:	00000106 	br	1d414 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1d410:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   1d414:	e6fff904 	addi	sp,fp,-28
   1d418:	df000717 	ldw	fp,28(sp)
   1d41c:	dd800617 	ldw	r22,24(sp)
   1d420:	dd400517 	ldw	r21,20(sp)
   1d424:	dd000417 	ldw	r20,16(sp)
   1d428:	dcc00317 	ldw	r19,12(sp)
   1d42c:	dc800217 	ldw	r18,8(sp)
   1d430:	dc400117 	ldw	r17,4(sp)
   1d434:	dc000017 	ldw	r16,0(sp)
   1d438:	dec00804 	addi	sp,sp,32
   1d43c:	f800283a 	ret

0001d440 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   1d440:	defff804 	addi	sp,sp,-32
   1d444:	dfc00715 	stw	ra,28(sp)
   1d448:	df000615 	stw	fp,24(sp)
   1d44c:	df000604 	addi	fp,sp,24
   1d450:	e13ffc15 	stw	r4,-16(fp)
   1d454:	e17ffd15 	stw	r5,-12(fp)
   1d458:	e1bffe15 	stw	r6,-8(fp)
   1d45c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   1d460:	e0800417 	ldw	r2,16(fp)
   1d464:	d8800115 	stw	r2,4(sp)
   1d468:	e0800317 	ldw	r2,12(fp)
   1d46c:	d8800015 	stw	r2,0(sp)
   1d470:	e1fffe17 	ldw	r7,-8(fp)
   1d474:	e1bfff17 	ldw	r6,-4(fp)
   1d478:	e17ffd17 	ldw	r5,-12(fp)
   1d47c:	e13ffc17 	ldw	r4,-16(fp)
   1d480:	001cfe40 	call	1cfe4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   1d484:	e0800417 	ldw	r2,16(fp)
   1d488:	d8800115 	stw	r2,4(sp)
   1d48c:	e0800317 	ldw	r2,12(fp)
   1d490:	d8800015 	stw	r2,0(sp)
   1d494:	e1c00217 	ldw	r7,8(fp)
   1d498:	e1bfff17 	ldw	r6,-4(fp)
   1d49c:	e17ffd17 	ldw	r5,-12(fp)
   1d4a0:	e13ffc17 	ldw	r4,-16(fp)
   1d4a4:	001cfe40 	call	1cfe4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   1d4a8:	e0800417 	ldw	r2,16(fp)
   1d4ac:	d8800115 	stw	r2,4(sp)
   1d4b0:	e0800317 	ldw	r2,12(fp)
   1d4b4:	d8800015 	stw	r2,0(sp)
   1d4b8:	e1c00217 	ldw	r7,8(fp)
   1d4bc:	e1bffe17 	ldw	r6,-8(fp)
   1d4c0:	e17ffd17 	ldw	r5,-12(fp)
   1d4c4:	e13ffc17 	ldw	r4,-16(fp)
   1d4c8:	001d1f40 	call	1d1f4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   1d4cc:	e0800417 	ldw	r2,16(fp)
   1d4d0:	d8800115 	stw	r2,4(sp)
   1d4d4:	e0800317 	ldw	r2,12(fp)
   1d4d8:	d8800015 	stw	r2,0(sp)
   1d4dc:	e1c00217 	ldw	r7,8(fp)
   1d4e0:	e1bffe17 	ldw	r6,-8(fp)
   1d4e4:	e17fff17 	ldw	r5,-4(fp)
   1d4e8:	e13ffc17 	ldw	r4,-16(fp)
   1d4ec:	001d1f40 	call	1d1f4 <alt_up_pixel_buffer_dma_draw_vline>
}
   1d4f0:	0001883a 	nop
   1d4f4:	e037883a 	mov	sp,fp
   1d4f8:	dfc00117 	ldw	ra,4(sp)
   1d4fc:	df000017 	ldw	fp,0(sp)
   1d500:	dec00204 	addi	sp,sp,8
   1d504:	f800283a 	ret

0001d508 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   1d508:	deffff04 	addi	sp,sp,-4
   1d50c:	df000015 	stw	fp,0(sp)
   1d510:	d839883a 	mov	fp,sp
   1d514:	2005883a 	mov	r2,r4
   1d518:	3007883a 	mov	r3,r6
   1d51c:	3809883a 	mov	r4,r7
   1d520:	e1800117 	ldw	r6,4(fp)
   1d524:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
   1d528:	3800051e 	bne	r7,zero,1d540 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   1d52c:	2909383a 	mul	r4,r5,r4
   1d530:	20c7883a 	add	r3,r4,r3
   1d534:	1885883a 	add	r2,r3,r2
   1d538:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   1d53c:	00000e06 	br	1d578 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
   1d540:	39c00058 	cmpnei	r7,r7,1
   1d544:	3800061e 	bne	r7,zero,1d560 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   1d548:	2909383a 	mul	r4,r5,r4
   1d54c:	20c7883a 	add	r3,r4,r3
   1d550:	18c7883a 	add	r3,r3,r3
   1d554:	1885883a 	add	r2,r3,r2
   1d558:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   1d55c:	00000606 	br	1d578 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   1d560:	2909383a 	mul	r4,r5,r4
   1d564:	20c7883a 	add	r3,r4,r3
   1d568:	18c7883a 	add	r3,r3,r3
   1d56c:	18c7883a 	add	r3,r3,r3
   1d570:	1885883a 	add	r2,r3,r2
   1d574:	11800035 	stwio	r6,0(r2)
}
   1d578:	0001883a 	nop
   1d57c:	e037883a 	mov	sp,fp
   1d580:	df000017 	ldw	fp,0(sp)
   1d584:	dec00104 	addi	sp,sp,4
   1d588:	f800283a 	ret

0001d58c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   1d58c:	deffeb04 	addi	sp,sp,-84
   1d590:	dfc01415 	stw	ra,80(sp)
   1d594:	df001315 	stw	fp,76(sp)
   1d598:	ddc01215 	stw	r23,72(sp)
   1d59c:	dd801115 	stw	r22,68(sp)
   1d5a0:	dd401015 	stw	r21,64(sp)
   1d5a4:	dd000f15 	stw	r20,60(sp)
   1d5a8:	dcc00e15 	stw	r19,56(sp)
   1d5ac:	dc800d15 	stw	r18,52(sp)
   1d5b0:	dc400c15 	stw	r17,48(sp)
   1d5b4:	dc000b15 	stw	r16,44(sp)
   1d5b8:	df001304 	addi	fp,sp,76
   1d5bc:	e13fef15 	stw	r4,-68(fp)
   1d5c0:	e17ff015 	stw	r5,-64(fp)
   1d5c4:	e1bff115 	stw	r6,-60(fp)
   1d5c8:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
   1d5cc:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
   1d5d0:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
   1d5d4:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
   1d5d8:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   1d5dc:	a4c5c83a 	sub	r2,r20,r19
   1d5e0:	1000010e 	bge	r2,zero,1d5e8 <alt_up_pixel_buffer_dma_draw_line+0x5c>
   1d5e4:	0085c83a 	sub	r2,zero,r2
   1d5e8:	1007883a 	mov	r3,r2
   1d5ec:	9445c83a 	sub	r2,r18,r17
   1d5f0:	1000010e 	bge	r2,zero,1d5f8 <alt_up_pixel_buffer_dma_draw_line+0x6c>
   1d5f4:	0085c83a 	sub	r2,zero,r2
   1d5f8:	10c4803a 	cmplt	r2,r2,r3
   1d5fc:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   1d600:	e0bfef17 	ldw	r2,-68(fp)
   1d604:	10800e17 	ldw	r2,56(r2)
   1d608:	10800060 	cmpeqi	r2,r2,1
   1d60c:	1000081e 	bne	r2,zero,1d630 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   1d610:	e0bfef17 	ldw	r2,-68(fp)
   1d614:	10800e17 	ldw	r2,56(r2)
   1d618:	10800098 	cmpnei	r2,r2,2
   1d61c:	1000021e 	bne	r2,zero,1d628 <alt_up_pixel_buffer_dma_draw_line+0x9c>
   1d620:	00800044 	movi	r2,1
   1d624:	00000306 	br	1d634 <alt_up_pixel_buffer_dma_draw_line+0xa8>
   1d628:	00800084 	movi	r2,2
   1d62c:	00000106 	br	1d634 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   1d630:	0005883a 	mov	r2,zero
   1d634:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
   1d638:	e0800317 	ldw	r2,12(fp)
   1d63c:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   1d640:	e0bfef17 	ldw	r2,-68(fp)
   1d644:	10800d17 	ldw	r2,52(r2)
   1d648:	1000071e 	bne	r2,zero,1d668 <alt_up_pixel_buffer_dma_draw_line+0xdc>
   1d64c:	e0bfef17 	ldw	r2,-68(fp)
   1d650:	10801317 	ldw	r2,76(r2)
   1d654:	e0fff417 	ldw	r3,-48(fp)
   1d658:	10c5c83a 	sub	r2,r2,r3
   1d65c:	00c00044 	movi	r3,1
   1d660:	1884983a 	sll	r2,r3,r2
   1d664:	00000206 	br	1d670 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   1d668:	e0bfef17 	ldw	r2,-68(fp)
   1d66c:	10800f17 	ldw	r2,60(r2)
   1d670:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
   1d674:	e0800417 	ldw	r2,16(fp)
   1d678:	10800058 	cmpnei	r2,r2,1
   1d67c:	1000031e 	bne	r2,zero,1d68c <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
   1d680:	e0bfef17 	ldw	r2,-68(fp)
   1d684:	15c00c17 	ldw	r23,48(r2)
   1d688:	00000206 	br	1d694 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   1d68c:	e0bfef17 	ldw	r2,-68(fp)
   1d690:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
   1d694:	e0bff307 	ldb	r2,-52(fp)
   1d698:	0080060e 	bge	zero,r2,1d6b4 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
   1d69c:	8821883a 	mov	r16,r17
		x_0 = y_0;
   1d6a0:	9823883a 	mov	r17,r19
		y_0 = error;
   1d6a4:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
   1d6a8:	9021883a 	mov	r16,r18
		x_1 = y_1;
   1d6ac:	a025883a 	mov	r18,r20
		y_1 = error;
   1d6b0:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
   1d6b4:	9440060e 	bge	r18,r17,1d6d0 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
   1d6b8:	8821883a 	mov	r16,r17
		x_0 = x_1;
   1d6bc:	9023883a 	mov	r17,r18
		x_1 = error;
   1d6c0:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
   1d6c4:	9821883a 	mov	r16,r19
		y_0 = y_1;
   1d6c8:	a027883a 	mov	r19,r20
		y_1 = error;
   1d6cc:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   1d6d0:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
   1d6d4:	a4c5c83a 	sub	r2,r20,r19
   1d6d8:	1000010e 	bge	r2,zero,1d6e0 <alt_up_pixel_buffer_dma_draw_line+0x154>
   1d6dc:	0085c83a 	sub	r2,zero,r2
   1d6e0:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
   1d6e4:	a804d7fa 	srli	r2,r21,31
   1d6e8:	1545883a 	add	r2,r2,r21
   1d6ec:	1005d07a 	srai	r2,r2,1
   1d6f0:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
   1d6f4:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
   1d6f8:	9d00020e 	bge	r19,r20,1d704 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
   1d6fc:	04c00044 	movi	r19,1
   1d700:	00000106 	br	1d708 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
   1d704:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   1d708:	e0bff307 	ldb	r2,-52(fp)
   1d70c:	10800058 	cmpnei	r2,r2,1
   1d710:	1000211e 	bne	r2,zero,1d798 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
   1d714:	00000f06 	br	1d754 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   1d718:	e0bff417 	ldw	r2,-48(fp)
   1d71c:	d8800115 	stw	r2,4(sp)
   1d720:	e0bff517 	ldw	r2,-44(fp)
   1d724:	d8800015 	stw	r2,0(sp)
   1d728:	880f883a 	mov	r7,r17
   1d72c:	b00d883a 	mov	r6,r22
   1d730:	e17ff617 	ldw	r5,-40(fp)
   1d734:	b809883a 	mov	r4,r23
   1d738:	001d5080 	call	1d508 <helper_plot_pixel>
			error = error + deltay;
   1d73c:	e0bff717 	ldw	r2,-36(fp)
   1d740:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   1d744:	0400020e 	bge	zero,r16,1d750 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
   1d748:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   1d74c:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   1d750:	8c400044 	addi	r17,r17,1
   1d754:	947ff00e 	bge	r18,r17,1d718 <__alt_data_end+0xf001d718>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   1d758:	00001006 	br	1d79c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   1d75c:	e0bff417 	ldw	r2,-48(fp)
   1d760:	d8800115 	stw	r2,4(sp)
   1d764:	e0bff517 	ldw	r2,-44(fp)
   1d768:	d8800015 	stw	r2,0(sp)
   1d76c:	b00f883a 	mov	r7,r22
   1d770:	880d883a 	mov	r6,r17
   1d774:	e17ff617 	ldw	r5,-40(fp)
   1d778:	b809883a 	mov	r4,r23
   1d77c:	001d5080 	call	1d508 <helper_plot_pixel>
			error = error + deltay;
   1d780:	e0bff717 	ldw	r2,-36(fp)
   1d784:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   1d788:	0400020e 	bge	zero,r16,1d794 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
   1d78c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   1d790:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   1d794:	8c400044 	addi	r17,r17,1
   1d798:	947ff00e 	bge	r18,r17,1d75c <__alt_data_end+0xf001d75c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   1d79c:	0001883a 	nop
   1d7a0:	e6fff804 	addi	sp,fp,-32
   1d7a4:	dfc00917 	ldw	ra,36(sp)
   1d7a8:	df000817 	ldw	fp,32(sp)
   1d7ac:	ddc00717 	ldw	r23,28(sp)
   1d7b0:	dd800617 	ldw	r22,24(sp)
   1d7b4:	dd400517 	ldw	r21,20(sp)
   1d7b8:	dd000417 	ldw	r20,16(sp)
   1d7bc:	dcc00317 	ldw	r19,12(sp)
   1d7c0:	dc800217 	ldw	r18,8(sp)
   1d7c4:	dc400117 	ldw	r17,4(sp)
   1d7c8:	dc000017 	ldw	r16,0(sp)
   1d7cc:	dec00a04 	addi	sp,sp,40
   1d7d0:	f800283a 	ret

0001d7d4 <get_multi_byte_make_code_index>:
	STATE_DONE 
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
   1d7d4:	defffd04 	addi	sp,sp,-12
   1d7d8:	df000215 	stw	fp,8(sp)
   1d7dc:	df000204 	addi	fp,sp,8
   1d7e0:	2005883a 	mov	r2,r4
   1d7e4:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d7e8:	e03ffe15 	stw	zero,-8(fp)
   1d7ec:	00000d06 	br	1d824 <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
   1d7f0:	00820034 	movhi	r2,2048
   1d7f4:	108ae304 	addi	r2,r2,11148
   1d7f8:	e0fffe17 	ldw	r3,-8(fp)
   1d7fc:	10c5883a 	add	r2,r2,r3
   1d800:	10800003 	ldbu	r2,0(r2)
   1d804:	10c03fcc 	andi	r3,r2,255
   1d808:	e0bfff03 	ldbu	r2,-4(fp)
   1d80c:	1880021e 	bne	r3,r2,1d818 <get_multi_byte_make_code_index+0x44>
			return i;
   1d810:	e0bffe17 	ldw	r2,-8(fp)
   1d814:	00000706 	br	1d834 <get_multi_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d818:	e0bffe17 	ldw	r2,-8(fp)
   1d81c:	10800044 	addi	r2,r2,1
   1d820:	e0bffe15 	stw	r2,-8(fp)
   1d824:	e0bffe17 	ldw	r2,-8(fp)
   1d828:	108019b0 	cmpltui	r2,r2,102
   1d82c:	103ff01e 	bne	r2,zero,1d7f0 <__alt_data_end+0xf001d7f0>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1d830:	00801984 	movi	r2,102
}
   1d834:	e037883a 	mov	sp,fp
   1d838:	df000017 	ldw	fp,0(sp)
   1d83c:	dec00104 	addi	sp,sp,4
   1d840:	f800283a 	ret

0001d844 <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
   1d844:	defffd04 	addi	sp,sp,-12
   1d848:	df000215 	stw	fp,8(sp)
   1d84c:	df000204 	addi	fp,sp,8
   1d850:	2005883a 	mov	r2,r4
   1d854:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d858:	e03ffe15 	stw	zero,-8(fp)
   1d85c:	00000d06 	br	1d894 <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
   1d860:	00820034 	movhi	r2,2048
   1d864:	108ac984 	addi	r2,r2,11046
   1d868:	e0fffe17 	ldw	r3,-8(fp)
   1d86c:	10c5883a 	add	r2,r2,r3
   1d870:	10800003 	ldbu	r2,0(r2)
   1d874:	10c03fcc 	andi	r3,r2,255
   1d878:	e0bfff03 	ldbu	r2,-4(fp)
   1d87c:	1880021e 	bne	r3,r2,1d888 <get_single_byte_make_code_index+0x44>
			return i;
   1d880:	e0bffe17 	ldw	r2,-8(fp)
   1d884:	00000706 	br	1d8a4 <get_single_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   1d888:	e0bffe17 	ldw	r2,-8(fp)
   1d88c:	10800044 	addi	r2,r2,1
   1d890:	e0bffe15 	stw	r2,-8(fp)
   1d894:	e0bffe17 	ldw	r2,-8(fp)
   1d898:	108019b0 	cmpltui	r2,r2,102
   1d89c:	103ff01e 	bne	r2,zero,1d860 <__alt_data_end+0xf001d860>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   1d8a0:	00801984 	movi	r2,102
}
   1d8a4:	e037883a 	mov	sp,fp
   1d8a8:	df000017 	ldw	fp,0(sp)
   1d8ac:	dec00104 	addi	sp,sp,4
   1d8b0:	f800283a 	ret

0001d8b4 <get_next_state>:
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte, 
		KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1d8b4:	defff804 	addi	sp,sp,-32
   1d8b8:	dfc00715 	stw	ra,28(sp)
   1d8bc:	df000615 	stw	fp,24(sp)
   1d8c0:	df000604 	addi	fp,sp,24
   1d8c4:	e13ffc15 	stw	r4,-16(fp)
   1d8c8:	2805883a 	mov	r2,r5
   1d8cc:	e1bffe15 	stw	r6,-8(fp)
   1d8d0:	e1ffff15 	stw	r7,-4(fp)
   1d8d4:	e0bffd05 	stb	r2,-12(fp)
	DECODE_STATE next_state = STATE_INIT;
   1d8d8:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
   1d8dc:	00801984 	movi	r2,102
   1d8e0:	e0bffb15 	stw	r2,-20(fp)
	*ascii = 0;
   1d8e4:	e0800217 	ldw	r2,8(fp)
   1d8e8:	10000005 	stb	zero,0(r2)
	switch (state)
   1d8ec:	e0bffc17 	ldw	r2,-16(fp)
   1d8f0:	10c00060 	cmpeqi	r3,r2,1
   1d8f4:	1800391e 	bne	r3,zero,1d9dc <get_next_state+0x128>
   1d8f8:	0080052e 	bgeu	zero,r2,1d910 <get_next_state+0x5c>
   1d8fc:	10c000a0 	cmpeqi	r3,r2,2
   1d900:	18004b1e 	bne	r3,zero,1da30 <get_next_state+0x17c>
   1d904:	108000e0 	cmpeqi	r2,r2,3
   1d908:	10005e1e 	bne	r2,zero,1da84 <get_next_state+0x1d0>
   1d90c:	00007206 	br	1dad8 <get_next_state+0x224>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
   1d910:	e0bffd03 	ldbu	r2,-12(fp)
   1d914:	10803818 	cmpnei	r2,r2,224
   1d918:	1000031e 	bne	r2,zero,1d928 <get_next_state+0x74>
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
   1d91c:	00800044 	movi	r2,1
   1d920:	e0bffa15 	stw	r2,-24(fp)
					*decode_mode = KB_BINARY_MAKE_CODE;
					*buf = byte;
				}
				next_state = STATE_DONE;
			}
			break;
   1d924:	00007006 	br	1dae8 <get_next_state+0x234>
			if ( byte == 0xE0 )
			{	
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
			}
			else if (byte == 0xF0)
   1d928:	e0bffd03 	ldbu	r2,-12(fp)
   1d92c:	10803c18 	cmpnei	r2,r2,240
   1d930:	1000031e 	bne	r2,zero,1d940 <get_next_state+0x8c>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
   1d934:	00800084 	movi	r2,2
   1d938:	e0bffa15 	stw	r2,-24(fp)
					*decode_mode = KB_BINARY_MAKE_CODE;
					*buf = byte;
				}
				next_state = STATE_DONE;
			}
			break;
   1d93c:	00006a06 	br	1dae8 <get_next_state+0x234>
				next_state = STATE_BREAK_CODE;
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
   1d940:	e0bffd03 	ldbu	r2,-12(fp)
   1d944:	1009883a 	mov	r4,r2
   1d948:	001d8440 	call	1d844 <get_single_byte_make_code_index>
   1d94c:	e0bffb15 	stw	r2,-20(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
   1d950:	e0bffb17 	ldw	r2,-20(fp)
   1d954:	10800a30 	cmpltui	r2,r2,40
   1d958:	1000061e 	bne	r2,zero,1d974 <get_next_state+0xc0>
   1d95c:	e0bffb17 	ldw	r2,-20(fp)
   1d960:	10801120 	cmpeqi	r2,r2,68
   1d964:	1000031e 	bne	r2,zero,1d974 <get_next_state+0xc0>
   1d968:	e0bffb17 	ldw	r2,-20(fp)
   1d96c:	10801430 	cmpltui	r2,r2,80
   1d970:	1000111e 	bne	r2,zero,1d9b8 <get_next_state+0x104>
   1d974:	e0bffb17 	ldw	r2,-20(fp)
   1d978:	108019a0 	cmpeqi	r2,r2,102
   1d97c:	10000e1e 	bne	r2,zero,1d9b8 <get_next_state+0x104>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
   1d980:	e0bffe17 	ldw	r2,-8(fp)
   1d984:	00c00044 	movi	r3,1
   1d988:	10c00015 	stw	r3,0(r2)
					*ascii = ascii_codes[idx];
   1d98c:	00820034 	movhi	r2,2048
   1d990:	108ab004 	addi	r2,r2,10944
   1d994:	e0fffb17 	ldw	r3,-20(fp)
   1d998:	10c5883a 	add	r2,r2,r3
   1d99c:	10c00003 	ldbu	r3,0(r2)
   1d9a0:	e0800217 	ldw	r2,8(fp)
   1d9a4:	10c00005 	stb	r3,0(r2)
					*buf = byte;
   1d9a8:	e0bfff17 	ldw	r2,-4(fp)
   1d9ac:	e0fffd03 	ldbu	r3,-12(fp)
   1d9b0:	10c00005 	stb	r3,0(r2)
   1d9b4:	00000606 	br	1d9d0 <get_next_state+0x11c>
				}
				else 
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
   1d9b8:	e0bffe17 	ldw	r2,-8(fp)
   1d9bc:	00c00084 	movi	r3,2
   1d9c0:	10c00015 	stw	r3,0(r2)
					*buf = byte;
   1d9c4:	e0bfff17 	ldw	r2,-4(fp)
   1d9c8:	e0fffd03 	ldbu	r3,-12(fp)
   1d9cc:	10c00005 	stb	r3,0(r2)
				}
				next_state = STATE_DONE;
   1d9d0:	00800104 	movi	r2,4
   1d9d4:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1d9d8:	00004306 	br	1dae8 <get_next_state+0x234>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
   1d9dc:	e0bffd03 	ldbu	r2,-12(fp)
   1d9e0:	10803c20 	cmpeqi	r2,r2,240
   1d9e4:	10000c1e 	bne	r2,zero,1da18 <get_next_state+0x164>
   1d9e8:	e0bffd03 	ldbu	r2,-12(fp)
   1d9ec:	10803820 	cmpeqi	r2,r2,224
   1d9f0:	1000091e 	bne	r2,zero,1da18 <get_next_state+0x164>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
   1d9f4:	e0bffe17 	ldw	r2,-8(fp)
   1d9f8:	00c000c4 	movi	r3,3
   1d9fc:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1da00:	e0bfff17 	ldw	r2,-4(fp)
   1da04:	e0fffd03 	ldbu	r3,-12(fp)
   1da08:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1da0c:	00800104 	movi	r2,4
   1da10:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
   1da14:	00003406 	br	1dae8 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
   1da18:	e0bffe17 	ldw	r2,-8(fp)
   1da1c:	00c00104 	movi	r3,4
   1da20:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
   1da24:	008000c4 	movi	r2,3
   1da28:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   1da2c:	00002e06 	br	1dae8 <get_next_state+0x234>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1da30:	e0bffd03 	ldbu	r2,-12(fp)
   1da34:	10803c20 	cmpeqi	r2,r2,240
   1da38:	10000c1e 	bne	r2,zero,1da6c <get_next_state+0x1b8>
   1da3c:	e0bffd03 	ldbu	r2,-12(fp)
   1da40:	10803820 	cmpeqi	r2,r2,224
   1da44:	1000091e 	bne	r2,zero,1da6c <get_next_state+0x1b8>
			{
				*decode_mode = KB_BREAK_CODE;
   1da48:	e0bffe17 	ldw	r2,-8(fp)
   1da4c:	00c00104 	movi	r3,4
   1da50:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1da54:	e0bfff17 	ldw	r2,-4(fp)
   1da58:	e0fffd03 	ldbu	r3,-12(fp)
   1da5c:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1da60:	00800104 	movi	r2,4
   1da64:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
   1da68:	00001f06 	br	1dae8 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
   1da6c:	00800084 	movi	r2,2
   1da70:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
   1da74:	e0bffe17 	ldw	r2,-8(fp)
   1da78:	00c00104 	movi	r3,4
   1da7c:	10c00015 	stw	r3,0(r2)
			}
			break;
   1da80:	00001906 	br	1dae8 <get_next_state+0x234>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   1da84:	e0bffd03 	ldbu	r2,-12(fp)
   1da88:	10803c20 	cmpeqi	r2,r2,240
   1da8c:	10000c1e 	bne	r2,zero,1dac0 <get_next_state+0x20c>
   1da90:	e0bffd03 	ldbu	r2,-12(fp)
   1da94:	10803820 	cmpeqi	r2,r2,224
   1da98:	1000091e 	bne	r2,zero,1dac0 <get_next_state+0x20c>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
   1da9c:	e0bffe17 	ldw	r2,-8(fp)
   1daa0:	00c00144 	movi	r3,5
   1daa4:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   1daa8:	e0bfff17 	ldw	r2,-4(fp)
   1daac:	e0fffd03 	ldbu	r3,-12(fp)
   1dab0:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   1dab4:	00800104 	movi	r2,4
   1dab8:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
				*decode_mode = KB_LONG_BREAK_CODE;
			}
			break;
   1dabc:	00000a06 	br	1dae8 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
   1dac0:	008000c4 	movi	r2,3
   1dac4:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
   1dac8:	e0bffe17 	ldw	r2,-8(fp)
   1dacc:	00c00144 	movi	r3,5
   1dad0:	10c00015 	stw	r3,0(r2)
			}
			break;
   1dad4:	00000406 	br	1dae8 <get_next_state+0x234>
		default:
			*decode_mode = KB_INVALID_CODE;
   1dad8:	e0bffe17 	ldw	r2,-8(fp)
   1dadc:	00c00184 	movi	r3,6
   1dae0:	10c00015 	stw	r3,0(r2)
			next_state = STATE_INIT;
   1dae4:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
   1dae8:	e0bffa17 	ldw	r2,-24(fp)
}
   1daec:	e037883a 	mov	sp,fp
   1daf0:	dfc00117 	ldw	ra,4(sp)
   1daf4:	df000017 	ldw	fp,0(sp)
   1daf8:	dec00204 	addi	sp,sp,8
   1dafc:	f800283a 	ret

0001db00 <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   1db00:	defff704 	addi	sp,sp,-36
   1db04:	dfc00815 	stw	ra,32(sp)
   1db08:	df000715 	stw	fp,28(sp)
   1db0c:	df000704 	addi	fp,sp,28
   1db10:	e13ffc15 	stw	r4,-16(fp)
   1db14:	e17ffd15 	stw	r5,-12(fp)
   1db18:	e1bffe15 	stw	r6,-8(fp)
   1db1c:	e1ffff15 	stw	r7,-4(fp)
	alt_u8 byte = 0;
   1db20:	e03ffb05 	stb	zero,-20(fp)
	int status_read =0;
   1db24:	e03ffa15 	stw	zero,-24(fp)
	*decode_mode = KB_INVALID_CODE;
   1db28:	e0bffd17 	ldw	r2,-12(fp)
   1db2c:	00c00184 	movi	r3,6
   1db30:	10c00015 	stw	r3,0(r2)
	static DECODE_STATE state = STATE_INIT;
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
   1db34:	e0bffb04 	addi	r2,fp,-20
   1db38:	100b883a 	mov	r5,r2
   1db3c:	e13ffc17 	ldw	r4,-16(fp)
   1db40:	001c4180 	call	1c418 <alt_up_ps2_read_data_byte>
   1db44:	e0bffa15 	stw	r2,-24(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost 

		if (status_read != 0) {
   1db48:	e0bffa17 	ldw	r2,-24(fp)
   1db4c:	10000626 	beq	r2,zero,1db68 <decode_scancode+0x68>
			if (state == STATE_INIT)
   1db50:	d0a05497 	ldw	r2,-32430(gp)
   1db54:	1000021e 	bne	r2,zero,1db60 <decode_scancode+0x60>
				return status_read;
   1db58:	e0bffa17 	ldw	r2,-24(fp)
   1db5c:	00001206 	br	1dba8 <decode_scancode+0xa8>
			else
				return -2;
   1db60:	00bfff84 	movi	r2,-2
   1db64:	00001006 	br	1dba8 <decode_scancode+0xa8>
		}

		state = get_next_state(state, byte, decode_mode, buf, ascii);
   1db68:	d0e05497 	ldw	r3,-32430(gp)
   1db6c:	e0bffb03 	ldbu	r2,-20(fp)
   1db70:	11003fcc 	andi	r4,r2,255
   1db74:	e0bfff17 	ldw	r2,-4(fp)
   1db78:	d8800015 	stw	r2,0(sp)
   1db7c:	e1fffe17 	ldw	r7,-8(fp)
   1db80:	e1bffd17 	ldw	r6,-12(fp)
   1db84:	200b883a 	mov	r5,r4
   1db88:	1809883a 	mov	r4,r3
   1db8c:	001d8b40 	call	1d8b4 <get_next_state>
   1db90:	d0a05495 	stw	r2,-32430(gp)
	} while ( state != STATE_DONE );
   1db94:	d0a05497 	ldw	r2,-32430(gp)
   1db98:	10800118 	cmpnei	r2,r2,4
   1db9c:	103fe51e 	bne	r2,zero,1db34 <__alt_data_end+0xf001db34>

	state = STATE_INIT;
   1dba0:	d0205495 	stw	zero,-32430(gp)

	return 0;
   1dba4:	0005883a 	mov	r2,zero
}
   1dba8:	e037883a 	mov	sp,fp
   1dbac:	dfc00117 	ldw	ra,4(sp)
   1dbb0:	df000017 	ldw	fp,0(sp)
   1dbb4:	dec00204 	addi	sp,sp,8
   1dbb8:	f800283a 	ret

0001dbbc <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
   1dbbc:	defffb04 	addi	sp,sp,-20
   1dbc0:	dfc00415 	stw	ra,16(sp)
   1dbc4:	df000315 	stw	fp,12(sp)
   1dbc8:	df000304 	addi	fp,sp,12
   1dbcc:	e13ffe15 	stw	r4,-8(fp)
   1dbd0:	2805883a 	mov	r2,r5
   1dbd4:	e0bfff05 	stb	r2,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0xF3);
   1dbd8:	01403cc4 	movi	r5,243
   1dbdc:	e13ffe17 	ldw	r4,-8(fp)
   1dbe0:	001c3180 	call	1c318 <alt_up_ps2_write_data_byte_with_ack>
   1dbe4:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
   1dbe8:	e0bffd17 	ldw	r2,-12(fp)
   1dbec:	1000061e 	bne	r2,zero,1dc08 <set_keyboard_rate+0x4c>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
   1dbf0:	e0bfff03 	ldbu	r2,-4(fp)
   1dbf4:	108007cc 	andi	r2,r2,31
   1dbf8:	100b883a 	mov	r5,r2
   1dbfc:	e13ffe17 	ldw	r4,-8(fp)
   1dc00:	001c3180 	call	1c318 <alt_up_ps2_write_data_byte_with_ack>
   1dc04:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
   1dc08:	e0bffd17 	ldw	r2,-12(fp)
}
   1dc0c:	e037883a 	mov	sp,fp
   1dc10:	dfc00117 	ldw	ra,4(sp)
   1dc14:	df000017 	ldw	fp,0(sp)
   1dc18:	dec00204 	addi	sp,sp,8
   1dc1c:	f800283a 	ret

0001dc20 <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
   1dc20:	defffa04 	addi	sp,sp,-24
   1dc24:	dfc00515 	stw	ra,20(sp)
   1dc28:	df000415 	stw	fp,16(sp)
   1dc2c:	df000404 	addi	fp,sp,16
   1dc30:	e13ffd15 	stw	r4,-12(fp)
   1dc34:	2805883a 	mov	r2,r5
   1dc38:	e1bfff15 	stw	r6,-4(fp)
   1dc3c:	e0bffe05 	stb	r2,-8(fp)
	unsigned idx;
	switch (decode_mode)
   1dc40:	e0bffd17 	ldw	r2,-12(fp)
   1dc44:	10c000a0 	cmpeqi	r3,r2,2
   1dc48:	1800131e 	bne	r3,zero,1dc98 <translate_make_code+0x78>
   1dc4c:	10c000e0 	cmpeqi	r3,r2,3
   1dc50:	1800201e 	bne	r3,zero,1dcd4 <translate_make_code+0xb4>
   1dc54:	10800060 	cmpeqi	r2,r2,1
   1dc58:	10002d26 	beq	r2,zero,1dd10 <translate_make_code+0xf0>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1dc5c:	e0bffe03 	ldbu	r2,-8(fp)
   1dc60:	1009883a 	mov	r4,r2
   1dc64:	001d8440 	call	1d844 <get_single_byte_make_code_index>
   1dc68:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1dc6c:	00820034 	movhi	r2,2048
   1dc70:	108a4a04 	addi	r2,r2,10536
   1dc74:	e0fffc17 	ldw	r3,-16(fp)
   1dc78:	18c7883a 	add	r3,r3,r3
   1dc7c:	18c7883a 	add	r3,r3,r3
   1dc80:	10c5883a 	add	r2,r2,r3
   1dc84:	10800017 	ldw	r2,0(r2)
   1dc88:	100b883a 	mov	r5,r2
   1dc8c:	e13fff17 	ldw	r4,-4(fp)
   1dc90:	001f3a80 	call	1f3a8 <strcpy>
			break;
   1dc94:	00002206 	br	1dd20 <translate_make_code+0x100>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   1dc98:	e0bffe03 	ldbu	r2,-8(fp)
   1dc9c:	1009883a 	mov	r4,r2
   1dca0:	001d8440 	call	1d844 <get_single_byte_make_code_index>
   1dca4:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1dca8:	00820034 	movhi	r2,2048
   1dcac:	108a4a04 	addi	r2,r2,10536
   1dcb0:	e0fffc17 	ldw	r3,-16(fp)
   1dcb4:	18c7883a 	add	r3,r3,r3
   1dcb8:	18c7883a 	add	r3,r3,r3
   1dcbc:	10c5883a 	add	r2,r2,r3
   1dcc0:	10800017 	ldw	r2,0(r2)
   1dcc4:	100b883a 	mov	r5,r2
   1dcc8:	e13fff17 	ldw	r4,-4(fp)
   1dccc:	001f3a80 	call	1f3a8 <strcpy>
			break;
   1dcd0:	00001306 	br	1dd20 <translate_make_code+0x100>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
   1dcd4:	e0bffe03 	ldbu	r2,-8(fp)
   1dcd8:	1009883a 	mov	r4,r2
   1dcdc:	001d7d40 	call	1d7d4 <get_multi_byte_make_code_index>
   1dce0:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   1dce4:	00820034 	movhi	r2,2048
   1dce8:	108a4a04 	addi	r2,r2,10536
   1dcec:	e0fffc17 	ldw	r3,-16(fp)
   1dcf0:	18c7883a 	add	r3,r3,r3
   1dcf4:	18c7883a 	add	r3,r3,r3
   1dcf8:	10c5883a 	add	r2,r2,r3
   1dcfc:	10800017 	ldw	r2,0(r2)
   1dd00:	100b883a 	mov	r5,r2
   1dd04:	e13fff17 	ldw	r4,-4(fp)
   1dd08:	001f3a80 	call	1f3a8 <strcpy>
			break;
   1dd0c:	00000406 	br	1dd20 <translate_make_code+0x100>
		default:
			str = "";
   1dd10:	00820034 	movhi	r2,2048
   1dd14:	10821904 	addi	r2,r2,2148
   1dd18:	e0bfff15 	stw	r2,-4(fp)
			break;
   1dd1c:	0001883a 	nop
	}
}
   1dd20:	0001883a 	nop
   1dd24:	e037883a 	mov	sp,fp
   1dd28:	dfc00117 	ldw	ra,4(sp)
   1dd2c:	df000017 	ldw	fp,0(sp)
   1dd30:	dec00204 	addi	sp,sp,8
   1dd34:	f800283a 	ret

0001dd38 <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
   1dd38:	defffb04 	addi	sp,sp,-20
   1dd3c:	dfc00415 	stw	ra,16(sp)
   1dd40:	df000315 	stw	fp,12(sp)
   1dd44:	df000304 	addi	fp,sp,12
   1dd48:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff); 
   1dd4c:	01403fc4 	movi	r5,255
   1dd50:	e13fff17 	ldw	r4,-4(fp)
   1dd54:	001c3180 	call	1c318 <alt_up_ps2_write_data_byte_with_ack>
   1dd58:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
   1dd5c:	e0bffd17 	ldw	r2,-12(fp)
   1dd60:	10000d1e 	bne	r2,zero,1dd98 <reset_keyboard+0x60>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
   1dd64:	e0bffe04 	addi	r2,fp,-8
   1dd68:	100b883a 	mov	r5,r2
   1dd6c:	e13fff17 	ldw	r4,-4(fp)
   1dd70:	001c4180 	call	1c418 <alt_up_ps2_read_data_byte>
   1dd74:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1dd78:	e0bffd17 	ldw	r2,-12(fp)
   1dd7c:	1000041e 	bne	r2,zero,1dd90 <reset_keyboard+0x58>
   1dd80:	e0bffe03 	ldbu	r2,-8(fp)
   1dd84:	10803fcc 	andi	r2,r2,255
   1dd88:	10802a98 	cmpnei	r2,r2,170
   1dd8c:	10000226 	beq	r2,zero,1dd98 <reset_keyboard+0x60>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
   1dd90:	00bfffc4 	movi	r2,-1
   1dd94:	e0bffd15 	stw	r2,-12(fp)
		}
	}	
	return status;
   1dd98:	e0bffd17 	ldw	r2,-12(fp)
}
   1dd9c:	e037883a 	mov	sp,fp
   1dda0:	dfc00117 	ldw	ra,4(sp)
   1dda4:	df000017 	ldw	fp,0(sp)
   1dda8:	dec00204 	addi	sp,sp,8
   1ddac:	f800283a 	ret

0001ddb0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1ddb0:	defff504 	addi	sp,sp,-44
   1ddb4:	df000a15 	stw	fp,40(sp)
   1ddb8:	df000a04 	addi	fp,sp,40
   1ddbc:	e13ffc15 	stw	r4,-16(fp)
   1ddc0:	e17ffd15 	stw	r5,-12(fp)
   1ddc4:	e1bffe15 	stw	r6,-8(fp)
   1ddc8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1ddcc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ddd0:	d0a05597 	ldw	r2,-32426(gp)
  
  if (alt_ticks_per_second ())
   1ddd4:	10003c26 	beq	r2,zero,1dec8 <alt_alarm_start+0x118>
  {
    if (alarm)
   1ddd8:	e0bffc17 	ldw	r2,-16(fp)
   1dddc:	10003826 	beq	r2,zero,1dec0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1dde0:	e0bffc17 	ldw	r2,-16(fp)
   1dde4:	e0fffe17 	ldw	r3,-8(fp)
   1dde8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1ddec:	e0bffc17 	ldw	r2,-16(fp)
   1ddf0:	e0ffff17 	ldw	r3,-4(fp)
   1ddf4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ddf8:	0005303a 	rdctl	r2,status
   1ddfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de00:	e0fff917 	ldw	r3,-28(fp)
   1de04:	00bfff84 	movi	r2,-2
   1de08:	1884703a 	and	r2,r3,r2
   1de0c:	1001703a 	wrctl	status,r2
  
  return context;
   1de10:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1de14:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1de18:	d0a05697 	ldw	r2,-32422(gp)
      
      current_nticks = alt_nticks();
   1de1c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1de20:	e0fffd17 	ldw	r3,-12(fp)
   1de24:	e0bff617 	ldw	r2,-40(fp)
   1de28:	1885883a 	add	r2,r3,r2
   1de2c:	10c00044 	addi	r3,r2,1
   1de30:	e0bffc17 	ldw	r2,-16(fp)
   1de34:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1de38:	e0bffc17 	ldw	r2,-16(fp)
   1de3c:	10c00217 	ldw	r3,8(r2)
   1de40:	e0bff617 	ldw	r2,-40(fp)
   1de44:	1880042e 	bgeu	r3,r2,1de58 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1de48:	e0bffc17 	ldw	r2,-16(fp)
   1de4c:	00c00044 	movi	r3,1
   1de50:	10c00405 	stb	r3,16(r2)
   1de54:	00000206 	br	1de60 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1de58:	e0bffc17 	ldw	r2,-16(fp)
   1de5c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1de60:	e0bffc17 	ldw	r2,-16(fp)
   1de64:	d0e01584 	addi	r3,gp,-32682
   1de68:	e0fffa15 	stw	r3,-24(fp)
   1de6c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1de70:	e0bffb17 	ldw	r2,-20(fp)
   1de74:	e0fffa17 	ldw	r3,-24(fp)
   1de78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1de7c:	e0bffa17 	ldw	r2,-24(fp)
   1de80:	10c00017 	ldw	r3,0(r2)
   1de84:	e0bffb17 	ldw	r2,-20(fp)
   1de88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1de8c:	e0bffa17 	ldw	r2,-24(fp)
   1de90:	10800017 	ldw	r2,0(r2)
   1de94:	e0fffb17 	ldw	r3,-20(fp)
   1de98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1de9c:	e0bffa17 	ldw	r2,-24(fp)
   1dea0:	e0fffb17 	ldw	r3,-20(fp)
   1dea4:	10c00015 	stw	r3,0(r2)
   1dea8:	e0bff817 	ldw	r2,-32(fp)
   1deac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1deb0:	e0bff717 	ldw	r2,-36(fp)
   1deb4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1deb8:	0005883a 	mov	r2,zero
   1debc:	00000306 	br	1decc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1dec0:	00bffa84 	movi	r2,-22
   1dec4:	00000106 	br	1decc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1dec8:	00bfde84 	movi	r2,-134
  }
}
   1decc:	e037883a 	mov	sp,fp
   1ded0:	df000017 	ldw	fp,0(sp)
   1ded4:	dec00104 	addi	sp,sp,4
   1ded8:	f800283a 	ret

0001dedc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   1dedc:	defffb04 	addi	sp,sp,-20
   1dee0:	df000415 	stw	fp,16(sp)
   1dee4:	df000404 	addi	fp,sp,16
   1dee8:	e13ffe15 	stw	r4,-8(fp)
   1deec:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
   1def0:	e0fffe17 	ldw	r3,-8(fp)
   1def4:	e0bfff17 	ldw	r2,-4(fp)
   1def8:	1885883a 	add	r2,r3,r2
   1defc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1df00:	e0bffe17 	ldw	r2,-8(fp)
   1df04:	e0bffc15 	stw	r2,-16(fp)
   1df08:	00000506 	br	1df20 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   1df0c:	e0bffc17 	ldw	r2,-16(fp)
   1df10:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   1df14:	e0bffc17 	ldw	r2,-16(fp)
   1df18:	10800804 	addi	r2,r2,32
   1df1c:	e0bffc15 	stw	r2,-16(fp)
   1df20:	e0fffc17 	ldw	r3,-16(fp)
   1df24:	e0bffd17 	ldw	r2,-12(fp)
   1df28:	18bff836 	bltu	r3,r2,1df0c <__alt_data_end+0xf001df0c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   1df2c:	e0bffe17 	ldw	r2,-8(fp)
   1df30:	108007cc 	andi	r2,r2,31
   1df34:	10000226 	beq	r2,zero,1df40 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   1df38:	e0bffc17 	ldw	r2,-16(fp)
   1df3c:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1df40:	0001883a 	nop
   1df44:	e037883a 	mov	sp,fp
   1df48:	df000017 	ldw	fp,0(sp)
   1df4c:	dec00104 	addi	sp,sp,4
   1df50:	f800283a 	ret

0001df54 <alt_get_errno>:
   1df54:	defffe04 	addi	sp,sp,-8
   1df58:	dfc00115 	stw	ra,4(sp)
   1df5c:	df000015 	stw	fp,0(sp)
   1df60:	d839883a 	mov	fp,sp
   1df64:	d0a00f97 	ldw	r2,-32706(gp)
   1df68:	10000326 	beq	r2,zero,1df78 <alt_get_errno+0x24>
   1df6c:	d0a00f97 	ldw	r2,-32706(gp)
   1df70:	103ee83a 	callr	r2
   1df74:	00000106 	br	1df7c <alt_get_errno+0x28>
   1df78:	d0a04f84 	addi	r2,gp,-32450
   1df7c:	e037883a 	mov	sp,fp
   1df80:	dfc00117 	ldw	ra,4(sp)
   1df84:	df000017 	ldw	fp,0(sp)
   1df88:	dec00204 	addi	sp,sp,8
   1df8c:	f800283a 	ret

0001df90 <alt_dev_llist_insert>:
   1df90:	defffa04 	addi	sp,sp,-24
   1df94:	dfc00515 	stw	ra,20(sp)
   1df98:	df000415 	stw	fp,16(sp)
   1df9c:	df000404 	addi	fp,sp,16
   1dfa0:	e13ffe15 	stw	r4,-8(fp)
   1dfa4:	e17fff15 	stw	r5,-4(fp)
   1dfa8:	e0bffe17 	ldw	r2,-8(fp)
   1dfac:	10000326 	beq	r2,zero,1dfbc <alt_dev_llist_insert+0x2c>
   1dfb0:	e0bffe17 	ldw	r2,-8(fp)
   1dfb4:	10800217 	ldw	r2,8(r2)
   1dfb8:	1000061e 	bne	r2,zero,1dfd4 <alt_dev_llist_insert+0x44>
   1dfbc:	001df540 	call	1df54 <alt_get_errno>
   1dfc0:	1007883a 	mov	r3,r2
   1dfc4:	00800584 	movi	r2,22
   1dfc8:	18800015 	stw	r2,0(r3)
   1dfcc:	00bffa84 	movi	r2,-22
   1dfd0:	00001306 	br	1e020 <alt_dev_llist_insert+0x90>
   1dfd4:	e0bffe17 	ldw	r2,-8(fp)
   1dfd8:	e0ffff17 	ldw	r3,-4(fp)
   1dfdc:	e0fffc15 	stw	r3,-16(fp)
   1dfe0:	e0bffd15 	stw	r2,-12(fp)
   1dfe4:	e0bffd17 	ldw	r2,-12(fp)
   1dfe8:	e0fffc17 	ldw	r3,-16(fp)
   1dfec:	10c00115 	stw	r3,4(r2)
   1dff0:	e0bffc17 	ldw	r2,-16(fp)
   1dff4:	10c00017 	ldw	r3,0(r2)
   1dff8:	e0bffd17 	ldw	r2,-12(fp)
   1dffc:	10c00015 	stw	r3,0(r2)
   1e000:	e0bffc17 	ldw	r2,-16(fp)
   1e004:	10800017 	ldw	r2,0(r2)
   1e008:	e0fffd17 	ldw	r3,-12(fp)
   1e00c:	10c00115 	stw	r3,4(r2)
   1e010:	e0bffc17 	ldw	r2,-16(fp)
   1e014:	e0fffd17 	ldw	r3,-12(fp)
   1e018:	10c00015 	stw	r3,0(r2)
   1e01c:	0005883a 	mov	r2,zero
   1e020:	e037883a 	mov	sp,fp
   1e024:	dfc00117 	ldw	ra,4(sp)
   1e028:	df000017 	ldw	fp,0(sp)
   1e02c:	dec00204 	addi	sp,sp,8
   1e030:	f800283a 	ret

0001e034 <_do_ctors>:
   1e034:	defffd04 	addi	sp,sp,-12
   1e038:	dfc00215 	stw	ra,8(sp)
   1e03c:	df000115 	stw	fp,4(sp)
   1e040:	df000104 	addi	fp,sp,4
   1e044:	008000b4 	movhi	r2,2
   1e048:	10bdc004 	addi	r2,r2,-2304
   1e04c:	e0bfff15 	stw	r2,-4(fp)
   1e050:	00000606 	br	1e06c <_do_ctors+0x38>
   1e054:	e0bfff17 	ldw	r2,-4(fp)
   1e058:	10800017 	ldw	r2,0(r2)
   1e05c:	103ee83a 	callr	r2
   1e060:	e0bfff17 	ldw	r2,-4(fp)
   1e064:	10bfff04 	addi	r2,r2,-4
   1e068:	e0bfff15 	stw	r2,-4(fp)
   1e06c:	e0ffff17 	ldw	r3,-4(fp)
   1e070:	008000b4 	movhi	r2,2
   1e074:	10bdc104 	addi	r2,r2,-2300
   1e078:	18bff62e 	bgeu	r3,r2,1e054 <__alt_data_end+0xf001e054>
   1e07c:	0001883a 	nop
   1e080:	e037883a 	mov	sp,fp
   1e084:	dfc00117 	ldw	ra,4(sp)
   1e088:	df000017 	ldw	fp,0(sp)
   1e08c:	dec00204 	addi	sp,sp,8
   1e090:	f800283a 	ret

0001e094 <_do_dtors>:
   1e094:	defffd04 	addi	sp,sp,-12
   1e098:	dfc00215 	stw	ra,8(sp)
   1e09c:	df000115 	stw	fp,4(sp)
   1e0a0:	df000104 	addi	fp,sp,4
   1e0a4:	008000b4 	movhi	r2,2
   1e0a8:	10bdc004 	addi	r2,r2,-2304
   1e0ac:	e0bfff15 	stw	r2,-4(fp)
   1e0b0:	00000606 	br	1e0cc <_do_dtors+0x38>
   1e0b4:	e0bfff17 	ldw	r2,-4(fp)
   1e0b8:	10800017 	ldw	r2,0(r2)
   1e0bc:	103ee83a 	callr	r2
   1e0c0:	e0bfff17 	ldw	r2,-4(fp)
   1e0c4:	10bfff04 	addi	r2,r2,-4
   1e0c8:	e0bfff15 	stw	r2,-4(fp)
   1e0cc:	e0ffff17 	ldw	r3,-4(fp)
   1e0d0:	008000b4 	movhi	r2,2
   1e0d4:	10bdc104 	addi	r2,r2,-2300
   1e0d8:	18bff62e 	bgeu	r3,r2,1e0b4 <__alt_data_end+0xf001e0b4>
   1e0dc:	0001883a 	nop
   1e0e0:	e037883a 	mov	sp,fp
   1e0e4:	dfc00117 	ldw	ra,4(sp)
   1e0e8:	df000017 	ldw	fp,0(sp)
   1e0ec:	dec00204 	addi	sp,sp,8
   1e0f0:	f800283a 	ret

0001e0f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1e0f4:	defffa04 	addi	sp,sp,-24
   1e0f8:	dfc00515 	stw	ra,20(sp)
   1e0fc:	df000415 	stw	fp,16(sp)
   1e100:	df000404 	addi	fp,sp,16
   1e104:	e13ffe15 	stw	r4,-8(fp)
   1e108:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1e10c:	e0bfff17 	ldw	r2,-4(fp)
   1e110:	10800017 	ldw	r2,0(r2)
   1e114:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1e118:	e13ffe17 	ldw	r4,-8(fp)
   1e11c:	00095940 	call	9594 <strlen>
   1e120:	10800044 	addi	r2,r2,1
   1e124:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e128:	00000d06 	br	1e160 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1e12c:	e0bffc17 	ldw	r2,-16(fp)
   1e130:	10800217 	ldw	r2,8(r2)
   1e134:	e0fffd17 	ldw	r3,-12(fp)
   1e138:	180d883a 	mov	r6,r3
   1e13c:	e17ffe17 	ldw	r5,-8(fp)
   1e140:	1009883a 	mov	r4,r2
   1e144:	00090a40 	call	90a4 <memcmp>
   1e148:	1000021e 	bne	r2,zero,1e154 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1e14c:	e0bffc17 	ldw	r2,-16(fp)
   1e150:	00000706 	br	1e170 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1e154:	e0bffc17 	ldw	r2,-16(fp)
   1e158:	10800017 	ldw	r2,0(r2)
   1e15c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e160:	e0fffc17 	ldw	r3,-16(fp)
   1e164:	e0bfff17 	ldw	r2,-4(fp)
   1e168:	18bff01e 	bne	r3,r2,1e12c <__alt_data_end+0xf001e12c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1e16c:	0005883a 	mov	r2,zero
}
   1e170:	e037883a 	mov	sp,fp
   1e174:	dfc00117 	ldw	ra,4(sp)
   1e178:	df000017 	ldw	fp,0(sp)
   1e17c:	dec00204 	addi	sp,sp,8
   1e180:	f800283a 	ret

0001e184 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   1e184:	defffc04 	addi	sp,sp,-16
   1e188:	dfc00315 	stw	ra,12(sp)
   1e18c:	df000215 	stw	fp,8(sp)
   1e190:	df000204 	addi	fp,sp,8
   1e194:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   1e198:	d1601384 	addi	r5,gp,-32690
   1e19c:	e13fff17 	ldw	r4,-4(fp)
   1e1a0:	001e0f40 	call	1e0f4 <alt_find_dev>
   1e1a4:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   1e1a8:	e0bffe17 	ldw	r2,-8(fp)
   1e1ac:	10000926 	beq	r2,zero,1e1d4 <alt_flash_open_dev+0x50>
   1e1b0:	e0bffe17 	ldw	r2,-8(fp)
   1e1b4:	10800317 	ldw	r2,12(r2)
   1e1b8:	10000626 	beq	r2,zero,1e1d4 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   1e1bc:	e0bffe17 	ldw	r2,-8(fp)
   1e1c0:	10800317 	ldw	r2,12(r2)
   1e1c4:	e17fff17 	ldw	r5,-4(fp)
   1e1c8:	e13ffe17 	ldw	r4,-8(fp)
   1e1cc:	103ee83a 	callr	r2
   1e1d0:	00000106 	br	1e1d8 <alt_flash_open_dev+0x54>
  }

  return dev;
   1e1d4:	e0bffe17 	ldw	r2,-8(fp)
}
   1e1d8:	e037883a 	mov	sp,fp
   1e1dc:	dfc00117 	ldw	ra,4(sp)
   1e1e0:	df000017 	ldw	fp,0(sp)
   1e1e4:	dec00204 	addi	sp,sp,8
   1e1e8:	f800283a 	ret

0001e1ec <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   1e1ec:	defffd04 	addi	sp,sp,-12
   1e1f0:	dfc00215 	stw	ra,8(sp)
   1e1f4:	df000115 	stw	fp,4(sp)
   1e1f8:	df000104 	addi	fp,sp,4
   1e1fc:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   1e200:	e0bfff17 	ldw	r2,-4(fp)
   1e204:	10000826 	beq	r2,zero,1e228 <alt_flash_close_dev+0x3c>
   1e208:	e0bfff17 	ldw	r2,-4(fp)
   1e20c:	10800417 	ldw	r2,16(r2)
   1e210:	10000526 	beq	r2,zero,1e228 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   1e214:	e0bfff17 	ldw	r2,-4(fp)
   1e218:	10800417 	ldw	r2,16(r2)
   1e21c:	e13fff17 	ldw	r4,-4(fp)
   1e220:	103ee83a 	callr	r2
  }
  return;
   1e224:	0001883a 	nop
   1e228:	0001883a 	nop
}
   1e22c:	e037883a 	mov	sp,fp
   1e230:	dfc00117 	ldw	ra,4(sp)
   1e234:	df000017 	ldw	fp,0(sp)
   1e238:	dec00204 	addi	sp,sp,8
   1e23c:	f800283a 	ret

0001e240 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1e240:	defff904 	addi	sp,sp,-28
   1e244:	dfc00615 	stw	ra,24(sp)
   1e248:	df000515 	stw	fp,20(sp)
   1e24c:	df000504 	addi	fp,sp,20
   1e250:	e13ffc15 	stw	r4,-16(fp)
   1e254:	e17ffd15 	stw	r5,-12(fp)
   1e258:	e1bffe15 	stw	r6,-8(fp)
   1e25c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1e260:	e1bfff17 	ldw	r6,-4(fp)
   1e264:	e17ffe17 	ldw	r5,-8(fp)
   1e268:	e13ffd17 	ldw	r4,-12(fp)
   1e26c:	001e4800 	call	1e480 <open>
   1e270:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1e274:	e0bffb17 	ldw	r2,-20(fp)
   1e278:	10001c16 	blt	r2,zero,1e2ec <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1e27c:	00820034 	movhi	r2,2048
   1e280:	1084ed04 	addi	r2,r2,5044
   1e284:	e0fffb17 	ldw	r3,-20(fp)
   1e288:	18c00324 	muli	r3,r3,12
   1e28c:	10c5883a 	add	r2,r2,r3
   1e290:	10c00017 	ldw	r3,0(r2)
   1e294:	e0bffc17 	ldw	r2,-16(fp)
   1e298:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1e29c:	00820034 	movhi	r2,2048
   1e2a0:	1084ed04 	addi	r2,r2,5044
   1e2a4:	e0fffb17 	ldw	r3,-20(fp)
   1e2a8:	18c00324 	muli	r3,r3,12
   1e2ac:	10c5883a 	add	r2,r2,r3
   1e2b0:	10800104 	addi	r2,r2,4
   1e2b4:	10c00017 	ldw	r3,0(r2)
   1e2b8:	e0bffc17 	ldw	r2,-16(fp)
   1e2bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1e2c0:	00820034 	movhi	r2,2048
   1e2c4:	1084ed04 	addi	r2,r2,5044
   1e2c8:	e0fffb17 	ldw	r3,-20(fp)
   1e2cc:	18c00324 	muli	r3,r3,12
   1e2d0:	10c5883a 	add	r2,r2,r3
   1e2d4:	10800204 	addi	r2,r2,8
   1e2d8:	10c00017 	ldw	r3,0(r2)
   1e2dc:	e0bffc17 	ldw	r2,-16(fp)
   1e2e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1e2e4:	e13ffb17 	ldw	r4,-20(fp)
   1e2e8:	00179ac0 	call	179ac <alt_release_fd>
  }
} 
   1e2ec:	0001883a 	nop
   1e2f0:	e037883a 	mov	sp,fp
   1e2f4:	dfc00117 	ldw	ra,4(sp)
   1e2f8:	df000017 	ldw	fp,0(sp)
   1e2fc:	dec00204 	addi	sp,sp,8
   1e300:	f800283a 	ret

0001e304 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1e304:	defffb04 	addi	sp,sp,-20
   1e308:	dfc00415 	stw	ra,16(sp)
   1e30c:	df000315 	stw	fp,12(sp)
   1e310:	df000304 	addi	fp,sp,12
   1e314:	e13ffd15 	stw	r4,-12(fp)
   1e318:	e17ffe15 	stw	r5,-8(fp)
   1e31c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1e320:	01c07fc4 	movi	r7,511
   1e324:	01800044 	movi	r6,1
   1e328:	e17ffd17 	ldw	r5,-12(fp)
   1e32c:	01020034 	movhi	r4,2048
   1e330:	2104f004 	addi	r4,r4,5056
   1e334:	001e2400 	call	1e240 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1e338:	01c07fc4 	movi	r7,511
   1e33c:	000d883a 	mov	r6,zero
   1e340:	e17ffe17 	ldw	r5,-8(fp)
   1e344:	01020034 	movhi	r4,2048
   1e348:	2104ed04 	addi	r4,r4,5044
   1e34c:	001e2400 	call	1e240 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1e350:	01c07fc4 	movi	r7,511
   1e354:	01800044 	movi	r6,1
   1e358:	e17fff17 	ldw	r5,-4(fp)
   1e35c:	01020034 	movhi	r4,2048
   1e360:	2104f304 	addi	r4,r4,5068
   1e364:	001e2400 	call	1e240 <alt_open_fd>
}  
   1e368:	0001883a 	nop
   1e36c:	e037883a 	mov	sp,fp
   1e370:	dfc00117 	ldw	ra,4(sp)
   1e374:	df000017 	ldw	fp,0(sp)
   1e378:	dec00204 	addi	sp,sp,8
   1e37c:	f800283a 	ret

0001e380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e380:	defffe04 	addi	sp,sp,-8
   1e384:	dfc00115 	stw	ra,4(sp)
   1e388:	df000015 	stw	fp,0(sp)
   1e38c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e390:	d0a00f97 	ldw	r2,-32706(gp)
   1e394:	10000326 	beq	r2,zero,1e3a4 <alt_get_errno+0x24>
   1e398:	d0a00f97 	ldw	r2,-32706(gp)
   1e39c:	103ee83a 	callr	r2
   1e3a0:	00000106 	br	1e3a8 <alt_get_errno+0x28>
   1e3a4:	d0a04f84 	addi	r2,gp,-32450
}
   1e3a8:	e037883a 	mov	sp,fp
   1e3ac:	dfc00117 	ldw	ra,4(sp)
   1e3b0:	df000017 	ldw	fp,0(sp)
   1e3b4:	dec00204 	addi	sp,sp,8
   1e3b8:	f800283a 	ret

0001e3bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1e3bc:	defffd04 	addi	sp,sp,-12
   1e3c0:	df000215 	stw	fp,8(sp)
   1e3c4:	df000204 	addi	fp,sp,8
   1e3c8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1e3cc:	e0bfff17 	ldw	r2,-4(fp)
   1e3d0:	10800217 	ldw	r2,8(r2)
   1e3d4:	10d00034 	orhi	r3,r2,16384
   1e3d8:	e0bfff17 	ldw	r2,-4(fp)
   1e3dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e3e0:	e03ffe15 	stw	zero,-8(fp)
   1e3e4:	00001d06 	br	1e45c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e3e8:	00820034 	movhi	r2,2048
   1e3ec:	1084ed04 	addi	r2,r2,5044
   1e3f0:	e0fffe17 	ldw	r3,-8(fp)
   1e3f4:	18c00324 	muli	r3,r3,12
   1e3f8:	10c5883a 	add	r2,r2,r3
   1e3fc:	10c00017 	ldw	r3,0(r2)
   1e400:	e0bfff17 	ldw	r2,-4(fp)
   1e404:	10800017 	ldw	r2,0(r2)
   1e408:	1880111e 	bne	r3,r2,1e450 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e40c:	00820034 	movhi	r2,2048
   1e410:	1084ed04 	addi	r2,r2,5044
   1e414:	e0fffe17 	ldw	r3,-8(fp)
   1e418:	18c00324 	muli	r3,r3,12
   1e41c:	10c5883a 	add	r2,r2,r3
   1e420:	10800204 	addi	r2,r2,8
   1e424:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e428:	1000090e 	bge	r2,zero,1e450 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1e42c:	e0bffe17 	ldw	r2,-8(fp)
   1e430:	10c00324 	muli	r3,r2,12
   1e434:	00820034 	movhi	r2,2048
   1e438:	1084ed04 	addi	r2,r2,5044
   1e43c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e440:	e0bfff17 	ldw	r2,-4(fp)
   1e444:	18800226 	beq	r3,r2,1e450 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1e448:	00bffcc4 	movi	r2,-13
   1e44c:	00000806 	br	1e470 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e450:	e0bffe17 	ldw	r2,-8(fp)
   1e454:	10800044 	addi	r2,r2,1
   1e458:	e0bffe15 	stw	r2,-8(fp)
   1e45c:	d0a00e97 	ldw	r2,-32710(gp)
   1e460:	1007883a 	mov	r3,r2
   1e464:	e0bffe17 	ldw	r2,-8(fp)
   1e468:	18bfdf2e 	bgeu	r3,r2,1e3e8 <__alt_data_end+0xf001e3e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1e46c:	0005883a 	mov	r2,zero
}
   1e470:	e037883a 	mov	sp,fp
   1e474:	df000017 	ldw	fp,0(sp)
   1e478:	dec00104 	addi	sp,sp,4
   1e47c:	f800283a 	ret

0001e480 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1e480:	defff604 	addi	sp,sp,-40
   1e484:	dfc00915 	stw	ra,36(sp)
   1e488:	df000815 	stw	fp,32(sp)
   1e48c:	df000804 	addi	fp,sp,32
   1e490:	e13ffd15 	stw	r4,-12(fp)
   1e494:	e17ffe15 	stw	r5,-8(fp)
   1e498:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1e49c:	00bfffc4 	movi	r2,-1
   1e4a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1e4a4:	00bffb44 	movi	r2,-19
   1e4a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1e4ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1e4b0:	d1600c84 	addi	r5,gp,-32718
   1e4b4:	e13ffd17 	ldw	r4,-12(fp)
   1e4b8:	001e0f40 	call	1e0f4 <alt_find_dev>
   1e4bc:	e0bff815 	stw	r2,-32(fp)
   1e4c0:	e0bff817 	ldw	r2,-32(fp)
   1e4c4:	1000051e 	bne	r2,zero,1e4dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1e4c8:	e13ffd17 	ldw	r4,-12(fp)
   1e4cc:	001f1b00 	call	1f1b0 <alt_find_file>
   1e4d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1e4d4:	00800044 	movi	r2,1
   1e4d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1e4dc:	e0bff817 	ldw	r2,-32(fp)
   1e4e0:	10002926 	beq	r2,zero,1e588 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1e4e4:	e13ff817 	ldw	r4,-32(fp)
   1e4e8:	001f2b80 	call	1f2b8 <alt_get_fd>
   1e4ec:	e0bff915 	stw	r2,-28(fp)
   1e4f0:	e0bff917 	ldw	r2,-28(fp)
   1e4f4:	1000030e 	bge	r2,zero,1e504 <open+0x84>
    {
      status = index;
   1e4f8:	e0bff917 	ldw	r2,-28(fp)
   1e4fc:	e0bffa15 	stw	r2,-24(fp)
   1e500:	00002306 	br	1e590 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1e504:	e0bff917 	ldw	r2,-28(fp)
   1e508:	10c00324 	muli	r3,r2,12
   1e50c:	00820034 	movhi	r2,2048
   1e510:	1084ed04 	addi	r2,r2,5044
   1e514:	1885883a 	add	r2,r3,r2
   1e518:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1e51c:	e0fffe17 	ldw	r3,-8(fp)
   1e520:	00900034 	movhi	r2,16384
   1e524:	10bfffc4 	addi	r2,r2,-1
   1e528:	1886703a 	and	r3,r3,r2
   1e52c:	e0bffc17 	ldw	r2,-16(fp)
   1e530:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1e534:	e0bffb17 	ldw	r2,-20(fp)
   1e538:	1000051e 	bne	r2,zero,1e550 <open+0xd0>
   1e53c:	e13ffc17 	ldw	r4,-16(fp)
   1e540:	001e3bc0 	call	1e3bc <alt_file_locked>
   1e544:	e0bffa15 	stw	r2,-24(fp)
   1e548:	e0bffa17 	ldw	r2,-24(fp)
   1e54c:	10001016 	blt	r2,zero,1e590 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1e550:	e0bff817 	ldw	r2,-32(fp)
   1e554:	10800317 	ldw	r2,12(r2)
   1e558:	10000826 	beq	r2,zero,1e57c <open+0xfc>
   1e55c:	e0bff817 	ldw	r2,-32(fp)
   1e560:	10800317 	ldw	r2,12(r2)
   1e564:	e1ffff17 	ldw	r7,-4(fp)
   1e568:	e1bffe17 	ldw	r6,-8(fp)
   1e56c:	e17ffd17 	ldw	r5,-12(fp)
   1e570:	e13ffc17 	ldw	r4,-16(fp)
   1e574:	103ee83a 	callr	r2
   1e578:	00000106 	br	1e580 <open+0x100>
   1e57c:	0005883a 	mov	r2,zero
   1e580:	e0bffa15 	stw	r2,-24(fp)
   1e584:	00000206 	br	1e590 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1e588:	00bffb44 	movi	r2,-19
   1e58c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1e590:	e0bffa17 	ldw	r2,-24(fp)
   1e594:	1000090e 	bge	r2,zero,1e5bc <open+0x13c>
  {
    alt_release_fd (index);  
   1e598:	e13ff917 	ldw	r4,-28(fp)
   1e59c:	00179ac0 	call	179ac <alt_release_fd>
    ALT_ERRNO = -status;
   1e5a0:	001e3800 	call	1e380 <alt_get_errno>
   1e5a4:	1007883a 	mov	r3,r2
   1e5a8:	e0bffa17 	ldw	r2,-24(fp)
   1e5ac:	0085c83a 	sub	r2,zero,r2
   1e5b0:	18800015 	stw	r2,0(r3)
    return -1;
   1e5b4:	00bfffc4 	movi	r2,-1
   1e5b8:	00000106 	br	1e5c0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1e5bc:	e0bff917 	ldw	r2,-28(fp)
}
   1e5c0:	e037883a 	mov	sp,fp
   1e5c4:	dfc00117 	ldw	ra,4(sp)
   1e5c8:	df000017 	ldw	fp,0(sp)
   1e5cc:	dec00204 	addi	sp,sp,8
   1e5d0:	f800283a 	ret

0001e5d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1e5d4:	defffa04 	addi	sp,sp,-24
   1e5d8:	df000515 	stw	fp,20(sp)
   1e5dc:	df000504 	addi	fp,sp,20
   1e5e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e5e4:	0005303a 	rdctl	r2,status
   1e5e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e5ec:	e0fffc17 	ldw	r3,-16(fp)
   1e5f0:	00bfff84 	movi	r2,-2
   1e5f4:	1884703a 	and	r2,r3,r2
   1e5f8:	1001703a 	wrctl	status,r2
  
  return context;
   1e5fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1e600:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1e604:	e0bfff17 	ldw	r2,-4(fp)
   1e608:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1e60c:	e0bffd17 	ldw	r2,-12(fp)
   1e610:	10800017 	ldw	r2,0(r2)
   1e614:	e0fffd17 	ldw	r3,-12(fp)
   1e618:	18c00117 	ldw	r3,4(r3)
   1e61c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1e620:	e0bffd17 	ldw	r2,-12(fp)
   1e624:	10800117 	ldw	r2,4(r2)
   1e628:	e0fffd17 	ldw	r3,-12(fp)
   1e62c:	18c00017 	ldw	r3,0(r3)
   1e630:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1e634:	e0bffd17 	ldw	r2,-12(fp)
   1e638:	e0fffd17 	ldw	r3,-12(fp)
   1e63c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1e640:	e0bffd17 	ldw	r2,-12(fp)
   1e644:	e0fffd17 	ldw	r3,-12(fp)
   1e648:	10c00015 	stw	r3,0(r2)
   1e64c:	e0bffb17 	ldw	r2,-20(fp)
   1e650:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e654:	e0bffe17 	ldw	r2,-8(fp)
   1e658:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1e65c:	0001883a 	nop
   1e660:	e037883a 	mov	sp,fp
   1e664:	df000017 	ldw	fp,0(sp)
   1e668:	dec00104 	addi	sp,sp,4
   1e66c:	f800283a 	ret

0001e670 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1e670:	defffb04 	addi	sp,sp,-20
   1e674:	dfc00415 	stw	ra,16(sp)
   1e678:	df000315 	stw	fp,12(sp)
   1e67c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1e680:	d0a01597 	ldw	r2,-32682(gp)
   1e684:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1e688:	d0a05697 	ldw	r2,-32422(gp)
   1e68c:	10800044 	addi	r2,r2,1
   1e690:	d0a05695 	stw	r2,-32422(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1e694:	00002e06 	br	1e750 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1e698:	e0bffd17 	ldw	r2,-12(fp)
   1e69c:	10800017 	ldw	r2,0(r2)
   1e6a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1e6a4:	e0bffd17 	ldw	r2,-12(fp)
   1e6a8:	10800403 	ldbu	r2,16(r2)
   1e6ac:	10803fcc 	andi	r2,r2,255
   1e6b0:	10000426 	beq	r2,zero,1e6c4 <alt_tick+0x54>
   1e6b4:	d0a05697 	ldw	r2,-32422(gp)
   1e6b8:	1000021e 	bne	r2,zero,1e6c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1e6bc:	e0bffd17 	ldw	r2,-12(fp)
   1e6c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1e6c4:	e0bffd17 	ldw	r2,-12(fp)
   1e6c8:	10800217 	ldw	r2,8(r2)
   1e6cc:	d0e05697 	ldw	r3,-32422(gp)
   1e6d0:	18801d36 	bltu	r3,r2,1e748 <alt_tick+0xd8>
   1e6d4:	e0bffd17 	ldw	r2,-12(fp)
   1e6d8:	10800403 	ldbu	r2,16(r2)
   1e6dc:	10803fcc 	andi	r2,r2,255
   1e6e0:	1000191e 	bne	r2,zero,1e748 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1e6e4:	e0bffd17 	ldw	r2,-12(fp)
   1e6e8:	10800317 	ldw	r2,12(r2)
   1e6ec:	e0fffd17 	ldw	r3,-12(fp)
   1e6f0:	18c00517 	ldw	r3,20(r3)
   1e6f4:	1809883a 	mov	r4,r3
   1e6f8:	103ee83a 	callr	r2
   1e6fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1e700:	e0bfff17 	ldw	r2,-4(fp)
   1e704:	1000031e 	bne	r2,zero,1e714 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1e708:	e13ffd17 	ldw	r4,-12(fp)
   1e70c:	001e5d40 	call	1e5d4 <alt_alarm_stop>
   1e710:	00000d06 	br	1e748 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1e714:	e0bffd17 	ldw	r2,-12(fp)
   1e718:	10c00217 	ldw	r3,8(r2)
   1e71c:	e0bfff17 	ldw	r2,-4(fp)
   1e720:	1887883a 	add	r3,r3,r2
   1e724:	e0bffd17 	ldw	r2,-12(fp)
   1e728:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1e72c:	e0bffd17 	ldw	r2,-12(fp)
   1e730:	10c00217 	ldw	r3,8(r2)
   1e734:	d0a05697 	ldw	r2,-32422(gp)
   1e738:	1880032e 	bgeu	r3,r2,1e748 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1e73c:	e0bffd17 	ldw	r2,-12(fp)
   1e740:	00c00044 	movi	r3,1
   1e744:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1e748:	e0bffe17 	ldw	r2,-8(fp)
   1e74c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1e750:	e0fffd17 	ldw	r3,-12(fp)
   1e754:	d0a01584 	addi	r2,gp,-32682
   1e758:	18bfcf1e 	bne	r3,r2,1e698 <__alt_data_end+0xf001e698>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1e75c:	0001883a 	nop
}
   1e760:	0001883a 	nop
   1e764:	e037883a 	mov	sp,fp
   1e768:	dfc00117 	ldw	ra,4(sp)
   1e76c:	df000017 	ldw	fp,0(sp)
   1e770:	dec00204 	addi	sp,sp,8
   1e774:	f800283a 	ret

0001e778 <usleep>:
   1e778:	defffd04 	addi	sp,sp,-12
   1e77c:	dfc00215 	stw	ra,8(sp)
   1e780:	df000115 	stw	fp,4(sp)
   1e784:	df000104 	addi	fp,sp,4
   1e788:	e13fff15 	stw	r4,-4(fp)
   1e78c:	e13fff17 	ldw	r4,-4(fp)
   1e790:	001f0880 	call	1f088 <alt_busy_sleep>
   1e794:	e037883a 	mov	sp,fp
   1e798:	dfc00117 	ldw	ra,4(sp)
   1e79c:	df000017 	ldw	fp,0(sp)
   1e7a0:	dec00204 	addi	sp,sp,8
   1e7a4:	f800283a 	ret

0001e7a8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1e7a8:	deffff04 	addi	sp,sp,-4
   1e7ac:	df000015 	stw	fp,0(sp)
   1e7b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1e7b4:	000170fa 	wrctl	ienable,zero
}
   1e7b8:	0001883a 	nop
   1e7bc:	e037883a 	mov	sp,fp
   1e7c0:	df000017 	ldw	fp,0(sp)
   1e7c4:	dec00104 	addi	sp,sp,4
   1e7c8:	f800283a 	ret

0001e7cc <alt_program_amd>:
   1e7cc:	defff704 	addi	sp,sp,-36
   1e7d0:	dfc00815 	stw	ra,32(sp)
   1e7d4:	df000715 	stw	fp,28(sp)
   1e7d8:	df000704 	addi	fp,sp,28
   1e7dc:	e13ffc15 	stw	r4,-16(fp)
   1e7e0:	e17ffd15 	stw	r5,-12(fp)
   1e7e4:	e1bffe15 	stw	r6,-8(fp)
   1e7e8:	e1ffff15 	stw	r7,-4(fp)
   1e7ec:	e03ffa15 	stw	zero,-24(fp)
   1e7f0:	e0bffc17 	ldw	r2,-16(fp)
   1e7f4:	e0bffb15 	stw	r2,-20(fp)
   1e7f8:	008000b4 	movhi	r2,2
   1e7fc:	10bad804 	addi	r2,r2,-5280
   1e800:	d8800015 	stw	r2,0(sp)
   1e804:	e1c00217 	ldw	r7,8(fp)
   1e808:	e1bfff17 	ldw	r6,-4(fp)
   1e80c:	e17ffe17 	ldw	r5,-8(fp)
   1e810:	e13ffb17 	ldw	r4,-20(fp)
   1e814:	001856c0 	call	1856c <alt_flash_program_block>
   1e818:	e0bffa15 	stw	r2,-24(fp)
   1e81c:	e0bffa17 	ldw	r2,-24(fp)
   1e820:	e037883a 	mov	sp,fp
   1e824:	dfc00117 	ldw	ra,4(sp)
   1e828:	df000017 	ldw	fp,0(sp)
   1e82c:	dec00204 	addi	sp,sp,8
   1e830:	f800283a 	ret

0001e834 <alt_erase_block_amd>:
   1e834:	defff804 	addi	sp,sp,-32
   1e838:	dfc00715 	stw	ra,28(sp)
   1e83c:	df000615 	stw	fp,24(sp)
   1e840:	df000604 	addi	fp,sp,24
   1e844:	e13ffe15 	stw	r4,-8(fp)
   1e848:	e17fff15 	stw	r5,-4(fp)
   1e84c:	e03ffa15 	stw	zero,-24(fp)
   1e850:	e0bffe17 	ldw	r2,-8(fp)
   1e854:	e0bffc15 	stw	r2,-16(fp)
   1e858:	e0bffc17 	ldw	r2,-16(fp)
   1e85c:	10803417 	ldw	r2,208(r2)
   1e860:	e0fffc17 	ldw	r3,-16(fp)
   1e864:	18c00a17 	ldw	r3,40(r3)
   1e868:	01802a84 	movi	r6,170
   1e86c:	01415544 	movi	r5,1365
   1e870:	1809883a 	mov	r4,r3
   1e874:	103ee83a 	callr	r2
   1e878:	e0bffc17 	ldw	r2,-16(fp)
   1e87c:	10803417 	ldw	r2,208(r2)
   1e880:	e0fffc17 	ldw	r3,-16(fp)
   1e884:	18c00a17 	ldw	r3,40(r3)
   1e888:	01801544 	movi	r6,85
   1e88c:	0140aa84 	movi	r5,682
   1e890:	1809883a 	mov	r4,r3
   1e894:	103ee83a 	callr	r2
   1e898:	e0bffc17 	ldw	r2,-16(fp)
   1e89c:	10803417 	ldw	r2,208(r2)
   1e8a0:	e0fffc17 	ldw	r3,-16(fp)
   1e8a4:	18c00a17 	ldw	r3,40(r3)
   1e8a8:	01802004 	movi	r6,128
   1e8ac:	01415544 	movi	r5,1365
   1e8b0:	1809883a 	mov	r4,r3
   1e8b4:	103ee83a 	callr	r2
   1e8b8:	e0bffc17 	ldw	r2,-16(fp)
   1e8bc:	10803417 	ldw	r2,208(r2)
   1e8c0:	e0fffc17 	ldw	r3,-16(fp)
   1e8c4:	18c00a17 	ldw	r3,40(r3)
   1e8c8:	01802a84 	movi	r6,170
   1e8cc:	01415544 	movi	r5,1365
   1e8d0:	1809883a 	mov	r4,r3
   1e8d4:	103ee83a 	callr	r2
   1e8d8:	e0bffc17 	ldw	r2,-16(fp)
   1e8dc:	10803417 	ldw	r2,208(r2)
   1e8e0:	e0fffc17 	ldw	r3,-16(fp)
   1e8e4:	18c00a17 	ldw	r3,40(r3)
   1e8e8:	01801544 	movi	r6,85
   1e8ec:	0140aa84 	movi	r5,682
   1e8f0:	1809883a 	mov	r4,r3
   1e8f4:	103ee83a 	callr	r2
   1e8f8:	e0bffc17 	ldw	r2,-16(fp)
   1e8fc:	10803617 	ldw	r2,216(r2)
   1e900:	e0fffc17 	ldw	r3,-16(fp)
   1e904:	19000a17 	ldw	r4,40(r3)
   1e908:	e0ffff17 	ldw	r3,-4(fp)
   1e90c:	20c7883a 	add	r3,r4,r3
   1e910:	01400c04 	movi	r5,48
   1e914:	1809883a 	mov	r4,r3
   1e918:	103ee83a 	callr	r2
   1e91c:	0109c404 	movi	r4,10000
   1e920:	001e7780 	call	1e778 <usleep>
   1e924:	00800c84 	movi	r2,50
   1e928:	e0bffb15 	stw	r2,-20(fp)
   1e92c:	e0bffc17 	ldw	r2,-16(fp)
   1e930:	10c00a17 	ldw	r3,40(r2)
   1e934:	e0bfff17 	ldw	r2,-4(fp)
   1e938:	1885883a 	add	r2,r3,r2
   1e93c:	10800023 	ldbuio	r2,0(r2)
   1e940:	10803fcc 	andi	r2,r2,255
   1e944:	e0bffd05 	stb	r2,-12(fp)
   1e948:	0100fa04 	movi	r4,1000
   1e94c:	001e7780 	call	1e778 <usleep>
   1e950:	e0bffb17 	ldw	r2,-20(fp)
   1e954:	10bfffc4 	addi	r2,r2,-1
   1e958:	e0bffb15 	stw	r2,-20(fp)
   1e95c:	e0bffd03 	ldbu	r2,-12(fp)
   1e960:	10803fcc 	andi	r2,r2,255
   1e964:	1080020c 	andi	r2,r2,8
   1e968:	1000021e 	bne	r2,zero,1e974 <alt_erase_block_amd+0x140>
   1e96c:	e0bffb17 	ldw	r2,-20(fp)
   1e970:	00bfee16 	blt	zero,r2,1e92c <__alt_data_end+0xf001e92c>
   1e974:	e0bffc17 	ldw	r2,-16(fp)
   1e978:	10803217 	ldw	r2,200(r2)
   1e97c:	e0bffb15 	stw	r2,-20(fp)
   1e980:	00001506 	br	1e9d8 <alt_erase_block_amd+0x1a4>
   1e984:	e0bffc17 	ldw	r2,-16(fp)
   1e988:	10c00a17 	ldw	r3,40(r2)
   1e98c:	e0bfff17 	ldw	r2,-4(fp)
   1e990:	1885883a 	add	r2,r3,r2
   1e994:	10800023 	ldbuio	r2,0(r2)
   1e998:	10803fcc 	andi	r2,r2,255
   1e99c:	e0bffd05 	stb	r2,-12(fp)
   1e9a0:	e0bffd03 	ldbu	r2,-12(fp)
   1e9a4:	10803fcc 	andi	r2,r2,255
   1e9a8:	1080201c 	xori	r2,r2,128
   1e9ac:	10bfe004 	addi	r2,r2,-128
   1e9b0:	10000b16 	blt	r2,zero,1e9e0 <alt_erase_block_amd+0x1ac>
   1e9b4:	e0bffd03 	ldbu	r2,-12(fp)
   1e9b8:	10803fcc 	andi	r2,r2,255
   1e9bc:	1080080c 	andi	r2,r2,32
   1e9c0:	1000071e 	bne	r2,zero,1e9e0 <alt_erase_block_amd+0x1ac>
   1e9c4:	0100fa04 	movi	r4,1000
   1e9c8:	001e7780 	call	1e778 <usleep>
   1e9cc:	e0bffb17 	ldw	r2,-20(fp)
   1e9d0:	10bf0604 	addi	r2,r2,-1000
   1e9d4:	e0bffb15 	stw	r2,-20(fp)
   1e9d8:	e0bffb17 	ldw	r2,-20(fp)
   1e9dc:	00bfe916 	blt	zero,r2,1e984 <__alt_data_end+0xf001e984>
   1e9e0:	e0bffb17 	ldw	r2,-20(fp)
   1e9e4:	00800316 	blt	zero,r2,1e9f4 <alt_erase_block_amd+0x1c0>
   1e9e8:	00bfe304 	movi	r2,-116
   1e9ec:	e0bffa15 	stw	r2,-24(fp)
   1e9f0:	00000e06 	br	1ea2c <alt_erase_block_amd+0x1f8>
   1e9f4:	e0bffc17 	ldw	r2,-16(fp)
   1e9f8:	10c00a17 	ldw	r3,40(r2)
   1e9fc:	e0bfff17 	ldw	r2,-4(fp)
   1ea00:	1885883a 	add	r2,r3,r2
   1ea04:	10800023 	ldbuio	r2,0(r2)
   1ea08:	10803fcc 	andi	r2,r2,255
   1ea0c:	e0bffd05 	stb	r2,-12(fp)
   1ea10:	e0bffd03 	ldbu	r2,-12(fp)
   1ea14:	10803fcc 	andi	r2,r2,255
   1ea18:	1080201c 	xori	r2,r2,128
   1ea1c:	10bfe004 	addi	r2,r2,-128
   1ea20:	10000216 	blt	r2,zero,1ea2c <alt_erase_block_amd+0x1f8>
   1ea24:	00bffec4 	movi	r2,-5
   1ea28:	e0bffa15 	stw	r2,-24(fp)
   1ea2c:	e0bffa17 	ldw	r2,-24(fp)
   1ea30:	e037883a 	mov	sp,fp
   1ea34:	dfc00117 	ldw	ra,4(sp)
   1ea38:	df000017 	ldw	fp,0(sp)
   1ea3c:	dec00204 	addi	sp,sp,8
   1ea40:	f800283a 	ret

0001ea44 <alt_wait_for_command_to_complete_amd>:
   1ea44:	defff804 	addi	sp,sp,-32
   1ea48:	dfc00715 	stw	ra,28(sp)
   1ea4c:	df000615 	stw	fp,24(sp)
   1ea50:	df000604 	addi	fp,sp,24
   1ea54:	e13ffd15 	stw	r4,-12(fp)
   1ea58:	e17ffe15 	stw	r5,-8(fp)
   1ea5c:	3005883a 	mov	r2,r6
   1ea60:	e0bfff05 	stb	r2,-4(fp)
   1ea64:	e0bffd17 	ldw	r2,-12(fp)
   1ea68:	10803117 	ldw	r2,196(r2)
   1ea6c:	10801924 	muli	r2,r2,100
   1ea70:	e0bffa15 	stw	r2,-24(fp)
   1ea74:	e03ffb15 	stw	zero,-20(fp)
   1ea78:	e0bffd17 	ldw	r2,-12(fp)
   1ea7c:	10c00a17 	ldw	r3,40(r2)
   1ea80:	e0bffe17 	ldw	r2,-8(fp)
   1ea84:	1885883a 	add	r2,r3,r2
   1ea88:	10800023 	ldbuio	r2,0(r2)
   1ea8c:	10803fcc 	andi	r2,r2,255
   1ea90:	e0bffc05 	stb	r2,-16(fp)
   1ea94:	00001606 	br	1eaf0 <alt_wait_for_command_to_complete_amd+0xac>
   1ea98:	e0bffc03 	ldbu	r2,-16(fp)
   1ea9c:	10c03fcc 	andi	r3,r2,255
   1eaa0:	e0bfff03 	ldbu	r2,-4(fp)
   1eaa4:	1884f03a 	xor	r2,r3,r2
   1eaa8:	1080200c 	andi	r2,r2,128
   1eaac:	10001226 	beq	r2,zero,1eaf8 <alt_wait_for_command_to_complete_amd+0xb4>
   1eab0:	e0bffc03 	ldbu	r2,-16(fp)
   1eab4:	10803fcc 	andi	r2,r2,255
   1eab8:	1080080c 	andi	r2,r2,32
   1eabc:	10000e1e 	bne	r2,zero,1eaf8 <alt_wait_for_command_to_complete_amd+0xb4>
   1eac0:	01000044 	movi	r4,1
   1eac4:	001e7780 	call	1e778 <usleep>
   1eac8:	e0bffa17 	ldw	r2,-24(fp)
   1eacc:	10bfffc4 	addi	r2,r2,-1
   1ead0:	e0bffa15 	stw	r2,-24(fp)
   1ead4:	e0bffd17 	ldw	r2,-12(fp)
   1ead8:	10c00a17 	ldw	r3,40(r2)
   1eadc:	e0bffe17 	ldw	r2,-8(fp)
   1eae0:	1885883a 	add	r2,r3,r2
   1eae4:	10800023 	ldbuio	r2,0(r2)
   1eae8:	10803fcc 	andi	r2,r2,255
   1eaec:	e0bffc05 	stb	r2,-16(fp)
   1eaf0:	e0bffa17 	ldw	r2,-24(fp)
   1eaf4:	00bfe816 	blt	zero,r2,1ea98 <__alt_data_end+0xf001ea98>
   1eaf8:	e0bffa17 	ldw	r2,-24(fp)
   1eafc:	1000031e 	bne	r2,zero,1eb0c <alt_wait_for_command_to_complete_amd+0xc8>
   1eb00:	00bfe304 	movi	r2,-116
   1eb04:	e0bffb15 	stw	r2,-20(fp)
   1eb08:	00000f06 	br	1eb48 <alt_wait_for_command_to_complete_amd+0x104>
   1eb0c:	e0bffd17 	ldw	r2,-12(fp)
   1eb10:	10c00a17 	ldw	r3,40(r2)
   1eb14:	e0bffe17 	ldw	r2,-8(fp)
   1eb18:	1885883a 	add	r2,r3,r2
   1eb1c:	10800023 	ldbuio	r2,0(r2)
   1eb20:	10803fcc 	andi	r2,r2,255
   1eb24:	e0bffc05 	stb	r2,-16(fp)
   1eb28:	e0bffc03 	ldbu	r2,-16(fp)
   1eb2c:	10c03fcc 	andi	r3,r2,255
   1eb30:	e0bfff03 	ldbu	r2,-4(fp)
   1eb34:	1884f03a 	xor	r2,r3,r2
   1eb38:	1080200c 	andi	r2,r2,128
   1eb3c:	10000226 	beq	r2,zero,1eb48 <alt_wait_for_command_to_complete_amd+0x104>
   1eb40:	00bffec4 	movi	r2,-5
   1eb44:	e0bffb15 	stw	r2,-20(fp)
   1eb48:	e0bffb17 	ldw	r2,-20(fp)
   1eb4c:	e037883a 	mov	sp,fp
   1eb50:	dfc00117 	ldw	ra,4(sp)
   1eb54:	df000017 	ldw	fp,0(sp)
   1eb58:	dec00204 	addi	sp,sp,8
   1eb5c:	f800283a 	ret

0001eb60 <alt_write_word_amd>:
   1eb60:	defff904 	addi	sp,sp,-28
   1eb64:	dfc00615 	stw	ra,24(sp)
   1eb68:	df000515 	stw	fp,20(sp)
   1eb6c:	df000504 	addi	fp,sp,20
   1eb70:	e13ffd15 	stw	r4,-12(fp)
   1eb74:	e17ffe15 	stw	r5,-8(fp)
   1eb78:	e1bfff15 	stw	r6,-4(fp)
   1eb7c:	e03ffb15 	stw	zero,-20(fp)
   1eb80:	e0bffd17 	ldw	r2,-12(fp)
   1eb84:	10803417 	ldw	r2,208(r2)
   1eb88:	e0fffd17 	ldw	r3,-12(fp)
   1eb8c:	18c00a17 	ldw	r3,40(r3)
   1eb90:	01802a84 	movi	r6,170
   1eb94:	01415544 	movi	r5,1365
   1eb98:	1809883a 	mov	r4,r3
   1eb9c:	103ee83a 	callr	r2
   1eba0:	e0bffd17 	ldw	r2,-12(fp)
   1eba4:	10803417 	ldw	r2,208(r2)
   1eba8:	e0fffd17 	ldw	r3,-12(fp)
   1ebac:	18c00a17 	ldw	r3,40(r3)
   1ebb0:	01801544 	movi	r6,85
   1ebb4:	0140aa84 	movi	r5,682
   1ebb8:	1809883a 	mov	r4,r3
   1ebbc:	103ee83a 	callr	r2
   1ebc0:	e0bffd17 	ldw	r2,-12(fp)
   1ebc4:	10803417 	ldw	r2,208(r2)
   1ebc8:	e0fffd17 	ldw	r3,-12(fp)
   1ebcc:	18c00a17 	ldw	r3,40(r3)
   1ebd0:	01802804 	movi	r6,160
   1ebd4:	01415544 	movi	r5,1365
   1ebd8:	1809883a 	mov	r4,r3
   1ebdc:	103ee83a 	callr	r2
   1ebe0:	e0bfff17 	ldw	r2,-4(fp)
   1ebe4:	10800003 	ldbu	r2,0(r2)
   1ebe8:	e0bffc05 	stb	r2,-16(fp)
   1ebec:	e1bfff17 	ldw	r6,-4(fp)
   1ebf0:	e17ffe17 	ldw	r5,-8(fp)
   1ebf4:	e13ffd17 	ldw	r4,-12(fp)
   1ebf8:	00184100 	call	18410 <alt_write_value_to_flash>
   1ebfc:	e0bffc03 	ldbu	r2,-16(fp)
   1ec00:	100d883a 	mov	r6,r2
   1ec04:	e17ffe17 	ldw	r5,-8(fp)
   1ec08:	e13ffd17 	ldw	r4,-12(fp)
   1ec0c:	001ea440 	call	1ea44 <alt_wait_for_command_to_complete_amd>
   1ec10:	e0bffb15 	stw	r2,-20(fp)
   1ec14:	e0bffb17 	ldw	r2,-20(fp)
   1ec18:	e037883a 	mov	sp,fp
   1ec1c:	dfc00117 	ldw	ra,4(sp)
   1ec20:	df000017 	ldw	fp,0(sp)
   1ec24:	dec00204 	addi	sp,sp,8
   1ec28:	f800283a 	ret

0001ec2c <alt_program_intel>:
   1ec2c:	defff704 	addi	sp,sp,-36
   1ec30:	dfc00815 	stw	ra,32(sp)
   1ec34:	df000715 	stw	fp,28(sp)
   1ec38:	df000704 	addi	fp,sp,28
   1ec3c:	e13ffc15 	stw	r4,-16(fp)
   1ec40:	e17ffd15 	stw	r5,-12(fp)
   1ec44:	e1bffe15 	stw	r6,-8(fp)
   1ec48:	e1ffff15 	stw	r7,-4(fp)
   1ec4c:	e03ffa15 	stw	zero,-24(fp)
   1ec50:	e0bffc17 	ldw	r2,-16(fp)
   1ec54:	e0bffb15 	stw	r2,-20(fp)
   1ec58:	e17ffd17 	ldw	r5,-12(fp)
   1ec5c:	e13ffb17 	ldw	r4,-20(fp)
   1ec60:	001ee380 	call	1ee38 <alt_unlock_block_intel>
   1ec64:	e0bffa15 	stw	r2,-24(fp)
   1ec68:	e0bffa17 	ldw	r2,-24(fp)
   1ec6c:	1000091e 	bne	r2,zero,1ec94 <alt_program_intel+0x68>
   1ec70:	008000b4 	movhi	r2,2
   1ec74:	10bbed04 	addi	r2,r2,-4172
   1ec78:	d8800015 	stw	r2,0(sp)
   1ec7c:	e1c00217 	ldw	r7,8(fp)
   1ec80:	e1bfff17 	ldw	r6,-4(fp)
   1ec84:	e17ffe17 	ldw	r5,-8(fp)
   1ec88:	e13ffb17 	ldw	r4,-20(fp)
   1ec8c:	001856c0 	call	1856c <alt_flash_program_block>
   1ec90:	e0bffa15 	stw	r2,-24(fp)
   1ec94:	e0bffa17 	ldw	r2,-24(fp)
   1ec98:	e037883a 	mov	sp,fp
   1ec9c:	dfc00117 	ldw	ra,4(sp)
   1eca0:	df000017 	ldw	fp,0(sp)
   1eca4:	dec00204 	addi	sp,sp,8
   1eca8:	f800283a 	ret

0001ecac <alt_erase_block_intel>:
   1ecac:	defff804 	addi	sp,sp,-32
   1ecb0:	dfc00715 	stw	ra,28(sp)
   1ecb4:	df000615 	stw	fp,24(sp)
   1ecb8:	df000604 	addi	fp,sp,24
   1ecbc:	e13ffe15 	stw	r4,-8(fp)
   1ecc0:	e17fff15 	stw	r5,-4(fp)
   1ecc4:	e03ffa15 	stw	zero,-24(fp)
   1ecc8:	e0bffe17 	ldw	r2,-8(fp)
   1eccc:	e0bffc15 	stw	r2,-16(fp)
   1ecd0:	e0bffc17 	ldw	r2,-16(fp)
   1ecd4:	10803217 	ldw	r2,200(r2)
   1ecd8:	e0bffb15 	stw	r2,-20(fp)
   1ecdc:	e17fff17 	ldw	r5,-4(fp)
   1ece0:	e13ffc17 	ldw	r4,-16(fp)
   1ece4:	001ee380 	call	1ee38 <alt_unlock_block_intel>
   1ece8:	e0bffa15 	stw	r2,-24(fp)
   1ecec:	e0bffa17 	ldw	r2,-24(fp)
   1ecf0:	10004b1e 	bne	r2,zero,1ee20 <alt_erase_block_intel+0x174>
   1ecf4:	e0bffc17 	ldw	r2,-16(fp)
   1ecf8:	10803617 	ldw	r2,216(r2)
   1ecfc:	e0fffc17 	ldw	r3,-16(fp)
   1ed00:	19000a17 	ldw	r4,40(r3)
   1ed04:	e0ffff17 	ldw	r3,-4(fp)
   1ed08:	20c7883a 	add	r3,r4,r3
   1ed0c:	01401404 	movi	r5,80
   1ed10:	1809883a 	mov	r4,r3
   1ed14:	103ee83a 	callr	r2
   1ed18:	e0bffc17 	ldw	r2,-16(fp)
   1ed1c:	10803617 	ldw	r2,216(r2)
   1ed20:	e0fffc17 	ldw	r3,-16(fp)
   1ed24:	19000a17 	ldw	r4,40(r3)
   1ed28:	e0ffff17 	ldw	r3,-4(fp)
   1ed2c:	20c7883a 	add	r3,r4,r3
   1ed30:	01400804 	movi	r5,32
   1ed34:	1809883a 	mov	r4,r3
   1ed38:	103ee83a 	callr	r2
   1ed3c:	e0bffc17 	ldw	r2,-16(fp)
   1ed40:	10803617 	ldw	r2,216(r2)
   1ed44:	e0fffc17 	ldw	r3,-16(fp)
   1ed48:	19000a17 	ldw	r4,40(r3)
   1ed4c:	e0ffff17 	ldw	r3,-4(fp)
   1ed50:	20c7883a 	add	r3,r4,r3
   1ed54:	01403404 	movi	r5,208
   1ed58:	1809883a 	mov	r4,r3
   1ed5c:	103ee83a 	callr	r2
   1ed60:	e0bffc17 	ldw	r2,-16(fp)
   1ed64:	10c00a17 	ldw	r3,40(r2)
   1ed68:	e0bfff17 	ldw	r2,-4(fp)
   1ed6c:	1885883a 	add	r2,r3,r2
   1ed70:	10800023 	ldbuio	r2,0(r2)
   1ed74:	10803fcc 	andi	r2,r2,255
   1ed78:	e0bffd05 	stb	r2,-12(fp)
   1ed7c:	e0bffd03 	ldbu	r2,-12(fp)
   1ed80:	10803fcc 	andi	r2,r2,255
   1ed84:	1080201c 	xori	r2,r2,128
   1ed88:	10bfe004 	addi	r2,r2,-128
   1ed8c:	10000816 	blt	r2,zero,1edb0 <alt_erase_block_intel+0x104>
   1ed90:	0100fa04 	movi	r4,1000
   1ed94:	001e7780 	call	1e778 <usleep>
   1ed98:	e0bffb17 	ldw	r2,-20(fp)
   1ed9c:	10bf0604 	addi	r2,r2,-1000
   1eda0:	e0bffb15 	stw	r2,-20(fp)
   1eda4:	e0bffb17 	ldw	r2,-20(fp)
   1eda8:	00bfed16 	blt	zero,r2,1ed60 <__alt_data_end+0xf001ed60>
   1edac:	00000106 	br	1edb4 <alt_erase_block_intel+0x108>
   1edb0:	0001883a 	nop
   1edb4:	e0bffb17 	ldw	r2,-20(fp)
   1edb8:	00800316 	blt	zero,r2,1edc8 <alt_erase_block_intel+0x11c>
   1edbc:	00bfe304 	movi	r2,-116
   1edc0:	e0bffa15 	stw	r2,-24(fp)
   1edc4:	00000d06 	br	1edfc <alt_erase_block_intel+0x150>
   1edc8:	e0bffd03 	ldbu	r2,-12(fp)
   1edcc:	10803fcc 	andi	r2,r2,255
   1edd0:	10801fcc 	andi	r2,r2,127
   1edd4:	10000926 	beq	r2,zero,1edfc <alt_erase_block_intel+0x150>
   1edd8:	00bffec4 	movi	r2,-5
   1eddc:	e0bffa15 	stw	r2,-24(fp)
   1ede0:	e0bffc17 	ldw	r2,-16(fp)
   1ede4:	10c00a17 	ldw	r3,40(r2)
   1ede8:	e0bfff17 	ldw	r2,-4(fp)
   1edec:	1885883a 	add	r2,r3,r2
   1edf0:	10800023 	ldbuio	r2,0(r2)
   1edf4:	10803fcc 	andi	r2,r2,255
   1edf8:	e0bffd05 	stb	r2,-12(fp)
   1edfc:	e0bffc17 	ldw	r2,-16(fp)
   1ee00:	10803617 	ldw	r2,216(r2)
   1ee04:	e0fffc17 	ldw	r3,-16(fp)
   1ee08:	19000a17 	ldw	r4,40(r3)
   1ee0c:	e0ffff17 	ldw	r3,-4(fp)
   1ee10:	20c7883a 	add	r3,r4,r3
   1ee14:	01403fc4 	movi	r5,255
   1ee18:	1809883a 	mov	r4,r3
   1ee1c:	103ee83a 	callr	r2
   1ee20:	e0bffa17 	ldw	r2,-24(fp)
   1ee24:	e037883a 	mov	sp,fp
   1ee28:	dfc00117 	ldw	ra,4(sp)
   1ee2c:	df000017 	ldw	fp,0(sp)
   1ee30:	dec00204 	addi	sp,sp,8
   1ee34:	f800283a 	ret

0001ee38 <alt_unlock_block_intel>:
   1ee38:	defff904 	addi	sp,sp,-28
   1ee3c:	dfc00615 	stw	ra,24(sp)
   1ee40:	df000515 	stw	fp,20(sp)
   1ee44:	df000504 	addi	fp,sp,20
   1ee48:	e13ffe15 	stw	r4,-8(fp)
   1ee4c:	e17fff15 	stw	r5,-4(fp)
   1ee50:	e03ffb15 	stw	zero,-20(fp)
   1ee54:	e0bffe17 	ldw	r2,-8(fp)
   1ee58:	10803117 	ldw	r2,196(r2)
   1ee5c:	10801924 	muli	r2,r2,100
   1ee60:	e0bffc15 	stw	r2,-16(fp)
   1ee64:	e0bffe17 	ldw	r2,-8(fp)
   1ee68:	10803617 	ldw	r2,216(r2)
   1ee6c:	e0fffe17 	ldw	r3,-8(fp)
   1ee70:	19000a17 	ldw	r4,40(r3)
   1ee74:	e0ffff17 	ldw	r3,-4(fp)
   1ee78:	20c7883a 	add	r3,r4,r3
   1ee7c:	01402404 	movi	r5,144
   1ee80:	1809883a 	mov	r4,r3
   1ee84:	103ee83a 	callr	r2
   1ee88:	e0bffe17 	ldw	r2,-8(fp)
   1ee8c:	10c00a17 	ldw	r3,40(r2)
   1ee90:	e0bfff17 	ldw	r2,-4(fp)
   1ee94:	10800104 	addi	r2,r2,4
   1ee98:	1885883a 	add	r2,r3,r2
   1ee9c:	10800023 	ldbuio	r2,0(r2)
   1eea0:	10803fcc 	andi	r2,r2,255
   1eea4:	e0bffd05 	stb	r2,-12(fp)
   1eea8:	e0bffd03 	ldbu	r2,-12(fp)
   1eeac:	1080004c 	andi	r2,r2,1
   1eeb0:	10003126 	beq	r2,zero,1ef78 <alt_unlock_block_intel+0x140>
   1eeb4:	e0bffe17 	ldw	r2,-8(fp)
   1eeb8:	10803617 	ldw	r2,216(r2)
   1eebc:	e0fffe17 	ldw	r3,-8(fp)
   1eec0:	19000a17 	ldw	r4,40(r3)
   1eec4:	e0ffff17 	ldw	r3,-4(fp)
   1eec8:	20c7883a 	add	r3,r4,r3
   1eecc:	01401804 	movi	r5,96
   1eed0:	1809883a 	mov	r4,r3
   1eed4:	103ee83a 	callr	r2
   1eed8:	e0bffe17 	ldw	r2,-8(fp)
   1eedc:	10803617 	ldw	r2,216(r2)
   1eee0:	e0fffe17 	ldw	r3,-8(fp)
   1eee4:	19000a17 	ldw	r4,40(r3)
   1eee8:	e0ffff17 	ldw	r3,-4(fp)
   1eeec:	20c7883a 	add	r3,r4,r3
   1eef0:	01403404 	movi	r5,208
   1eef4:	1809883a 	mov	r4,r3
   1eef8:	103ee83a 	callr	r2
   1eefc:	e0bffe17 	ldw	r2,-8(fp)
   1ef00:	10c00a17 	ldw	r3,40(r2)
   1ef04:	e0bfff17 	ldw	r2,-4(fp)
   1ef08:	1885883a 	add	r2,r3,r2
   1ef0c:	10800023 	ldbuio	r2,0(r2)
   1ef10:	10803fcc 	andi	r2,r2,255
   1ef14:	e0bffd45 	stb	r2,-11(fp)
   1ef18:	e0bffd43 	ldbu	r2,-11(fp)
   1ef1c:	10803fcc 	andi	r2,r2,255
   1ef20:	1080201c 	xori	r2,r2,128
   1ef24:	10bfe004 	addi	r2,r2,-128
   1ef28:	10000816 	blt	r2,zero,1ef4c <alt_unlock_block_intel+0x114>
   1ef2c:	e0bffc17 	ldw	r2,-16(fp)
   1ef30:	10bfffc4 	addi	r2,r2,-1
   1ef34:	e0bffc15 	stw	r2,-16(fp)
   1ef38:	01000044 	movi	r4,1
   1ef3c:	001e7780 	call	1e778 <usleep>
   1ef40:	e0bffc17 	ldw	r2,-16(fp)
   1ef44:	00bfed16 	blt	zero,r2,1eefc <__alt_data_end+0xf001eefc>
   1ef48:	00000106 	br	1ef50 <alt_unlock_block_intel+0x118>
   1ef4c:	0001883a 	nop
   1ef50:	e0bffc17 	ldw	r2,-16(fp)
   1ef54:	1000031e 	bne	r2,zero,1ef64 <alt_unlock_block_intel+0x12c>
   1ef58:	00bfe304 	movi	r2,-116
   1ef5c:	e0bffb15 	stw	r2,-20(fp)
   1ef60:	00000506 	br	1ef78 <alt_unlock_block_intel+0x140>
   1ef64:	e0bffd43 	ldbu	r2,-11(fp)
   1ef68:	10801fcc 	andi	r2,r2,127
   1ef6c:	10000226 	beq	r2,zero,1ef78 <alt_unlock_block_intel+0x140>
   1ef70:	00bffec4 	movi	r2,-5
   1ef74:	e0bffb15 	stw	r2,-20(fp)
   1ef78:	e0bffe17 	ldw	r2,-8(fp)
   1ef7c:	10803617 	ldw	r2,216(r2)
   1ef80:	e0fffe17 	ldw	r3,-8(fp)
   1ef84:	19000a17 	ldw	r4,40(r3)
   1ef88:	e0ffff17 	ldw	r3,-4(fp)
   1ef8c:	20c7883a 	add	r3,r4,r3
   1ef90:	01403fc4 	movi	r5,255
   1ef94:	1809883a 	mov	r4,r3
   1ef98:	103ee83a 	callr	r2
   1ef9c:	e0bffb17 	ldw	r2,-20(fp)
   1efa0:	e037883a 	mov	sp,fp
   1efa4:	dfc00117 	ldw	ra,4(sp)
   1efa8:	df000017 	ldw	fp,0(sp)
   1efac:	dec00204 	addi	sp,sp,8
   1efb0:	f800283a 	ret

0001efb4 <alt_write_word_intel>:
   1efb4:	defff904 	addi	sp,sp,-28
   1efb8:	dfc00615 	stw	ra,24(sp)
   1efbc:	df000515 	stw	fp,20(sp)
   1efc0:	df000504 	addi	fp,sp,20
   1efc4:	e13ffd15 	stw	r4,-12(fp)
   1efc8:	e17ffe15 	stw	r5,-8(fp)
   1efcc:	e1bfff15 	stw	r6,-4(fp)
   1efd0:	e03ffb15 	stw	zero,-20(fp)
   1efd4:	e0bffd17 	ldw	r2,-12(fp)
   1efd8:	10803617 	ldw	r2,216(r2)
   1efdc:	e0fffd17 	ldw	r3,-12(fp)
   1efe0:	19000a17 	ldw	r4,40(r3)
   1efe4:	e0fffe17 	ldw	r3,-8(fp)
   1efe8:	20c7883a 	add	r3,r4,r3
   1efec:	01401004 	movi	r5,64
   1eff0:	1809883a 	mov	r4,r3
   1eff4:	103ee83a 	callr	r2
   1eff8:	e1bfff17 	ldw	r6,-4(fp)
   1effc:	e17ffe17 	ldw	r5,-8(fp)
   1f000:	e13ffd17 	ldw	r4,-12(fp)
   1f004:	00184100 	call	18410 <alt_write_value_to_flash>
   1f008:	e0bffd17 	ldw	r2,-12(fp)
   1f00c:	10c00a17 	ldw	r3,40(r2)
   1f010:	e0bffe17 	ldw	r2,-8(fp)
   1f014:	1885883a 	add	r2,r3,r2
   1f018:	10800023 	ldbuio	r2,0(r2)
   1f01c:	10803fcc 	andi	r2,r2,255
   1f020:	e0bffc05 	stb	r2,-16(fp)
   1f024:	e0bffc03 	ldbu	r2,-16(fp)
   1f028:	10803fcc 	andi	r2,r2,255
   1f02c:	1080201c 	xori	r2,r2,128
   1f030:	10bfe004 	addi	r2,r2,-128
   1f034:	103ff40e 	bge	r2,zero,1f008 <__alt_data_end+0xf001f008>
   1f038:	e0bffc03 	ldbu	r2,-16(fp)
   1f03c:	10801fcc 	andi	r2,r2,127
   1f040:	10000226 	beq	r2,zero,1f04c <alt_write_word_intel+0x98>
   1f044:	00bffec4 	movi	r2,-5
   1f048:	e0bffb15 	stw	r2,-20(fp)
   1f04c:	e0bffd17 	ldw	r2,-12(fp)
   1f050:	10803617 	ldw	r2,216(r2)
   1f054:	e0fffd17 	ldw	r3,-12(fp)
   1f058:	19000a17 	ldw	r4,40(r3)
   1f05c:	e0fffe17 	ldw	r3,-8(fp)
   1f060:	20c7883a 	add	r3,r4,r3
   1f064:	01403fc4 	movi	r5,255
   1f068:	1809883a 	mov	r4,r3
   1f06c:	103ee83a 	callr	r2
   1f070:	e0bffb17 	ldw	r2,-20(fp)
   1f074:	e037883a 	mov	sp,fp
   1f078:	dfc00117 	ldw	ra,4(sp)
   1f07c:	df000017 	ldw	fp,0(sp)
   1f080:	dec00204 	addi	sp,sp,8
   1f084:	f800283a 	ret

0001f088 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1f088:	defffb04 	addi	sp,sp,-20
   1f08c:	df000415 	stw	fp,16(sp)
   1f090:	df000404 	addi	fp,sp,16
   1f094:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   1f098:	008000c4 	movi	r2,3
   1f09c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1f0a0:	e0fffd17 	ldw	r3,-12(fp)
   1f0a4:	008003f4 	movhi	r2,15
   1f0a8:	10909004 	addi	r2,r2,16960
   1f0ac:	1887383a 	mul	r3,r3,r2
   1f0b0:	00817db4 	movhi	r2,1526
   1f0b4:	10b84004 	addi	r2,r2,-7936
   1f0b8:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1f0bc:	00a00034 	movhi	r2,32768
   1f0c0:	10bfffc4 	addi	r2,r2,-1
   1f0c4:	10c5203a 	divu	r2,r2,r3
   1f0c8:	e0ffff17 	ldw	r3,-4(fp)
   1f0cc:	1885203a 	divu	r2,r3,r2
   1f0d0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1f0d4:	e0bffe17 	ldw	r2,-8(fp)
   1f0d8:	10002526 	beq	r2,zero,1f170 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
   1f0dc:	e03ffc15 	stw	zero,-16(fp)
   1f0e0:	00001406 	br	1f134 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1f0e4:	00a00034 	movhi	r2,32768
   1f0e8:	10bfffc4 	addi	r2,r2,-1
   1f0ec:	10bfffc4 	addi	r2,r2,-1
   1f0f0:	103ffe1e 	bne	r2,zero,1f0ec <__alt_data_end+0xf001f0ec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1f0f4:	e0fffd17 	ldw	r3,-12(fp)
   1f0f8:	008003f4 	movhi	r2,15
   1f0fc:	10909004 	addi	r2,r2,16960
   1f100:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1f104:	00817db4 	movhi	r2,1526
   1f108:	10b84004 	addi	r2,r2,-7936
   1f10c:	10c7203a 	divu	r3,r2,r3
   1f110:	00a00034 	movhi	r2,32768
   1f114:	10bfffc4 	addi	r2,r2,-1
   1f118:	10c5203a 	divu	r2,r2,r3
   1f11c:	e0ffff17 	ldw	r3,-4(fp)
   1f120:	1885c83a 	sub	r2,r3,r2
   1f124:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1f128:	e0bffc17 	ldw	r2,-16(fp)
   1f12c:	10800044 	addi	r2,r2,1
   1f130:	e0bffc15 	stw	r2,-16(fp)
   1f134:	e0fffc17 	ldw	r3,-16(fp)
   1f138:	e0bffe17 	ldw	r2,-8(fp)
   1f13c:	18bfe916 	blt	r3,r2,1f0e4 <__alt_data_end+0xf001f0e4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1f140:	e0fffd17 	ldw	r3,-12(fp)
   1f144:	008003f4 	movhi	r2,15
   1f148:	10909004 	addi	r2,r2,16960
   1f14c:	1887383a 	mul	r3,r3,r2
   1f150:	00817db4 	movhi	r2,1526
   1f154:	10b84004 	addi	r2,r2,-7936
   1f158:	10c7203a 	divu	r3,r2,r3
   1f15c:	e0bfff17 	ldw	r2,-4(fp)
   1f160:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1f164:	10bfffc4 	addi	r2,r2,-1
   1f168:	103ffe1e 	bne	r2,zero,1f164 <__alt_data_end+0xf001f164>
   1f16c:	00000b06 	br	1f19c <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1f170:	e0fffd17 	ldw	r3,-12(fp)
   1f174:	008003f4 	movhi	r2,15
   1f178:	10909004 	addi	r2,r2,16960
   1f17c:	1887383a 	mul	r3,r3,r2
   1f180:	00817db4 	movhi	r2,1526
   1f184:	10b84004 	addi	r2,r2,-7936
   1f188:	10c7203a 	divu	r3,r2,r3
   1f18c:	e0bfff17 	ldw	r2,-4(fp)
   1f190:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1f194:	10bfffc4 	addi	r2,r2,-1
   1f198:	00bffe16 	blt	zero,r2,1f194 <__alt_data_end+0xf001f194>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1f19c:	0005883a 	mov	r2,zero
}
   1f1a0:	e037883a 	mov	sp,fp
   1f1a4:	df000017 	ldw	fp,0(sp)
   1f1a8:	dec00104 	addi	sp,sp,4
   1f1ac:	f800283a 	ret

0001f1b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1f1b0:	defffb04 	addi	sp,sp,-20
   1f1b4:	dfc00415 	stw	ra,16(sp)
   1f1b8:	df000315 	stw	fp,12(sp)
   1f1bc:	df000304 	addi	fp,sp,12
   1f1c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1f1c4:	d0a00a97 	ldw	r2,-32726(gp)
   1f1c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f1cc:	00003106 	br	1f294 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1f1d0:	e0bffd17 	ldw	r2,-12(fp)
   1f1d4:	10800217 	ldw	r2,8(r2)
   1f1d8:	1009883a 	mov	r4,r2
   1f1dc:	00095940 	call	9594 <strlen>
   1f1e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1f1e4:	e0bffd17 	ldw	r2,-12(fp)
   1f1e8:	10c00217 	ldw	r3,8(r2)
   1f1ec:	e0bffe17 	ldw	r2,-8(fp)
   1f1f0:	10bfffc4 	addi	r2,r2,-1
   1f1f4:	1885883a 	add	r2,r3,r2
   1f1f8:	10800003 	ldbu	r2,0(r2)
   1f1fc:	10803fcc 	andi	r2,r2,255
   1f200:	1080201c 	xori	r2,r2,128
   1f204:	10bfe004 	addi	r2,r2,-128
   1f208:	10800bd8 	cmpnei	r2,r2,47
   1f20c:	1000031e 	bne	r2,zero,1f21c <alt_find_file+0x6c>
    {
      len -= 1;
   1f210:	e0bffe17 	ldw	r2,-8(fp)
   1f214:	10bfffc4 	addi	r2,r2,-1
   1f218:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f21c:	e0bffe17 	ldw	r2,-8(fp)
   1f220:	e0ffff17 	ldw	r3,-4(fp)
   1f224:	1885883a 	add	r2,r3,r2
   1f228:	10800003 	ldbu	r2,0(r2)
   1f22c:	10803fcc 	andi	r2,r2,255
   1f230:	1080201c 	xori	r2,r2,128
   1f234:	10bfe004 	addi	r2,r2,-128
   1f238:	10800be0 	cmpeqi	r2,r2,47
   1f23c:	1000081e 	bne	r2,zero,1f260 <alt_find_file+0xb0>
   1f240:	e0bffe17 	ldw	r2,-8(fp)
   1f244:	e0ffff17 	ldw	r3,-4(fp)
   1f248:	1885883a 	add	r2,r3,r2
   1f24c:	10800003 	ldbu	r2,0(r2)
   1f250:	10803fcc 	andi	r2,r2,255
   1f254:	1080201c 	xori	r2,r2,128
   1f258:	10bfe004 	addi	r2,r2,-128
   1f25c:	10000a1e 	bne	r2,zero,1f288 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1f260:	e0bffd17 	ldw	r2,-12(fp)
   1f264:	10800217 	ldw	r2,8(r2)
   1f268:	e0fffe17 	ldw	r3,-8(fp)
   1f26c:	180d883a 	mov	r6,r3
   1f270:	e17fff17 	ldw	r5,-4(fp)
   1f274:	1009883a 	mov	r4,r2
   1f278:	00090a40 	call	90a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f27c:	1000021e 	bne	r2,zero,1f288 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1f280:	e0bffd17 	ldw	r2,-12(fp)
   1f284:	00000706 	br	1f2a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1f288:	e0bffd17 	ldw	r2,-12(fp)
   1f28c:	10800017 	ldw	r2,0(r2)
   1f290:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f294:	e0fffd17 	ldw	r3,-12(fp)
   1f298:	d0a00a84 	addi	r2,gp,-32726
   1f29c:	18bfcc1e 	bne	r3,r2,1f1d0 <__alt_data_end+0xf001f1d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1f2a0:	0005883a 	mov	r2,zero
}
   1f2a4:	e037883a 	mov	sp,fp
   1f2a8:	dfc00117 	ldw	ra,4(sp)
   1f2ac:	df000017 	ldw	fp,0(sp)
   1f2b0:	dec00204 	addi	sp,sp,8
   1f2b4:	f800283a 	ret

0001f2b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1f2b8:	defffc04 	addi	sp,sp,-16
   1f2bc:	df000315 	stw	fp,12(sp)
   1f2c0:	df000304 	addi	fp,sp,12
   1f2c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1f2c8:	00bffa04 	movi	r2,-24
   1f2cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f2d0:	e03ffd15 	stw	zero,-12(fp)
   1f2d4:	00001906 	br	1f33c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   1f2d8:	00820034 	movhi	r2,2048
   1f2dc:	1084ed04 	addi	r2,r2,5044
   1f2e0:	e0fffd17 	ldw	r3,-12(fp)
   1f2e4:	18c00324 	muli	r3,r3,12
   1f2e8:	10c5883a 	add	r2,r2,r3
   1f2ec:	10800017 	ldw	r2,0(r2)
   1f2f0:	10000f1e 	bne	r2,zero,1f330 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   1f2f4:	00820034 	movhi	r2,2048
   1f2f8:	1084ed04 	addi	r2,r2,5044
   1f2fc:	e0fffd17 	ldw	r3,-12(fp)
   1f300:	18c00324 	muli	r3,r3,12
   1f304:	10c5883a 	add	r2,r2,r3
   1f308:	e0ffff17 	ldw	r3,-4(fp)
   1f30c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1f310:	d0e00e97 	ldw	r3,-32710(gp)
   1f314:	e0bffd17 	ldw	r2,-12(fp)
   1f318:	1880020e 	bge	r3,r2,1f324 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1f31c:	e0bffd17 	ldw	r2,-12(fp)
   1f320:	d0a00e95 	stw	r2,-32710(gp)
      }
      rc = i;
   1f324:	e0bffd17 	ldw	r2,-12(fp)
   1f328:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1f32c:	00000606 	br	1f348 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f330:	e0bffd17 	ldw	r2,-12(fp)
   1f334:	10800044 	addi	r2,r2,1
   1f338:	e0bffd15 	stw	r2,-12(fp)
   1f33c:	e0bffd17 	ldw	r2,-12(fp)
   1f340:	10800810 	cmplti	r2,r2,32
   1f344:	103fe41e 	bne	r2,zero,1f2d8 <__alt_data_end+0xf001f2d8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1f348:	e0bffe17 	ldw	r2,-8(fp)
}
   1f34c:	e037883a 	mov	sp,fp
   1f350:	df000017 	ldw	fp,0(sp)
   1f354:	dec00104 	addi	sp,sp,4
   1f358:	f800283a 	ret

0001f35c <atexit>:
   1f35c:	200b883a 	mov	r5,r4
   1f360:	000f883a 	mov	r7,zero
   1f364:	000d883a 	mov	r6,zero
   1f368:	0009883a 	mov	r4,zero
   1f36c:	001f4381 	jmpi	1f438 <__register_exitproc>

0001f370 <exit>:
   1f370:	defffe04 	addi	sp,sp,-8
   1f374:	000b883a 	mov	r5,zero
   1f378:	dc000015 	stw	r16,0(sp)
   1f37c:	dfc00115 	stw	ra,4(sp)
   1f380:	2021883a 	mov	r16,r4
   1f384:	001f5500 	call	1f550 <__call_exitprocs>
   1f388:	00820034 	movhi	r2,2048
   1f38c:	108b0104 	addi	r2,r2,11268
   1f390:	11000017 	ldw	r4,0(r2)
   1f394:	20800f17 	ldw	r2,60(r4)
   1f398:	10000126 	beq	r2,zero,1f3a0 <exit+0x30>
   1f39c:	103ee83a 	callr	r2
   1f3a0:	8009883a 	mov	r4,r16
   1f3a4:	001f6d00 	call	1f6d0 <_exit>

0001f3a8 <strcpy>:
   1f3a8:	2906b03a 	or	r3,r5,r4
   1f3ac:	18c000cc 	andi	r3,r3,3
   1f3b0:	2005883a 	mov	r2,r4
   1f3b4:	1800161e 	bne	r3,zero,1f410 <strcpy+0x68>
   1f3b8:	29c00017 	ldw	r7,0(r5)
   1f3bc:	02ffbff4 	movhi	r11,65279
   1f3c0:	5affbfc4 	addi	r11,r11,-257
   1f3c4:	02a02074 	movhi	r10,32897
   1f3c8:	01c6303a 	nor	r3,zero,r7
   1f3cc:	3ac9883a 	add	r4,r7,r11
   1f3d0:	52a02004 	addi	r10,r10,-32640
   1f3d4:	20c6703a 	and	r3,r4,r3
   1f3d8:	1a86703a 	and	r3,r3,r10
   1f3dc:	18000c1e 	bne	r3,zero,1f410 <strcpy+0x68>
   1f3e0:	1011883a 	mov	r8,r2
   1f3e4:	41c00015 	stw	r7,0(r8)
   1f3e8:	29400104 	addi	r5,r5,4
   1f3ec:	29c00017 	ldw	r7,0(r5)
   1f3f0:	41800104 	addi	r6,r8,4
   1f3f4:	3011883a 	mov	r8,r6
   1f3f8:	3ad3883a 	add	r9,r7,r11
   1f3fc:	01c6303a 	nor	r3,zero,r7
   1f400:	48c6703a 	and	r3,r9,r3
   1f404:	1a86703a 	and	r3,r3,r10
   1f408:	183ff626 	beq	r3,zero,1f3e4 <__alt_data_end+0xf001f3e4>
   1f40c:	00000106 	br	1f414 <strcpy+0x6c>
   1f410:	100d883a 	mov	r6,r2
   1f414:	28c00003 	ldbu	r3,0(r5)
   1f418:	31800044 	addi	r6,r6,1
   1f41c:	29400044 	addi	r5,r5,1
   1f420:	30ffffc5 	stb	r3,-1(r6)
   1f424:	18c03fcc 	andi	r3,r3,255
   1f428:	18c0201c 	xori	r3,r3,128
   1f42c:	18ffe004 	addi	r3,r3,-128
   1f430:	183ff81e 	bne	r3,zero,1f414 <__alt_data_end+0xf001f414>
   1f434:	f800283a 	ret

0001f438 <__register_exitproc>:
   1f438:	defffa04 	addi	sp,sp,-24
   1f43c:	dc000315 	stw	r16,12(sp)
   1f440:	04020034 	movhi	r16,2048
   1f444:	840b0104 	addi	r16,r16,11268
   1f448:	80c00017 	ldw	r3,0(r16)
   1f44c:	dc400415 	stw	r17,16(sp)
   1f450:	dfc00515 	stw	ra,20(sp)
   1f454:	18805217 	ldw	r2,328(r3)
   1f458:	2023883a 	mov	r17,r4
   1f45c:	10003726 	beq	r2,zero,1f53c <__register_exitproc+0x104>
   1f460:	10c00117 	ldw	r3,4(r2)
   1f464:	010007c4 	movi	r4,31
   1f468:	20c00e16 	blt	r4,r3,1f4a4 <__register_exitproc+0x6c>
   1f46c:	1a000044 	addi	r8,r3,1
   1f470:	8800221e 	bne	r17,zero,1f4fc <__register_exitproc+0xc4>
   1f474:	18c00084 	addi	r3,r3,2
   1f478:	18c7883a 	add	r3,r3,r3
   1f47c:	18c7883a 	add	r3,r3,r3
   1f480:	12000115 	stw	r8,4(r2)
   1f484:	10c7883a 	add	r3,r2,r3
   1f488:	19400015 	stw	r5,0(r3)
   1f48c:	0005883a 	mov	r2,zero
   1f490:	dfc00517 	ldw	ra,20(sp)
   1f494:	dc400417 	ldw	r17,16(sp)
   1f498:	dc000317 	ldw	r16,12(sp)
   1f49c:	dec00604 	addi	sp,sp,24
   1f4a0:	f800283a 	ret
   1f4a4:	00800034 	movhi	r2,0
   1f4a8:	10800004 	addi	r2,r2,0
   1f4ac:	10002626 	beq	r2,zero,1f548 <__register_exitproc+0x110>
   1f4b0:	01006404 	movi	r4,400
   1f4b4:	d9400015 	stw	r5,0(sp)
   1f4b8:	d9800115 	stw	r6,4(sp)
   1f4bc:	d9c00215 	stw	r7,8(sp)
   1f4c0:	00000000 	call	0 <__alt_mem_onchip_memory>
   1f4c4:	d9400017 	ldw	r5,0(sp)
   1f4c8:	d9800117 	ldw	r6,4(sp)
   1f4cc:	d9c00217 	ldw	r7,8(sp)
   1f4d0:	10001d26 	beq	r2,zero,1f548 <__register_exitproc+0x110>
   1f4d4:	81000017 	ldw	r4,0(r16)
   1f4d8:	10000115 	stw	zero,4(r2)
   1f4dc:	02000044 	movi	r8,1
   1f4e0:	22405217 	ldw	r9,328(r4)
   1f4e4:	0007883a 	mov	r3,zero
   1f4e8:	12400015 	stw	r9,0(r2)
   1f4ec:	20805215 	stw	r2,328(r4)
   1f4f0:	10006215 	stw	zero,392(r2)
   1f4f4:	10006315 	stw	zero,396(r2)
   1f4f8:	883fde26 	beq	r17,zero,1f474 <__alt_data_end+0xf001f474>
   1f4fc:	18c9883a 	add	r4,r3,r3
   1f500:	2109883a 	add	r4,r4,r4
   1f504:	1109883a 	add	r4,r2,r4
   1f508:	21802215 	stw	r6,136(r4)
   1f50c:	01800044 	movi	r6,1
   1f510:	12406217 	ldw	r9,392(r2)
   1f514:	30cc983a 	sll	r6,r6,r3
   1f518:	4992b03a 	or	r9,r9,r6
   1f51c:	12406215 	stw	r9,392(r2)
   1f520:	21c04215 	stw	r7,264(r4)
   1f524:	01000084 	movi	r4,2
   1f528:	893fd21e 	bne	r17,r4,1f474 <__alt_data_end+0xf001f474>
   1f52c:	11006317 	ldw	r4,396(r2)
   1f530:	218cb03a 	or	r6,r4,r6
   1f534:	11806315 	stw	r6,396(r2)
   1f538:	003fce06 	br	1f474 <__alt_data_end+0xf001f474>
   1f53c:	18805304 	addi	r2,r3,332
   1f540:	18805215 	stw	r2,328(r3)
   1f544:	003fc606 	br	1f460 <__alt_data_end+0xf001f460>
   1f548:	00bfffc4 	movi	r2,-1
   1f54c:	003fd006 	br	1f490 <__alt_data_end+0xf001f490>

0001f550 <__call_exitprocs>:
   1f550:	defff504 	addi	sp,sp,-44
   1f554:	df000915 	stw	fp,36(sp)
   1f558:	dd400615 	stw	r21,24(sp)
   1f55c:	dc800315 	stw	r18,12(sp)
   1f560:	dfc00a15 	stw	ra,40(sp)
   1f564:	ddc00815 	stw	r23,32(sp)
   1f568:	dd800715 	stw	r22,28(sp)
   1f56c:	dd000515 	stw	r20,20(sp)
   1f570:	dcc00415 	stw	r19,16(sp)
   1f574:	dc400215 	stw	r17,8(sp)
   1f578:	dc000115 	stw	r16,4(sp)
   1f57c:	d9000015 	stw	r4,0(sp)
   1f580:	2839883a 	mov	fp,r5
   1f584:	04800044 	movi	r18,1
   1f588:	057fffc4 	movi	r21,-1
   1f58c:	00820034 	movhi	r2,2048
   1f590:	108b0104 	addi	r2,r2,11268
   1f594:	12000017 	ldw	r8,0(r2)
   1f598:	45005217 	ldw	r20,328(r8)
   1f59c:	44c05204 	addi	r19,r8,328
   1f5a0:	a0001c26 	beq	r20,zero,1f614 <__call_exitprocs+0xc4>
   1f5a4:	a0800117 	ldw	r2,4(r20)
   1f5a8:	15ffffc4 	addi	r23,r2,-1
   1f5ac:	b8000d16 	blt	r23,zero,1f5e4 <__call_exitprocs+0x94>
   1f5b0:	14000044 	addi	r16,r2,1
   1f5b4:	8421883a 	add	r16,r16,r16
   1f5b8:	8421883a 	add	r16,r16,r16
   1f5bc:	84402004 	addi	r17,r16,128
   1f5c0:	a463883a 	add	r17,r20,r17
   1f5c4:	a421883a 	add	r16,r20,r16
   1f5c8:	e0001e26 	beq	fp,zero,1f644 <__call_exitprocs+0xf4>
   1f5cc:	80804017 	ldw	r2,256(r16)
   1f5d0:	e0801c26 	beq	fp,r2,1f644 <__call_exitprocs+0xf4>
   1f5d4:	bdffffc4 	addi	r23,r23,-1
   1f5d8:	843fff04 	addi	r16,r16,-4
   1f5dc:	8c7fff04 	addi	r17,r17,-4
   1f5e0:	bd7ff91e 	bne	r23,r21,1f5c8 <__alt_data_end+0xf001f5c8>
   1f5e4:	00800034 	movhi	r2,0
   1f5e8:	10800004 	addi	r2,r2,0
   1f5ec:	10000926 	beq	r2,zero,1f614 <__call_exitprocs+0xc4>
   1f5f0:	a0800117 	ldw	r2,4(r20)
   1f5f4:	1000301e 	bne	r2,zero,1f6b8 <__call_exitprocs+0x168>
   1f5f8:	a0800017 	ldw	r2,0(r20)
   1f5fc:	10003226 	beq	r2,zero,1f6c8 <__call_exitprocs+0x178>
   1f600:	a009883a 	mov	r4,r20
   1f604:	98800015 	stw	r2,0(r19)
   1f608:	00000000 	call	0 <__alt_mem_onchip_memory>
   1f60c:	9d000017 	ldw	r20,0(r19)
   1f610:	a03fe41e 	bne	r20,zero,1f5a4 <__alt_data_end+0xf001f5a4>
   1f614:	dfc00a17 	ldw	ra,40(sp)
   1f618:	df000917 	ldw	fp,36(sp)
   1f61c:	ddc00817 	ldw	r23,32(sp)
   1f620:	dd800717 	ldw	r22,28(sp)
   1f624:	dd400617 	ldw	r21,24(sp)
   1f628:	dd000517 	ldw	r20,20(sp)
   1f62c:	dcc00417 	ldw	r19,16(sp)
   1f630:	dc800317 	ldw	r18,12(sp)
   1f634:	dc400217 	ldw	r17,8(sp)
   1f638:	dc000117 	ldw	r16,4(sp)
   1f63c:	dec00b04 	addi	sp,sp,44
   1f640:	f800283a 	ret
   1f644:	a0800117 	ldw	r2,4(r20)
   1f648:	80c00017 	ldw	r3,0(r16)
   1f64c:	10bfffc4 	addi	r2,r2,-1
   1f650:	15c01426 	beq	r2,r23,1f6a4 <__call_exitprocs+0x154>
   1f654:	80000015 	stw	zero,0(r16)
   1f658:	183fde26 	beq	r3,zero,1f5d4 <__alt_data_end+0xf001f5d4>
   1f65c:	95c8983a 	sll	r4,r18,r23
   1f660:	a0806217 	ldw	r2,392(r20)
   1f664:	a5800117 	ldw	r22,4(r20)
   1f668:	2084703a 	and	r2,r4,r2
   1f66c:	10000b26 	beq	r2,zero,1f69c <__call_exitprocs+0x14c>
   1f670:	a0806317 	ldw	r2,396(r20)
   1f674:	2088703a 	and	r4,r4,r2
   1f678:	20000c1e 	bne	r4,zero,1f6ac <__call_exitprocs+0x15c>
   1f67c:	89400017 	ldw	r5,0(r17)
   1f680:	d9000017 	ldw	r4,0(sp)
   1f684:	183ee83a 	callr	r3
   1f688:	a0800117 	ldw	r2,4(r20)
   1f68c:	15bfbf1e 	bne	r2,r22,1f58c <__alt_data_end+0xf001f58c>
   1f690:	98800017 	ldw	r2,0(r19)
   1f694:	153fcf26 	beq	r2,r20,1f5d4 <__alt_data_end+0xf001f5d4>
   1f698:	003fbc06 	br	1f58c <__alt_data_end+0xf001f58c>
   1f69c:	183ee83a 	callr	r3
   1f6a0:	003ff906 	br	1f688 <__alt_data_end+0xf001f688>
   1f6a4:	a5c00115 	stw	r23,4(r20)
   1f6a8:	003feb06 	br	1f658 <__alt_data_end+0xf001f658>
   1f6ac:	89000017 	ldw	r4,0(r17)
   1f6b0:	183ee83a 	callr	r3
   1f6b4:	003ff406 	br	1f688 <__alt_data_end+0xf001f688>
   1f6b8:	a0800017 	ldw	r2,0(r20)
   1f6bc:	a027883a 	mov	r19,r20
   1f6c0:	1029883a 	mov	r20,r2
   1f6c4:	003fb606 	br	1f5a0 <__alt_data_end+0xf001f5a0>
   1f6c8:	0005883a 	mov	r2,zero
   1f6cc:	003ffb06 	br	1f6bc <__alt_data_end+0xf001f6bc>

0001f6d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1f6d0:	defffd04 	addi	sp,sp,-12
   1f6d4:	df000215 	stw	fp,8(sp)
   1f6d8:	df000204 	addi	fp,sp,8
   1f6dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1f6e0:	0001883a 	nop
   1f6e4:	e0bfff17 	ldw	r2,-4(fp)
   1f6e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1f6ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1f6f0:	10000226 	beq	r2,zero,1f6fc <_exit+0x2c>
    ALT_SIM_FAIL();
   1f6f4:	002af070 	cmpltui	zero,zero,43969
   1f6f8:	00000106 	br	1f700 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1f6fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1f700:	003fff06 	br	1f700 <__alt_data_end+0xf001f700>
