/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <system.h>
#include <altera_avalon_pio_regs.h>
#include "FreeRTOS/FreeRTOS.h"
#include "FreeRTOS/task.h"
#include "FreeRTOS/queue.h"
#include "altera_up_avalon_ps2.h"

#define Switch_Control_Param    ( ( void * ) 0x12345678 )
#define mainTask_PRIORITY (tskIDLE_PRIORITY + 1)

int Current_Switch_State, Current_Freq, Freq_Val, Current_ROC_Freq, Maintenance,
		Current_Stable, Thresh_Val, Prev_Stable, Ld_Manage_State, Init_Load;
int Prev_Five_Freq[5];
TaskHandle_t switch_control_handle;
//TaskHandle_t switch_control_handle;
//TaskHandle_t switch_control_handle;
//TaskHandle_t switch_control_handle;


//static void Load_Management_Task(void *pvParams);
//static void Stability_Monitor_Task(void *pvParams);
static void Keyboard_Task(void *pvParams);
static void VGA_Task(void *pvParams);
static void Load_LED_Ctrl_Task(void *pvParams);
static void Switch_Control_Task(void *pvParams);

int main(void) {
	xTaskCreate(Switch_Control_Task, 'Switch', configMINIMAL_STACK_SIZE, Switch_Control_Param, mainTask_PRIORITY, switch_control_handle);
	xTaskCreate(Load_LED_Ctrl_Task,'LEDs',configMINIMAL_STACK_SIZE,NULL,mainTask_PRIORITY,NULL);
	xTaskCreate(Keyboard_Task,'Keyboard',configMINIMAL_STACK_SIZE,NULL,mainTask_PRIORITY,NULL);
	vTaskStartScheduler();
	for(;;);
}


static void Switch_Control_Task(void *pvParams) {
	while (1) {
		//printf("SwitchTask\n"); //Debug version
		Current_Switch_State = IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE);
		vTaskDelay(pdMS_TO_TICKS(200));
	}
}
static void Load_LED_Ctrl_Task(void *pvParams) {
	while (1) {
		//printf("LED Control Task \n");
		IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, Current_Switch_State);
		vTaskDelay(pdMS_TO_TICKS(200));
	}
}

static void Keyboard_Task(void *pvParams) {
	char byte;
	alt_up_ps2_read_data_byte_timeout(ps2_device,&byte);
	while (1) {

		printf(val);
	}
}
//static void VGA_Task(void *pvParams) {
//}

